import csv
import re
from datetime import datetime

def extract_metadata(text):
    metadata = {
        "artifact_id": "",
        "artifact_name": "",
        "discovery.site": "",
        "discovery.date_found": "",
        "discovery.discoverer": "",
        "origin.culture": "",
        "origin.estimated_age": "",
        "origin.materials": "",
        "dimensions.length_cm": "",
        "dimensions.width_cm": "",
        "dimensions.height_cm": "",
        "condition.status": "",
        "condition.restoration_needed": "",
        "current_location.museum": "",
        "current_location.exhibit_hall": ""
    }
    
    # Example regex patterns
    patterns = {
        "artifact_id": r"ID[:\s]+(\w+)",
        "artifact_name": r"Name[:\s]+([\w\s]+)",
        "discovery.site": r"Found at[:\s]+([\w\s,]+)",
        "discovery.date_found": r"Date found[:\s]+(\d{4}-\d{2}-\d{2})",
        "discovery.discoverer": r"Discovered by[:\s]+([\w\s]+)",
        "origin.culture": r"Culture[:\s]+([\w\s]+)",
        "origin.estimated_age": r"Age[:\s]+(\d+)",
        "origin.materials": r"Materials[:\s]+([\w\s;]+)",
        "dimensions.length_cm": r"Length[:\s]+([\d.]+) cm",
        "dimensions.width_cm": r"Width[:\s]+([\d.]+) cm",
        "dimensions.height_cm": r"Height[:\s]+([\d.]+) cm",
        "condition.status": r"Condition[:\s]+([\w\s]+)",
        "condition.restoration_needed": r"Restoration needed[:\s]+(true|false)",
        "current_location.museum": r"Museum[:\s]+([\w\s]+)",
        "current_location.exhibit_hall": r"Exhibit Hall[:\s]+([\w\s]+)"
    }
    
    for field, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            value = match.group(1).strip()
            if field == "discovery.date_found":
                try:
                    datetime.strptime(value, "%Y-%m-%d")
                    metadata[field] = value
                except ValueError:
                    metadata[field] = ""
            elif field == "origin.estimated_age":
                metadata[field] = int(value)
            elif field == "condition.restoration_needed":
                metadata[field] = value.lower() == "true"
            elif field == "origin.materials":
                metadata[field] = ";".join([m.strip() for m in value.split(";")])
            elif field in ["dimensions.length_cm", "dimensions.width_cm", "dimensions.height_cm"]:
                metadata[field] = float(value) if '.' in value else int(value)
            else:
                metadata[field] = value
    return metadata

def write_csv(metadata_list, filename="artifacts.csv"):
    fieldnames = [
        "artifact_id",
        "artifact_name",
        "discovery.site",
        "discovery.date_found",
        "discovery.discoverer",
        "origin.culture",
        "origin.estimated_age",
        "origin.materials",
        "dimensions.length_cm",
        "dimensions.width_cm",
        "dimensions.height_cm",
        "condition.status",
        "condition.restoration_needed",
        "current_location.museum",
        "current_location.exhibit_hall"
    ]
    
    with open(filename, mode='w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for metadata in metadata_list:
            writer.writerow(metadata)

if __name__ == "__main__":
    # Example textual descriptions
    texts = [
        """
        ID: A123
        Name: Ancient Vase
        Found at: Athens, Greece
        Date found: 2023-04-15
        Discovered by: Dr. John Smith
        Culture: Minoan
        Age: 3500
        Materials: Clay;Paint
        Length: 25.5 cm
        Width: 10 cm
        Height: 30 cm
        Condition: Intact
        Restoration needed: false
        Museum: National Archaeological Museum
        Exhibit Hall: Hall 3
        """
        # Add more descriptions as needed
    ]
    
    metadata_list = [extract_metadata(text) for text in texts]
    write_csv(metadata_list)
