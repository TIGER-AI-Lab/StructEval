import csv
import uuid
from datetime import datetime

def artifact_to_csv_row(artifact):
    """
    Given a dictionary 'artifact' with keys:
    - artifact_name
    - origin_civilization
    - discovery_date (string in any parseable format)
    - material_composition (list or semicolon-separated string)
    - estimated_age_years (int)
    - current_location
    - condition_status
    - dimensions_height_cm (float or int)
    - dimensions_width_cm (float or int)
    - dimensions_depth_cm (float or int)
    - notable_features (list or semicolon-separated string)
    - restoration_history
    - associated_myths (list or semicolon-separated string)
    - exhibit_status

    Returns a list representing a CSV row with the required fields.
    """

    # Generate unique artifact_id as a UUID4 hex string
    artifact_id = uuid.uuid4().hex

    # Parse and format discovery_date as YYYY-MM-DD
    try:
        dt = datetime.strptime(artifact['discovery_date'], '%Y-%m-%d')
    except Exception:
        # fallback: try to parse with dateutil if available or leave as is
        try:
            from dateutil.parser import parse
            dt = parse(artifact['discovery_date'])
        except Exception:
            dt = None
    discovery_date = dt.strftime('%Y-%m-%d') if dt else ''

    # Normalize material_composition to semicolon-separated string
    if isinstance(artifact['material_composition'], list):
        material_composition = ';'.join(artifact['material_composition'])
    else:
        material_composition = artifact['material_composition']

    # Normalize notable_features
    if isinstance(artifact['notable_features'], list):
        notable_features = ';'.join(artifact['notable_features'])
    else:
        notable_features = artifact['notable_features']

    # Normalize associated_myths
    if isinstance(artifact['associated_myths'], list):
        associated_myths = ';'.join(artifact['associated_myths'])
    else:
        associated_myths = artifact['associated_myths']

    # Compose CSV row
    row = [
        artifact_id,
        artifact['artifact_name'],
        artifact['origin_civilization'],
        discovery_date,
        material_composition,
        str(int(artifact['estimated_age_years'])),
        artifact['current_location'],
        artifact['condition_status'],
        str(float(artifact['dimensions_height_cm'])),
        str(float(artifact['dimensions_width_cm'])),
        str(float(artifact['dimensions_depth_cm'])),
        notable_features,
        artifact['restoration_history'],
        associated_myths,
        artifact['exhibit_status']
    ]

    return row

# Example usage:
artifact_example = {
    'artifact_name': 'Golden Mask of Tutankhamun',
    'origin_civilization': 'Ancient Egypt',
    'discovery_date': '1922-11-04',
    'material_composition': ['gold', 'lapis lazuli', 'glass'],
    'estimated_age_years': 3300,
    'current_location': 'Egyptian Museum, Cairo',
    'condition_status': 'intact',
    'dimensions_height_cm': 54.0,
    'dimensions_width_cm': 39.3,
    'dimensions_depth_cm': 49.0,
    'notable_features': ['intricate gold work', 'inlaid semi-precious stones', 'funerary mask'],
    'restoration_history': 'restored in 1970s',
    'associated_myths': ['curse of the pharaohs'],
    'exhibit_status': 'on public display'
}

# Write CSV header and one example row
header = [
    'artifact_id',
    'artifact_name',
    'origin_civilization',
    'discovery_date',
    'material_composition',
    'estimated_age_years',
    'current_location',
    'condition_status',
    'dimensions_height_cm',
    'dimensions_width_cm',
    'dimensions_depth_cm',
    'notable_features',
    'restoration_history',
    'associated_myths',
    'exhibit_status'
]

with open('artifact_data.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(header)
    writer.writerow(artifact_to_csv_row(artifact_example))
