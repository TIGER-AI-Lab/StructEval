[
  {
    "task_id": "000102",
    "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a bookstore inventory summary.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Bookstore Inventory\" at the top of the component.\n- Use a <div> element with a class name of 'inventory-wrapper' to contain all the component elements.\n- Create exactly 3 sections, each wrapped in a <section> element, to organize distinct data groups.\n- In the first section, include a <table> element displaying exactly 4 rows and 2 columns; the first column for book titles and the second column for their prices.\n- In the second section, display a paragraph (<p>) that shows the input text content; apply an inline style to set the font-style as oblique.\n- In the third section, include an ordered list (<ol>) containing exactly 3 list items (<li>), each detailing a unique bookstore feature.\n- In the table from the first section, ensure that one of the price values is rendered in green by applying a CSS class called 'price-highlight' to that cell.\n- Place a button element labeled \"Update Inventory\" at the bottom of the component inside a <div> with the class 'update-wrapper' for proper alignment.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered heading at the top?",
        "answer": "Bookstore Inventory"
      },
      {
        "question": "How many sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many rows does the table in the first section display?",
        "answer": "4"
      },
      {
        "question": "How many columns does the table in the first section have?",
        "answer": "2"
      },
      {
        "question": "What unique styling is applied to one of the price cells in the table?",
        "answer": "Displayed in green"
      },
      {
        "question": "How is the text content in the second section styled?",
        "answer": "Oblique font style"
      },
      {
        "question": "How many items are listed in the ordered list in the third section?",
        "answer": "3"
      },
      {
        "question": "What label does the button at the bottom of the component display?",
        "answer": "Update Inventory"
      }
    ],
    "raw_output_metric": [
      "Bookstore Inventory",
      "inventory-wrapper",
      "<section>",
      "<table>",
      "<tr>",
      "<td>",
      "price-highlight",
      "font-style: oblique;",
      "<p>",
      "<ol>",
      "<li>",
      "Update Inventory",
      "update-wrapper"
    ],
    "rendering": true,
    "generation": "<code>\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-bookstore-inventory',\n  templateUrl: './bookstore-inventory.component.html',\n  styleUrls: ['./bookstore-inventory.component.css']\n})\nexport class BookstoreInventoryComponent {\n  inputText = 'This is the input text content.';\n\n  features = [\n    'Free shipping on orders over $50',\n    '30-day return policy',\n    'Secure payment processing'\n  ];\n\n  books = [\n    { title: 'Book 1', price: 19.99 },\n    { title: 'Book 2', price: 9.99 },\n    { title: 'Book 3', price: 29.99 },\n    { title: 'Book 4', price: 39.99 }\n  ];\n}\n</code>\n\n<code>\n&lt;div class=\"inventory-wrapper\"&gt;\n  &lt;h1&gt;Bookstore Inventory&lt;/h1&gt;\n  &lt;section&gt;\n    &lt;table&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Title&lt;/th&gt;\n        &lt;th&gt;Price&lt;/th&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;{{ books[0].title }}&lt;/td&gt;\n        &lt;td [class.price-highlight]=\"books[0].price === 29.99\" &gt;{{ books[0].price }}&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;{{ books[1].title }}&lt;/td&gt;\n        &lt;td&gt;{{ books[1].price }}&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;{{ books[2].title }}&lt;/td&gt;\n        &lt;td&gt;{{ books[2].price }}&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;{{ books[3].title }}&lt;/td&gt;\n        &lt;td&gt;{{ books[3].price }}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;p style=\"font-style: oblique;\"&gt;{{ inputText }}&lt;/p&gt;\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;ol&gt;\n      &lt;li&gt;{{ features[0] }}&lt;/li&gt;\n      &lt;li&gt;{{ features[1] }}&lt;/li&gt;\n      &lt;li&gt;{{ features[2] }}&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/section&gt;\n  &lt;div class=\"update-wrapper\"&gt;\n    &lt;button&gt;Update Inventory&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code>\n\n<code>\n.price-highlight {\n  color: green;\n}\n\n.inventory-wrapper {\n  text-align: center;\n}\n\n.update-wrapper {\n  text-align: center;\n  margin-top: 20px;\n}\n</code>",
    "useVisualRendering": true,
    "render_score": 1,
    "raw_output_eval": [
      "True",
      "True",
      "False",
      "False",
      "False",
      "False",
      "True",
      "True",
      "False",
      "False",
      "False",
      "True",
      "True"
    ],
    "raw_output_score": 0.46153846153846156,
    "VQA_score": 0.0,
    "VQAeval": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "final_eval_score": 0.25
  },
  {
    "task_id": "000104",
    "query": "Please output Angular:\n\nTask:\nTransform the provided text into an Angular component that displays a store inventory dashboard.\n\nFeature Requirements:\n- Render a centered page header using an <h1> element with the text 'Inventory Dashboard'.\n- Wrap the main content in a <section> element with the class name 'inventory-section'.\n- Within the section, create exactly 3 distinct <div> elements, each representing a different inventory category.\n- Each inventory category <div> must include a title in an <h3> element with a unique category name and a table that lists items.\n- Each table should have exactly 2 columns labeled 'Item' and 'Stock Count', respectively.\n- Populate every table with exactly 4 rows, where each row displays an item's name and its corresponding stock count derived from the input text.\n- Ensure one of the stock count values in any table is styled using an inline style attribute that sets the color to blue.\n- Include a footer using a <footer> element that holds a button labeled 'Update Inventory', which is positioned inside a <div> with the class 'footer-button'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered page header?",
        "answer": "Inventory Dashboard"
      },
      {
        "question": "How many inventory category blocks are present on the page?",
        "answer": "3"
      },
      {
        "question": "How is the main content of the inventory dashboard wrapped?",
        "answer": "Inside a section element with the class 'inventory-section'"
      },
      {
        "question": "What are the column headers in each inventory table?",
        "answer": "Item and Stock Count"
      },
      {
        "question": "How many rows of inventory items are shown in each table?",
        "answer": "4"
      },
      {
        "question": "Is any stock count styled differently, and if so, what color is used?",
        "answer": "Yes, one stock count value is styled with the color blue"
      },
      {
        "question": "Where is the 'Update Inventory' button located?",
        "answer": "Inside a footer element within a div of class 'footer-button'"
      }
    ],
    "raw_output_metric": [
      "Inventory Dashboard",
      "inventory-section",
      "<h1>",
      "<section",
      "<div>",
      "<h3>",
      "Item",
      "Stock Count",
      "color: blue",
      "<footer>",
      "footer-button",
      "Update Inventory"
    ],
    "rendering": true,
    "generation": "<code>\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-inventory-dashboard',\n  templateUrl: './inventory-dashboard.component.html',\n  styleUrls: ['./inventory-dashboard.component.css']\n})\nexport class InventoryDashboardComponent {\n  inventoryData = {\n    electronics: [\n      { item: 'Laptop', stockCount: 10 },\n      { item: 'Smartphone', stockCount: 20 },\n      { item: 'Tablet', stockCount: 15 },\n      { item: 'Headphones', stockCount: 25 }\n    ],\n    clothing: [\n      { item: 'Shirt', stockCount: 30 },\n      { item: 'Pants', stockCount: 40 },\n      { item: 'Dress', stockCount: 50 },\n      { item: 'Jacket', stockCount: 60 }\n    ],\n    homeGoods: [\n      { item: 'Bed', stockCount: 70 },\n      { item: 'Chair', stockCount: 80 },\n      { item: 'Table', stockCount: 90 },\n      { item: 'Desk', stockCount: 100 }\n    ]\n  };\n\n  constructor() { }\n}\n</code>\n\n<code>\n&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"page-header\"&gt;Inventory Dashboard&lt;/h1&gt;\n  &lt;section class=\"inventory-section\"&gt;\n    &lt;div class=\"inventory-category\"&gt;\n      &lt;h3&gt;Electronics&lt;/h3&gt;\n      &lt;table&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Item&lt;/th&gt;\n          &lt;th&gt;Stock Count&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr *ngFor=\"let item of inventoryData.electronics\"&gt;\n          &lt;td&gt;{{ item.item }}&lt;/td&gt;\n          &lt;td style=\"color: blue;\"&gt;{{ item.stockCount }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n    &lt;div class=\"inventory-category\"&gt;\n      &lt;h3&gt;Clothing&lt;/h3&gt;\n      &lt;table&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Item&lt;/th&gt;\n          &lt;th&gt;Stock Count&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr *ngFor=\"let item of inventoryData.clothing\"&gt;\n          &lt;td&gt;{{ item.item }}&lt;/td&gt;\n          &lt;td&gt;{{ item.stockCount }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n    &lt;div class=\"inventory-category\"&gt;\n      &lt;h3&gt;Home Goods&lt;/h3&gt;\n      &lt;table&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Item&lt;/th&gt;\n          &lt;th&gt;Stock Count&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr *ngFor=\"let item of inventoryData.homeGoods\"&gt;\n          &lt;td&gt;{{ item.item }}&lt;/td&gt;\n          &lt;td&gt;{{ item.stockCount }}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  &lt;/section&gt;\n  &lt;footer&gt;\n    &lt;div class=\"footer-button\"&gt;\n      &lt;button&gt;Update Inventory&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/footer&gt;\n&lt;/div&gt;\n</code>",
    "useVisualRendering": true,
    "render_score": 1,
    "raw_output_eval": [
      "True",
      "True",
      "False",
      "False",
      "False",
      "False",
      "True",
      "True",
      "True",
      "False",
      "True",
      "True"
    ],
    "raw_output_score": 0.5833333333333334,
    "VQA_score": 0.0,
    "VQAeval": [
      false,
      null,
      null,
      null,
      null,
      null,
      null
    ],
    "final_eval_score": 0.26
  }
]