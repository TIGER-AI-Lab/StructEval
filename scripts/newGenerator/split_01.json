[
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the given text input into an Angular component that presents a detailed user report view.\n\nFeature Requirements:\n- Include a centered header using an <h1> element displaying the text \"User Report Dashboard\".\n- Create a <div> container with a class name of 'report-wrapper' to encapsulate all component content.\n- Construct exactly 2 distinct sections: the first for user statistics and the second for activity logs.\n- The first section must render a table (<table>) element featuring exactly 2 rows and 3 columns; ensure the header row uses <th> elements to label each column.\n- Within the table, assign a CSS class named 'status-critical' to one specific cell to highlight an important statistic in bold text.\n- The second section should display a paragraph (<p>) with an inline style that sets the text color to green and the font style to italic.\n- Position a button labeled \"Update Report\" at the bottom using a <div> with a class 'button-area' for alignment.\n- Use Angular-specific directives to bind each data element appropriately to the text input.",
            "task_id": "000100",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered header?",
                "How many main sections are present in the layout?",
                "What does the first section display?",
                "How many columns are used in the header row of the table?",
                "Which cell within the table is highlighted with a special style?",
                "What are the styling details of the paragraph in the second section?",
                "What is the label on the button located at the bottom of the layout?"
            ],
            "VQA_answers": [
                "User Report Dashboard",
                "2",
                "A table containing user statistics with 2 rows and 3 columns",
                "3",
                "One cell marked with the 'status-critical' class and rendered in bold",
                "The text is green and italicized",
                "Update Report"
            ],
            "raw_output_metric": [
                "User Report Dashboard",
                "report-wrapper",
                "status-critical",
                "Update Report",
                "button-area",
                "<h1>",
                "<div class=\"report-wrapper\">",
                "<table>",
                "<th>",
                "<p",
                "color: green",
                "font-style: italic",
                "{{"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000100_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the given text input into an Angular component that presents a detailed user report view.\n\nFeature Requirements:\n- Include a centered header using an <h1> element displaying the text \"User Report Dashboard\".\n- Create a <div> container with a class name of 'report-wrapper' to encapsulate all component content.\n- Construct exactly 2 distinct sections: the first for user statistics and the second for activity logs.\n- The first section must render a table (<table>) element featuring exactly 2 rows and 3 columns; ensure the header row uses <th> elements to label each column.\n- Within the table, assign a CSS class named 'status-critical' to one specific cell to highlight an important statistic in bold text.\n- The second section should display a paragraph (<p>) with an inline style that sets the text color to green and the font style to italic.\n- Position a button labeled \"Update Report\" at the bottom using a <div> with a class 'button-area' for alignment.\n- Use Angular-specific directives to bind each data element appropriately to the text input."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000100_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Report Dashboard",
                                "report-wrapper",
                                "status-critical",
                                "Update Report",
                                "button-area",
                                "<h1>",
                                "<div class=\"report-wrapper\">",
                                "<table>",
                                "<th>",
                                "<p",
                                "color: green",
                                "font-style: italic",
                                "{{"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000100_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000100_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered header?",
                                "How many main sections are present in the layout?",
                                "What does the first section display?",
                                "How many columns are used in the header row of the table?",
                                "Which cell within the table is highlighted with a special style?",
                                "What are the styling details of the paragraph in the second section?",
                                "What is the label on the button located at the bottom of the layout?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000100_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Report Dashboard",
                                "2",
                                "A table containing user statistics with 2 rows and 3 columns",
                                "3",
                                "One cell marked with the 'status-critical' class and rendered in bold",
                                "The text is green and italicized",
                                "Update Report"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the given text input into an Angular component that renders an order summary display.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Order Summary'.\n- Create a <div> element serving as the main container with the class name 'order-container'.\n- Divide the component into exactly 3 distinct sections, each wrapped in its own <section> element.\n- The first section must render a table with a header row containing two columns labeled 'Item' and 'Quantity', followed by exactly 2 data rows populated with unique order details from the input.\n- The second section must display an <h3> element with the text 'Total Cost', followed by a paragraph (<p>) showing a calculated total; style this paragraph with an inline style that sets the text color to blue.\n- The third section must contain a <div> element with the class 'button-section' that holds a button element labeled 'Submit Order'.\n- Each table data cell in the first section should include text formatted as a label and a corresponding value separated by a hyphen (-).\n- Ensure that one of the table data cells in the first section includes a CSS class called 'highlight-item' which visually emphasizes its text with a bold font style.\n- Place all elements properly nested and ordered to reflect a clear structural hierarchy.\n- Do not include any external assets or images in the component.",
            "task_id": "000101",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered title displayed at the top of the component?",
                "What is the class name of the main container that wraps the content?",
                "How many distinct sections are rendered in the component?",
                "What header labels are displayed in the table within the first section?",
                "How many data rows are shown in the table below the headers?",
                "Which table cell is visually emphasized with bold styling?",
                "What is the text displayed in the heading immediately above the total cost display?",
                "What inline style is applied to the paragraph showing the total cost?",
                "What label is shown on the button within the third section?"
            ],
            "VQA_answers": [
                "Order Summary",
                "order-container",
                "3",
                "Item and Quantity",
                "2",
                "The cell with the 'highlight-item' class",
                "Total Cost",
                "Text color is set to blue",
                "Submit Order"
            ],
            "raw_output_metric": [
                "Order Summary",
                "order-container",
                "section",
                "table",
                "Item",
                "Quantity",
                "highlight-item",
                "Total Cost",
                "color: blue;",
                "button-section",
                "Submit Order"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000101_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the given text input into an Angular component that renders an order summary display.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Order Summary'.\n- Create a <div> element serving as the main container with the class name 'order-container'.\n- Divide the component into exactly 3 distinct sections, each wrapped in its own <section> element.\n- The first section must render a table with a header row containing two columns labeled 'Item' and 'Quantity', followed by exactly 2 data rows populated with unique order details from the input.\n- The second section must display an <h3> element with the text 'Total Cost', followed by a paragraph (<p>) showing a calculated total; style this paragraph with an inline style that sets the text color to blue.\n- The third section must contain a <div> element with the class 'button-section' that holds a button element labeled 'Submit Order'.\n- Each table data cell in the first section should include text formatted as a label and a corresponding value separated by a hyphen (-).\n- Ensure that one of the table data cells in the first section includes a CSS class called 'highlight-item' which visually emphasizes its text with a bold font style.\n- Place all elements properly nested and ordered to reflect a clear structural hierarchy.\n- Do not include any external assets or images in the component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000101_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Order Summary",
                                "order-container",
                                "section",
                                "table",
                                "Item",
                                "Quantity",
                                "highlight-item",
                                "Total Cost",
                                "color: blue;",
                                "button-section",
                                "Submit Order"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000101_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000101_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top of the component?",
                                "What is the class name of the main container that wraps the content?",
                                "How many distinct sections are rendered in the component?",
                                "What header labels are displayed in the table within the first section?",
                                "How many data rows are shown in the table below the headers?",
                                "Which table cell is visually emphasized with bold styling?",
                                "What is the text displayed in the heading immediately above the total cost display?",
                                "What inline style is applied to the paragraph showing the total cost?",
                                "What label is shown on the button within the third section?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000101_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Order Summary",
                                "order-container",
                                "3",
                                "Item and Quantity",
                                "2",
                                "The cell with the 'highlight-item' class",
                                "Total Cost",
                                "Text color is set to blue",
                                "Submit Order"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a bookstore inventory summary.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Bookstore Inventory\" at the top of the component.\n- Use a <div> element with a class name of 'inventory-wrapper' to contain all the component elements.\n- Create exactly 3 sections, each wrapped in a <section> element, to organize distinct data groups.\n- In the first section, include a <table> element displaying exactly 4 rows and 2 columns; the first column for book titles and the second column for their prices.\n- In the second section, display a paragraph (<p>) that shows the input text content; apply an inline style to set the font-style as oblique.\n- In the third section, include an ordered list (<ol>) containing exactly 3 list items (<li>), each detailing a unique bookstore feature.\n- In the table from the first section, ensure that one of the price values is rendered in green by applying a CSS class called 'price-highlight' to that cell.\n- Place a button element labeled \"Update Inventory\" at the bottom of the component inside a <div> with the class 'update-wrapper' for proper alignment.",
            "task_id": "000102",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered heading at the top?",
                "How many sections are present in the component?",
                "How many rows does the table in the first section display?",
                "How many columns does the table in the first section have?",
                "What unique styling is applied to one of the price cells in the table?",
                "How is the text content in the second section styled?",
                "How many items are listed in the ordered list in the third section?",
                "What label does the button at the bottom of the component display?"
            ],
            "VQA_answers": [
                "Bookstore Inventory",
                "3",
                "4",
                "2",
                "Displayed in green",
                "Oblique font style",
                "3",
                "Update Inventory"
            ],
            "raw_output_metric": [
                "Bookstore Inventory",
                "inventory-wrapper",
                "<section>",
                "<table>",
                "<tr>",
                "<td>",
                "price-highlight",
                "font-style: oblique;",
                "<p>",
                "<ol>",
                "<li>",
                "Update Inventory",
                "update-wrapper"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000102_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a bookstore inventory summary.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Bookstore Inventory\" at the top of the component.\n- Use a <div> element with a class name of 'inventory-wrapper' to contain all the component elements.\n- Create exactly 3 sections, each wrapped in a <section> element, to organize distinct data groups.\n- In the first section, include a <table> element displaying exactly 4 rows and 2 columns; the first column for book titles and the second column for their prices.\n- In the second section, display a paragraph (<p>) that shows the input text content; apply an inline style to set the font-style as oblique.\n- In the third section, include an ordered list (<ol>) containing exactly 3 list items (<li>), each detailing a unique bookstore feature.\n- In the table from the first section, ensure that one of the price values is rendered in green by applying a CSS class called 'price-highlight' to that cell.\n- Place a button element labeled \"Update Inventory\" at the bottom of the component inside a <div> with the class 'update-wrapper' for proper alignment."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000102_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Bookstore Inventory",
                                "inventory-wrapper",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "price-highlight",
                                "font-style: oblique;",
                                "<p>",
                                "<ol>",
                                "<li>",
                                "Update Inventory",
                                "update-wrapper"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000102_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000102_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered heading at the top?",
                                "How many sections are present in the component?",
                                "How many rows does the table in the first section display?",
                                "How many columns does the table in the first section have?",
                                "What unique styling is applied to one of the price cells in the table?",
                                "How is the text content in the second section styled?",
                                "How many items are listed in the ordered list in the third section?",
                                "What label does the button at the bottom of the component display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000102_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Bookstore Inventory",
                                "3",
                                "4",
                                "2",
                                "Displayed in green",
                                "Oblique font style",
                                "3",
                                "Update Inventory"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a transaction summary with detailed order information.\n\nFeature Requirements:\n- Include a centered <h2> element with the text \"Transaction Summary\" at the top.\n- Use a main <div> container with a class name of \"transaction-container\" to wrap the component.\n- Display exactly 2 sections, each wrapped in a <section> element with distinct content.\n- In the first section, create an unordered list (<ul>) with exactly 3 list items (<li>), where each item contains a label and a value separated by a colon.\n- Ensure one list item’s value is styled with a CSS class \"highlight-red\" so that its text appears in red.\n- In the second section, include a paragraph (<p>) with an inline style that sets the font-style to italic.\n- Add a button element labeled \"Submit Report\" at the bottom, placed inside a <div> with the class \"button-wrapper\" for proper alignment.\n- Organize the structure so that each element is clearly visible and follows the hierarchy as described without any extra or missing parts.",
            "task_id": "000103",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered header text at the top of the component?",
                "How many sections are visible in the layout?",
                "How many items are listed in the unordered list in the first section?",
                "Does one of the list items feature a red highlighted value?",
                "Is the paragraph in the second section styled with italics?",
                "What label is shown on the button at the bottom of the component?",
                "Which CSS class is applied to the main container wrapping the component?",
                "In the list items, how is the information structured between the label and its value?"
            ],
            "VQA_answers": [
                "Transaction Summary",
                "2",
                "3",
                "Yes, through the 'highlight-red' class",
                "Yes, it uses an inline style for italic font",
                "Submit Report",
                "transaction-container",
                "They are separated by a colon"
            ],
            "raw_output_metric": [
                "Transaction Summary",
                "transaction-container",
                "<section>",
                "<ul>",
                "<li>",
                ":",
                "highlight-red",
                "<p",
                "font-style: italic;",
                "Submit Report",
                "button-wrapper"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000103_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a transaction summary with detailed order information.\n\nFeature Requirements:\n- Include a centered <h2> element with the text \"Transaction Summary\" at the top.\n- Use a main <div> container with a class name of \"transaction-container\" to wrap the component.\n- Display exactly 2 sections, each wrapped in a <section> element with distinct content.\n- In the first section, create an unordered list (<ul>) with exactly 3 list items (<li>), where each item contains a label and a value separated by a colon.\n- Ensure one list item’s value is styled with a CSS class \"highlight-red\" so that its text appears in red.\n- In the second section, include a paragraph (<p>) with an inline style that sets the font-style to italic.\n- Add a button element labeled \"Submit Report\" at the bottom, placed inside a <div> with the class \"button-wrapper\" for proper alignment.\n- Organize the structure so that each element is clearly visible and follows the hierarchy as described without any extra or missing parts."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000103_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Transaction Summary",
                                "transaction-container",
                                "<section>",
                                "<ul>",
                                "<li>",
                                ":",
                                "highlight-red",
                                "<p",
                                "font-style: italic;",
                                "Submit Report",
                                "button-wrapper"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000103_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000103_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered header text at the top of the component?",
                                "How many sections are visible in the layout?",
                                "How many items are listed in the unordered list in the first section?",
                                "Does one of the list items feature a red highlighted value?",
                                "Is the paragraph in the second section styled with italics?",
                                "What label is shown on the button at the bottom of the component?",
                                "Which CSS class is applied to the main container wrapping the component?",
                                "In the list items, how is the information structured between the label and its value?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000103_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Transaction Summary",
                                "2",
                                "3",
                                "Yes, through the 'highlight-red' class",
                                "Yes, it uses an inline style for italic font",
                                "Submit Report",
                                "transaction-container",
                                "They are separated by a colon"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text into an Angular component that displays a store inventory dashboard.\n\nFeature Requirements:\n- Render a centered page header using an <h1> element with the text 'Inventory Dashboard'.\n- Wrap the main content in a <section> element with the class name 'inventory-section'.\n- Within the section, create exactly 3 distinct <div> elements, each representing a different inventory category.\n- Each inventory category <div> must include a title in an <h3> element with a unique category name and a table that lists items.\n- Each table should have exactly 2 columns labeled 'Item' and 'Stock Count', respectively.\n- Populate every table with exactly 4 rows, where each row displays an item's name and its corresponding stock count derived from the input text.\n- Ensure one of the stock count values in any table is styled using an inline style attribute that sets the color to blue.\n- Include a footer using a <footer> element that holds a button labeled 'Update Inventory', which is positioned inside a <div> with the class 'footer-button'.",
            "task_id": "000104",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered page header?",
                "How many inventory category blocks are present on the page?",
                "How is the main content of the inventory dashboard wrapped?",
                "What are the column headers in each inventory table?",
                "How many rows of inventory items are shown in each table?",
                "Is any stock count styled differently, and if so, what color is used?",
                "Where is the 'Update Inventory' button located?"
            ],
            "VQA_answers": [
                "Inventory Dashboard",
                "3",
                "Inside a section element with the class 'inventory-section'",
                "Item and Stock Count",
                "4",
                "Yes, one stock count value is styled with the color blue",
                "Inside a footer element within a div of class 'footer-button'"
            ],
            "raw_output_metric": [
                "Inventory Dashboard",
                "inventory-section",
                "<h1>",
                "<section",
                "<div",
                "<h3>",
                "Item",
                "Stock Count",
                "color: blue",
                "<table",
                "<footer",
                "footer-button",
                "Update Inventory"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000104_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text into an Angular component that displays a store inventory dashboard.\n\nFeature Requirements:\n- Render a centered page header using an <h1> element with the text 'Inventory Dashboard'.\n- Wrap the main content in a <section> element with the class name 'inventory-section'.\n- Within the section, create exactly 3 distinct <div> elements, each representing a different inventory category.\n- Each inventory category <div> must include a title in an <h3> element with a unique category name and a table that lists items.\n- Each table should have exactly 2 columns labeled 'Item' and 'Stock Count', respectively.\n- Populate every table with exactly 4 rows, where each row displays an item's name and its corresponding stock count derived from the input text.\n- Ensure one of the stock count values in any table is styled using an inline style attribute that sets the color to blue.\n- Include a footer using a <footer> element that holds a button labeled 'Update Inventory', which is positioned inside a <div> with the class 'footer-button'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000104_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Inventory Dashboard",
                                "inventory-section",
                                "<h1>",
                                "<section",
                                "<div",
                                "<h3>",
                                "Item",
                                "Stock Count",
                                "color: blue",
                                "<table",
                                "<footer",
                                "footer-button",
                                "Update Inventory"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000104_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000104_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered page header?",
                                "How many inventory category blocks are present on the page?",
                                "How is the main content of the inventory dashboard wrapped?",
                                "What are the column headers in each inventory table?",
                                "How many rows of inventory items are shown in each table?",
                                "Is any stock count styled differently, and if so, what color is used?",
                                "Where is the 'Update Inventory' button located?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000104_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Inventory Dashboard",
                                "3",
                                "Inside a section element with the class 'inventory-section'",
                                "Item and Stock Count",
                                "4",
                                "Yes, one stock count value is styled with the color blue",
                                "Inside a footer element within a div of class 'footer-button'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that presents a user profile overview with distinct sections for contact details, hobbies, and biography.\n\nFeature Requirements:\n- Create an <h1> element at the top with the text \"User Profile Overview\", and apply a CSS class 'header-center' to center the title.\n- Wrap all content in a <div> element with the class 'profile-container' for structural layout.\n- Include exactly 3 sections using <section> tags: the first for contact details, the second for hobbies, and the third for a biography.\n- The first section must contain an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a contact label and a phone number separated by a dash (-).\n- The second section should feature an unordered list (<ul>) with precisely 4 list items (<li>), each detailing a hobby and a brief description; ensure one of the hobby descriptions is styled with an inline style to set the text color to blue.\n- The third section must include a paragraph (<p>) that holds a biography text, with an inline style to justify the text alignment.\n- Position a button labeled \"Edit Profile\" at the bottom of the component within a <div> that has the class 'action-button' for precise placement.\n- Ensure that each section is visually separated by a horizontal rule (<hr>) placed between consecutive sections.",
            "task_id": "000105",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the page title displayed at the top?",
                "Is the title centered?",
                "How many sections are present in the profile?",
                "What does the first section show?",
                "How many hobby items are listed in the second section?",
                "Is any hobby description styled differently?",
                "How is the biography text styled?",
                "What element separates the sections?",
                "Where is the 'Edit Profile' button located?"
            ],
            "VQA_answers": [
                "User Profile Overview",
                "Yes, it has a centered styling.",
                "3",
                "An unordered list with 2 contact details (label and phone number).",
                "4",
                "Yes, one hobby description is styled with blue text.",
                "It is justified using inline styling.",
                "A horizontal rule is placed between each section.",
                "At the bottom inside a container designated for actions."
            ],
            "raw_output_metric": [
                "User Profile Overview",
                "header-center",
                "profile-container",
                "<section>",
                "<ul>",
                "<li>",
                "-",
                "<hr>",
                "Edit Profile",
                "color: blue",
                "text-align: justify"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000105_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that presents a user profile overview with distinct sections for contact details, hobbies, and biography.\n\nFeature Requirements:\n- Create an <h1> element at the top with the text \"User Profile Overview\", and apply a CSS class 'header-center' to center the title.\n- Wrap all content in a <div> element with the class 'profile-container' for structural layout.\n- Include exactly 3 sections using <section> tags: the first for contact details, the second for hobbies, and the third for a biography.\n- The first section must contain an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a contact label and a phone number separated by a dash (-).\n- The second section should feature an unordered list (<ul>) with precisely 4 list items (<li>), each detailing a hobby and a brief description; ensure one of the hobby descriptions is styled with an inline style to set the text color to blue.\n- The third section must include a paragraph (<p>) that holds a biography text, with an inline style to justify the text alignment.\n- Position a button labeled \"Edit Profile\" at the bottom of the component within a <div> that has the class 'action-button' for precise placement.\n- Ensure that each section is visually separated by a horizontal rule (<hr>) placed between consecutive sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000105_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Profile Overview",
                                "header-center",
                                "profile-container",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "-",
                                "<hr>",
                                "Edit Profile",
                                "color: blue",
                                "text-align: justify"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000105_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000105_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the page title displayed at the top?",
                                "Is the title centered?",
                                "How many sections are present in the profile?",
                                "What does the first section show?",
                                "How many hobby items are listed in the second section?",
                                "Is any hobby description styled differently?",
                                "How is the biography text styled?",
                                "What element separates the sections?",
                                "Where is the 'Edit Profile' button located?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000105_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Profile Overview",
                                "Yes, it has a centered styling.",
                                "3",
                                "An unordered list with 2 contact details (label and phone number).",
                                "4",
                                "Yes, one hobby description is styled with blue text.",
                                "It is justified using inline styling.",
                                "A horizontal rule is placed between each section.",
                                "At the bottom inside a container designated for actions."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an organized list of recent book releases.\n\nFeature Requirements:\n- Create a centered <h1> element with the text 'Latest Books' at the top of the component.\n- Use a <div> element with a class name of 'books-wrapper' to act as the main container for all content.\n- Divide the component into exactly 3 sections, each wrapped in a <section> element.\n- In the first section, include a <table> element that lists exactly 2 book entries; each entry should be represented by a row containing two cells for the book title and author.\n- In the second section, add a <blockquote> element that displays a review excerpt; apply an inline style to the blockquote to set the text color to blue.\n- In the third section, create an unordered list (<ul>) that contains exactly 4 list items (<li>), where each item must show a label and a value separated by a dash (-); ensure one list item's value uses a CSS class named 'emphasis-green' to change its appearance.\n- Add a <footer> element at the bottom of the component containing a centered paragraph (<p>) with the text 'End of List'.",
            "task_id": "000106",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered heading text at the top of the component?",
                "How many main sections are present in the component?",
                "How many book entries are displayed in the table within the first section?",
                "What style is applied to the review excerpt in the blockquote?",
                "How many list items are shown in the unordered list in the third section?",
                "Which list item uses the 'emphasis-green' CSS class for its value?",
                "What text is displayed in the footer's centered paragraph?"
            ],
            "VQA_answers": [
                "Latest Books",
                "3",
                "2",
                "The text color is set to blue",
                "4",
                "One of the list items",
                "End of List"
            ],
            "raw_output_metric": [
                "Latest Books",
                "books-wrapper",
                "<section>",
                "<table>",
                "<tr>",
                "<td>",
                "<blockquote style=\"color: blue;\">",
                "<ul>",
                "<li>",
                "emphasis-green",
                "<footer>",
                "<p>",
                "End of List"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000106_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an organized list of recent book releases.\n\nFeature Requirements:\n- Create a centered <h1> element with the text 'Latest Books' at the top of the component.\n- Use a <div> element with a class name of 'books-wrapper' to act as the main container for all content.\n- Divide the component into exactly 3 sections, each wrapped in a <section> element.\n- In the first section, include a <table> element that lists exactly 2 book entries; each entry should be represented by a row containing two cells for the book title and author.\n- In the second section, add a <blockquote> element that displays a review excerpt; apply an inline style to the blockquote to set the text color to blue.\n- In the third section, create an unordered list (<ul>) that contains exactly 4 list items (<li>), where each item must show a label and a value separated by a dash (-); ensure one list item's value uses a CSS class named 'emphasis-green' to change its appearance.\n- Add a <footer> element at the bottom of the component containing a centered paragraph (<p>) with the text 'End of List'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000106_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Latest Books",
                                "books-wrapper",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "<blockquote style=\"color: blue;\">",
                                "<ul>",
                                "<li>",
                                "emphasis-green",
                                "<footer>",
                                "<p>",
                                "End of List"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000106_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000106_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered heading text at the top of the component?",
                                "How many main sections are present in the component?",
                                "How many book entries are displayed in the table within the first section?",
                                "What style is applied to the review excerpt in the blockquote?",
                                "How many list items are shown in the unordered list in the third section?",
                                "Which list item uses the 'emphasis-green' CSS class for its value?",
                                "What text is displayed in the footer's centered paragraph?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000106_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Latest Books",
                                "3",
                                "2",
                                "The text color is set to blue",
                                "4",
                                "One of the list items",
                                "End of List"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a detailed project summary with structured schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Project Snapshot'.\n- Wrap all content within a <div> element that has the class name 'project-summary' for overall layout.\n- Create exactly 3 sections using <section> elements, each representing Overview, Timeline, and Notes.\n- In the Overview section, display a table (<table>) with exactly 3 rows (<tr>), each row containing 2 cells (<td>) that show a key and its corresponding value from the input.\n- In the Timeline section, include an unordered list (<ul>) with exactly 4 list items (<li>), each representing a milestone with a date and description.\n- In the Notes section, add a blockquote (<blockquote>) that presents text with emphasized styling.\n- Add a footer at the bottom using a <div> with the class 'action-footer' that contains a button labeled 'Update Schedule'.\n- Ensure that in the table, the value in the second row is styled with an inline style to set the text color to blue.",
            "task_id": "000107",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered title displayed at the top of the page?",
                "How many sections are present in the project summary?",
                "What are the names of the three sections?",
                "How many rows does the Overview table have?",
                "How many cells are in each row of the Overview table?",
                "What unique style is applied to the value in the second row of the table?",
                "How many milestones are listed in the Timeline section?",
                "What is the label on the button in the footer area?"
            ],
            "VQA_answers": [
                "Project Snapshot",
                "3",
                "Overview, Timeline, and Notes",
                "3",
                "2",
                "Text color set to blue",
                "4",
                "Update Schedule"
            ],
            "raw_output_metric": [
                "Project Snapshot",
                "project-summary",
                "<section>",
                "Overview",
                "Timeline",
                "Notes",
                "<table>",
                "<tr>",
                "<td>",
                "style=\"color: blue;\"",
                "<ul>",
                "<li>",
                "<blockquote>",
                "action-footer",
                "Update Schedule"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000107_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a detailed project summary with structured schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Project Snapshot'.\n- Wrap all content within a <div> element that has the class name 'project-summary' for overall layout.\n- Create exactly 3 sections using <section> elements, each representing Overview, Timeline, and Notes.\n- In the Overview section, display a table (<table>) with exactly 3 rows (<tr>), each row containing 2 cells (<td>) that show a key and its corresponding value from the input.\n- In the Timeline section, include an unordered list (<ul>) with exactly 4 list items (<li>), each representing a milestone with a date and description.\n- In the Notes section, add a blockquote (<blockquote>) that presents text with emphasized styling.\n- Add a footer at the bottom using a <div> with the class 'action-footer' that contains a button labeled 'Update Schedule'.\n- Ensure that in the table, the value in the second row is styled with an inline style to set the text color to blue."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000107_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Snapshot",
                                "project-summary",
                                "<section>",
                                "Overview",
                                "Timeline",
                                "Notes",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "style=\"color: blue;\"",
                                "<ul>",
                                "<li>",
                                "<blockquote>",
                                "action-footer",
                                "Update Schedule"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000107_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000107_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top of the page?",
                                "How many sections are present in the project summary?",
                                "What are the names of the three sections?",
                                "How many rows does the Overview table have?",
                                "How many cells are in each row of the Overview table?",
                                "What unique style is applied to the value in the second row of the table?",
                                "How many milestones are listed in the Timeline section?",
                                "What is the label on the button in the footer area?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000107_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Snapshot",
                                "3",
                                "Overview, Timeline, and Notes",
                                "3",
                                "2",
                                "Text color set to blue",
                                "4",
                                "Update Schedule"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that organizes user-specific information into a dashboard view.\n\nFeature Requirements:\n- Create a main container using a <div> element with the class name 'dashboard-container' to encapsulate all component content.\n- Place a centered <h1> element at the top of the component displaying the text 'User Dashboard Snapshot'.\n- Include exactly 2 distinct sections, each enclosed in a <section> element.\n- In the first section, create a table with exactly 3 rows and 2 columns; each row should display a label in the first column (using bold formatting) and a corresponding value in the second column.\n- Assign one table cell in the first section a CSS class 'critical' to ensure its text appears in red.\n- In the second section, add a paragraph (<p>) element with inline styling that sets the background color to 'lightblue' and displays a summary description.\n- At the bottom of the component, include a <div> element with the class 'button-wrapper' that contains a button labeled 'Update Dashboard'.",
            "task_id": "000108",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main header text that appears at the top of the dashboard?",
                "How many sections are organized in this dashboard view?",
                "How many rows are shown in the table within the first section?",
                "What visual formatting is applied to the labels in the table's first column?",
                "How is critical information highlighted within the table?",
                "What background color is applied to the paragraph in the second section?",
                "What text is visible on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "User Dashboard Snapshot",
                "2",
                "3",
                "They are displayed in bold text",
                "One table cell uses the 'critical' CSS class to render its text in red",
                "Lightblue",
                "Update Dashboard"
            ],
            "raw_output_metric": [
                "dashboard-container",
                "User Dashboard Snapshot",
                "<section>",
                "<table>",
                "critical",
                "lightblue",
                "button-wrapper",
                "Update Dashboard"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000108_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that organizes user-specific information into a dashboard view.\n\nFeature Requirements:\n- Create a main container using a <div> element with the class name 'dashboard-container' to encapsulate all component content.\n- Place a centered <h1> element at the top of the component displaying the text 'User Dashboard Snapshot'.\n- Include exactly 2 distinct sections, each enclosed in a <section> element.\n- In the first section, create a table with exactly 3 rows and 2 columns; each row should display a label in the first column (using bold formatting) and a corresponding value in the second column.\n- Assign one table cell in the first section a CSS class 'critical' to ensure its text appears in red.\n- In the second section, add a paragraph (<p>) element with inline styling that sets the background color to 'lightblue' and displays a summary description.\n- At the bottom of the component, include a <div> element with the class 'button-wrapper' that contains a button labeled 'Update Dashboard'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000108_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "dashboard-container",
                                "User Dashboard Snapshot",
                                "<section>",
                                "<table>",
                                "critical",
                                "lightblue",
                                "button-wrapper",
                                "Update Dashboard"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000108_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000108_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text that appears at the top of the dashboard?",
                                "How many sections are organized in this dashboard view?",
                                "How many rows are shown in the table within the first section?",
                                "What visual formatting is applied to the labels in the table's first column?",
                                "How is critical information highlighted within the table?",
                                "What background color is applied to the paragraph in the second section?",
                                "What text is visible on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000108_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Dashboard Snapshot",
                                "2",
                                "3",
                                "They are displayed in bold text",
                                "One table cell uses the 'critical' CSS class to render its text in red",
                                "Lightblue",
                                "Update Dashboard"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that displays a product catalog with a structured layout and interactive elements.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Product Catalog'.\n- Create a <div> element serving as a grid container with a class name of 'catalog-grid' for layout organization.\n- Incorporate exactly 3 sections: a header, a content area, and a footer, each wrapped in a <section> element.\n- In the header section, include an <h3> element with the text 'Explore Our Best Sellers' aligned to the left, and apply an inline style setting its background to a linear gradient.\n- Within the content section, implement an Angular table that lists exactly 4 products, where each row displays a product name and its price separated by a hyphen (-).\n- Ensure one product row has its product name styled in blue using a CSS class called 'blue-text'.\n- In the footer section, add a <div> with class 'footer-button' containing a button labeled 'Load More'.\n- Introduce a <p> element adjacent to the table that displays the current date in italic text through inline styling.\n- All elements must use clearly defined class names (such as 'header-section', 'table-row', 'footer-section') for consistent styling.",
            "task_id": "000109",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text of the centered title at the top?",
                "How many sections are present in the component layout?",
                "What text is displayed in the header section's h3 element?",
                "What inline style is applied to the header text?",
                "How many products are listed in the Angular table?",
                "What information is shown in each table row?",
                "How is one of the product names distinctively styled in the table?",
                "What label is visible on the button located in the footer section?"
            ],
            "VQA_answers": [
                "Product Catalog",
                "3",
                "Explore Our Best Sellers",
                "A linear gradient background",
                "4",
                "A product name and its price separated by a hyphen",
                "It is styled in blue via the 'blue-text' CSS class",
                "Load More"
            ],
            "raw_output_metric": [
                "Product Catalog",
                "catalog-grid",
                "Explore Our Best Sellers",
                "linear-gradient",
                "blue-text",
                "footer-button",
                "Load More",
                "header-section",
                "table-row",
                "footer-section",
                "font-style: italic",
                "-"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000109_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nGenerate an Angular component that displays a product catalog with a structured layout and interactive elements.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Product Catalog'.\n- Create a <div> element serving as a grid container with a class name of 'catalog-grid' for layout organization.\n- Incorporate exactly 3 sections: a header, a content area, and a footer, each wrapped in a <section> element.\n- In the header section, include an <h3> element with the text 'Explore Our Best Sellers' aligned to the left, and apply an inline style setting its background to a linear gradient.\n- Within the content section, implement an Angular table that lists exactly 4 products, where each row displays a product name and its price separated by a hyphen (-).\n- Ensure one product row has its product name styled in blue using a CSS class called 'blue-text'.\n- In the footer section, add a <div> with class 'footer-button' containing a button labeled 'Load More'.\n- Introduce a <p> element adjacent to the table that displays the current date in italic text through inline styling.\n- All elements must use clearly defined class names (such as 'header-section', 'table-row', 'footer-section') for consistent styling."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000109_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Catalog",
                                "catalog-grid",
                                "Explore Our Best Sellers",
                                "linear-gradient",
                                "blue-text",
                                "footer-button",
                                "Load More",
                                "header-section",
                                "table-row",
                                "footer-section",
                                "font-style: italic",
                                "-"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000109_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000109_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered title at the top?",
                                "How many sections are present in the component layout?",
                                "What text is displayed in the header section's h3 element?",
                                "What inline style is applied to the header text?",
                                "How many products are listed in the Angular table?",
                                "What information is shown in each table row?",
                                "How is one of the product names distinctively styled in the table?",
                                "What label is visible on the button located in the footer section?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000109_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Catalog",
                                "3",
                                "Explore Our Best Sellers",
                                "A linear gradient background",
                                "4",
                                "A product name and its price separated by a hyphen",
                                "It is styled in blue via the 'blue-text' CSS class",
                                "Load More"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that organizes dynamic city information and events details.\n\nFeature Requirements:\n- Use an <h1> element at the top of the component with the text \"City Events\".\n- Include a <div> element with the class name \"city-container\" to serve as the primary layout wrapper.\n- Create exactly 3 sections, each wrapped in a <section> element to separate different content areas.\n- The first section must contain 2 paragraphs (<p>): the first describing a city overview and the second summarizing current events.\n- The second section should include an ordered list (<ol>) with precisely 4 list items (<li>), each formatted as \"Event: Details\".\n- Ensure that one of the list items in the ordered list has its text styled with a CSS class called \"highlight-event\", which applies blue coloring.\n- The third section must display a paragraph (<p>) with inline styles that set the font size to 18px and the text color to green, offering a closing remark.\n- Separate each section with a horizontal line (<hr>) element for clear visual division.\n- Add a button labeled \"Load More\" within a <div> element with the class name \"button-wrapper\", positioned at the bottom of the component.",
            "task_id": "000110",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the top title displayed on the component?",
                "How many content sections are clearly divided by horizontal lines?",
                "How many descriptive paragraphs are visible in the first section?",
                "How many event entries are listed in the second section?",
                "Is one of the event entries visually distinguished with blue text?",
                "What styling is applied to the closing remark in the third section?",
                "What label is shown on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "City Events",
                "3",
                "2",
                "4",
                "Yes",
                "It has an inline font size of 18px and green text color",
                "Load More"
            ],
            "raw_output_metric": [
                "City Events",
                "city-container",
                "<section>",
                "<p>",
                "<ol>",
                "<li>",
                "Event: Details",
                "highlight-event",
                "<hr>",
                "button-wrapper",
                "Load More",
                "font-size: 18px",
                "color: green"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000110_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nGenerate an Angular component that organizes dynamic city information and events details.\n\nFeature Requirements:\n- Use an <h1> element at the top of the component with the text \"City Events\".\n- Include a <div> element with the class name \"city-container\" to serve as the primary layout wrapper.\n- Create exactly 3 sections, each wrapped in a <section> element to separate different content areas.\n- The first section must contain 2 paragraphs (<p>): the first describing a city overview and the second summarizing current events.\n- The second section should include an ordered list (<ol>) with precisely 4 list items (<li>), each formatted as \"Event: Details\".\n- Ensure that one of the list items in the ordered list has its text styled with a CSS class called \"highlight-event\", which applies blue coloring.\n- The third section must display a paragraph (<p>) with inline styles that set the font size to 18px and the text color to green, offering a closing remark.\n- Separate each section with a horizontal line (<hr>) element for clear visual division.\n- Add a button labeled \"Load More\" within a <div> element with the class name \"button-wrapper\", positioned at the bottom of the component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000110_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Events",
                                "city-container",
                                "<section>",
                                "<p>",
                                "<ol>",
                                "<li>",
                                "Event: Details",
                                "highlight-event",
                                "<hr>",
                                "button-wrapper",
                                "Load More",
                                "font-size: 18px",
                                "color: green"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000110_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000110_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the top title displayed on the component?",
                                "How many content sections are clearly divided by horizontal lines?",
                                "How many descriptive paragraphs are visible in the first section?",
                                "How many event entries are listed in the second section?",
                                "Is one of the event entries visually distinguished with blue text?",
                                "What styling is applied to the closing remark in the third section?",
                                "What label is shown on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000110_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Events",
                                "3",
                                "2",
                                "4",
                                "Yes",
                                "It has an inline font size of 18px and green text color",
                                "Load More"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of recent financial transactions with detailed breakdowns.\n\nFeature Requirements:\n- Include a left-aligned title using an <h2> element with the text ‘Transaction Summary’.\n- Wrap the entire layout in a <section> element with a class name of 'transaction-section'.\n- Display exactly 3 distinct cards, each contained within a <div> element with a class ‘transaction-card’, arranged vertically.\n- The first card should include an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a transaction ID and amount separated by a dash (-); ensure one of these transaction amounts is styled with a CSS class called 'highlight' to show green text.\n- The second card must contain a table (<table>) with one header row (<tr>) of two cells (<th>), labeled ‘Date’ and ‘Details’, where each header cell has a bottom border styled as \"2px solid blue\".\n- The third card should feature a paragraph (<p>) with inline styling that sets the font size to 14px and a button (<button>) labeled ‘Load More’ positioned at the bottom using a container <div> with class 'button-wrapper'.\n- At the end of the component, include a footer section with a <small> element that displays the text ‘End of Transactions’.",
            "task_id": "000111",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the component?",
                "How many distinct cards are shown in the layout?",
                "How many list items are present in the first card's unordered list?",
                "Which class is used to style one of the transaction amounts for green text in the first card?",
                "What are the labels for the header cells in the second card's table?",
                "What bottom border style is applied to each header cell in the table?",
                "What inline style is applied to the paragraph in the third card?",
                "What button is displayed in the third card and where is it positioned?",
                "What text is visible in the footer section at the end of the component?"
            ],
            "VQA_answers": [
                "Transaction Summary",
                "3",
                "2",
                "highlight",
                "Date and Details",
                "2px solid blue",
                "font size of 14px",
                "Load More button positioned at the bottom within a container with class 'button-wrapper'",
                "End of Transactions"
            ],
            "raw_output_metric": [
                "Transaction Summary",
                "transaction-section",
                "transaction-card",
                "highlight",
                "Date",
                "Details",
                "2px solid blue",
                "14px",
                "Load More",
                "button-wrapper",
                "End of Transactions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000111_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of recent financial transactions with detailed breakdowns.\n\nFeature Requirements:\n- Include a left-aligned title using an <h2> element with the text ‘Transaction Summary’.\n- Wrap the entire layout in a <section> element with a class name of 'transaction-section'.\n- Display exactly 3 distinct cards, each contained within a <div> element with a class ‘transaction-card’, arranged vertically.\n- The first card should include an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a transaction ID and amount separated by a dash (-); ensure one of these transaction amounts is styled with a CSS class called 'highlight' to show green text.\n- The second card must contain a table (<table>) with one header row (<tr>) of two cells (<th>), labeled ‘Date’ and ‘Details’, where each header cell has a bottom border styled as \"2px solid blue\".\n- The third card should feature a paragraph (<p>) with inline styling that sets the font size to 14px and a button (<button>) labeled ‘Load More’ positioned at the bottom using a container <div> with class 'button-wrapper'.\n- At the end of the component, include a footer section with a <small> element that displays the text ‘End of Transactions’."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000111_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Transaction Summary",
                                "transaction-section",
                                "transaction-card",
                                "highlight",
                                "Date",
                                "Details",
                                "2px solid blue",
                                "14px",
                                "Load More",
                                "button-wrapper",
                                "End of Transactions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000111_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000111_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the component?",
                                "How many distinct cards are shown in the layout?",
                                "How many list items are present in the first card's unordered list?",
                                "Which class is used to style one of the transaction amounts for green text in the first card?",
                                "What are the labels for the header cells in the second card's table?",
                                "What bottom border style is applied to each header cell in the table?",
                                "What inline style is applied to the paragraph in the third card?",
                                "What button is displayed in the third card and where is it positioned?",
                                "What text is visible in the footer section at the end of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000111_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Transaction Summary",
                                "3",
                                "2",
                                "highlight",
                                "Date and Details",
                                "2px solid blue",
                                "font size of 14px",
                                "Load More button positioned at the bottom within a container with class 'button-wrapper'",
                                "End of Transactions"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nDevelop an Angular component that presents detailed sales analytics data for a fictional product line.\n\nFeature Requirements:\n- Create a centered title using an <h2> element with the text \"Sales Analytics Summary\".\n- Wrap the content in a <div> element with a class name of \"analytics-container\" to structure the layout.\n- Divide the component into exactly 2 distinct sections using <section> elements.\n- In the first section, insert a table (<table>) that contains a header row with two <th> cells labeled \"Metric\" and \"Value\", and exactly 3 data rows (<tr>) each with 2 <td> cells displaying a sales metric and its corresponding value.\n- Ensure that one of the <td> elements in the table includes a CSS class called \"highlight\" to mark an important data point.\n- In the second section, include a paragraph (<p>) that displays a brief summary of the analytics, applying an inline style to set the font style to italic.\n- Add a button element labeled \"Load More Data\", positioned at the bottom of the component within a <div> element that has a class name of \"button-wrapper\".\n- Incorporate an inline style on the table to apply a border (e.g., \"border: 1px solid black;\") to all table cells.",
            "task_id": "000112",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text of the centered title at the top of the component?",
                "What is the class name of the container wrapping all the component content?",
                "How many sections is the component divided into?",
                "What are the labels in the header row of the table?",
                "How many data rows are displayed in the table?",
                "Is any cell in the table marked with a special highlight, and if so, how is it indicated?",
                "What inline border style is applied to the table cells?",
                "Where is the 'Load More Data' button located and what is its label?"
            ],
            "VQA_answers": [
                "Sales Analytics Summary",
                "analytics-container",
                "2",
                "Metric and Value",
                "3",
                "Yes, one cell has the 'highlight' class",
                "1px solid black",
                "At the bottom of the component within a div having the class 'button-wrapper', and the button is labeled 'Load More Data'"
            ],
            "raw_output_metric": [
                "Sales Analytics Summary",
                "analytics-container",
                "<section>",
                "<table>",
                "border: 1px solid black;",
                "<th>Metric</th>",
                "<th>Value</th>",
                "highlight",
                "<p>",
                "font-style: italic;",
                "Load More Data",
                "button-wrapper",
                "<h2>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000112_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nDevelop an Angular component that presents detailed sales analytics data for a fictional product line.\n\nFeature Requirements:\n- Create a centered title using an <h2> element with the text \"Sales Analytics Summary\".\n- Wrap the content in a <div> element with a class name of \"analytics-container\" to structure the layout.\n- Divide the component into exactly 2 distinct sections using <section> elements.\n- In the first section, insert a table (<table>) that contains a header row with two <th> cells labeled \"Metric\" and \"Value\", and exactly 3 data rows (<tr>) each with 2 <td> cells displaying a sales metric and its corresponding value.\n- Ensure that one of the <td> elements in the table includes a CSS class called \"highlight\" to mark an important data point.\n- In the second section, include a paragraph (<p>) that displays a brief summary of the analytics, applying an inline style to set the font style to italic.\n- Add a button element labeled \"Load More Data\", positioned at the bottom of the component within a <div> element that has a class name of \"button-wrapper\".\n- Incorporate an inline style on the table to apply a border (e.g., \"border: 1px solid black;\") to all table cells."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000112_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Sales Analytics Summary",
                                "analytics-container",
                                "<section>",
                                "<table>",
                                "border: 1px solid black;",
                                "<th>Metric</th>",
                                "<th>Value</th>",
                                "highlight",
                                "<p>",
                                "font-style: italic;",
                                "Load More Data",
                                "button-wrapper",
                                "<h2>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000112_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000112_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered title at the top of the component?",
                                "What is the class name of the container wrapping all the component content?",
                                "How many sections is the component divided into?",
                                "What are the labels in the header row of the table?",
                                "How many data rows are displayed in the table?",
                                "Is any cell in the table marked with a special highlight, and if so, how is it indicated?",
                                "What inline border style is applied to the table cells?",
                                "Where is the 'Load More Data' button located and what is its label?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000112_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Sales Analytics Summary",
                                "analytics-container",
                                "2",
                                "Metric and Value",
                                "3",
                                "Yes, one cell has the 'highlight' class",
                                "1px solid black",
                                "At the bottom of the component within a div having the class 'button-wrapper', and the button is labeled 'Load More Data'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that displays an event schedule with detailed information from the provided text input.\n\nFeature Requirements:\n- Create an Angular component that includes a prominent <h2> element with the text \"Event Schedule\" centered at the top.\n- Add a container <div> with a class name of \"event-container\" to wrap all the event content.\n- Include exactly 3 event sections, each within a separate <section> element with unique id attributes (e.g., event-1, event-2, event-3).\n- In the first event section, include a <p> element that displays event details with bold text styling.\n- In the first event section, also add an unordered list (<ul>) containing exactly 2 list items (<li>); each list item should show a label and a value separated by a dash (-) representing the event time and location.\n- In the second event section, display a paragraph (<p>) where the text is styled using an inline style to have its color set to blue.\n- In the third event section, include a <div> that shows an emphasized note (<em>) followed by a link (<a>) with the visible text \"More Info\" immediately below it.\n- Conclude the component with a button labeled \"Update Events\" placed within a <div> that has a class \"update-button\" at the bottom.",
            "task_id": "000113",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main header text displayed at the top of the component?",
                "Where is the main header positioned?",
                "How many event sections are visible in the schedule?",
                "How is the event details text in the first event section styled?",
                "How many list items are displayed in the first event section's list?",
                "What color is used for the text in the second event section's paragraph?",
                "What is immediately below the emphasized note in the third event section?",
                "What is the label on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "Centered at the top",
                "3",
                "Bold",
                "2",
                "Blue",
                "A link labeled 'More Info'",
                "Update Events"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "event-container",
                "event-1",
                "event-2",
                "event-3",
                "<p>",
                "<ul>",
                "<li>",
                "-",
                "color: blue",
                "<div>",
                "<em>",
                "<a>",
                "More Info",
                "Update Events",
                "update-button"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000113_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nGenerate an Angular component that displays an event schedule with detailed information from the provided text input.\n\nFeature Requirements:\n- Create an Angular component that includes a prominent <h2> element with the text \"Event Schedule\" centered at the top.\n- Add a container <div> with a class name of \"event-container\" to wrap all the event content.\n- Include exactly 3 event sections, each within a separate <section> element with unique id attributes (e.g., event-1, event-2, event-3).\n- In the first event section, include a <p> element that displays event details with bold text styling.\n- In the first event section, also add an unordered list (<ul>) containing exactly 2 list items (<li>); each list item should show a label and a value separated by a dash (-) representing the event time and location.\n- In the second event section, display a paragraph (<p>) where the text is styled using an inline style to have its color set to blue.\n- In the third event section, include a <div> that shows an emphasized note (<em>) followed by a link (<a>) with the visible text \"More Info\" immediately below it.\n- Conclude the component with a button labeled \"Update Events\" placed within a <div> that has a class \"update-button\" at the bottom."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000113_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "event-container",
                                "event-1",
                                "event-2",
                                "event-3",
                                "<p>",
                                "<ul>",
                                "<li>",
                                "-",
                                "color: blue",
                                "<div>",
                                "<em>",
                                "<a>",
                                "More Info",
                                "Update Events",
                                "update-button"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000113_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000113_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top of the component?",
                                "Where is the main header positioned?",
                                "How many event sections are visible in the schedule?",
                                "How is the event details text in the first event section styled?",
                                "How many list items are displayed in the first event section's list?",
                                "What color is used for the text in the second event section's paragraph?",
                                "What is immediately below the emphasized note in the third event section?",
                                "What is the label on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000113_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "Centered at the top",
                                "3",
                                "Bold",
                                "2",
                                "Blue",
                                "A link labeled 'More Info'",
                                "Update Events"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a project's performance metrics.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Project Metrics\".\n- Wrap all content in a main container <div> with the class name 'metrics-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element with unique IDs: 'overview', 'chart', and 'details'.\n- In the 'overview' section, include an unordered list (<ul>) that contains exactly 4 list items (<li>), each displaying a metric name and its value separated by a dash (-).\n- Within the 'overview' section, ensure that one of the list items applies a CSS class called 'critical' to its metric value, which should be styled with red text.\n- In the 'chart' section, add a paragraph (<p>) that mentions the chart is dynamically generated, and apply an inline style to make the text bold.\n- In the 'details' section, include two distinct paragraphs (<p>) that provide additional information based on the input data.\n- At the bottom of the component, insert a <div> with the class name 'action-btn-container' that holds a button labeled \"Update Metrics\".",
            "task_id": "000114",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the component?",
                "What is the class name of the main container that wraps all content?",
                "How many sections are displayed in the component?",
                "What unique IDs are assigned to the sections?",
                "How many list items appear in the unordered list within the overview section?",
                "Does one of the list items have special styling for its metric value? If so, what is applied?",
                "What does the paragraph in the chart section convey and how is its text styled?",
                "How many paragraphs are shown in the details section?",
                "What element is located at the bottom of the component and what does its button display?"
            ],
            "VQA_answers": [
                "Project Metrics",
                "metrics-wrapper",
                "3",
                "overview, chart, and details",
                "4",
                "Yes, a 'critical' CSS class with red text",
                "It mentions the chart is dynamically generated and the text is bold",
                "2",
                "A div containing a button labeled 'Update Metrics'"
            ],
            "raw_output_metric": [
                "Project Metrics",
                "metrics-wrapper",
                "<section id=\"overview\">",
                "<section id=\"chart\">",
                "<section id=\"details\">",
                "<ul>",
                "<li>",
                "class=\"critical\"",
                "-",
                "dynamically generated",
                "font-weight: bold",
                "action-btn-container",
                "Update Metrics"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000114_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a project's performance metrics.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Project Metrics\".\n- Wrap all content in a main container <div> with the class name 'metrics-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element with unique IDs: 'overview', 'chart', and 'details'.\n- In the 'overview' section, include an unordered list (<ul>) that contains exactly 4 list items (<li>), each displaying a metric name and its value separated by a dash (-).\n- Within the 'overview' section, ensure that one of the list items applies a CSS class called 'critical' to its metric value, which should be styled with red text.\n- In the 'chart' section, add a paragraph (<p>) that mentions the chart is dynamically generated, and apply an inline style to make the text bold.\n- In the 'details' section, include two distinct paragraphs (<p>) that provide additional information based on the input data.\n- At the bottom of the component, insert a <div> with the class name 'action-btn-container' that holds a button labeled \"Update Metrics\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000114_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Metrics",
                                "metrics-wrapper",
                                "<section id=\"overview\">",
                                "<section id=\"chart\">",
                                "<section id=\"details\">",
                                "<ul>",
                                "<li>",
                                "class=\"critical\"",
                                "-",
                                "dynamically generated",
                                "font-weight: bold",
                                "action-btn-container",
                                "Update Metrics"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000114_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000114_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the component?",
                                "What is the class name of the main container that wraps all content?",
                                "How many sections are displayed in the component?",
                                "What unique IDs are assigned to the sections?",
                                "How many list items appear in the unordered list within the overview section?",
                                "Does one of the list items have special styling for its metric value? If so, what is applied?",
                                "What does the paragraph in the chart section convey and how is its text styled?",
                                "How many paragraphs are shown in the details section?",
                                "What element is located at the bottom of the component and what does its button display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000114_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Metrics",
                                "metrics-wrapper",
                                "3",
                                "overview, chart, and details",
                                "4",
                                "Yes, a 'critical' CSS class with red text",
                                "It mentions the chart is dynamically generated and the text is bold",
                                "2",
                                "A div containing a button labeled 'Update Metrics'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents an interactive product summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Product Summary\" at the top of the component.\n- Use a <div> container with a class name of \"product-wrapper\" to encapsulate the component content.\n- Create exactly 2 distinct sections: the first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a product attribute in a \"label: value\" format.\n- In the first section's list, assign a unique CSS class \"alert-blue\" to one of the <li> elements to display its value text in blue.\n- The second section should contain a paragraph (<p>) with a brief description, styled with an inline style that sets the text color to green.\n- Position a button labeled \"Update Summary\" at the bottom of the component inside a <div> with the class \"action-button-box\".",
            "task_id": "000115",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How many distinct sections are visible in the component?",
                "How many bullet points are shown in the first section?",
                "Which list item is uniquely styled?",
                "What is the text color of the paragraph in the second section?",
                "What brief content is provided in the second section?",
                "What label does the button at the bottom display?"
            ],
            "VQA_answers": [
                "Product Summary",
                "2",
                "4",
                "One list item has its value text displayed in blue",
                "Green",
                "A brief description",
                "Update Summary"
            ],
            "raw_output_metric": [
                "Product Summary",
                "product-wrapper",
                "<ul>",
                "<li>",
                "alert-blue",
                "<p>",
                "color: green",
                "Update Summary",
                "action-button-box"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000115_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents an interactive product summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Product Summary\" at the top of the component.\n- Use a <div> container with a class name of \"product-wrapper\" to encapsulate the component content.\n- Create exactly 2 distinct sections: the first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a product attribute in a \"label: value\" format.\n- In the first section's list, assign a unique CSS class \"alert-blue\" to one of the <li> elements to display its value text in blue.\n- The second section should contain a paragraph (<p>) with a brief description, styled with an inline style that sets the text color to green.\n- Position a button labeled \"Update Summary\" at the bottom of the component inside a <div> with the class \"action-button-box\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000115_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Summary",
                                "product-wrapper",
                                "<ul>",
                                "<li>",
                                "alert-blue",
                                "<p>",
                                "color: green",
                                "Update Summary",
                                "action-button-box"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000115_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000115_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How many distinct sections are visible in the component?",
                                "How many bullet points are shown in the first section?",
                                "Which list item is uniquely styled?",
                                "What is the text color of the paragraph in the second section?",
                                "What brief content is provided in the second section?",
                                "What label does the button at the bottom display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000115_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Summary",
                                "2",
                                "4",
                                "One list item has its value text displayed in blue",
                                "Green",
                                "A brief description",
                                "Update Summary"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that renders a dashboard with two distinct sections showcasing structured data.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Dashboard Overview\" via an inline style for text-align.\n- Use a <div> element as a container with a class name of \"main-dashboard\" to wrap the entire component.\n- Create exactly 2 sections using the <section> element; the first section must include a table representing key-value pairs.\n- Within the first section, add a table with a header (<thead>) containing exactly 2 columns labeled \"Parameter\" and \"Value\", and a body (<tbody>) with exactly 3 rows, where each row contains 2 cells; ensure that one of the value cells in the table uses a CSS class \"alert-blue\" to style its text color.\n- In the second section, display a blockquote (<blockquote>) that presents processed input text and apply an inline style to set the font style to italic.\n- Add a paragraph (<p>) element below the sections with the text \"End of Dashboard\" and an inline style that aligns the text to the right.\n- Include a button with the label \"Submit Report\", placed at the bottom inside a <div> element with a class name of \"btn-wrapper\" for proper alignment.",
            "task_id": "000116",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main title displayed on the dashboard?",
                "How is the main title aligned?",
                "How many sections are present in the dashboard layout?",
                "What are the table header labels in the first section?",
                "How many rows of key-value pairs are visible in the table?",
                "Which cell is uniquely styled with the alert-blue class?",
                "Which element displays processed input text in an italic style?",
                "What text is shown in the right-aligned paragraph below the sections?",
                "What label is on the button at the bottom of the dashboard?"
            ],
            "VQA_answers": [
                "Dashboard Overview",
                "Centered",
                "2",
                "Parameter and Value",
                "3",
                "One of the value cells",
                "Blockquote",
                "End of Dashboard",
                "Submit Report"
            ],
            "raw_output_metric": [
                "Dashboard Overview",
                "main-dashboard",
                "Parameter",
                "Value",
                "alert-blue",
                "End of Dashboard",
                "btn-wrapper",
                "Submit Report"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000116_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that renders a dashboard with two distinct sections showcasing structured data.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Dashboard Overview\" via an inline style for text-align.\n- Use a <div> element as a container with a class name of \"main-dashboard\" to wrap the entire component.\n- Create exactly 2 sections using the <section> element; the first section must include a table representing key-value pairs.\n- Within the first section, add a table with a header (<thead>) containing exactly 2 columns labeled \"Parameter\" and \"Value\", and a body (<tbody>) with exactly 3 rows, where each row contains 2 cells; ensure that one of the value cells in the table uses a CSS class \"alert-blue\" to style its text color.\n- In the second section, display a blockquote (<blockquote>) that presents processed input text and apply an inline style to set the font style to italic.\n- Add a paragraph (<p>) element below the sections with the text \"End of Dashboard\" and an inline style that aligns the text to the right.\n- Include a button with the label \"Submit Report\", placed at the bottom inside a <div> element with a class name of \"btn-wrapper\" for proper alignment."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000116_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Overview",
                                "main-dashboard",
                                "Parameter",
                                "Value",
                                "alert-blue",
                                "End of Dashboard",
                                "btn-wrapper",
                                "Submit Report"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000116_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000116_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed on the dashboard?",
                                "How is the main title aligned?",
                                "How many sections are present in the dashboard layout?",
                                "What are the table header labels in the first section?",
                                "How many rows of key-value pairs are visible in the table?",
                                "Which cell is uniquely styled with the alert-blue class?",
                                "Which element displays processed input text in an italic style?",
                                "What text is shown in the right-aligned paragraph below the sections?",
                                "What label is on the button at the bottom of the dashboard?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000116_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Overview",
                                "Centered",
                                "2",
                                "Parameter and Value",
                                "3",
                                "One of the value cells",
                                "Blockquote",
                                "End of Dashboard",
                                "Submit Report"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a structured weekly weather report.\n\nFeature Requirements:\n- Create an outer container using a <div> element with the class name 'weather-card' to encapsulate all the content.\n- Place a centered title using an <h1> element with the text 'Weekly Weather' at the top of the component.\n- Include exactly 2 sections: the first <section> should be labeled 'Forecast Details' and the second <section> should be labeled 'Weather Insights'.\n- In the first section, use an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a distinct weather attribute in the format \"Attribute - Value\".\n- Apply a CSS class named 'highlight-blue' to one of the list items in the forecast, ensuring that the value text is colored blue.\n- In the second section, include a paragraph (<p>) element that provides a summary of the weekly forecast, and set an inline style on the paragraph to apply a background color of light yellow.\n- At the bottom of the component, add a button element labeled 'Update Forecast', which should be wrapped inside a <div> element with the class 'footer'.",
            "task_id": "000117",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How many sections are present in the component?",
                "What is the label of the first section?",
                "How many list items are shown in the Forecast Details section?",
                "What visual feature distinguishes one of the list items in the forecast?",
                "What is the label of the second section?",
                "What background color is applied to the summary paragraph in the Weather Insights section?",
                "What is the text on the button found at the bottom of the component?",
                "In which container is the 'Update Forecast' button wrapped?"
            ],
            "VQA_answers": [
                "Weekly Weather",
                "2",
                "Forecast Details",
                "4",
                "Its value text is styled in blue",
                "Weather Insights",
                "Light yellow",
                "Update Forecast",
                "A div with the class 'footer'"
            ],
            "raw_output_metric": [
                "weather-card",
                "Weekly Weather",
                "Forecast Details",
                "Weather Insights",
                "highlight-blue",
                "Attribute - Value",
                "Update Forecast",
                "footer",
                "background-color: lightyellow"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000117_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a structured weekly weather report.\n\nFeature Requirements:\n- Create an outer container using a <div> element with the class name 'weather-card' to encapsulate all the content.\n- Place a centered title using an <h1> element with the text 'Weekly Weather' at the top of the component.\n- Include exactly 2 sections: the first <section> should be labeled 'Forecast Details' and the second <section> should be labeled 'Weather Insights'.\n- In the first section, use an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a distinct weather attribute in the format \"Attribute - Value\".\n- Apply a CSS class named 'highlight-blue' to one of the list items in the forecast, ensuring that the value text is colored blue.\n- In the second section, include a paragraph (<p>) element that provides a summary of the weekly forecast, and set an inline style on the paragraph to apply a background color of light yellow.\n- At the bottom of the component, add a button element labeled 'Update Forecast', which should be wrapped inside a <div> element with the class 'footer'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000117_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "weather-card",
                                "Weekly Weather",
                                "Forecast Details",
                                "Weather Insights",
                                "highlight-blue",
                                "Attribute - Value",
                                "Update Forecast",
                                "footer",
                                "background-color: lightyellow"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000117_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000117_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How many sections are present in the component?",
                                "What is the label of the first section?",
                                "How many list items are shown in the Forecast Details section?",
                                "What visual feature distinguishes one of the list items in the forecast?",
                                "What is the label of the second section?",
                                "What background color is applied to the summary paragraph in the Weather Insights section?",
                                "What is the text on the button found at the bottom of the component?",
                                "In which container is the 'Update Forecast' button wrapped?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000117_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Weather",
                                "2",
                                "Forecast Details",
                                "4",
                                "Its value text is styled in blue",
                                "Weather Insights",
                                "Light yellow",
                                "Update Forecast",
                                "A div with the class 'footer'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component designed to display a task tracker interface.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'tracker-container'.\n- Insert a prominent header using an <h1> element with the text 'Task Tracker Dashboard', ensuring it is centered on the page.\n- Divide the component into exactly three sections, each wrapped in a <section> element and containing unique content.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a task title followed by a dash and its assigned priority.\n- In the second section, display a paragraph (<p>) that contains a span element with inline styling to set the font weight to bold.\n- In the third section, construct a table (<table>) with 2 columns labeled 'Task' and 'Status', and populate it with exactly 2 rows of data.\n- Position a button labeled 'Update Tracker' at the bottom of the component within a <div> element having the class 'feedback-container'.",
            "task_id": "000118",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the header text displayed at the top of the page?",
                "How many sections are visible in the interface?",
                "How many tasks are listed in the ordered list in the first section?",
                "What symbol is used to separate the task title and its priority in the first section’s list items?",
                "What styling is applied to the text inside the span element in the second section?",
                "What are the two column labels displayed in the table?",
                "How many rows of data can be seen in the table?",
                "What text is shown on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Task Tracker Dashboard",
                "3",
                "4",
                "Dash",
                "Bold",
                "Task and Status",
                "2",
                "Update Tracker"
            ],
            "raw_output_metric": [
                "tracker-container",
                "Task Tracker Dashboard",
                "<section>",
                "<ol>",
                "<li>",
                "-",
                "<p>",
                "font-weight: bold",
                "<table>",
                "Task",
                "Status",
                "feedback-container",
                "Update Tracker"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000118_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component designed to display a task tracker interface.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'tracker-container'.\n- Insert a prominent header using an <h1> element with the text 'Task Tracker Dashboard', ensuring it is centered on the page.\n- Divide the component into exactly three sections, each wrapped in a <section> element and containing unique content.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a task title followed by a dash and its assigned priority.\n- In the second section, display a paragraph (<p>) that contains a span element with inline styling to set the font weight to bold.\n- In the third section, construct a table (<table>) with 2 columns labeled 'Task' and 'Status', and populate it with exactly 2 rows of data.\n- Position a button labeled 'Update Tracker' at the bottom of the component within a <div> element having the class 'feedback-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000118_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "tracker-container",
                                "Task Tracker Dashboard",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "-",
                                "<p>",
                                "font-weight: bold",
                                "<table>",
                                "Task",
                                "Status",
                                "feedback-container",
                                "Update Tracker"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000118_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000118_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the page?",
                                "How many sections are visible in the interface?",
                                "How many tasks are listed in the ordered list in the first section?",
                                "What symbol is used to separate the task title and its priority in the first section’s list items?",
                                "What styling is applied to the text inside the span element in the second section?",
                                "What are the two column labels displayed in the table?",
                                "How many rows of data can be seen in the table?",
                                "What text is shown on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000118_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Tracker Dashboard",
                                "3",
                                "4",
                                "Dash",
                                "Bold",
                                "Task and Status",
                                "2",
                                "Update Tracker"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a dashboard summary of recent activities.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Dashboard'.\n- Use a container <div> element with a class name 'dashboard-main' to wrap the entire component.\n- Render exactly 3 modules, each enclosed within a <section> element with unique content.\n- The first module should display a table with precisely 2 rows and 3 columns, each cell showing different parts of the input.\n- The second module must include an ordered list (<ol>) with exactly 4 list items, each beginning with a distinct number followed by information from the input.\n- The third module should contain a blockquote (<blockquote>) that presents a motivational quote, applying a CSS class named 'quote-style' for styling.\n- Add a footer <footer> element containing a centered <p> element with the text 'Last updated: Today', styled with an inline background color set to lightgrey.\n- Place a button labeled 'Update Dashboard' at the bottom of the component inside a <div> element with the class 'update-btn'.",
            "task_id": "000119",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered main header?",
                "How many modules are displayed in the dashboard summary?",
                "How many rows and columns does the table in the first module have?",
                "How many items are shown in the ordered list of the second module?",
                "Does each item in the ordered list start with a distinct number?",
                "What element is used in the third module to display the motivational quote?",
                "What text is visible in the footer and what is its background highlight?",
                "What label is displayed on the update button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Activity Dashboard",
                "3",
                "2 rows and 3 columns",
                "4",
                "Yes",
                "A blockquote with 'quote-style' styling",
                "Last updated: Today with an inline lightgrey background",
                "Update Dashboard"
            ],
            "raw_output_metric": [
                "Activity Dashboard",
                "dashboard-main",
                "<section>",
                "<table>",
                "<tr>",
                "<td>",
                "<ol>",
                "<li>",
                "<blockquote>",
                "quote-style",
                "<footer>",
                "Last updated: Today",
                "background-color: lightgrey",
                "Update Dashboard",
                "update-btn"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000119_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a dashboard summary of recent activities.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Dashboard'.\n- Use a container <div> element with a class name 'dashboard-main' to wrap the entire component.\n- Render exactly 3 modules, each enclosed within a <section> element with unique content.\n- The first module should display a table with precisely 2 rows and 3 columns, each cell showing different parts of the input.\n- The second module must include an ordered list (<ol>) with exactly 4 list items, each beginning with a distinct number followed by information from the input.\n- The third module should contain a blockquote (<blockquote>) that presents a motivational quote, applying a CSS class named 'quote-style' for styling.\n- Add a footer <footer> element containing a centered <p> element with the text 'Last updated: Today', styled with an inline background color set to lightgrey.\n- Place a button labeled 'Update Dashboard' at the bottom of the component inside a <div> element with the class 'update-btn'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000119_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Activity Dashboard",
                                "dashboard-main",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "<ol>",
                                "<li>",
                                "<blockquote>",
                                "quote-style",
                                "<footer>",
                                "Last updated: Today",
                                "background-color: lightgrey",
                                "Update Dashboard",
                                "update-btn"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000119_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000119_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered main header?",
                                "How many modules are displayed in the dashboard summary?",
                                "How many rows and columns does the table in the first module have?",
                                "How many items are shown in the ordered list of the second module?",
                                "Does each item in the ordered list start with a distinct number?",
                                "What element is used in the third module to display the motivational quote?",
                                "What text is visible in the footer and what is its background highlight?",
                                "What label is displayed on the update button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000119_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Activity Dashboard",
                                "3",
                                "2 rows and 3 columns",
                                "4",
                                "Yes",
                                "A blockquote with 'quote-style' styling",
                                "Last updated: Today with an inline lightgrey background",
                                "Update Dashboard"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that structures distinct sections of a user report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"User Report\" displayed at the top.\n- Wrap the entire content within a <div> element that has a class name of \"report-wrapper\" for layout.\n- Create exactly three <section> elements, each representing a unique part of the report: \"Summary\", \"Details\", and \"Notes\".\n- In the \"Summary\" section, include an unordered list (<ul>) with exactly three list items (<li>), each displaying a label and its corresponding value separated by a colon (:); ensure one list item's value text is styled with a CSS class called \"important\" to apply a blue color.\n- In the \"Details\" section, include a paragraph (<p>) element with the text styled in bold using an inline style (e.g., style=\"font-weight: bold;\").\n- In the \"Notes\" section, construct a simple form containing exactly two input fields (one for a user's name and one for their comment) and a submit button labeled \"Send\".\n- Add a footer at the bottom of the component by including a <div> with the class \"footer-area\" that contains centered text reading \"Report Generated\".",
            "task_id": "000120",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the report?",
                "How many distinct sections are present in the report?",
                "Which section names are used to label the report sections?",
                "How many list items are visible in the Summary section?",
                "Is one of the list item values in the Summary section styled uniquely, and if so, with which class?",
                "How is the text in the Details section formatted?",
                "How many input fields are included in the Notes section form and what are they for?",
                "What is the label on the submit button in the Notes section and what text is shown in the footer at the bottom?"
            ],
            "VQA_answers": [
                "User Report",
                "3",
                "Summary, Details, Notes",
                "3",
                "Yes, with the 'important' class",
                "It is displayed in bold using an inline style",
                "2; one for a user's name and one for a comment",
                "The button is labeled 'Send' and the footer shows 'Report Generated'"
            ],
            "raw_output_metric": [
                "User Report",
                "report-wrapper",
                "Summary",
                "Details",
                "Notes",
                "important",
                "font-weight: bold;",
                "Send",
                "footer-area",
                "Report Generated"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000120_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that structures distinct sections of a user report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"User Report\" displayed at the top.\n- Wrap the entire content within a <div> element that has a class name of \"report-wrapper\" for layout.\n- Create exactly three <section> elements, each representing a unique part of the report: \"Summary\", \"Details\", and \"Notes\".\n- In the \"Summary\" section, include an unordered list (<ul>) with exactly three list items (<li>), each displaying a label and its corresponding value separated by a colon (:); ensure one list item's value text is styled with a CSS class called \"important\" to apply a blue color.\n- In the \"Details\" section, include a paragraph (<p>) element with the text styled in bold using an inline style (e.g., style=\"font-weight: bold;\").\n- In the \"Notes\" section, construct a simple form containing exactly two input fields (one for a user's name and one for their comment) and a submit button labeled \"Send\".\n- Add a footer at the bottom of the component by including a <div> with the class \"footer-area\" that contains centered text reading \"Report Generated\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000120_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Report",
                                "report-wrapper",
                                "Summary",
                                "Details",
                                "Notes",
                                "important",
                                "font-weight: bold;",
                                "Send",
                                "footer-area",
                                "Report Generated"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000120_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000120_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the report?",
                                "How many distinct sections are present in the report?",
                                "Which section names are used to label the report sections?",
                                "How many list items are visible in the Summary section?",
                                "Is one of the list item values in the Summary section styled uniquely, and if so, with which class?",
                                "How is the text in the Details section formatted?",
                                "How many input fields are included in the Notes section form and what are they for?",
                                "What is the label on the submit button in the Notes section and what text is shown in the footer at the bottom?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000120_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Report",
                                "3",
                                "Summary, Details, Notes",
                                "3",
                                "Yes, with the 'important' class",
                                "It is displayed in bold using an inline style",
                                "2; one for a user's name and one for a comment",
                                "The button is labeled 'Send' and the footer shows 'Report Generated'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays organized library event details as structured data.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Library Events'.\n- Use a <div> element to create a container with a class name of 'events-container' for layout purposes.\n- Display exactly 3 sections, each wrapped in a <section> element and containing unique content.\n- The first section should include an ordered list (<ol>) with exactly 4 list items (<li>), each formatted as 'Event: Date' extracted from the input.\n- The second section must contain a paragraph (<p>) with styled text using an inline style that sets the font-weight to bold and the text color to dark green, summarizing the event highlights.\n- The third section should include a table (<table>) with the class 'attendees-table' that consists of a header row (<thead>) defining exactly 3 column titles and a single data row (<tr>) with 3 cells (<td>) for attendee metrics.\n- Add a button labeled 'Register Now' positioned at the bottom of the component inside a <div> element with the class 'action-container' as a clear call-to-action.",
            "task_id": "000121",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text of the centered header at the top of the page?",
                "How many sections are displayed in the component?",
                "In the first section, how many items are listed in the ordered list?",
                "What format is used to display each event in the first section's list?",
                "How is the event highlight text styled in the second section?",
                "Which element is used in the second section to summarize event highlights?",
                "How many column titles are defined in the table header in the third section?",
                "How many cells are present in the data row of the table in the third section?",
                "What is the label of the button located at the bottom of the component?",
                "What is the class name of the container holding all the event sections?"
            ],
            "VQA_answers": [
                "Library Events",
                "3",
                "4",
                "Event: Date",
                "Bold and dark green",
                "Paragraph",
                "3",
                "3",
                "Register Now",
                "events-container"
            ],
            "raw_output_metric": [
                "h1",
                "Library Events",
                "events-container",
                "section",
                "ol",
                "li",
                "Event: Date",
                "p",
                "font-weight: bold",
                "color: dark green",
                "table",
                "attendees-table",
                "thead",
                "tr",
                "td",
                "action-container",
                "button",
                "Register Now"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000121_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays organized library event details as structured data.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Library Events'.\n- Use a <div> element to create a container with a class name of 'events-container' for layout purposes.\n- Display exactly 3 sections, each wrapped in a <section> element and containing unique content.\n- The first section should include an ordered list (<ol>) with exactly 4 list items (<li>), each formatted as 'Event: Date' extracted from the input.\n- The second section must contain a paragraph (<p>) with styled text using an inline style that sets the font-weight to bold and the text color to dark green, summarizing the event highlights.\n- The third section should include a table (<table>) with the class 'attendees-table' that consists of a header row (<thead>) defining exactly 3 column titles and a single data row (<tr>) with 3 cells (<td>) for attendee metrics.\n- Add a button labeled 'Register Now' positioned at the bottom of the component inside a <div> element with the class 'action-container' as a clear call-to-action."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000121_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "h1",
                                "Library Events",
                                "events-container",
                                "section",
                                "ol",
                                "li",
                                "Event: Date",
                                "p",
                                "font-weight: bold",
                                "color: dark green",
                                "table",
                                "attendees-table",
                                "thead",
                                "tr",
                                "td",
                                "action-container",
                                "button",
                                "Register Now"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000121_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000121_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered header at the top of the page?",
                                "How many sections are displayed in the component?",
                                "In the first section, how many items are listed in the ordered list?",
                                "What format is used to display each event in the first section's list?",
                                "How is the event highlight text styled in the second section?",
                                "Which element is used in the second section to summarize event highlights?",
                                "How many column titles are defined in the table header in the third section?",
                                "How many cells are present in the data row of the table in the third section?",
                                "What is the label of the button located at the bottom of the component?",
                                "What is the class name of the container holding all the event sections?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000121_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Events",
                                "3",
                                "4",
                                "Event: Date",
                                "Bold and dark green",
                                "Paragraph",
                                "3",
                                "3",
                                "Register Now",
                                "events-container"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a user profile dashboard with organized data sections.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘User Profile Dashboard’.\n- Use a <div> element to create a container with a class name of 'profile-container' for layout organization.\n- Create exactly 2 main sections using <section> elements, each presenting different data formats.\n- In the first section, implement a table (<table>) that contains exactly 3 rows (<tr>), with each row having 2 cells (<td>) where the first cell is a label and the second cell is a value.\n- Ensure that one row in the table has its value cell styled by including a CSS class called 'alert-yellow' to change its background color.\n- In the second section, display a paragraph (<p>) element that shows descriptive text with an inline style setting its color to blue.\n- Add a form (<form>) element below the sections that includes an input field and a submit button labeled ‘Update Profile’.\n- Wrap the form element inside a <div> with a class name 'form-container' to control its positioning.\n- Conclude the component with a footer (<footer>) element that contains the text ‘Last updated: today’ positioned at the bottom of the view.\n- Arrange all elements in a clear and hierarchical structure to ensure the data is visibly separated and organized.",
            "task_id": "000122",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed at the top center of the dashboard?",
                "How many main data sections are visible in the interface?",
                "How many table rows are presented in the first section?",
                "In the table, how many cells are there per row and what distinguishes one of the value cells?",
                "What styling is applied to the descriptive text in the second section?",
                "What is the label on the submit button in the form area?",
                "What text is shown in the footer at the bottom of the view?"
            ],
            "VQA_answers": [
                "User Profile Dashboard",
                "2",
                "3",
                "2 cells per row, with one value cell having a yellow background styling",
                "It is colored blue",
                "Update Profile",
                "Last updated: today"
            ],
            "raw_output_metric": [
                "User Profile Dashboard",
                "profile-container",
                "section",
                "table",
                "tr",
                "td",
                "alert-yellow",
                "color: blue",
                "Update Profile",
                "form-container",
                "footer",
                "Last updated: today"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000122_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a user profile dashboard with organized data sections.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘User Profile Dashboard’.\n- Use a <div> element to create a container with a class name of 'profile-container' for layout organization.\n- Create exactly 2 main sections using <section> elements, each presenting different data formats.\n- In the first section, implement a table (<table>) that contains exactly 3 rows (<tr>), with each row having 2 cells (<td>) where the first cell is a label and the second cell is a value.\n- Ensure that one row in the table has its value cell styled by including a CSS class called 'alert-yellow' to change its background color.\n- In the second section, display a paragraph (<p>) element that shows descriptive text with an inline style setting its color to blue.\n- Add a form (<form>) element below the sections that includes an input field and a submit button labeled ‘Update Profile’.\n- Wrap the form element inside a <div> with a class name 'form-container' to control its positioning.\n- Conclude the component with a footer (<footer>) element that contains the text ‘Last updated: today’ positioned at the bottom of the view.\n- Arrange all elements in a clear and hierarchical structure to ensure the data is visibly separated and organized."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000122_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Profile Dashboard",
                                "profile-container",
                                "section",
                                "table",
                                "tr",
                                "td",
                                "alert-yellow",
                                "color: blue",
                                "Update Profile",
                                "form-container",
                                "footer",
                                "Last updated: today"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000122_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000122_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed at the top center of the dashboard?",
                                "How many main data sections are visible in the interface?",
                                "How many table rows are presented in the first section?",
                                "In the table, how many cells are there per row and what distinguishes one of the value cells?",
                                "What styling is applied to the descriptive text in the second section?",
                                "What is the label on the submit button in the form area?",
                                "What text is shown in the footer at the bottom of the view?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000122_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Profile Dashboard",
                                "2",
                                "3",
                                "2 cells per row, with one value cell having a yellow background styling",
                                "It is colored blue",
                                "Update Profile",
                                "Last updated: today"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the text input into an Angular component that displays various metric categories in a structured layout.\n\nFeature Requirements:\n- Add a centered <h1> element at the top with the text \"User Metrics Dashboard\".\n- Enclose all component content within a <div> element having the class name \"dashboard-container\".\n- Create exactly 3 <article> sections, each representing a distinct metric category with its own header.\n- Within each <article>, include a <h3> element that displays the category name and an unordered list (<ul>) that contains exactly 2 list items (<li>), each showing a metric label and its numeric value separated by a dash (-).\n- In the first <article>, wrap the numeric value in each list item inside a <strong> tag for emphasis.\n- Ensure that in one of the unordered lists, one <li> element uses a CSS class \"highlight\" to alter the text color.\n- For the third <article>, add an inline style to the <h3> element that underlines the text.\n- Insert a <footer> element with the class \"details-footer\" at the bottom, inside which a clickable <a> element is present with the text \"View Details\" and an href attribute set to \"#\".",
            "task_id": "000123",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered header at the top of the component?",
                "How many article sections are present in the component?",
                "How many list items are contained within each article's unordered list?",
                "Which article wraps the numeric values in a bold style?",
                "Which article's header is styled to be underlined?",
                "Is there a list item with a specific CSS class to alter text color, and if so, what is the class?",
                "What is the text and hyperlink reference for the link inside the footer?"
            ],
            "VQA_answers": [
                "User Metrics Dashboard",
                "3",
                "2",
                "The first article",
                "The third article",
                "Yes, highlight",
                "View Details, href: #"
            ],
            "raw_output_metric": [
                "User Metrics Dashboard",
                "dashboard-container",
                "article",
                "h3",
                "ul",
                "li",
                "strong",
                "highlight",
                "text-decoration: underline;",
                "details-footer",
                "View Details",
                "href=\"#\"",
                "-"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000123_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the text input into an Angular component that displays various metric categories in a structured layout.\n\nFeature Requirements:\n- Add a centered <h1> element at the top with the text \"User Metrics Dashboard\".\n- Enclose all component content within a <div> element having the class name \"dashboard-container\".\n- Create exactly 3 <article> sections, each representing a distinct metric category with its own header.\n- Within each <article>, include a <h3> element that displays the category name and an unordered list (<ul>) that contains exactly 2 list items (<li>), each showing a metric label and its numeric value separated by a dash (-).\n- In the first <article>, wrap the numeric value in each list item inside a <strong> tag for emphasis.\n- Ensure that in one of the unordered lists, one <li> element uses a CSS class \"highlight\" to alter the text color.\n- For the third <article>, add an inline style to the <h3> element that underlines the text.\n- Insert a <footer> element with the class \"details-footer\" at the bottom, inside which a clickable <a> element is present with the text \"View Details\" and an href attribute set to \"#\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000123_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Metrics Dashboard",
                                "dashboard-container",
                                "article",
                                "h3",
                                "ul",
                                "li",
                                "strong",
                                "highlight",
                                "text-decoration: underline;",
                                "details-footer",
                                "View Details",
                                "href=\"#\"",
                                "-"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000123_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000123_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered header at the top of the component?",
                                "How many article sections are present in the component?",
                                "How many list items are contained within each article's unordered list?",
                                "Which article wraps the numeric values in a bold style?",
                                "Which article's header is styled to be underlined?",
                                "Is there a list item with a specific CSS class to alter text color, and if so, what is the class?",
                                "What is the text and hyperlink reference for the link inside the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000123_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Metrics Dashboard",
                                "3",
                                "2",
                                "The first article",
                                "The third article",
                                "Yes, highlight",
                                "View Details, href: #"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the given narrative into an Angular component that renders an interactive analytics panel.\n\nFeature Requirements:\n- Begin with an <h1> element centered on the page displaying the text \"Analytics Panel\".\n- Wrap all content inside a <div> element with a class name \"analytics-wrapper\".\n- Create exactly 3 sections using <section> elements, each showing a distinct aspect of the narrative.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents a key statistic in the format \"Label: Value\".\n- In one of the list items in the ordered list, apply a CSS class \"emphasis-blue\" so that its text appears in blue.\n- In the second section, display a paragraph (<p>) that uses an inline style to set the text color to green and the font style to italic.\n- In the third section, construct a table consisting of one header row and one data row; the header row must have 2 header cells (<th>) labeled \"Parameter\" and \"Value\", with the data row showcasing corresponding content.\n- At the bottom of the component, include a <div> element with the class \"action-panel\" containing a button labeled \"Reload Metrics\".",
            "task_id": "000124",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main title displayed at the top of the panel?",
                "How many sections are present in the analytics panel?",
                "How many list items are shown in the first section's ordered list?",
                "Which list item is visually highlighted with a blue effect?",
                "What unique styling is applied to the paragraph in the second section?",
                "What are the header labels displayed in the table?",
                "What label is shown on the button at the bottom of the component?",
                "What is the class name of the content wrapper surrounding the entire component?",
                "What is the class name of the div containing the button?"
            ],
            "VQA_answers": [
                "Analytics Panel",
                "3",
                "4",
                "One statistic item has the emphasis-blue class",
                "Green text color and italic font style",
                "Parameter and Value",
                "Reload Metrics",
                "analytics-wrapper",
                "action-panel"
            ],
            "raw_output_metric": [
                "Analytics Panel",
                "analytics-wrapper",
                "<section>",
                "<ol>",
                "<li>",
                "Label: Value",
                "emphasis-blue",
                "<p>",
                "color: green",
                "font-style: italic",
                "<table>",
                "<th>",
                "Parameter",
                "Value",
                "action-panel",
                "Reload Metrics"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000124_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the given narrative into an Angular component that renders an interactive analytics panel.\n\nFeature Requirements:\n- Begin with an <h1> element centered on the page displaying the text \"Analytics Panel\".\n- Wrap all content inside a <div> element with a class name \"analytics-wrapper\".\n- Create exactly 3 sections using <section> elements, each showing a distinct aspect of the narrative.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents a key statistic in the format \"Label: Value\".\n- In one of the list items in the ordered list, apply a CSS class \"emphasis-blue\" so that its text appears in blue.\n- In the second section, display a paragraph (<p>) that uses an inline style to set the text color to green and the font style to italic.\n- In the third section, construct a table consisting of one header row and one data row; the header row must have 2 header cells (<th>) labeled \"Parameter\" and \"Value\", with the data row showcasing corresponding content.\n- At the bottom of the component, include a <div> element with the class \"action-panel\" containing a button labeled \"Reload Metrics\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000124_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Analytics Panel",
                                "analytics-wrapper",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "Label: Value",
                                "emphasis-blue",
                                "<p>",
                                "color: green",
                                "font-style: italic",
                                "<table>",
                                "<th>",
                                "Parameter",
                                "Value",
                                "action-panel",
                                "Reload Metrics"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000124_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000124_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the panel?",
                                "How many sections are present in the analytics panel?",
                                "How many list items are shown in the first section's ordered list?",
                                "Which list item is visually highlighted with a blue effect?",
                                "What unique styling is applied to the paragraph in the second section?",
                                "What are the header labels displayed in the table?",
                                "What label is shown on the button at the bottom of the component?",
                                "What is the class name of the content wrapper surrounding the entire component?",
                                "What is the class name of the div containing the button?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000124_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Analytics Panel",
                                "3",
                                "4",
                                "One statistic item has the emphasis-blue class",
                                "Green text color and italic font style",
                                "Parameter and Value",
                                "Reload Metrics",
                                "analytics-wrapper",
                                "action-panel"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays organized user information in a dashboard format.\n\nFeature Requirements:\n- Include a top header using an <h1> element with the text \"User Statistics Dashboard\".\n- Wrap all elements inside a <div> with the class name 'dashboard-container'.\n- Create exactly 3 sections, each enclosed in a <section> element containing distinct content.\n- In the first section, display a table (<table>) with exactly 2 rows (<tr>) and 2 cells (<td>) per row, using data from the input.\n- In the second section, implement an ordered list (<ol>) with exactly 4 list items (<li>), each presenting a unique detail from the input.\n- In the third section, include a paragraph (<p>) with inline styling that transforms the text to uppercase.\n- Apply a CSS class 'row-highlight' to every even-numbered table row within the table in the first section.\n- At the bottom of the component, add a footer <div> with the class 'footer-section' that contains a button labeled \"Update Info\".",
            "task_id": "000125",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the page title displayed at the top?",
                "What class name is applied to the main container wrapping all elements?",
                "How many sections are present in the dashboard?",
                "How many rows and cells does the table in the first section contain?",
                "Which table rows are specially styled?",
                "How many items are listed in the ordered list of the second section?",
                "How is the text in the paragraph of the third section displayed?",
                "What does the button in the footer section display?"
            ],
            "VQA_answers": [
                "User Statistics Dashboard",
                "dashboard-container",
                "3",
                "2 rows and 2 cells per row",
                "Every even-numbered row has the 'row-highlight' class",
                "4",
                "In uppercase",
                "Update Info"
            ],
            "raw_output_metric": [
                "User Statistics Dashboard",
                "dashboard-container",
                "<section>",
                "<table>",
                "<tr>",
                "<td>",
                "row-highlight",
                "<ol>",
                "<li>",
                "<p",
                "text-transform: uppercase;",
                "footer-section",
                "Update Info"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000125_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays organized user information in a dashboard format.\n\nFeature Requirements:\n- Include a top header using an <h1> element with the text \"User Statistics Dashboard\".\n- Wrap all elements inside a <div> with the class name 'dashboard-container'.\n- Create exactly 3 sections, each enclosed in a <section> element containing distinct content.\n- In the first section, display a table (<table>) with exactly 2 rows (<tr>) and 2 cells (<td>) per row, using data from the input.\n- In the second section, implement an ordered list (<ol>) with exactly 4 list items (<li>), each presenting a unique detail from the input.\n- In the third section, include a paragraph (<p>) with inline styling that transforms the text to uppercase.\n- Apply a CSS class 'row-highlight' to every even-numbered table row within the table in the first section.\n- At the bottom of the component, add a footer <div> with the class 'footer-section' that contains a button labeled \"Update Info\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000125_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Statistics Dashboard",
                                "dashboard-container",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "row-highlight",
                                "<ol>",
                                "<li>",
                                "<p",
                                "text-transform: uppercase;",
                                "footer-section",
                                "Update Info"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000125_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000125_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the page title displayed at the top?",
                                "What class name is applied to the main container wrapping all elements?",
                                "How many sections are present in the dashboard?",
                                "How many rows and cells does the table in the first section contain?",
                                "Which table rows are specially styled?",
                                "How many items are listed in the ordered list of the second section?",
                                "How is the text in the paragraph of the third section displayed?",
                                "What does the button in the footer section display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000125_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Statistics Dashboard",
                                "dashboard-container",
                                "3",
                                "2 rows and 2 cells per row",
                                "Every even-numbered row has the 'row-highlight' class",
                                "4",
                                "In uppercase",
                                "Update Info"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a weather forecast report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report' at the top of the component.\n- Use a <div> element with a class name of 'weather-body' to contain all the component content.\n- Create exactly 2 sections, each wrapped in a <section> element with distinct weather-related content.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a weather parameter (e.g., Temperature, Humidity, Wind Speed, Pressure) from the input, with each item formatted as a label and a value separated by a colon (:).\n- Ensure that one of the list items has its value text colored blue by using a CSS class called 'highlight-blue'.\n- The second section should contain a paragraph (<p>) that displays a brief weather description, with inline style applied to make the text bold.\n- At the bottom of the component, add a button element labeled 'Update Forecast', enclosed within a <div> element with a class name of 'action-container'.",
            "task_id": "000126",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How many sections are visible in the component?",
                "What is the class name of the container that wraps all component content?",
                "How many list items are displayed in the first weather section?",
                "What CSS class is used to render one of the weather parameter values in blue?",
                "How is the brief weather description styled in the second section?",
                "What text appears on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Weather Report",
                "2",
                "weather-body",
                "4",
                "highlight-blue",
                "It is displayed in bold text",
                "Update Forecast"
            ],
            "raw_output_metric": [
                "Weather Report",
                "weather-body",
                "Temperature",
                "Humidity",
                "Wind Speed",
                "Pressure",
                "highlight-blue",
                "font-weight: bold",
                "action-container",
                "Update Forecast"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000126_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a weather forecast report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report' at the top of the component.\n- Use a <div> element with a class name of 'weather-body' to contain all the component content.\n- Create exactly 2 sections, each wrapped in a <section> element with distinct weather-related content.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a weather parameter (e.g., Temperature, Humidity, Wind Speed, Pressure) from the input, with each item formatted as a label and a value separated by a colon (:).\n- Ensure that one of the list items has its value text colored blue by using a CSS class called 'highlight-blue'.\n- The second section should contain a paragraph (<p>) that displays a brief weather description, with inline style applied to make the text bold.\n- At the bottom of the component, add a button element labeled 'Update Forecast', enclosed within a <div> element with a class name of 'action-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000126_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Report",
                                "weather-body",
                                "Temperature",
                                "Humidity",
                                "Wind Speed",
                                "Pressure",
                                "highlight-blue",
                                "font-weight: bold",
                                "action-container",
                                "Update Forecast"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000126_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000126_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How many sections are visible in the component?",
                                "What is the class name of the container that wraps all component content?",
                                "How many list items are displayed in the first weather section?",
                                "What CSS class is used to render one of the weather parameter values in blue?",
                                "How is the brief weather description styled in the second section?",
                                "What text appears on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000126_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Report",
                                "2",
                                "weather-body",
                                "4",
                                "highlight-blue",
                                "It is displayed in bold text",
                                "Update Forecast"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that transforms a text description of a travel itinerary into a structured, interactive itinerary layout.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Trip Itinerary\".\n- Create a main container using a <div> element with a class name \"itinerary-container\".\n- Include exactly 3 sections, each enclosed in a <section> element, to organize different parts of the itinerary.\n- In the first section, render an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents an activity time and description separated by a dash (-).\n- In the second section, display a paragraph (<p>) with the text \"Plan your journey!\" and apply an inline style to set the text color to blue.\n- In the third section, include a footer-like block by using a <div> with the class \"action-buttons\" that contains two buttons labeled \"Start Trip\" and \"Cancel\".\n- Each list item in the ordered list must also contain a span element with the class \"activity-id\" that shows a unique sequential identifier.\n- Ensure that all HTML elements are arranged with clear nesting so that the structure and layout are easily verifiable.",
            "task_id": "000127",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the main centered title?",
                "How many main sections are displayed in the layout?",
                "How many items are in the ordered list in the first section?",
                "What symbol separates the activity time and description in each list item?",
                "Does each list item display a unique sequential identifier?",
                "What text is shown in the paragraph of the second section?",
                "What color is applied to the text in the second section's paragraph?",
                "How many buttons are visible in the action button block of the third section?",
                "What are the labels on the two buttons in the third section?"
            ],
            "VQA_answers": [
                "Trip Itinerary",
                "3",
                "4",
                "-",
                "Yes",
                "Plan your journey!",
                "Blue",
                "2",
                "Start Trip and Cancel"
            ],
            "raw_output_metric": [
                "Trip Itinerary",
                "itinerary-container",
                "<section>",
                "<ol>",
                "<li>",
                "activity-id",
                "-",
                "Plan your journey!",
                "color: blue",
                "action-buttons",
                "Start Trip",
                "Cancel"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000127_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nGenerate an Angular component that transforms a text description of a travel itinerary into a structured, interactive itinerary layout.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Trip Itinerary\".\n- Create a main container using a <div> element with a class name \"itinerary-container\".\n- Include exactly 3 sections, each enclosed in a <section> element, to organize different parts of the itinerary.\n- In the first section, render an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents an activity time and description separated by a dash (-).\n- In the second section, display a paragraph (<p>) with the text \"Plan your journey!\" and apply an inline style to set the text color to blue.\n- In the third section, include a footer-like block by using a <div> with the class \"action-buttons\" that contains two buttons labeled \"Start Trip\" and \"Cancel\".\n- Each list item in the ordered list must also contain a span element with the class \"activity-id\" that shows a unique sequential identifier.\n- Ensure that all HTML elements are arranged with clear nesting so that the structure and layout are easily verifiable."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000127_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Trip Itinerary",
                                "itinerary-container",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "activity-id",
                                "-",
                                "Plan your journey!",
                                "color: blue",
                                "action-buttons",
                                "Start Trip",
                                "Cancel"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000127_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000127_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main centered title?",
                                "How many main sections are displayed in the layout?",
                                "How many items are in the ordered list in the first section?",
                                "What symbol separates the activity time and description in each list item?",
                                "Does each list item display a unique sequential identifier?",
                                "What text is shown in the paragraph of the second section?",
                                "What color is applied to the text in the second section's paragraph?",
                                "How many buttons are visible in the action button block of the third section?",
                                "What are the labels on the two buttons in the third section?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000127_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Trip Itinerary",
                                "3",
                                "4",
                                "-",
                                "Yes",
                                "Plan your journey!",
                                "Blue",
                                "2",
                                "Start Trip and Cancel"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays structured event schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Event Schedule'.\n- Enclose all component content within a <div> element with a class name of 'schedule-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element that presents different aspects of the event details.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Day: Event\" based on the input.\n- In the second section, insert a paragraph (<p>) that displays additional event notes, applying an inline style to underline the text.\n- The third section should contain a <div> element wrapping a numbered list (<ol>) with precisely 2 items, each item representing a venue detail.\n- Within the unordered list of the first section, ensure one list item has its event title styled using a CSS class named 'alert'.\n- Add a button element labeled 'Load More Events', positioned at the bottom of the component using a <div> with the class 'action-container'.",
            "task_id": "000128",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered title at the top of the component?",
                "How many sections are present in the component?",
                "How many bullet points appear in the first section's list?",
                "Is one of the event names in the first section styled differently using a special class?",
                "What descriptive text is underlined in the second section?",
                "How many venue details are listed in the numbered list of the third section?",
                "What label is visible on the button at the bottom of the component?",
                "Are all the component contents enclosed within a main wrapper?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "3",
                "4",
                "Yes",
                "Additional event notes",
                "2",
                "Load More Events",
                "Yes"
            ],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000128_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays structured event schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Event Schedule'.\n- Enclose all component content within a <div> element with a class name of 'schedule-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element that presents different aspects of the event details.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Day: Event\" based on the input.\n- In the second section, insert a paragraph (<p>) that displays additional event notes, applying an inline style to underline the text.\n- The third section should contain a <div> element wrapping a numbered list (<ol>) with precisely 2 items, each item representing a venue detail.\n- Within the unordered list of the first section, ensure one list item has its event title styled using a CSS class named 'alert'.\n- Add a button element labeled 'Load More Events', positioned at the bottom of the component using a <div> with the class 'action-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000128_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000128_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000128_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title at the top of the component?",
                                "How many sections are present in the component?",
                                "How many bullet points appear in the first section's list?",
                                "Is one of the event names in the first section styled differently using a special class?",
                                "What descriptive text is underlined in the second section?",
                                "How many venue details are listed in the numbered list of the third section?",
                                "What label is visible on the button at the bottom of the component?",
                                "Are all the component contents enclosed within a main wrapper?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000128_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "3",
                                "4",
                                "Yes",
                                "Additional event notes",
                                "2",
                                "Load More Events",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays categorized, data-driven content.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Report'.\n- Create a container <div> with the class 'activity-container' that wraps the entire component.\n- Add exactly 3 sections, each enclosed in a <section> element, with each section designated for a different category of information.\n- In the first section, render an ordered list (<ol>) containing exactly 4 list items (<li>), where each item shows a label and a corresponding value separated by a hyphen (-); ensure one of the list items has its text underlined via an inline CSS style.\n- In the second section, construct a table with 2 rows: the first row for column headers and the second row displaying data extracted from the input.\n- In the third section, display a paragraph (<p>) styled with an inline style that sets the text color to blue and the font weight to bold.\n- Place a button labeled 'Update Report' inside a <div> with the class 'action-container', ensuring it is positioned at the bottom of the component.\n- Embed an Angular data binding expression within the list items to allow dynamic content population.",
            "task_id": "000129",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is displayed in the centered header?",
                "How many sections are visible in the component?",
                "How many list items are in the ordered list of the first section?",
                "What special style is applied to one of the list items in the first section?",
                "How many rows does the table in the second section have?",
                "What inline styles are applied to the paragraph in the third section?",
                "What text is shown on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Activity Report",
                "3",
                "4",
                "Its text is underlined",
                "2",
                "Blue text color and bold font",
                "Update Report"
            ],
            "raw_output_metric": [
                "Activity Report",
                "activity-container",
                "<h1>",
                "<div class=\"activity-container\">",
                "<section>",
                "<ol>",
                "<li>",
                "-",
                "text-decoration: underline;",
                "<table>",
                "<tr>",
                "<th>",
                "<td>",
                "<p style=\"color: blue; font-weight: bold;\">",
                "action-container",
                "<button>",
                "Update Report",
                "{{"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000129_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays categorized, data-driven content.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Report'.\n- Create a container <div> with the class 'activity-container' that wraps the entire component.\n- Add exactly 3 sections, each enclosed in a <section> element, with each section designated for a different category of information.\n- In the first section, render an ordered list (<ol>) containing exactly 4 list items (<li>), where each item shows a label and a corresponding value separated by a hyphen (-); ensure one of the list items has its text underlined via an inline CSS style.\n- In the second section, construct a table with 2 rows: the first row for column headers and the second row displaying data extracted from the input.\n- In the third section, display a paragraph (<p>) styled with an inline style that sets the text color to blue and the font weight to bold.\n- Place a button labeled 'Update Report' inside a <div> with the class 'action-container', ensuring it is positioned at the bottom of the component.\n- Embed an Angular data binding expression within the list items to allow dynamic content population."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000129_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Activity Report",
                                "activity-container",
                                "<h1>",
                                "<div class=\"activity-container\">",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "-",
                                "text-decoration: underline;",
                                "<table>",
                                "<tr>",
                                "<th>",
                                "<td>",
                                "<p style=\"color: blue; font-weight: bold;\">",
                                "action-container",
                                "<button>",
                                "Update Report",
                                "{{"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000129_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000129_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is displayed in the centered header?",
                                "How many sections are visible in the component?",
                                "How many list items are in the ordered list of the first section?",
                                "What special style is applied to one of the list items in the first section?",
                                "How many rows does the table in the second section have?",
                                "What inline styles are applied to the paragraph in the third section?",
                                "What text is shown on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000129_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Activity Report",
                                "3",
                                "4",
                                "Its text is underlined",
                                "2",
                                "Blue text color and bold font",
                                "Update Report"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed book review layout.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Book Review'.\n- Use a <div> element with a class name of 'book-container' to wrap the entire component.\n- Create exactly 3 sections, each enclosed in a <section> element and containing distinct content.\n- The first section must display a paragraph (<p>) with the input summary text and use an inline style to set the font size to 16px and the font family to Arial.\n- The second section must contain an ordered list (<ol>) with exactly 4 list items (<li>), each representing a chapter with its title and page range, where each list item shows the chapter name and page range separated by a dash (-).\n- The third section must include a table (<table>) with one header row and exactly 2 data rows; the header row should have two columns labeled 'Character' and 'Role'.\n- Inside the second section, include a hyperlink (<a>) with the text 'Read More' that has an href attribute set to '#' and is aligned to the right using a wrapping <div> with a class 'link-container'.\n- At the bottom of the component, add a <div> with a class 'footer-section' that displays the static text 'End of Review'.",
            "task_id": "000130",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How many sections are visible in the layout?",
                "What font size and family is applied to the summary text in the first section?",
                "How many list items are shown in the ordered list within the second section?",
                "What is the text displayed on the hyperlink in the second section?",
                "What column labels are shown in the table header in the third section?",
                "What static text is found at the bottom of the component in the footer?"
            ],
            "VQA_answers": [
                "Book Review",
                "3",
                "16px, Arial",
                "4",
                "Read More",
                "Character and Role",
                "End of Review"
            ],
            "raw_output_metric": [
                "Book Review",
                "book-container",
                "section",
                "p",
                "16px",
                "Arial",
                "ol",
                "li",
                "-",
                "a",
                "Read More",
                "link-container",
                "href=\"#\"",
                "table",
                "Character",
                "Role",
                "footer-section",
                "End of Review"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000130_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed book review layout.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Book Review'.\n- Use a <div> element with a class name of 'book-container' to wrap the entire component.\n- Create exactly 3 sections, each enclosed in a <section> element and containing distinct content.\n- The first section must display a paragraph (<p>) with the input summary text and use an inline style to set the font size to 16px and the font family to Arial.\n- The second section must contain an ordered list (<ol>) with exactly 4 list items (<li>), each representing a chapter with its title and page range, where each list item shows the chapter name and page range separated by a dash (-).\n- The third section must include a table (<table>) with one header row and exactly 2 data rows; the header row should have two columns labeled 'Character' and 'Role'.\n- Inside the second section, include a hyperlink (<a>) with the text 'Read More' that has an href attribute set to '#' and is aligned to the right using a wrapping <div> with a class 'link-container'.\n- At the bottom of the component, add a <div> with a class 'footer-section' that displays the static text 'End of Review'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000130_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Review",
                                "book-container",
                                "section",
                                "p",
                                "16px",
                                "Arial",
                                "ol",
                                "li",
                                "-",
                                "a",
                                "Read More",
                                "link-container",
                                "href=\"#\"",
                                "table",
                                "Character",
                                "Role",
                                "footer-section",
                                "End of Review"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000130_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000130_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How many sections are visible in the layout?",
                                "What font size and family is applied to the summary text in the first section?",
                                "How many list items are shown in the ordered list within the second section?",
                                "What is the text displayed on the hyperlink in the second section?",
                                "What column labels are shown in the table header in the third section?",
                                "What static text is found at the bottom of the component in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000130_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Review",
                                "3",
                                "16px, Arial",
                                "4",
                                "Read More",
                                "Character and Role",
                                "End of Review"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of a user feedback survey.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Survey Summary'.\n- Wrap all content in a <div> element with a class name of 'survey-container' to structure the layout.\n- Create exactly 3 distinct sections, each enclosed in a <section> element.\n- The first section must include a table that has a header row and exactly 2 data rows; each row should have 3 cells representing different feedback metrics.\n- The second section should display a paragraph (<p>) with inline styling that sets the font size to 16px and the text color to teal.\n- The third section must include a <span> element that shows a status message, using a CSS class called 'status-blue' to render the text in blue.\n- At the bottom of the component, include a button labeled 'Submit Feedback', positioned within a <div> element with class 'action-container'.",
            "task_id": "000131",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered title displayed at the top?",
                "What container class wraps all the content in the layout?",
                "How many distinct sections are present in the component?",
                "In the first section, what element is used to present feedback metrics?",
                "How many data rows does the table include?",
                "How many cells are present in each row of the table?",
                "What are the inline style attributes applied to the paragraph in the second section?",
                "What CSS class is used for the status message displayed in the third section?",
                "What is the label on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Survey Summary",
                "survey-container",
                "3",
                "Table",
                "2",
                "3",
                "Font size 16px and text color teal",
                "status-blue",
                "Submit Feedback"
            ],
            "raw_output_metric": [
                "Survey Summary",
                "survey-container",
                "<section>",
                "<table>",
                "<tr>",
                "<th>",
                "<td>",
                "font-size: 16px; color: teal;",
                "status-blue",
                "Submit Feedback",
                "action-container"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000131_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of a user feedback survey.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Survey Summary'.\n- Wrap all content in a <div> element with a class name of 'survey-container' to structure the layout.\n- Create exactly 3 distinct sections, each enclosed in a <section> element.\n- The first section must include a table that has a header row and exactly 2 data rows; each row should have 3 cells representing different feedback metrics.\n- The second section should display a paragraph (<p>) with inline styling that sets the font size to 16px and the text color to teal.\n- The third section must include a <span> element that shows a status message, using a CSS class called 'status-blue' to render the text in blue.\n- At the bottom of the component, include a button labeled 'Submit Feedback', positioned within a <div> element with class 'action-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000131_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Survey Summary",
                                "survey-container",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<th>",
                                "<td>",
                                "font-size: 16px; color: teal;",
                                "status-blue",
                                "Submit Feedback",
                                "action-container"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000131_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000131_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top?",
                                "What container class wraps all the content in the layout?",
                                "How many distinct sections are present in the component?",
                                "In the first section, what element is used to present feedback metrics?",
                                "How many data rows does the table include?",
                                "How many cells are present in each row of the table?",
                                "What are the inline style attributes applied to the paragraph in the second section?",
                                "What CSS class is used for the status message displayed in the third section?",
                                "What is the label on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000131_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Survey Summary",
                                "survey-container",
                                "3",
                                "Table",
                                "2",
                                "3",
                                "Font size 16px and text color teal",
                                "status-blue",
                                "Submit Feedback"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a weekly weather forecast overview.\n\nFeature Requirements:\n- Create a centered header using an <h1> element with the text \"Weekly Weather Forecast\" at the top of the component.\n- Wrap all content in a <div> element with a class name of 'weather-wrapper' for layout purposes.\n- Include exactly 3 sections, each enclosed within a <section> element and containing uniquely labeled content.\n- The first section must display a table with a header row and exactly 4 data rows; the table should have 2 columns labeled \"Time\" and \"Temperature\".\n- The second section should contain an ordered list (<ol>) with exactly 5 list items, each representing a specific weather tip.\n- The third section must include a paragraph (<p>) that provides a brief summary of the weekly forecast and apply an inline style to change the text color to green.\n- At the bottom of the component, add a button labeled \"Update Forecast\" placed within a <div> with the class 'update-button' to ensure proper positioning.",
            "task_id": "000132",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main header text displayed at the top of the component?",
                "How many sections are visible in the component?",
                "What are the names of the two columns in the table?",
                "How many rows of weather data (excluding the header) are in the table?",
                "How many weather tips are listed in the ordered list?",
                "What element contains the summary of the weekly forecast and what is its text color?",
                "What label does the button at the bottom display?",
                "What class is assigned to the wrapper that contains all the content?"
            ],
            "VQA_answers": [
                "Weekly Weather Forecast",
                "3",
                "Time and Temperature",
                "4",
                "5",
                "A paragraph with green text",
                "Update Forecast",
                "weather-wrapper"
            ],
            "raw_output_metric": [
                "Weekly Weather Forecast",
                "weather-wrapper",
                "<h1>",
                "<div class=\"weather-wrapper\">",
                "<section>",
                "<table>",
                "<th>",
                "Time",
                "Temperature",
                "<tr>",
                "<ol>",
                "<li>",
                "<p>",
                "color: green;",
                "Update Forecast",
                "update-button"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000132_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a weekly weather forecast overview.\n\nFeature Requirements:\n- Create a centered header using an <h1> element with the text \"Weekly Weather Forecast\" at the top of the component.\n- Wrap all content in a <div> element with a class name of 'weather-wrapper' for layout purposes.\n- Include exactly 3 sections, each enclosed within a <section> element and containing uniquely labeled content.\n- The first section must display a table with a header row and exactly 4 data rows; the table should have 2 columns labeled \"Time\" and \"Temperature\".\n- The second section should contain an ordered list (<ol>) with exactly 5 list items, each representing a specific weather tip.\n- The third section must include a paragraph (<p>) that provides a brief summary of the weekly forecast and apply an inline style to change the text color to green.\n- At the bottom of the component, add a button labeled \"Update Forecast\" placed within a <div> with the class 'update-button' to ensure proper positioning."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000132_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Weather Forecast",
                                "weather-wrapper",
                                "<h1>",
                                "<div class=\"weather-wrapper\">",
                                "<section>",
                                "<table>",
                                "<th>",
                                "Time",
                                "Temperature",
                                "<tr>",
                                "<ol>",
                                "<li>",
                                "<p>",
                                "color: green;",
                                "Update Forecast",
                                "update-button"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000132_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000132_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top of the component?",
                                "How many sections are visible in the component?",
                                "What are the names of the two columns in the table?",
                                "How many rows of weather data (excluding the header) are in the table?",
                                "How many weather tips are listed in the ordered list?",
                                "What element contains the summary of the weekly forecast and what is its text color?",
                                "What label does the button at the bottom display?",
                                "What class is assigned to the wrapper that contains all the content?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000132_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Weather Forecast",
                                "3",
                                "Time and Temperature",
                                "4",
                                "5",
                                "A paragraph with green text",
                                "Update Forecast",
                                "weather-wrapper"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured employee performance reviews.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Performance Reviews\" and an inline style that sets the background color to lightblue.\n- Use a <div> element with a class name \"review-wrapper\" to serve as the main container for the component.\n- Create exactly 3 sections, each wrapped in a <section> element: the first section displays employee names, the second shows performance scores, and the third provides review comments.\n- In the first section, include an unordered list (<ul>) containing exactly 4 list items (<li>), each displaying an employee's name prefaced by a label \"Name:\".\n- In the second section, add a <table> element with exactly 2 rows and 2 columns; one column shows metric labels (like \"Q1 Score\" and \"Q2 Score\") and the other shows their corresponding numeric values.\n- In the third section, include a paragraph (<p>) with an inline style to italicize the text, containing a note such as \"Overall feedback for the review period.\"\n- Ensure at least one list item in the first section applies a CSS class called \"highlight-green\" to color its text green.\n- Add a button labeled \"Submit Reviews\" inside a <div> with the class \"button-group\" placed at the bottom of the component.",
            "task_id": "000133",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the component?",
                "What is the background color of the title?",
                "How many sections are visible in the component?",
                "How many employee names are listed in the first section?",
                "Is any employee name highlighted in green?",
                "What metric labels are shown in the table?",
                "What note is provided in the review comments section?",
                "What is the label on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Performance Reviews",
                "lightblue",
                "3",
                "4",
                "Yes",
                "Q1 Score and Q2 Score",
                "Overall feedback for the review period",
                "Submit Reviews"
            ],
            "raw_output_metric": [
                "Performance Reviews",
                "background-color: lightblue",
                "review-wrapper",
                "<section>",
                "<ul>",
                "<li>",
                "Name:",
                "highlight-green",
                "<table>",
                "Q1 Score",
                "Q2 Score",
                "<p>",
                "Overall feedback for the review period.",
                "button-group",
                "Submit Reviews"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000133_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured employee performance reviews.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Performance Reviews\" and an inline style that sets the background color to lightblue.\n- Use a <div> element with a class name \"review-wrapper\" to serve as the main container for the component.\n- Create exactly 3 sections, each wrapped in a <section> element: the first section displays employee names, the second shows performance scores, and the third provides review comments.\n- In the first section, include an unordered list (<ul>) containing exactly 4 list items (<li>), each displaying an employee's name prefaced by a label \"Name:\".\n- In the second section, add a <table> element with exactly 2 rows and 2 columns; one column shows metric labels (like \"Q1 Score\" and \"Q2 Score\") and the other shows their corresponding numeric values.\n- In the third section, include a paragraph (<p>) with an inline style to italicize the text, containing a note such as \"Overall feedback for the review period.\"\n- Ensure at least one list item in the first section applies a CSS class called \"highlight-green\" to color its text green.\n- Add a button labeled \"Submit Reviews\" inside a <div> with the class \"button-group\" placed at the bottom of the component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000133_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Performance Reviews",
                                "background-color: lightblue",
                                "review-wrapper",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "Name:",
                                "highlight-green",
                                "<table>",
                                "Q1 Score",
                                "Q2 Score",
                                "<p>",
                                "Overall feedback for the review period.",
                                "button-group",
                                "Submit Reviews"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000133_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000133_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the component?",
                                "What is the background color of the title?",
                                "How many sections are visible in the component?",
                                "How many employee names are listed in the first section?",
                                "Is any employee name highlighted in green?",
                                "What metric labels are shown in the table?",
                                "What note is provided in the review comments section?",
                                "What is the label on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000133_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Performance Reviews",
                                "lightblue",
                                "3",
                                "4",
                                "Yes",
                                "Q1 Score and Q2 Score",
                                "Overall feedback for the review period",
                                "Submit Reviews"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents detailed event information in a structured layout.\n\nFeature Requirements:\n- Include a centered header element (<h1>) at the top containing the text \"Event Details\".\n- Use a <div> element with a class name of 'event-container' to wrap the entire component content.\n- Display exactly 3 sections, each wrapped inside a <section> element.\n- The first section must feature an unordered list (<ul>) with exactly 3 list items (<li>), where each item displays a label and a value separated by a colon; one of these list items should apply a CSS class \"highlight-blue\" to its value text.\n- The second section should include a paragraph (<p>) that shows additional event descriptions and uses an inline style to set the font color to green.\n- The third section must contain a table (<table>) with a header row and exactly 2 data rows summarizing key event metrics.\n- At the bottom of the component, add a <div> with a class name of 'footer-container' that contains a button labeled \"Submit Feedback\".\n- Ensure each structured element is clearly organized to match the designated Angular component layout.",
            "task_id": "000134",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What text is displayed in the centered header at the top?",
                "How many sections are present in the component layout?",
                "How many list items appear in the first section's unordered list?",
                "Which list item is styled differently and how?",
                "What font color is applied to the paragraph in the second section?",
                "How many data rows are shown in the table's body in the third section?",
                "What label is visible on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Event Details",
                "3",
                "3",
                "The value of one list item is styled with the 'highlight-blue' class",
                "Green",
                "2",
                "Submit Feedback"
            ],
            "raw_output_metric": [
                "Event Details",
                "event-container",
                "<section>",
                "<ul>",
                "<li>",
                "highlight-blue",
                "<p>",
                "color: green;",
                "<table>",
                "footer-container",
                "Submit Feedback"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000134_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents detailed event information in a structured layout.\n\nFeature Requirements:\n- Include a centered header element (<h1>) at the top containing the text \"Event Details\".\n- Use a <div> element with a class name of 'event-container' to wrap the entire component content.\n- Display exactly 3 sections, each wrapped inside a <section> element.\n- The first section must feature an unordered list (<ul>) with exactly 3 list items (<li>), where each item displays a label and a value separated by a colon; one of these list items should apply a CSS class \"highlight-blue\" to its value text.\n- The second section should include a paragraph (<p>) that shows additional event descriptions and uses an inline style to set the font color to green.\n- The third section must contain a table (<table>) with a header row and exactly 2 data rows summarizing key event metrics.\n- At the bottom of the component, add a <div> with a class name of 'footer-container' that contains a button labeled \"Submit Feedback\".\n- Ensure each structured element is clearly organized to match the designated Angular component layout."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000134_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Details",
                                "event-container",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "highlight-blue",
                                "<p>",
                                "color: green;",
                                "<table>",
                                "footer-container",
                                "Submit Feedback"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000134_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000134_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the centered header at the top?",
                                "How many sections are present in the component layout?",
                                "How many list items appear in the first section's unordered list?",
                                "Which list item is styled differently and how?",
                                "What font color is applied to the paragraph in the second section?",
                                "How many data rows are shown in the table's body in the third section?",
                                "What label is visible on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000134_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Details",
                                "3",
                                "3",
                                "The value of one list item is styled with the 'highlight-blue' class",
                                "Green",
                                "2",
                                "Submit Feedback"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text into an Angular component that displays structured product inventory details.\n\nFeature Requirements:\n- Include an <h3> element centered at the top with the text 'Product Inventory Report'.\n- Use a <div> element with a class name of 'inventory-container' to serve as the main layout container.\n- Create exactly 3 <section> elements, each dedicated to a different aspect: product details, pricing information, and stock availability.\n- In the first section, display a table (<table>) with a header (<thead>) and a body (<tbody>) that contains exactly 2 data rows and 3 columns; apply inline styles to the table borders for clarity.\n- Ensure that the first column in the table has bold text by using a CSS class named 'bold-cell'.\n- In the second section, include a paragraph (<p>) that provides summary pricing details and apply an inline style to set the background color to light yellow.\n- In the third section, present a nested unordered list (<ul>) with exactly 2 list items; each list item should consist of a bold label followed by a hyphen and descriptive text.\n- At the bottom of the component, add a <div> element with the class 'footer-container' that contains a button labeled 'Update Inventory', and center this button within the container.\n- Ensure all elements are structured clearly and are directly visible in the output.",
            "task_id": "000135",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered header text displayed at the top?",
                "How many distinct sections are visible in the layout?",
                "How many rows and columns are in the product details table in the first section?",
                "What style is applied to the first column of the table?",
                "What background color is applied to the summary pricing paragraph in the second section?",
                "How many list items are presented in the stock availability section?",
                "What label is shown on the button within the footer area?"
            ],
            "VQA_answers": [
                "Product Inventory Report",
                "3",
                "2 rows and 3 columns",
                "Bold text",
                "Light yellow",
                "2",
                "Update Inventory"
            ],
            "raw_output_metric": [
                "Product Inventory Report",
                "inventory-container",
                "<section>",
                "<table>",
                "<thead>",
                "<tbody>",
                "bold-cell",
                "<p>",
                "background-color: lightyellow",
                "<ul>",
                "<li>",
                "footer-container",
                "Update Inventory"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000135_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text into an Angular component that displays structured product inventory details.\n\nFeature Requirements:\n- Include an <h3> element centered at the top with the text 'Product Inventory Report'.\n- Use a <div> element with a class name of 'inventory-container' to serve as the main layout container.\n- Create exactly 3 <section> elements, each dedicated to a different aspect: product details, pricing information, and stock availability.\n- In the first section, display a table (<table>) with a header (<thead>) and a body (<tbody>) that contains exactly 2 data rows and 3 columns; apply inline styles to the table borders for clarity.\n- Ensure that the first column in the table has bold text by using a CSS class named 'bold-cell'.\n- In the second section, include a paragraph (<p>) that provides summary pricing details and apply an inline style to set the background color to light yellow.\n- In the third section, present a nested unordered list (<ul>) with exactly 2 list items; each list item should consist of a bold label followed by a hyphen and descriptive text.\n- At the bottom of the component, add a <div> element with the class 'footer-container' that contains a button labeled 'Update Inventory', and center this button within the container.\n- Ensure all elements are structured clearly and are directly visible in the output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000135_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Inventory Report",
                                "inventory-container",
                                "<section>",
                                "<table>",
                                "<thead>",
                                "<tbody>",
                                "bold-cell",
                                "<p>",
                                "background-color: lightyellow",
                                "<ul>",
                                "<li>",
                                "footer-container",
                                "Update Inventory"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000135_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000135_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered header text displayed at the top?",
                                "How many distinct sections are visible in the layout?",
                                "How many rows and columns are in the product details table in the first section?",
                                "What style is applied to the first column of the table?",
                                "What background color is applied to the summary pricing paragraph in the second section?",
                                "How many list items are presented in the stock availability section?",
                                "What label is shown on the button within the footer area?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000135_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Inventory Report",
                                "3",
                                "2 rows and 3 columns",
                                "Bold text",
                                "Light yellow",
                                "2",
                                "Update Inventory"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that constructs a structured user registration form.\n\nFeature Requirements:\n- Create a top-level <h1> element displaying the text 'User Registration' aligned to the center.\n- Include a <div> element with the class name 'form-wrapper' to group all form-related elements.\n- Design exactly 3 input fields within separate <label> elements: one for a user’s name (Text), one for the email (Email), and one for the password (Password).\n- Wrap the email input field inside a <div> with a class of 'email-container' and apply an attribute to enforce proper email format.\n- Place a <button> element labeled 'Submit' immediately after the input fields to trigger form submission.\n- Insert a <section> element beneath the form containing an unordered list (<ul>) with exactly 2 list items (<li>), each showing a specific guideline for filling out the form.\n- Add a <footer> element with an inline style that sets the background color to lightgray, containing a paragraph with the text 'All data is confidential'.",
            "task_id": "000136",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the main header?",
                "How many input fields are present in the form?",
                "Which input field is wrapped inside a container for email formatting?",
                "What is the input type for entering the user's name?",
                "Is there a button for form submission and what is its label?",
                "How many guidelines are listed under the form in the unordered list?",
                "What text is shown in the footer regarding data privacy?",
                "What is the background color style set for the footer?"
            ],
            "VQA_answers": [
                "User Registration",
                "3",
                "Email",
                "Text",
                "Yes, 'Submit'",
                "2",
                "All data is confidential",
                "Lightgray"
            ],
            "raw_output_metric": [
                "User Registration",
                "form-wrapper",
                "email-container",
                "name",
                "text",
                "email",
                "password",
                "type=\"text\"",
                "type=\"email\"",
                "type=\"password\"",
                "Submit",
                "<section>",
                "<ul>",
                "<li>",
                "<footer>",
                "background-color: lightgray",
                "All data is confidential"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000136_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that constructs a structured user registration form.\n\nFeature Requirements:\n- Create a top-level <h1> element displaying the text 'User Registration' aligned to the center.\n- Include a <div> element with the class name 'form-wrapper' to group all form-related elements.\n- Design exactly 3 input fields within separate <label> elements: one for a user’s name (Text), one for the email (Email), and one for the password (Password).\n- Wrap the email input field inside a <div> with a class of 'email-container' and apply an attribute to enforce proper email format.\n- Place a <button> element labeled 'Submit' immediately after the input fields to trigger form submission.\n- Insert a <section> element beneath the form containing an unordered list (<ul>) with exactly 2 list items (<li>), each showing a specific guideline for filling out the form.\n- Add a <footer> element with an inline style that sets the background color to lightgray, containing a paragraph with the text 'All data is confidential'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000136_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "form-wrapper",
                                "email-container",
                                "name",
                                "text",
                                "email",
                                "password",
                                "type=\"text\"",
                                "type=\"email\"",
                                "type=\"password\"",
                                "Submit",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "<footer>",
                                "background-color: lightgray",
                                "All data is confidential"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000136_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000136_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main header?",
                                "How many input fields are present in the form?",
                                "Which input field is wrapped inside a container for email formatting?",
                                "What is the input type for entering the user's name?",
                                "Is there a button for form submission and what is its label?",
                                "How many guidelines are listed under the form in the unordered list?",
                                "What text is shown in the footer regarding data privacy?",
                                "What is the background color style set for the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000136_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "3",
                                "Email",
                                "Text",
                                "Yes, 'Submit'",
                                "2",
                                "All data is confidential",
                                "Lightgray"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the given survey summary input into an Angular component that organizes detailed survey metrics and user interaction elements.\n\nFeature Requirements:\n- Add a header using an <h1> element with the text \"Survey Results Summary\" centered at the top of the component.\n- Wrap the entire layout in a <div> container with the class name 'survey-container' to manage the overall spacing and alignment.\n- Create exactly 3 distinct <section> elements arranged sequentially within the container, each serving a different purpose.\n- In the first section, display a table (<table>) with 2 columns and 3 rows; the first column should list survey questions, and the second column should show the corresponding answer counts.\n- In the second section, include a paragraph (<p>) that provides an overall analysis, using an inline style to set the text color to blue for emphasis.\n- In the third section, create a simple form (<form>) that contains one text <input> field for additional feedback and one <button> element labeled \"Submit Comment\" for user submissions.\n- Ensure that one specific table row in the first section is styled with an inline style setting its background-color to lightgray.\n- Place an extra button with the class name 'refresh-btn' at the top of the survey container and label it \"Reload Survey\" to indicate reloading of data.\n- Finally, include a footer area using a <div> element with the class 'footer-area' that displays static text \"Data Verified\" at the very bottom.",
            "task_id": "000137",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the header text displayed at the top of the component?",
                "What class name is assigned to the container wrapping the entire layout?",
                "How many section elements are arranged within the layout?",
                "What are the dimensions of the table in the first section?",
                "What inline style is applied to one specific row in the table?",
                "What inline style is used for the paragraph in the second section?",
                "What elements are present in the form in the third section?",
                "What is the label and class of the extra button at the top of the container?",
                "What text is displayed in the footer area?"
            ],
            "VQA_answers": [
                "Survey Results Summary",
                "survey-container",
                "3",
                "2 columns and 3 rows",
                "background-color: lightgray",
                "text color set to blue",
                "one text input and one button labeled 'Submit Comment'",
                "Label is 'Reload Survey' and class is 'refresh-btn'",
                "Data Verified"
            ],
            "raw_output_metric": [
                "Survey Results Summary",
                "survey-container",
                "<h1>",
                "<div>",
                "<section>",
                "table",
                "lightgray",
                "color: blue",
                "form",
                "input",
                "Submit Comment",
                "Reload Survey",
                "refresh-btn",
                "footer-area",
                "Data Verified"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000137_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the given survey summary input into an Angular component that organizes detailed survey metrics and user interaction elements.\n\nFeature Requirements:\n- Add a header using an <h1> element with the text \"Survey Results Summary\" centered at the top of the component.\n- Wrap the entire layout in a <div> container with the class name 'survey-container' to manage the overall spacing and alignment.\n- Create exactly 3 distinct <section> elements arranged sequentially within the container, each serving a different purpose.\n- In the first section, display a table (<table>) with 2 columns and 3 rows; the first column should list survey questions, and the second column should show the corresponding answer counts.\n- In the second section, include a paragraph (<p>) that provides an overall analysis, using an inline style to set the text color to blue for emphasis.\n- In the third section, create a simple form (<form>) that contains one text <input> field for additional feedback and one <button> element labeled \"Submit Comment\" for user submissions.\n- Ensure that one specific table row in the first section is styled with an inline style setting its background-color to lightgray.\n- Place an extra button with the class name 'refresh-btn' at the top of the survey container and label it \"Reload Survey\" to indicate reloading of data.\n- Finally, include a footer area using a <div> element with the class 'footer-area' that displays static text \"Data Verified\" at the very bottom."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000137_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Survey Results Summary",
                                "survey-container",
                                "<h1>",
                                "<div>",
                                "<section>",
                                "table",
                                "lightgray",
                                "color: blue",
                                "form",
                                "input",
                                "Submit Comment",
                                "Reload Survey",
                                "refresh-btn",
                                "footer-area",
                                "Data Verified"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000137_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000137_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the component?",
                                "What class name is assigned to the container wrapping the entire layout?",
                                "How many section elements are arranged within the layout?",
                                "What are the dimensions of the table in the first section?",
                                "What inline style is applied to one specific row in the table?",
                                "What inline style is used for the paragraph in the second section?",
                                "What elements are present in the form in the third section?",
                                "What is the label and class of the extra button at the top of the container?",
                                "What text is displayed in the footer area?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000137_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Survey Results Summary",
                                "survey-container",
                                "3",
                                "2 columns and 3 rows",
                                "background-color: lightgray",
                                "text color set to blue",
                                "one text input and one button labeled 'Submit Comment'",
                                "Label is 'Reload Survey' and class is 'refresh-btn'",
                                "Data Verified"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that showcases detailed movie information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Movie Insights'.\n- Wrap all content within a <div> element assigned with the class name 'movie-container' for layout.\n- Feature exactly 3 sections, each enclosed in a <section> element containing distinct movie-related content.\n- The first section must display an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as a label and value separated by a colon, and one list item’s value must be colored blue using a CSS class 'highlight-blue'.\n- The second section should contain a paragraph (<p>) with inline styling that sets the text to bold and green.\n- The third section must include a table element with exactly 2 columns (\"Attribute\" and \"Value\") and exactly 3 rows of movie statistics.\n- Place a button labeled 'Reload Movies' at the bottom of the component inside a <div> element with the class 'action-container'.",
            "task_id": "000138",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the centered title displayed at the top of the component?",
                "How many sections are visible in the component?",
                "How many items are present in the unordered list of the first section?",
                "Is any list item’s value highlighted in blue?",
                "How is the paragraph in the second section styled?",
                "What are the headers of the table in the third section?",
                "How many rows of movie statistics are shown in the table?",
                "What label is on the button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Movie Insights",
                "3",
                "4",
                "Yes",
                "Bold and green",
                "Attribute and Value",
                "3",
                "Reload Movies"
            ],
            "raw_output_metric": [
                "Movie Insights",
                "movie-container",
                "<section>",
                "<ul>",
                "<li>",
                "highlight-blue",
                "<p style=\"font-weight: bold; color: green;\">",
                "<table>",
                "Attribute",
                "Value",
                "Reload Movies",
                "action-container"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000138_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that showcases detailed movie information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Movie Insights'.\n- Wrap all content within a <div> element assigned with the class name 'movie-container' for layout.\n- Feature exactly 3 sections, each enclosed in a <section> element containing distinct movie-related content.\n- The first section must display an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as a label and value separated by a colon, and one list item’s value must be colored blue using a CSS class 'highlight-blue'.\n- The second section should contain a paragraph (<p>) with inline styling that sets the text to bold and green.\n- The third section must include a table element with exactly 2 columns (\"Attribute\" and \"Value\") and exactly 3 rows of movie statistics.\n- Place a button labeled 'Reload Movies' at the bottom of the component inside a <div> element with the class 'action-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000138_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Insights",
                                "movie-container",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "highlight-blue",
                                "<p style=\"font-weight: bold; color: green;\">",
                                "<table>",
                                "Attribute",
                                "Value",
                                "Reload Movies",
                                "action-container"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000138_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000138_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top of the component?",
                                "How many sections are visible in the component?",
                                "How many items are present in the unordered list of the first section?",
                                "Is any list item’s value highlighted in blue?",
                                "How is the paragraph in the second section styled?",
                                "What are the headers of the table in the third section?",
                                "How many rows of movie statistics are shown in the table?",
                                "What label is on the button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000138_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Insights",
                                "3",
                                "4",
                                "Yes",
                                "Bold and green",
                                "Attribute and Value",
                                "3",
                                "Reload Movies"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays dynamic product details in a structured layout.\n\nFeature Requirements:\n- Display a centered main header using an <h1> element with the text 'Product Information'.\n- Include a sidebar within a <nav> element that has a class named 'sidebar-info' positioned on the left.\n- Create exactly 3 separate sections, each wrapped in a <section> element, with each section dedicated to a specific category of product details.\n- The first section should render a table with exactly 3 rows and 2 columns, where each row presents a feature name and its corresponding value.\n- The second section must include an ordered list (<ol>) with exactly 4 items showing sequential product usage steps.\n- The third section should display a paragraph (<p>) with inline styling that sets the text color to blue and the font weight to bold.\n- Add a footer area using a <div> element with the class 'footer-container' that contains a button labeled 'Update Info', aligned to the right within this container.",
            "task_id": "000139",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the main header?",
                "How many sections are visible on the page?",
                "How many rows and columns are shown in the product details table?",
                "How many items are featured in the ordered list for product usage?",
                "What are the color and font style of the paragraph in the third section?",
                "Where is the sidebar positioned on the page?",
                "What label is written on the footer button?",
                "How is the footer button aligned within its container?"
            ],
            "VQA_answers": [
                "Product Information",
                "3",
                "3 rows and 2 columns",
                "4",
                "Blue and bold",
                "Left",
                "Update Info",
                "Right"
            ],
            "raw_output_metric": [
                "Product Information",
                "sidebar-info",
                "<section>",
                "<table>",
                "<tr>",
                "<td>",
                "<ol>",
                "<li>",
                "<p",
                "color: blue;",
                "font-weight: bold;",
                "footer-container",
                "<button>",
                "Update Info"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000139_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays dynamic product details in a structured layout.\n\nFeature Requirements:\n- Display a centered main header using an <h1> element with the text 'Product Information'.\n- Include a sidebar within a <nav> element that has a class named 'sidebar-info' positioned on the left.\n- Create exactly 3 separate sections, each wrapped in a <section> element, with each section dedicated to a specific category of product details.\n- The first section should render a table with exactly 3 rows and 2 columns, where each row presents a feature name and its corresponding value.\n- The second section must include an ordered list (<ol>) with exactly 4 items showing sequential product usage steps.\n- The third section should display a paragraph (<p>) with inline styling that sets the text color to blue and the font weight to bold.\n- Add a footer area using a <div> element with the class 'footer-container' that contains a button labeled 'Update Info', aligned to the right within this container."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000139_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Information",
                                "sidebar-info",
                                "<section>",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "<ol>",
                                "<li>",
                                "<p",
                                "color: blue;",
                                "font-weight: bold;",
                                "footer-container",
                                "<button>",
                                "Update Info"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000139_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000139_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main header?",
                                "How many sections are visible on the page?",
                                "How many rows and columns are shown in the product details table?",
                                "How many items are featured in the ordered list for product usage?",
                                "What are the color and font style of the paragraph in the third section?",
                                "Where is the sidebar positioned on the page?",
                                "What label is written on the footer button?",
                                "How is the footer button aligned within its container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000139_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Information",
                                "3",
                                "3 rows and 2 columns",
                                "4",
                                "Blue and bold",
                                "Left",
                                "Update Info",
                                "Right"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a concise weather update interface.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Weather Update' at the top.\n- Use a <div> element to create a container with a class name of 'weather-container' for layout structure.\n- Display exactly 3 sections, each wrapped in a <section> element with distinct content.\n- The first section should contain an unordered list (<ul>) with exactly 4 list items (<li>), each showing a different weather metric in the format of \"Metric: value\".\n- The second section must display a paragraph (<p>) with inline styling to set the text color to blue.\n- The third section should feature a table with 2 columns and exactly 2 rows (excluding headers) to show forecast details.\n- One of the list items in the first section must have its value text colored by applying a CSS class called 'alert-yellow'.\n- Add a button element labeled 'Update Forecast', positioned at the bottom of the component within a <div> with the class 'update-button-container'.\n- Ensure all HTML elements are organized logically to form a cohesive Angular component.",
            "task_id": "000140",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How many sections are visible in the layout?",
                "In the first section, how many weather metrics are listed?",
                "Does one of the metrics in the first section display its value with a yellow highlight?",
                "What is the text color of the paragraph in the second section?",
                "How many columns are in the forecast table shown in the third section?",
                "How many rows (excluding headers) does the forecast table contain?",
                "What label is shown on the button at the bottom of the component?",
                "What is the class name of the container wrapping the overall layout?"
            ],
            "VQA_answers": [
                "Weather Update",
                "3",
                "4",
                "Yes, via 'alert-yellow' class",
                "Blue",
                "2",
                "2",
                "Update Forecast",
                "weather-container"
            ],
            "raw_output_metric": [
                "<h2>Weather Update</h2>",
                "weather-container",
                "<section>",
                "<ul>",
                "<li>",
                "Metric:",
                "alert-yellow",
                "<p",
                "style=\"color:blue\"",
                "<table>",
                "<tr>",
                "<td>",
                "Update Forecast",
                "update-button-container"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000140_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a concise weather update interface.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Weather Update' at the top.\n- Use a <div> element to create a container with a class name of 'weather-container' for layout structure.\n- Display exactly 3 sections, each wrapped in a <section> element with distinct content.\n- The first section should contain an unordered list (<ul>) with exactly 4 list items (<li>), each showing a different weather metric in the format of \"Metric: value\".\n- The second section must display a paragraph (<p>) with inline styling to set the text color to blue.\n- The third section should feature a table with 2 columns and exactly 2 rows (excluding headers) to show forecast details.\n- One of the list items in the first section must have its value text colored by applying a CSS class called 'alert-yellow'.\n- Add a button element labeled 'Update Forecast', positioned at the bottom of the component within a <div> with the class 'update-button-container'.\n- Ensure all HTML elements are organized logically to form a cohesive Angular component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000140_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h2>Weather Update</h2>",
                                "weather-container",
                                "<section>",
                                "<ul>",
                                "<li>",
                                "Metric:",
                                "alert-yellow",
                                "<p",
                                "style=\"color:blue\"",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "Update Forecast",
                                "update-button-container"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000140_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000140_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How many sections are visible in the layout?",
                                "In the first section, how many weather metrics are listed?",
                                "Does one of the metrics in the first section display its value with a yellow highlight?",
                                "What is the text color of the paragraph in the second section?",
                                "How many columns are in the forecast table shown in the third section?",
                                "How many rows (excluding headers) does the forecast table contain?",
                                "What label is shown on the button at the bottom of the component?",
                                "What is the class name of the container wrapping the overall layout?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000140_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Update",
                                "3",
                                "4",
                                "Yes, via 'alert-yellow' class",
                                "Blue",
                                "2",
                                "2",
                                "Update Forecast",
                                "weather-container"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays detailed system status information using a card layout.\n\nFeature Requirements:\n- Include a header with an <h1> element containing the text 'System Status' and align it to the left.\n- Create a primary container using a <div> element with the class name 'status-card'.\n- Render exactly 3 sections, each enclosed in a <section> element: one for system configuration, one for error logs, and one for performance metrics.\n- In the system configuration section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a label and value pair separated by a colon.\n- In the error logs section, display a paragraph (<p>) that shows a warning message; apply a CSS class named 'warning' to change the text color to orange.\n- In the performance metrics section, incorporate a table containing a single row and 2 columns that present a metric name and its corresponding value.\n- Add a footer element that includes a button labeled 'Update Status', positioned within a <div> element with the class 'footer-btn'.",
            "task_id": "000141",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the header text displayed at the top of the component?",
                "How many sections are rendered in the component?",
                "How many list items are shown in the system configuration section?",
                "What type of list is used in the system configuration section?",
                "What color is the warning message displayed in the error logs section?",
                "How many rows and columns does the table in the performance metrics section have?",
                "What is the label on the button found in the footer?"
            ],
            "VQA_answers": [
                "System Status",
                "3",
                "4",
                "Ordered list",
                "Orange",
                "1 row and 2 columns",
                "Update Status"
            ],
            "raw_output_metric": [
                "System Status",
                "status-card",
                "system configuration",
                "error logs",
                "performance metrics",
                "<ol>",
                "<li>",
                ":",
                "warning",
                "<p class=\"warning\">",
                "<table>",
                "<tr>",
                "<td>",
                "footer-btn",
                "Update Status"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000141_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays detailed system status information using a card layout.\n\nFeature Requirements:\n- Include a header with an <h1> element containing the text 'System Status' and align it to the left.\n- Create a primary container using a <div> element with the class name 'status-card'.\n- Render exactly 3 sections, each enclosed in a <section> element: one for system configuration, one for error logs, and one for performance metrics.\n- In the system configuration section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a label and value pair separated by a colon.\n- In the error logs section, display a paragraph (<p>) that shows a warning message; apply a CSS class named 'warning' to change the text color to orange.\n- In the performance metrics section, incorporate a table containing a single row and 2 columns that present a metric name and its corresponding value.\n- Add a footer element that includes a button labeled 'Update Status', positioned within a <div> element with the class 'footer-btn'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000141_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "System Status",
                                "status-card",
                                "system configuration",
                                "error logs",
                                "performance metrics",
                                "<ol>",
                                "<li>",
                                ":",
                                "warning",
                                "<p class=\"warning\">",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "footer-btn",
                                "Update Status"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000141_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000141_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the component?",
                                "How many sections are rendered in the component?",
                                "How many list items are shown in the system configuration section?",
                                "What type of list is used in the system configuration section?",
                                "What color is the warning message displayed in the error logs section?",
                                "How many rows and columns does the table in the performance metrics section have?",
                                "What is the label on the button found in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000141_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "System Status",
                                "3",
                                "4",
                                "Ordered list",
                                "Orange",
                                "1 row and 2 columns",
                                "Update Status"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a collection of blog post summaries.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'blog-wrapper'.\n- Add a centered title using an <h1> element with the text 'Blog Highlights'.\n- Include exactly 3 sections, each wrapped in a <section> element representing an individual blog post summary.\n- Inside each section, add a <header> element that contains the post date and author name separated by a vertical bar (|).\n- In every section, include an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a key and a value separated by a dash (-); for one specific key in each list, the value text must be styled with the CSS class 'info-blue'.\n- Immediately following each section, insert an <hr> element to separate the blog posts visually.\n- At the bottom of the component, add a button labeled 'Load More Posts' that is wrapped in a <div> element with a class name of 'action-container'.",
            "task_id": "000142",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title of the blog component?",
                "How many blog post summaries are displayed?",
                "How are individual blog post summaries visually separated?",
                "What element displays the post date and author name?",
                "How many list items are present in each blog post summary?",
                "How is the key-value pair displayed in each list item?",
                "Which CSS class is used to style a specific value in one of the list items?",
                "Where is the 'Load More Posts' button located?"
            ],
            "VQA_answers": [
                "Blog Highlights",
                "3",
                "An hr element is used after each section",
                "A header element showing the date and author separated by a vertical bar",
                "4",
                "They are separated by a dash",
                "info-blue",
                "At the bottom inside a container with the class action-container"
            ],
            "raw_output_metric": [
                "blog-wrapper",
                "Blog Highlights",
                "section",
                "header",
                "|",
                "ul",
                "li",
                "info-blue",
                "hr",
                "action-container",
                "Load More Posts"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000142_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a collection of blog post summaries.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'blog-wrapper'.\n- Add a centered title using an <h1> element with the text 'Blog Highlights'.\n- Include exactly 3 sections, each wrapped in a <section> element representing an individual blog post summary.\n- Inside each section, add a <header> element that contains the post date and author name separated by a vertical bar (|).\n- In every section, include an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a key and a value separated by a dash (-); for one specific key in each list, the value text must be styled with the CSS class 'info-blue'.\n- Immediately following each section, insert an <hr> element to separate the blog posts visually.\n- At the bottom of the component, add a button labeled 'Load More Posts' that is wrapped in a <div> element with a class name of 'action-container'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000142_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "blog-wrapper",
                                "Blog Highlights",
                                "section",
                                "header",
                                "|",
                                "ul",
                                "li",
                                "info-blue",
                                "hr",
                                "action-container",
                                "Load More Posts"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000142_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000142_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title of the blog component?",
                                "How many blog post summaries are displayed?",
                                "How are individual blog post summaries visually separated?",
                                "What element displays the post date and author name?",
                                "How many list items are present in each blog post summary?",
                                "How is the key-value pair displayed in each list item?",
                                "Which CSS class is used to style a specific value in one of the list items?",
                                "Where is the 'Load More Posts' button located?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000142_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Blog Highlights",
                                "3",
                                "An hr element is used after each section",
                                "A header element showing the date and author separated by a vertical bar",
                                "4",
                                "They are separated by a dash",
                                "info-blue",
                                "At the bottom inside a container with the class action-container"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a gadget showcase with distinct sections and interactive elements.\n\nFeature Requirements:\n- Create a top-level <div> container with a class name of 'showcase-box' to wrap all component elements.\n- Insert a centered <h1> element at the top with the exact text 'Gadget Showcase'.\n- Include exactly 3 distinct <section> elements arranged sequentially in the component.\n- In the first section, add an ordered list (<ol>) containing exactly 4 list items (<li>), where each item displays a label and a corresponding value separated by a colon.\n- In the second section, include a paragraph (<p>) that contains a <span> element; apply an inline style to the <span> to set its background color to lightblue.\n- In the third section, insert a table with a single row (<tr>) and two cells (<td>), labeling the cells 'Feature' and 'Description' respectively.\n- Ensure that the 'Description' cell text uses a CSS class named 'detail-blue' to apply blue text.\n- Add a clickable button element labeled 'More Details' at the bottom of the component inside a <div> with a class name 'footer-button'.",
            "task_id": "000143",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main header text displayed at the top?",
                "How many distinct sections are present in the component?",
                "How many items are in the ordered list within the first section?",
                "Which punctuation mark separates each label from its value in the list items?",
                "What is the background color applied to the span element in the paragraph of the second section?",
                "What are the labels used in the two cells of the table in the third section?",
                "Which CSS class is applied to the 'Description' text in the table?",
                "What is the text displayed on the clickable button at the bottom of the component?"
            ],
            "VQA_answers": [
                "Gadget Showcase",
                "3",
                "4",
                "Colon",
                "Lightblue",
                "Feature and Description",
                "detail-blue",
                "More Details"
            ],
            "raw_output_metric": [
                "showcase-box",
                "Gadget Showcase",
                "<section>",
                "<ol>",
                "<li>",
                "<p>",
                "<span>",
                "background-color: lightblue",
                "<table>",
                "<tr>",
                "<td>",
                "Feature",
                "Description",
                "detail-blue",
                "footer-button",
                "More Details"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000143_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a gadget showcase with distinct sections and interactive elements.\n\nFeature Requirements:\n- Create a top-level <div> container with a class name of 'showcase-box' to wrap all component elements.\n- Insert a centered <h1> element at the top with the exact text 'Gadget Showcase'.\n- Include exactly 3 distinct <section> elements arranged sequentially in the component.\n- In the first section, add an ordered list (<ol>) containing exactly 4 list items (<li>), where each item displays a label and a corresponding value separated by a colon.\n- In the second section, include a paragraph (<p>) that contains a <span> element; apply an inline style to the <span> to set its background color to lightblue.\n- In the third section, insert a table with a single row (<tr>) and two cells (<td>), labeling the cells 'Feature' and 'Description' respectively.\n- Ensure that the 'Description' cell text uses a CSS class named 'detail-blue' to apply blue text.\n- Add a clickable button element labeled 'More Details' at the bottom of the component inside a <div> with a class name 'footer-button'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000143_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "showcase-box",
                                "Gadget Showcase",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "<p>",
                                "<span>",
                                "background-color: lightblue",
                                "<table>",
                                "<tr>",
                                "<td>",
                                "Feature",
                                "Description",
                                "detail-blue",
                                "footer-button",
                                "More Details"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000143_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000143_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top?",
                                "How many distinct sections are present in the component?",
                                "How many items are in the ordered list within the first section?",
                                "Which punctuation mark separates each label from its value in the list items?",
                                "What is the background color applied to the span element in the paragraph of the second section?",
                                "What are the labels used in the two cells of the table in the third section?",
                                "Which CSS class is applied to the 'Description' text in the table?",
                                "What is the text displayed on the clickable button at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000143_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Gadget Showcase",
                                "3",
                                "4",
                                "Colon",
                                "Lightblue",
                                "Feature and Description",
                                "detail-blue",
                                "More Details"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nTransform the provided weather forecast text into an Angular component that organizes and displays forecast information in clearly defined sections.\n\nFeature Requirements:\n- Create a primary container using a <div> element with a class name 'forecast-wrapper' that encapsulates all component content.\n- Add a header section containing an <h1> element, centered horizontally, with the text 'Weather Update'.\n- Incorporate a section for detailed forecasts using a <section> element that includes exactly 3 <p> elements, each representing distinct forecast details extracted from the input.\n- Include another section with an unordered list (<ul>) that holds exactly 4 <li> elements, each displaying a specific temperature reading preceded by a label and separated by a colon (:).\n- Within the unordered list, assign a CSS class 'temp-warning' to one list item to uniquely style a temperature value that exceeds a particular threshold.\n- Append a footer section using a <div> element with the class 'timestamp-section' that contains a <span> element showing the timestamp of the forecast update.\n- Ensure the header is centered, the detailed paragraphs are left-aligned, and the footer timestamp is right-aligned.\n- Use an inline style in the temperature list item with the 'temp-warning' class to set its text color to blue.",
            "task_id": "000144",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What text is displayed in the header at the top of the component?",
                "How many paragraphs are used to show detailed forecast information?",
                "How many temperature values are listed in the temperature section?",
                "What inline style is applied to highlight a specific temperature reading?",
                "What is the CSS class name of the main container wrapping all component content?",
                "How is the header text aligned?",
                "How are the detailed forecast paragraphs aligned?",
                "How is the forecast update timestamp aligned in the footer?"
            ],
            "VQA_answers": [
                "Weather Update",
                "3",
                "4",
                "text color blue",
                "forecast-wrapper",
                "Centered",
                "Left-aligned",
                "Right-aligned"
            ],
            "raw_output_metric": [
                "forecast-wrapper",
                "Weather Update",
                "<h1>",
                "<section>",
                "<p>",
                "<ul>",
                "<li>",
                "temp-warning",
                "color: blue",
                "timestamp-section",
                "<span>",
                ":"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000144_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nTransform the provided weather forecast text into an Angular component that organizes and displays forecast information in clearly defined sections.\n\nFeature Requirements:\n- Create a primary container using a <div> element with a class name 'forecast-wrapper' that encapsulates all component content.\n- Add a header section containing an <h1> element, centered horizontally, with the text 'Weather Update'.\n- Incorporate a section for detailed forecasts using a <section> element that includes exactly 3 <p> elements, each representing distinct forecast details extracted from the input.\n- Include another section with an unordered list (<ul>) that holds exactly 4 <li> elements, each displaying a specific temperature reading preceded by a label and separated by a colon (:).\n- Within the unordered list, assign a CSS class 'temp-warning' to one list item to uniquely style a temperature value that exceeds a particular threshold.\n- Append a footer section using a <div> element with the class 'timestamp-section' that contains a <span> element showing the timestamp of the forecast update.\n- Ensure the header is centered, the detailed paragraphs are left-aligned, and the footer timestamp is right-aligned.\n- Use an inline style in the temperature list item with the 'temp-warning' class to set its text color to blue."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000144_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "forecast-wrapper",
                                "Weather Update",
                                "<h1>",
                                "<section>",
                                "<p>",
                                "<ul>",
                                "<li>",
                                "temp-warning",
                                "color: blue",
                                "timestamp-section",
                                "<span>",
                                ":"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000144_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000144_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the header at the top of the component?",
                                "How many paragraphs are used to show detailed forecast information?",
                                "How many temperature values are listed in the temperature section?",
                                "What inline style is applied to highlight a specific temperature reading?",
                                "What is the CSS class name of the main container wrapping all component content?",
                                "How is the header text aligned?",
                                "How are the detailed forecast paragraphs aligned?",
                                "How is the forecast update timestamp aligned in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000144_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Update",
                                "3",
                                "4",
                                "text color blue",
                                "forecast-wrapper",
                                "Centered",
                                "Left-aligned",
                                "Right-aligned"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a clear user data dashboard with three distinct information sections.\n\nFeature Requirements:\n- Use an <h1> element with the text 'User Dashboard' and center it using an inline CSS style.\n- Create a container using a <div> element with a class name of 'dashboard-container' to wrap the entire component.\n- Include exactly 3 sections, each wrapped in a <section> element, where each section displays unique content.\n- The first section must include an ordered list (<ol>) containing exactly 4 list items (<li>), with each list item displaying a label and value separated by a hyphen (-).\n- The second section should have an <h3> element with inline styling to set the text color to blue and display the title 'Status Information'.\n- The third section must contain a paragraph (<p>) with inline styling that applies bold font weight and integrates dynamic text from the input.\n- At the bottom of the component, include a <footer> element containing a button labeled 'Update Info', which is inside a <div> with the class 'footer-button'.",
            "task_id": "000145",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "How is the main title visually styled?",
                "How many sections are present on the dashboard?",
                "How many list items does the first section contain in its ordered list?",
                "What content is shown in the second section's heading?",
                "How is the dynamic text in the third section styled?",
                "What interactive element is visible at the bottom of the component?"
            ],
            "VQA_answers": [
                "User Dashboard",
                "It is centered using inline CSS.",
                "3",
                "4",
                "Status Information",
                "It is bold, as the paragraph has inline styling for bold font weight.",
                "A button labeled 'Update Info' inside a footer element"
            ],
            "raw_output_metric": [
                "User Dashboard",
                "text-align: center",
                "dashboard-container",
                "<section>",
                "<ol>",
                "<li>",
                "-",
                "color: blue",
                "Status Information",
                "<h3>",
                "<p>",
                "font-weight: bold",
                "footer",
                "footer-button",
                "Update Info"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000145_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a clear user data dashboard with three distinct information sections.\n\nFeature Requirements:\n- Use an <h1> element with the text 'User Dashboard' and center it using an inline CSS style.\n- Create a container using a <div> element with a class name of 'dashboard-container' to wrap the entire component.\n- Include exactly 3 sections, each wrapped in a <section> element, where each section displays unique content.\n- The first section must include an ordered list (<ol>) containing exactly 4 list items (<li>), with each list item displaying a label and value separated by a hyphen (-).\n- The second section should have an <h3> element with inline styling to set the text color to blue and display the title 'Status Information'.\n- The third section must contain a paragraph (<p>) with inline styling that applies bold font weight and integrates dynamic text from the input.\n- At the bottom of the component, include a <footer> element containing a button labeled 'Update Info', which is inside a <div> with the class 'footer-button'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000145_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Dashboard",
                                "text-align: center",
                                "dashboard-container",
                                "<section>",
                                "<ol>",
                                "<li>",
                                "-",
                                "color: blue",
                                "Status Information",
                                "<h3>",
                                "<p>",
                                "font-weight: bold",
                                "footer",
                                "footer-button",
                                "Update Info"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000145_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000145_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "How is the main title visually styled?",
                                "How many sections are present on the dashboard?",
                                "How many list items does the first section contain in its ordered list?",
                                "What content is shown in the second section's heading?",
                                "How is the dynamic text in the third section styled?",
                                "What interactive element is visible at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000145_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Dashboard",
                                "It is centered using inline CSS.",
                                "3",
                                "4",
                                "Status Information",
                                "It is bold, as the paragraph has inline styling for bold font weight.",
                                "A button labeled 'Update Info' inside a footer element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed event schedule.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Event Schedule\", ensuring it is prominent at the top of the component.\n- Wrap all content in a <div> with the class name \"event-wrapper\" to serve as the main container.\n- Structure the output into exactly 3 sections, each enclosed in a <section> element and containing unique event-related content.\n- In the first section, include a table (<table>) with exactly 2 rows; the first row should list \"Start Time: [value]\" and the second row \"End Time: [value]\", with each row split into two <td> elements.\n- In the second section, add an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Activity: Time\". One of these list items must have its time value wrapped with a CSS class called \"highlight\" to indicate emphasis.\n- In the third section, display a blockquote (<blockquote>) containing an inspirational quote about events, using an inline style to set the font style to italic.\n- At the bottom of the component, include a button (<button>) labeled \"Confirm Attendance\", positioned within a <div> with a class \"action-button\" for clear alignment.",
            "task_id": "000146",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text of the centered title at the top of the component?",
                "How many sections are present in the component layout?",
                "How many rows are displayed in the table of the first section?",
                "What are the labels shown in the table rows of the first section?",
                "How many list items are in the unordered list of the second section?",
                "Is any time value in the list items emphasized with a special style?",
                "What style is applied to the text within the blockquote in the third section?",
                "What label is on the button at the bottom of the component?",
                "Which class name is used for the main container wrapping the entire content?",
                "Which class is used to position the action button at the bottom?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "3",
                "2",
                "Start Time: [value] and End Time: [value]",
                "4",
                "Yes, one time value is wrapped with the 'highlight' class",
                "Italic",
                "Confirm Attendance",
                "event-wrapper",
                "action-button"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "event-wrapper",
                "<section>",
                "<table>",
                "Start Time: [value]",
                "End Time: [value]",
                "<tr>",
                "<td>",
                "<ul>",
                "<li>",
                "Activity: Time",
                "highlight",
                "<blockquote>",
                "font-style: italic",
                "Confirm Attendance",
                "action-button"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000146_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed event schedule.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Event Schedule\", ensuring it is prominent at the top of the component.\n- Wrap all content in a <div> with the class name \"event-wrapper\" to serve as the main container.\n- Structure the output into exactly 3 sections, each enclosed in a <section> element and containing unique event-related content.\n- In the first section, include a table (<table>) with exactly 2 rows; the first row should list \"Start Time: [value]\" and the second row \"End Time: [value]\", with each row split into two <td> elements.\n- In the second section, add an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Activity: Time\". One of these list items must have its time value wrapped with a CSS class called \"highlight\" to indicate emphasis.\n- In the third section, display a blockquote (<blockquote>) containing an inspirational quote about events, using an inline style to set the font style to italic.\n- At the bottom of the component, include a button (<button>) labeled \"Confirm Attendance\", positioned within a <div> with a class \"action-button\" for clear alignment."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000146_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "event-wrapper",
                                "<section>",
                                "<table>",
                                "Start Time: [value]",
                                "End Time: [value]",
                                "<tr>",
                                "<td>",
                                "<ul>",
                                "<li>",
                                "Activity: Time",
                                "highlight",
                                "<blockquote>",
                                "font-style: italic",
                                "Confirm Attendance",
                                "action-button"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000146_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000146_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered title at the top of the component?",
                                "How many sections are present in the component layout?",
                                "How many rows are displayed in the table of the first section?",
                                "What are the labels shown in the table rows of the first section?",
                                "How many list items are in the unordered list of the second section?",
                                "Is any time value in the list items emphasized with a special style?",
                                "What style is applied to the text within the blockquote in the third section?",
                                "What label is on the button at the bottom of the component?",
                                "Which class name is used for the main container wrapping the entire content?",
                                "Which class is used to position the action button at the bottom?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000146_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "3",
                                "2",
                                "Start Time: [value] and End Time: [value]",
                                "4",
                                "Yes, one time value is wrapped with the 'highlight' class",
                                "Italic",
                                "Confirm Attendance",
                                "event-wrapper",
                                "action-button"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents system metrics in a structured and interactive format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'System Metrics'.\n- Wrap the entire content in a <div> container with a class name of 'metrics-wrapper'.\n- Display exactly 3 sections, each enclosed in a <section> element with distinct content.\n- The first section must contain a table (<table>) with exactly 3 rows and 2 columns; each row should display a label and a corresponding numeric value from the input, with one of the numeric values styled using a CSS class called 'highlight-blue'.\n- The second section must include a paragraph (<p>) that shows summary text derived from the input, and the text within this paragraph must have an inline style setting its text-decoration property to underline.\n- The third section must present exactly two anchor (<a>) elements, each displaying different textual information and defaulting their href attribute to '#' to act as placeholders.\n- At the bottom of the component, add a footer using a <div> with the class 'action-footer' containing a button element labeled 'Update Metrics'.",
            "task_id": "000147",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the component?",
                "How many sections are present in the component?",
                "How many rows and columns does the table in the first section have?",
                "What CSS class is applied to one of the numeric values in the table?",
                "What text decoration style is applied to the summary paragraph in the second section?",
                "How many link elements are visible in the third section?",
                "What is the label on the button in the action footer?"
            ],
            "VQA_answers": [
                "System Metrics",
                "3",
                "3 rows and 2 columns",
                "highlight-blue",
                "underline",
                "2",
                "Update Metrics"
            ],
            "raw_output_metric": [
                "System Metrics",
                "metrics-wrapper",
                "<h1>",
                "<section>",
                "<table>",
                "highlight-blue",
                "<p",
                "text-decoration: underline",
                "<a href=\"#\">",
                "action-footer",
                "Update Metrics"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000147_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents system metrics in a structured and interactive format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'System Metrics'.\n- Wrap the entire content in a <div> container with a class name of 'metrics-wrapper'.\n- Display exactly 3 sections, each enclosed in a <section> element with distinct content.\n- The first section must contain a table (<table>) with exactly 3 rows and 2 columns; each row should display a label and a corresponding numeric value from the input, with one of the numeric values styled using a CSS class called 'highlight-blue'.\n- The second section must include a paragraph (<p>) that shows summary text derived from the input, and the text within this paragraph must have an inline style setting its text-decoration property to underline.\n- The third section must present exactly two anchor (<a>) elements, each displaying different textual information and defaulting their href attribute to '#' to act as placeholders.\n- At the bottom of the component, add a footer using a <div> with the class 'action-footer' containing a button element labeled 'Update Metrics'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000147_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "System Metrics",
                                "metrics-wrapper",
                                "<h1>",
                                "<section>",
                                "<table>",
                                "highlight-blue",
                                "<p",
                                "text-decoration: underline",
                                "<a href=\"#\">",
                                "action-footer",
                                "Update Metrics"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000147_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000147_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the component?",
                                "How many sections are present in the component?",
                                "How many rows and columns does the table in the first section have?",
                                "What CSS class is applied to one of the numeric values in the table?",
                                "What text decoration style is applied to the summary paragraph in the second section?",
                                "How many link elements are visible in the third section?",
                                "What is the label on the button in the action footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000147_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "System Metrics",
                                "3",
                                "3 rows and 2 columns",
                                "highlight-blue",
                                "underline",
                                "2",
                                "Update Metrics"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed weather forecast summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report'.\n- Wrap all content in a <div> element with a class name of 'weather-info' for layout purposes.\n- Display exactly 3 sections, each contained within an <article> element representing different types of weather data.\n- The first section must include a header (<h3>) with the text 'Current Conditions' and a table with 2 rows and 3 columns showing temperature, humidity, and wind speed data.\n- The second section should incorporate an ordered list (<ol>) with exactly 4 list items, each representing forecast details, where each item displays a label and corresponding value separated by a dash (-).\n- The third section must contain a paragraph (<p>) with an alert message that is styled with an inline style to have a yellow background and bold font-weight.\n- Ensure that the table in the first section has a CSS class 'data-table' and that one specific cell in the table is highlighted by applying a CSS class 'temp-alert'.\n- Add a button labeled 'Update Forecast' positioned at the bottom within a <div> element with a class name 'action-panel'.",
            "task_id": "000148",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the text displayed in the centered title at the top?",
                "How many article sections are shown on the page?",
                "What header text is included in the first article section?",
                "How many rows and columns does the table in the first section have?",
                "Which CSS class is applied to the table displaying weather data?",
                "Is there any table cell visually highlighted with a distinctive style?",
                "How many list items are contained in the ordered list of the second section?",
                "What character is used to separate the label and value in each list item?",
                "What inline styles are applied to the alert message in the third section?",
                "What is the label of the button located at the bottom of the page?"
            ],
            "VQA_answers": [
                "Weather Report",
                "3",
                "Current Conditions",
                "2 rows and 3 columns",
                "data-table",
                "Yes, one cell is highlighted with the 'temp-alert' class",
                "4",
                "a dash (-)",
                "a yellow background and bold font",
                "Update Forecast"
            ],
            "raw_output_metric": [
                "Weather Report",
                "weather-info",
                "Current Conditions",
                "data-table",
                "temp-alert",
                "Update Forecast",
                "action-panel"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000148_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed weather forecast summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report'.\n- Wrap all content in a <div> element with a class name of 'weather-info' for layout purposes.\n- Display exactly 3 sections, each contained within an <article> element representing different types of weather data.\n- The first section must include a header (<h3>) with the text 'Current Conditions' and a table with 2 rows and 3 columns showing temperature, humidity, and wind speed data.\n- The second section should incorporate an ordered list (<ol>) with exactly 4 list items, each representing forecast details, where each item displays a label and corresponding value separated by a dash (-).\n- The third section must contain a paragraph (<p>) with an alert message that is styled with an inline style to have a yellow background and bold font-weight.\n- Ensure that the table in the first section has a CSS class 'data-table' and that one specific cell in the table is highlighted by applying a CSS class 'temp-alert'.\n- Add a button labeled 'Update Forecast' positioned at the bottom within a <div> element with a class name 'action-panel'."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000148_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Report",
                                "weather-info",
                                "Current Conditions",
                                "data-table",
                                "temp-alert",
                                "Update Forecast",
                                "action-panel"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000148_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000148_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered title at the top?",
                                "How many article sections are shown on the page?",
                                "What header text is included in the first article section?",
                                "How many rows and columns does the table in the first section have?",
                                "Which CSS class is applied to the table displaying weather data?",
                                "Is there any table cell visually highlighted with a distinctive style?",
                                "How many list items are contained in the ordered list of the second section?",
                                "What character is used to separate the label and value in each list item?",
                                "What inline styles are applied to the alert message in the third section?",
                                "What is the label of the button located at the bottom of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000148_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weather Report",
                                "3",
                                "Current Conditions",
                                "2 rows and 3 columns",
                                "data-table",
                                "Yes, one cell is highlighted with the 'temp-alert' class",
                                "4",
                                "a dash (-)",
                                "a yellow background and bold font",
                                "Update Forecast"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an interactive dashboard with structured statistical data.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Dashboard Summary’ at the top of the component.\n- Create a main container using a <div> element with a class name of 'dashboard-wrapper' to house all other elements.\n- Display exactly 3 cards, each contained within its own <section> element and showing distinct parts of the dashboard information.\n- The first card must feature an unordered list (<ul>) with exactly 4 list items (<li>), where each item shows a data point from the input in the format \"Label: Value\".\n- The second card should include a table element (<table>) with a header (<thead>) and one row (<tr>) inside a <tbody>, containing exactly 3 cells (<td>) representing individual metrics.\n- The third card must display a paragraph (<p>) with inline styling that sets the background color to yellow and includes bold text.\n- At least one of the list items in the first card must apply a CSS class named 'warning-text' to its value to highlight critical information.\n- Add a button element labeled ‘Update View’ at the bottom of the component, wrapped in a <div> element with a class 'toggle-container' for proper alignment.\n- Ensure that all elements are directly structured within the main container without additional nesting beyond what is described above.",
            "task_id": "000149",
            "task_name": "Text to Angular",
            "input_type": "Text",
            "output_type": "Angular",
            "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
            "VQA_questions": [
                "What is the main title displayed at the top of the dashboard?",
                "How many cards are visible in the dashboard layout?",
                "How many list items are shown in the first card?",
                "How is critical information indicated in the first card?",
                "How many table cells are present in the single row of the table in the second card?",
                "What inline style is applied to the paragraph in the third card?",
                "What label does the button at the bottom display?",
                "What is the class name of the main container wrapping all elements?"
            ],
            "VQA_answers": [
                "Dashboard Summary",
                "3",
                "4",
                "A list item uses the 'warning-text' class on its value",
                "3",
                "Yellow background with bold text",
                "Update View",
                "dashboard-wrapper"
            ],
            "raw_output_metric": [
                "Dashboard Summary",
                "dashboard-wrapper",
                "section",
                "ul",
                "li",
                "Label: Value",
                "warning-text",
                "table",
                "thead",
                "tbody",
                "tr",
                "td",
                "p",
                "background-color: yellow",
                "Update View",
                "toggle-container"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000149_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an interactive dashboard with structured statistical data.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Dashboard Summary’ at the top of the component.\n- Create a main container using a <div> element with a class name of 'dashboard-wrapper' to house all other elements.\n- Display exactly 3 cards, each contained within its own <section> element and showing distinct parts of the dashboard information.\n- The first card must feature an unordered list (<ul>) with exactly 4 list items (<li>), where each item shows a data point from the input in the format \"Label: Value\".\n- The second card should include a table element (<table>) with a header (<thead>) and one row (<tr>) inside a <tbody>, containing exactly 3 cells (<td>) representing individual metrics.\n- The third card must display a paragraph (<p>) with inline styling that sets the background color to yellow and includes bold text.\n- At least one of the list items in the first card must apply a CSS class named 'warning-text' to its value to highlight critical information.\n- Add a button element labeled ‘Update View’ at the bottom of the component, wrapped in a <div> element with a class 'toggle-container' for proper alignment.\n- Ensure that all elements are directly structured within the main container without additional nesting beyond what is described above."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000149_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Summary",
                                "dashboard-wrapper",
                                "section",
                                "ul",
                                "li",
                                "Label: Value",
                                "warning-text",
                                "table",
                                "thead",
                                "tbody",
                                "tr",
                                "td",
                                "p",
                                "background-color: yellow",
                                "Update View",
                                "toggle-container"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000149_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000149_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the dashboard?",
                                "How many cards are visible in the dashboard layout?",
                                "How many list items are shown in the first card?",
                                "How is critical information indicated in the first card?",
                                "How many table cells are present in the single row of the table in the second card?",
                                "What inline style is applied to the paragraph in the third card?",
                                "What label does the button at the bottom display?",
                                "What is the class name of the main container wrapping all elements?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000149_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Summary",
                                "3",
                                "4",
                                "A list item uses the 'warning-text' class on its value",
                                "3",
                                "Yellow background with bold text",
                                "Update View",
                                "dashboard-wrapper"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional intergalactic expedition schedule.\n\nFeature Requirements:\n- Include a first row with column headers: \"Expedition Name\", \"Launch Year\", \"Destination Planet\", \"Lead Explorer\".\n- All expedition names must be unique and listed in the first column under \"Expedition Name\".\n- Each \"Launch Year\" entry must be an integer representing a year within the range 2100 to 2200.\n- The \"Destination Planet\" column should include unique fictional planet names and always appear in the third column.\n- The \"Lead Explorer\" column must consist of names formatted as a first name followed by a last name.\n- The CSV should contain exactly 8 rows of expedition data, not counting the header row.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
            "task_id": "000200",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0]",
                "rows[0][1]",
                "rows[0][2]",
                "rows[0][3]",
                "rows[1][0]",
                "rows[1][1]",
                "rows[1][2]",
                "rows[1][3]",
                "rows[2][0]",
                "rows[2][1]",
                "rows[2][2]",
                "rows[2][3]",
                "rows[3][0]",
                "rows[3][1]",
                "rows[3][2]",
                "rows[3][3]",
                "rows[4][0]",
                "rows[4][1]",
                "rows[4][2]",
                "rows[4][3]",
                "rows[5][0]",
                "rows[5][1]",
                "rows[5][2]",
                "rows[5][3]",
                "rows[6][0]",
                "rows[6][1]",
                "rows[6][2]",
                "rows[6][3]",
                "rows[7][0]",
                "rows[7][1]",
                "rows[7][2]",
                "rows[7][3]",
                "rows[8][0]",
                "rows[8][1]",
                "rows[8][2]",
                "rows[8][3]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000200_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional intergalactic expedition schedule.\n\nFeature Requirements:\n- Include a first row with column headers: \"Expedition Name\", \"Launch Year\", \"Destination Planet\", \"Lead Explorer\".\n- All expedition names must be unique and listed in the first column under \"Expedition Name\".\n- Each \"Launch Year\" entry must be an integer representing a year within the range 2100 to 2200.\n- The \"Destination Planet\" column should include unique fictional planet names and always appear in the third column.\n- The \"Lead Explorer\" column must consist of names formatted as a first name followed by a last name.\n- The CSV should contain exactly 8 rows of expedition data, not counting the header row.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000200_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0]",
                                "rows[0][1]",
                                "rows[0][2]",
                                "rows[0][3]",
                                "rows[1][0]",
                                "rows[1][1]",
                                "rows[1][2]",
                                "rows[1][3]",
                                "rows[2][0]",
                                "rows[2][1]",
                                "rows[2][2]",
                                "rows[2][3]",
                                "rows[3][0]",
                                "rows[3][1]",
                                "rows[3][2]",
                                "rows[3][3]",
                                "rows[4][0]",
                                "rows[4][1]",
                                "rows[4][2]",
                                "rows[4][3]",
                                "rows[5][0]",
                                "rows[5][1]",
                                "rows[5][2]",
                                "rows[5][3]",
                                "rows[6][0]",
                                "rows[6][1]",
                                "rows[6][2]",
                                "rows[6][3]",
                                "rows[7][0]",
                                "rows[7][1]",
                                "rows[7][2]",
                                "rows[7][3]",
                                "rows[8][0]",
                                "rows[8][1]",
                                "rows[8][2]",
                                "rows[8][3]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a fictional product inventory list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Product Name\", \"Price\", \"Category\", \"Stock Quantity\".\n- Ensure every product name is unique and appears under the \"Product Name\" header.\n- The \"Price\" column must display a numeric value formatted as a float with two decimal places.\n- The \"Category\" column should contain one of the following categories: \"Electronics\", \"Clothing\", \"Toys\", \"Food\", or \"Books\".\n- \"Stock Quantity\" must be an integer indicating the available number of items.\n- The CSV should have exactly 11 rows in total: one header row and 10 product data rows.\n- Each row, including the header, must have exactly 4 comma-separated values.\n- Ensure there are no extra spaces, blank lines, or additional commas in the CSV output.",
            "task_id": "000201",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000201_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nGenerate a CSV representation of a fictional product inventory list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Product Name\", \"Price\", \"Category\", \"Stock Quantity\".\n- Ensure every product name is unique and appears under the \"Product Name\" header.\n- The \"Price\" column must display a numeric value formatted as a float with two decimal places.\n- The \"Category\" column should contain one of the following categories: \"Electronics\", \"Clothing\", \"Toys\", \"Food\", or \"Books\".\n- \"Stock Quantity\" must be an integer indicating the available number of items.\n- The CSV should have exactly 11 rows in total: one header row and 10 product data rows.\n- Each row, including the header, must have exactly 4 comma-separated values.\n- Ensure there are no extra spaces, blank lines, or additional commas in the CSV output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000201_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of enchanted forests.\n\nFeature Requirements:\n- Include a header row with column headers: \"Forest Name\", \"Area (acres)\", \"Magic Level\", \"Guardian Species\".\n- Ensure all forest names in the \"Forest Name\" column are unique.\n- The \"Area (acres)\" column must contain integer values representing the size of each forest.\n- The \"Magic Level\" column should include one of the following specific values: \"Low\", \"Medium\", \"High\", or \"Legendary\".\n- The \"Guardian Species\" column must list a mythical creature name such as \"Unicorn\", \"Dragon\", \"Dryad\", or \"Phoenix\".\n- The CSV should contain exactly 8 rows of forest data, in addition to the header row.\n- Each row, including the header, must have exactly 4 comma-separated values with no blank rows in between.",
            "task_id": "000202",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Forest Name]",
                "rows[0][Area (acres)]",
                "rows[0][Magic Level]",
                "rows[0][Guardian Species]",
                "rows[1][Forest Name]",
                "rows[1][Area (acres)]",
                "rows[1][Magic Level]",
                "rows[1][Guardian Species]",
                "rows[2][Forest Name]",
                "rows[2][Area (acres)]",
                "rows[2][Magic Level]",
                "rows[2][Guardian Species]",
                "rows[3][Forest Name]",
                "rows[3][Area (acres)]",
                "rows[3][Magic Level]",
                "rows[3][Guardian Species]",
                "rows[4][Forest Name]",
                "rows[4][Area (acres)]",
                "rows[4][Magic Level]",
                "rows[4][Guardian Species]",
                "rows[5][Forest Name]",
                "rows[5][Area (acres)]",
                "rows[5][Magic Level]",
                "rows[5][Guardian Species]",
                "rows[6][Forest Name]",
                "rows[6][Area (acres)]",
                "rows[6][Magic Level]",
                "rows[6][Guardian Species]",
                "rows[7][Forest Name]",
                "rows[7][Area (acres)]",
                "rows[7][Magic Level]",
                "rows[7][Guardian Species]",
                "rows[8][Forest Name]",
                "rows[8][Area (acres)]",
                "rows[8][Magic Level]",
                "rows[8][Guardian Species]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000202_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of enchanted forests.\n\nFeature Requirements:\n- Include a header row with column headers: \"Forest Name\", \"Area (acres)\", \"Magic Level\", \"Guardian Species\".\n- Ensure all forest names in the \"Forest Name\" column are unique.\n- The \"Area (acres)\" column must contain integer values representing the size of each forest.\n- The \"Magic Level\" column should include one of the following specific values: \"Low\", \"Medium\", \"High\", or \"Legendary\".\n- The \"Guardian Species\" column must list a mythical creature name such as \"Unicorn\", \"Dragon\", \"Dryad\", or \"Phoenix\".\n- The CSV should contain exactly 8 rows of forest data, in addition to the header row.\n- Each row, including the header, must have exactly 4 comma-separated values with no blank rows in between."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000202_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Forest Name]",
                                "rows[0][Area (acres)]",
                                "rows[0][Magic Level]",
                                "rows[0][Guardian Species]",
                                "rows[1][Forest Name]",
                                "rows[1][Area (acres)]",
                                "rows[1][Magic Level]",
                                "rows[1][Guardian Species]",
                                "rows[2][Forest Name]",
                                "rows[2][Area (acres)]",
                                "rows[2][Magic Level]",
                                "rows[2][Guardian Species]",
                                "rows[3][Forest Name]",
                                "rows[3][Area (acres)]",
                                "rows[3][Magic Level]",
                                "rows[3][Guardian Species]",
                                "rows[4][Forest Name]",
                                "rows[4][Area (acres)]",
                                "rows[4][Magic Level]",
                                "rows[4][Guardian Species]",
                                "rows[5][Forest Name]",
                                "rows[5][Area (acres)]",
                                "rows[5][Magic Level]",
                                "rows[5][Guardian Species]",
                                "rows[6][Forest Name]",
                                "rows[6][Area (acres)]",
                                "rows[6][Magic Level]",
                                "rows[6][Guardian Species]",
                                "rows[7][Forest Name]",
                                "rows[7][Area (acres)]",
                                "rows[7][Magic Level]",
                                "rows[7][Guardian Species]",
                                "rows[8][Forest Name]",
                                "rows[8][Area (acres)]",
                                "rows[8][Magic Level]",
                                "rows[8][Guardian Species]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of mythical artifacts discovered from various ancient civilizations.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Origin Civilization\", \"Estimated Age\", \"Material\", \"Discovery Location\".\n- Ensure all artifact names are unique and appear in the first column under the \"Artifact Name\" header.\n- Each \"Origin Civilization\" entry must be one of these options: \"Egyptian\", \"Greek\", \"Mayan\", \"Roman\", \"Celtic\".\n- Every \"Estimated Age\" value must be a positive integer representing years.\n- The \"Material\" column should include items like \"bronze\", \"stone\", \"gold\", \"clay\", or \"silver\".\n- \"Discovery Location\" should list specific country names where the artifact was found.\n- The CSV must contain exactly 9 rows including the header.\n- Ensure no blank rows exist between any CSV entries.\n- Each row, including the header, must have exactly 5 comma-separated values.",
            "task_id": "000203",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000203_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of mythical artifacts discovered from various ancient civilizations.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Origin Civilization\", \"Estimated Age\", \"Material\", \"Discovery Location\".\n- Ensure all artifact names are unique and appear in the first column under the \"Artifact Name\" header.\n- Each \"Origin Civilization\" entry must be one of these options: \"Egyptian\", \"Greek\", \"Mayan\", \"Roman\", \"Celtic\".\n- Every \"Estimated Age\" value must be a positive integer representing years.\n- The \"Material\" column should include items like \"bronze\", \"stone\", \"gold\", \"clay\", or \"silver\".\n- \"Discovery Location\" should list specific country names where the artifact was found.\n- The CSV must contain exactly 9 rows including the header.\n- Ensure no blank rows exist between any CSV entries.\n- Each row, including the header, must have exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000203_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of ancient treasure sites in a fantasy realm.\n\nFeature Requirements:\n- The first row must contain column headers: \"Treasure\", \"Depth (m)\", \"Discovered By\", \"Region\".\n- Each \"Treasure\" entry should be a unique, fictional artifact name.\n- The \"Depth (m)\" column must include a positive integer indicating depth in meters.\n- The \"Discovered By\" column should contain explorer names with common first names.\n- The \"Region\" column should list distinct fantasy areas, such as \"Northern Isles\" or \"Mystic Forest\".\n- The CSV should include exactly 8 rows of treasure site data, not counting the header.\n- Each row must contain exactly 4 comma-separated values.\n- There should be no empty or extra rows between data entries.",
            "task_id": "000204",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000204_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of ancient treasure sites in a fantasy realm.\n\nFeature Requirements:\n- The first row must contain column headers: \"Treasure\", \"Depth (m)\", \"Discovered By\", \"Region\".\n- Each \"Treasure\" entry should be a unique, fictional artifact name.\n- The \"Depth (m)\" column must include a positive integer indicating depth in meters.\n- The \"Discovered By\" column should contain explorer names with common first names.\n- The \"Region\" column should list distinct fantasy areas, such as \"Northern Isles\" or \"Mystic Forest\".\n- The CSV should include exactly 8 rows of treasure site data, not counting the header.\n- Each row must contain exactly 4 comma-separated values.\n- There should be no empty or extra rows between data entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000204_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an imaginary festival event schedule.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Event Name\", \"Date\", \"Time\", \"Location\", \"Performer\".\n- The CSV must include exactly 6 rows of event data following the header.\n- Each \"Event Name\" must be unique and represent a fictional festival event.\n- All \"Date\" entries should be formatted as YYYY-MM-DD.\n- Every \"Time\" entry must follow the 24-hour format HH:MM.\n- \"Location\" should list either city names or specific venue addresses.\n- The \"Performer\" column must contain the name of a band or musical act.\n- There must be no blank rows between any of the rows in the CSV.\n- Each row, including the header, must consist of exactly 5 comma-separated values.",
            "task_id": "000205",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Event Name]",
                "rows[0][Date]",
                "rows[0][Time]",
                "rows[0][Location]",
                "rows[0][Performer]",
                "rows[1][Event Name]",
                "rows[1][Date]",
                "rows[1][Time]",
                "rows[1][Location]",
                "rows[1][Performer]",
                "rows[2][Event Name]",
                "rows[2][Date]",
                "rows[2][Time]",
                "rows[2][Location]",
                "rows[2][Performer]",
                "rows[3][Event Name]",
                "rows[3][Date]",
                "rows[3][Time]",
                "rows[3][Location]",
                "rows[3][Performer]",
                "rows[4][Event Name]",
                "rows[4][Date]",
                "rows[4][Time]",
                "rows[4][Location]",
                "rows[4][Performer]",
                "rows[5][Event Name]",
                "rows[5][Date]",
                "rows[5][Time]",
                "rows[5][Location]",
                "rows[5][Performer]",
                "rows[6][Event Name]",
                "rows[6][Date]",
                "rows[6][Time]",
                "rows[6][Location]",
                "rows[6][Performer]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000205_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an imaginary festival event schedule.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Event Name\", \"Date\", \"Time\", \"Location\", \"Performer\".\n- The CSV must include exactly 6 rows of event data following the header.\n- Each \"Event Name\" must be unique and represent a fictional festival event.\n- All \"Date\" entries should be formatted as YYYY-MM-DD.\n- Every \"Time\" entry must follow the 24-hour format HH:MM.\n- \"Location\" should list either city names or specific venue addresses.\n- The \"Performer\" column must contain the name of a band or musical act.\n- There must be no blank rows between any of the rows in the CSV.\n- Each row, including the header, must consist of exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000205_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Event Name]",
                                "rows[0][Date]",
                                "rows[0][Time]",
                                "rows[0][Location]",
                                "rows[0][Performer]",
                                "rows[1][Event Name]",
                                "rows[1][Date]",
                                "rows[1][Time]",
                                "rows[1][Location]",
                                "rows[1][Performer]",
                                "rows[2][Event Name]",
                                "rows[2][Date]",
                                "rows[2][Time]",
                                "rows[2][Location]",
                                "rows[2][Performer]",
                                "rows[3][Event Name]",
                                "rows[3][Date]",
                                "rows[3][Time]",
                                "rows[3][Location]",
                                "rows[3][Performer]",
                                "rows[4][Event Name]",
                                "rows[4][Date]",
                                "rows[4][Time]",
                                "rows[4][Location]",
                                "rows[4][Performer]",
                                "rows[5][Event Name]",
                                "rows[5][Date]",
                                "rows[5][Time]",
                                "rows[5][Location]",
                                "rows[5][Performer]",
                                "rows[6][Event Name]",
                                "rows[6][Date]",
                                "rows[6][Time]",
                                "rows[6][Location]",
                                "rows[6][Performer]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of ancient artifacts discovered in a lost civilization.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Era\", \"Material\", \"Origin Site\".\n- All artifact names must be unique and evoke imaginative ancient objects.\n- Each \"Era\" entry must be a descriptive time period such as \"Bronze Age\" or \"Iron Age\".\n- The \"Material\" column should contain specific substances like \"Stone\", \"Bronze\", \"Gold\", or \"Ceramic\".\n- \"Origin Site\" must list names of archaeological locations or geolocations.\n- The CSV should contain exactly 12 rows in total, including the header row.\n- Each row must include exactly 4 comma-separated values with no additional spaces or blank rows.\n- All data must be formatted as plain text with no extra formatting or embedded code.",
            "task_id": "000206",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Artifact Name]",
                "rows[0][Era]",
                "rows[0][Material]",
                "rows[0][Origin Site]",
                "rows[1][Artifact Name]",
                "rows[1][Era]",
                "rows[1][Material]",
                "rows[1][Origin Site]",
                "rows[2][Artifact Name]",
                "rows[2][Era]",
                "rows[2][Material]",
                "rows[2][Origin Site]",
                "rows[3][Artifact Name]",
                "rows[3][Era]",
                "rows[3][Material]",
                "rows[3][Origin Site]",
                "rows[4][Artifact Name]",
                "rows[4][Era]",
                "rows[4][Material]",
                "rows[4][Origin Site]",
                "rows[5][Artifact Name]",
                "rows[5][Era]",
                "rows[5][Material]",
                "rows[5][Origin Site]",
                "rows[6][Artifact Name]",
                "rows[6][Era]",
                "rows[6][Material]",
                "rows[6][Origin Site]",
                "rows[7][Artifact Name]",
                "rows[7][Era]",
                "rows[7][Material]",
                "rows[7][Origin Site]",
                "rows[8][Artifact Name]",
                "rows[8][Era]",
                "rows[8][Material]",
                "rows[8][Origin Site]",
                "rows[9][Artifact Name]",
                "rows[9][Era]",
                "rows[9][Material]",
                "rows[9][Origin Site]",
                "rows[10][Artifact Name]",
                "rows[10][Era]",
                "rows[10][Material]",
                "rows[10][Origin Site]",
                "rows[11][Artifact Name]",
                "rows[11][Era]",
                "rows[11][Material]",
                "rows[11][Origin Site]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000206_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of ancient artifacts discovered in a lost civilization.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Era\", \"Material\", \"Origin Site\".\n- All artifact names must be unique and evoke imaginative ancient objects.\n- Each \"Era\" entry must be a descriptive time period such as \"Bronze Age\" or \"Iron Age\".\n- The \"Material\" column should contain specific substances like \"Stone\", \"Bronze\", \"Gold\", or \"Ceramic\".\n- \"Origin Site\" must list names of archaeological locations or geolocations.\n- The CSV should contain exactly 12 rows in total, including the header row.\n- Each row must include exactly 4 comma-separated values with no additional spaces or blank rows.\n- All data must be formatted as plain text with no extra formatting or embedded code."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000206_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Artifact Name]",
                                "rows[0][Era]",
                                "rows[0][Material]",
                                "rows[0][Origin Site]",
                                "rows[1][Artifact Name]",
                                "rows[1][Era]",
                                "rows[1][Material]",
                                "rows[1][Origin Site]",
                                "rows[2][Artifact Name]",
                                "rows[2][Era]",
                                "rows[2][Material]",
                                "rows[2][Origin Site]",
                                "rows[3][Artifact Name]",
                                "rows[3][Era]",
                                "rows[3][Material]",
                                "rows[3][Origin Site]",
                                "rows[4][Artifact Name]",
                                "rows[4][Era]",
                                "rows[4][Material]",
                                "rows[4][Origin Site]",
                                "rows[5][Artifact Name]",
                                "rows[5][Era]",
                                "rows[5][Material]",
                                "rows[5][Origin Site]",
                                "rows[6][Artifact Name]",
                                "rows[6][Era]",
                                "rows[6][Material]",
                                "rows[6][Origin Site]",
                                "rows[7][Artifact Name]",
                                "rows[7][Era]",
                                "rows[7][Material]",
                                "rows[7][Origin Site]",
                                "rows[8][Artifact Name]",
                                "rows[8][Era]",
                                "rows[8][Material]",
                                "rows[8][Origin Site]",
                                "rows[9][Artifact Name]",
                                "rows[9][Era]",
                                "rows[9][Material]",
                                "rows[9][Origin Site]",
                                "rows[10][Artifact Name]",
                                "rows[10][Era]",
                                "rows[10][Material]",
                                "rows[10][Origin Site]",
                                "rows[11][Artifact Name]",
                                "rows[11][Era]",
                                "rows[11][Material]",
                                "rows[11][Origin Site]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation of a fictional alien species directory.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Species Name\", \"Home Planet\", \"Lifespan\", \"Primary Ability\".\n- All species names must be unique and appear in the first column.\n- Each \"Home Planet\" entry must include made-up planet names and appear in the second column.\n- \"Lifespan\" entries should be whole numbers representing years and be placed in the third column.\n- The \"Primary Ability\" column should include one special ability such as \"Telepathy\", \"Invisibility\", \"Regeneration\", etc.\n- The CSV should contain exactly 8 rows of species data following the header row.\n- There should be no blank rows between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values.\n- The CSV output must strictly use commas as the separator with no additional formatting.",
            "task_id": "000207",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Species Name]",
                "rows[0][Home Planet]",
                "rows[0][Lifespan]",
                "rows[0][Primary Ability]",
                "rows[1][Species Name]",
                "rows[1][Home Planet]",
                "rows[1][Lifespan]",
                "rows[1][Primary Ability]",
                "rows[2][Species Name]",
                "rows[2][Home Planet]",
                "rows[2][Lifespan]",
                "rows[2][Primary Ability]",
                "rows[3][Species Name]",
                "rows[3][Home Planet]",
                "rows[3][Lifespan]",
                "rows[3][Primary Ability]",
                "rows[4][Species Name]",
                "rows[4][Home Planet]",
                "rows[4][Lifespan]",
                "rows[4][Primary Ability]",
                "rows[5][Species Name]",
                "rows[5][Home Planet]",
                "rows[5][Lifespan]",
                "rows[5][Primary Ability]",
                "rows[6][Species Name]",
                "rows[6][Home Planet]",
                "rows[6][Lifespan]",
                "rows[6][Primary Ability]",
                "rows[7][Species Name]",
                "rows[7][Home Planet]",
                "rows[7][Lifespan]",
                "rows[7][Primary Ability]",
                "rows[8][Species Name]",
                "rows[8][Home Planet]",
                "rows[8][Lifespan]",
                "rows[8][Primary Ability]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000207_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation of a fictional alien species directory.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Species Name\", \"Home Planet\", \"Lifespan\", \"Primary Ability\".\n- All species names must be unique and appear in the first column.\n- Each \"Home Planet\" entry must include made-up planet names and appear in the second column.\n- \"Lifespan\" entries should be whole numbers representing years and be placed in the third column.\n- The \"Primary Ability\" column should include one special ability such as \"Telepathy\", \"Invisibility\", \"Regeneration\", etc.\n- The CSV should contain exactly 8 rows of species data following the header row.\n- There should be no blank rows between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values.\n- The CSV output must strictly use commas as the separator with no additional formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000207_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Species Name]",
                                "rows[0][Home Planet]",
                                "rows[0][Lifespan]",
                                "rows[0][Primary Ability]",
                                "rows[1][Species Name]",
                                "rows[1][Home Planet]",
                                "rows[1][Lifespan]",
                                "rows[1][Primary Ability]",
                                "rows[2][Species Name]",
                                "rows[2][Home Planet]",
                                "rows[2][Lifespan]",
                                "rows[2][Primary Ability]",
                                "rows[3][Species Name]",
                                "rows[3][Home Planet]",
                                "rows[3][Lifespan]",
                                "rows[3][Primary Ability]",
                                "rows[4][Species Name]",
                                "rows[4][Home Planet]",
                                "rows[4][Lifespan]",
                                "rows[4][Primary Ability]",
                                "rows[5][Species Name]",
                                "rows[5][Home Planet]",
                                "rows[5][Lifespan]",
                                "rows[5][Primary Ability]",
                                "rows[6][Species Name]",
                                "rows[6][Home Planet]",
                                "rows[6][Lifespan]",
                                "rows[6][Primary Ability]",
                                "rows[7][Species Name]",
                                "rows[7][Home Planet]",
                                "rows[7][Lifespan]",
                                "rows[7][Primary Ability]",
                                "rows[8][Species Name]",
                                "rows[8][Home Planet]",
                                "rows[8][Lifespan]",
                                "rows[8][Primary Ability]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship registry.\n\nFeature Requirements:\n- The first row must contain column headers: \"Ship Name\", \"Crew Capacity\", \"Max Speed (km/s)\", \"Destination\".\n- Every \"Ship Name\" must be unique and appear in the first column.\n- The \"Crew Capacity\" column should include only integer values representing the number of crew members.\n- \"Max Speed (km/s)\" entries must be decimal numbers rounded to up to two decimal places.\n- The \"Destination\" column must include names of celestial bodies such as \"Mars\", \"Europa\", \"Titan\", etc.\n- The CSV must contain exactly 10 rows: one header row plus nine spaceship records.\n- Every row, including the header, should have exactly 4 comma-separated values.\n- The CSV output must not include any blank rows or extra delimiters.",
            "task_id": "000208",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Ship Name]",
                "rows[0][Crew Capacity]",
                "rows[0][Max Speed (km/s)]",
                "rows[0][Destination]",
                "rows[1..9][Ship Name]",
                "rows[1..9][Crew Capacity]",
                "rows[1..9][Max Speed (km/s)]",
                "rows[1..9][Destination]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000208_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship registry.\n\nFeature Requirements:\n- The first row must contain column headers: \"Ship Name\", \"Crew Capacity\", \"Max Speed (km/s)\", \"Destination\".\n- Every \"Ship Name\" must be unique and appear in the first column.\n- The \"Crew Capacity\" column should include only integer values representing the number of crew members.\n- \"Max Speed (km/s)\" entries must be decimal numbers rounded to up to two decimal places.\n- The \"Destination\" column must include names of celestial bodies such as \"Mars\", \"Europa\", \"Titan\", etc.\n- The CSV must contain exactly 10 rows: one header row plus nine spaceship records.\n- Every row, including the header, should have exactly 4 comma-separated values.\n- The CSV output must not include any blank rows or extra delimiters."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000208_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Ship Name]",
                                "rows[0][Crew Capacity]",
                                "rows[0][Max Speed (km/s)]",
                                "rows[0][Destination]",
                                "rows[1..9][Ship Name]",
                                "rows[1..9][Crew Capacity]",
                                "rows[1..9][Max Speed (km/s)]",
                                "rows[1..9][Destination]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nGenerate a detailed mission log for a hypothetical spaceship fleet in CSV format.\n\nFeature Requirements:\n- The CSV must start with a header row containing the following columns exactly: \"Mission ID\", \"Ship Name\", \"Crew Count\", \"Destination\", \"Launch Date\".\n- Each \"Mission ID\" must be a unique alphanumeric string beginning with \"M\" followed by at least three digits.\n- \"Ship Name\" should be a fictional name for spaceships, with no repeated names across the CSV.\n- \"Crew Count\" must be an integer value ranging from 1 to 100 and occupy the third column.\n- \"Destination\" entries should include names of space locations (e.g., \"Mars\", \"Europa\", \"Titan\") or other fictional exoplanets.\n- \"Launch Date\" must be formatted as YYYY-MM-DD and appear in the fifth column.\n- The CSV should contain exactly 15 rows in total, including the header row.\n- Every row must contain exactly 5 comma-separated values with no blank cells or extra spaces.\n- The output should strictly be in plain CSV format with no additional text or formatting.",
            "task_id": "000209",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0]  // This header cell must be exactly 'Mission ID'",
                "rows[0][1]  // This header cell must be exactly 'Ship Name'",
                "rows[0][2]  // This header cell must be exactly 'Crew Count'",
                "rows[0][3]  // This header cell must be exactly 'Destination'",
                "rows[0][4]  // This header cell must be exactly 'Launch Date'",
                "rows[1..14][0]  // Each cell must contain a unique alphanumeric string starting with 'M' followed by at least three digits",
                "rows[1..14][1]  // Each cell must contain a fictional, unique spaceship name",
                "rows[1..14][2]  // Each cell must be an integer between 1 and 100 (the crew count)",
                "rows[1..14][3]  // Each cell must specify a space destination (e.g., Mars, Europa, Titan, or a fictional exoplanet)",
                "rows[1..14][4]  // Each cell must be a valid date in the YYYY-MM-DD format representing the launch date"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000209_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nGenerate a detailed mission log for a hypothetical spaceship fleet in CSV format.\n\nFeature Requirements:\n- The CSV must start with a header row containing the following columns exactly: \"Mission ID\", \"Ship Name\", \"Crew Count\", \"Destination\", \"Launch Date\".\n- Each \"Mission ID\" must be a unique alphanumeric string beginning with \"M\" followed by at least three digits.\n- \"Ship Name\" should be a fictional name for spaceships, with no repeated names across the CSV.\n- \"Crew Count\" must be an integer value ranging from 1 to 100 and occupy the third column.\n- \"Destination\" entries should include names of space locations (e.g., \"Mars\", \"Europa\", \"Titan\") or other fictional exoplanets.\n- \"Launch Date\" must be formatted as YYYY-MM-DD and appear in the fifth column.\n- The CSV should contain exactly 15 rows in total, including the header row.\n- Every row must contain exactly 5 comma-separated values with no blank cells or extra spaces.\n- The output should strictly be in plain CSV format with no additional text or formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000209_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0]  // This header cell must be exactly 'Mission ID'",
                                "rows[0][1]  // This header cell must be exactly 'Ship Name'",
                                "rows[0][2]  // This header cell must be exactly 'Crew Count'",
                                "rows[0][3]  // This header cell must be exactly 'Destination'",
                                "rows[0][4]  // This header cell must be exactly 'Launch Date'",
                                "rows[1..14][0]  // Each cell must contain a unique alphanumeric string starting with 'M' followed by at least three digits",
                                "rows[1..14][1]  // Each cell must contain a fictional, unique spaceship name",
                                "rows[1..14][2]  // Each cell must be an integer between 1 and 100 (the crew count)",
                                "rows[1..14][3]  // Each cell must specify a space destination (e.g., Mars, Europa, Titan, or a fictional exoplanet)",
                                "rows[1..14][4]  // Each cell must be a valid date in the YYYY-MM-DD format representing the launch date"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of fictional research project details.\n\nFeature Requirements:\n- Include a first row with column headers: \"Project Title\", \"Principal Investigator\", \"Year\", \"Funding\".\n- Ensure all project titles are unique and appear in the first column under the \"Project Title\" header.\n- Each \"Year\" entry must be a 4-digit integer between 2000 and 2023.\n- The \"Funding\" column should display monetary values in US dollars with a leading \"$\" and two decimal places.\n- Names in the \"Principal Investigator\" column must follow the \"First Last\" format.\n- The CSV should contain exactly 8 rows of research project data.\n- Ensure the CSV output does not include any blank rows between entries.\n- Each row, including the header, should consist of exactly 4 comma-separated values.",
            "task_id": "000210",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Project Title]",
                "rows[0][Principal Investigator]",
                "rows[0][Year]",
                "rows[0][Funding]",
                "rows[1][Project Title]",
                "rows[1][Principal Investigator]",
                "rows[1][Year]",
                "rows[1][Funding]",
                "rows[2][Project Title]",
                "rows[2][Principal Investigator]",
                "rows[2][Year]",
                "rows[2][Funding]",
                "rows[3][Project Title]",
                "rows[3][Principal Investigator]",
                "rows[3][Year]",
                "rows[3][Funding]",
                "rows[4][Project Title]",
                "rows[4][Principal Investigator]",
                "rows[4][Year]",
                "rows[4][Funding]",
                "rows[5][Project Title]",
                "rows[5][Principal Investigator]",
                "rows[5][Year]",
                "rows[5][Funding]",
                "rows[6][Project Title]",
                "rows[6][Principal Investigator]",
                "rows[6][Year]",
                "rows[6][Funding]",
                "rows[7][Project Title]",
                "rows[7][Principal Investigator]",
                "rows[7][Year]",
                "rows[7][Funding]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000210_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of fictional research project details.\n\nFeature Requirements:\n- Include a first row with column headers: \"Project Title\", \"Principal Investigator\", \"Year\", \"Funding\".\n- Ensure all project titles are unique and appear in the first column under the \"Project Title\" header.\n- Each \"Year\" entry must be a 4-digit integer between 2000 and 2023.\n- The \"Funding\" column should display monetary values in US dollars with a leading \"$\" and two decimal places.\n- Names in the \"Principal Investigator\" column must follow the \"First Last\" format.\n- The CSV should contain exactly 8 rows of research project data.\n- Ensure the CSV output does not include any blank rows between entries.\n- Each row, including the header, should consist of exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000210_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Project Title]",
                                "rows[0][Principal Investigator]",
                                "rows[0][Year]",
                                "rows[0][Funding]",
                                "rows[1][Project Title]",
                                "rows[1][Principal Investigator]",
                                "rows[1][Year]",
                                "rows[1][Funding]",
                                "rows[2][Project Title]",
                                "rows[2][Principal Investigator]",
                                "rows[2][Year]",
                                "rows[2][Funding]",
                                "rows[3][Project Title]",
                                "rows[3][Principal Investigator]",
                                "rows[3][Year]",
                                "rows[3][Funding]",
                                "rows[4][Project Title]",
                                "rows[4][Principal Investigator]",
                                "rows[4][Year]",
                                "rows[4][Funding]",
                                "rows[5][Project Title]",
                                "rows[5][Principal Investigator]",
                                "rows[5][Year]",
                                "rows[5][Funding]",
                                "rows[6][Project Title]",
                                "rows[6][Principal Investigator]",
                                "rows[6][Year]",
                                "rows[6][Funding]",
                                "rows[7][Project Title]",
                                "rows[7][Principal Investigator]",
                                "rows[7][Year]",
                                "rows[7][Funding]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional cooking contest scoreboard.\n\nFeature Requirements:\n- The first row must contain column headers: \"Contestant Name\", \"Dish Name\", \"Cuisine Type\", \"Score\".\n- The CSV must include exactly 13 rows in total, with one header row and 12 rows of contestant data.\n- Every \"Contestant Name\" must be unique and appear as the first value in its row.\n- Each \"Dish Name\" should be a unique, creatively named dish featured in the contest.\n- The \"Cuisine Type\" column must contain names of specific world cuisines such as \"Italian\", \"Japanese\", \"Mexican\", etc.\n- Each \"Score\" must be an integer between 80 and 100, inclusive, appearing in the fourth column.\n- There should be no blank rows or extra fields; every row must consist of exactly 4 comma-separated values.\n- The CSV output should be plain text without any additional formatting or code wrappers.",
            "task_id": "000211",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000211_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional cooking contest scoreboard.\n\nFeature Requirements:\n- The first row must contain column headers: \"Contestant Name\", \"Dish Name\", \"Cuisine Type\", \"Score\".\n- The CSV must include exactly 13 rows in total, with one header row and 12 rows of contestant data.\n- Every \"Contestant Name\" must be unique and appear as the first value in its row.\n- Each \"Dish Name\" should be a unique, creatively named dish featured in the contest.\n- The \"Cuisine Type\" column must contain names of specific world cuisines such as \"Italian\", \"Japanese\", \"Mexican\", etc.\n- Each \"Score\" must be an integer between 80 and 100, inclusive, appearing in the fourth column.\n- There should be no blank rows or extra fields; every row must consist of exactly 4 comma-separated values.\n- The CSV output should be plain text without any additional formatting or code wrappers."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000211_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of global culinary festivals.\n\nFeature Requirements:\n- Include a header row with the column headers \"Festival Name\", \"Country\", \"Month\", \"Attendance\".\n- The first column must list unique festival names that represent each row's culinary event.\n- The \"Country\" column should contain single-word country names using only alphabetic characters.\n- The \"Month\" column must contain one of the valid month names (e.g., January, February, etc.) for each entry.\n- The \"Attendance\" column should include only integer values representing estimated visitor numbers.\n- The CSV should consist of exactly 13 rows total, including one header row and 12 data rows.\n- Ensure each row contains exactly 4 comma-separated values with no additional spaces or extra delimiters.\n- No row should be left blank, and there must be no empty lines between any of the rows.\n- The CSV output must not include any quotation marks, images, or non-text elements.",
            "task_id": "000212",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000212_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of global culinary festivals.\n\nFeature Requirements:\n- Include a header row with the column headers \"Festival Name\", \"Country\", \"Month\", \"Attendance\".\n- The first column must list unique festival names that represent each row's culinary event.\n- The \"Country\" column should contain single-word country names using only alphabetic characters.\n- The \"Month\" column must contain one of the valid month names (e.g., January, February, etc.) for each entry.\n- The \"Attendance\" column should include only integer values representing estimated visitor numbers.\n- The CSV should consist of exactly 13 rows total, including one header row and 12 data rows.\n- Ensure each row contains exactly 4 comma-separated values with no additional spaces or extra delimiters.\n- No row should be left blank, and there must be no empty lines between any of the rows.\n- The CSV output must not include any quotation marks, images, or non-text elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000212_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic vehicle specifications list.\n\nFeature Requirements:\n- The CSV must start with a header row containing exactly these columns in order: \"Vehicle Model\", \"Year\", \"Energy Source\", \"Max Speed\", \"Manufacturer Location\".\n- The CSV should contain exactly 8 rows of vehicle data following the header row.\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- \"Year\" entries must be four-digit integers representing the vehicle's release year.\n- \"Energy Source\" entries should include options like \"Electric\", \"Hydrogen\", \"Solar\", or \"Hybrid\".\n- \"Max Speed\" must be a number followed by the unit \"km/h\" with no spaces within the value (for example, \"220km/h\").\n- \"Manufacturer Location\" should consist of a valid city name and be placed in the fifth column.\n- All rows, including the header, must strictly include exactly 5 comma-separated values with no blank rows between entries.",
            "task_id": "000213",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000213_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic vehicle specifications list.\n\nFeature Requirements:\n- The CSV must start with a header row containing exactly these columns in order: \"Vehicle Model\", \"Year\", \"Energy Source\", \"Max Speed\", \"Manufacturer Location\".\n- The CSV should contain exactly 8 rows of vehicle data following the header row.\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- \"Year\" entries must be four-digit integers representing the vehicle's release year.\n- \"Energy Source\" entries should include options like \"Electric\", \"Hydrogen\", \"Solar\", or \"Hybrid\".\n- \"Max Speed\" must be a number followed by the unit \"km/h\" with no spaces within the value (for example, \"220km/h\").\n- \"Manufacturer Location\" should consist of a valid city name and be placed in the fifth column.\n- All rows, including the header, must strictly include exactly 5 comma-separated values with no blank rows between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000213_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional movie directory.\n\nFeature Requirements:\n- Include a first row with column headers: \"Movie Title\", \"Release Year\", \"Genre\", \"Budget (in millions)\".\n- Ensure all movie titles are unique and are placed in the first column under \"Movie Title\".\n- Each \"Release Year\" entry must be a four-digit integer, arranged in the second column.\n- The \"Genre\" column should contain values like \"Action\", \"Drama\", \"Comedy\", etc.\n- \"Budget (in millions)\" must be a numeric value with one decimal place, located in the fourth column.\n- The CSV must include exactly 8 rows of movie data following the header row.\n- Make sure there are no extra columns or extra blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
            "task_id": "000214",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0]",
                "rows[0][1]",
                "rows[0][2]",
                "rows[0][3]",
                "rows[1][0]",
                "rows[1][1]",
                "rows[1][2]",
                "rows[1][3]",
                "rows[2][0]",
                "rows[2][1]",
                "rows[2][2]",
                "rows[2][3]",
                "rows[3][0]",
                "rows[3][1]",
                "rows[3][2]",
                "rows[3][3]",
                "rows[4][0]",
                "rows[4][1]",
                "rows[4][2]",
                "rows[4][3]",
                "rows[5][0]",
                "rows[5][1]",
                "rows[5][2]",
                "rows[5][3]",
                "rows[6][0]",
                "rows[6][1]",
                "rows[6][2]",
                "rows[6][3]",
                "rows[7][0]",
                "rows[7][1]",
                "rows[7][2]",
                "rows[7][3]",
                "rows[8][0]",
                "rows[8][1]",
                "rows[8][2]",
                "rows[8][3]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000214_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional movie directory.\n\nFeature Requirements:\n- Include a first row with column headers: \"Movie Title\", \"Release Year\", \"Genre\", \"Budget (in millions)\".\n- Ensure all movie titles are unique and are placed in the first column under \"Movie Title\".\n- Each \"Release Year\" entry must be a four-digit integer, arranged in the second column.\n- The \"Genre\" column should contain values like \"Action\", \"Drama\", \"Comedy\", etc.\n- \"Budget (in millions)\" must be a numeric value with one decimal place, located in the fourth column.\n- The CSV must include exactly 8 rows of movie data following the header row.\n- Make sure there are no extra columns or extra blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000214_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0]",
                                "rows[0][1]",
                                "rows[0][2]",
                                "rows[0][3]",
                                "rows[1][0]",
                                "rows[1][1]",
                                "rows[1][2]",
                                "rows[1][3]",
                                "rows[2][0]",
                                "rows[2][1]",
                                "rows[2][2]",
                                "rows[2][3]",
                                "rows[3][0]",
                                "rows[3][1]",
                                "rows[3][2]",
                                "rows[3][3]",
                                "rows[4][0]",
                                "rows[4][1]",
                                "rows[4][2]",
                                "rows[4][3]",
                                "rows[5][0]",
                                "rows[5][1]",
                                "rows[5][2]",
                                "rows[5][3]",
                                "rows[6][0]",
                                "rows[6][1]",
                                "rows[6][2]",
                                "rows[6][3]",
                                "rows[7][0]",
                                "rows[7][1]",
                                "rows[7][2]",
                                "rows[7][3]",
                                "rows[8][0]",
                                "rows[8][1]",
                                "rows[8][2]",
                                "rows[8][3]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional music festival schedule.\n\nFeature Requirements:\n- The first row must include column headers: \"Day\", \"Artist\", \"Stage\", \"Start Time\", and \"Genre\".\n- The \"Day\" column should list one of the weekdays: \"Friday\", \"Saturday\", or \"Sunday\".\n- The \"Artist\" column must contain unique music act names.\n- The \"Stage\" column should specify one of the following: \"Main Stage\", \"Side Stage\", or \"Acoustic Stage\".\n- The \"Start Time\" must be formatted in 24-hour time (HH:MM).\n- The \"Genre\" column should include musical styles such as \"Rock\", \"Jazz\", \"Electronic\", or \"Folk\".\n- The CSV must include exactly 7 rows of event data following the header row.\n- There must be no extra blank rows between any records.\n- Each row, including the header row, should contain exactly 5 comma-separated values.",
            "task_id": "000215",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000215_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional music festival schedule.\n\nFeature Requirements:\n- The first row must include column headers: \"Day\", \"Artist\", \"Stage\", \"Start Time\", and \"Genre\".\n- The \"Day\" column should list one of the weekdays: \"Friday\", \"Saturday\", or \"Sunday\".\n- The \"Artist\" column must contain unique music act names.\n- The \"Stage\" column should specify one of the following: \"Main Stage\", \"Side Stage\", or \"Acoustic Stage\".\n- The \"Start Time\" must be formatted in 24-hour time (HH:MM).\n- The \"Genre\" column should include musical styles such as \"Rock\", \"Jazz\", \"Electronic\", or \"Folk\".\n- The CSV must include exactly 7 rows of event data following the header row.\n- There must be no extra blank rows between any records.\n- Each row, including the header row, should contain exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000215_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional galaxy catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Galaxy Name\", \"Distance (ly)\", \"Star Count\", \"Dominant Species\".\n- The \"Galaxy Name\" column must list unique, randomly generated galaxy names.\n- \"Distance (ly)\" entries should be integers representing distances in light years.\n- \"Star Count\" values must be formatted as integers indicating the number of stars.\n- \"Dominant Species\" should contain names of imaginative alien species such as \"Zorgon\", \"Nebulite\", or \"Quorbian\".\n- The CSV should contain exactly 7 rows of galaxy data following the header.\n- Each row, including the header, must contain exactly 4 comma-separated values with no additional commas or spaces.\n- Ensure there are no empty lines between any of the rows.",
            "task_id": "000216",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] should be 'Galaxy Name'",
                "rows[0][1] should be 'Distance (ly)'",
                "rows[0][2] should be 'Star Count'",
                "rows[0][3] should be 'Dominant Species'",
                "rows[1][0] through rows[7][0] must contain unique, randomly generated galaxy names",
                "rows[1][1] through rows[7][1] must contain integer values representing distances in light years",
                "rows[1][2] through rows[7][2] must contain integer values for star counts",
                "rows[1][3] through rows[7][3] must contain names of imaginative alien species (e.g. 'Zorgon', 'Nebulite', 'Quorbian')"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000216_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional galaxy catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Galaxy Name\", \"Distance (ly)\", \"Star Count\", \"Dominant Species\".\n- The \"Galaxy Name\" column must list unique, randomly generated galaxy names.\n- \"Distance (ly)\" entries should be integers representing distances in light years.\n- \"Star Count\" values must be formatted as integers indicating the number of stars.\n- \"Dominant Species\" should contain names of imaginative alien species such as \"Zorgon\", \"Nebulite\", or \"Quorbian\".\n- The CSV should contain exactly 7 rows of galaxy data following the header.\n- Each row, including the header, must contain exactly 4 comma-separated values with no additional commas or spaces.\n- Ensure there are no empty lines between any of the rows."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000216_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] should be 'Galaxy Name'",
                                "rows[0][1] should be 'Distance (ly)'",
                                "rows[0][2] should be 'Star Count'",
                                "rows[0][3] should be 'Dominant Species'",
                                "rows[1][0] through rows[7][0] must contain unique, randomly generated galaxy names",
                                "rows[1][1] through rows[7][1] must contain integer values representing distances in light years",
                                "rows[1][2] through rows[7][2] must contain integer values for star counts",
                                "rows[1][3] through rows[7][3] must contain names of imaginative alien species (e.g. 'Zorgon', 'Nebulite', 'Quorbian')"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an inventory of magical artifacts.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Power Level\", \"Origin\", \"Discoverer\".\n- Ensure all artifact names are unique and occupy the first column under the \"Artifact Name\" header.\n- Each \"Power Level\" entry must be an integer between 1 and 100, appearing in the second column.\n- The \"Origin\" column should list fictional kingdoms or realms such as \"Avaloria\" or \"Eldoria\".\n- The \"Discoverer\" column must include realistic full names (first and last) and appear in the fourth column.\n- The CSV should contain exactly 15 rows of artifact data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "task_id": "000217",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Artifact Name]",
                "rows[0][Power Level]",
                "rows[0][Origin]",
                "rows[0][Discoverer]",
                "rows[1..15][Artifact Name]",
                "rows[1..15][Power Level]",
                "rows[1..15][Origin]",
                "rows[1..15][Discoverer]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000217_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an inventory of magical artifacts.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Power Level\", \"Origin\", \"Discoverer\".\n- Ensure all artifact names are unique and occupy the first column under the \"Artifact Name\" header.\n- Each \"Power Level\" entry must be an integer between 1 and 100, appearing in the second column.\n- The \"Origin\" column should list fictional kingdoms or realms such as \"Avaloria\" or \"Eldoria\".\n- The \"Discoverer\" column must include realistic full names (first and last) and appear in the fourth column.\n- The CSV should contain exactly 15 rows of artifact data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000217_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Artifact Name]",
                                "rows[0][Power Level]",
                                "rows[0][Origin]",
                                "rows[0][Discoverer]",
                                "rows[1..15][Artifact Name]",
                                "rows[1..15][Power Level]",
                                "rows[1..15][Origin]",
                                "rows[1..15][Discoverer]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional product catalog.\n\nFeature Requirements:\n- The first row must present column headers in the following order: \"Product ID\", \"Product Name\", \"Category\", \"Price\", \"Stock\".\n- Each \"Product ID\" should consist of a unique code with exactly 3 uppercase letters followed by 3 digits.\n- The \"Product Name\" column must include unique product names such as \"Gadget\", \"Shirt\", \"Lamp\", etc.\n- The \"Category\" entries must be one of the following fixed options: \"Electronics\", \"Clothing\", \"Home\", \"Sports\", or \"Toys\".\n- Each \"Price\" must be a floating-point number formatted with exactly two decimal places and no currency symbols.\n- The \"Stock\" column should contain a non-negative integer representing the available quantity.\n- The CSV output should include exactly 15 rows of product data following the header.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must consist of exactly 5 comma-separated fields.",
            "task_id": "000218",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Product ID]",
                "rows[0][Product Name]",
                "rows[0][Category]",
                "rows[0][Price]",
                "rows[0][Stock]",
                "rows[1][Product ID]",
                "rows[1][Product Name]",
                "rows[1][Category]",
                "rows[1][Price]",
                "rows[1][Stock]",
                "rows[2][Product ID]",
                "rows[2][Product Name]",
                "rows[2][Category]",
                "rows[2][Price]",
                "rows[2][Stock]",
                "rows[3][Product ID]",
                "rows[3][Product Name]",
                "rows[3][Category]",
                "rows[3][Price]",
                "rows[3][Stock]",
                "rows[4][Product ID]",
                "rows[4][Product Name]",
                "rows[4][Category]",
                "rows[4][Price]",
                "rows[4][Stock]",
                "rows[5][Product ID]",
                "rows[5][Product Name]",
                "rows[5][Category]",
                "rows[5][Price]",
                "rows[5][Stock]",
                "rows[6][Product ID]",
                "rows[6][Product Name]",
                "rows[6][Category]",
                "rows[6][Price]",
                "rows[6][Stock]",
                "rows[7][Product ID]",
                "rows[7][Product Name]",
                "rows[7][Category]",
                "rows[7][Price]",
                "rows[7][Stock]",
                "rows[8][Product ID]",
                "rows[8][Product Name]",
                "rows[8][Category]",
                "rows[8][Price]",
                "rows[8][Stock]",
                "rows[9][Product ID]",
                "rows[9][Product Name]",
                "rows[9][Category]",
                "rows[9][Price]",
                "rows[9][Stock]",
                "rows[10][Product ID]",
                "rows[10][Product Name]",
                "rows[10][Category]",
                "rows[10][Price]",
                "rows[10][Stock]",
                "rows[11][Product ID]",
                "rows[11][Product Name]",
                "rows[11][Category]",
                "rows[11][Price]",
                "rows[11][Stock]",
                "rows[12][Product ID]",
                "rows[12][Product Name]",
                "rows[12][Category]",
                "rows[12][Price]",
                "rows[12][Stock]",
                "rows[13][Product ID]",
                "rows[13][Product Name]",
                "rows[13][Category]",
                "rows[13][Price]",
                "rows[13][Stock]",
                "rows[14][Product ID]",
                "rows[14][Product Name]",
                "rows[14][Category]",
                "rows[14][Price]",
                "rows[14][Stock]",
                "rows[15][Product ID]",
                "rows[15][Product Name]",
                "rows[15][Category]",
                "rows[15][Price]",
                "rows[15][Stock]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000218_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional product catalog.\n\nFeature Requirements:\n- The first row must present column headers in the following order: \"Product ID\", \"Product Name\", \"Category\", \"Price\", \"Stock\".\n- Each \"Product ID\" should consist of a unique code with exactly 3 uppercase letters followed by 3 digits.\n- The \"Product Name\" column must include unique product names such as \"Gadget\", \"Shirt\", \"Lamp\", etc.\n- The \"Category\" entries must be one of the following fixed options: \"Electronics\", \"Clothing\", \"Home\", \"Sports\", or \"Toys\".\n- Each \"Price\" must be a floating-point number formatted with exactly two decimal places and no currency symbols.\n- The \"Stock\" column should contain a non-negative integer representing the available quantity.\n- The CSV output should include exactly 15 rows of product data following the header.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must consist of exactly 5 comma-separated fields."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000218_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Product ID]",
                                "rows[0][Product Name]",
                                "rows[0][Category]",
                                "rows[0][Price]",
                                "rows[0][Stock]",
                                "rows[1][Product ID]",
                                "rows[1][Product Name]",
                                "rows[1][Category]",
                                "rows[1][Price]",
                                "rows[1][Stock]",
                                "rows[2][Product ID]",
                                "rows[2][Product Name]",
                                "rows[2][Category]",
                                "rows[2][Price]",
                                "rows[2][Stock]",
                                "rows[3][Product ID]",
                                "rows[3][Product Name]",
                                "rows[3][Category]",
                                "rows[3][Price]",
                                "rows[3][Stock]",
                                "rows[4][Product ID]",
                                "rows[4][Product Name]",
                                "rows[4][Category]",
                                "rows[4][Price]",
                                "rows[4][Stock]",
                                "rows[5][Product ID]",
                                "rows[5][Product Name]",
                                "rows[5][Category]",
                                "rows[5][Price]",
                                "rows[5][Stock]",
                                "rows[6][Product ID]",
                                "rows[6][Product Name]",
                                "rows[6][Category]",
                                "rows[6][Price]",
                                "rows[6][Stock]",
                                "rows[7][Product ID]",
                                "rows[7][Product Name]",
                                "rows[7][Category]",
                                "rows[7][Price]",
                                "rows[7][Stock]",
                                "rows[8][Product ID]",
                                "rows[8][Product Name]",
                                "rows[8][Category]",
                                "rows[8][Price]",
                                "rows[8][Stock]",
                                "rows[9][Product ID]",
                                "rows[9][Product Name]",
                                "rows[9][Category]",
                                "rows[9][Price]",
                                "rows[9][Stock]",
                                "rows[10][Product ID]",
                                "rows[10][Product Name]",
                                "rows[10][Category]",
                                "rows[10][Price]",
                                "rows[10][Stock]",
                                "rows[11][Product ID]",
                                "rows[11][Product Name]",
                                "rows[11][Category]",
                                "rows[11][Price]",
                                "rows[11][Stock]",
                                "rows[12][Product ID]",
                                "rows[12][Product Name]",
                                "rows[12][Category]",
                                "rows[12][Price]",
                                "rows[12][Stock]",
                                "rows[13][Product ID]",
                                "rows[13][Product Name]",
                                "rows[13][Category]",
                                "rows[13][Price]",
                                "rows[13][Stock]",
                                "rows[14][Product ID]",
                                "rows[14][Product Name]",
                                "rows[14][Category]",
                                "rows[14][Price]",
                                "rows[14][Stock]",
                                "rows[15][Product ID]",
                                "rows[15][Product Name]",
                                "rows[15][Category]",
                                "rows[15][Price]",
                                "rows[15][Stock]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation that lists details of a futuristic spaceship fleet.\n\nFeature Requirements:\n- Include a header row with exactly 5 columns labeled \"Ship Name\", \"Model\", \"Crew Capacity\", \"Warp Speed\", \"Origin Planet\".\n- Each \"Ship Name\" must be unique and appear in the first column.\n- The \"Model\" column should contain alphanumeric designations such as \"XJ-9\" or \"ZK-42\".\n- Each \"Crew Capacity\" entry must be an integer and appear in the third column.\n- The \"Warp Speed\" column should include a floating-point number (e.g., 9.5) representing the ship's speed.\n- \"Origin Planet\" should list a fictional planet name and be in the fifth column.\n- The CSV must contain exactly 8 rows of spaceship data in addition to the header row.\n- Ensure that every row, including the header, has exactly 5 comma-separated values and that there are no blank rows between entries.\n- All data points must follow the order and structure specified without any additional formatting.",
            "task_id": "000219",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0]  // Header: Ship Name",
                "rows[0][1]  // Header: Model",
                "rows[0][2]  // Header: Crew Capacity",
                "rows[0][3]  // Header: Warp Speed",
                "rows[0][4]  // Header: Origin Planet",
                "rows[1-8][0]  // Each spaceship’s unique Ship Name",
                "rows[1-8][1]  // Each spaceship’s alphanumeric Model designation",
                "rows[1-8][2]  // Each spaceship’s Crew Capacity as an integer",
                "rows[1-8][3]  // Each spaceship’s Warp Speed as a floating-point number",
                "rows[1-8][4]  // Each spaceship’s Origin Planet name"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000219_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation that lists details of a futuristic spaceship fleet.\n\nFeature Requirements:\n- Include a header row with exactly 5 columns labeled \"Ship Name\", \"Model\", \"Crew Capacity\", \"Warp Speed\", \"Origin Planet\".\n- Each \"Ship Name\" must be unique and appear in the first column.\n- The \"Model\" column should contain alphanumeric designations such as \"XJ-9\" or \"ZK-42\".\n- Each \"Crew Capacity\" entry must be an integer and appear in the third column.\n- The \"Warp Speed\" column should include a floating-point number (e.g., 9.5) representing the ship's speed.\n- \"Origin Planet\" should list a fictional planet name and be in the fifth column.\n- The CSV must contain exactly 8 rows of spaceship data in addition to the header row.\n- Ensure that every row, including the header, has exactly 5 comma-separated values and that there are no blank rows between entries.\n- All data points must follow the order and structure specified without any additional formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000219_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0]  // Header: Ship Name",
                                "rows[0][1]  // Header: Model",
                                "rows[0][2]  // Header: Crew Capacity",
                                "rows[0][3]  // Header: Warp Speed",
                                "rows[0][4]  // Header: Origin Planet",
                                "rows[1-8][0]  // Each spaceship’s unique Ship Name",
                                "rows[1-8][1]  // Each spaceship’s alphanumeric Model designation",
                                "rows[1-8][2]  // Each spaceship’s Crew Capacity as an integer",
                                "rows[1-8][3]  // Each spaceship’s Warp Speed as a floating-point number",
                                "rows[1-8][4]  // Each spaceship’s Origin Planet name"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional space colony registry.\n\nFeature Requirements:\n- Include a first row with column headers: \"Colony Name\", \"Founding Year\", \"Population\", \"Habitat Type\", \"Sector\".\n- Ensure each \"Colony Name\" is unique and appears in the first column under the header.\n- \"Founding Year\" entries must be four-digit integers, placed in the second column.\n- \"Population\" values must be whole numbers indicating the number of inhabitants in the third column.\n- The \"Habitat Type\" column should only contain one of the following values: \"Orbital\", \"Lunar\", \"Martian\", \"Deep Space\".\n- \"Sector\" must feature designated region names like \"Alpha\", \"Beta\", \"Gamma\", etc., appearing in the fifth column.\n- The CSV should contain exactly 8 rows of colony data (excluding the header) with no blank rows between entries and exactly 5 comma-separated values per row.",
            "task_id": "000220",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Colony Name]",
                "rows[0][Founding Year]",
                "rows[0][Population]",
                "rows[0][Habitat Type]",
                "rows[0][Sector]",
                "rows[1..8][Colony Name]",
                "rows[1..8][Founding Year]",
                "rows[1..8][Population]",
                "rows[1..8][Habitat Type]",
                "rows[1..8][Sector]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000220_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional space colony registry.\n\nFeature Requirements:\n- Include a first row with column headers: \"Colony Name\", \"Founding Year\", \"Population\", \"Habitat Type\", \"Sector\".\n- Ensure each \"Colony Name\" is unique and appears in the first column under the header.\n- \"Founding Year\" entries must be four-digit integers, placed in the second column.\n- \"Population\" values must be whole numbers indicating the number of inhabitants in the third column.\n- The \"Habitat Type\" column should only contain one of the following values: \"Orbital\", \"Lunar\", \"Martian\", \"Deep Space\".\n- \"Sector\" must feature designated region names like \"Alpha\", \"Beta\", \"Gamma\", etc., appearing in the fifth column.\n- The CSV should contain exactly 8 rows of colony data (excluding the header) with no blank rows between entries and exactly 5 comma-separated values per row."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000220_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Colony Name]",
                                "rows[0][Founding Year]",
                                "rows[0][Population]",
                                "rows[0][Habitat Type]",
                                "rows[0][Sector]",
                                "rows[1..8][Colony Name]",
                                "rows[1..8][Founding Year]",
                                "rows[1..8][Population]",
                                "rows[1..8][Habitat Type]",
                                "rows[1..8][Sector]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic robot model list.\n\nFeature Requirements:\n- Include a header row with exactly four columns: \"Model Name\", \"Year Introduced\", \"Primary Function\", \"Manufacturer\".\n- Ensure every \"Model Name\" is unique and placed in the first column.\n- Each \"Year Introduced\" must be a four-digit integer between 2050 and 2100.\n- The \"Primary Function\" column should list explicit functions like \"Security\", \"Maintenance\", or \"Transport\".\n- \"Manufacturer\" should include names of fictional companies and appear in the fourth column.\n- The CSV must contain exactly 8 rows of robot model data beneath the header row.\n- Each row, including the header, must consist of exactly 4 comma-separated values.\n- The output should not include any extra spaces or blank rows between entries.\n- The CSV content should not include any additional formatting or text outside the specified structure.",
            "task_id": "000221",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] (Model Name)",
                "rows[0][1] (Year Introduced)",
                "rows[0][2] (Primary Function)",
                "rows[0][3] (Manufacturer)",
                "rows[1][0] (Model Name)",
                "rows[1][1] (Year Introduced)",
                "rows[1][2] (Primary Function)",
                "rows[1][3] (Manufacturer)",
                "rows[2][0] (Model Name)",
                "rows[2][1] (Year Introduced)",
                "rows[2][2] (Primary Function)",
                "rows[2][3] (Manufacturer)",
                "rows[3][0] (Model Name)",
                "rows[3][1] (Year Introduced)",
                "rows[3][2] (Primary Function)",
                "rows[3][3] (Manufacturer)",
                "rows[4][0] (Model Name)",
                "rows[4][1] (Year Introduced)",
                "rows[4][2] (Primary Function)",
                "rows[4][3] (Manufacturer)",
                "rows[5][0] (Model Name)",
                "rows[5][1] (Year Introduced)",
                "rows[5][2] (Primary Function)",
                "rows[5][3] (Manufacturer)",
                "rows[6][0] (Model Name)",
                "rows[6][1] (Year Introduced)",
                "rows[6][2] (Primary Function)",
                "rows[6][3] (Manufacturer)",
                "rows[7][0] (Model Name)",
                "rows[7][1] (Year Introduced)",
                "rows[7][2] (Primary Function)",
                "rows[7][3] (Manufacturer)",
                "rows[8][0] (Model Name)",
                "rows[8][1] (Year Introduced)",
                "rows[8][2] (Primary Function)",
                "rows[8][3] (Manufacturer)"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000221_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic robot model list.\n\nFeature Requirements:\n- Include a header row with exactly four columns: \"Model Name\", \"Year Introduced\", \"Primary Function\", \"Manufacturer\".\n- Ensure every \"Model Name\" is unique and placed in the first column.\n- Each \"Year Introduced\" must be a four-digit integer between 2050 and 2100.\n- The \"Primary Function\" column should list explicit functions like \"Security\", \"Maintenance\", or \"Transport\".\n- \"Manufacturer\" should include names of fictional companies and appear in the fourth column.\n- The CSV must contain exactly 8 rows of robot model data beneath the header row.\n- Each row, including the header, must consist of exactly 4 comma-separated values.\n- The output should not include any extra spaces or blank rows between entries.\n- The CSV content should not include any additional formatting or text outside the specified structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000221_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] (Model Name)",
                                "rows[0][1] (Year Introduced)",
                                "rows[0][2] (Primary Function)",
                                "rows[0][3] (Manufacturer)",
                                "rows[1][0] (Model Name)",
                                "rows[1][1] (Year Introduced)",
                                "rows[1][2] (Primary Function)",
                                "rows[1][3] (Manufacturer)",
                                "rows[2][0] (Model Name)",
                                "rows[2][1] (Year Introduced)",
                                "rows[2][2] (Primary Function)",
                                "rows[2][3] (Manufacturer)",
                                "rows[3][0] (Model Name)",
                                "rows[3][1] (Year Introduced)",
                                "rows[3][2] (Primary Function)",
                                "rows[3][3] (Manufacturer)",
                                "rows[4][0] (Model Name)",
                                "rows[4][1] (Year Introduced)",
                                "rows[4][2] (Primary Function)",
                                "rows[4][3] (Manufacturer)",
                                "rows[5][0] (Model Name)",
                                "rows[5][1] (Year Introduced)",
                                "rows[5][2] (Primary Function)",
                                "rows[5][3] (Manufacturer)",
                                "rows[6][0] (Model Name)",
                                "rows[6][1] (Year Introduced)",
                                "rows[6][2] (Primary Function)",
                                "rows[6][3] (Manufacturer)",
                                "rows[7][0] (Model Name)",
                                "rows[7][1] (Year Introduced)",
                                "rows[7][2] (Primary Function)",
                                "rows[7][3] (Manufacturer)",
                                "rows[8][0] (Model Name)",
                                "rows[8][1] (Year Introduced)",
                                "rows[8][2] (Primary Function)",
                                "rows[8][3] (Manufacturer)"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional futuristic spaceship fleet list.\n\nFeature Requirements:\n- The first row must be a header with exactly five columns: \"Ship Name\", \"Crew Size\", \"Class\", \"Departure Year\", \"Destination Galaxy\".\n- Each \"Ship Name\" in the first column must be unique and reflect a creative futuristic naming style.\n- The \"Crew Size\" entries must be whole numbers, each ranging from 50 to 1000.\n- The \"Class\" column should include categories such as \"Explorer\", \"Battleship\", \"Transport\", or \"Research\".\n- The \"Departure Year\" values must be four-digit integers, all set to a year after 2100.\n- The \"Destination Galaxy\" column must include names like \"Andromeda\", \"Milky Way\", \"Sombrero\", etc.\n- The CSV output should contain exactly 9 rows: 1 header row plus 8 rows of spaceship data.\n- There must be no blank rows between any of the CSV rows.\n- Each row must have exactly 5 comma-separated values, with no extra spaces or missing entries.\n- Ensure that all spaceship data entries are consistently formatted as specified.",
            "task_id": "000222",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000222_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional futuristic spaceship fleet list.\n\nFeature Requirements:\n- The first row must be a header with exactly five columns: \"Ship Name\", \"Crew Size\", \"Class\", \"Departure Year\", \"Destination Galaxy\".\n- Each \"Ship Name\" in the first column must be unique and reflect a creative futuristic naming style.\n- The \"Crew Size\" entries must be whole numbers, each ranging from 50 to 1000.\n- The \"Class\" column should include categories such as \"Explorer\", \"Battleship\", \"Transport\", or \"Research\".\n- The \"Departure Year\" values must be four-digit integers, all set to a year after 2100.\n- The \"Destination Galaxy\" column must include names like \"Andromeda\", \"Milky Way\", \"Sombrero\", etc.\n- The CSV output should contain exactly 9 rows: 1 header row plus 8 rows of spaceship data.\n- There must be no blank rows between any of the CSV rows.\n- Each row must have exactly 5 comma-separated values, with no extra spaces or missing entries.\n- Ensure that all spaceship data entries are consistently formatted as specified."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000222_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nTransform the provided descriptive text into a CSV list representing enchanted artifacts.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Power\", \"Era\", \"Mystery Level\".\n- Every artifact name must be unique and appear in the first column under \"Artifact Name\".\n- The \"Power\" column should include specific abilities such as \"Flight\", \"Invisibility\", or \"Time Control\".\n- The \"Era\" column must list singular historical period names such as \"Ancient\", \"Medieval\", or \"Modern\".\n- The \"Mystery Level\" column should contain integer values indicating the artifact's enigma rating.\n- The CSV should include exactly 7 rows of artifact data, excluding the header.\n- Each row, including the header, must have exactly 4 comma-separated values with no extra whitespace.\n- There should be no blank rows between any entries in the CSV output.\n- All entries must strictly follow the order defined by the header columns.\n- Ensure that no row contains any null or missing values for the required columns.",
            "task_id": "000223",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Artifact Name]",
                "rows[0][Power]",
                "rows[0][Era]",
                "rows[0][Mystery Level]",
                "rows[1][Artifact Name]",
                "rows[1][Power]",
                "rows[1][Era]",
                "rows[1][Mystery Level]",
                "rows[2][Artifact Name]",
                "rows[2][Power]",
                "rows[2][Era]",
                "rows[2][Mystery Level]",
                "rows[3][Artifact Name]",
                "rows[3][Power]",
                "rows[3][Era]",
                "rows[3][Mystery Level]",
                "rows[4][Artifact Name]",
                "rows[4][Power]",
                "rows[4][Era]",
                "rows[4][Mystery Level]",
                "rows[5][Artifact Name]",
                "rows[5][Power]",
                "rows[5][Era]",
                "rows[5][Mystery Level]",
                "rows[6][Artifact Name]",
                "rows[6][Power]",
                "rows[6][Era]",
                "rows[6][Mystery Level]",
                "rows[7][Artifact Name]",
                "rows[7][Power]",
                "rows[7][Era]",
                "rows[7][Mystery Level]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000223_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nTransform the provided descriptive text into a CSV list representing enchanted artifacts.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Power\", \"Era\", \"Mystery Level\".\n- Every artifact name must be unique and appear in the first column under \"Artifact Name\".\n- The \"Power\" column should include specific abilities such as \"Flight\", \"Invisibility\", or \"Time Control\".\n- The \"Era\" column must list singular historical period names such as \"Ancient\", \"Medieval\", or \"Modern\".\n- The \"Mystery Level\" column should contain integer values indicating the artifact's enigma rating.\n- The CSV should include exactly 7 rows of artifact data, excluding the header.\n- Each row, including the header, must have exactly 4 comma-separated values with no extra whitespace.\n- There should be no blank rows between any entries in the CSV output.\n- All entries must strictly follow the order defined by the header columns.\n- Ensure that no row contains any null or missing values for the required columns."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000223_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Artifact Name]",
                                "rows[0][Power]",
                                "rows[0][Era]",
                                "rows[0][Mystery Level]",
                                "rows[1][Artifact Name]",
                                "rows[1][Power]",
                                "rows[1][Era]",
                                "rows[1][Mystery Level]",
                                "rows[2][Artifact Name]",
                                "rows[2][Power]",
                                "rows[2][Era]",
                                "rows[2][Mystery Level]",
                                "rows[3][Artifact Name]",
                                "rows[3][Power]",
                                "rows[3][Era]",
                                "rows[3][Mystery Level]",
                                "rows[4][Artifact Name]",
                                "rows[4][Power]",
                                "rows[4][Era]",
                                "rows[4][Mystery Level]",
                                "rows[5][Artifact Name]",
                                "rows[5][Power]",
                                "rows[5][Era]",
                                "rows[5][Mystery Level]",
                                "rows[6][Artifact Name]",
                                "rows[6][Power]",
                                "rows[6][Era]",
                                "rows[6][Mystery Level]",
                                "rows[7][Artifact Name]",
                                "rows[7][Power]",
                                "rows[7][Era]",
                                "rows[7][Mystery Level]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional planet catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Planet Name\", \"Diameter (km)\", \"Type\", \"Moon Count\", \"Nearest Star System\".\n- All planet names must be unique and formatted in title case.\n- The \"Diameter (km)\" values should be integers representing planet diameters.\n- The \"Type\" column must include only the specific values \"Terrestrial\", \"Gas Giant\", or \"Ice Giant\".\n- The \"Moon Count\" column should contain integer values indicating the number of moons.\n- The \"Nearest Star System\" column must list fictional star system names only.\n- The CSV should contain exactly 12 rows of planet data, following the header row.\n- Every row must have exactly 5 comma-separated values with no blank rows between.\n- Ensure that each entry strictly adheres to its designated column format.",
            "task_id": "000224",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Planet Name]",
                "rows[0][Diameter (km)]",
                "rows[0][Type]",
                "rows[0][Moon Count]",
                "rows[0][Nearest Star System]",
                "rows[1][Planet Name]",
                "rows[1][Diameter (km)]",
                "rows[1][Type]",
                "rows[1][Moon Count]",
                "rows[1][Nearest Star System]",
                "rows[2][Planet Name]",
                "rows[2][Diameter (km)]",
                "rows[2][Type]",
                "rows[2][Moon Count]",
                "rows[2][Nearest Star System]",
                "rows[3][Planet Name]",
                "rows[3][Diameter (km)]",
                "rows[3][Type]",
                "rows[3][Moon Count]",
                "rows[3][Nearest Star System]",
                "rows[4][Planet Name]",
                "rows[4][Diameter (km)]",
                "rows[4][Type]",
                "rows[4][Moon Count]",
                "rows[4][Nearest Star System]",
                "rows[5][Planet Name]",
                "rows[5][Diameter (km)]",
                "rows[5][Type]",
                "rows[5][Moon Count]",
                "rows[5][Nearest Star System]",
                "rows[6][Planet Name]",
                "rows[6][Diameter (km)]",
                "rows[6][Type]",
                "rows[6][Moon Count]",
                "rows[6][Nearest Star System]",
                "rows[7][Planet Name]",
                "rows[7][Diameter (km)]",
                "rows[7][Type]",
                "rows[7][Moon Count]",
                "rows[7][Nearest Star System]",
                "rows[8][Planet Name]",
                "rows[8][Diameter (km)]",
                "rows[8][Type]",
                "rows[8][Moon Count]",
                "rows[8][Nearest Star System]",
                "rows[9][Planet Name]",
                "rows[9][Diameter (km)]",
                "rows[9][Type]",
                "rows[9][Moon Count]",
                "rows[9][Nearest Star System]",
                "rows[10][Planet Name]",
                "rows[10][Diameter (km)]",
                "rows[10][Type]",
                "rows[10][Moon Count]",
                "rows[10][Nearest Star System]",
                "rows[11][Planet Name]",
                "rows[11][Diameter (km)]",
                "rows[11][Type]",
                "rows[11][Moon Count]",
                "rows[11][Nearest Star System]",
                "rows[12][Planet Name]",
                "rows[12][Diameter (km)]",
                "rows[12][Type]",
                "rows[12][Moon Count]",
                "rows[12][Nearest Star System]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000224_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional planet catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Planet Name\", \"Diameter (km)\", \"Type\", \"Moon Count\", \"Nearest Star System\".\n- All planet names must be unique and formatted in title case.\n- The \"Diameter (km)\" values should be integers representing planet diameters.\n- The \"Type\" column must include only the specific values \"Terrestrial\", \"Gas Giant\", or \"Ice Giant\".\n- The \"Moon Count\" column should contain integer values indicating the number of moons.\n- The \"Nearest Star System\" column must list fictional star system names only.\n- The CSV should contain exactly 12 rows of planet data, following the header row.\n- Every row must have exactly 5 comma-separated values with no blank rows between.\n- Ensure that each entry strictly adheres to its designated column format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000224_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Planet Name]",
                                "rows[0][Diameter (km)]",
                                "rows[0][Type]",
                                "rows[0][Moon Count]",
                                "rows[0][Nearest Star System]",
                                "rows[1][Planet Name]",
                                "rows[1][Diameter (km)]",
                                "rows[1][Type]",
                                "rows[1][Moon Count]",
                                "rows[1][Nearest Star System]",
                                "rows[2][Planet Name]",
                                "rows[2][Diameter (km)]",
                                "rows[2][Type]",
                                "rows[2][Moon Count]",
                                "rows[2][Nearest Star System]",
                                "rows[3][Planet Name]",
                                "rows[3][Diameter (km)]",
                                "rows[3][Type]",
                                "rows[3][Moon Count]",
                                "rows[3][Nearest Star System]",
                                "rows[4][Planet Name]",
                                "rows[4][Diameter (km)]",
                                "rows[4][Type]",
                                "rows[4][Moon Count]",
                                "rows[4][Nearest Star System]",
                                "rows[5][Planet Name]",
                                "rows[5][Diameter (km)]",
                                "rows[5][Type]",
                                "rows[5][Moon Count]",
                                "rows[5][Nearest Star System]",
                                "rows[6][Planet Name]",
                                "rows[6][Diameter (km)]",
                                "rows[6][Type]",
                                "rows[6][Moon Count]",
                                "rows[6][Nearest Star System]",
                                "rows[7][Planet Name]",
                                "rows[7][Diameter (km)]",
                                "rows[7][Type]",
                                "rows[7][Moon Count]",
                                "rows[7][Nearest Star System]",
                                "rows[8][Planet Name]",
                                "rows[8][Diameter (km)]",
                                "rows[8][Type]",
                                "rows[8][Moon Count]",
                                "rows[8][Nearest Star System]",
                                "rows[9][Planet Name]",
                                "rows[9][Diameter (km)]",
                                "rows[9][Type]",
                                "rows[9][Moon Count]",
                                "rows[9][Nearest Star System]",
                                "rows[10][Planet Name]",
                                "rows[10][Diameter (km)]",
                                "rows[10][Type]",
                                "rows[10][Moon Count]",
                                "rows[10][Nearest Star System]",
                                "rows[11][Planet Name]",
                                "rows[11][Diameter (km)]",
                                "rows[11][Type]",
                                "rows[11][Moon Count]",
                                "rows[11][Nearest Star System]",
                                "rows[12][Planet Name]",
                                "rows[12][Diameter (km)]",
                                "rows[12][Type]",
                                "rows[12][Moon Count]",
                                "rows[12][Nearest Star System]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional planetary database.\n\nFeature Requirements:\n- Include an initial row with column headers: \"Planet Name\", \"Diameter (km)\", \"Atmosphere Composition\", \"Distance from Star (AU)\", \"Moons Count\".\n- Ensure all planet names are unique and appear under the \"Planet Name\" header.\n- Each \"Diameter (km)\" value must be an integer, representing the planet's diameter in kilometers.\n- The \"Atmosphere Composition\" values should be selected from options like \"Oxygen-rich\", \"Methane\", \"Carbon Dioxide\", \"Helium\", or \"Hydrogen\".\n- \"Distance from Star (AU)\" entries must be decimal numbers rounded to one decimal place to represent Astronomical Units.\n- \"Moons Count\" should be a non-negative integer indicating the number of moons.\n- The CSV must contain exactly 8 rows of planet data following the header row.\n- Ensure there are no extra spaces or blank rows between entries.\n- Each row must contain exactly 5 comma-separated values following the header order.\n- The CSV output should not include any additional text or explanations beyond the structured data.",
            "task_id": "000225",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000225_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional planetary database.\n\nFeature Requirements:\n- Include an initial row with column headers: \"Planet Name\", \"Diameter (km)\", \"Atmosphere Composition\", \"Distance from Star (AU)\", \"Moons Count\".\n- Ensure all planet names are unique and appear under the \"Planet Name\" header.\n- Each \"Diameter (km)\" value must be an integer, representing the planet's diameter in kilometers.\n- The \"Atmosphere Composition\" values should be selected from options like \"Oxygen-rich\", \"Methane\", \"Carbon Dioxide\", \"Helium\", or \"Hydrogen\".\n- \"Distance from Star (AU)\" entries must be decimal numbers rounded to one decimal place to represent Astronomical Units.\n- \"Moons Count\" should be a non-negative integer indicating the number of moons.\n- The CSV must contain exactly 8 rows of planet data following the header row.\n- Ensure there are no extra spaces or blank rows between entries.\n- Each row must contain exactly 5 comma-separated values following the header order.\n- The CSV output should not include any additional text or explanations beyond the structured data."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000225_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship inventory list.\n\nFeature Requirements:\n- The first row must include the column headers: \"Spaceship Name\", \"Capacity\", \"Speed (ly/hr)\", \"Base Orbit\".\n- Each spaceship name in the \"Spaceship Name\" column should be unique.\n- The \"Capacity\" column must contain whole numbers representing the number of crew members each spaceship can accommodate.\n- The \"Speed (ly/hr)\" column should include numeric values formatted with up to two decimal places.\n- The \"Base Orbit\" column must list designated space station names, such as \"New Terra\" or \"Galactic Hub\".\n- The CSV should contain exactly 8 rows of spaceship data following the header.\n- Ensure there are no blank rows between entries and each row consists strictly of 4 comma-separated values.",
            "task_id": "000226",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Spaceship Name]",
                "rows[0][Capacity]",
                "rows[0][Speed (ly/hr)]",
                "rows[0][Base Orbit]",
                "rows[1][Spaceship Name]",
                "rows[1][Capacity]",
                "rows[1][Speed (ly/hr)]",
                "rows[1][Base Orbit]",
                "rows[2][Spaceship Name]",
                "rows[2][Capacity]",
                "rows[2][Speed (ly/hr)]",
                "rows[2][Base Orbit]",
                "rows[3][Spaceship Name]",
                "rows[3][Capacity]",
                "rows[3][Speed (ly/hr)]",
                "rows[3][Base Orbit]",
                "rows[4][Spaceship Name]",
                "rows[4][Capacity]",
                "rows[4][Speed (ly/hr)]",
                "rows[4][Base Orbit]",
                "rows[5][Spaceship Name]",
                "rows[5][Capacity]",
                "rows[5][Speed (ly/hr)]",
                "rows[5][Base Orbit]",
                "rows[6][Spaceship Name]",
                "rows[6][Capacity]",
                "rows[6][Speed (ly/hr)]",
                "rows[6][Base Orbit]",
                "rows[7][Spaceship Name]",
                "rows[7][Capacity]",
                "rows[7][Speed (ly/hr)]",
                "rows[7][Base Orbit]",
                "rows[8][Spaceship Name]",
                "rows[8][Capacity]",
                "rows[8][Speed (ly/hr)]",
                "rows[8][Base Orbit]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000226_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship inventory list.\n\nFeature Requirements:\n- The first row must include the column headers: \"Spaceship Name\", \"Capacity\", \"Speed (ly/hr)\", \"Base Orbit\".\n- Each spaceship name in the \"Spaceship Name\" column should be unique.\n- The \"Capacity\" column must contain whole numbers representing the number of crew members each spaceship can accommodate.\n- The \"Speed (ly/hr)\" column should include numeric values formatted with up to two decimal places.\n- The \"Base Orbit\" column must list designated space station names, such as \"New Terra\" or \"Galactic Hub\".\n- The CSV should contain exactly 8 rows of spaceship data following the header.\n- Ensure there are no blank rows between entries and each row consists strictly of 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000226_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Spaceship Name]",
                                "rows[0][Capacity]",
                                "rows[0][Speed (ly/hr)]",
                                "rows[0][Base Orbit]",
                                "rows[1][Spaceship Name]",
                                "rows[1][Capacity]",
                                "rows[1][Speed (ly/hr)]",
                                "rows[1][Base Orbit]",
                                "rows[2][Spaceship Name]",
                                "rows[2][Capacity]",
                                "rows[2][Speed (ly/hr)]",
                                "rows[2][Base Orbit]",
                                "rows[3][Spaceship Name]",
                                "rows[3][Capacity]",
                                "rows[3][Speed (ly/hr)]",
                                "rows[3][Base Orbit]",
                                "rows[4][Spaceship Name]",
                                "rows[4][Capacity]",
                                "rows[4][Speed (ly/hr)]",
                                "rows[4][Base Orbit]",
                                "rows[5][Spaceship Name]",
                                "rows[5][Capacity]",
                                "rows[5][Speed (ly/hr)]",
                                "rows[5][Base Orbit]",
                                "rows[6][Spaceship Name]",
                                "rows[6][Capacity]",
                                "rows[6][Speed (ly/hr)]",
                                "rows[6][Base Orbit]",
                                "rows[7][Spaceship Name]",
                                "rows[7][Capacity]",
                                "rows[7][Speed (ly/hr)]",
                                "rows[7][Base Orbit]",
                                "rows[8][Spaceship Name]",
                                "rows[8][Capacity]",
                                "rows[8][Speed (ly/hr)]",
                                "rows[8][Base Orbit]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional musical instrument collection.\n\nFeature Requirements:\n- The CSV must include a first row with exactly five column headers: \"Instrument Name\", \"Category\", \"Country of Origin\", \"Year Invented\", \"Price\".\n- Each \"Instrument Name\" entry must be unique and listed in the first column.\n- The \"Category\" column should only include one of these specific types: \"String\", \"Wind\", \"Percussion\", or \"Keyboard\".\n- The \"Country of Origin\" column must list the name of a country and appear as the third column.\n- \"Year Invented\" entries must be whole numbers representing a plausible year for the invention of the instrument.\n- The \"Price\" column should display a decimal number formatted with two decimal places.\n- The CSV must contain exactly 12 rows including the header row.\n- There should be no blank rows or extra lines between the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values.",
            "task_id": "000227",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] must have the header 'Instrument Name'",
                "rows[0][1] must have the header 'Category'",
                "rows[0][2] must have the header 'Country of Origin'",
                "rows[0][3] must have the header 'Year Invented'",
                "rows[0][4] must have the header 'Price'",
                "There must be exactly 12 rows in total (including the header row)",
                "Every row must contain exactly 5 comma‐separated values",
                "rows[1..11][0] must contain unique 'Instrument Name' values",
                "rows[1..11][1] must contain a 'Category' which is one of: 'String', 'Wind', 'Percussion', or 'Keyboard'",
                "rows[1..11][2] must contain a 'Country of Origin' (a valid country name)",
                "rows[1..11][3] must contain 'Year Invented' as a plausible whole number year",
                "rows[1..11][4] must contain 'Price' as a decimal number formatted with two decimal places"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000227_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional musical instrument collection.\n\nFeature Requirements:\n- The CSV must include a first row with exactly five column headers: \"Instrument Name\", \"Category\", \"Country of Origin\", \"Year Invented\", \"Price\".\n- Each \"Instrument Name\" entry must be unique and listed in the first column.\n- The \"Category\" column should only include one of these specific types: \"String\", \"Wind\", \"Percussion\", or \"Keyboard\".\n- The \"Country of Origin\" column must list the name of a country and appear as the third column.\n- \"Year Invented\" entries must be whole numbers representing a plausible year for the invention of the instrument.\n- The \"Price\" column should display a decimal number formatted with two decimal places.\n- The CSV must contain exactly 12 rows including the header row.\n- There should be no blank rows or extra lines between the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000227_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] must have the header 'Instrument Name'",
                                "rows[0][1] must have the header 'Category'",
                                "rows[0][2] must have the header 'Country of Origin'",
                                "rows[0][3] must have the header 'Year Invented'",
                                "rows[0][4] must have the header 'Price'",
                                "There must be exactly 12 rows in total (including the header row)",
                                "Every row must contain exactly 5 comma‐separated values",
                                "rows[1..11][0] must contain unique 'Instrument Name' values",
                                "rows[1..11][1] must contain a 'Category' which is one of: 'String', 'Wind', 'Percussion', or 'Keyboard'",
                                "rows[1..11][2] must contain a 'Country of Origin' (a valid country name)",
                                "rows[1..11][3] must contain 'Year Invented' as a plausible whole number year",
                                "rows[1..11][4] must contain 'Price' as a decimal number formatted with two decimal places"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of an intergalactic spaceship launch log.\n\nFeature Requirements:\n- Include a first row with exactly four column headers: \"Spaceship\", \"Launch Year\", \"Duration\", \"Destination\".\n- The \"Spaceship\" column must contain unique names that combine letters and numbers.\n- The \"Launch Year\" entries must be four-digit numbers representing plausible historical launch dates.\n- The \"Duration\" column must list mission durations in days as non-negative integers.\n- The \"Destination\" column must specify fictional planet names such as \"Zephyria\", \"Noveria\", etc.\n- The CSV output must contain exactly 8 rows in total, including the header.\n- Each row must consist of four comma-separated values with no extra or missing entries.\n- Ensure that there are no blank lines between the rows in the CSV output.",
            "task_id": "000228",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] (Header: 'Spaceship')",
                "rows[0][1] (Header: 'Launch Year')",
                "rows[0][2] (Header: 'Duration')",
                "rows[0][3] (Header: 'Destination')",
                "rows[1..7][0] (Spaceship value: unique alphanumeric identifier)",
                "rows[1..7][1] (Launch Year value: exactly four-digit plausible year)",
                "rows[1..7][2] (Duration value: non-negative integer in days)",
                "rows[1..7][3] (Destination value: fictional planet name e.g., 'Zephyria', 'Noveria')"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000228_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of an intergalactic spaceship launch log.\n\nFeature Requirements:\n- Include a first row with exactly four column headers: \"Spaceship\", \"Launch Year\", \"Duration\", \"Destination\".\n- The \"Spaceship\" column must contain unique names that combine letters and numbers.\n- The \"Launch Year\" entries must be four-digit numbers representing plausible historical launch dates.\n- The \"Duration\" column must list mission durations in days as non-negative integers.\n- The \"Destination\" column must specify fictional planet names such as \"Zephyria\", \"Noveria\", etc.\n- The CSV output must contain exactly 8 rows in total, including the header.\n- Each row must consist of four comma-separated values with no extra or missing entries.\n- Ensure that there are no blank lines between the rows in the CSV output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000228_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] (Header: 'Spaceship')",
                                "rows[0][1] (Header: 'Launch Year')",
                                "rows[0][2] (Header: 'Duration')",
                                "rows[0][3] (Header: 'Destination')",
                                "rows[1..7][0] (Spaceship value: unique alphanumeric identifier)",
                                "rows[1..7][1] (Launch Year value: exactly four-digit plausible year)",
                                "rows[1..7][2] (Duration value: non-negative integer in days)",
                                "rows[1..7][3] (Destination value: fictional planet name e.g., 'Zephyria', 'Noveria')"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional book catalog.\n\nFeature Requirements:\n- Include a first row with the column headers: \"Title\", \"Author\", \"Publication Year\", \"Genre\".\n- Ensure all book titles are unique and occupy the first column under the \"Title\" header.\n- Each \"Publication Year\" entry must be a four-digit number representing the year of publication.\n- The \"Author\" column should contain realistic full names with both a first and last name.\n- The \"Genre\" column must include recognized literature genres such as \"Mystery\", \"Fantasy\", \"Historical\", or \"Romance\".\n- The CSV should contain exactly 10 rows of book data (excluding the header row).\n- There should be no blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
            "task_id": "000229",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000229_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional book catalog.\n\nFeature Requirements:\n- Include a first row with the column headers: \"Title\", \"Author\", \"Publication Year\", \"Genre\".\n- Ensure all book titles are unique and occupy the first column under the \"Title\" header.\n- Each \"Publication Year\" entry must be a four-digit number representing the year of publication.\n- The \"Author\" column should contain realistic full names with both a first and last name.\n- The \"Genre\" column must include recognized literature genres such as \"Mystery\", \"Fantasy\", \"Historical\", or \"Romance\".\n- The CSV should contain exactly 10 rows of book data (excluding the header row).\n- There should be no blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000229_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an enchanted artifact catalog.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Century\", \"Origin\", \"Enchantment Level\".\n- All artifact names in the \"Artifact Name\" column must be unique, using invented names.\n- Each \"Century\" entry must be a positive integer representing the artifact's age in centuries.\n- The \"Origin\" column should list mythical locations such as \"Avalon\", \"Atlantis\", \"Elysium\", etc.\n- The \"Enchantment Level\" column must include one of the three descriptors: \"Low\", \"Medium\", or \"High\".\n- The CSV output must contain exactly 7 rows of artifact data, not including the header.\n- There should be no blank rows between the header and artifact entries.\n- Every row, including the header, must have exactly 4 comma-separated values.",
            "task_id": "000230",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Artifact Name]",
                "rows[0][Century]",
                "rows[0][Origin]",
                "rows[0][Enchantment Level]",
                "rows[1][Artifact Name]",
                "rows[1][Century]",
                "rows[1][Origin]",
                "rows[1][Enchantment Level]",
                "rows[2][Artifact Name]",
                "rows[2][Century]",
                "rows[2][Origin]",
                "rows[2][Enchantment Level]",
                "rows[3][Artifact Name]",
                "rows[3][Century]",
                "rows[3][Origin]",
                "rows[3][Enchantment Level]",
                "rows[4][Artifact Name]",
                "rows[4][Century]",
                "rows[4][Origin]",
                "rows[4][Enchantment Level]",
                "rows[5][Artifact Name]",
                "rows[5][Century]",
                "rows[5][Origin]",
                "rows[5][Enchantment Level]",
                "rows[6][Artifact Name]",
                "rows[6][Century]",
                "rows[6][Origin]",
                "rows[6][Enchantment Level]",
                "rows[7][Artifact Name]",
                "rows[7][Century]",
                "rows[7][Origin]",
                "rows[7][Enchantment Level]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000230_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an enchanted artifact catalog.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Century\", \"Origin\", \"Enchantment Level\".\n- All artifact names in the \"Artifact Name\" column must be unique, using invented names.\n- Each \"Century\" entry must be a positive integer representing the artifact's age in centuries.\n- The \"Origin\" column should list mythical locations such as \"Avalon\", \"Atlantis\", \"Elysium\", etc.\n- The \"Enchantment Level\" column must include one of the three descriptors: \"Low\", \"Medium\", or \"High\".\n- The CSV output must contain exactly 7 rows of artifact data, not including the header.\n- There should be no blank rows between the header and artifact entries.\n- Every row, including the header, must have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000230_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Artifact Name]",
                                "rows[0][Century]",
                                "rows[0][Origin]",
                                "rows[0][Enchantment Level]",
                                "rows[1][Artifact Name]",
                                "rows[1][Century]",
                                "rows[1][Origin]",
                                "rows[1][Enchantment Level]",
                                "rows[2][Artifact Name]",
                                "rows[2][Century]",
                                "rows[2][Origin]",
                                "rows[2][Enchantment Level]",
                                "rows[3][Artifact Name]",
                                "rows[3][Century]",
                                "rows[3][Origin]",
                                "rows[3][Enchantment Level]",
                                "rows[4][Artifact Name]",
                                "rows[4][Century]",
                                "rows[4][Origin]",
                                "rows[4][Enchantment Level]",
                                "rows[5][Artifact Name]",
                                "rows[5][Century]",
                                "rows[5][Origin]",
                                "rows[5][Enchantment Level]",
                                "rows[6][Artifact Name]",
                                "rows[6][Century]",
                                "rows[6][Origin]",
                                "rows[6][Enchantment Level]",
                                "rows[7][Artifact Name]",
                                "rows[7][Century]",
                                "rows[7][Origin]",
                                "rows[7][Enchantment Level]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of enchanted garden plants.\n\nFeature Requirements:\n- Include a first row with column headers: \"Plant Name\", \"Blooming Season\", \"Height (cm)\", \"Sunlight Requirement\".\n- The \"Plant Name\" column must list unique plant names and appear as the first column.\n- \"Blooming Season\" should indicate one of the seasons: \"Spring\", \"Summer\", \"Autumn\", or \"Winter\" in the second column.\n- \"Height (cm)\" must contain integer values representing the plant's height in centimeters in the third column.\n- \"Sunlight Requirement\" should include descriptions such as \"Full Sun\", \"Partial Shade\", or \"Full Shade\" in the fourth column.\n- The CSV must contain exactly 8 rows of plant data (including the header row).\n- Each row should have exactly 4 comma-separated values without any additional or missing columns.\n- Ensure there are no extra blank lines or whitespace between the CSV rows.",
            "task_id": "000231",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows",
                "rows.length",
                "rows[0][0]",
                "rows[0][1]",
                "rows[0][2]",
                "rows[0][3]",
                "rows[*][0]",
                "rows[*][1]",
                "rows[*][2]",
                "rows[*][3]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000231_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of enchanted garden plants.\n\nFeature Requirements:\n- Include a first row with column headers: \"Plant Name\", \"Blooming Season\", \"Height (cm)\", \"Sunlight Requirement\".\n- The \"Plant Name\" column must list unique plant names and appear as the first column.\n- \"Blooming Season\" should indicate one of the seasons: \"Spring\", \"Summer\", \"Autumn\", or \"Winter\" in the second column.\n- \"Height (cm)\" must contain integer values representing the plant's height in centimeters in the third column.\n- \"Sunlight Requirement\" should include descriptions such as \"Full Sun\", \"Partial Shade\", or \"Full Shade\" in the fourth column.\n- The CSV must contain exactly 8 rows of plant data (including the header row).\n- Each row should have exactly 4 comma-separated values without any additional or missing columns.\n- Ensure there are no extra blank lines or whitespace between the CSV rows."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000231_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows",
                                "rows.length",
                                "rows[0][0]",
                                "rows[0][1]",
                                "rows[0][2]",
                                "rows[0][3]",
                                "rows[*][0]",
                                "rows[*][1]",
                                "rows[*][2]",
                                "rows[*][3]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional pet adoption agency record list.\n\nFeature Requirements:\n- Include a header row with the columns: \"Pet ID\", \"Species\", \"Age\", \"Gender\", \"Adoption Center\".\n- Each \"Pet ID\" must be a unique five-digit number.\n- The \"Species\" column should include only the following options: \"Dog\", \"Cat\", \"Bird\", \"Rabbit\", \"Fish\".\n- \"Age\" must be provided as a positive integer representing the pet's age in years.\n- The \"Gender\" column must contain either \"Male\" or \"Female\".\n- The \"Adoption Center\" column must list fictional center names paired with a city (e.g., \"Happy Tails - Austin\").\n- Make sure the CSV output contains exactly 8 rows, including the header row.\n- There should be no blank rows between any of the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values.",
            "task_id": "000232",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Pet ID]",
                "rows[0][Species]",
                "rows[0][Age]",
                "rows[0][Gender]",
                "rows[0][Adoption Center]",
                "rows[1][Pet ID]",
                "rows[1][Species]",
                "rows[1][Age]",
                "rows[1][Gender]",
                "rows[1][Adoption Center]",
                "rows[2][Pet ID]",
                "rows[2][Species]",
                "rows[2][Age]",
                "rows[2][Gender]",
                "rows[2][Adoption Center]",
                "rows[3][Pet ID]",
                "rows[3][Species]",
                "rows[3][Age]",
                "rows[3][Gender]",
                "rows[3][Adoption Center]",
                "rows[4][Pet ID]",
                "rows[4][Species]",
                "rows[4][Age]",
                "rows[4][Gender]",
                "rows[4][Adoption Center]",
                "rows[5][Pet ID]",
                "rows[5][Species]",
                "rows[5][Age]",
                "rows[5][Gender]",
                "rows[5][Adoption Center]",
                "rows[6][Pet ID]",
                "rows[6][Species]",
                "rows[6][Age]",
                "rows[6][Gender]",
                "rows[6][Adoption Center]",
                "rows[7][Pet ID]",
                "rows[7][Species]",
                "rows[7][Age]",
                "rows[7][Gender]",
                "rows[7][Adoption Center]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000232_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional pet adoption agency record list.\n\nFeature Requirements:\n- Include a header row with the columns: \"Pet ID\", \"Species\", \"Age\", \"Gender\", \"Adoption Center\".\n- Each \"Pet ID\" must be a unique five-digit number.\n- The \"Species\" column should include only the following options: \"Dog\", \"Cat\", \"Bird\", \"Rabbit\", \"Fish\".\n- \"Age\" must be provided as a positive integer representing the pet's age in years.\n- The \"Gender\" column must contain either \"Male\" or \"Female\".\n- The \"Adoption Center\" column must list fictional center names paired with a city (e.g., \"Happy Tails - Austin\").\n- Make sure the CSV output contains exactly 8 rows, including the header row.\n- There should be no blank rows between any of the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000232_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Pet ID]",
                                "rows[0][Species]",
                                "rows[0][Age]",
                                "rows[0][Gender]",
                                "rows[0][Adoption Center]",
                                "rows[1][Pet ID]",
                                "rows[1][Species]",
                                "rows[1][Age]",
                                "rows[1][Gender]",
                                "rows[1][Adoption Center]",
                                "rows[2][Pet ID]",
                                "rows[2][Species]",
                                "rows[2][Age]",
                                "rows[2][Gender]",
                                "rows[2][Adoption Center]",
                                "rows[3][Pet ID]",
                                "rows[3][Species]",
                                "rows[3][Age]",
                                "rows[3][Gender]",
                                "rows[3][Adoption Center]",
                                "rows[4][Pet ID]",
                                "rows[4][Species]",
                                "rows[4][Age]",
                                "rows[4][Gender]",
                                "rows[4][Adoption Center]",
                                "rows[5][Pet ID]",
                                "rows[5][Species]",
                                "rows[5][Age]",
                                "rows[5][Gender]",
                                "rows[5][Adoption Center]",
                                "rows[6][Pet ID]",
                                "rows[6][Species]",
                                "rows[6][Age]",
                                "rows[6][Gender]",
                                "rows[6][Adoption Center]",
                                "rows[7][Pet ID]",
                                "rows[7][Species]",
                                "rows[7][Age]",
                                "rows[7][Gender]",
                                "rows[7][Adoption Center]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional list of enchanted forest creatures.\n\nFeature Requirements:\n- Include a first row with column headers: \"Creature Name\", \"Age\", \"Magical Ability\", \"Habitat\", \"Affinity Element\".\n- Ensure that each \"Creature Name\" is unique and occupies the first column.\n- Each \"Age\" entry must be a positive integer representing the creature's age.\n- The \"Magical Ability\" column should contain specific powers such as \"Invisibility\", \"Telepathy\", or \"Healing\".\n- \"Habitat\" must include forest-related settings like \"Ancient Woods\" or \"Mystic Grove\", appearing in the fourth column.\n- \"Affinity Element\" should list elements such as \"Fire\", \"Water\", \"Earth\", or \"Air\" in the fifth column.\n- The CSV should contain exactly 12 rows of creature data, not including the header.\n- Ensure there are no blank rows between entries and each row has exactly 5 comma-separated values.",
            "task_id": "000233",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] - Should equal 'Creature Name' (header)",
                "rows[0][1] - Should equal 'Age' (header)",
                "rows[0][2] - Should equal 'Magical Ability' (header)",
                "rows[0][3] - Should equal 'Habitat' (header)",
                "rows[0][4] - Should equal 'Affinity Element' (header)",
                "rows[1] to rows[12] - Each row must have exactly 5 columns",
                "rows[1..12][0] - Each value must be a unique, non-empty creature name",
                "rows[1..12][1] - Each value must be a positive integer representing age",
                "rows[1..12][2] - Each value must be one of the specific magical abilities (e.g., 'Invisibility', 'Telepathy', 'Healing')",
                "rows[1..12][3] - Each value must be a forest-related habitat (e.g., 'Ancient Woods', 'Mystic Grove')",
                "rows[1..12][4] - Each value must be one of the elements (e.g., 'Fire', 'Water', 'Earth', 'Air')",
                "Total row count (excluding header) must equal 12 (i.e., 13 rows total including header)"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000233_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional list of enchanted forest creatures.\n\nFeature Requirements:\n- Include a first row with column headers: \"Creature Name\", \"Age\", \"Magical Ability\", \"Habitat\", \"Affinity Element\".\n- Ensure that each \"Creature Name\" is unique and occupies the first column.\n- Each \"Age\" entry must be a positive integer representing the creature's age.\n- The \"Magical Ability\" column should contain specific powers such as \"Invisibility\", \"Telepathy\", or \"Healing\".\n- \"Habitat\" must include forest-related settings like \"Ancient Woods\" or \"Mystic Grove\", appearing in the fourth column.\n- \"Affinity Element\" should list elements such as \"Fire\", \"Water\", \"Earth\", or \"Air\" in the fifth column.\n- The CSV should contain exactly 12 rows of creature data, not including the header.\n- Ensure there are no blank rows between entries and each row has exactly 5 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000233_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] - Should equal 'Creature Name' (header)",
                                "rows[0][1] - Should equal 'Age' (header)",
                                "rows[0][2] - Should equal 'Magical Ability' (header)",
                                "rows[0][3] - Should equal 'Habitat' (header)",
                                "rows[0][4] - Should equal 'Affinity Element' (header)",
                                "rows[1] to rows[12] - Each row must have exactly 5 columns",
                                "rows[1..12][0] - Each value must be a unique, non-empty creature name",
                                "rows[1..12][1] - Each value must be a positive integer representing age",
                                "rows[1..12][2] - Each value must be one of the specific magical abilities (e.g., 'Invisibility', 'Telepathy', 'Healing')",
                                "rows[1..12][3] - Each value must be a forest-related habitat (e.g., 'Ancient Woods', 'Mystic Grove')",
                                "rows[1..12][4] - Each value must be one of the elements (e.g., 'Fire', 'Water', 'Earth', 'Air')",
                                "Total row count (excluding header) must equal 12 (i.e., 13 rows total including header)"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of futuristic robots designed for space exploration.\n\nFeature Requirements:\n- The CSV must begin with a header row containing the following columns in order: \"Robot ID\", \"Model Number\", \"Activation Year\", \"Assigned Mission\".\n- \"Robot ID\" should be a unique alphanumeric identifier starting with \"RBT\" followed by a three-digit number.\n- \"Model Number\" must be a string in the format \"X-###\", where \"X\" is an uppercase letter and \"###\" is a three-digit number.\n- \"Activation Year\" must be a four-digit integer between 2050 and 2100.\n- \"Assigned Mission\" should include mission names such as \"Mars Exploration\", \"Lunar Mining\", or \"Asteroid Survey\" and must be realistic space mission descriptions.\n- The CSV output should include exactly 7 rows of robot data, excluding the header row.\n- Ensure that there are no blank lines between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values.",
            "task_id": "000234",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000234_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of futuristic robots designed for space exploration.\n\nFeature Requirements:\n- The CSV must begin with a header row containing the following columns in order: \"Robot ID\", \"Model Number\", \"Activation Year\", \"Assigned Mission\".\n- \"Robot ID\" should be a unique alphanumeric identifier starting with \"RBT\" followed by a three-digit number.\n- \"Model Number\" must be a string in the format \"X-###\", where \"X\" is an uppercase letter and \"###\" is a three-digit number.\n- \"Activation Year\" must be a four-digit integer between 2050 and 2100.\n- \"Assigned Mission\" should include mission names such as \"Mars Exploration\", \"Lunar Mining\", or \"Asteroid Survey\" and must be realistic space mission descriptions.\n- The CSV output should include exactly 7 rows of robot data, excluding the header row.\n- Ensure that there are no blank lines between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000234_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of fictional tech startups.\n\nFeature Requirements:\n- The first row must contain exactly four column headers: \"Startup Name\", \"Year Founded\", \"Founder\", \"HQ City\".\n- \"Startup Name\" should list unique, fictional company names that occupy the first column.\n- \"Year Founded\" must be a four-digit integer (e.g., 1999) and appear in the second column.\n- \"Founder\" should include a realistic full name and must be placed in the third column.\n- \"HQ City\" should list well-known global cities in the fourth column.\n- The CSV output must include exactly 8 rows of startup data in addition to the header row.\n- Every row, including the header, must consist of exactly 4 comma-separated values.\n- No extra blank rows or additional data should be present in the CSV output.",
            "task_id": "000235",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0]",
                "rows[0][1]",
                "rows[0][2]",
                "rows[0][3]",
                "rows[1][0]",
                "rows[1][1]",
                "rows[1][2]",
                "rows[1][3]",
                "rows[2][0]",
                "rows[2][1]",
                "rows[2][2]",
                "rows[2][3]",
                "rows[3][0]",
                "rows[3][1]",
                "rows[3][2]",
                "rows[3][3]",
                "rows[4][0]",
                "rows[4][1]",
                "rows[4][2]",
                "rows[4][3]",
                "rows[5][0]",
                "rows[5][1]",
                "rows[5][2]",
                "rows[5][3]",
                "rows[6][0]",
                "rows[6][1]",
                "rows[6][2]",
                "rows[6][3]",
                "rows[7][0]",
                "rows[7][1]",
                "rows[7][2]",
                "rows[7][3]",
                "rows[8][0]",
                "rows[8][1]",
                "rows[8][2]",
                "rows[8][3]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000235_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of fictional tech startups.\n\nFeature Requirements:\n- The first row must contain exactly four column headers: \"Startup Name\", \"Year Founded\", \"Founder\", \"HQ City\".\n- \"Startup Name\" should list unique, fictional company names that occupy the first column.\n- \"Year Founded\" must be a four-digit integer (e.g., 1999) and appear in the second column.\n- \"Founder\" should include a realistic full name and must be placed in the third column.\n- \"HQ City\" should list well-known global cities in the fourth column.\n- The CSV output must include exactly 8 rows of startup data in addition to the header row.\n- Every row, including the header, must consist of exactly 4 comma-separated values.\n- No extra blank rows or additional data should be present in the CSV output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000235_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0]",
                                "rows[0][1]",
                                "rows[0][2]",
                                "rows[0][3]",
                                "rows[1][0]",
                                "rows[1][1]",
                                "rows[1][2]",
                                "rows[1][3]",
                                "rows[2][0]",
                                "rows[2][1]",
                                "rows[2][2]",
                                "rows[2][3]",
                                "rows[3][0]",
                                "rows[3][1]",
                                "rows[3][2]",
                                "rows[3][3]",
                                "rows[4][0]",
                                "rows[4][1]",
                                "rows[4][2]",
                                "rows[4][3]",
                                "rows[5][0]",
                                "rows[5][1]",
                                "rows[5][2]",
                                "rows[5][3]",
                                "rows[6][0]",
                                "rows[6][1]",
                                "rows[6][2]",
                                "rows[6][3]",
                                "rows[7][0]",
                                "rows[7][1]",
                                "rows[7][2]",
                                "rows[7][3]",
                                "rows[8][0]",
                                "rows[8][1]",
                                "rows[8][2]",
                                "rows[8][3]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a list of enchanted forest creatures with detailed attributes.\n\nFeature Requirements:\n- Include a header row with exactly five columns: \"Creature Name\", \"Species\", \"Magical Ability\", \"Habitat\", \"Strength Level\".\n- Each \"Creature Name\" entry must be unique and placed in the first column.\n- The \"Species\" column should include predefined types such as \"Elf\", \"Orc\", \"Fairy\", \"Gnome\", or \"Dragon\".\n- The \"Magical Ability\" column must describe a single-word power like \"Invisibility\", \"Healing\", or \"Shapeshifting\".\n- The \"Habitat\" column should contain one of these specific locations: \"Forest\", \"Cave\", or \"Mountain\".\n- The \"Strength Level\" column should include an integer value between 1 and 100.\n- The CSV must contain exactly 12 rows of creature data, following the header row.\n- Ensure that each row has exactly five comma-separated values with no extra spaces or blank lines.",
            "task_id": "000236",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000236_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a list of enchanted forest creatures with detailed attributes.\n\nFeature Requirements:\n- Include a header row with exactly five columns: \"Creature Name\", \"Species\", \"Magical Ability\", \"Habitat\", \"Strength Level\".\n- Each \"Creature Name\" entry must be unique and placed in the first column.\n- The \"Species\" column should include predefined types such as \"Elf\", \"Orc\", \"Fairy\", \"Gnome\", or \"Dragon\".\n- The \"Magical Ability\" column must describe a single-word power like \"Invisibility\", \"Healing\", or \"Shapeshifting\".\n- The \"Habitat\" column should contain one of these specific locations: \"Forest\", \"Cave\", or \"Mountain\".\n- The \"Strength Level\" column should include an integer value between 1 and 100.\n- The CSV must contain exactly 12 rows of creature data, following the header row.\n- Ensure that each row has exactly five comma-separated values with no extra spaces or blank lines."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000236_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the provided narrative about enchanted relics into a CSV representation of a fictional relic catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Relic Name\", \"Mythical Origin\", \"Mystic Power Level\", \"Historical Period\".\n- Ensure all relic names are unique and appear in the first column under the \"Relic Name\" header.\n- Each \"Mystic Power Level\" must be a positive integer, occupying the third column.\n- The \"Mythical Origin\" column should include names such as \"Celtic\", \"Egyptian\", \"Sumerian\", etc.\n- \"Historical Period\" should list one of the following exactly: \"Ancient\", \"Medieval\", \"Renaissance\", \"Modern\" in the fourth column.\n- The CSV should contain exactly 9 rows of data, including the header row.\n- Each row, including the header, should have exactly 4 comma-separated values.\n- No blank rows should appear between any entries.\n- Every relic entry must be supported by random creative details that do not repeat.",
            "task_id": "000237",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][0] == 'Relic Name'",
                "rows[0][1] == 'Mythical Origin'",
                "rows[0][2] == 'Mystic Power Level'",
                "rows[0][3] == 'Historical Period'",
                "rows[*][0]  // Each relic name must be present and unique",
                "rows[*][1]  // Must be one of the allowed origins (e.g., 'Celtic', 'Egyptian', 'Sumerian', etc.)",
                "rows[*][2]  // Must be a positive integer representing Mystic Power Level",
                "rows[*][3]  // Must be exactly one of: 'Ancient', 'Medieval', 'Renaissance', 'Modern'",
                "Total row count == 9  // Exactly 9 rows including the header",
                "Each row must contain exactly 4 comma-separated values"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000237_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the provided narrative about enchanted relics into a CSV representation of a fictional relic catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Relic Name\", \"Mythical Origin\", \"Mystic Power Level\", \"Historical Period\".\n- Ensure all relic names are unique and appear in the first column under the \"Relic Name\" header.\n- Each \"Mystic Power Level\" must be a positive integer, occupying the third column.\n- The \"Mythical Origin\" column should include names such as \"Celtic\", \"Egyptian\", \"Sumerian\", etc.\n- \"Historical Period\" should list one of the following exactly: \"Ancient\", \"Medieval\", \"Renaissance\", \"Modern\" in the fourth column.\n- The CSV should contain exactly 9 rows of data, including the header row.\n- Each row, including the header, should have exactly 4 comma-separated values.\n- No blank rows should appear between any entries.\n- Every relic entry must be supported by random creative details that do not repeat."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000237_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][0] == 'Relic Name'",
                                "rows[0][1] == 'Mythical Origin'",
                                "rows[0][2] == 'Mystic Power Level'",
                                "rows[0][3] == 'Historical Period'",
                                "rows[*][0]  // Each relic name must be present and unique",
                                "rows[*][1]  // Must be one of the allowed origins (e.g., 'Celtic', 'Egyptian', 'Sumerian', etc.)",
                                "rows[*][2]  // Must be a positive integer representing Mystic Power Level",
                                "rows[*][3]  // Must be exactly one of: 'Ancient', 'Medieval', 'Renaissance', 'Modern'",
                                "Total row count == 9  // Exactly 9 rows including the header",
                                "Each row must contain exactly 4 comma-separated values"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an intergalactic spaceship fleet.\n\nFeature Requirements:\n- Include a first row with column headers: \"Ship Name\", \"Engine Type\", \"Captain\", \"Crew Size\", \"Planet of Origin\".\n- Each spaceship name in the first column must be unique and reflect futuristic or fantastical naming.\n- The \"Engine Type\" column should only contain one of the following values: \"Ion\", \"Warp\", \"Fusion\", or \"Antimatter\".\n- For the \"Captain\" column, provide a plausible human name in each row.\n- \"Crew Size\" must be a positive integer indicating the number of crew members.\n- The \"Planet of Origin\" column should list names of planets, drawing from both real-world and fictional settings.\n- The CSV must consist of exactly 8 rows in total, including the header row.\n- Ensure there are no blank rows or extra spaces; each row must have exactly 5 comma-separated values.\n- The output should exclusively contain the CSV content with no additional text or formatting.",
            "task_id": "000238",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000238_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an intergalactic spaceship fleet.\n\nFeature Requirements:\n- Include a first row with column headers: \"Ship Name\", \"Engine Type\", \"Captain\", \"Crew Size\", \"Planet of Origin\".\n- Each spaceship name in the first column must be unique and reflect futuristic or fantastical naming.\n- The \"Engine Type\" column should only contain one of the following values: \"Ion\", \"Warp\", \"Fusion\", or \"Antimatter\".\n- For the \"Captain\" column, provide a plausible human name in each row.\n- \"Crew Size\" must be a positive integer indicating the number of crew members.\n- The \"Planet of Origin\" column should list names of planets, drawing from both real-world and fictional settings.\n- The CSV must consist of exactly 8 rows in total, including the header row.\n- Ensure there are no blank rows or extra spaces; each row must have exactly 5 comma-separated values.\n- The output should exclusively contain the CSV content with no additional text or formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000238_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of futuristic vehicle profiles.\n\nFeature Requirements:\n- Include a first row with column headers: \"Vehicle Model\", \"Year\", \"Type\", \"Manufacturer\".\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- The \"Year\" column should contain a 4-digit number representing the model year for each vehicle.\n- The \"Type\" column must have one of these exact entries: \"Electric\", \"Hybrid\", \"Gasoline\", \"Autonomous\".\n- The \"Manufacturer\" column should list a fictional tech company name that sounds modern.\n- The CSV should include exactly 8 rows of vehicle data, not counting the header row.\n- There should be no extra spaces around the commas or any blank rows between the entries.\n- Ensure that each row contains exactly 4 comma-separated values corresponding to the headers.",
            "task_id": "000239",
            "task_name": "Text to CSV",
            "input_type": "Text",
            "output_type": "CSV",
            "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Vehicle Model]",
                "rows[0][Year]",
                "rows[0][Type]",
                "rows[0][Manufacturer]",
                "rows[1][Vehicle Model]",
                "rows[1][Year]",
                "rows[1][Type]",
                "rows[1][Manufacturer]",
                "rows[2][Vehicle Model]",
                "rows[2][Year]",
                "rows[2][Type]",
                "rows[2][Manufacturer]",
                "rows[3][Vehicle Model]",
                "rows[3][Year]",
                "rows[3][Type]",
                "rows[3][Manufacturer]",
                "rows[4][Vehicle Model]",
                "rows[4][Year]",
                "rows[4][Type]",
                "rows[4][Manufacturer]",
                "rows[5][Vehicle Model]",
                "rows[5][Year]",
                "rows[5][Type]",
                "rows[5][Manufacturer]",
                "rows[6][Vehicle Model]",
                "rows[6][Year]",
                "rows[6][Type]",
                "rows[6][Manufacturer]",
                "rows[7][Vehicle Model]",
                "rows[7][Year]",
                "rows[7][Type]",
                "rows[7][Manufacturer]",
                "rows[8][Vehicle Model]",
                "rows[8][Year]",
                "rows[8][Type]",
                "rows[8][Manufacturer]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000239_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of futuristic vehicle profiles.\n\nFeature Requirements:\n- Include a first row with column headers: \"Vehicle Model\", \"Year\", \"Type\", \"Manufacturer\".\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- The \"Year\" column should contain a 4-digit number representing the model year for each vehicle.\n- The \"Type\" column must have one of these exact entries: \"Electric\", \"Hybrid\", \"Gasoline\", \"Autonomous\".\n- The \"Manufacturer\" column should list a fictional tech company name that sounds modern.\n- The CSV should include exactly 8 rows of vehicle data, not counting the header row.\n- There should be no extra spaces around the commas or any blank rows between the entries.\n- Ensure that each row contains exactly 4 comma-separated values corresponding to the headers."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000239_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Vehicle Model]",
                                "rows[0][Year]",
                                "rows[0][Type]",
                                "rows[0][Manufacturer]",
                                "rows[1][Vehicle Model]",
                                "rows[1][Year]",
                                "rows[1][Type]",
                                "rows[1][Manufacturer]",
                                "rows[2][Vehicle Model]",
                                "rows[2][Year]",
                                "rows[2][Type]",
                                "rows[2][Manufacturer]",
                                "rows[3][Vehicle Model]",
                                "rows[3][Year]",
                                "rows[3][Type]",
                                "rows[3][Manufacturer]",
                                "rows[4][Vehicle Model]",
                                "rows[4][Year]",
                                "rows[4][Type]",
                                "rows[4][Manufacturer]",
                                "rows[5][Vehicle Model]",
                                "rows[5][Year]",
                                "rows[5][Type]",
                                "rows[5][Manufacturer]",
                                "rows[6][Vehicle Model]",
                                "rows[6][Year]",
                                "rows[6][Type]",
                                "rows[6][Manufacturer]",
                                "rows[7][Vehicle Model]",
                                "rows[7][Year]",
                                "rows[7][Type]",
                                "rows[7][Manufacturer]",
                                "rows[8][Vehicle Model]",
                                "rows[8][Year]",
                                "rows[8][Type]",
                                "rows[8][Manufacturer]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]