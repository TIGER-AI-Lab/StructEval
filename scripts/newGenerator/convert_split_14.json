[
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nworld:\n  name: \"Eldoria\"\n  time: \"Dawn\"\n  description: \"A mystical realm filled with ancient magic and diverse landscapes.\"\n\nlocations:\n  - name: \"Silverwood\"\n    type: \"forest\"\n    features:\n      - \"dense trees\"\n      - \"whispering winds\"\n      - \"hidden ruins\"\n  - name: \"Crimson Peaks\"\n    type: \"mountain\"\n    features:\n      - \"rugged terrain\"\n      - \"volcanic vents\"\n      - \"treacherous cliffs\"\n\ncharacters:\n  heroes:\n    - id: 101\n      name: \"Aria Swiftblade\"\n      role: \"warrior\"\n      skills:\n        - \"sword combat\"\n        - \"strategy\"\n    - id: 102\n      name: \"Lorin Moonshadow\"\n      role: \"mage\"\n      skills:\n        - \"elemental magic\"\n        - \"teleportation\"\n  villains:\n    - id: 201\n      name: \"Drazhan the Dark\"\n      role: \"sorcerer\"\n      skills:\n        - \"necromancy\"\n        - \"illusion\"\n\nitems:\n  weapons:\n    - name: \"Eclipse Dagger\"\n      type: \"blade\"\n      damage: 45\n    - name: \"Ancient Staff\"\n      type: \"staff\"\n      damage: 30\n  artifacts:\n    - name: \"Orb of Eternity\"\n      power: \"time manipulation\"\n      origin: \"lost dynasty\"\n  potions:\n    - name: \"Healing Elixir\"\n      effect: \"restores health\"\n      quantity: 5\n\nquests:\n  - id: Q001\n    title: \"Rescue the Lost Envoy\"\n    objectives:\n      - \"Locate the missing envoy in Silverwood.\"\n      - \"Defeat bandits along the forest paths.\"\n      - \"Escort the envoy safely back to town.\"\n    rewards:\n      experience: 250\n      items:\n        - \"Healing Elixir\"\n        - \"Eclipse Dagger\"\n  - id: Q002\n    title: \"Unravel the Crimson Curse\"\n    objectives:\n      - \"Explore Crimson Peaks to find the source of the curse.\"\n      - \"Collect ancient relics.\"\n      - \"Perform a ritual to break the curse.\"\n    rewards:\n      experience: 350\n      items:\n        - \"Ancient Staff\"\n        - \"Orb of Eternity\"\n</code>",
            "feature_requirements": "• The output must be in JSON format and represent the original YAML structure, including top-level keys: world, locations, characters, items, and quests.  \n• The JSON must include a \"world\" object with string keys \"name\", \"time\", and \"description\" corresponding to the given values.  \n• The JSON must include a \"locations\" array where each element is an object containing \"name\", \"type\", and a \"features\" array with the specified strings.  \n• The JSON must include a \"characters\" object that has two arrays: \"heroes\" and \"villains\". Each object in these arrays must contain an \"id\" (number), \"name\" (string), \"role\" (string), and a \"skills\" array with the provided skills.  \n• The JSON must include an \"items\" object with sub-arrays for \"weapons\", \"artifacts\", and \"potions\". Each entry in these arrays must contain the corresponding keys (\"name\", \"type\", and \"damage\" for weapons; \"name\", \"power\", and \"origin\" for artifacts; \"name\", \"effect\", and \"quantity\" for potions) with correct data types.  \n• The JSON must include a \"quests\" array where each quest is an object with an \"id\" (string), \"title\" (string), an \"objectives\" array (list of strings), and a \"rewards\" object containing \"experience\" (number) and an \"items\" array (list of strings).  \n• All string, numeric, and list values must accurately reflect the values and structure provided in the YAML input.",
            "task_id": "180514",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "world[name]",
                "world[time]",
                "world[description]",
                "locations",
                "locations[][name]",
                "locations[][type]",
                "locations[][features]",
                "characters",
                "characters[heroes]",
                "characters[heroes][][id]",
                "characters[heroes][][name]",
                "characters[heroes][][role]",
                "characters[heroes][][skills]",
                "characters[villains]",
                "characters[villains][][id]",
                "characters[villains][][name]",
                "characters[villains][][role]",
                "characters[villains][][skills]",
                "items",
                "items[weapons]",
                "items[weapons][][name]",
                "items[weapons][][type]",
                "items[weapons][][damage]",
                "items[artifacts]",
                "items[artifacts][][name]",
                "items[artifacts][][power]",
                "items[artifacts][][origin]",
                "items[potions]",
                "items[potions][][name]",
                "items[potions][][effect]",
                "items[potions][][quantity]",
                "quests",
                "quests[][id]",
                "quests[][title]",
                "quests[][objectives]",
                "quests[][rewards]",
                "quests[][rewards][experience]",
                "quests[][rewards][items]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180514_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nworld:\n  name: \"Eldoria\"\n  time: \"Dawn\"\n  description: \"A mystical realm filled with ancient magic and diverse landscapes.\"\n\nlocations:\n  - name: \"Silverwood\"\n    type: \"forest\"\n    features:\n      - \"dense trees\"\n      - \"whispering winds\"\n      - \"hidden ruins\"\n  - name: \"Crimson Peaks\"\n    type: \"mountain\"\n    features:\n      - \"rugged terrain\"\n      - \"volcanic vents\"\n      - \"treacherous cliffs\"\n\ncharacters:\n  heroes:\n    - id: 101\n      name: \"Aria Swiftblade\"\n      role: \"warrior\"\n      skills:\n        - \"sword combat\"\n        - \"strategy\"\n    - id: 102\n      name: \"Lorin Moonshadow\"\n      role: \"mage\"\n      skills:\n        - \"elemental magic\"\n        - \"teleportation\"\n  villains:\n    - id: 201\n      name: \"Drazhan the Dark\"\n      role: \"sorcerer\"\n      skills:\n        - \"necromancy\"\n        - \"illusion\"\n\nitems:\n  weapons:\n    - name: \"Eclipse Dagger\"\n      type: \"blade\"\n      damage: 45\n    - name: \"Ancient Staff\"\n      type: \"staff\"\n      damage: 30\n  artifacts:\n    - name: \"Orb of Eternity\"\n      power: \"time manipulation\"\n      origin: \"lost dynasty\"\n  potions:\n    - name: \"Healing Elixir\"\n      effect: \"restores health\"\n      quantity: 5\n\nquests:\n  - id: Q001\n    title: \"Rescue the Lost Envoy\"\n    objectives:\n      - \"Locate the missing envoy in Silverwood.\"\n      - \"Defeat bandits along the forest paths.\"\n      - \"Escort the envoy safely back to town.\"\n    rewards:\n      experience: 250\n      items:\n        - \"Healing Elixir\"\n        - \"Eclipse Dagger\"\n  - id: Q002\n    title: \"Unravel the Crimson Curse\"\n    objectives:\n      - \"Explore Crimson Peaks to find the source of the curse.\"\n      - \"Collect ancient relics.\"\n      - \"Perform a ritual to break the curse.\"\n    rewards:\n      experience: 350\n      items:\n        - \"Ancient Staff\"\n        - \"Orb of Eternity\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180514_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "world[name]",
                                "world[time]",
                                "world[description]",
                                "locations",
                                "locations[][name]",
                                "locations[][type]",
                                "locations[][features]",
                                "characters",
                                "characters[heroes]",
                                "characters[heroes][][id]",
                                "characters[heroes][][name]",
                                "characters[heroes][][role]",
                                "characters[heroes][][skills]",
                                "characters[villains]",
                                "characters[villains][][id]",
                                "characters[villains][][name]",
                                "characters[villains][][role]",
                                "characters[villains][][skills]",
                                "items",
                                "items[weapons]",
                                "items[weapons][][name]",
                                "items[weapons][][type]",
                                "items[weapons][][damage]",
                                "items[artifacts]",
                                "items[artifacts][][name]",
                                "items[artifacts][][power]",
                                "items[artifacts][][origin]",
                                "items[potions]",
                                "items[potions][][name]",
                                "items[potions][][effect]",
                                "items[potions][][quantity]",
                                "quests",
                                "quests[][id]",
                                "quests[][title]",
                                "quests[][objectives]",
                                "quests[][rewards]",
                                "quests[][rewards][experience]",
                                "quests[][rewards][items]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nversion: \"1.2\"\nmetadata:\n  created: \"2023-10-12\"\n  updated: \"2023-10-12T14:30:00Z\"\n  author: \"DataConversionTool\"\nsettings:\n  theme: \"light\"\n  notifications: true\n  language: \"en\"\nusers:\n  - id: 101\n    name: \"Alice Johnson\"\n    roles:\n      - admin\n      - editor\n    email: \"alice.johnson@example.com\"\n  - id: 102\n    name: \"Bob Smith\"\n    roles:\n      - viewer\n    email: \"bob.smith@example.com\"\nlogs:\n  errors:\n    - code: E001\n      message: \"Unauthorized entry attempt\"\n      timestamp: \"2023-10-12T08:25:00Z\"\n    - code: E002\n      message: \"Data mismatch in conversion\"\n      timestamp: \"2023-10-12T10:15:00Z\"\n  warnings:\n    - code: W001\n      message: \"Deprecated field used\"\n      timestamp: \"2023-10-12T11:45:00Z\"\n</code>",
            "feature_requirements": "• The output must represent the overall structure as key-value pairs corresponding to sections: version, metadata, settings, users, and logs.  \n• Under metadata, the output must include keys for created, updated, and author with their respective string timestamp and string values.  \n• Under settings, the output must have keys for theme, notifications, and language with their respective values (a string for theme and language, a boolean for notifications).  \n• The users section must be represented as an array, where each user object includes the keys id, name, roles, and email; roles must be an array of strings.  \n• The logs section must be divided into errors and warnings, each represented as an array containing objects.  \n• Each error object in logs must have keys for code, message, and timestamp with values corresponding to a string code, a descriptive string message, and a timestamp string.  \n• Each warning object in logs must have keys for code, message, and timestamp with values corresponding to a string code, a descriptive string message, and a timestamp string.",
            "task_id": "180515",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "version",
                "metadata[created]",
                "metadata[updated]",
                "metadata[author]",
                "settings[theme]",
                "settings[notifications]",
                "settings[language]",
                "users[][id]",
                "users[][name]",
                "users[][roles]",
                "users[][email]",
                "logs[errors][][code]",
                "logs[errors][][message]",
                "logs[errors][][timestamp]",
                "logs[warnings][][code]",
                "logs[warnings][][message]",
                "logs[warnings][][timestamp]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180515_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nversion: \"1.2\"\nmetadata:\n  created: \"2023-10-12\"\n  updated: \"2023-10-12T14:30:00Z\"\n  author: \"DataConversionTool\"\nsettings:\n  theme: \"light\"\n  notifications: true\n  language: \"en\"\nusers:\n  - id: 101\n    name: \"Alice Johnson\"\n    roles:\n      - admin\n      - editor\n    email: \"alice.johnson@example.com\"\n  - id: 102\n    name: \"Bob Smith\"\n    roles:\n      - viewer\n    email: \"bob.smith@example.com\"\nlogs:\n  errors:\n    - code: E001\n      message: \"Unauthorized entry attempt\"\n      timestamp: \"2023-10-12T08:25:00Z\"\n    - code: E002\n      message: \"Data mismatch in conversion\"\n      timestamp: \"2023-10-12T10:15:00Z\"\n  warnings:\n    - code: W001\n      message: \"Deprecated field used\"\n      timestamp: \"2023-10-12T11:45:00Z\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180515_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "version",
                                "metadata[created]",
                                "metadata[updated]",
                                "metadata[author]",
                                "settings[theme]",
                                "settings[notifications]",
                                "settings[language]",
                                "users[][id]",
                                "users[][name]",
                                "users[][roles]",
                                "users[][email]",
                                "logs[errors][][code]",
                                "logs[errors][][message]",
                                "logs[errors][][timestamp]",
                                "logs[warnings][][code]",
                                "logs[warnings][][message]",
                                "logs[warnings][][timestamp]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nitinerary:\n  title: \"Summer Europe Trip\"\n  start_date: \"2024-06-15\"\n  end_date: \"2024-07-05\"\n  destinations:\n    - city: \"Paris\"\n      country: \"France\"\n      activities:\n        - \"Visit the Louvre\"\n        - \"Evening Seine cruise\"\n    - city: \"Rome\"\n      country: \"Italy\"\n      activities:\n        - \"Tour the Colosseum\"\n        - \"Explore the Vatican Museums\"\naccommodations:\n  - name: \"Parisian Hotel\"\n    address: \"123 Rue de Lafayette, Paris\"\n    rating: 4.5\n  - name: \"Roman Suites\"\n    address: \"Via Nazionale 45, Rome\"\n    rating: 4.2\ntransportation:\n  flights:\n    - flight_number: \"AF123\"\n      departure: \"2024-06-15T08:30\"\n      arrival: \"2024-06-15T10:45\"\n      airline: \"Air France\"\n    - flight_number: \"AZ456\"\n      departure: \"2024-07-05T15:00\"\n      arrival: \"2024-07-05T18:20\"\n      airline: \"Alitalia\"\nbudget:\n  total: 3500\n  currency: \"EUR\"\n  allocations:\n    accommodations: 1500\n    flights: 800\n    activities: 700\n    misc: 500\n</code>",
            "feature_requirements": "• The JSON output must have four top-level objects: itinerary, accommodations, transportation, and budget.  \n• The itinerary object must include the keys: title, start_date, end_date, and destinations.  \n• The destinations value under itinerary must be an array of objects, each object containing the keys: city, country, and activities (with activities being an array of strings).  \n• The accommodations key must map to an array of objects, each with the keys: name, address, and rating (with rating being a numerical value).  \n• The transportation object must include a key named flights, which maps to an array of flight objects that each contain: flight_number, departure, arrival, and airline.  \n• The budget object must include the keys: total, currency, and allocations.  \n• The allocations key under budget must map to an object with numeric values for the keys: accommodations, flights, activities, and misc.",
            "task_id": "180516",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[title]",
                "itinerary[start_date]",
                "itinerary[end_date]",
                "itinerary[destinations]",
                "itinerary[destinations][*][city]",
                "itinerary[destinations][*][country]",
                "itinerary[destinations][*][activities]",
                "accommodations",
                "accommodations[*][name]",
                "accommodations[*][address]",
                "accommodations[*][rating]",
                "transportation",
                "transportation[flights]",
                "transportation[flights][*][flight_number]",
                "transportation[flights][*][departure]",
                "transportation[flights][*][arrival]",
                "transportation[flights][*][airline]",
                "budget",
                "budget[total]",
                "budget[currency]",
                "budget[allocations]",
                "budget[allocations][accommodations]",
                "budget[allocations][flights]",
                "budget[allocations][activities]",
                "budget[allocations][misc]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180516_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nitinerary:\n  title: \"Summer Europe Trip\"\n  start_date: \"2024-06-15\"\n  end_date: \"2024-07-05\"\n  destinations:\n    - city: \"Paris\"\n      country: \"France\"\n      activities:\n        - \"Visit the Louvre\"\n        - \"Evening Seine cruise\"\n    - city: \"Rome\"\n      country: \"Italy\"\n      activities:\n        - \"Tour the Colosseum\"\n        - \"Explore the Vatican Museums\"\naccommodations:\n  - name: \"Parisian Hotel\"\n    address: \"123 Rue de Lafayette, Paris\"\n    rating: 4.5\n  - name: \"Roman Suites\"\n    address: \"Via Nazionale 45, Rome\"\n    rating: 4.2\ntransportation:\n  flights:\n    - flight_number: \"AF123\"\n      departure: \"2024-06-15T08:30\"\n      arrival: \"2024-06-15T10:45\"\n      airline: \"Air France\"\n    - flight_number: \"AZ456\"\n      departure: \"2024-07-05T15:00\"\n      arrival: \"2024-07-05T18:20\"\n      airline: \"Alitalia\"\nbudget:\n  total: 3500\n  currency: \"EUR\"\n  allocations:\n    accommodations: 1500\n    flights: 800\n    activities: 700\n    misc: 500\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180516_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[title]",
                                "itinerary[start_date]",
                                "itinerary[end_date]",
                                "itinerary[destinations]",
                                "itinerary[destinations][*][city]",
                                "itinerary[destinations][*][country]",
                                "itinerary[destinations][*][activities]",
                                "accommodations",
                                "accommodations[*][name]",
                                "accommodations[*][address]",
                                "accommodations[*][rating]",
                                "transportation",
                                "transportation[flights]",
                                "transportation[flights][*][flight_number]",
                                "transportation[flights][*][departure]",
                                "transportation[flights][*][arrival]",
                                "transportation[flights][*][airline]",
                                "budget",
                                "budget[total]",
                                "budget[currency]",
                                "budget[allocations]",
                                "budget[allocations][accommodations]",
                                "budget[allocations][flights]",
                                "budget[allocations][activities]",
                                "budget[allocations][misc]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject: \"Ambient Workspace\"\nmetadata:\n  created_by: \"Alice Johnson\"\n  created_date: \"2023-10-05\"\n  tags:\n    - \"software\"\n    - \"YAML\"\n    - \"data_conversion\"\ncontributors:\n  - name: \"Alice Johnson\"\n    role: \"Developer\"\n    email: \"alice@example.com\"\n  - name: \"Bob Smith\"\n    role: \"Designer\"\n    email: \"bob@example.com\"\ntasks:\n  - id: 101\n    title: \"Set up project repository\"\n    status: \"completed\"\n  - id: 102\n    title: \"Write documentation\"\n    status: \"in_progress\"\nsettings:\n  environment: \"production\"\n  debug: false\n  features:\n    - name: \"authentication\"\n      enabled: true\n    - name: \"analytics\"\n      enabled: false\n</code>",
            "feature_requirements": "• The converted output must have a top-level object with the keys: project, metadata, contributors, tasks, and settings.\n• The JSON must include a \"project\" key with the string value \"Ambient Workspace\".\n• Under \"metadata\", there must be keys \"created_by\", \"created_date\", and \"tags\", where \"tags\" is an array containing the strings \"software\", \"YAML\", and \"data_conversion\".\n• The output must include a \"contributors\" key with an array of objects. Each object must have the keys \"name\", \"role\", and \"email\" with their corresponding values.\n• The \"tasks\" key should contain an array of objects, each with keys \"id\", \"title\", and \"status\". The values must reflect 101 and 102 for ids with their corresponding titles and statuses.\n• The output must contain a \"settings\" key holding an object with keys \"environment\", \"debug\", and \"features\".\n• Within the \"settings\" object, the key \"environment\" must have the string value \"production\", and \"debug\" must be a boolean false.\n• The \"features\" key under \"settings\" must be an array of objects, each with keys \"name\" and \"enabled\", where \"enabled\" values are booleans matching the input.\n• All values must preserve their data types (e.g., strings as strings, numbers as numbers, booleans as booleans) as specified in the original YAML code.",
            "task_id": "180517",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project",
                "metadata[created_by]",
                "metadata[created_date]",
                "metadata[tags]",
                "contributors[].name",
                "contributors[].role",
                "contributors[].email",
                "tasks[].id",
                "tasks[].title",
                "tasks[].status",
                "settings[environment]",
                "settings[debug]",
                "settings[features]",
                "settings[features][].name",
                "settings[features][].enabled"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180517_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject: \"Ambient Workspace\"\nmetadata:\n  created_by: \"Alice Johnson\"\n  created_date: \"2023-10-05\"\n  tags:\n    - \"software\"\n    - \"YAML\"\n    - \"data_conversion\"\ncontributors:\n  - name: \"Alice Johnson\"\n    role: \"Developer\"\n    email: \"alice@example.com\"\n  - name: \"Bob Smith\"\n    role: \"Designer\"\n    email: \"bob@example.com\"\ntasks:\n  - id: 101\n    title: \"Set up project repository\"\n    status: \"completed\"\n  - id: 102\n    title: \"Write documentation\"\n    status: \"in_progress\"\nsettings:\n  environment: \"production\"\n  debug: false\n  features:\n    - name: \"authentication\"\n      enabled: true\n    - name: \"analytics\"\n      enabled: false\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180517_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project",
                                "metadata[created_by]",
                                "metadata[created_date]",
                                "metadata[tags]",
                                "contributors[].name",
                                "contributors[].role",
                                "contributors[].email",
                                "tasks[].id",
                                "tasks[].title",
                                "tasks[].status",
                                "settings[environment]",
                                "settings[debug]",
                                "settings[features]",
                                "settings[features][].name",
                                "settings[features][].enabled"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nbusiness_info:\n  name: \"Acme Corporation\"\n  established: 1998\n  departments:\n    - name: \"Engineering\"\n      employees: 120\n      projects:\n        - name: \"Platform Development\"\n          status: \"active\"\n        - name: \"Infrastructure Modernization\"\n          status: \"planned\"\n    - name: \"Marketing\"\n      employees: 40\n      projects:\n        - name: \"Brand Revamp\"\n          status: \"active\"\n        - name: \"Digital Outreach\"\n          status: \"completed\"\n\noffice_locations:\n  headquarters: \"New York\"\n  branch_offices:\n    - city: \"Los Angeles\"\n      manager: \"Alice Johnson\"\n    - city: \"Chicago\"\n      manager: \"Robert Brown\"\n\nkey_metrics:\n  revenue: 10250000\n  employee_count: 200\n  growth_rate: 0.08\n\nmetadata:\n  version: \"1.0\"\n  last_updated: \"2023-09-20\"\n</code>",
            "feature_requirements": "- The output JSON must include a top-level key for \"business_info\" containing business-related details.\n- Under \"business_info,\" there should be keys for \"name\" (a string), \"established\" (a number), and \"departments\" (a list).\n- Each entry in the \"departments\" list must include \"name\" (a string), \"employees\" (a number), and \"projects\" (a list).\n- Each entry in the \"projects\" list within a department must include \"name\" (a string) and \"status\" (a string).\n- The JSON must include a top-level key for \"office_locations\" with a sub-key \"headquarters\" (a string) and \"branch_offices\" (a list).\n- Each entry in the \"branch_offices\" list must contain \"city\" (a string) and \"manager\" (a string).\n- There must be a top-level key for \"key_metrics\" containing \"revenue\" (a number), \"employee_count\" (a number), and \"growth_rate\" (a number).\n- The JSON must also include a top-level key for \"metadata\" with keys \"version\" (a string) and \"last_updated\" (a string that represents a date).",
            "task_id": "180518",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "business_info",
                "business_info[name]",
                "business_info[established]",
                "business_info[departments]",
                "business_info[departments][*][name]",
                "business_info[departments][*][employees]",
                "business_info[departments][*][projects]",
                "business_info[departments][*][projects][*][name]",
                "business_info[departments][*][projects][*][status]",
                "office_locations",
                "office_locations[headquarters]",
                "office_locations[branch_offices]",
                "office_locations[branch_offices][*][city]",
                "office_locations[branch_offices][*][manager]",
                "key_metrics",
                "key_metrics[revenue]",
                "key_metrics[employee_count]",
                "key_metrics[growth_rate]",
                "metadata",
                "metadata[version]",
                "metadata[last_updated]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180518_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nbusiness_info:\n  name: \"Acme Corporation\"\n  established: 1998\n  departments:\n    - name: \"Engineering\"\n      employees: 120\n      projects:\n        - name: \"Platform Development\"\n          status: \"active\"\n        - name: \"Infrastructure Modernization\"\n          status: \"planned\"\n    - name: \"Marketing\"\n      employees: 40\n      projects:\n        - name: \"Brand Revamp\"\n          status: \"active\"\n        - name: \"Digital Outreach\"\n          status: \"completed\"\n\noffice_locations:\n  headquarters: \"New York\"\n  branch_offices:\n    - city: \"Los Angeles\"\n      manager: \"Alice Johnson\"\n    - city: \"Chicago\"\n      manager: \"Robert Brown\"\n\nkey_metrics:\n  revenue: 10250000\n  employee_count: 200\n  growth_rate: 0.08\n\nmetadata:\n  version: \"1.0\"\n  last_updated: \"2023-09-20\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180518_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "business_info",
                                "business_info[name]",
                                "business_info[established]",
                                "business_info[departments]",
                                "business_info[departments][*][name]",
                                "business_info[departments][*][employees]",
                                "business_info[departments][*][projects]",
                                "business_info[departments][*][projects][*][name]",
                                "business_info[departments][*][projects][*][status]",
                                "office_locations",
                                "office_locations[headquarters]",
                                "office_locations[branch_offices]",
                                "office_locations[branch_offices][*][city]",
                                "office_locations[branch_offices][*][manager]",
                                "key_metrics",
                                "key_metrics[revenue]",
                                "key_metrics[employee_count]",
                                "key_metrics[growth_rate]",
                                "metadata",
                                "metadata[version]",
                                "metadata[last_updated]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"Cafe Mosaic\"\n  location:\n    address: \"123 Maple Street\"\n    city: \"Springfield\"\n    country: \"USA\"\n  menu:\n    - category: \"Breakfast\"\n      items:\n        - name: \"Pancakes\"\n          price: 7.50\n        - name: \"Omelette\"\n          price: 6.00\n    - category: \"Lunch\"\n      items:\n        - name: \"Burger\"\n          price: 8.00\n        - name: \"Salad\"\n          price: 5.50\n  staff:\n    manager: \"Samantha\"\n    chefs:\n      - \"John\"\n      - \"Lucas\"\n      - \"Mia\"\n    waiters:\n      - name: \"Eve\"\n        experience: 5\n      - name: \"Mark\"\n        experience: 2\n  ratings:\n    average: 4.7\n    reviews: 24\n</code>",
            "feature_requirements": "• The JSON output must have a single top-level key named \"restaurant\".  \n• Under \"restaurant\", there must be keys \"name\", \"location\", \"menu\", \"staff\", and \"ratings\", each with corresponding values.  \n• The \"location\" object must contain the keys \"address\", \"city\", and \"country\" with string values matching the provided details.  \n• The \"menu\" must be represented as an array, with each element being an object that includes a \"category\" key and an \"items\" key, where \"items\" is an array of objects containing \"name\" and \"price\".  \n• Each \"menu\" item under the \"items\" array should have a \"name\" with a string value and a \"price\" with a numerical value matching the given data.  \n• The \"staff\" section must be an object with keys \"manager\", \"chefs\", and \"waiters\", where \"chefs\" is an array of strings and \"waiters\" is an array of objects each containing \"name\" (string) and \"experience\" (number).  \n• The \"ratings\" section must be an object that includes \"average\" (a numeric value) and \"reviews\" (a numeric value) matching the input YAML data.",
            "task_id": "180519",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "restaurant",
                "restaurant[name]",
                "restaurant[location]",
                "restaurant[location][address]",
                "restaurant[location][city]",
                "restaurant[location][country]",
                "restaurant[menu]",
                "restaurant[menu][*][category]",
                "restaurant[menu][*][items]",
                "restaurant[menu][*][items][*][name]",
                "restaurant[menu][*][items][*][price]",
                "restaurant[staff]",
                "restaurant[staff][manager]",
                "restaurant[staff][chefs]",
                "restaurant[staff][waiters]",
                "restaurant[staff][waiters][*][name]",
                "restaurant[staff][waiters][*][experience]",
                "restaurant[ratings]",
                "restaurant[ratings][average]",
                "restaurant[ratings][reviews]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180519_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"Cafe Mosaic\"\n  location:\n    address: \"123 Maple Street\"\n    city: \"Springfield\"\n    country: \"USA\"\n  menu:\n    - category: \"Breakfast\"\n      items:\n        - name: \"Pancakes\"\n          price: 7.50\n        - name: \"Omelette\"\n          price: 6.00\n    - category: \"Lunch\"\n      items:\n        - name: \"Burger\"\n          price: 8.00\n        - name: \"Salad\"\n          price: 5.50\n  staff:\n    manager: \"Samantha\"\n    chefs:\n      - \"John\"\n      - \"Lucas\"\n      - \"Mia\"\n    waiters:\n      - name: \"Eve\"\n        experience: 5\n      - name: \"Mark\"\n        experience: 2\n  ratings:\n    average: 4.7\n    reviews: 24\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180519_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "restaurant",
                                "restaurant[name]",
                                "restaurant[location]",
                                "restaurant[location][address]",
                                "restaurant[location][city]",
                                "restaurant[location][country]",
                                "restaurant[menu]",
                                "restaurant[menu][*][category]",
                                "restaurant[menu][*][items]",
                                "restaurant[menu][*][items][*][name]",
                                "restaurant[menu][*][items][*][price]",
                                "restaurant[staff]",
                                "restaurant[staff][manager]",
                                "restaurant[staff][chefs]",
                                "restaurant[staff][waiters]",
                                "restaurant[staff][waiters][*][name]",
                                "restaurant[staff][waiters][*][experience]",
                                "restaurant[ratings]",
                                "restaurant[ratings][average]",
                                "restaurant[ratings][reviews]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"The Gourmet Table\"\n  address:\n    street: \"123 Culinary Blvd\"\n    city: \"Foodsville\"\n    state: \"Delicious\"\n    zip: \"12345\"\n  hours:\n    - day: Monday\n      open: \"11:00\"\n      close: \"22:00\"\n    - day: Tuesday\n      open: \"11:00\"\n      close: \"22:00\"\n    - day: Wednesday\n      open: \"11:00\"\n      close: \"22:00\"\n  menu:\n    appetizers:\n      - id: A101\n        name: \"Bruschetta\"\n        price: 8.99\n      - id: A102\n        name: \"Garlic Bread\"\n        price: 5.99\n    main_courses:\n      - id: M201\n        name: \"Spaghetti Carbonara\"\n        price: 15.99\n      - id: M202\n        name: \"Grilled Salmon\"\n        price: 18.50\n    desserts:\n      - id: D301\n        name: \"Tiramisu\"\n        price: 6.50\n      - id: D302\n        name: \"Gelato\"\n        price: 4.99\n  reviews:\n    - username: foodie123\n      rating: 4.5\n      comment: \"Great ambiance and friendly staff.\"\n    - username: chefmaster\n      rating: 5\n      comment: \"Authentic flavors and delightful desserts.\"\n  contact:\n    phone: \"555-1234\"\n    email: \"contact@gourmettable.com\"\n</code>",
            "feature_requirements": "- The output must be a JSON object with a single root key \"restaurant\".\n- Under \"restaurant\", there must be a key \"name\" with the string value \"The Gourmet Table\".\n- The \"restaurant\" object must include an \"address\" object containing keys \"street\", \"city\", \"state\", and \"zip\" with their respective string values.\n- The \"restaurant\" object must include a \"hours\" key that maps to an array of objects. Each object in the array must include keys \"day\", \"open\", and \"close\", all with string values corresponding to each day's schedule.\n- The \"restaurant\" object must include a \"menu\" object with three keys: \"appetizers\", \"main_courses\", and \"desserts\". Each of these keys must map to an array of objects.\n- Each object within \"appetizers\", \"main_courses\", and \"desserts\" must contain keys \"id\", \"name\", and \"price\", where \"id\" and \"name\" are strings and \"price\" is a number.\n- The \"restaurant\" object must include a \"reviews\" key that maps to an array of objects. Each review object must contain keys \"username\", \"rating\", and \"comment\", with \"username\" and \"comment\" as strings and \"rating\" as a number.\n- The \"restaurant\" object must include a \"contact\" object containing keys \"phone\" and \"email\", both with string values.\n- All keys and corresponding values in the JSON output must reflect exactly the hierarchy and data provided in the given YAML code.",
            "task_id": "180520",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "restaurant",
                "restaurant[name]",
                "restaurant[address]",
                "restaurant[address][street]",
                "restaurant[address][city]",
                "restaurant[address][state]",
                "restaurant[address][zip]",
                "restaurant[hours]",
                "restaurant[hours][][day]",
                "restaurant[hours][][open]",
                "restaurant[hours][][close]",
                "restaurant[menu]",
                "restaurant[menu][appetizers]",
                "restaurant[menu][appetizers][][id]",
                "restaurant[menu][appetizers][][name]",
                "restaurant[menu][appetizers][][price]",
                "restaurant[menu][main_courses]",
                "restaurant[menu][main_courses][][id]",
                "restaurant[menu][main_courses][][name]",
                "restaurant[menu][main_courses][][price]",
                "restaurant[menu][desserts]",
                "restaurant[menu][desserts][][id]",
                "restaurant[menu][desserts][][name]",
                "restaurant[menu][desserts][][price]",
                "restaurant[reviews]",
                "restaurant[reviews][][username]",
                "restaurant[reviews][][rating]",
                "restaurant[reviews][][comment]",
                "restaurant[contact]",
                "restaurant[contact][phone]",
                "restaurant[contact][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180520_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"The Gourmet Table\"\n  address:\n    street: \"123 Culinary Blvd\"\n    city: \"Foodsville\"\n    state: \"Delicious\"\n    zip: \"12345\"\n  hours:\n    - day: Monday\n      open: \"11:00\"\n      close: \"22:00\"\n    - day: Tuesday\n      open: \"11:00\"\n      close: \"22:00\"\n    - day: Wednesday\n      open: \"11:00\"\n      close: \"22:00\"\n  menu:\n    appetizers:\n      - id: A101\n        name: \"Bruschetta\"\n        price: 8.99\n      - id: A102\n        name: \"Garlic Bread\"\n        price: 5.99\n    main_courses:\n      - id: M201\n        name: \"Spaghetti Carbonara\"\n        price: 15.99\n      - id: M202\n        name: \"Grilled Salmon\"\n        price: 18.50\n    desserts:\n      - id: D301\n        name: \"Tiramisu\"\n        price: 6.50\n      - id: D302\n        name: \"Gelato\"\n        price: 4.99\n  reviews:\n    - username: foodie123\n      rating: 4.5\n      comment: \"Great ambiance and friendly staff.\"\n    - username: chefmaster\n      rating: 5\n      comment: \"Authentic flavors and delightful desserts.\"\n  contact:\n    phone: \"555-1234\"\n    email: \"contact@gourmettable.com\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180520_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "restaurant",
                                "restaurant[name]",
                                "restaurant[address]",
                                "restaurant[address][street]",
                                "restaurant[address][city]",
                                "restaurant[address][state]",
                                "restaurant[address][zip]",
                                "restaurant[hours]",
                                "restaurant[hours][][day]",
                                "restaurant[hours][][open]",
                                "restaurant[hours][][close]",
                                "restaurant[menu]",
                                "restaurant[menu][appetizers]",
                                "restaurant[menu][appetizers][][id]",
                                "restaurant[menu][appetizers][][name]",
                                "restaurant[menu][appetizers][][price]",
                                "restaurant[menu][main_courses]",
                                "restaurant[menu][main_courses][][id]",
                                "restaurant[menu][main_courses][][name]",
                                "restaurant[menu][main_courses][][price]",
                                "restaurant[menu][desserts]",
                                "restaurant[menu][desserts][][id]",
                                "restaurant[menu][desserts][][name]",
                                "restaurant[menu][desserts][][price]",
                                "restaurant[reviews]",
                                "restaurant[reviews][][username]",
                                "restaurant[reviews][][rating]",
                                "restaurant[reviews][][comment]",
                                "restaurant[contact]",
                                "restaurant[contact][phone]",
                                "restaurant[contact][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nestablishment:\n  name: \"The Rustic Table\"\n  address: \"456 Elm Street, Springfield\"\n  type: \"Farm-to-Table Restaurant\"\n  established: 2012\n\nmenu:\n  - item: \"Grilled Portobello Mushroom\"\n    category: \"Entree\"\n    price: 14.95\n    ingredients:\n      - \"Portobello mushroom\"\n      - \"Olive oil\"\n      - \"Herbs\"\n      - \"Mixed greens\"\n  - item: \"Seasonal Salad\"\n    category: \"Appetizer\"\n    price: 9.5\n    ingredients:\n      - \"Local produce\"\n      - \"Vinaigrette\"\n      - \"Croutons\"\n  - item: \"Chocolate Torte\"\n    category: \"Dessert\"\n    price: 8.25\n    ingredients:\n      - \"Dark chocolate\"\n      - \"Almond flour\"\n      - \"Eggs\"\n      - \"Fresh berries\"\n\nhours:\n  monday: \"11:00 - 21:00\"\n  tuesday: \"11:00 - 21:00\"\n  wednesday: \"11:00 - 21:00\"\n  thursday: \"11:00 - 21:00\"\n  friday: \"11:00 - 23:00\"\n  saturday: \"12:00 - 23:00\"\n  sunday: \"Closed\"\n\nstaff:\n  - name: \"Alice Johnson\"\n    role: \"Head Chef\"\n    experience: 12\n  - name: \"Mark Thompson\"\n    role: \"Sous Chef\"\n    experience: 8\n  - name: \"Laura Patterson\"\n    role: \"Manager\"\n    experience: 10\n\nreviews:\n  - reviewer: \"Emily R.\"\n    rating: 4.5\n    comment: \"Fresh ingredients and vibrant flavors.\"\n  - reviewer: \"John D.\"\n    rating: 4.0\n    comment: \"Cozy atmosphere, but service was a bit slow.\"\n  - reviewer: \"Sara K.\"\n    rating: 5.0\n    comment: \"Absolutely loved the seasonal menu!\"\n</code>",
            "feature_requirements": "• The output must include a top-level JSON object with keys: \"establishment\", \"menu\", \"hours\", \"staff\", and \"reviews\".  \n• The \"establishment\" key must map to an object containing the keys \"name\", \"address\", \"type\", and \"established\", where \"established\" holds a numeric value and the other keys hold string values.  \n• The \"menu\" key must map to an array, where each element is an object containing \"item\", \"category\", \"price\", and \"ingredients\". The \"price\" value must be numeric and \"ingredients\" must be an array of strings.  \n• The \"hours\" key must map to an object with keys named after days of the week (\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"), each with string values representing their respective operating times, with \"sunday\" having the value \"Closed\".  \n• The \"staff\" key must map to an array of objects, where each object includes \"name\", \"role\", and \"experience\", with \"experience\" being numeric and the other fields being strings.  \n• The \"reviews\" key must map to an array of objects, where each object contains \"reviewer\", \"rating\", and \"comment\". The \"rating\" value must be numeric and the other values must be strings.",
            "task_id": "180521",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "establishment",
                "establishment[name]",
                "establishment[address]",
                "establishment[type]",
                "establishment[established]",
                "menu",
                "menu[][item]",
                "menu[][category]",
                "menu[][price]",
                "menu[][ingredients]",
                "hours",
                "hours[monday]",
                "hours[tuesday]",
                "hours[wednesday]",
                "hours[thursday]",
                "hours[friday]",
                "hours[saturday]",
                "hours[sunday]",
                "staff",
                "staff[][name]",
                "staff[][role]",
                "staff[][experience]",
                "reviews",
                "reviews[][reviewer]",
                "reviews[][rating]",
                "reviews[][comment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180521_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nestablishment:\n  name: \"The Rustic Table\"\n  address: \"456 Elm Street, Springfield\"\n  type: \"Farm-to-Table Restaurant\"\n  established: 2012\n\nmenu:\n  - item: \"Grilled Portobello Mushroom\"\n    category: \"Entree\"\n    price: 14.95\n    ingredients:\n      - \"Portobello mushroom\"\n      - \"Olive oil\"\n      - \"Herbs\"\n      - \"Mixed greens\"\n  - item: \"Seasonal Salad\"\n    category: \"Appetizer\"\n    price: 9.5\n    ingredients:\n      - \"Local produce\"\n      - \"Vinaigrette\"\n      - \"Croutons\"\n  - item: \"Chocolate Torte\"\n    category: \"Dessert\"\n    price: 8.25\n    ingredients:\n      - \"Dark chocolate\"\n      - \"Almond flour\"\n      - \"Eggs\"\n      - \"Fresh berries\"\n\nhours:\n  monday: \"11:00 - 21:00\"\n  tuesday: \"11:00 - 21:00\"\n  wednesday: \"11:00 - 21:00\"\n  thursday: \"11:00 - 21:00\"\n  friday: \"11:00 - 23:00\"\n  saturday: \"12:00 - 23:00\"\n  sunday: \"Closed\"\n\nstaff:\n  - name: \"Alice Johnson\"\n    role: \"Head Chef\"\n    experience: 12\n  - name: \"Mark Thompson\"\n    role: \"Sous Chef\"\n    experience: 8\n  - name: \"Laura Patterson\"\n    role: \"Manager\"\n    experience: 10\n\nreviews:\n  - reviewer: \"Emily R.\"\n    rating: 4.5\n    comment: \"Fresh ingredients and vibrant flavors.\"\n  - reviewer: \"John D.\"\n    rating: 4.0\n    comment: \"Cozy atmosphere, but service was a bit slow.\"\n  - reviewer: \"Sara K.\"\n    rating: 5.0\n    comment: \"Absolutely loved the seasonal menu!\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180521_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "establishment",
                                "establishment[name]",
                                "establishment[address]",
                                "establishment[type]",
                                "establishment[established]",
                                "menu",
                                "menu[][item]",
                                "menu[][category]",
                                "menu[][price]",
                                "menu[][ingredients]",
                                "hours",
                                "hours[monday]",
                                "hours[tuesday]",
                                "hours[wednesday]",
                                "hours[thursday]",
                                "hours[friday]",
                                "hours[saturday]",
                                "hours[sunday]",
                                "staff",
                                "staff[][name]",
                                "staff[][role]",
                                "staff[][experience]",
                                "reviews",
                                "reviews[][reviewer]",
                                "reviews[][rating]",
                                "reviews[][comment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nlibrary:\n  name: \"Central City Library\"\n  location:\n    address: \"123 Main St\"\n    city: \"Central City\"\n    state: \"CA\"\n    zip: \"90210\"\n  established: 1923\n  contact:\n    phone: \"555-1234\"\n    email: \"info@centralcitylibrary.org\"\n\nbooks:\n  count: 75000\n  genres:\n    - Fiction\n    - Nonfiction\n    - History\n    - Science\n    - Arts\n  latest_arrivals:\n    - title: \"The Quantum Leap\"\n      author: \"Jane Doe\"\n      published: 2023\n    - title: \"A Journey Through Art\"\n      author: \"John Smith\"\n      published: 2022\n\nmembers:\n  total: 2500\n  membership_levels:\n    - Regular\n    - Premium\n    - Student\n\nstaff:\n  librarians:\n    - name: \"Alice Green\"\n      role: \"Head Librarian\"\n    - name: \"Bob Brown\"\n      role: \"Assistant Librarian\"\n  support:\n    - name: \"Cathy White\"\n      role: \"Archivist\"\n    - name: \"Dave Black\"\n      role: \"IT Specialist\"\n</code>",
            "feature_requirements": "• The output must include a top-level key \"library\" containing details about the library.  \n• Under \"library\", there must be a key \"name\" with the library's name as its value.  \n• The \"library\" section must have a nested \"location\" key that includes \"address\", \"city\", \"state\", and \"zip\".  \n• The \"library\" section must also include an \"established\" key with a numerical value and a nested \"contact\" key with \"phone\" and \"email\".  \n• There must be a top-level key \"books\" that contains a \"count\" key, a \"genres\" list, and a \"latest_arrivals\" list where each entry has \"title\", \"author\", and \"published\".  \n• The output must include a top-level key \"members\" with a \"total\" key and a \"membership_levels\" list.  \n• There must be a top-level key \"staff\" containing two lists: \"librarians\" and \"support\".  \n• Each item in the \"staff.librarians\" list must include a \"name\" key and a \"role\" key.  \n• Each item in the \"staff.support\" list must include a \"name\" key and a \"role\" key.",
            "task_id": "180522",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[name]",
                "library[location]",
                "library[location][address]",
                "library[location][city]",
                "library[location][state]",
                "library[location][zip]",
                "library[established]",
                "library[contact]",
                "library[contact][phone]",
                "library[contact][email]",
                "books",
                "books[count]",
                "books[genres]",
                "books[latest_arrivals]",
                "books[latest_arrivals][*][title]",
                "books[latest_arrivals][*][author]",
                "books[latest_arrivals][*][published]",
                "members",
                "members[total]",
                "members[membership_levels]",
                "staff",
                "staff[librarians]",
                "staff[librarians][*][name]",
                "staff[librarians][*][role]",
                "staff[support]",
                "staff[support][*][name]",
                "staff[support][*][role]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180522_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nlibrary:\n  name: \"Central City Library\"\n  location:\n    address: \"123 Main St\"\n    city: \"Central City\"\n    state: \"CA\"\n    zip: \"90210\"\n  established: 1923\n  contact:\n    phone: \"555-1234\"\n    email: \"info@centralcitylibrary.org\"\n\nbooks:\n  count: 75000\n  genres:\n    - Fiction\n    - Nonfiction\n    - History\n    - Science\n    - Arts\n  latest_arrivals:\n    - title: \"The Quantum Leap\"\n      author: \"Jane Doe\"\n      published: 2023\n    - title: \"A Journey Through Art\"\n      author: \"John Smith\"\n      published: 2022\n\nmembers:\n  total: 2500\n  membership_levels:\n    - Regular\n    - Premium\n    - Student\n\nstaff:\n  librarians:\n    - name: \"Alice Green\"\n      role: \"Head Librarian\"\n    - name: \"Bob Brown\"\n      role: \"Assistant Librarian\"\n  support:\n    - name: \"Cathy White\"\n      role: \"Archivist\"\n    - name: \"Dave Black\"\n      role: \"IT Specialist\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180522_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[name]",
                                "library[location]",
                                "library[location][address]",
                                "library[location][city]",
                                "library[location][state]",
                                "library[location][zip]",
                                "library[established]",
                                "library[contact]",
                                "library[contact][phone]",
                                "library[contact][email]",
                                "books",
                                "books[count]",
                                "books[genres]",
                                "books[latest_arrivals]",
                                "books[latest_arrivals][*][title]",
                                "books[latest_arrivals][*][author]",
                                "books[latest_arrivals][*][published]",
                                "members",
                                "members[total]",
                                "members[membership_levels]",
                                "staff",
                                "staff[librarians]",
                                "staff[librarians][*][name]",
                                "staff[librarians][*][role]",
                                "staff[support]",
                                "staff[support][*][name]",
                                "staff[support][*][role]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"The Gourmet Bistro\"\n  location:\n    address: \"123 Culinary Ave\"\n    city: \"Flavor Town\"\n    zip: \"67890\"\n  hours:\n    weekday: \"9 AM - 11 PM\"\n    weekend: \"10 AM - 10 PM\"\n  menu:\n    - category: \"Starters\"\n      items:\n        - name: \"Bruschetta\"\n          price: 7.5\n        - name: \"Stuffed Mushrooms\"\n          price: 8.0\n    - category: \"Main Courses\"\n      items:\n        - name: \"Grilled Salmon\"\n          price: 18.5\n        - name: \"Ribeye Steak\"\n          price: 22.0\n    - category: \"Desserts\"\n      items:\n        - name: \"Tiramisu\"\n          price: 6.5\n        - name: \"Cheesecake\"\n          price: 6.0\n  reviews:\n    average_rating: 4.2\n    comments:\n      - user: \"Alice\"\n        rating: 5\n        comment: \"Excellent food and service!\"\n      - user: \"Bob\"\n        rating: 4\n        comment: \"Great atmosphere but slightly pricey.\"\n      - user: \"Carol\"\n        rating: 4\n        comment: \"Enjoyed the desserts, will come back for more!\"\n</code>",
            "feature_requirements": "• The converted output must be valid JSON structured as a root object containing a key \"restaurant\".  \n• The \"restaurant\" object must contain a \"name\" key with the string value \"The Gourmet Bistro\".  \n• The \"restaurant\" object must include a \"location\" object with keys \"address\" (with \"123 Culinary Ave\"), \"city\" (with \"Flavor Town\"), and \"zip\" (with \"67890\").  \n• The \"restaurant\" object must include an \"hours\" object with keys \"weekday\" (with \"9 AM - 11 PM\") and \"weekend\" (with \"10 AM - 10 PM\").  \n• The \"restaurant\" object must include a \"menu\" key whose value is an array, where each element is an object containing a \"category\" key and an \"items\" array.  \n• Each element in the \"menu\" array must include a list under \"items\" where each entry is an object with a \"name\" key (string) and a \"price\" key (numeric).  \n• The \"restaurant\" object must include a \"reviews\" object which contains an \"average_rating\" key with the numeric value 4.2.  \n• The \"reviews\" object must include a \"comments\" key whose value is an array, where each element is an object containing \"user\" (string), \"rating\" (numeric), and \"comment\" (string).",
            "task_id": "180523",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "restaurant",
                "restaurant[name]",
                "restaurant[location]",
                "restaurant[location][address]",
                "restaurant[location][city]",
                "restaurant[location][zip]",
                "restaurant[hours]",
                "restaurant[hours][weekday]",
                "restaurant[hours][weekend]",
                "restaurant[menu]",
                "restaurant[menu][][category]",
                "restaurant[menu][][items]",
                "restaurant[menu][][items][][name]",
                "restaurant[menu][][items][][price]",
                "restaurant[reviews]",
                "restaurant[reviews][average_rating]",
                "restaurant[reviews][comments]",
                "restaurant[reviews][comments][][user]",
                "restaurant[reviews][comments][][rating]",
                "restaurant[reviews][comments][][comment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180523_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nrestaurant:\n  name: \"The Gourmet Bistro\"\n  location:\n    address: \"123 Culinary Ave\"\n    city: \"Flavor Town\"\n    zip: \"67890\"\n  hours:\n    weekday: \"9 AM - 11 PM\"\n    weekend: \"10 AM - 10 PM\"\n  menu:\n    - category: \"Starters\"\n      items:\n        - name: \"Bruschetta\"\n          price: 7.5\n        - name: \"Stuffed Mushrooms\"\n          price: 8.0\n    - category: \"Main Courses\"\n      items:\n        - name: \"Grilled Salmon\"\n          price: 18.5\n        - name: \"Ribeye Steak\"\n          price: 22.0\n    - category: \"Desserts\"\n      items:\n        - name: \"Tiramisu\"\n          price: 6.5\n        - name: \"Cheesecake\"\n          price: 6.0\n  reviews:\n    average_rating: 4.2\n    comments:\n      - user: \"Alice\"\n        rating: 5\n        comment: \"Excellent food and service!\"\n      - user: \"Bob\"\n        rating: 4\n        comment: \"Great atmosphere but slightly pricey.\"\n      - user: \"Carol\"\n        rating: 4\n        comment: \"Enjoyed the desserts, will come back for more!\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180523_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "restaurant",
                                "restaurant[name]",
                                "restaurant[location]",
                                "restaurant[location][address]",
                                "restaurant[location][city]",
                                "restaurant[location][zip]",
                                "restaurant[hours]",
                                "restaurant[hours][weekday]",
                                "restaurant[hours][weekend]",
                                "restaurant[menu]",
                                "restaurant[menu][][category]",
                                "restaurant[menu][][items]",
                                "restaurant[menu][][items][][name]",
                                "restaurant[menu][][items][][price]",
                                "restaurant[reviews]",
                                "restaurant[reviews][average_rating]",
                                "restaurant[reviews][comments]",
                                "restaurant[reviews][comments][][user]",
                                "restaurant[reviews][comments][][rating]",
                                "restaurant[reviews][comments][][comment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nserver:\n  name: \"MainServer\"\n  host: \"127.0.0.1\"\n  port: 8080\n\ndatabase:\n  type: \"postgres\"\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    username: \"admin\"\n    password: \"secret\"\n\nlogging:\n  level: \"info\"\n  outputs:\n    - \"console\"\n    - \"file\"\n\nfeatures:\n  experimental: true\n  modules:\n    - \"authentication\"\n    - \"payments\"\n    - \"notifications\"\n\nmaintenance:\n  schedule: \"Sunday\"\n  window: \"02:00-03:00\"\n</code>",
            "feature_requirements": "• The output must include a top-level structure with exactly five keys: \"server\", \"database\", \"logging\", \"features\", and \"maintenance\".  \n• The \"server\" section must contain keys \"name\", \"host\", and \"port\" with their respective values (\"MainServer\", \"127.0.0.1\", and 8080).  \n• The \"database\" section must include keys \"type\", \"host\", \"port\", and a nested \"credentials\" object that contains \"username\" and \"password\" with values (\"postgres\", \"localhost\", 5432, and credentials \"admin\" and \"secret\").  \n• The \"logging\" section must contain a key \"level\" with the value \"info\" and an \"outputs\" key that holds an array containing two strings: \"console\" and \"file\".  \n• The \"features\" section must include a boolean key \"experimental\" set to true and a \"modules\" key that holds an array of strings including \"authentication\", \"payments\", and \"notifications\".  \n• The \"maintenance\" section must include keys \"schedule\" with the value \"Sunday\" and \"window\" with the value \"02:00-03:00\".",
            "task_id": "180524",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "server",
                "server[name]",
                "server[host]",
                "server[port]",
                "database",
                "database[type]",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][username]",
                "database[credentials][password]",
                "logging",
                "logging[level]",
                "logging[outputs]",
                "features",
                "features[experimental]",
                "features[modules]",
                "maintenance",
                "maintenance[schedule]",
                "maintenance[window]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180524_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nserver:\n  name: \"MainServer\"\n  host: \"127.0.0.1\"\n  port: 8080\n\ndatabase:\n  type: \"postgres\"\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    username: \"admin\"\n    password: \"secret\"\n\nlogging:\n  level: \"info\"\n  outputs:\n    - \"console\"\n    - \"file\"\n\nfeatures:\n  experimental: true\n  modules:\n    - \"authentication\"\n    - \"payments\"\n    - \"notifications\"\n\nmaintenance:\n  schedule: \"Sunday\"\n  window: \"02:00-03:00\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180524_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "server",
                                "server[name]",
                                "server[host]",
                                "server[port]",
                                "database",
                                "database[type]",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][username]",
                                "database[credentials][password]",
                                "logging",
                                "logging[level]",
                                "logging[outputs]",
                                "features",
                                "features[experimental]",
                                "features[modules]",
                                "maintenance",
                                "maintenance[schedule]",
                                "maintenance[window]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"project\": \"Galactic Survey\",\n  \"version\": \"2.1.0\",\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true,\n    \"backup\": {\n      \"enabled\": true,\n      \"frequency\": \"daily\"\n    }\n  },\n  \"crew\": [\n    {\n      \"name\": \"Evelyn Carter\",\n      \"role\": \"Captain\",\n      \"experienceYears\": 15\n    },\n    {\n      \"name\": \"Liam Nguyen\",\n      \"role\": \"Navigator\",\n      \"experienceYears\": 8\n    },\n    {\n      \"name\": \"Sophia Rodriguez\",\n      \"role\": \"Scientist\",\n      \"experienceYears\": 10\n    }\n  ],\n  \"missions\": [\n    {\n      \"id\": 101,\n      \"destination\": \"Orion Nebula\",\n      \"status\": \"completed\",\n      \"objectives\": [\n        \"collect samples\",\n        \"take photographs\",\n        \"measure radiation\"\n      ]\n    },\n    {\n      \"id\": 102,\n      \"destination\": \"Andromeda Galaxy\",\n      \"status\": \"scheduled\",\n      \"objectives\": [\n        \"survey star systems\",\n        \"map gravitational fields\"\n      ]\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must use a top-level mapping containing the keys: project, version, settings, crew, and missions.  \n• The project key must have the value \"Galactic Survey\".  \n• The version key must have the value \"2.1.0\".  \n• The settings key must map to a structure containing theme, language, notifications, and backup.  \n• Within settings, the backup key must map to a structure containing an enabled key with the Boolean value true and a frequency key with the value \"daily\".  \n• The crew key must map to a sequence containing exactly three items, each being a mapping with keys: name, role, and experienceYears.  \n• The missions key must map to a sequence containing exactly two items, each being a mapping with keys: id, destination, status, and objectives.  \n• In the mission entry with id 101, the objectives must be a list containing exactly three items: \"collect samples\", \"take photographs\", and \"measure radiation\".  \n• In the mission entry with id 102, the objectives must be a list containing exactly two items: \"survey star systems\" and \"map gravitational fields\".",
            "task_id": "051800",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project",
                "version",
                "settings",
                "settings[theme]",
                "settings[language]",
                "settings[notifications]",
                "settings[backup]",
                "settings[backup][enabled]",
                "settings[backup][frequency]",
                "crew",
                "crew[0]",
                "crew[0][name]",
                "crew[0][role]",
                "crew[0][experienceYears]",
                "crew[1]",
                "crew[1][name]",
                "crew[1][role]",
                "crew[1][experienceYears]",
                "crew[2]",
                "crew[2][name]",
                "crew[2][role]",
                "crew[2][experienceYears]",
                "missions",
                "missions[0]",
                "missions[0][id]",
                "missions[0][destination]",
                "missions[0][status]",
                "missions[0][objectives]",
                "missions[0][objectives][0]",
                "missions[0][objectives][1]",
                "missions[0][objectives][2]",
                "missions[1]",
                "missions[1][id]",
                "missions[1][destination]",
                "missions[1][status]",
                "missions[1][objectives]",
                "missions[1][objectives][0]",
                "missions[1][objectives][1]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051800_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"project\": \"Galactic Survey\",\n  \"version\": \"2.1.0\",\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true,\n    \"backup\": {\n      \"enabled\": true,\n      \"frequency\": \"daily\"\n    }\n  },\n  \"crew\": [\n    {\n      \"name\": \"Evelyn Carter\",\n      \"role\": \"Captain\",\n      \"experienceYears\": 15\n    },\n    {\n      \"name\": \"Liam Nguyen\",\n      \"role\": \"Navigator\",\n      \"experienceYears\": 8\n    },\n    {\n      \"name\": \"Sophia Rodriguez\",\n      \"role\": \"Scientist\",\n      \"experienceYears\": 10\n    }\n  ],\n  \"missions\": [\n    {\n      \"id\": 101,\n      \"destination\": \"Orion Nebula\",\n      \"status\": \"completed\",\n      \"objectives\": [\n        \"collect samples\",\n        \"take photographs\",\n        \"measure radiation\"\n      ]\n    },\n    {\n      \"id\": 102,\n      \"destination\": \"Andromeda Galaxy\",\n      \"status\": \"scheduled\",\n      \"objectives\": [\n        \"survey star systems\",\n        \"map gravitational fields\"\n      ]\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051800_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project",
                                "version",
                                "settings",
                                "settings[theme]",
                                "settings[language]",
                                "settings[notifications]",
                                "settings[backup]",
                                "settings[backup][enabled]",
                                "settings[backup][frequency]",
                                "crew",
                                "crew[0]",
                                "crew[0][name]",
                                "crew[0][role]",
                                "crew[0][experienceYears]",
                                "crew[1]",
                                "crew[1][name]",
                                "crew[1][role]",
                                "crew[1][experienceYears]",
                                "crew[2]",
                                "crew[2][name]",
                                "crew[2][role]",
                                "crew[2][experienceYears]",
                                "missions",
                                "missions[0]",
                                "missions[0][id]",
                                "missions[0][destination]",
                                "missions[0][status]",
                                "missions[0][objectives]",
                                "missions[0][objectives][0]",
                                "missions[0][objectives][1]",
                                "missions[0][objectives][2]",
                                "missions[1]",
                                "missions[1][id]",
                                "missions[1][destination]",
                                "missions[1][status]",
                                "missions[1][objectives]",
                                "missions[1][objectives][0]",
                                "missions[1][objectives][1]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user_info\": {\n    \"user_id\": \"U123456\",\n    \"name\": \"Alex Johnson\",\n    \"email\": \"alex.johnson@example.com\"\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true\n  },\n  \"activity_stats\": {\n    \"login_count\": 27,\n    \"active_days\": 15,\n    \"session_durations\": [45, 30, 60, 25]\n  },\n  \"transactions\": [\n    {\n      \"transaction_id\": \"T001\",\n      \"amount\": 49.99,\n      \"currency\": \"USD\",\n      \"timestamp\": \"2023-10-01T14:30:00Z\",\n      \"status\": \"completed\"\n    },\n    {\n      \"transaction_id\": \"T002\",\n      \"amount\": 19.95,\n      \"currency\": \"USD\",\n      \"timestamp\": \"2023-10-03T09:15:00Z\",\n      \"status\": \"pending\"\n    },\n    {\n      \"transaction_id\": \"T003\",\n      \"amount\": 104.50,\n      \"currency\": \"EUR\",\n      \"timestamp\": \"2023-10-04T17:45:00Z\",\n      \"status\": \"failed\"\n    }\n  ],\n  \"tags\": [\"premium\", \"beta_user\", \"newsletter_subscriber\"]\n}\n</code>",
            "feature_requirements": "• The output must contain a top-level mapping corresponding to the JSON structure with keys: user_info, preferences, activity_stats, transactions, and tags.  \n• Under user_info, there must be keys for user_id, name, and email with their corresponding string values maintained.  \n• Under preferences, there must be keys for theme, language, and notifications with notifications retaining its boolean type, and theme and language as strings.  \n• Under activity_stats, there must be keys for login_count, active_days, and session_durations, where login_count and active_days are numeric values and session_durations is a list of numeric values.  \n• The transactions key must map to a sequence (list) of mappings, each representing a transaction. Each transaction mapping must include transaction_id, amount, currency, timestamp, and status with accurate types (amount as numeric, timestamp as string, etc.).  \n• The tags key must map to a list of string values identical to those provided in the JSON.  \n• The hierarchical structure and key organization from the original JSON must be preserved exactly in the converted output.",
            "task_id": "051801",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "user_info",
                "user_info[user_id]",
                "user_info[name]",
                "user_info[email]",
                "preferences",
                "preferences[theme]",
                "preferences[language]",
                "preferences[notifications]",
                "activity_stats",
                "activity_stats[login_count]",
                "activity_stats[active_days]",
                "activity_stats[session_durations]",
                "transactions",
                "transactions[][transaction_id]",
                "transactions[][amount]",
                "transactions[][currency]",
                "transactions[][timestamp]",
                "transactions[][status]",
                "tags"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051801_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user_info\": {\n    \"user_id\": \"U123456\",\n    \"name\": \"Alex Johnson\",\n    \"email\": \"alex.johnson@example.com\"\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true\n  },\n  \"activity_stats\": {\n    \"login_count\": 27,\n    \"active_days\": 15,\n    \"session_durations\": [45, 30, 60, 25]\n  },\n  \"transactions\": [\n    {\n      \"transaction_id\": \"T001\",\n      \"amount\": 49.99,\n      \"currency\": \"USD\",\n      \"timestamp\": \"2023-10-01T14:30:00Z\",\n      \"status\": \"completed\"\n    },\n    {\n      \"transaction_id\": \"T002\",\n      \"amount\": 19.95,\n      \"currency\": \"USD\",\n      \"timestamp\": \"2023-10-03T09:15:00Z\",\n      \"status\": \"pending\"\n    },\n    {\n      \"transaction_id\": \"T003\",\n      \"amount\": 104.50,\n      \"currency\": \"EUR\",\n      \"timestamp\": \"2023-10-04T17:45:00Z\",\n      \"status\": \"failed\"\n    }\n  ],\n  \"tags\": [\"premium\", \"beta_user\", \"newsletter_subscriber\"]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051801_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "user_info",
                                "user_info[user_id]",
                                "user_info[name]",
                                "user_info[email]",
                                "preferences",
                                "preferences[theme]",
                                "preferences[language]",
                                "preferences[notifications]",
                                "activity_stats",
                                "activity_stats[login_count]",
                                "activity_stats[active_days]",
                                "activity_stats[session_durations]",
                                "transactions",
                                "transactions[][transaction_id]",
                                "transactions[][amount]",
                                "transactions[][currency]",
                                "transactions[][timestamp]",
                                "transactions[][status]",
                                "tags"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 102,\n    \"fullName\": \"Alice Walker\",\n    \"contact\": {\n      \"email\": \"alice.walker@example.com\",\n      \"phone\": \"+123456789\"\n    }\n  },\n  \"preferences\": {\n    \"notifications\": true,\n    \"theme\": \"dark\",\n    \"languages\": [\n      \"English\",\n      \"Spanish\"\n    ]\n  },\n  \"transactions\": [\n    {\n      \"transactionId\": \"txn001\",\n      \"amount\": 250.75,\n      \"currency\": \"USD\",\n      \"date\": \"2023-08-15\"\n    },\n    {\n      \"transactionId\": \"txn002\",\n      \"amount\": 55.50,\n      \"currency\": \"USD\",\n      \"date\": \"2023-08-17\"\n    }\n  ],\n  \"status\": \"active\",\n  \"events\": [\n    {\n      \"eventType\": \"login\",\n      \"timestamp\": \"2023-10-10T14:48:00\"\n    },\n    {\n      \"eventType\": \"logout\",\n      \"timestamp\": \"2023-10-10T15:00:00\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The YAML output must have a top-level mapping with the keys: user, preferences, transactions, status, and events.  \n• Under the user key, there must be a mapping that includes the keys: id, fullName, and contact.  \n• The contact section under user must include the keys email and phone with string values.  \n• Under the preferences key, there must be a mapping that includes notifications as a boolean, theme as a string, and languages as a list containing at least the elements \"English\" and \"Spanish\".  \n• The transactions key must contain a list where each item is a mapping that includes the keys: transactionId, amount, currency, and date, with amount as a numeric value and date as a string in date format.  \n• The status key must have a string value, expected to be \"active\".  \n• The events key must contain a list where each item is a mapping that includes eventType and timestamp, with timestamp represented as a string in an ISO timestamp format.",
            "task_id": "051802",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "user",
                "user[id]",
                "user[fullName]",
                "user[contact]",
                "user[contact][email]",
                "user[contact][phone]",
                "preferences",
                "preferences[notifications]",
                "preferences[theme]",
                "preferences[languages]",
                "transactions",
                "transactions[][transactionId]",
                "transactions[][amount]",
                "transactions[][currency]",
                "transactions[][date]",
                "status",
                "events",
                "events[][eventType]",
                "events[][timestamp]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051802_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 102,\n    \"fullName\": \"Alice Walker\",\n    \"contact\": {\n      \"email\": \"alice.walker@example.com\",\n      \"phone\": \"+123456789\"\n    }\n  },\n  \"preferences\": {\n    \"notifications\": true,\n    \"theme\": \"dark\",\n    \"languages\": [\n      \"English\",\n      \"Spanish\"\n    ]\n  },\n  \"transactions\": [\n    {\n      \"transactionId\": \"txn001\",\n      \"amount\": 250.75,\n      \"currency\": \"USD\",\n      \"date\": \"2023-08-15\"\n    },\n    {\n      \"transactionId\": \"txn002\",\n      \"amount\": 55.50,\n      \"currency\": \"USD\",\n      \"date\": \"2023-08-17\"\n    }\n  ],\n  \"status\": \"active\",\n  \"events\": [\n    {\n      \"eventType\": \"login\",\n      \"timestamp\": \"2023-10-10T14:48:00\"\n    },\n    {\n      \"eventType\": \"logout\",\n      \"timestamp\": \"2023-10-10T15:00:00\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051802_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "user",
                                "user[id]",
                                "user[fullName]",
                                "user[contact]",
                                "user[contact][email]",
                                "user[contact][phone]",
                                "preferences",
                                "preferences[notifications]",
                                "preferences[theme]",
                                "preferences[languages]",
                                "transactions",
                                "transactions[][transactionId]",
                                "transactions[][amount]",
                                "transactions[][currency]",
                                "transactions[][date]",
                                "status",
                                "events",
                                "events[][eventType]",
                                "events[][timestamp]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"storeInfo\": {\n    \"name\": \"Sunrise Coffee\",\n    \"location\": \"Downtown\",\n    \"established\": 2010,\n    \"openHours\": {\n      \"monday\": \"07:00 AM - 07:00 PM\",\n      \"tuesday\": \"07:00 AM - 07:00 PM\",\n      \"wednesday\": \"07:00 AM - 07:00 PM\",\n      \"thursday\": \"07:00 AM - 07:00 PM\",\n      \"friday\": \"07:00 AM - 09:00 PM\",\n      \"saturday\": \"08:00 AM - 09:00 PM\",\n      \"sunday\": \"08:00 AM - 05:00 PM\"\n    }\n  },\n  \"menu\": [\n    {\n      \"item\": \"Espresso\",\n      \"price\": 2.5,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Latte\",\n      \"price\": 3.5,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Cappuccino\",\n      \"price\": 3.0,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Blueberry Muffin\",\n      \"price\": 2.0,\n      \"category\": \"Baked Goods\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"name\": \"Alice\",\n      \"role\": \"Barista\",\n      \"experienceYears\": 5\n    },\n    {\n      \"name\": \"Bob\",\n      \"role\": \"Manager\",\n      \"experienceYears\": 8\n    }\n  ],\n  \"orders\": [\n    {\n      \"orderId\": 1001,\n      \"table\": 4,\n      \"items\": [\n        {\n          \"item\": \"Latte\",\n          \"quantity\": 2\n        },\n        {\n          \"item\": \"Blueberry Muffin\",\n          \"quantity\": 1\n        }\n      ],\n      \"total\": 9.0\n    },\n    {\n      \"orderId\": 1002,\n      \"table\": 2,\n      \"items\": [\n        {\n          \"item\": \"Espresso\",\n          \"quantity\": 1\n        }\n      ],\n      \"total\": 2.5\n    }\n  ],\n  \"dailyLog\": {\n    \"date\": \"2023-10-12\",\n    \"transactions\": 57,\n    \"notes\": \"Busy morning, need to restock muffins and extra coffee beans.\"\n  }\n}\n</code>",
            "feature_requirements": "• The converted YAML output must include a top-level key representing the store information with sub-keys for name, location, established year, and open hours, where open hours is a collection with entries for each weekday (monday through sunday).  \n• The output must represent the menu as a list where each entry is a mapping containing an item name, its price, and a category.  \n• The output must include a staff section represented as a list, with each member having properties for name, role, and years of experience.  \n• The output must have an orders section structured as a list; each order must contain an order ID, table number, a nested list of items (each with an item name and a quantity), and the total amount of the order.  \n• The output must include a daily log that is represented as a mapping with keys for date, the number of transactions, and associated notes.",
            "task_id": "051803",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "store[name]",
                "store[location]",
                "store[established year]",
                "store[open hours][monday]",
                "store[open hours][tuesday]",
                "store[open hours][wednesday]",
                "store[open hours][thursday]",
                "store[open hours][friday]",
                "store[open hours][saturday]",
                "store[open hours][sunday]",
                "menu[][item name]",
                "menu[][price]",
                "menu[][category]",
                "staff[][name]",
                "staff[][role]",
                "staff[][years of experience]",
                "orders[][order ID]",
                "orders[][table number]",
                "orders[][items][][item name]",
                "orders[][items][][quantity]",
                "orders[][total amount]",
                "daily log[date]",
                "daily log[number of transactions]",
                "daily log[associated notes]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051803_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"storeInfo\": {\n    \"name\": \"Sunrise Coffee\",\n    \"location\": \"Downtown\",\n    \"established\": 2010,\n    \"openHours\": {\n      \"monday\": \"07:00 AM - 07:00 PM\",\n      \"tuesday\": \"07:00 AM - 07:00 PM\",\n      \"wednesday\": \"07:00 AM - 07:00 PM\",\n      \"thursday\": \"07:00 AM - 07:00 PM\",\n      \"friday\": \"07:00 AM - 09:00 PM\",\n      \"saturday\": \"08:00 AM - 09:00 PM\",\n      \"sunday\": \"08:00 AM - 05:00 PM\"\n    }\n  },\n  \"menu\": [\n    {\n      \"item\": \"Espresso\",\n      \"price\": 2.5,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Latte\",\n      \"price\": 3.5,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Cappuccino\",\n      \"price\": 3.0,\n      \"category\": \"Coffee\"\n    },\n    {\n      \"item\": \"Blueberry Muffin\",\n      \"price\": 2.0,\n      \"category\": \"Baked Goods\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"name\": \"Alice\",\n      \"role\": \"Barista\",\n      \"experienceYears\": 5\n    },\n    {\n      \"name\": \"Bob\",\n      \"role\": \"Manager\",\n      \"experienceYears\": 8\n    }\n  ],\n  \"orders\": [\n    {\n      \"orderId\": 1001,\n      \"table\": 4,\n      \"items\": [\n        {\n          \"item\": \"Latte\",\n          \"quantity\": 2\n        },\n        {\n          \"item\": \"Blueberry Muffin\",\n          \"quantity\": 1\n        }\n      ],\n      \"total\": 9.0\n    },\n    {\n      \"orderId\": 1002,\n      \"table\": 2,\n      \"items\": [\n        {\n          \"item\": \"Espresso\",\n          \"quantity\": 1\n        }\n      ],\n      \"total\": 2.5\n    }\n  ],\n  \"dailyLog\": {\n    \"date\": \"2023-10-12\",\n    \"transactions\": 57,\n    \"notes\": \"Busy morning, need to restock muffins and extra coffee beans.\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051803_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "store[name]",
                                "store[location]",
                                "store[established year]",
                                "store[open hours][monday]",
                                "store[open hours][tuesday]",
                                "store[open hours][wednesday]",
                                "store[open hours][thursday]",
                                "store[open hours][friday]",
                                "store[open hours][saturday]",
                                "store[open hours][sunday]",
                                "menu[][item name]",
                                "menu[][price]",
                                "menu[][category]",
                                "staff[][name]",
                                "staff[][role]",
                                "staff[][years of experience]",
                                "orders[][order ID]",
                                "orders[][table number]",
                                "orders[][items][][item name]",
                                "orders[][items][][quantity]",
                                "orders[][total amount]",
                                "daily log[date]",
                                "daily log[number of transactions]",
                                "daily log[associated notes]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"setting\": \"Ancient Library\",\n  \"location\": {\n    \"country\": \"Greece\",\n    \"city\": \"Athens\",\n    \"address\": \"24 Tholos Street\"\n  },\n  \"exhibits\": [\n    {\n      \"id\": \"E001\",\n      \"name\": \"Philosopher's Scroll\",\n      \"era\": \"Classical Antiquity\"\n    },\n    {\n      \"id\": \"E002\",\n      \"name\": \"Mosaic of Knowledge\",\n      \"era\": \"Hellenistic Period\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"role\": \"Curator\",\n      \"name\": \"Sophia Demetriou\",\n      \"shift\": \"morning\"\n    },\n    {\n      \"role\": \"Archivist\",\n      \"name\": \"Nikolas Athanasiou\",\n      \"shift\": \"afternoon\"\n    }\n  ],\n  \"open_hours\": {\n    \"weekday\": \"9:00-17:00\",\n    \"weekend\": \"10:00-14:00\"\n  }\n}\n</code>",
            "feature_requirements": "• The output must include a top-level key \"setting\" with the exact string value \"Ancient Library\".  \n• The output must include a nested mapping under the key \"location\" containing exactly the keys \"country\", \"city\", and \"address\" with their respective values \"Greece\", \"Athens\", and \"24 Tholos Street\".  \n• The output must include a key \"exhibits\" that maps to a list containing two items. Each item in the list must include the keys \"id\", \"name\", and \"era\" with the appropriate corresponding values (\"E001\", \"Philosopher's Scroll\", \"Classical Antiquity\" for the first item and \"E002\", \"Mosaic of Knowledge\", \"Hellenistic Period\" for the second).  \n• The output must include a key \"staff\" that maps to a list containing two items. Each item must be a mapping with the keys \"role\", \"name\", and \"shift\", corresponding to the provided values (\"Curator\", \"Sophia Demetriou\", \"morning\" for the first and \"Archivist\", \"Nikolas Athanasiou\", \"afternoon\" for the second).  \n• The output must include a nested mapping under the key \"open_hours\" with exactly two keys \"weekday\" and \"weekend\", mapping to the values \"9:00-17:00\" and \"10:00-14:00\" respectively.  \n• The hierarchical structure and relationships between keys (e.g., nested mappings and lists) must mirror the original JSON structure exactly.",
            "task_id": "051804",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "setting",
                "location",
                "location[country]",
                "location[city]",
                "location[address]",
                "exhibits",
                "exhibits[0][id]",
                "exhibits[0][name]",
                "exhibits[0][era]",
                "exhibits[1][id]",
                "exhibits[1][name]",
                "exhibits[1][era]",
                "staff",
                "staff[0][role]",
                "staff[0][name]",
                "staff[0][shift]",
                "staff[1][role]",
                "staff[1][name]",
                "staff[1][shift]",
                "open_hours",
                "open_hours[weekday]",
                "open_hours[weekend]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051804_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"setting\": \"Ancient Library\",\n  \"location\": {\n    \"country\": \"Greece\",\n    \"city\": \"Athens\",\n    \"address\": \"24 Tholos Street\"\n  },\n  \"exhibits\": [\n    {\n      \"id\": \"E001\",\n      \"name\": \"Philosopher's Scroll\",\n      \"era\": \"Classical Antiquity\"\n    },\n    {\n      \"id\": \"E002\",\n      \"name\": \"Mosaic of Knowledge\",\n      \"era\": \"Hellenistic Period\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"role\": \"Curator\",\n      \"name\": \"Sophia Demetriou\",\n      \"shift\": \"morning\"\n    },\n    {\n      \"role\": \"Archivist\",\n      \"name\": \"Nikolas Athanasiou\",\n      \"shift\": \"afternoon\"\n    }\n  ],\n  \"open_hours\": {\n    \"weekday\": \"9:00-17:00\",\n    \"weekend\": \"10:00-14:00\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051804_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "setting",
                                "location",
                                "location[country]",
                                "location[city]",
                                "location[address]",
                                "exhibits",
                                "exhibits[0][id]",
                                "exhibits[0][name]",
                                "exhibits[0][era]",
                                "exhibits[1][id]",
                                "exhibits[1][name]",
                                "exhibits[1][era]",
                                "staff",
                                "staff[0][role]",
                                "staff[0][name]",
                                "staff[0][shift]",
                                "staff[1][role]",
                                "staff[1][name]",
                                "staff[1][shift]",
                                "open_hours",
                                "open_hours[weekday]",
                                "open_hours[weekend]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"storeName\": \"Urban Gadget Shop\",\n  \"location\": {\n    \"address\": \"123 Main Street\",\n    \"city\": \"Metropolis\",\n    \"zip\": \"12345\"\n  },\n  \"items\": [\n    {\n      \"itemId\": 101,\n      \"name\": \"Bluetooth Speaker\",\n      \"price\": 29.99,\n      \"categories\": [\"Electronics\", \"Audio\"]\n    },\n    {\n      \"itemId\": 102,\n      \"name\": \"Wireless Earbuds\",\n      \"price\": 79.99,\n      \"categories\": [\"Electronics\", \"Audio\", \"Accessories\"]\n    }\n  ],\n  \"staff\": [\n    {\n      \"staffId\": 1,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Manager\"\n    },\n    {\n      \"staffId\": 2,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Sales Associate\"\n    }\n  ],\n  \"openHours\": {\n    \"Monday\": \"09:00-18:00\",\n    \"Tuesday\": \"09:00-18:00\",\n    \"Wednesday\": \"09:00-18:00\",\n    \"Thursday\": \"09:00-18:00\",\n    \"Friday\": \"09:00-18:00\",\n    \"Saturday\": \"10:00-16:00\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>",
            "feature_requirements": "- The output must include a key \"storeName\" with the exact string value \"Urban Gadget Shop\".\n- The output must include a nested mapping for \"location\" containing the keys \"address\", \"city\", and \"zip\" with their corresponding string values.\n- The output must include a key \"items\" that represents a list, with each list element containing keys \"itemId\" (as a number), \"name\" (as a string), \"price\" (as a number), and \"categories\" (as a list of strings).\n- The output must include a key \"staff\" that represents a list, with each element containing keys \"staffId\" (as a number), \"name\" (as a string), and \"role\" (as a string).\n- The output must include a key \"openHours\" containing a mapping from each day of the week (e.g., \"Monday\", \"Tuesday\", etc.) to their respective opening hours as strings.\n- The output must accurately preserve the structure and data types from the JSON input, ensuring that numbers remain numeric and strings remain as strings.",
            "task_id": "051805",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "storeName",
                "location[address]",
                "location[city]",
                "location[zip]",
                "items",
                "items[].itemId",
                "items[].name",
                "items[].price",
                "items[].categories",
                "staff",
                "staff[].staffId",
                "staff[].name",
                "staff[].role",
                "openHours",
                "openHours[Monday]",
                "openHours[Tuesday]",
                "openHours[Wednesday]",
                "openHours[Thursday]",
                "openHours[Friday]",
                "openHours[Saturday]",
                "openHours[Sunday]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051805_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"storeName\": \"Urban Gadget Shop\",\n  \"location\": {\n    \"address\": \"123 Main Street\",\n    \"city\": \"Metropolis\",\n    \"zip\": \"12345\"\n  },\n  \"items\": [\n    {\n      \"itemId\": 101,\n      \"name\": \"Bluetooth Speaker\",\n      \"price\": 29.99,\n      \"categories\": [\"Electronics\", \"Audio\"]\n    },\n    {\n      \"itemId\": 102,\n      \"name\": \"Wireless Earbuds\",\n      \"price\": 79.99,\n      \"categories\": [\"Electronics\", \"Audio\", \"Accessories\"]\n    }\n  ],\n  \"staff\": [\n    {\n      \"staffId\": 1,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Manager\"\n    },\n    {\n      \"staffId\": 2,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Sales Associate\"\n    }\n  ],\n  \"openHours\": {\n    \"Monday\": \"09:00-18:00\",\n    \"Tuesday\": \"09:00-18:00\",\n    \"Wednesday\": \"09:00-18:00\",\n    \"Thursday\": \"09:00-18:00\",\n    \"Friday\": \"09:00-18:00\",\n    \"Saturday\": \"10:00-16:00\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051805_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "storeName",
                                "location[address]",
                                "location[city]",
                                "location[zip]",
                                "items",
                                "items[].itemId",
                                "items[].name",
                                "items[].price",
                                "items[].categories",
                                "staff",
                                "staff[].staffId",
                                "staff[].name",
                                "staff[].role",
                                "openHours",
                                "openHours[Monday]",
                                "openHours[Tuesday]",
                                "openHours[Wednesday]",
                                "openHours[Thursday]",
                                "openHours[Friday]",
                                "openHours[Saturday]",
                                "openHours[Sunday]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"generatedAt\": \"2023-10-07T12:34:56Z\"\n  },\n  \"user\": {\n    \"id\": \"user_12345\",\n    \"name\": \"Alex Johnson\",\n    \"email\": \"alex.johnson@example.com\"\n  },\n  \"settings\": {\n    \"theme\": \"light\",\n    \"notificationsEnabled\": true,\n    \"preferredLanguages\": [\"English\", \"French\", \"German\"]\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item_001\",\n      \"description\": \"Wireless Mouse\",\n      \"price\": 29.99,\n      \"inStock\": true\n    },\n    {\n      \"itemId\": \"item_002\",\n      \"description\": \"Bluetooth Keyboard\",\n      \"price\": 49.99,\n      \"inStock\": false\n    }\n  ],\n  \"tasks\": [\n    {\n      \"taskId\": \"task_01\",\n      \"title\": \"Update Software\",\n      \"completed\": false\n    },\n    {\n      \"taskId\": \"task_02\",\n      \"title\": \"Backup Data\",\n      \"completed\": true\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must include a top-level structure with keys: \"metadata\", \"user\", \"settings\", \"items\", and \"tasks\".  \n• Under \"metadata\", there must be keys \"version\" (with a string value \"1.0\") and \"generatedAt\" (with a string value \"2023-10-07T12:34:56Z\").  \n• The \"user\" section must contain keys \"id\", \"name\", and \"email\", each paired with their respective string values.  \n• The \"settings\" section must include a key \"theme\" with a string value \"light\", a key \"notificationsEnabled\" with a Boolean value true, and a key \"preferredLanguages\" with a list containing the languages \"English\", \"French\", and \"German\".  \n• The \"items\" section must be represented as a list, where each item contains keys \"itemId\", \"description\", \"price\", and \"inStock\" with appropriate values (strings for \"itemId\" and \"description\", a number for \"price\", and a Boolean for \"inStock\").  \n• The \"tasks\" section must be represented as a list, where each task contains keys \"taskId\", \"title\", and \"completed\" with the relevant values (strings for \"taskId\" and \"title\", and a Boolean for \"completed\").  \n• All elements and values in the output must exactly match those provided in the JSON code.",
            "task_id": "051806",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata",
                "metadata[version]",
                "metadata[generatedAt]",
                "user",
                "user[id]",
                "user[name]",
                "user[email]",
                "settings",
                "settings[theme]",
                "settings[notificationsEnabled]",
                "settings[preferredLanguages]",
                "items",
                "items[][itemId]",
                "items[][description]",
                "items[][price]",
                "items[][inStock]",
                "tasks",
                "tasks[][taskId]",
                "tasks[][title]",
                "tasks[][completed]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051806_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"generatedAt\": \"2023-10-07T12:34:56Z\"\n  },\n  \"user\": {\n    \"id\": \"user_12345\",\n    \"name\": \"Alex Johnson\",\n    \"email\": \"alex.johnson@example.com\"\n  },\n  \"settings\": {\n    \"theme\": \"light\",\n    \"notificationsEnabled\": true,\n    \"preferredLanguages\": [\"English\", \"French\", \"German\"]\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item_001\",\n      \"description\": \"Wireless Mouse\",\n      \"price\": 29.99,\n      \"inStock\": true\n    },\n    {\n      \"itemId\": \"item_002\",\n      \"description\": \"Bluetooth Keyboard\",\n      \"price\": 49.99,\n      \"inStock\": false\n    }\n  ],\n  \"tasks\": [\n    {\n      \"taskId\": \"task_01\",\n      \"title\": \"Update Software\",\n      \"completed\": false\n    },\n    {\n      \"taskId\": \"task_02\",\n      \"title\": \"Backup Data\",\n      \"completed\": true\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051806_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata",
                                "metadata[version]",
                                "metadata[generatedAt]",
                                "user",
                                "user[id]",
                                "user[name]",
                                "user[email]",
                                "settings",
                                "settings[theme]",
                                "settings[notificationsEnabled]",
                                "settings[preferredLanguages]",
                                "items",
                                "items[][itemId]",
                                "items[][description]",
                                "items[][price]",
                                "items[][inStock]",
                                "tasks",
                                "tasks[][taskId]",
                                "tasks[][title]",
                                "tasks[][completed]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"id\": \"TP12345\",\n  \"name\": \"Mountain Retreat Adventure\",\n  \"location\": {\n    \"country\": \"Canada\",\n    \"region\": \"British Columbia\",\n    \"city\": \"Whistler\",\n    \"coordinates\": {\n      \"latitude\": 50.113,\n      \"longitude\": -122.95\n    }\n  },\n  \"accommodations\": [\n    {\n      \"type\": \"Cabin\",\n      \"beds\": 3,\n      \"amenities\": [\"fireplace\", \"hot tub\", \"kitchenette\"]\n    },\n    {\n      \"type\": \"Lodge\",\n      \"beds\": 2,\n      \"amenities\": [\"wifi\", \"breakfast\", \"scenic view\"]\n    }\n  ],\n  \"activities\": [\n    {\n      \"activity\": \"Hiking\",\n      \"difficulty\": \"Moderate\",\n      \"duration_hours\": 4\n    },\n    {\n      \"activity\": \"Skiing\",\n      \"difficulty\": \"Challenging\",\n      \"duration_hours\": 6\n    },\n    {\n      \"activity\": \"Bird Watching\",\n      \"difficulty\": \"Easy\",\n      \"duration_hours\": 2\n    }\n  ],\n  \"reviews\": [\n    {\n      \"reviewer\": \"Alice Johnson\",\n      \"rating\": 4.5,\n      \"comment\": \"The trails were amazing and the accommodations very comfortable.\"\n    },\n    {\n      \"reviewer\": \"Bob Smith\",\n      \"rating\": 4.0,\n      \"comment\": \"Good balance between adventure activities and relaxation.\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must represent top-level keys “id” and “name” with their respective values as provided in the JSON.  \n• The output must include a “location” section that groups nested keys “country”, “region”, “city”, and a “coordinates” sub-section that itself contains “latitude” and “longitude”.  \n• The output must include an “accommodations” section that is a list, with each entry containing keys “type”, “beds”, and an “amenities” list holding string values.  \n• The output must include an “activities” section that is a list, with each entry detailing the keys “activity”, “difficulty”, and “duration_hours”, where duration_hours holds a numeric value.  \n• The output must include a “reviews” section that is a list, with each entry containing keys “reviewer”, “rating”, and “comment”, where rating is a numeric value.",
            "task_id": "051807",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "id",
                "name",
                "location[country]",
                "location[region]",
                "location[city]",
                "location[coordinates][latitude]",
                "location[coordinates][longitude]",
                "accommodations[][type]",
                "accommodations[][beds]",
                "accommodations[][amenities]",
                "activities[][activity]",
                "activities[][difficulty]",
                "activities[][duration_hours]",
                "reviews[][reviewer]",
                "reviews[][rating]",
                "reviews[][comment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051807_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"id\": \"TP12345\",\n  \"name\": \"Mountain Retreat Adventure\",\n  \"location\": {\n    \"country\": \"Canada\",\n    \"region\": \"British Columbia\",\n    \"city\": \"Whistler\",\n    \"coordinates\": {\n      \"latitude\": 50.113,\n      \"longitude\": -122.95\n    }\n  },\n  \"accommodations\": [\n    {\n      \"type\": \"Cabin\",\n      \"beds\": 3,\n      \"amenities\": [\"fireplace\", \"hot tub\", \"kitchenette\"]\n    },\n    {\n      \"type\": \"Lodge\",\n      \"beds\": 2,\n      \"amenities\": [\"wifi\", \"breakfast\", \"scenic view\"]\n    }\n  ],\n  \"activities\": [\n    {\n      \"activity\": \"Hiking\",\n      \"difficulty\": \"Moderate\",\n      \"duration_hours\": 4\n    },\n    {\n      \"activity\": \"Skiing\",\n      \"difficulty\": \"Challenging\",\n      \"duration_hours\": 6\n    },\n    {\n      \"activity\": \"Bird Watching\",\n      \"difficulty\": \"Easy\",\n      \"duration_hours\": 2\n    }\n  ],\n  \"reviews\": [\n    {\n      \"reviewer\": \"Alice Johnson\",\n      \"rating\": 4.5,\n      \"comment\": \"The trails were amazing and the accommodations very comfortable.\"\n    },\n    {\n      \"reviewer\": \"Bob Smith\",\n      \"rating\": 4.0,\n      \"comment\": \"Good balance between adventure activities and relaxation.\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051807_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "id",
                                "name",
                                "location[country]",
                                "location[region]",
                                "location[city]",
                                "location[coordinates][latitude]",
                                "location[coordinates][longitude]",
                                "accommodations[][type]",
                                "accommodations[][beds]",
                                "accommodations[][amenities]",
                                "activities[][activity]",
                                "activities[][difficulty]",
                                "activities[][duration_hours]",
                                "reviews[][reviewer]",
                                "reviews[][rating]",
                                "reviews[][comment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 1001,\n    \"name\": \"Alice\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"notifications\": true,\n      \"languages\": [\"English\", \"Spanish\"]\n    }\n  },\n  \"conversion\": {\n    \"inputFormat\": \"XML\",\n    \"outputFormat\": \"JSON\",\n    \"mappings\": [\n      { \"source\": \"book/title\", \"target\": \"title\" },\n      { \"source\": \"book/author\", \"target\": \"author\" },\n      { \"source\": \"book/year\", \"target\": \"publicationYear\" }\n    ]\n  },\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"created\": \"2023-10-03T12:00:00Z\",\n    \"updated\": \"2023-10-03T12:00:00Z\"\n  },\n  \"tasks\": [\n    { \"taskId\": 1, \"description\": \"Parse XML input\", \"status\": \"completed\" },\n    { \"taskId\": 2, \"description\": \"Transform data\", \"status\": \"in-progress\" },\n    { \"taskId\": 3, \"description\": \"Output JSON\", \"status\": \"pending\" }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must contain a top-level key called \"user\" with a mapping value containing the keys \"id\", \"name\", and \"preferences\".  \n• Inside the \"user\" mapping, \"id\" must hold a numerical value (1001) and \"name\" must hold a string value (\"Alice\").  \n• The \"preferences\" mapping under \"user\" must include the keys \"theme\", \"notifications\", and \"languages\", where \"theme\" is a string (\"dark\"), \"notifications\" is a boolean (true), and \"languages\" is a list containing \"English\" and \"Spanish\".  \n• The output must contain a top-level key named \"conversion\" that maps to a structure holding the keys \"inputFormat\", \"outputFormat\", and \"mappings\".  \n• Within the \"conversion\" mapping, \"inputFormat\" and \"outputFormat\" must hold the string values \"XML\" and \"JSON\" respectively, and \"mappings\" must be a list of mapping items.  \n• Each item in the \"mappings\" list must be a mapping that contains the keys \"source\" and \"target\", with example entries such as {\"source\": \"book/title\", \"target\": \"title\"}.  \n• There must be a top-level key called \"metadata\" containing a mapping with the keys \"version\", \"created\", and \"updated\", with respective string values \"1.0\", \"2023-10-03T12:00:00Z\", and \"2023-10-03T12:00:00Z\".  \n• The output must include a top-level key titled \"tasks\" whose value is a list of mappings; each mapping in the list must have the keys \"taskId\", \"description\", and \"status\", with values like 1, \"Parse XML input\", \"completed\" for the first task.",
            "task_id": "051808",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "user",
                "user[id]",
                "user[name]",
                "user[preferences]",
                "user[preferences][theme]",
                "user[preferences][notifications]",
                "user[preferences][languages]",
                "conversion",
                "conversion[inputFormat]",
                "conversion[outputFormat]",
                "conversion[mappings]",
                "conversion[mappings][*][source]",
                "conversion[mappings][*][target]",
                "metadata",
                "metadata[version]",
                "metadata[created]",
                "metadata[updated]",
                "tasks",
                "tasks[*][taskId]",
                "tasks[*][description]",
                "tasks[*][status]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051808_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 1001,\n    \"name\": \"Alice\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"notifications\": true,\n      \"languages\": [\"English\", \"Spanish\"]\n    }\n  },\n  \"conversion\": {\n    \"inputFormat\": \"XML\",\n    \"outputFormat\": \"JSON\",\n    \"mappings\": [\n      { \"source\": \"book/title\", \"target\": \"title\" },\n      { \"source\": \"book/author\", \"target\": \"author\" },\n      { \"source\": \"book/year\", \"target\": \"publicationYear\" }\n    ]\n  },\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"created\": \"2023-10-03T12:00:00Z\",\n    \"updated\": \"2023-10-03T12:00:00Z\"\n  },\n  \"tasks\": [\n    { \"taskId\": 1, \"description\": \"Parse XML input\", \"status\": \"completed\" },\n    { \"taskId\": 2, \"description\": \"Transform data\", \"status\": \"in-progress\" },\n    { \"taskId\": 3, \"description\": \"Output JSON\", \"status\": \"pending\" }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051808_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "user",
                                "user[id]",
                                "user[name]",
                                "user[preferences]",
                                "user[preferences][theme]",
                                "user[preferences][notifications]",
                                "user[preferences][languages]",
                                "conversion",
                                "conversion[inputFormat]",
                                "conversion[outputFormat]",
                                "conversion[mappings]",
                                "conversion[mappings][*][source]",
                                "conversion[mappings][*][target]",
                                "metadata",
                                "metadata[version]",
                                "metadata[created]",
                                "metadata[updated]",
                                "tasks",
                                "tasks[*][taskId]",
                                "tasks[*][description]",
                                "tasks[*][status]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"villageName\": \"Everbloom\",\n  \"location\": {\n    \"region\": \"North Vale\",\n    \"coordinates\": {\n      \"latitude\": 45.234,\n      \"longitude\": -122.456\n    }\n  },\n  \"population\": 235,\n  \"economy\": {\n    \"mainIndustry\": \"agriculture\",\n    \"tradeGoods\": [\"wheat\", \"honey\", \"herbs\"]\n  },\n  \"landmarks\": [\n    {\n      \"name\": \"Ancient Oak\",\n      \"type\": \"tree\",\n      \"heightMeters\": 15.2\n    },\n    {\n      \"name\": \"Crystal Fountain\",\n      \"type\": \"fountain\",\n      \"features\": [\"waterfall\", \"statues\", \"mosaic\"]\n    },\n    {\n      \"name\": \"Old Mill\",\n      \"type\": \"historical building\",\n      \"established\": 1723\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must convert the JSON structure into a YAML mapping with top-level keys matching the JSON keys: villageName, location, population, economy, landmarks.  \n• The villageName key must contain the string value \"Everbloom\".  \n• The location key must include a nested mapping with keys region and coordinates; region must have the string value \"North Vale\".  \n• The coordinates mapping within location must contain the keys latitude and longitude with numeric values 45.234 and -122.456, respectively.  \n• The population key must have the numeric value 235.  \n• The economy key must comprise a nested mapping with the keys mainIndustry and tradeGoods; mainIndustry should have the string value \"agriculture\", and tradeGoods must be a list including \"wheat\", \"honey\", and \"herbs\".  \n• The landmarks key must be represented as a list of mappings, each detailing a named landmark.  \n• The first element in the landmarks list must be a mapping with keys name, type, and heightMeters, holding values \"Ancient Oak\", \"tree\", and numeric 15.2 respectively.  \n• The second element in the landmarks list must include a mapping with keys name, type, and features; features must be a list containing \"waterfall\", \"statues\", and \"mosaic\".  \n• The third element in the landmarks list must be a mapping with keys name, type, and established, with values \"Old Mill\", \"historical building\", and numeric 1723 respectively.",
            "task_id": "051809",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "villageName",
                "location[region]",
                "location[coordinates][latitude]",
                "location[coordinates][longitude]",
                "population",
                "economy[mainIndustry]",
                "economy[tradeGoods]",
                "landmarks[0][name]",
                "landmarks[0][type]",
                "landmarks[0][heightMeters]",
                "landmarks[1][name]",
                "landmarks[1][type]",
                "landmarks[1][features]",
                "landmarks[2][name]",
                "landmarks[2][type]",
                "landmarks[2][established]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051809_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"villageName\": \"Everbloom\",\n  \"location\": {\n    \"region\": \"North Vale\",\n    \"coordinates\": {\n      \"latitude\": 45.234,\n      \"longitude\": -122.456\n    }\n  },\n  \"population\": 235,\n  \"economy\": {\n    \"mainIndustry\": \"agriculture\",\n    \"tradeGoods\": [\"wheat\", \"honey\", \"herbs\"]\n  },\n  \"landmarks\": [\n    {\n      \"name\": \"Ancient Oak\",\n      \"type\": \"tree\",\n      \"heightMeters\": 15.2\n    },\n    {\n      \"name\": \"Crystal Fountain\",\n      \"type\": \"fountain\",\n      \"features\": [\"waterfall\", \"statues\", \"mosaic\"]\n    },\n    {\n      \"name\": \"Old Mill\",\n      \"type\": \"historical building\",\n      \"established\": 1723\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051809_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "villageName",
                                "location[region]",
                                "location[coordinates][latitude]",
                                "location[coordinates][longitude]",
                                "population",
                                "economy[mainIndustry]",
                                "economy[tradeGoods]",
                                "landmarks[0][name]",
                                "landmarks[0][type]",
                                "landmarks[0][heightMeters]",
                                "landmarks[1][name]",
                                "landmarks[1][type]",
                                "landmarks[1][features]",
                                "landmarks[2][name]",
                                "landmarks[2][type]",
                                "landmarks[2][established]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"event\": \"Local Art Festival\",\n  \"date\": \"2023-11-15\",\n  \"location\": {\n    \"venue\": \"City Park\",\n    \"address\": \"456 Maple Street\",\n    \"city\": \"Hilltown\",\n    \"state\": \"TX\"\n  },\n  \"participants\": [\n    {\n      \"id\": 1,\n      \"role\": \"Artist\",\n      \"name\": \"Alice Smith\",\n      \"category\": \"Painting\"\n    },\n    {\n      \"id\": 2,\n      \"role\": \"Musician\",\n      \"name\": \"The Riverside Band\",\n      \"category\": \"Jazz\"\n    },\n    {\n      \"id\": 3,\n      \"role\": \"Performer\",\n      \"name\": \"Dancers United\",\n      \"category\": \"Contemporary Dance\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Opening Ceremony\"\n    },\n    {\n      \"time\": \"11:30\",\n      \"activity\": \"Art Exhibition\"\n    },\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Live Performance\"\n    },\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"Interactive Workshops\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must have a top-level key for \"event\" with the value \"Local Art Festival\".  \n• The output must have a top-level key for \"date\" with the value \"2023-11-15\".  \n• The output must include a \"location\" section containing keys \"venue\", \"address\", \"city\", and \"state\" with respective values \"City Park\", \"456 Maple Street\", \"Hilltown\", and \"TX\".  \n• The output must include a \"participants\" section represented as a list, where each entry is a mapping with keys \"id\", \"role\", \"name\", and \"category\", containing the information for each participant as provided.  \n• The output must include a \"schedule\" section represented as a list, where each entry is a mapping with keys \"time\" and \"activity\", corresponding to each scheduled event.",
            "task_id": "051810",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event",
                "date",
                "location[venue]",
                "location[address]",
                "location[city]",
                "location[state]",
                "participants[*][id]",
                "participants[*][role]",
                "participants[*][name]",
                "participants[*][category]",
                "schedule[*][time]",
                "schedule[*][activity]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051810_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"event\": \"Local Art Festival\",\n  \"date\": \"2023-11-15\",\n  \"location\": {\n    \"venue\": \"City Park\",\n    \"address\": \"456 Maple Street\",\n    \"city\": \"Hilltown\",\n    \"state\": \"TX\"\n  },\n  \"participants\": [\n    {\n      \"id\": 1,\n      \"role\": \"Artist\",\n      \"name\": \"Alice Smith\",\n      \"category\": \"Painting\"\n    },\n    {\n      \"id\": 2,\n      \"role\": \"Musician\",\n      \"name\": \"The Riverside Band\",\n      \"category\": \"Jazz\"\n    },\n    {\n      \"id\": 3,\n      \"role\": \"Performer\",\n      \"name\": \"Dancers United\",\n      \"category\": \"Contemporary Dance\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"time\": \"10:00\",\n      \"activity\": \"Opening Ceremony\"\n    },\n    {\n      \"time\": \"11:30\",\n      \"activity\": \"Art Exhibition\"\n    },\n    {\n      \"time\": \"13:00\",\n      \"activity\": \"Live Performance\"\n    },\n    {\n      \"time\": \"15:00\",\n      \"activity\": \"Interactive Workshops\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051810_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event",
                                "date",
                                "location[venue]",
                                "location[address]",
                                "location[city]",
                                "location[state]",
                                "participants[*][id]",
                                "participants[*][role]",
                                "participants[*][name]",
                                "participants[*][category]",
                                "schedule[*][time]",
                                "schedule[*][activity]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"projectName\": \"DataConversionTool\",\n  \"version\": \"2.3.1\",\n  \"configuration\": {\n    \"loggingEnabled\": true,\n    \"retryPolicy\": {\n      \"maxAttempts\": 5,\n      \"delaySeconds\": 10\n    },\n    \"timeoutSeconds\": 60\n  },\n  \"dataFormats\": {\n    \"inputFormat\": \"JSON\",\n    \"outputFormat\": \"JSON\",\n    \"schema\": [\"id\", \"timestamp\", \"payload\", \"status\"]\n  },\n  \"supportedUsers\": [\n    {\n      \"userId\": \"u1001\",\n      \"name\": \"Alice\",\n      \"permissions\": [\"read\", \"write\", \"execute\"]\n    },\n    {\n      \"userId\": \"u1002\",\n      \"name\": \"Bob\",\n      \"permissions\": [\"read\", \"write\"]\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The YAML must include a key for \"projectName\" with the value \"DataConversionTool\".  \n• The YAML must include a key for \"version\" with the value \"2.3.1\".  \n• The YAML must include a nested \"configuration\" section containing keys for \"loggingEnabled\", \"retryPolicy\", and \"timeoutSeconds\".  \n• Within the \"configuration\" section, \"loggingEnabled\" must be set to true and \"timeoutSeconds\" must have the value 60.  \n• Within the \"configuration\" section, the \"retryPolicy\" subsection must include keys \"maxAttempts\" with the value 5 and \"delaySeconds\" with the value 10.  \n• The YAML must include a \"dataFormats\" section containing keys for \"inputFormat\", \"outputFormat\", and \"schema\".  \n• Within the \"dataFormats\" section, \"inputFormat\" and \"outputFormat\" must both have the value \"JSON\", and \"schema\" must be a list containing \"id\", \"timestamp\", \"payload\", and \"status\".  \n• The YAML must include a \"supportedUsers\" section which is a list containing two user entries.  \n• The first user entry in the \"supportedUsers\" list must include \"userId\" with the value \"u1001\", \"name\" with the value \"Alice\", and a \"permissions\" list containing \"read\", \"write\", and \"execute\".  \n• The second user entry in the \"supportedUsers\" list must include \"userId\" with the value \"u1002\", \"name\" with the value \"Bob\", and a \"permissions\" list containing \"read\" and \"write\".",
            "task_id": "051811",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "projectName",
                "version",
                "configuration[loggingEnabled]",
                "configuration[timeoutSeconds]",
                "configuration[retryPolicy]",
                "configuration[retryPolicy][maxAttempts]",
                "configuration[retryPolicy][delaySeconds]",
                "dataFormats[inputFormat]",
                "dataFormats[outputFormat]",
                "dataFormats[schema]",
                "supportedUsers",
                "supportedUsers[0][userId]",
                "supportedUsers[0][name]",
                "supportedUsers[0][permissions]",
                "supportedUsers[1][userId]",
                "supportedUsers[1][name]",
                "supportedUsers[1][permissions]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051811_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"projectName\": \"DataConversionTool\",\n  \"version\": \"2.3.1\",\n  \"configuration\": {\n    \"loggingEnabled\": true,\n    \"retryPolicy\": {\n      \"maxAttempts\": 5,\n      \"delaySeconds\": 10\n    },\n    \"timeoutSeconds\": 60\n  },\n  \"dataFormats\": {\n    \"inputFormat\": \"JSON\",\n    \"outputFormat\": \"JSON\",\n    \"schema\": [\"id\", \"timestamp\", \"payload\", \"status\"]\n  },\n  \"supportedUsers\": [\n    {\n      \"userId\": \"u1001\",\n      \"name\": \"Alice\",\n      \"permissions\": [\"read\", \"write\", \"execute\"]\n    },\n    {\n      \"userId\": \"u1002\",\n      \"name\": \"Bob\",\n      \"permissions\": [\"read\", \"write\"]\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051811_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "projectName",
                                "version",
                                "configuration[loggingEnabled]",
                                "configuration[timeoutSeconds]",
                                "configuration[retryPolicy]",
                                "configuration[retryPolicy][maxAttempts]",
                                "configuration[retryPolicy][delaySeconds]",
                                "dataFormats[inputFormat]",
                                "dataFormats[outputFormat]",
                                "dataFormats[schema]",
                                "supportedUsers",
                                "supportedUsers[0][userId]",
                                "supportedUsers[0][name]",
                                "supportedUsers[0][permissions]",
                                "supportedUsers[1][userId]",
                                "supportedUsers[1][name]",
                                "supportedUsers[1][permissions]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"stationId\": \"WS-001\",\n  \"location\": {\n    \"city\": \"New York\",\n    \"coordinates\": {\n      \"latitude\": 40.7128,\n      \"longitude\": -74.0060\n    }\n  },\n  \"configuration\": {\n    \"samplingInterval\": 15,\n    \"activeSensors\": [\n      \"temperature\",\n      \"humidity\",\n      \"wind\"\n    ],\n    \"sensorThresholds\": {\n      \"temperature\": 30.0,\n      \"humidity\": 60.0,\n      \"wind\": 15.0\n    }\n  },\n  \"readings\": [\n    {\n      \"timestamp\": \"2023-10-10T14:30:00Z\",\n      \"temperature\": 27.5,\n      \"humidity\": 55,\n      \"wind\": 10\n    },\n    {\n      \"timestamp\": \"2023-10-10T14:45:00Z\",\n      \"temperature\": 28.0,\n      \"humidity\": 50,\n      \"wind\": 8\n    }\n  ],\n  \"alerts\": [\n    {\n      \"id\": 1,\n      \"type\": \"temperature\",\n      \"message\": \"High temperature warning\",\n      \"active\": false\n    },\n    {\n      \"id\": 2,\n      \"type\": \"wind\",\n      \"message\": \"High wind speed warning\",\n      \"active\": true\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must contain a top-level key for \"stationId\" with a string value, matching the JSON code.  \n• There must be a \"location\" section that includes a \"city\" key with a string value and a \"coordinates\" section containing \"latitude\" and \"longitude\" keys with numeric values.  \n• A \"configuration\" section must be present, featuring keys for \"samplingInterval\" (numeric), \"activeSensors\" (a list of sensor names as strings), and \"sensorThresholds\" (a mapping of sensor types to their numeric threshold values).  \n• The \"activeSensors\" list within \"configuration\" must include exactly the sensors \"temperature\", \"humidity\", and \"wind\" as string entries.  \n• There must be a \"readings\" section represented as a list, where each item is a mapping containing \"timestamp\" (string in ISO 8601 format), \"temperature\" (numeric), \"humidity\" (numeric), and \"wind\" (numeric).  \n• Exactly two reading entries must be included within the \"readings\" list, with their respective values matching the provided JSON data.  \n• An \"alerts\" section must be defined as a list, where each alert includes keys for \"id\" (numeric), \"type\" (string), \"message\" (string), and \"active\" (boolean).  \n• The \"alerts\" section must contain exactly two alerts, each preserving the mapping of keys and values provided in the JSON code.",
            "task_id": "051812",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "stationId",
                "location[city]",
                "location[coordinates][latitude]",
                "location[coordinates][longitude]",
                "configuration[samplingInterval]",
                "configuration[activeSensors]",
                "configuration[sensorThresholds]",
                "readings[0][timestamp]",
                "readings[0][temperature]",
                "readings[0][humidity]",
                "readings[0][wind]",
                "readings[1][timestamp]",
                "readings[1][temperature]",
                "readings[1][humidity]",
                "readings[1][wind]",
                "alerts[0][id]",
                "alerts[0][type]",
                "alerts[0][message]",
                "alerts[0][active]",
                "alerts[1][id]",
                "alerts[1][type]",
                "alerts[1][message]",
                "alerts[1][active]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051812_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"stationId\": \"WS-001\",\n  \"location\": {\n    \"city\": \"New York\",\n    \"coordinates\": {\n      \"latitude\": 40.7128,\n      \"longitude\": -74.0060\n    }\n  },\n  \"configuration\": {\n    \"samplingInterval\": 15,\n    \"activeSensors\": [\n      \"temperature\",\n      \"humidity\",\n      \"wind\"\n    ],\n    \"sensorThresholds\": {\n      \"temperature\": 30.0,\n      \"humidity\": 60.0,\n      \"wind\": 15.0\n    }\n  },\n  \"readings\": [\n    {\n      \"timestamp\": \"2023-10-10T14:30:00Z\",\n      \"temperature\": 27.5,\n      \"humidity\": 55,\n      \"wind\": 10\n    },\n    {\n      \"timestamp\": \"2023-10-10T14:45:00Z\",\n      \"temperature\": 28.0,\n      \"humidity\": 50,\n      \"wind\": 8\n    }\n  ],\n  \"alerts\": [\n    {\n      \"id\": 1,\n      \"type\": \"temperature\",\n      \"message\": \"High temperature warning\",\n      \"active\": false\n    },\n    {\n      \"id\": 2,\n      \"type\": \"wind\",\n      \"message\": \"High wind speed warning\",\n      \"active\": true\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051812_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "stationId",
                                "location[city]",
                                "location[coordinates][latitude]",
                                "location[coordinates][longitude]",
                                "configuration[samplingInterval]",
                                "configuration[activeSensors]",
                                "configuration[sensorThresholds]",
                                "readings[0][timestamp]",
                                "readings[0][temperature]",
                                "readings[0][humidity]",
                                "readings[0][wind]",
                                "readings[1][timestamp]",
                                "readings[1][temperature]",
                                "readings[1][humidity]",
                                "readings[1][wind]",
                                "alerts[0][id]",
                                "alerts[0][type]",
                                "alerts[0][message]",
                                "alerts[0][active]",
                                "alerts[1][id]",
                                "alerts[1][type]",
                                "alerts[1][message]",
                                "alerts[1][active]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"conferenceName\": \"Tech Innovators Summit 2023\",\n  \"venue\": {\n    \"name\": \"Innovation Center\",\n    \"address\": \"123 Tech Road, Silicon Valley\",\n    \"rooms\": [\n      \"Main Auditorium\",\n      \"Breakout Room A\",\n      \"Breakout Room B\"\n    ]\n  },\n  \"dates\": {\n    \"start\": \"2023-09-15\",\n    \"end\": \"2023-09-17\"\n  },\n  \"sessions\": [\n    {\n      \"title\": \"Future of Artificial Intelligence\",\n      \"speaker\": \"Dr. Anna Smith\",\n      \"startTime\": \"2023-09-15T09:00:00\",\n      \"durationMinutes\": 60\n    },\n    {\n      \"title\": \"Cybersecurity Trends\",\n      \"speaker\": \"Mr. John Doe\",\n      \"startTime\": \"2023-09-15T11:00:00\",\n      \"durationMinutes\": 45\n    },\n    {\n      \"title\": \"Innovative Startups Panel\",\n      \"speaker\": \"Various\",\n      \"startTime\": \"2023-09-16T14:00:00\",\n      \"durationMinutes\": 90\n    }\n  ],\n  \"attendees\": [\n    {\n      \"name\": \"Alice Johnson\",\n      \"ticketType\": \"VIP\",\n      \"registrationId\": \"VIP12345\"\n    },\n    {\n      \"name\": \"Bob Smith\",\n      \"ticketType\": \"General\",\n      \"registrationId\": \"GEN67890\"\n    },\n    {\n      \"name\": \"Carol Davis\",\n      \"ticketType\": \"General\",\n      \"registrationId\": \"GEN11223\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must include a top-level key for the conference details, with a key for the conference name whose value exactly matches \"Tech Innovators Summit 2023\".  \n• The output must include a \"venue\" section containing keys for \"name\", \"address\", and \"rooms\", with \"rooms\" represented as a list containing \"Main Auditorium\", \"Breakout Room A\", and \"Breakout Room B\".  \n• The output must include a \"dates\" section with keys \"start\" and \"end\", where the values are the strings \"2023-09-15\" and \"2023-09-17\" respectively.  \n• The output must include a \"sessions\" section that is a list, with each session item containing the keys \"title\", \"speaker\", \"startTime\", and \"durationMinutes\".  \n• The output must contain exactly three session items with the following data: one session with title \"Future of Artificial Intelligence\", speaker \"Dr. Anna Smith\", startTime \"2023-09-15T09:00:00\", and durationMinutes 60; a second session with title \"Cybersecurity Trends\", speaker \"Mr. John Doe\", startTime \"2023-09-15T11:00:00\", and durationMinutes 45; and a third session with title \"Innovative Startups Panel\", speaker \"Various\", startTime \"2023-09-16T14:00:00\", and durationMinutes 90.  \n• The output must include an \"attendees\" section that is a list, where each attendee item comprises the keys \"name\", \"ticketType\", and \"registrationId\".  \n• The output must contain exactly three attendee items with the following data: one attendee with name \"Alice Johnson\", ticketType \"VIP\", registrationId \"VIP12345\"; a second attendee with name \"Bob Smith\", ticketType \"General\", registrationId \"GEN67890\"; and a third attendee with name \"Carol Davis\", ticketType \"General\", registrationId \"GEN11223\".",
            "task_id": "051813",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference[name]",
                "venue[name]",
                "venue[address]",
                "venue[rooms]",
                "venue[rooms][0]",
                "venue[rooms][1]",
                "venue[rooms][2]",
                "dates[start]",
                "dates[end]",
                "sessions",
                "sessions[0][title]",
                "sessions[0][speaker]",
                "sessions[0][startTime]",
                "sessions[0][durationMinutes]",
                "sessions[1][title]",
                "sessions[1][speaker]",
                "sessions[1][startTime]",
                "sessions[1][durationMinutes]",
                "sessions[2][title]",
                "sessions[2][speaker]",
                "sessions[2][startTime]",
                "sessions[2][durationMinutes]",
                "attendees",
                "attendees[0][name]",
                "attendees[0][ticketType]",
                "attendees[0][registrationId]",
                "attendees[1][name]",
                "attendees[1][ticketType]",
                "attendees[1][registrationId]",
                "attendees[2][name]",
                "attendees[2][ticketType]",
                "attendees[2][registrationId]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051813_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"conferenceName\": \"Tech Innovators Summit 2023\",\n  \"venue\": {\n    \"name\": \"Innovation Center\",\n    \"address\": \"123 Tech Road, Silicon Valley\",\n    \"rooms\": [\n      \"Main Auditorium\",\n      \"Breakout Room A\",\n      \"Breakout Room B\"\n    ]\n  },\n  \"dates\": {\n    \"start\": \"2023-09-15\",\n    \"end\": \"2023-09-17\"\n  },\n  \"sessions\": [\n    {\n      \"title\": \"Future of Artificial Intelligence\",\n      \"speaker\": \"Dr. Anna Smith\",\n      \"startTime\": \"2023-09-15T09:00:00\",\n      \"durationMinutes\": 60\n    },\n    {\n      \"title\": \"Cybersecurity Trends\",\n      \"speaker\": \"Mr. John Doe\",\n      \"startTime\": \"2023-09-15T11:00:00\",\n      \"durationMinutes\": 45\n    },\n    {\n      \"title\": \"Innovative Startups Panel\",\n      \"speaker\": \"Various\",\n      \"startTime\": \"2023-09-16T14:00:00\",\n      \"durationMinutes\": 90\n    }\n  ],\n  \"attendees\": [\n    {\n      \"name\": \"Alice Johnson\",\n      \"ticketType\": \"VIP\",\n      \"registrationId\": \"VIP12345\"\n    },\n    {\n      \"name\": \"Bob Smith\",\n      \"ticketType\": \"General\",\n      \"registrationId\": \"GEN67890\"\n    },\n    {\n      \"name\": \"Carol Davis\",\n      \"ticketType\": \"General\",\n      \"registrationId\": \"GEN11223\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051813_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference[name]",
                                "venue[name]",
                                "venue[address]",
                                "venue[rooms]",
                                "venue[rooms][0]",
                                "venue[rooms][1]",
                                "venue[rooms][2]",
                                "dates[start]",
                                "dates[end]",
                                "sessions",
                                "sessions[0][title]",
                                "sessions[0][speaker]",
                                "sessions[0][startTime]",
                                "sessions[0][durationMinutes]",
                                "sessions[1][title]",
                                "sessions[1][speaker]",
                                "sessions[1][startTime]",
                                "sessions[1][durationMinutes]",
                                "sessions[2][title]",
                                "sessions[2][speaker]",
                                "sessions[2][startTime]",
                                "sessions[2][durationMinutes]",
                                "attendees",
                                "attendees[0][name]",
                                "attendees[0][ticketType]",
                                "attendees[0][registrationId]",
                                "attendees[1][name]",
                                "attendees[1][ticketType]",
                                "attendees[1][registrationId]",
                                "attendees[2][name]",
                                "attendees[2][ticketType]",
                                "attendees[2][registrationId]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"homeProfile\": {\n    \"owner\": \"Jane Doe\",\n    \"address\": \"123 Elm Street, Springfield\",\n    \"setupDate\": \"2023-01-15\"\n  },\n  \"devices\": [\n    {\n      \"deviceId\": \"device001\",\n      \"type\": \"thermostat\",\n      \"model\": \"Nest Thermostat E\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"device002\",\n      \"type\": \"smart_light\",\n      \"model\": \"Philips Hue Ambient\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"device003\",\n      \"type\": \"security_camera\",\n      \"model\": \"Arlo Pro 4\",\n      \"status\": \"inactive\"\n    }\n  ],\n  \"rooms\": [\n    {\n      \"name\": \"Living Room\",\n      \"devices\": [\"device002\", \"device003\"],\n      \"dimensions\": {\n        \"length\": 5.0,\n        \"width\": 4.0\n      }\n    },\n    {\n      \"name\": \"Bedroom\",\n      \"devices\": [\"device001\"],\n      \"dimensions\": {\n        \"length\": 4.0,\n        \"width\": 3.5\n      }\n    }\n  ],\n  \"automations\": [\n    {\n      \"automationId\": \"auto01\",\n      \"description\": \"Evening dimming\",\n      \"trigger\": \"sunset\",\n      \"actions\": [\n        \"dim lights\",\n        \"set thermostat to 68°F\"\n      ]\n    },\n    {\n      \"automationId\": \"auto02\",\n      \"description\": \"Morning wake up\",\n      \"trigger\": \"6:30 AM\",\n      \"actions\": [\n        \"brighten lights\",\n        \"start coffee maker\"\n      ]\n    }\n  ],\n  \"systemStatus\": {\n    \"lastUpdated\": \"2023-10-05T08:00:00Z\",\n    \"operational\": true\n  }\n}\n</code>",
            "feature_requirements": "• The YAML output must include a top-level mapping containing the keys: homeProfile, devices, rooms, automations, and systemStatus.  \n• The homeProfile mapping must include the keys: owner, address, and setupDate, each with a string value.  \n• The devices key must map to a list of entries, where each entry is a mapping containing deviceId, type, model, and status as keys with string values.  \n• The rooms key must map to a list of entries, where each entry is a mapping that includes a name (string), devices (a list of strings), and dimensions (a mapping with keys length and width as numeric values).  \n• The automations key must map to a list of entries, where each entry is a mapping including automationId, description, trigger (all strings), and actions, which must be a list of strings.  \n• The systemStatus mapping must include a lastUpdated key with a string formatted as a timestamp and an operational key with a boolean value.",
            "task_id": "051814",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "homeProfile",
                "devices",
                "rooms",
                "automations",
                "systemStatus",
                "homeProfile[owner]",
                "homeProfile[address]",
                "homeProfile[setupDate]",
                "devices[][deviceId]",
                "devices[][type]",
                "devices[][model]",
                "devices[][status]",
                "rooms[][name]",
                "rooms[][devices]",
                "rooms[][dimensions][length]",
                "rooms[][dimensions][width]",
                "automations[][automationId]",
                "automations[][description]",
                "automations[][trigger]",
                "automations[][actions]",
                "systemStatus[lastUpdated]",
                "systemStatus[operational]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051814_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"homeProfile\": {\n    \"owner\": \"Jane Doe\",\n    \"address\": \"123 Elm Street, Springfield\",\n    \"setupDate\": \"2023-01-15\"\n  },\n  \"devices\": [\n    {\n      \"deviceId\": \"device001\",\n      \"type\": \"thermostat\",\n      \"model\": \"Nest Thermostat E\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"device002\",\n      \"type\": \"smart_light\",\n      \"model\": \"Philips Hue Ambient\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"device003\",\n      \"type\": \"security_camera\",\n      \"model\": \"Arlo Pro 4\",\n      \"status\": \"inactive\"\n    }\n  ],\n  \"rooms\": [\n    {\n      \"name\": \"Living Room\",\n      \"devices\": [\"device002\", \"device003\"],\n      \"dimensions\": {\n        \"length\": 5.0,\n        \"width\": 4.0\n      }\n    },\n    {\n      \"name\": \"Bedroom\",\n      \"devices\": [\"device001\"],\n      \"dimensions\": {\n        \"length\": 4.0,\n        \"width\": 3.5\n      }\n    }\n  ],\n  \"automations\": [\n    {\n      \"automationId\": \"auto01\",\n      \"description\": \"Evening dimming\",\n      \"trigger\": \"sunset\",\n      \"actions\": [\n        \"dim lights\",\n        \"set thermostat to 68°F\"\n      ]\n    },\n    {\n      \"automationId\": \"auto02\",\n      \"description\": \"Morning wake up\",\n      \"trigger\": \"6:30 AM\",\n      \"actions\": [\n        \"brighten lights\",\n        \"start coffee maker\"\n      ]\n    }\n  ],\n  \"systemStatus\": {\n    \"lastUpdated\": \"2023-10-05T08:00:00Z\",\n    \"operational\": true\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051814_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "homeProfile",
                                "devices",
                                "rooms",
                                "automations",
                                "systemStatus",
                                "homeProfile[owner]",
                                "homeProfile[address]",
                                "homeProfile[setupDate]",
                                "devices[][deviceId]",
                                "devices[][type]",
                                "devices[][model]",
                                "devices[][status]",
                                "rooms[][name]",
                                "rooms[][devices]",
                                "rooms[][dimensions][length]",
                                "rooms[][dimensions][width]",
                                "automations[][automationId]",
                                "automations[][description]",
                                "automations[][trigger]",
                                "automations[][actions]",
                                "systemStatus[lastUpdated]",
                                "systemStatus[operational]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"store\": {\n    \"storeName\": \"The Book Nook\",\n    \"address\": \"123 Main St, Anytown, USA\",\n    \"contact\": {\n      \"phone\": \"555-1234\",\n      \"email\": \"info@booknook.com\"\n    }\n  },\n  \"books\": [\n    {\n      \"title\": \"The Art of Coding\",\n      \"author\": \"Jane Doe\",\n      \"price\": 29.99,\n      \"genres\": [\"Technology\", \"Education\"]\n    },\n    {\n      \"title\": \"Mystery in the Library\",\n      \"author\": \"John Smith\",\n      \"price\": 19.5,\n      \"genres\": [\"Mystery\", \"Thriller\"]\n    },\n    {\n      \"title\": \"Adventures in JSON\",\n      \"author\": \"Alice Johnson\",\n      \"price\": 24.95,\n      \"genres\": [\"Programming\", \"Fiction\"]\n    }\n  ],\n  \"employees\": [\n    {\n      \"name\": \"Emily Clarke\",\n      \"role\": \"Manager\",\n      \"shift\": \"Full-time\"\n    },\n    {\n      \"name\": \"Robert Brown\",\n      \"role\": \"Sales Associate\",\n      \"shift\": \"Part-time\"\n    }\n  ],\n  \"openHours\": {\n    \"monday\": \"9:00 - 18:00\",\n    \"tuesday\": \"9:00 - 18:00\",\n    \"wednesday\": \"9:00 - 18:00\",\n    \"thursday\": \"9:00 - 18:00\",\n    \"friday\": \"9:00 - 18:00\",\n    \"saturday\": \"10:00 - 16:00\",\n    \"sunday\": \"Closed\"\n  }\n}\n</code>",
            "feature_requirements": "• Must include a top-level key for \"store\" that holds nested keys for \"storeName\", \"address\", and \"contact\", where \"contact\" itself contains keys for \"phone\" and \"email\".\n• Must include a top-level key for \"books\" represented as a list, with each list element containing keys for \"title\", \"author\", \"price\", and \"genres\".\n• Each book’s \"genres\" must be represented as a list of string values.\n• Must include a top-level key for \"employees\" represented as a list, with each element containing keys for \"name\", \"role\", and \"shift\".\n• Must include a top-level key for \"openHours\" that maps days of the week (such as monday, tuesday, etc.) to their corresponding values.",
            "task_id": "051815",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "store",
                "store[storeName]",
                "store[address]",
                "store[contact]",
                "store[contact][phone]",
                "store[contact][email]",
                "books",
                "books[][title]",
                "books[][author]",
                "books[][price]",
                "books[][genres]",
                "employees",
                "employees[][name]",
                "employees[][role]",
                "employees[][shift]",
                "openHours"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051815_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"store\": {\n    \"storeName\": \"The Book Nook\",\n    \"address\": \"123 Main St, Anytown, USA\",\n    \"contact\": {\n      \"phone\": \"555-1234\",\n      \"email\": \"info@booknook.com\"\n    }\n  },\n  \"books\": [\n    {\n      \"title\": \"The Art of Coding\",\n      \"author\": \"Jane Doe\",\n      \"price\": 29.99,\n      \"genres\": [\"Technology\", \"Education\"]\n    },\n    {\n      \"title\": \"Mystery in the Library\",\n      \"author\": \"John Smith\",\n      \"price\": 19.5,\n      \"genres\": [\"Mystery\", \"Thriller\"]\n    },\n    {\n      \"title\": \"Adventures in JSON\",\n      \"author\": \"Alice Johnson\",\n      \"price\": 24.95,\n      \"genres\": [\"Programming\", \"Fiction\"]\n    }\n  ],\n  \"employees\": [\n    {\n      \"name\": \"Emily Clarke\",\n      \"role\": \"Manager\",\n      \"shift\": \"Full-time\"\n    },\n    {\n      \"name\": \"Robert Brown\",\n      \"role\": \"Sales Associate\",\n      \"shift\": \"Part-time\"\n    }\n  ],\n  \"openHours\": {\n    \"monday\": \"9:00 - 18:00\",\n    \"tuesday\": \"9:00 - 18:00\",\n    \"wednesday\": \"9:00 - 18:00\",\n    \"thursday\": \"9:00 - 18:00\",\n    \"friday\": \"9:00 - 18:00\",\n    \"saturday\": \"10:00 - 16:00\",\n    \"sunday\": \"Closed\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051815_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "store",
                                "store[storeName]",
                                "store[address]",
                                "store[contact]",
                                "store[contact][phone]",
                                "store[contact][email]",
                                "books",
                                "books[][title]",
                                "books[][author]",
                                "books[][price]",
                                "books[][genres]",
                                "employees",
                                "employees[][name]",
                                "employees[][role]",
                                "employees[][shift]",
                                "openHours"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"company\": {\n    \"name\": \"TechNova Solutions\",\n    \"established\": 2012,\n    \"employees\": [\n      {\n        \"id\": 101,\n        \"name\": \"Alice Johnson\",\n        \"role\": \"Software Engineer\",\n        \"skills\": [\"JavaScript\", \"Python\", \"SQL\"]\n      },\n      {\n        \"id\": 102,\n        \"name\": \"Bob Smith\",\n        \"role\": \"Product Manager\",\n        \"skills\": [\"Agile\", \"Scrum\", \"User Research\"]\n      }\n    ],\n    \"departments\": [\"Engineering\", \"Product Management\", \"Design\", \"Support\"]\n  },\n  \"projects\": [\n    {\n      \"projectId\": \"TN-001\",\n      \"name\": \"NextGen Platform\",\n      \"status\": \"In Progress\",\n      \"team\": [\"Alice Johnson\", \"Bob Smith\"]\n    },\n    {\n      \"projectId\": \"TN-002\",\n      \"name\": \"Mobile App Revamp\",\n      \"status\": \"Completed\",\n      \"team\": [\"Alice Johnson\"]\n    }\n  ],\n  \"locations\": [\n    {\n      \"city\": \"San Francisco\",\n      \"country\": \"USA\",\n      \"officeCount\": 2\n    },\n    {\n      \"city\": \"Berlin\",\n      \"country\": \"Germany\",\n      \"officeCount\": 1\n    }\n  ],\n  \"active\": true\n}\n</code>",
            "feature_requirements": "• The output must include four root-level keys: company, projects, locations, and active.  \n• Under the company key, there must be sub-keys for name, established (a number), employees, and departments.  \n• Each element within the employees list must include id (a number), name (a string), role (a string), and skills (a list of strings).  \n• The departments key under company must be a list containing department names.  \n• Each project in the projects list must contain projectId, name, status, and team (the team being a list of strings).  \n• Each element in the locations list must include city, country, and officeCount (a number).  \n• The active key must be present at the root level with a boolean true value.",
            "task_id": "051816",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "company",
                "company[name]",
                "company[established]",
                "company[employees]",
                "company[employees][*][id]",
                "company[employees][*][name]",
                "company[employees][*][role]",
                "company[employees][*][skills]",
                "company[departments]",
                "projects",
                "projects[*][projectId]",
                "projects[*][name]",
                "projects[*][status]",
                "projects[*][team]",
                "locations",
                "locations[*][city]",
                "locations[*][country]",
                "locations[*][officeCount]",
                "active"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051816_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"company\": {\n    \"name\": \"TechNova Solutions\",\n    \"established\": 2012,\n    \"employees\": [\n      {\n        \"id\": 101,\n        \"name\": \"Alice Johnson\",\n        \"role\": \"Software Engineer\",\n        \"skills\": [\"JavaScript\", \"Python\", \"SQL\"]\n      },\n      {\n        \"id\": 102,\n        \"name\": \"Bob Smith\",\n        \"role\": \"Product Manager\",\n        \"skills\": [\"Agile\", \"Scrum\", \"User Research\"]\n      }\n    ],\n    \"departments\": [\"Engineering\", \"Product Management\", \"Design\", \"Support\"]\n  },\n  \"projects\": [\n    {\n      \"projectId\": \"TN-001\",\n      \"name\": \"NextGen Platform\",\n      \"status\": \"In Progress\",\n      \"team\": [\"Alice Johnson\", \"Bob Smith\"]\n    },\n    {\n      \"projectId\": \"TN-002\",\n      \"name\": \"Mobile App Revamp\",\n      \"status\": \"Completed\",\n      \"team\": [\"Alice Johnson\"]\n    }\n  ],\n  \"locations\": [\n    {\n      \"city\": \"San Francisco\",\n      \"country\": \"USA\",\n      \"officeCount\": 2\n    },\n    {\n      \"city\": \"Berlin\",\n      \"country\": \"Germany\",\n      \"officeCount\": 1\n    }\n  ],\n  \"active\": true\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051816_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "company",
                                "company[name]",
                                "company[established]",
                                "company[employees]",
                                "company[employees][*][id]",
                                "company[employees][*][name]",
                                "company[employees][*][role]",
                                "company[employees][*][skills]",
                                "company[departments]",
                                "projects",
                                "projects[*][projectId]",
                                "projects[*][name]",
                                "projects[*][status]",
                                "projects[*][team]",
                                "locations",
                                "locations[*][city]",
                                "locations[*][country]",
                                "locations[*][officeCount]",
                                "active"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"project\": \"DataConverter\",\n  \"metadata\": {\n    \"author\": \"Jane Doe\",\n    \"created\": \"2023-10-12\",\n    \"version\": \"1.0.3\"\n  },\n  \"config\": {\n    \"enableLogging\": true,\n    \"maxItems\": 50,\n    \"supportedModes\": [\"auto\", \"manual\", \"hybrid\"]\n  },\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"role\": \"admin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"role\": \"user\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"transactionId\": \"TX1001\",\n        \"amount\": 250.75,\n        \"currency\": \"USD\"\n      },\n      {\n        \"transactionId\": \"TX1002\",\n        \"amount\": 95.50,\n        \"currency\": \"EUR\"\n      }\n    ]\n  },\n  \"logs\": []\n}\n</code>",
            "feature_requirements": "• The output must include a top-level key named \"project\" with the value \"DataConverter\".\n• The output must include a \"metadata\" section containing keys \"author\", \"created\", and \"version\" with values \"Jane Doe\", \"2023-10-12\", and \"1.0.3\", respectively.\n• The output must include a \"config\" section with an \"enableLogging\" key set to a true boolean value.\n• The \"config\" section must also include a \"maxItems\" key with the integer value 50.\n• The \"config\" section must contain a \"supportedModes\" key that holds a list of three strings: \"auto\", \"manual\", and \"hybrid\".\n• The output must include a \"data\" section with a \"users\" list, where each user entry contains an \"id\", \"name\", and \"role\" key.\n• The \"data\" section must also include a \"transactions\" list, where each transaction entry contains \"transactionId\", \"amount\", and \"currency\" keys.\n• The output must include a top-level \"logs\" key that holds an empty list.",
            "task_id": "051817",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project",
                "metadata[author]",
                "metadata[created]",
                "metadata[version]",
                "config[enableLogging]",
                "config[maxItems]",
                "config[supportedModes]",
                "data[users]",
                "data[users][][id]",
                "data[users][][name]",
                "data[users][][role]",
                "data[transactions]",
                "data[transactions][][transactionId]",
                "data[transactions][][amount]",
                "data[transactions][][currency]",
                "logs"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051817_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"project\": \"DataConverter\",\n  \"metadata\": {\n    \"author\": \"Jane Doe\",\n    \"created\": \"2023-10-12\",\n    \"version\": \"1.0.3\"\n  },\n  \"config\": {\n    \"enableLogging\": true,\n    \"maxItems\": 50,\n    \"supportedModes\": [\"auto\", \"manual\", \"hybrid\"]\n  },\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"role\": \"admin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"role\": \"user\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"transactionId\": \"TX1001\",\n        \"amount\": 250.75,\n        \"currency\": \"USD\"\n      },\n      {\n        \"transactionId\": \"TX1002\",\n        \"amount\": 95.50,\n        \"currency\": \"EUR\"\n      }\n    ]\n  },\n  \"logs\": []\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051817_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project",
                                "metadata[author]",
                                "metadata[created]",
                                "metadata[version]",
                                "config[enableLogging]",
                                "config[maxItems]",
                                "config[supportedModes]",
                                "data[users]",
                                "data[users][][id]",
                                "data[users][][name]",
                                "data[users][][role]",
                                "data[transactions]",
                                "data[transactions][][transactionId]",
                                "data[transactions][][amount]",
                                "data[transactions][][currency]",
                                "logs"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"systemSettings\": {\n    \"environment\": \"production\",\n    \"version\": \"1.4.2\",\n    \"features\": [\n      \"login\",\n      \"payment\",\n      \"notifications\"\n    ],\n    \"maintenanceMode\": false\n  },\n  \"userProfiles\": [\n    {\n      \"userID\": \"U1001\",\n      \"username\": \"jdoe\",\n      \"role\": \"admin\",\n      \"preferences\": {\n        \"theme\": \"dark\",\n        \"language\": \"en\"\n      }\n    },\n    {\n      \"userID\": \"U1002\",\n      \"username\": \"asmith\",\n      \"role\": \"editor\",\n      \"preferences\": {\n        \"theme\": \"light\",\n        \"language\": \"fr\"\n      }\n    }\n  ],\n  \"reports\": {\n    \"daily\": {\n      \"generated\": true,\n      \"summary\": \"Operations are stable\",\n      \"alerts\": 2\n    },\n    \"monthly\": {\n      \"generated\": false,\n      \"summary\": \"No issues reported\",\n      \"alerts\": 0\n    }\n  },\n  \"activityLog\": [\n    {\n      \"event\": \"login\",\n      \"timestamp\": \"2023-10-05T08:30:00Z\",\n      \"userID\": \"U1001\"\n    },\n    {\n      \"event\": \"update\",\n      \"timestamp\": \"2023-10-05T09:15:00Z\",\n      \"userID\": \"U1002\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The YAML output must include four top-level keys matching the JSON structure: systemSettings, userProfiles, reports, and activityLog.  \n• Under systemSettings, the output must contain the keys: environment, version, features, and maintenanceMode; the features key must represent a list containing the strings \"login\", \"payment\", and \"notifications\".  \n• The userProfiles key must map to a list of objects, where each object includes userID, username, role, and a nested preferences key.  \n• Each preferences object within userProfiles must include the keys: theme and language.  \n• The reports key must map to an object that includes two keys: daily and monthly, each representing separate report objects.  \n• Both the daily and monthly report objects must contain the keys: generated (a boolean), summary (a string), and alerts (a number).  \n• The activityLog key must map to a list of objects, and every object in that list must include the keys: event, timestamp, and userID.  \n• The YAML output must preserve the correct data types (e.g., booleans, numbers, lists, and strings) as represented in the original JSON.",
            "task_id": "051818",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "systemSettings",
                "systemSettings[environment]",
                "systemSettings[version]",
                "systemSettings[features]",
                "systemSettings[maintenanceMode]",
                "userProfiles",
                "userProfiles[][userID]",
                "userProfiles[][username]",
                "userProfiles[][role]",
                "userProfiles[][preferences]",
                "userProfiles[][preferences][theme]",
                "userProfiles[][preferences][language]",
                "reports",
                "reports[daily]",
                "reports[daily][generated]",
                "reports[daily][summary]",
                "reports[daily][alerts]",
                "reports[monthly]",
                "reports[monthly][generated]",
                "reports[monthly][summary]",
                "reports[monthly][alerts]",
                "activityLog",
                "activityLog[][event]",
                "activityLog[][timestamp]",
                "activityLog[][userID]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051818_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"systemSettings\": {\n    \"environment\": \"production\",\n    \"version\": \"1.4.2\",\n    \"features\": [\n      \"login\",\n      \"payment\",\n      \"notifications\"\n    ],\n    \"maintenanceMode\": false\n  },\n  \"userProfiles\": [\n    {\n      \"userID\": \"U1001\",\n      \"username\": \"jdoe\",\n      \"role\": \"admin\",\n      \"preferences\": {\n        \"theme\": \"dark\",\n        \"language\": \"en\"\n      }\n    },\n    {\n      \"userID\": \"U1002\",\n      \"username\": \"asmith\",\n      \"role\": \"editor\",\n      \"preferences\": {\n        \"theme\": \"light\",\n        \"language\": \"fr\"\n      }\n    }\n  ],\n  \"reports\": {\n    \"daily\": {\n      \"generated\": true,\n      \"summary\": \"Operations are stable\",\n      \"alerts\": 2\n    },\n    \"monthly\": {\n      \"generated\": false,\n      \"summary\": \"No issues reported\",\n      \"alerts\": 0\n    }\n  },\n  \"activityLog\": [\n    {\n      \"event\": \"login\",\n      \"timestamp\": \"2023-10-05T08:30:00Z\",\n      \"userID\": \"U1001\"\n    },\n    {\n      \"event\": \"update\",\n      \"timestamp\": \"2023-10-05T09:15:00Z\",\n      \"userID\": \"U1002\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051818_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "systemSettings",
                                "systemSettings[environment]",
                                "systemSettings[version]",
                                "systemSettings[features]",
                                "systemSettings[maintenanceMode]",
                                "userProfiles",
                                "userProfiles[][userID]",
                                "userProfiles[][username]",
                                "userProfiles[][role]",
                                "userProfiles[][preferences]",
                                "userProfiles[][preferences][theme]",
                                "userProfiles[][preferences][language]",
                                "reports",
                                "reports[daily]",
                                "reports[daily][generated]",
                                "reports[daily][summary]",
                                "reports[daily][alerts]",
                                "reports[monthly]",
                                "reports[monthly][generated]",
                                "reports[monthly][summary]",
                                "reports[monthly][alerts]",
                                "activityLog",
                                "activityLog[][event]",
                                "activityLog[][timestamp]",
                                "activityLog[][userID]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"companyInfo\": {\n    \"name\": \"InnovaTech\",\n    \"founded\": 2008,\n    \"headquarters\": \"Boston\",\n    \"departments\": [\n      {\n        \"name\": \"Engineering\",\n        \"teams\": [\"Backend\", \"Frontend\", \"DevOps\"]\n      },\n      {\n        \"name\": \"Marketing\",\n        \"teams\": [\"Digital\", \"Content Creation\"]\n      }\n    ]\n  },\n  \"employees\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\",\n      \"skills\": [\"JavaScript\", \"Python\", \"Docker\"]\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Smith\",\n      \"role\": \"UI/UX Designer\",\n      \"skills\": [\"Sketch\", \"Figma\", \"Adobe XD\"]\n    },\n    {\n      \"id\": 103,\n      \"name\": \"Catherine Lee\",\n      \"role\": \"Product Manager\",\n      \"skills\": [\"Agile\", \"Scrum\", \"Roadmap Planning\"]\n    }\n  ],\n  \"projects\": [\n    {\n      \"projectId\": \"PRJ2023-01\",\n      \"title\": \"NextGen Platform\",\n      \"status\": \"Ongoing\",\n      \"milestones\": [\n        {\"name\": \"Prototype\", \"deadline\": \"2023-06-30\"},\n        {\"name\": \"Beta Release\", \"deadline\": \"2023-09-15\"}\n      ]\n    },\n    {\n      \"projectId\": \"PRJ2023-02\",\n      \"title\": \"Mobile App Revamp\",\n      \"status\": \"Planning\",\n      \"milestones\": [\n        {\"name\": \"Design Phase\", \"deadline\": \"2023-07-15\"},\n        {\"name\": \"Development Phase\", \"deadline\": \"2023-10-01\"}\n      ]\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"light\",\n    \"notifications\": true,\n    \"defaultLanguage\": \"en\"\n  }\n}\n</code>",
            "feature_requirements": "• The output must have a top-level key \"companyInfo\" that contains nested keys for \"name\", \"founded\", \"headquarters\", and \"departments\".  \n• The \"departments\" under \"companyInfo\" must be represented as a list where each item includes a \"name\" key and a \"teams\" key containing a list of team names.  \n• The output must include a top-level key \"employees\" represented as a list, with each employee object containing \"id\", \"name\", \"role\", and \"skills\" (where \"skills\" is a list).  \n• The output must have a top-level key \"projects\" represented as a list, where each project object includes \"projectId\", \"title\", \"status\", and \"milestones\" (with \"milestones\" being a list of objects containing \"name\" and \"deadline\").  \n• The output must include a top-level key \"settings\" that contains \"theme\", \"notifications\", and \"defaultLanguage\".  \n• Every list and nested structure in the output must accurately reflect the hierarchy present in the original JSON data.  \n• The YAML output must maintain the same key names and corresponding values as provided in the JSON input.",
            "task_id": "051819",
            "task_name": "Convert JSON to YAML",
            "input_type": "JSON",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "companyInfo",
                "companyInfo[name]",
                "companyInfo[founded]",
                "companyInfo[headquarters]",
                "companyInfo[departments]",
                "companyInfo[departments][][name]",
                "companyInfo[departments][][teams]",
                "employees",
                "employees[][id]",
                "employees[][name]",
                "employees[][role]",
                "employees[][skills]",
                "projects",
                "projects[][projectId]",
                "projects[][title]",
                "projects[][status]",
                "projects[][milestones]",
                "projects[][milestones][][name]",
                "projects[][milestones][][deadline]",
                "settings",
                "settings[theme]",
                "settings[notifications]",
                "settings[defaultLanguage]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051819_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following JSON code to YAML code.\n\n<code>\n{\n  \"companyInfo\": {\n    \"name\": \"InnovaTech\",\n    \"founded\": 2008,\n    \"headquarters\": \"Boston\",\n    \"departments\": [\n      {\n        \"name\": \"Engineering\",\n        \"teams\": [\"Backend\", \"Frontend\", \"DevOps\"]\n      },\n      {\n        \"name\": \"Marketing\",\n        \"teams\": [\"Digital\", \"Content Creation\"]\n      }\n    ]\n  },\n  \"employees\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\",\n      \"skills\": [\"JavaScript\", \"Python\", \"Docker\"]\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Smith\",\n      \"role\": \"UI/UX Designer\",\n      \"skills\": [\"Sketch\", \"Figma\", \"Adobe XD\"]\n    },\n    {\n      \"id\": 103,\n      \"name\": \"Catherine Lee\",\n      \"role\": \"Product Manager\",\n      \"skills\": [\"Agile\", \"Scrum\", \"Roadmap Planning\"]\n    }\n  ],\n  \"projects\": [\n    {\n      \"projectId\": \"PRJ2023-01\",\n      \"title\": \"NextGen Platform\",\n      \"status\": \"Ongoing\",\n      \"milestones\": [\n        {\"name\": \"Prototype\", \"deadline\": \"2023-06-30\"},\n        {\"name\": \"Beta Release\", \"deadline\": \"2023-09-15\"}\n      ]\n    },\n    {\n      \"projectId\": \"PRJ2023-02\",\n      \"title\": \"Mobile App Revamp\",\n      \"status\": \"Planning\",\n      \"milestones\": [\n        {\"name\": \"Design Phase\", \"deadline\": \"2023-07-15\"},\n        {\"name\": \"Development Phase\", \"deadline\": \"2023-10-01\"}\n      ]\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"light\",\n    \"notifications\": true,\n    \"defaultLanguage\": \"en\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051819_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "companyInfo",
                                "companyInfo[name]",
                                "companyInfo[founded]",
                                "companyInfo[headquarters]",
                                "companyInfo[departments]",
                                "companyInfo[departments][][name]",
                                "companyInfo[departments][][teams]",
                                "employees",
                                "employees[][id]",
                                "employees[][name]",
                                "employees[][role]",
                                "employees[][skills]",
                                "projects",
                                "projects[][projectId]",
                                "projects[][title]",
                                "projects[][status]",
                                "projects[][milestones]",
                                "projects[][milestones][][name]",
                                "projects[][milestones][][deadline]",
                                "settings",
                                "settings[theme]",
                                "settings[notifications]",
                                "settings[defaultLanguage]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<libraryData>\n  <libraryInfo>\n    <libraryID>LIB123</libraryID>\n    <name>Downtown Public Library</name>\n    <location>\n      <address>123 Main St</address>\n      <city>Metropolis</city>\n      <state>NY</state>\n      <zip>10001</zip>\n    </location>\n  </libraryInfo>\n  <books>\n    <book>\n      <bookID>B001</bookID>\n      <title>The Great Adventure</title>\n      <author>Alice Johnson</author>\n      <genre>Adventure</genre>\n      <publishedYear>2005</publishedYear>\n    </book>\n    <book>\n      <bookID>B002</bookID>\n      <title>Learning XML</title>\n      <author>John Smith</author>\n      <genre>Educational</genre>\n      <publishedYear>2015</publishedYear>\n    </book>\n    <book>\n      <bookID>B003</bookID>\n      <title>Mysteries of the Universe</title>\n      <author>Mary Williams</author>\n      <genre>Science</genre>\n      <publishedYear>2018</publishedYear>\n    </book>\n  </books>\n  <staff>\n    <member>\n      <memberID>S001</memberID>\n      <name>Emma Brown</name>\n      <role>Manager</role>\n      <email>emma.brown@example.com</email>\n    </member>\n    <member>\n      <memberID>S002</memberID>\n      <name>Liam Davis</name>\n      <role>Librarian</role>\n      <email>liam.davis@example.com</email>\n    </member>\n  </staff>\n  <events>\n    <event>\n      <eventID>E001</eventID>\n      <title>Author Meet and Greet</title>\n      <date>2023-09-15</date>\n      <location>Auditorium</location>\n    </event>\n    <event>\n      <eventID>E002</eventID>\n      <title>Book Donation Drive</title>\n      <date>2023-10-05</date>\n      <location>Community Hall</location>\n    </event>\n    <event>\n      <eventID>E003</eventID>\n      <title>Reading Workshop</title>\n      <date>2023-11-20</date>\n      <location>Conference Room</location>\n    </event>\n  </events>\n  <statistics>\n    <visitorsPerMonth>1450</visitorsPerMonth>\n    <booksAvailable>3200</booksAvailable>\n    <eventsScheduled>12</eventsScheduled>\n  </statistics>\n</libraryData>\n</code>",
            "feature_requirements": "• The CSV output must include header rows that clearly label each column for every data section.  \n• The output must include a section for library information with columns: libraryID, name, address, city, state, and zip.  \n• There must be a separate CSV section for books, containing one row per book with columns: bookID, title, author, genre, and publishedYear.  \n• The CSV output must have a distinct section for staff data, with headers: memberID, name, role, and email, and one row for each member.  \n• An events section must be present in the CSV, with each event represented by a row containing eventID, title, date, and location.  \n• A statistics section should be included, containing a single row with the values for visitorsPerMonth, booksAvailable, and eventsScheduled.  \n• The CSV output must present each section in plain comma-separated format, ensuring that the number of CSV rows for each section matches the number of corresponding XML nodes.",
            "task_id": "170200",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library.rows[*][libraryID]",
                "library.rows[*][name]",
                "library.rows[*][address]",
                "library.rows[*][city]",
                "library.rows[*][state]",
                "library.rows[*][zip]",
                "books.rows[*][bookID]",
                "books.rows[*][title]",
                "books.rows[*][author]",
                "books.rows[*][genre]",
                "books.rows[*][publishedYear]",
                "staff.rows[*][memberID]",
                "staff.rows[*][name]",
                "staff.rows[*][role]",
                "staff.rows[*][email]",
                "events.rows[*][eventID]",
                "events.rows[*][title]",
                "events.rows[*][date]",
                "events.rows[*][location]",
                "statistics.rows[0][visitorsPerMonth]",
                "statistics.rows[0][booksAvailable]",
                "statistics.rows[0][eventsScheduled]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170200_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<libraryData>\n  <libraryInfo>\n    <libraryID>LIB123</libraryID>\n    <name>Downtown Public Library</name>\n    <location>\n      <address>123 Main St</address>\n      <city>Metropolis</city>\n      <state>NY</state>\n      <zip>10001</zip>\n    </location>\n  </libraryInfo>\n  <books>\n    <book>\n      <bookID>B001</bookID>\n      <title>The Great Adventure</title>\n      <author>Alice Johnson</author>\n      <genre>Adventure</genre>\n      <publishedYear>2005</publishedYear>\n    </book>\n    <book>\n      <bookID>B002</bookID>\n      <title>Learning XML</title>\n      <author>John Smith</author>\n      <genre>Educational</genre>\n      <publishedYear>2015</publishedYear>\n    </book>\n    <book>\n      <bookID>B003</bookID>\n      <title>Mysteries of the Universe</title>\n      <author>Mary Williams</author>\n      <genre>Science</genre>\n      <publishedYear>2018</publishedYear>\n    </book>\n  </books>\n  <staff>\n    <member>\n      <memberID>S001</memberID>\n      <name>Emma Brown</name>\n      <role>Manager</role>\n      <email>emma.brown@example.com</email>\n    </member>\n    <member>\n      <memberID>S002</memberID>\n      <name>Liam Davis</name>\n      <role>Librarian</role>\n      <email>liam.davis@example.com</email>\n    </member>\n  </staff>\n  <events>\n    <event>\n      <eventID>E001</eventID>\n      <title>Author Meet and Greet</title>\n      <date>2023-09-15</date>\n      <location>Auditorium</location>\n    </event>\n    <event>\n      <eventID>E002</eventID>\n      <title>Book Donation Drive</title>\n      <date>2023-10-05</date>\n      <location>Community Hall</location>\n    </event>\n    <event>\n      <eventID>E003</eventID>\n      <title>Reading Workshop</title>\n      <date>2023-11-20</date>\n      <location>Conference Room</location>\n    </event>\n  </events>\n  <statistics>\n    <visitorsPerMonth>1450</visitorsPerMonth>\n    <booksAvailable>3200</booksAvailable>\n    <eventsScheduled>12</eventsScheduled>\n  </statistics>\n</libraryData>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170200_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library.rows[*][libraryID]",
                                "library.rows[*][name]",
                                "library.rows[*][address]",
                                "library.rows[*][city]",
                                "library.rows[*][state]",
                                "library.rows[*][zip]",
                                "books.rows[*][bookID]",
                                "books.rows[*][title]",
                                "books.rows[*][author]",
                                "books.rows[*][genre]",
                                "books.rows[*][publishedYear]",
                                "staff.rows[*][memberID]",
                                "staff.rows[*][name]",
                                "staff.rows[*][role]",
                                "staff.rows[*][email]",
                                "events.rows[*][eventID]",
                                "events.rows[*][title]",
                                "events.rows[*][date]",
                                "events.rows[*][location]",
                                "statistics.rows[0][visitorsPerMonth]",
                                "statistics.rows[0][booksAvailable]",
                                "statistics.rows[0][eventsScheduled]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<ProjectData>\n  <ProjectMetadata>\n    <ProjectName>HealthApp</ProjectName>\n    <Version>1.3.2</Version>\n    <ReleaseDate>2023-09-01</ReleaseDate>\n  </ProjectMetadata>\n  <Developers>\n    <Developer>\n      <Name>Alice Smith</Name>\n      <Role>Frontend Engineer</Role>\n      <ExperienceYears>5</ExperienceYears>\n    </Developer>\n    <Developer>\n      <Name>Bob Johnson</Name>\n      <Role>Backend Developer</Role>\n      <ExperienceYears>7</ExperienceYears>\n    </Developer>\n  </Developers>\n  <Configuration>\n    <Theme>Light</Theme>\n    <NotificationsEnabled>true</NotificationsEnabled>\n    <MaxConcurrentUsers>1000</MaxConcurrentUsers>\n  </Configuration>\n  <Modules>\n    <Module>\n      <ModuleName>Authentication</ModuleName>\n      <Enabled>true</Enabled>\n      <Settings>\n        <MaxLoginAttempts>5</MaxLoginAttempts>\n        <TokenExpiryMinutes>30</TokenExpiryMinutes>\n      </Settings>\n    </Module>\n    <Module>\n      <ModuleName>Reporting</ModuleName>\n      <Enabled>false</Enabled>\n      <Settings>\n        <ReportRefreshInterval>15</ReportRefreshInterval>\n      </Settings>\n    </Module>\n  </Modules>\n</ProjectData>\n</code>",
            "feature_requirements": "• The CSV output should include a header row for each dataset, with column names matching the XML element names (e.g., ProjectName, Version, ReleaseDate for project metadata).  \n• The ProjectMetadata information must be represented as a single CSV row with columns for ProjectName, Version, and ReleaseDate.  \n• The Developers section must produce multiple CSV rows (one per developer) with columns for Name, Role, and ExperienceYears.  \n• The Configuration section must be represented as a single CSV row with columns for Theme, NotificationsEnabled, and MaxConcurrentUsers.  \n• The Modules section must produce multiple CSV rows (one per module) with columns for ModuleName, Enabled, and the respective Settings (e.g., MaxLoginAttempts, TokenExpiryMinutes, ReportRefreshInterval) where applicable.  \n• For each module, if certain settings are not present (e.g., Reporting module missing MaxLoginAttempts and TokenExpiryMinutes), the corresponding CSV columns should be included but left empty.  \n• Boolean and numeric values should be output as their literal string or numeric representations, matching the values provided in the XML (e.g., \"true\" or \"false\", and numeric values as numbers).",
            "task_id": "170201",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][ProjectName]",
                "rows[*][Version]",
                "rows[*][ReleaseDate]",
                "rows[*][Name]",
                "rows[*][Role]",
                "rows[*][ExperienceYears]",
                "rows[*][Theme]",
                "rows[*][NotificationsEnabled]",
                "rows[*][MaxConcurrentUsers]",
                "rows[*][ModuleName]",
                "rows[*][Enabled]",
                "rows[*][MaxLoginAttempts]",
                "rows[*][TokenExpiryMinutes]",
                "rows[*][ReportRefreshInterval]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170201_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<ProjectData>\n  <ProjectMetadata>\n    <ProjectName>HealthApp</ProjectName>\n    <Version>1.3.2</Version>\n    <ReleaseDate>2023-09-01</ReleaseDate>\n  </ProjectMetadata>\n  <Developers>\n    <Developer>\n      <Name>Alice Smith</Name>\n      <Role>Frontend Engineer</Role>\n      <ExperienceYears>5</ExperienceYears>\n    </Developer>\n    <Developer>\n      <Name>Bob Johnson</Name>\n      <Role>Backend Developer</Role>\n      <ExperienceYears>7</ExperienceYears>\n    </Developer>\n  </Developers>\n  <Configuration>\n    <Theme>Light</Theme>\n    <NotificationsEnabled>true</NotificationsEnabled>\n    <MaxConcurrentUsers>1000</MaxConcurrentUsers>\n  </Configuration>\n  <Modules>\n    <Module>\n      <ModuleName>Authentication</ModuleName>\n      <Enabled>true</Enabled>\n      <Settings>\n        <MaxLoginAttempts>5</MaxLoginAttempts>\n        <TokenExpiryMinutes>30</TokenExpiryMinutes>\n      </Settings>\n    </Module>\n    <Module>\n      <ModuleName>Reporting</ModuleName>\n      <Enabled>false</Enabled>\n      <Settings>\n        <ReportRefreshInterval>15</ReportRefreshInterval>\n      </Settings>\n    </Module>\n  </Modules>\n</ProjectData>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170201_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][ProjectName]",
                                "rows[*][Version]",
                                "rows[*][ReleaseDate]",
                                "rows[*][Name]",
                                "rows[*][Role]",
                                "rows[*][ExperienceYears]",
                                "rows[*][Theme]",
                                "rows[*][NotificationsEnabled]",
                                "rows[*][MaxConcurrentUsers]",
                                "rows[*][ModuleName]",
                                "rows[*][Enabled]",
                                "rows[*][MaxLoginAttempts]",
                                "rows[*][TokenExpiryMinutes]",
                                "rows[*][ReportRefreshInterval]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <generalSettings>\n        <appName>DataConverter</appName>\n        <version>1.0.0</version>\n        <environment>production</environment>\n        <features>\n            <feature>MappingEngine</feature>\n            <feature>AutoValidation</feature>\n            <feature>AuditLog</feature>\n        </features>\n    </generalSettings>\n    <dataMappings>\n        <mapping id=\"map1\">\n            <sourceField>customerId</sourceField>\n            <targetField>client_id</targetField>\n            <dataType>integer</dataType>\n        </mapping>\n        <mapping id=\"map2\">\n            <sourceField>orderDate</sourceField>\n            <targetField>purchase_date</targetField>\n            <dataType>date</dataType>\n        </mapping>\n        <mapping id=\"map3\">\n            <sourceField>orderTotal</sourceField>\n            <targetField>total_amount</targetField>\n            <dataType>decimal</dataType>\n        </mapping>\n    </dataMappings>\n    <outputFormats>\n        <format id=\"xml\">\n            <name>XML</name>\n            <extension>.xml</extension>\n            <description>Standard XML format</description>\n        </format>\n        <format id=\"json\">\n            <name>JSON</name>\n            <extension>.json</extension>\n            <description>JavaScript Object Notation format</description>\n        </format>\n        <format id=\"yaml\">\n            <name>YAML</name>\n            <extension>.yaml</extension>\n            <description>YAML Ain't Markup Language</description>\n        </format>\n    </outputFormats>\n    <logging>\n        <level>INFO</level>\n        <destination>/var/log/dataconverter.log</destination>\n        <rotation>\n            <enabled>true</enabled>\n            <maxSize>5MB</maxSize>\n        </rotation>\n    </logging>\n</configuration>\n</code>",
            "feature_requirements": "• The CSV output must include a header row that identifies each field (e.g., Section, Parameter, Value or similar) to clearly label the data columns.  \n• The general settings section must be represented with rows containing the application name (appName), version, and environment values, with the list of features (MappingEngine, AutoValidation, AuditLog) aggregated or clearly delineated in one or multiple columns.  \n• The dataMappings section must produce exactly three rows, one for each mapping, with clearly defined columns for mapping id, sourceField, targetField, and dataType.  \n• The outputFormats section must produce exactly three rows, one for each format (XML, JSON, YAML), and include separate columns for the format id, name, extension, and description.  \n• The logging section must be converted into one or more rows that include the logging level, destination, and rotation details (with enabled state and maxSize clearly specified).  \n• All textual values from the XML (including file extensions, descriptions, and numeric or boolean indicators such as maxSize and true/false for enabled) must be preserved in the CSV output.  \n• The conversion must be lossless, ensuring that every XML element and attribute with an associated textual value is represented in the CSV in a consistent and verifiable manner.",
            "task_id": "170202",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0]",
                "rows[*][appName]",
                "rows[*][version]",
                "rows[*][environment]",
                "rows[*][features]",
                "rows[*][mapping id]",
                "rows[*][sourceField]",
                "rows[*][targetField]",
                "rows[*][dataType]",
                "rows[*][format id]",
                "rows[*][name]",
                "rows[*][extension]",
                "rows[*][description]",
                "rows[*][logging level]",
                "rows[*][destination]",
                "rows[*][rotation enabled]",
                "rows[*][rotation maxSize]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170202_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <generalSettings>\n        <appName>DataConverter</appName>\n        <version>1.0.0</version>\n        <environment>production</environment>\n        <features>\n            <feature>MappingEngine</feature>\n            <feature>AutoValidation</feature>\n            <feature>AuditLog</feature>\n        </features>\n    </generalSettings>\n    <dataMappings>\n        <mapping id=\"map1\">\n            <sourceField>customerId</sourceField>\n            <targetField>client_id</targetField>\n            <dataType>integer</dataType>\n        </mapping>\n        <mapping id=\"map2\">\n            <sourceField>orderDate</sourceField>\n            <targetField>purchase_date</targetField>\n            <dataType>date</dataType>\n        </mapping>\n        <mapping id=\"map3\">\n            <sourceField>orderTotal</sourceField>\n            <targetField>total_amount</targetField>\n            <dataType>decimal</dataType>\n        </mapping>\n    </dataMappings>\n    <outputFormats>\n        <format id=\"xml\">\n            <name>XML</name>\n            <extension>.xml</extension>\n            <description>Standard XML format</description>\n        </format>\n        <format id=\"json\">\n            <name>JSON</name>\n            <extension>.json</extension>\n            <description>JavaScript Object Notation format</description>\n        </format>\n        <format id=\"yaml\">\n            <name>YAML</name>\n            <extension>.yaml</extension>\n            <description>YAML Ain't Markup Language</description>\n        </format>\n    </outputFormats>\n    <logging>\n        <level>INFO</level>\n        <destination>/var/log/dataconverter.log</destination>\n        <rotation>\n            <enabled>true</enabled>\n            <maxSize>5MB</maxSize>\n        </rotation>\n    </logging>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170202_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0]",
                                "rows[*][appName]",
                                "rows[*][version]",
                                "rows[*][environment]",
                                "rows[*][features]",
                                "rows[*][mapping id]",
                                "rows[*][sourceField]",
                                "rows[*][targetField]",
                                "rows[*][dataType]",
                                "rows[*][format id]",
                                "rows[*][name]",
                                "rows[*][extension]",
                                "rows[*][description]",
                                "rows[*][logging level]",
                                "rows[*][destination]",
                                "rows[*][rotation enabled]",
                                "rows[*][rotation maxSize]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n  <metadata>\n    <title>Sample Configuration</title>\n    <date>2023-10-05</date>\n    <version>1.0</version>\n  </metadata>\n  <settings>\n    <option key=\"fullscreen\">true</option>\n    <option key=\"resolution\">1920x1080</option>\n    <option key=\"language\">en-US</option>\n  </settings>\n  <users>\n    <user id=\"001\">\n      <name>Alice</name>\n      <email>alice@example.com</email>\n      <preferences>\n        <theme>dark</theme>\n        <notifications>true</notifications>\n      </preferences>\n    </user>\n    <user id=\"002\">\n      <name>Bob</name>\n      <email>bob@example.com</email>\n      <preferences>\n        <theme>light</theme>\n        <notifications>false</notifications>\n      </preferences>\n    </user>\n  </users>\n  <logs>\n    <entry>\n      <timestamp>2023-10-05T12:30:00Z</timestamp>\n      <message>Process started</message>\n      <severity>Info</severity>\n    </entry>\n    <entry>\n      <timestamp>2023-10-05T12:45:00Z</timestamp>\n      <message>Process completed</message>\n      <severity>Info</severity>\n    </entry>\n    <entry>\n      <timestamp>2023-10-05T13:00:00Z</timestamp>\n      <message>Error encountered</message>\n      <severity>Error</severity>\n    </entry>\n  </logs>\n  <tasks>\n    <task id=\"t001\">\n      <description>Data backup</description>\n      <status>completed</status>\n      <assignedTo>Alice</assignedTo>\n    </task>\n    <task id=\"t002\">\n      <description>System update</description>\n      <status>pending</status>\n      <assignedTo>Bob</assignedTo>\n    </task>\n  </tasks>\n</document>\n</code>",
            "feature_requirements": "• The CSV output must be divided into distinct sections corresponding to the XML groups (metadata, settings, users, logs, tasks).  \n• Each section must include a header row with clear column names derived from the XML element tags or attribute names.  \n• The metadata section must produce a single row with columns for title, date, and version, capturing the content of the respective XML elements.  \n• The settings section must produce rows for each option, with columns for the attribute key and the text value.  \n• The users section must produce a row per user, including columns for the user id, name, email, and the nested preferences (theme and notifications), ensuring nested data is flattened.  \n• The logs section must produce rows for each log entry with columns for timestamp, message, and severity, preserving the order found in the XML.  \n• The tasks section must produce rows for each task with columns for task id, description, status, and assignedTo, mapping the XML attributes and elements accordingly.  \n• The extracted data in each CSV row must exactly match the text values from the XML elements and attributes without additional or missing data.  \n• The order of rows in each CSV section must reflect the order of elements as they appear in the XML input.",
            "task_id": "170203",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata_rows[0][title]",
                "metadata_rows[0][date]",
                "metadata_rows[0][version]",
                "settings_rows[*][key]",
                "settings_rows[*][value]",
                "users_rows[*][id]",
                "users_rows[*][name]",
                "users_rows[*][email]",
                "users_rows[*][theme]",
                "users_rows[*][notifications]",
                "logs_rows[*][timestamp]",
                "logs_rows[*][message]",
                "logs_rows[*][severity]",
                "tasks_rows[*][task_id]",
                "tasks_rows[*][description]",
                "tasks_rows[*][status]",
                "tasks_rows[*][assignedTo]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170203_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n  <metadata>\n    <title>Sample Configuration</title>\n    <date>2023-10-05</date>\n    <version>1.0</version>\n  </metadata>\n  <settings>\n    <option key=\"fullscreen\">true</option>\n    <option key=\"resolution\">1920x1080</option>\n    <option key=\"language\">en-US</option>\n  </settings>\n  <users>\n    <user id=\"001\">\n      <name>Alice</name>\n      <email>alice@example.com</email>\n      <preferences>\n        <theme>dark</theme>\n        <notifications>true</notifications>\n      </preferences>\n    </user>\n    <user id=\"002\">\n      <name>Bob</name>\n      <email>bob@example.com</email>\n      <preferences>\n        <theme>light</theme>\n        <notifications>false</notifications>\n      </preferences>\n    </user>\n  </users>\n  <logs>\n    <entry>\n      <timestamp>2023-10-05T12:30:00Z</timestamp>\n      <message>Process started</message>\n      <severity>Info</severity>\n    </entry>\n    <entry>\n      <timestamp>2023-10-05T12:45:00Z</timestamp>\n      <message>Process completed</message>\n      <severity>Info</severity>\n    </entry>\n    <entry>\n      <timestamp>2023-10-05T13:00:00Z</timestamp>\n      <message>Error encountered</message>\n      <severity>Error</severity>\n    </entry>\n  </logs>\n  <tasks>\n    <task id=\"t001\">\n      <description>Data backup</description>\n      <status>completed</status>\n      <assignedTo>Alice</assignedTo>\n    </task>\n    <task id=\"t002\">\n      <description>System update</description>\n      <status>pending</status>\n      <assignedTo>Bob</assignedTo>\n    </task>\n  </tasks>\n</document>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170203_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata_rows[0][title]",
                                "metadata_rows[0][date]",
                                "metadata_rows[0][version]",
                                "settings_rows[*][key]",
                                "settings_rows[*][value]",
                                "users_rows[*][id]",
                                "users_rows[*][name]",
                                "users_rows[*][email]",
                                "users_rows[*][theme]",
                                "users_rows[*][notifications]",
                                "logs_rows[*][timestamp]",
                                "logs_rows[*][message]",
                                "logs_rows[*][severity]",
                                "tasks_rows[*][task_id]",
                                "tasks_rows[*][description]",
                                "tasks_rows[*][status]",
                                "tasks_rows[*][assignedTo]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<WeatherStationConfiguration>\n    <StationDetails>\n        <StationID>WS-001</StationID>\n        <Location>Central Park</Location>\n        <InstallationDate>2021-05-15</InstallationDate>\n    </StationDetails>\n    <Sensors>\n        <Sensor>\n            <SensorID>Temp01</SensorID>\n            <Type>Temperature</Type>\n            <Units>Celsius</Units>\n            <Thresholds>\n                <High>35</High>\n                <Low>-10</Low>\n            </Thresholds>\n        </Sensor>\n        <Sensor>\n            <SensorID>Hum01</SensorID>\n            <Type>Humidity</Type>\n            <Units>Percentage</Units>\n            <Thresholds>\n                <High>90</High>\n                <Low>20</Low>\n            </Thresholds>\n        </Sensor>\n        <Sensor>\n            <SensorID>Wind01</SensorID>\n            <Type>WindSpeed</Type>\n            <Units>km/h</Units>\n            <Thresholds>\n                <High>100</High>\n                <Low>0</Low>\n            </Thresholds>\n        </Sensor>\n    </Sensors>\n    <AlertSettings>\n        <Alert>\n            <Parameter>Temperature</Parameter>\n            <Message>High temperature detected</Message>\n            <Active>true</Active>\n        </Alert>\n        <Alert>\n            <Parameter>Humidity</Parameter>\n            <Message>Humidity level out of range</Message>\n            <Active>true</Active>\n        </Alert>\n    </AlertSettings>\n    <MaintenanceSchedule>\n        <Maintenance>\n            <Date>2023-12-01</Date>\n            <Type>Calibration</Type>\n            <Technician>Alex Johnson</Technician>\n        </Maintenance>\n        <Maintenance>\n            <Date>2024-06-01</Date>\n            <Type>Inspection</Type>\n            <Technician>Samantha Lee</Technician>\n        </Maintenance>\n    </MaintenanceSchedule>\n</WeatherStationConfiguration>\n</code>",
            "feature_requirements": "• The CSV output must include a header row for each data section (StationDetails, Sensors, AlertSettings, and MaintenanceSchedule) with clear column names.\n• A station details section must be represented in CSV with columns such as StationID, Location, and InstallationDate, using the values from the XML StationDetails element.\n• The sensors section must include one row per Sensor element, with columns for SensorID, Type, Units, High (from Thresholds/High), and Low (from Thresholds/Low).\n• The alerts section must be represented with one row per Alert element, including columns for Parameter, Message, and Active.\n• The maintenance schedule section must have one row per Maintenance element, with columns for Date, Type, and Technician.\n• Each row in any section must correspond exactly to one instance of the respective XML element, ensuring no data loss from nested elements.\n• The CSV should maintain clear separation between different sections (e.g., by using separate CSV outputs or identifiable headers) so that each data group can be parsed independently.",
            "task_id": "170204",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "StationDetails: rows[0][StationID]",
                "StationDetails: rows[0][Location]",
                "StationDetails: rows[0][InstallationDate]",
                "Sensors: rows[*][SensorID]",
                "Sensors: rows[*][Type]",
                "Sensors: rows[*][Units]",
                "Sensors: rows[*][High]",
                "Sensors: rows[*][Low]",
                "AlertSettings: rows[*][Parameter]",
                "AlertSettings: rows[*][Message]",
                "AlertSettings: rows[*][Active]",
                "MaintenanceSchedule: rows[*][Date]",
                "MaintenanceSchedule: rows[*][Type]",
                "MaintenanceSchedule: rows[*][Technician]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170204_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<WeatherStationConfiguration>\n    <StationDetails>\n        <StationID>WS-001</StationID>\n        <Location>Central Park</Location>\n        <InstallationDate>2021-05-15</InstallationDate>\n    </StationDetails>\n    <Sensors>\n        <Sensor>\n            <SensorID>Temp01</SensorID>\n            <Type>Temperature</Type>\n            <Units>Celsius</Units>\n            <Thresholds>\n                <High>35</High>\n                <Low>-10</Low>\n            </Thresholds>\n        </Sensor>\n        <Sensor>\n            <SensorID>Hum01</SensorID>\n            <Type>Humidity</Type>\n            <Units>Percentage</Units>\n            <Thresholds>\n                <High>90</High>\n                <Low>20</Low>\n            </Thresholds>\n        </Sensor>\n        <Sensor>\n            <SensorID>Wind01</SensorID>\n            <Type>WindSpeed</Type>\n            <Units>km/h</Units>\n            <Thresholds>\n                <High>100</High>\n                <Low>0</Low>\n            </Thresholds>\n        </Sensor>\n    </Sensors>\n    <AlertSettings>\n        <Alert>\n            <Parameter>Temperature</Parameter>\n            <Message>High temperature detected</Message>\n            <Active>true</Active>\n        </Alert>\n        <Alert>\n            <Parameter>Humidity</Parameter>\n            <Message>Humidity level out of range</Message>\n            <Active>true</Active>\n        </Alert>\n    </AlertSettings>\n    <MaintenanceSchedule>\n        <Maintenance>\n            <Date>2023-12-01</Date>\n            <Type>Calibration</Type>\n            <Technician>Alex Johnson</Technician>\n        </Maintenance>\n        <Maintenance>\n            <Date>2024-06-01</Date>\n            <Type>Inspection</Type>\n            <Technician>Samantha Lee</Technician>\n        </Maintenance>\n    </MaintenanceSchedule>\n</WeatherStationConfiguration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170204_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "StationDetails: rows[0][StationID]",
                                "StationDetails: rows[0][Location]",
                                "StationDetails: rows[0][InstallationDate]",
                                "Sensors: rows[*][SensorID]",
                                "Sensors: rows[*][Type]",
                                "Sensors: rows[*][Units]",
                                "Sensors: rows[*][High]",
                                "Sensors: rows[*][Low]",
                                "AlertSettings: rows[*][Parameter]",
                                "AlertSettings: rows[*][Message]",
                                "AlertSettings: rows[*][Active]",
                                "MaintenanceSchedule: rows[*][Date]",
                                "MaintenanceSchedule: rows[*][Type]",
                                "MaintenanceSchedule: rows[*][Technician]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<configuration>\n  <application>\n    <name>DataConverter</name>\n    <version>1.2.3</version>\n    <build>Date:2023-10-10</build>\n  </application>\n  <database>\n    <host>localhost</host>\n    <port>5432</port>\n    <username>dbuser</username>\n    <password>securepassword</password>\n    <tables>\n      <table>users</table>\n      <table>transactions</table>\n      <table>logs</table>\n    </tables>\n  </database>\n  <logging>\n    <level>DEBUG</level>\n    <output>console</output>\n    <formats>\n      <format>json</format>\n      <format>xml</format>\n    </formats>\n  </logging>\n  <features>\n    <feature name=\"ImportCSV\" enabled=\"true\"/>\n    <feature name=\"ExportXML\" enabled=\"true\"/>\n    <feature name=\"DataValidation\" enabled=\"false\"/>\n  </features>\n  <users>\n    <user id=\"u001\">\n      <name>John Doe</name>\n      <email>john.doe@example.com</email>\n      <roles>\n        <role>Admin</role>\n        <role>Editor</role>\n      </roles>\n    </user>\n    <user id=\"u002\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <roles>\n        <role>User</role>\n      </roles>\n    </user>\n  </users>\n</configuration>\n</code>",
            "feature_requirements": "• The output must include CSV rows that capture the distinct configuration sections (application, database, logging, features, and users) from the XML.  \n• For the application section, CSV must contain labeled columns for name, version, and build with their corresponding values.  \n• For the database section, CSV must include columns for host, port, username, password, and a single cell representing the tables list (with table names separated by a consistent delimiter).  \n• For the logging section, CSV must include columns for level and output, along with a cell that contains the list of formats (separated in a verifiable manner).  \n• For the features section, CSV must represent each feature as a separate row with columns for the feature’s name (from the attribute) and its enabled status.  \n• For the users section, CSV must represent each user as a separate row with columns for the user id (from the attribute), name, email, and a cell containing the roles list (using a consistent delimiter for multiple roles).  \n• The CSV output should preserve the order of the elements from the XML, ensuring data appears in the same sequence as defined in the source XML.  \n• All data values from the XML, including textual data and list items, must appear exactly as provided without any XML tags.  \n• Each cell that represents a list (tables, formats, roles) must have a clear, consistent separation mechanism that can be programmatically verified.",
            "task_id": "170205",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][name]",
                "rows[0][version]",
                "rows[0][build]",
                "rows[1][host]",
                "rows[1][port]",
                "rows[1][username]",
                "rows[1][password]",
                "rows[1][tables]",
                "rows[2][level]",
                "rows[2][output]",
                "rows[2][formats]",
                "rows[*][feature_name]",
                "rows[*][enabled]",
                "rows[*][user_id]",
                "rows[*][name]",
                "rows[*][email]",
                "rows[*][roles]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170205_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<configuration>\n  <application>\n    <name>DataConverter</name>\n    <version>1.2.3</version>\n    <build>Date:2023-10-10</build>\n  </application>\n  <database>\n    <host>localhost</host>\n    <port>5432</port>\n    <username>dbuser</username>\n    <password>securepassword</password>\n    <tables>\n      <table>users</table>\n      <table>transactions</table>\n      <table>logs</table>\n    </tables>\n  </database>\n  <logging>\n    <level>DEBUG</level>\n    <output>console</output>\n    <formats>\n      <format>json</format>\n      <format>xml</format>\n    </formats>\n  </logging>\n  <features>\n    <feature name=\"ImportCSV\" enabled=\"true\"/>\n    <feature name=\"ExportXML\" enabled=\"true\"/>\n    <feature name=\"DataValidation\" enabled=\"false\"/>\n  </features>\n  <users>\n    <user id=\"u001\">\n      <name>John Doe</name>\n      <email>john.doe@example.com</email>\n      <roles>\n        <role>Admin</role>\n        <role>Editor</role>\n      </roles>\n    </user>\n    <user id=\"u002\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <roles>\n        <role>User</role>\n      </roles>\n    </user>\n  </users>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170205_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][name]",
                                "rows[0][version]",
                                "rows[0][build]",
                                "rows[1][host]",
                                "rows[1][port]",
                                "rows[1][username]",
                                "rows[1][password]",
                                "rows[1][tables]",
                                "rows[2][level]",
                                "rows[2][output]",
                                "rows[2][formats]",
                                "rows[*][feature_name]",
                                "rows[*][enabled]",
                                "rows[*][user_id]",
                                "rows[*][name]",
                                "rows[*][email]",
                                "rows[*][roles]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n  <user>\n    <id>12345</id>\n    <name>Jane Smith</name>\n    <email>jane.smith@example.com</email>\n    <roles>\n      <role>editor</role>\n      <role>contributor</role>\n    </roles>\n  </user>\n  <account>\n    <balance currency=\"USD\">256.75</balance>\n    <status>active</status>\n    <transactions>\n      <transaction id=\"tx1001\">\n        <date>2023-09-15</date>\n        <amount>75.00</amount>\n        <description>Article Purchase</description>\n      </transaction>\n      <transaction id=\"tx1002\">\n        <date>2023-09-20</date>\n        <amount>30.00</amount>\n        <description>Subscription Renewal</description>\n      </transaction>\n    </transactions>\n  </account>\n  <preferences>\n    <language>en-US</language>\n    <timezone>America/New_York</timezone>\n    <notifications enabled=\"true\" />\n  </preferences>\n  <activities>\n    <activity type=\"login\">\n      <timestamp>2023-10-01T08:30:00</timestamp>\n      <ip>192.168.10.5</ip>\n    </activity>\n    <activity type=\"update\">\n      <timestamp>2023-10-03T14:45:00</timestamp>\n      <ip>192.168.10.8</ip>\n      <details>Updated profile information</details>\n    </activity>\n  </activities>\n  <system>\n    <version>2.4.1</version>\n    <lastUpdate>2023-10-05</lastUpdate>\n  </system>\n</data>\n</code>",
            "feature_requirements": "• The CSV output must include a header row that clearly labels each column with descriptive names (e.g., userID, userName, userEmail, etc.).\n• There must be a row (or set of rows) representing the user information, with separate columns for user ID, name, email, and roles (with multiple roles concatenated in a verifiable way, such as comma-separated).\n• The account information should have dedicated columns for account balance, currency (extracted from the currency attribute), and status.\n• Each transaction entry must be represented as an individual record or row, with columns for transaction ID, date, amount, and description.\n• The preferences details must be included with distinct columns for language, timezone, and a boolean column for notifications enabled (reflecting the attribute value).\n• Each activity must be output as a separate record or row, containing columns for activity type, timestamp, IP address, and an optional details field when available.\n• The system information should be converted to CSV format with columns for system version and last update date.\n• The CSV structure must allow verification that all nested XML elements are represented either in their own rows or merged into a single row with multiple, clearly labeled columns.",
            "task_id": "170206",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170206_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n  <user>\n    <id>12345</id>\n    <name>Jane Smith</name>\n    <email>jane.smith@example.com</email>\n    <roles>\n      <role>editor</role>\n      <role>contributor</role>\n    </roles>\n  </user>\n  <account>\n    <balance currency=\"USD\">256.75</balance>\n    <status>active</status>\n    <transactions>\n      <transaction id=\"tx1001\">\n        <date>2023-09-15</date>\n        <amount>75.00</amount>\n        <description>Article Purchase</description>\n      </transaction>\n      <transaction id=\"tx1002\">\n        <date>2023-09-20</date>\n        <amount>30.00</amount>\n        <description>Subscription Renewal</description>\n      </transaction>\n    </transactions>\n  </account>\n  <preferences>\n    <language>en-US</language>\n    <timezone>America/New_York</timezone>\n    <notifications enabled=\"true\" />\n  </preferences>\n  <activities>\n    <activity type=\"login\">\n      <timestamp>2023-10-01T08:30:00</timestamp>\n      <ip>192.168.10.5</ip>\n    </activity>\n    <activity type=\"update\">\n      <timestamp>2023-10-03T14:45:00</timestamp>\n      <ip>192.168.10.8</ip>\n      <details>Updated profile information</details>\n    </activity>\n  </activities>\n  <system>\n    <version>2.4.1</version>\n    <lastUpdate>2023-10-05</lastUpdate>\n  </system>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170206_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<library>\n  <metadata>\n    <name>City Central Library</name>\n    <location>Downtown</location>\n    <established>1950</established>\n  </metadata>\n  <books>\n    <book id=\"bk001\">\n      <title>XML for Beginners</title>\n      <author>John Doe</author>\n      <publishedYear>2020</publishedYear>\n      <categories>\n        <category>Technology</category>\n        <category>Education</category>\n      </categories>\n    </book>\n    <book id=\"bk002\">\n      <title>Advanced Data Structures</title>\n      <author>Jane Smith</author>\n      <publishedYear>2018</publishedYear>\n      <categories>\n        <category>Computer Science</category>\n      </categories>\n    </book>\n  </books>\n  <staff>\n    <member>\n      <name>Emily Carter</name>\n      <role>Chief Librarian</role>\n      <contact>\n        <email>emily.carter@library.org</email>\n        <phone>555-0123</phone>\n      </contact>\n    </member>\n    <member>\n      <name>Michael Lee</name>\n      <role>Assistant Librarian</role>\n      <contact>\n        <email>michael.lee@library.org</email>\n        <phone>555-0456</phone>\n      </contact>\n    </member>\n  </staff>\n  <operationalHours>\n    <weekday>\n      <open>09:00</open>\n      <close>18:00</close>\n    </weekday>\n    <weekend>\n      <open>10:00</open>\n      <close>16:00</close>\n    </weekend>\n  </operationalHours>\n</library>\n</code>",
            "feature_requirements": "• The CSV output must include a header row with clearly labeled column names for each dataset (e.g., metadata, books, staff, operational hours).  \n• A metadata row (or section) must be present that contains the library's name, location, and established year.  \n• The books dataset must include one row per book, with columns for the book’s unique identifier (id), title, author, and publishedYear.  \n• For the books dataset, the categories for each book must be represented in a single CSV field, with multiple categories combined using a consistent delimiter (e.g., a semicolon).  \n• The staff dataset must include one row per staff member, with columns for the member’s name, role, email, and phone number extracted from their contact details.  \n• The operationalHours dataset must provide separate rows (or clearly distinguishable fields) for weekday and weekend hours, each including the opening and closing times.  \n• All CSV rows and columns must map directly and unambiguously to the corresponding XML elements, ensuring that every piece of information is represented exactly once.  \n• The output must be structured as verifiable CSV data that can be parsed to confirm the presence and correctness of each required field and dataset.",
            "task_id": "170207",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][metadata_libraryName]",
                "rows[0][metadata_location]",
                "rows[0][metadata_establishedYear]",
                "rows[0][books_id]",
                "rows[0][books_title]",
                "rows[0][books_author]",
                "rows[0][books_publishedYear]",
                "rows[0][books_categories]",
                "rows[0][staff_name]",
                "rows[0][staff_role]",
                "rows[0][staff_email]",
                "rows[0][staff_phone]",
                "rows[0][operationalHours_weekday_opening]",
                "rows[0][operationalHours_weekday_closing]",
                "rows[0][operationalHours_weekend_opening]",
                "rows[0][operationalHours_weekend_closing]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170207_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<library>\n  <metadata>\n    <name>City Central Library</name>\n    <location>Downtown</location>\n    <established>1950</established>\n  </metadata>\n  <books>\n    <book id=\"bk001\">\n      <title>XML for Beginners</title>\n      <author>John Doe</author>\n      <publishedYear>2020</publishedYear>\n      <categories>\n        <category>Technology</category>\n        <category>Education</category>\n      </categories>\n    </book>\n    <book id=\"bk002\">\n      <title>Advanced Data Structures</title>\n      <author>Jane Smith</author>\n      <publishedYear>2018</publishedYear>\n      <categories>\n        <category>Computer Science</category>\n      </categories>\n    </book>\n  </books>\n  <staff>\n    <member>\n      <name>Emily Carter</name>\n      <role>Chief Librarian</role>\n      <contact>\n        <email>emily.carter@library.org</email>\n        <phone>555-0123</phone>\n      </contact>\n    </member>\n    <member>\n      <name>Michael Lee</name>\n      <role>Assistant Librarian</role>\n      <contact>\n        <email>michael.lee@library.org</email>\n        <phone>555-0456</phone>\n      </contact>\n    </member>\n  </staff>\n  <operationalHours>\n    <weekday>\n      <open>09:00</open>\n      <close>18:00</close>\n    </weekday>\n    <weekend>\n      <open>10:00</open>\n      <close>16:00</close>\n    </weekend>\n  </operationalHours>\n</library>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170207_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][metadata_libraryName]",
                                "rows[0][metadata_location]",
                                "rows[0][metadata_establishedYear]",
                                "rows[0][books_id]",
                                "rows[0][books_title]",
                                "rows[0][books_author]",
                                "rows[0][books_publishedYear]",
                                "rows[0][books_categories]",
                                "rows[0][staff_name]",
                                "rows[0][staff_role]",
                                "rows[0][staff_email]",
                                "rows[0][staff_phone]",
                                "rows[0][operationalHours_weekday_opening]",
                                "rows[0][operationalHours_weekday_closing]",
                                "rows[0][operationalHours_weekend_opening]",
                                "rows[0][operationalHours_weekend_closing]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<Configuration>\n  <Settings>\n    <Setting name=\"theme\" value=\"dark\"/>\n    <Setting name=\"language\" value=\"en-US\"/>\n    <Setting name=\"timezone\" value=\"UTC\"/>\n  </Settings>\n  <Users>\n    <User id=\"1\">\n      <Name>John Doe</Name>\n      <Email>johndoe@example.com</Email>\n      <Preferences>\n        <Preference key=\"notifications\" value=\"enabled\"/>\n        <Preference key=\"autoUpdate\" value=\"disabled\"/>\n      </Preferences>\n    </User>\n    <User id=\"2\">\n      <Name>Jane Smith</Name>\n      <Email>janesmith@example.com</Email>\n      <Preferences>\n        <Preference key=\"notifications\" value=\"disabled\"/>\n        <Preference key=\"autoUpdate\" value=\"enabled\"/>\n      </Preferences>\n    </User>\n  </Users>\n  <Features>\n    <Feature>Authentication</Feature>\n    <Feature>DataExport</Feature>\n    <Feature>RealTimeAnalysis</Feature>\n  </Features>\n  <Logs>\n    <LogEntry>\n      <Timestamp>2023-10-07T12:00:00Z</Timestamp>\n      <Message>System started</Message>\n    </LogEntry>\n    <LogEntry>\n      <Timestamp>2023-10-07T12:05:00Z</Timestamp>\n      <Message>User logged in</Message>\n    </LogEntry>\n  </Logs>\n  <Metadata>\n    <Version>1.0</Version>\n    <CreatedBy>Admin</CreatedBy>\n    <LastModified>2023-10-07T12:30:00Z</LastModified>\n  </Metadata>\n</Configuration>\n</code>",
            "feature_requirements": "• The CSV output must contain separate rows or sections corresponding to each XML grouping (Settings, Users, Features, Logs, Metadata).  \n• A header row must be included to label each column, with columns clearly representing elements or attributes from the XML (for example, “name” and “value” for settings or “id”, “Name”, “Email” for users).  \n• For the Settings group, each CSV row must capture the setting’s \"name\" attribute and its corresponding \"value\".  \n• For the Users group, each CSV row must include the user’s \"id\", \"Name\", \"Email\", and also include columns for each preference item (with measurable keys like \"notifications\" and \"autoUpdate\" and their corresponding values).  \n• For the Features group, every individual feature must appear as a separate CSV row or clearly delineated list entry, ensuring that the text values (e.g., \"Authentication\", \"DataExport\", \"RealTimeAnalysis\") are preserved.  \n• For the Logs group, each row must include the \"Timestamp\" and \"Message\" values from each LogEntry, ensuring accurate reflection of date-time and text data.  \n• For the Metadata group, the CSV output must include rows with fields corresponding to \"Version\", \"CreatedBy\", and \"LastModified\", preserving the exact text values from the XML.  \n• Every value extracted from the XML (both from element text and attributes) must be represented exactly in the CSV output without alteration.",
            "task_id": "170208",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][name]",
                "rows[*][value]",
                "rows[*][id]",
                "rows[*][Name]",
                "rows[*][Email]",
                "rows[*][notifications]",
                "rows[*][autoUpdate]",
                "rows[*][feature]",
                "rows[*][Timestamp]",
                "rows[*][Message]",
                "rows[*][Version]",
                "rows[*][CreatedBy]",
                "rows[*][LastModified]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170208_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<Configuration>\n  <Settings>\n    <Setting name=\"theme\" value=\"dark\"/>\n    <Setting name=\"language\" value=\"en-US\"/>\n    <Setting name=\"timezone\" value=\"UTC\"/>\n  </Settings>\n  <Users>\n    <User id=\"1\">\n      <Name>John Doe</Name>\n      <Email>johndoe@example.com</Email>\n      <Preferences>\n        <Preference key=\"notifications\" value=\"enabled\"/>\n        <Preference key=\"autoUpdate\" value=\"disabled\"/>\n      </Preferences>\n    </User>\n    <User id=\"2\">\n      <Name>Jane Smith</Name>\n      <Email>janesmith@example.com</Email>\n      <Preferences>\n        <Preference key=\"notifications\" value=\"disabled\"/>\n        <Preference key=\"autoUpdate\" value=\"enabled\"/>\n      </Preferences>\n    </User>\n  </Users>\n  <Features>\n    <Feature>Authentication</Feature>\n    <Feature>DataExport</Feature>\n    <Feature>RealTimeAnalysis</Feature>\n  </Features>\n  <Logs>\n    <LogEntry>\n      <Timestamp>2023-10-07T12:00:00Z</Timestamp>\n      <Message>System started</Message>\n    </LogEntry>\n    <LogEntry>\n      <Timestamp>2023-10-07T12:05:00Z</Timestamp>\n      <Message>User logged in</Message>\n    </LogEntry>\n  </Logs>\n  <Metadata>\n    <Version>1.0</Version>\n    <CreatedBy>Admin</CreatedBy>\n    <LastModified>2023-10-07T12:30:00Z</LastModified>\n  </Metadata>\n</Configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170208_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][name]",
                                "rows[*][value]",
                                "rows[*][id]",
                                "rows[*][Name]",
                                "rows[*][Email]",
                                "rows[*][notifications]",
                                "rows[*][autoUpdate]",
                                "rows[*][feature]",
                                "rows[*][Timestamp]",
                                "rows[*][Message]",
                                "rows[*][Version]",
                                "rows[*][CreatedBy]",
                                "rows[*][LastModified]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<catalog>\n  <books>\n    <book id=\"1\">\n      <title>XML Fundamentals</title>\n      <author>John Doe</author>\n      <year>2021</year>\n      <genres>\n        <genre>Education</genre>\n        <genre>Technology</genre>\n      </genres>\n    </book>\n    <book id=\"2\">\n      <title>Advanced XML</title>\n      <author>Jane Roe</author>\n      <year>2022</year>\n      <genres>\n        <genre>Technology</genre>\n        <genre>Reference</genre>\n      </genres>\n    </book>\n  </books>\n  <users>\n    <user id=\"100\">\n      <name>Alice</name>\n      <role>Administrator</role>\n      <preferences>\n        <theme>dark</theme>\n        <language>en</language>\n        <notifications enabled=\"true\" email=\"true\" sms=\"false\"/>\n      </preferences>\n    </user>\n    <user id=\"101\">\n      <name>Bob</name>\n      <role>Member</role>\n      <preferences>\n        <theme>light</theme>\n        <language>es</language>\n        <notifications enabled=\"false\"/>\n      </preferences>\n    </user>\n  </users>\n  <settings>\n    <system>\n      <os>Linux</os>\n      <version>5.10</version>\n      <uptime>10234</uptime>\n    </system>\n    <network>\n      <ip>192.168.0.1</ip>\n      <port>8080</port>\n      <protocol>HTTP</protocol>\n    </network>\n  </settings>\n  <logs>\n    <entry timestamp=\"2023-10-01T12:00:00Z\">\n      <level>INFO</level>\n      <message>System startup completed.</message>\n    </entry>\n    <entry timestamp=\"2023-10-01T12:05:00Z\">\n      <level>WARNING</level>\n      <message>User Bob attempted unauthorized access.</message>\n    </entry>\n    <entry timestamp=\"2023-10-01T12:10:00Z\">\n      <level>INFO</level>\n      <message>User Alice approved changes.</message>\n    </entry>\n  </logs>\n</catalog>\n</code>",
            "feature_requirements": "• The output must include CSV rows that correspond to each primary XML category (books, users, settings, and logs).  \n• For the books section, each record must include columns for id, title, author, year, and genres, with multiple genres appropriately concatenated (for example, using a delimiter).  \n• For the users section, each record must include columns for user id, name, role, theme, language, and notifications details (with separate columns for enabled, email, and sms, handling missing notification attributes as needed).  \n• For the settings section, the CSV must flatten nested elements into distinct columns, including system details (os, version, uptime) and network details (ip, port, protocol).  \n• For the logs section, each record must include columns for timestamp, level, and message.  \n• Each CSV output section must start with a header row that clearly labels each column.  \n• The conversion should ensure that nested XML elements are flattened so that all data is represented in a single row per record while maintaining the association of related fields.",
            "task_id": "170209",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170209_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<catalog>\n  <books>\n    <book id=\"1\">\n      <title>XML Fundamentals</title>\n      <author>John Doe</author>\n      <year>2021</year>\n      <genres>\n        <genre>Education</genre>\n        <genre>Technology</genre>\n      </genres>\n    </book>\n    <book id=\"2\">\n      <title>Advanced XML</title>\n      <author>Jane Roe</author>\n      <year>2022</year>\n      <genres>\n        <genre>Technology</genre>\n        <genre>Reference</genre>\n      </genres>\n    </book>\n  </books>\n  <users>\n    <user id=\"100\">\n      <name>Alice</name>\n      <role>Administrator</role>\n      <preferences>\n        <theme>dark</theme>\n        <language>en</language>\n        <notifications enabled=\"true\" email=\"true\" sms=\"false\"/>\n      </preferences>\n    </user>\n    <user id=\"101\">\n      <name>Bob</name>\n      <role>Member</role>\n      <preferences>\n        <theme>light</theme>\n        <language>es</language>\n        <notifications enabled=\"false\"/>\n      </preferences>\n    </user>\n  </users>\n  <settings>\n    <system>\n      <os>Linux</os>\n      <version>5.10</version>\n      <uptime>10234</uptime>\n    </system>\n    <network>\n      <ip>192.168.0.1</ip>\n      <port>8080</port>\n      <protocol>HTTP</protocol>\n    </network>\n  </settings>\n  <logs>\n    <entry timestamp=\"2023-10-01T12:00:00Z\">\n      <level>INFO</level>\n      <message>System startup completed.</message>\n    </entry>\n    <entry timestamp=\"2023-10-01T12:05:00Z\">\n      <level>WARNING</level>\n      <message>User Bob attempted unauthorized access.</message>\n    </entry>\n    <entry timestamp=\"2023-10-01T12:10:00Z\">\n      <level>INFO</level>\n      <message>User Alice approved changes.</message>\n    </entry>\n  </logs>\n</catalog>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170209_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n  <title>Data Conversion Report</title>\n  <author>\n    <name>Jane Smith</name>\n    <email>jane.smith@example.org</email>\n  </author>\n  <publication>\n    <date>2023-10-10</date>\n    <publisher>Insight Analytics</publisher>\n  </publication>\n  <content>\n    <sections>\n      <section>\n        <heading>Overview</heading>\n        <text>This section provides an overview of the conversion process.</text>\n      </section>\n      <section>\n        <heading>Details</heading>\n        <text>The detailed analysis is presented with a hierarchical structure of data.</text>\n      </section>\n      <section>\n        <heading>Conclusion</heading>\n        <text>Final remarks and future directions are outlined here.</text>\n      </section>\n    </sections>\n  </content>\n  <metadata>\n    <keywords>\n      <keyword>XML</keyword>\n      <keyword>Conversion</keyword>\n      <keyword>Data Organization</keyword>\n      <keyword>Hierarchy</keyword>\n    </keywords>\n    <version>1.2</version>\n    <tags>\n      <tag>report</tag>\n      <tag>analytics</tag>\n      <tag>data</tag>\n    </tags>\n  </metadata>\n</document>\n</code>",
            "feature_requirements": "• The CSV output must include a header row that clearly names each field derived from the XML structure (e.g., Title, Author Name, Author Email, Publication Date, Publisher, Section Heading, Section Text, Keywords, Version, Tags).  \n• The CSV must contain a row (or multiple rows) representing the document’s main details: title from <title>, author details from <name> and <email>, and publication details from <date> and <publisher>.  \n• Each section from the <sections> block must be represented with its corresponding heading and text, either as individual rows or as grouped columns, ensuring the order (Overview, Details, Conclusion) is preserved.  \n• The metadata should be included in the CSV output: the list of keywords extracted from <keyword>, the version from <version>, and the list of tags from <tag> must be captured in dedicated columns or concatenated fields.  \n• Lists (keywords and tags) must be output as a comma-separated or other clearly delineated list in their respective CSV field, verifying the integrity of the original group data from XML.  \n• All text values from the XML elements (including whitespace, punctuation, and capitalization) must be accurately captured in the CSV without modification.  \n• The output CSV must display each field consistently across all rows so that automated parsing of the CSV file can validate that every required element from the XML is present and correctly mapped.",
            "task_id": "170210",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Title]",
                "rows[0][Author Name]",
                "rows[0][Author Email]",
                "rows[0][Publication Date]",
                "rows[0][Publisher]",
                "rows[0][Section Heading]",
                "rows[0][Section Text]",
                "rows[0][Keywords]",
                "rows[0][Version]",
                "rows[0][Tags]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170210_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n  <title>Data Conversion Report</title>\n  <author>\n    <name>Jane Smith</name>\n    <email>jane.smith@example.org</email>\n  </author>\n  <publication>\n    <date>2023-10-10</date>\n    <publisher>Insight Analytics</publisher>\n  </publication>\n  <content>\n    <sections>\n      <section>\n        <heading>Overview</heading>\n        <text>This section provides an overview of the conversion process.</text>\n      </section>\n      <section>\n        <heading>Details</heading>\n        <text>The detailed analysis is presented with a hierarchical structure of data.</text>\n      </section>\n      <section>\n        <heading>Conclusion</heading>\n        <text>Final remarks and future directions are outlined here.</text>\n      </section>\n    </sections>\n  </content>\n  <metadata>\n    <keywords>\n      <keyword>XML</keyword>\n      <keyword>Conversion</keyword>\n      <keyword>Data Organization</keyword>\n      <keyword>Hierarchy</keyword>\n    </keywords>\n    <version>1.2</version>\n    <tags>\n      <tag>report</tag>\n      <tag>analytics</tag>\n      <tag>data</tag>\n    </tags>\n  </metadata>\n</document>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170210_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Title]",
                                "rows[0][Author Name]",
                                "rows[0][Author Email]",
                                "rows[0][Publication Date]",
                                "rows[0][Publisher]",
                                "rows[0][Section Heading]",
                                "rows[0][Section Text]",
                                "rows[0][Keywords]",
                                "rows[0][Version]",
                                "rows[0][Tags]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n    <userProfile>\n        <username>jdoe</username>\n        <fullName>John Doe</fullName>\n        <email>jdoe@example.com</email>\n        <preferences>\n            <language>en</language>\n            <timezone>UTC</timezone>\n        </preferences>\n    </userProfile>\n    <tasks>\n        <task id=\"1\">\n            <title>Submit Report</title>\n            <status>Completed</status>\n            <dueDate>2023-10-15</dueDate>\n        </task>\n        <task id=\"2\">\n            <title>Update Website</title>\n            <status>Pending</status>\n            <dueDate>2023-11-01</dueDate>\n        </task>\n        <task id=\"3\">\n            <title>Plan Meeting</title>\n            <status>In Progress</status>\n            <dueDate>2023-10-22</dueDate>\n        </task>\n    </tasks>\n    <settings>\n        <displayOptions>\n            <theme>dark</theme>\n            <fontSize>14px</fontSize>\n        </displayOptions>\n        <notifications>\n            <email>true</email>\n            <sms>false</sms>\n        </notifications>\n    </settings>\n    <logs>\n        <entry timestamp=\"2023-10-01T08:30:00Z\">\n            <level>INFO</level>\n            <message>Application started</message>\n        </entry>\n        <entry timestamp=\"2023-10-01T09:00:00Z\">\n            <level>WARNING</level>\n            <message>Low disk space</message>\n        </entry>\n        <entry timestamp=\"2023-10-01T09:30:00Z\">\n            <level>ERROR</level>\n            <message>Failed to connect to database</message>\n        </entry>\n    </logs>\n    <transactions>\n        <transaction id=\"txn1001\">\n            <amount currency=\"USD\">150.75</amount>\n            <date>2023-09-25</date>\n            <status>Complete</status>\n        </transaction>\n        <transaction id=\"txn1002\">\n            <amount currency=\"USD\">89.99</amount>\n            <date>2023-09-28</date>\n            <status>Pending</status>\n        </transaction>\n    </transactions>\n</document>\n</code>",
            "feature_requirements": "• The CSV output must include a header row for each dataset, with column names corresponding to the XML element names or attributes (e.g., username, fullName, email, language, timezone for userProfile).  \n• User profile data must be flattened into a single CSV row that includes the username, fullName, email, as well as nested preferences like language and timezone as separate columns.  \n• The tasks section must be converted such that each <task> element results in a separate CSV row with columns for the task’s id (sourced from the attribute), title, status, and dueDate.  \n• The settings data must be flattened so that display options (theme, fontSize) and notification settings (email, sms) appear as individual columns in the CSV output.  \n• Each log entry must be represented as its own CSV row, capturing the timestamp attribute, level, and message columns from each <entry> element.  \n• The transactions must be converted into CSV rows with columns for transaction id (from the attribute), amount, currency (from the attribute on <amount>), date, and status.  \n• The conversion must ensure that nested XML structures are correctly flattened, preserving attribute values and inner text values in distinct CSV columns, making the output verifiable by matching each header with its corresponding data row.",
            "task_id": "170211",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170211_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<document>\n    <userProfile>\n        <username>jdoe</username>\n        <fullName>John Doe</fullName>\n        <email>jdoe@example.com</email>\n        <preferences>\n            <language>en</language>\n            <timezone>UTC</timezone>\n        </preferences>\n    </userProfile>\n    <tasks>\n        <task id=\"1\">\n            <title>Submit Report</title>\n            <status>Completed</status>\n            <dueDate>2023-10-15</dueDate>\n        </task>\n        <task id=\"2\">\n            <title>Update Website</title>\n            <status>Pending</status>\n            <dueDate>2023-11-01</dueDate>\n        </task>\n        <task id=\"3\">\n            <title>Plan Meeting</title>\n            <status>In Progress</status>\n            <dueDate>2023-10-22</dueDate>\n        </task>\n    </tasks>\n    <settings>\n        <displayOptions>\n            <theme>dark</theme>\n            <fontSize>14px</fontSize>\n        </displayOptions>\n        <notifications>\n            <email>true</email>\n            <sms>false</sms>\n        </notifications>\n    </settings>\n    <logs>\n        <entry timestamp=\"2023-10-01T08:30:00Z\">\n            <level>INFO</level>\n            <message>Application started</message>\n        </entry>\n        <entry timestamp=\"2023-10-01T09:00:00Z\">\n            <level>WARNING</level>\n            <message>Low disk space</message>\n        </entry>\n        <entry timestamp=\"2023-10-01T09:30:00Z\">\n            <level>ERROR</level>\n            <message>Failed to connect to database</message>\n        </entry>\n    </logs>\n    <transactions>\n        <transaction id=\"txn1001\">\n            <amount currency=\"USD\">150.75</amount>\n            <date>2023-09-25</date>\n            <status>Complete</status>\n        </transaction>\n        <transaction id=\"txn1002\">\n            <amount currency=\"USD\">89.99</amount>\n            <date>2023-09-28</date>\n            <status>Pending</status>\n        </transaction>\n    </transactions>\n</document>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170211_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<configuration>\n  <system>\n    <hostname>ServerAlpha</hostname>\n    <uptime>13456</uptime>\n    <os>Ubuntu 20.04</os>\n  </system>\n  <devices>\n    <device id=\"1\">\n      <name>Thermostat</name>\n      <type>ClimateControl</type>\n      <location>LivingRoom</location>\n    </device>\n    <device id=\"2\">\n      <name>LightSwitch</name>\n      <type>Lighting</type>\n      <location>Kitchen</location>\n    </device>\n    <device id=\"3\">\n      <name>SecurityCamera</name>\n      <type>Surveillance</type>\n      <location>FrontDoor</location>\n    </device>\n  </devices>\n  <sensors>\n    <sensor id=\"A1\">\n      <type>Temperature</type>\n      <unit>Celsius</unit>\n      <threshold>22</threshold>\n    </sensor>\n    <sensor id=\"B2\">\n      <type>Motion</type>\n      <unit>Boolean</unit>\n      <threshold>1</threshold>\n    </sensor>\n  </sensors>\n  <schedule>\n    <entry>\n      <day>Monday</day>\n      <time>09:00</time>\n      <task>System Check</task>\n    </entry>\n    <entry>\n      <day>Wednesday</day>\n      <time>14:30</time>\n      <task>Data Backup</task>\n    </entry>\n    <entry>\n      <day>Friday</day>\n      <time>18:00</time>\n      <task>Maintenance Routine</task>\n    </entry>\n  </schedule>\n  <userProfile>\n    <username>adminUser</username>\n    <preferences>\n      <theme>Dark</theme>\n      <notifications>true</notifications>\n      <language>en-US</language>\n    </preferences>\n  </userProfile>\n</configuration>\n</code>",
            "feature_requirements": "• The output must include a CSV section representing the system configuration, with columns for hostname, uptime, and operating system.  \n• The output must include a CSV section for devices, where each row represents a device with columns for device id, name, type, and location.  \n• The output must include a CSV section for sensors, with each row representing a sensor including columns for sensor id, type, unit, and threshold.  \n• The output must include a CSV section for schedule entries, with each row capturing the day, time, and task from each entry.  \n• The output must include a CSV section for the user profile, with columns for username as well as individual preferences such as theme, notifications, and language.  \n• The CSV conversion must preserve all data values from the XML, ensuring that no element content or attribute value is omitted.  \n• Each section in the CSV output must include a clear header row with appropriate labels for the data in that section.",
            "task_id": "170212",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "system_configuration rows[*][hostname]",
                "system_configuration rows[*][uptime]",
                "system_configuration rows[*][operating system]",
                "devices rows[*][device id]",
                "devices rows[*][name]",
                "devices rows[*][type]",
                "devices rows[*][location]",
                "sensors rows[*][sensor id]",
                "sensors rows[*][type]",
                "sensors rows[*][unit]",
                "sensors rows[*][threshold]",
                "schedule_entries rows[*][day]",
                "schedule_entries rows[*][time]",
                "schedule_entries rows[*][task]",
                "user_profile rows[*][username]",
                "user_profile rows[*][theme]",
                "user_profile rows[*][notifications]",
                "user_profile rows[*][language]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170212_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<configuration>\n  <system>\n    <hostname>ServerAlpha</hostname>\n    <uptime>13456</uptime>\n    <os>Ubuntu 20.04</os>\n  </system>\n  <devices>\n    <device id=\"1\">\n      <name>Thermostat</name>\n      <type>ClimateControl</type>\n      <location>LivingRoom</location>\n    </device>\n    <device id=\"2\">\n      <name>LightSwitch</name>\n      <type>Lighting</type>\n      <location>Kitchen</location>\n    </device>\n    <device id=\"3\">\n      <name>SecurityCamera</name>\n      <type>Surveillance</type>\n      <location>FrontDoor</location>\n    </device>\n  </devices>\n  <sensors>\n    <sensor id=\"A1\">\n      <type>Temperature</type>\n      <unit>Celsius</unit>\n      <threshold>22</threshold>\n    </sensor>\n    <sensor id=\"B2\">\n      <type>Motion</type>\n      <unit>Boolean</unit>\n      <threshold>1</threshold>\n    </sensor>\n  </sensors>\n  <schedule>\n    <entry>\n      <day>Monday</day>\n      <time>09:00</time>\n      <task>System Check</task>\n    </entry>\n    <entry>\n      <day>Wednesday</day>\n      <time>14:30</time>\n      <task>Data Backup</task>\n    </entry>\n    <entry>\n      <day>Friday</day>\n      <time>18:00</time>\n      <task>Maintenance Routine</task>\n    </entry>\n  </schedule>\n  <userProfile>\n    <username>adminUser</username>\n    <preferences>\n      <theme>Dark</theme>\n      <notifications>true</notifications>\n      <language>en-US</language>\n    </preferences>\n  </userProfile>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170212_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "system_configuration rows[*][hostname]",
                                "system_configuration rows[*][uptime]",
                                "system_configuration rows[*][operating system]",
                                "devices rows[*][device id]",
                                "devices rows[*][name]",
                                "devices rows[*][type]",
                                "devices rows[*][location]",
                                "sensors rows[*][sensor id]",
                                "sensors rows[*][type]",
                                "sensors rows[*][unit]",
                                "sensors rows[*][threshold]",
                                "schedule_entries rows[*][day]",
                                "schedule_entries rows[*][time]",
                                "schedule_entries rows[*][task]",
                                "user_profile rows[*][username]",
                                "user_profile rows[*][theme]",
                                "user_profile rows[*][notifications]",
                                "user_profile rows[*][language]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n    <user>\n        <userID>001</userID>\n        <name>Jane Smith</name>\n        <contact>\n            <email>jane.smith@example.com</email>\n            <phone>+1234567890</phone>\n        </contact>\n        <roles>\n            <role>Administrator</role>\n            <role>Editor</role>\n        </roles>\n    </user>\n    <configuration>\n        <theme>Light</theme>\n        <language>English</language>\n        <timezone>UTC</timezone>\n    </configuration>\n    <logs>\n        <entry>\n            <timestamp>2023-10-01T08:30:00Z</timestamp>\n            <event>User login</event>\n        </entry>\n        <entry>\n            <timestamp>2023-10-02T10:15:00Z</timestamp>\n            <event>Password change</event>\n        </entry>\n        <entry>\n            <timestamp>2023-10-03T14:45:00Z</timestamp>\n            <event>Data export</event>\n        </entry>\n    </logs>\n    <sessions>\n        <session>\n            <sessionID>ABC123</sessionID>\n            <startTime>2023-10-01T08:30:00Z</startTime>\n            <endTime>2023-10-01T09:30:00Z</endTime>\n        </session>\n        <session>\n            <sessionID>XYZ789</sessionID>\n            <startTime>2023-10-02T10:15:00Z</startTime>\n            <endTime>2023-10-02T11:00:00Z</endTime>\n        </session>\n    </sessions>\n    <tasks>\n        <task>\n            <taskID>1001</taskID>\n            <description>Review quarterly financial report</description>\n            <status>Pending</status>\n        </task>\n        <task>\n            <taskID>1002</taskID>\n            <description>Update project roadmap</description>\n            <status>Completed</status>\n        </task>\n    </tasks>\n</data>\n</code>",
            "feature_requirements": "• The output must be in CSV format with comma-separated values and a header row identifying each field.  \n• There must be a CSV section representing the user information, including columns for userID, name, email, phone, and a field for roles (which can combine multiple roles).  \n• A CSV section must represent configuration settings with columns for theme, language, and timezone.  \n• Each log entry must appear as an individual row in a CSV section with at least the columns timestamp and event.  \n• There must be a CSV section for session data, where each row includes sessionID, startTime, and endTime.  \n• A separate CSV section must list task data with columns for taskID, description, and status.  \n• Headers for each CSV section must directly reflect the corresponding XML element labels to ensure a verifiable mapping between the source XML and the CSV output.",
            "task_id": "170213",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][userID]",
                "rows[*][name]",
                "rows[*][email]",
                "rows[*][phone]",
                "rows[*][roles]",
                "rows[*][theme]",
                "rows[*][language]",
                "rows[*][timezone]",
                "rows[*][timestamp]",
                "rows[*][event]",
                "rows[*][sessionID]",
                "rows[*][startTime]",
                "rows[*][endTime]",
                "rows[*][taskID]",
                "rows[*][description]",
                "rows[*][status]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170213_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n    <user>\n        <userID>001</userID>\n        <name>Jane Smith</name>\n        <contact>\n            <email>jane.smith@example.com</email>\n            <phone>+1234567890</phone>\n        </contact>\n        <roles>\n            <role>Administrator</role>\n            <role>Editor</role>\n        </roles>\n    </user>\n    <configuration>\n        <theme>Light</theme>\n        <language>English</language>\n        <timezone>UTC</timezone>\n    </configuration>\n    <logs>\n        <entry>\n            <timestamp>2023-10-01T08:30:00Z</timestamp>\n            <event>User login</event>\n        </entry>\n        <entry>\n            <timestamp>2023-10-02T10:15:00Z</timestamp>\n            <event>Password change</event>\n        </entry>\n        <entry>\n            <timestamp>2023-10-03T14:45:00Z</timestamp>\n            <event>Data export</event>\n        </entry>\n    </logs>\n    <sessions>\n        <session>\n            <sessionID>ABC123</sessionID>\n            <startTime>2023-10-01T08:30:00Z</startTime>\n            <endTime>2023-10-01T09:30:00Z</endTime>\n        </session>\n        <session>\n            <sessionID>XYZ789</sessionID>\n            <startTime>2023-10-02T10:15:00Z</startTime>\n            <endTime>2023-10-02T11:00:00Z</endTime>\n        </session>\n    </sessions>\n    <tasks>\n        <task>\n            <taskID>1001</taskID>\n            <description>Review quarterly financial report</description>\n            <status>Pending</status>\n        </task>\n        <task>\n            <taskID>1002</taskID>\n            <description>Update project roadmap</description>\n            <status>Completed</status>\n        </task>\n    </tasks>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170213_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][userID]",
                                "rows[*][name]",
                                "rows[*][email]",
                                "rows[*][phone]",
                                "rows[*][roles]",
                                "rows[*][theme]",
                                "rows[*][language]",
                                "rows[*][timezone]",
                                "rows[*][timestamp]",
                                "rows[*][event]",
                                "rows[*][sessionID]",
                                "rows[*][startTime]",
                                "rows[*][endTime]",
                                "rows[*][taskID]",
                                "rows[*][description]",
                                "rows[*][status]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n    <configuration>\n        <version>1.2.3</version>\n        <enabled>true</enabled>\n        <options>\n            <option name=\"autoSave\">true</option>\n            <option name=\"backupFrequency\">daily</option>\n        </options>\n    </configuration>\n    <users>\n        <user>\n            <id>101</id>\n            <username>jdoe</username>\n            <role>admin</role>\n            <preferences>\n                <language>en</language>\n                <timezone>UTC</timezone>\n            </preferences>\n        </user>\n        <user>\n            <id>102</id>\n            <username>asmith</username>\n            <role>editor</role>\n            <preferences>\n                <language>es</language>\n                <timezone>CET</timezone>\n            </preferences>\n        </user>\n    </users>\n    <metadata>\n        <generatedAt>2023-10-05T14:30:00Z</generatedAt>\n        <source>internalSystem</source>\n    </metadata>\n    <logs>\n        <log>\n            <id>log001</id>\n            <level>error</level>\n            <message>Unable to connect to database</message>\n        </log>\n        <log>\n            <id>log002</id>\n            <level>info</level>\n            <message>Scheduled backup completed successfully</message>\n        </log>\n    </logs>\n    <inventory>\n        <items>\n            <item>\n                <itemId>item1001</itemId>\n                <name>Standard Widget</name>\n                <quantity>150</quantity>\n                <price currency=\"USD\">29.99</price>\n            </item>\n            <item>\n                <itemId>item1002</itemId>\n                <name>Advanced Gadget</name>\n                <quantity>75</quantity>\n                <price currency=\"USD\">59.99</price>\n            </item>\n        </items>\n    </inventory>\n</data>\n</code>",
            "feature_requirements": "• The output must be in CSV format, with each dataset (e.g., configuration, users, metadata, logs, inventory items) represented as one or multiple CSV tables or sections.\n• There must be header rows specifying column names for each CSV section that correspond to the XML element names (e.g., version, enabled, autoSave, backupFrequency for configuration).\n• The configuration section should flatten nested elements, converting the options (autoSave, backupFrequency) into individual CSV columns.\n• The users CSV must include columns for user fields such as id, username, role, and their nested preferences (language, timezone), with each user represented in a separate row.\n• The metadata CSV must include headers for generatedAt and source to capture the metadata element values.\n• The logs CSV must include headers for id, level, and message, with each log entry on a separate line.\n• The inventory section must be converted into a CSV that includes columns for itemId, name, quantity, and price, and the price should include an associated currency attribute.\n• Each data element converted into CSV must have values directly extracted from the XML content with flattening of nested structures where appropriate.",
            "task_id": "170214",
            "task_name": "Convert XML to CSV",
            "input_type": "XML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170214_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following XML code to CSV code.\n\n<code>\n<data>\n    <configuration>\n        <version>1.2.3</version>\n        <enabled>true</enabled>\n        <options>\n            <option name=\"autoSave\">true</option>\n            <option name=\"backupFrequency\">daily</option>\n        </options>\n    </configuration>\n    <users>\n        <user>\n            <id>101</id>\n            <username>jdoe</username>\n            <role>admin</role>\n            <preferences>\n                <language>en</language>\n                <timezone>UTC</timezone>\n            </preferences>\n        </user>\n        <user>\n            <id>102</id>\n            <username>asmith</username>\n            <role>editor</role>\n            <preferences>\n                <language>es</language>\n                <timezone>CET</timezone>\n            </preferences>\n        </user>\n    </users>\n    <metadata>\n        <generatedAt>2023-10-05T14:30:00Z</generatedAt>\n        <source>internalSystem</source>\n    </metadata>\n    <logs>\n        <log>\n            <id>log001</id>\n            <level>error</level>\n            <message>Unable to connect to database</message>\n        </log>\n        <log>\n            <id>log002</id>\n            <level>info</level>\n            <message>Scheduled backup completed successfully</message>\n        </log>\n    </logs>\n    <inventory>\n        <items>\n            <item>\n                <itemId>item1001</itemId>\n                <name>Standard Widget</name>\n                <quantity>150</quantity>\n                <price currency=\"USD\">29.99</price>\n            </item>\n            <item>\n                <itemId>item1002</itemId>\n                <name>Advanced Gadget</name>\n                <quantity>75</quantity>\n                <price currency=\"USD\">59.99</price>\n            </item>\n        </items>\n    </inventory>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170214_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nProjectID,ProjectName,Managers,TeamMembers,Milestones,StartDate\nP1001,Alpha,\"Alice Smith;Bob Johnson\",\"Carlos Diaz;Diana King;Evan Wright\",\"Design Phase;Implementation;Testing\",2023-06-01\nP1002,Beta,\"Frank Lee\",\"Grace Kim;Henry Wu\",\"Research;Development;Launch\",2023-07-15\nP1003,Gamma,\"Irene Adler;Jack Black\",\"Karen Perry;Liam Neeson;Maria Garcia\",\"Planning;Execution;Review;Closure\",2023-08-20\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates all project entries.  \n• Each CSV row (project) must be represented as a separate child element of the root element.  \n• Each project element must include child elements corresponding to the columns: ProjectID, ProjectName, Managers, TeamMembers, Milestones, and StartDate.  \n• The values from the CSV must populate the text content of the corresponding XML child elements.  \n• The Managers, TeamMembers, and Milestones elements must handle multiple values by splitting the semicolon-separated list into nested sub-elements representing each individual item.  \n• Each nested sub-element (for lists) must clearly represent one item from the corresponding CSV field.  \n• The StartDate element must display the date in the original YYYY-MM-DD format.",
            "task_id": "021700",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "projects",
                "projects[project]",
                "projects[project][ProjectID]",
                "projects[project][ProjectName]",
                "projects[project][Managers]",
                "projects[project][Managers][manager]",
                "projects[project][TeamMembers]",
                "projects[project][TeamMembers][member]",
                "projects[project][Milestones]",
                "projects[project][Milestones][milestone]",
                "projects[project][StartDate]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021700_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nProjectID,ProjectName,Managers,TeamMembers,Milestones,StartDate\nP1001,Alpha,\"Alice Smith;Bob Johnson\",\"Carlos Diaz;Diana King;Evan Wright\",\"Design Phase;Implementation;Testing\",2023-06-01\nP1002,Beta,\"Frank Lee\",\"Grace Kim;Henry Wu\",\"Research;Development;Launch\",2023-07-15\nP1003,Gamma,\"Irene Adler;Jack Black\",\"Karen Perry;Liam Neeson;Maria Garcia\",\"Planning;Execution;Review;Closure\",2023-08-20\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021700_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "projects",
                                "projects[project]",
                                "projects[project][ProjectID]",
                                "projects[project][ProjectName]",
                                "projects[project][Managers]",
                                "projects[project][Managers][manager]",
                                "projects[project][TeamMembers]",
                                "projects[project][TeamMembers][member]",
                                "projects[project][Milestones]",
                                "projects[project][Milestones][milestone]",
                                "projects[project][StartDate]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,emails,addresses,preferences\n1,Alice Johnson,\"alice.j@example.com; a.johnson@workmail.com\",\"home:123 Main St; office:456 Corporate Blvd\",\"newsletter:true; notifications:daily\"\n2,Bob Smith,\"bob.smith@mail.com; bsmith@biz.com\",\"home:789 Broadway; office:1010 Corporate Plaza\",\"newsletter:false; notifications:weekly\"\n</code>",
            "feature_requirements": "• A single root element must encapsulate all record entries.  \n• Each CSV row must be represented as an individual record element within the root.  \n• Each record element must contain child elements corresponding to the CSV fields: id, name, emails, addresses, and preferences.  \n• The id and name fields must appear as simple text elements within each record.  \n• The emails field must be transformed into a list of individual email elements, created by splitting the CSV field value using the semicolon separator.  \n• The addresses field must be transformed into a collection of address elements where each address includes a component representing the address type (e.g., home, office) and its corresponding address value, derived by splitting on semicolons and then on colons.  \n• The preferences field must be transformed into a collection of preference elements where each preference includes a component for the preference key and its corresponding value, derived by splitting on semicolons and then on colons.  \n• All textual data must be preserved accurately from the CSV and nested appropriately in the XML hierarchy for verifiable structure and content.",
            "task_id": "021701",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][id]",
                "root[record][name]",
                "root[record][emails]",
                "root[record][emails][email]",
                "root[record][addresses]",
                "root[record][addresses][address]",
                "root[record][addresses][address][type]",
                "root[record][addresses][address][value]",
                "root[record][preferences]",
                "root[record][preferences][preference]",
                "root[record][preferences][preference][key]",
                "root[record][preferences][preference][value]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021701_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,emails,addresses,preferences\n1,Alice Johnson,\"alice.j@example.com; a.johnson@workmail.com\",\"home:123 Main St; office:456 Corporate Blvd\",\"newsletter:true; notifications:daily\"\n2,Bob Smith,\"bob.smith@mail.com; bsmith@biz.com\",\"home:789 Broadway; office:1010 Corporate Plaza\",\"newsletter:false; notifications:weekly\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021701_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][id]",
                                "root[record][name]",
                                "root[record][emails]",
                                "root[record][emails][email]",
                                "root[record][addresses]",
                                "root[record][addresses][address]",
                                "root[record][addresses][address][type]",
                                "root[record][addresses][address][value]",
                                "root[record][preferences]",
                                "root[record][preferences][preference]",
                                "root[record][preferences][preference][key]",
                                "root[record][preferences][preference][value]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,contact_details,interests,orders\n001,\"Alice Smith\",\"{\"\"phone\"\": \"\"555-1234\"\", \"\"email\"\": \"\"alice.smith@example.com\"\", \"\"address\"\": \"\"100 Elm Street\"\"}\",\"reading;traveling;art\",\"[{\"\"order_id\"\": \"\"O1001\"\", \"\"amount\"\": \"\"59.99\"\"}, {\"\"order_id\"\": \"\"O1002\"\", \"\"amount\"\": \"\"29.99\"\"}]\"\n002,\"Bob Johnson\",\"{\"\"phone\"\": \"\"555-5678\"\", \"\"email\"\": \"\"bob.johnson@example.com\"\", \"\"address\"\": \"\"200 Oak Avenue\"\"}\",\"sports;cooking;tech\",\"[{\"\"order_id\"\": \"\"O1003\"\", \"\"amount\"\": \"\"89.50\"\"}, {\"\"order_id\"\": \"\"O1004\"\", \"\"amount\"\": \"\"45.00\"\"}]\"\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encloses all record entries.\n• Each CSV record must be represented as a distinct XML element (e.g., a record or row element).\n• Every record element must contain child elements corresponding to each CSV column header: id, name, contact_details, interests, and orders.\n• The contact_details field, originally a JSON string, must be converted into a nested structure with individual elements for phone, email, and address.\n• The interests field, containing semicolon-separated values, must be represented as a list with separate elements for each individual interest.\n• The orders field, which contains a JSON array of objects, must be converted into a nested structure where each order is a separate element containing child elements for order_id and amount.\n• All element names in the XML output must directly reflect the CSV column headers and the keys within the nested JSON objects.\n• The conversion must preserve the original data values exactly, ensuring that no data is lost or altered during the transformation.",
            "task_id": "021702",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][id]",
                "root[record][name]",
                "root[record][contact_details]",
                "root[record][contact_details][phone]",
                "root[record][contact_details][email]",
                "root[record][contact_details][address]",
                "root[record][interests]",
                "root[record][interests][interest]",
                "root[record][orders]",
                "root[record][orders][order]",
                "root[record][orders][order][order_id]",
                "root[record][orders][order][amount]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021702_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,contact_details,interests,orders\n001,\"Alice Smith\",\"{\"\"phone\"\": \"\"555-1234\"\", \"\"email\"\": \"\"alice.smith@example.com\"\", \"\"address\"\": \"\"100 Elm Street\"\"}\",\"reading;traveling;art\",\"[{\"\"order_id\"\": \"\"O1001\"\", \"\"amount\"\": \"\"59.99\"\"}, {\"\"order_id\"\": \"\"O1002\"\", \"\"amount\"\": \"\"29.99\"\"}]\"\n002,\"Bob Johnson\",\"{\"\"phone\"\": \"\"555-5678\"\", \"\"email\"\": \"\"bob.johnson@example.com\"\", \"\"address\"\": \"\"200 Oak Avenue\"\"}\",\"sports;cooking;tech\",\"[{\"\"order_id\"\": \"\"O1003\"\", \"\"amount\"\": \"\"89.50\"\"}, {\"\"order_id\"\": \"\"O1004\"\", \"\"amount\"\": \"\"45.00\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021702_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][id]",
                                "root[record][name]",
                                "root[record][contact_details]",
                                "root[record][contact_details][phone]",
                                "root[record][contact_details][email]",
                                "root[record][contact_details][address]",
                                "root[record][interests]",
                                "root[record][interests][interest]",
                                "root[record][orders]",
                                "root[record][orders][order]",
                                "root[record][orders][order][order_id]",
                                "root[record][orders][order][amount]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nrecord_id,setting_name,location,amenities,contact_info,open_hours\n001,\"Boutique Library\",\"Downtown\",\"[\"\"Quiet Study\"\", \"\"Community Events\"\", \"\"Digital Archives\"\"]\",\"{\"\"phone\"\": \"\"123-456-7890\"\", \"\"email\"\": \"\"info@boutiquelibrary.org\"\"}\",\"{\"\"Monday-Friday\"\": \"\"09:00-20:00\"\", \"\"Saturday\"\": \"\"10:00-18:00\"\", \"\"Sunday\"\": \"\"Closed\"\"}\"\n002,\"Artisan Coffee House\",\"Northside\",\"[\"\"Organic Coffee\"\", \"\"Live Music\"\", \"\"Art Exhibits\"\"]\",\"{\"\"phone\"\": \"\"987-654-3210\"\", \"\"email\"\": \"\"contact@artisancoffee.com\"\"}\",\"{\"\"Monday-Friday\"\": \"\"07:00-19:00\"\", \"\"Saturday-Sunday\"\": \"\"08:00-17:00\"\"}\"\n003,\"Urban Co-Working Hub\",\"Midtown\",\"[\"\"High-Speed Internet\"\", \"\"Meeting Rooms\"\", \"\"Community Kitchen\"\"]\",\"{\"\"phone\"\": \"\"555-123-4567\"\", \"\"email\"\": \"\"hello@urbanhub.com\"\"}\",\"{\"\"Monday-Friday\"\": \"\"08:00-22:00\"\", \"\"Saturday\"\": \"\"09:00-15:00\"\", \"\"Sunday\"\": \"\"Closed\"\"}\"\n</code>",
            "feature_requirements": "• The XML output must have a single, well-defined root element that encapsulates all records.  \n• Each record from the CSV must be represented as a distinct child element within the root.  \n• Every record element must include individual sub-elements corresponding to the CSV columns: record_id, setting_name, location, amenities, contact_info, and open_hours.  \n• The values in the record_id, setting_name, and location fields must be directly transferred into their respective sub-elements as text content.  \n• The amenities field, containing a list of strings, must be converted into a collection element with each amenity represented as its own sub-element.  \n• The contact_info and open_hours fields, which contain key-value pairs in JSON-like format, must be structured as nested elements where each key becomes a child element and its content is the corresponding value.  \n• The output XML must preserve the order of records and the order of data elements as they appear in the CSV input.",
            "task_id": "021703",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][record_id]",
                "root[record][setting_name]",
                "root[record][location]",
                "root[record][amenities]",
                "root[record][amenities][amenity]",
                "root[record][contact_info]",
                "root[record][open_hours]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021703_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nrecord_id,setting_name,location,amenities,contact_info,open_hours\n001,\"Boutique Library\",\"Downtown\",\"[\"\"Quiet Study\"\", \"\"Community Events\"\", \"\"Digital Archives\"\"]\",\"{\"\"phone\"\": \"\"123-456-7890\"\", \"\"email\"\": \"\"info@boutiquelibrary.org\"\"}\",\"{\"\"Monday-Friday\"\": \"\"09:00-20:00\"\", \"\"Saturday\"\": \"\"10:00-18:00\"\", \"\"Sunday\"\": \"\"Closed\"\"}\"\n002,\"Artisan Coffee House\",\"Northside\",\"[\"\"Organic Coffee\"\", \"\"Live Music\"\", \"\"Art Exhibits\"\"]\",\"{\"\"phone\"\": \"\"987-654-3210\"\", \"\"email\"\": \"\"contact@artisancoffee.com\"\"}\",\"{\"\"Monday-Friday\"\": \"\"07:00-19:00\"\", \"\"Saturday-Sunday\"\": \"\"08:00-17:00\"\"}\"\n003,\"Urban Co-Working Hub\",\"Midtown\",\"[\"\"High-Speed Internet\"\", \"\"Meeting Rooms\"\", \"\"Community Kitchen\"\"]\",\"{\"\"phone\"\": \"\"555-123-4567\"\", \"\"email\"\": \"\"hello@urbanhub.com\"\"}\",\"{\"\"Monday-Friday\"\": \"\"08:00-22:00\"\", \"\"Saturday\"\": \"\"09:00-15:00\"\", \"\"Sunday\"\": \"\"Closed\"\"}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021703_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][record_id]",
                                "root[record][setting_name]",
                                "root[record][location]",
                                "root[record][amenities]",
                                "root[record][amenities][amenity]",
                                "root[record][contact_info]",
                                "root[record][open_hours]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,attributes,tags,nested_info\n001,Alpha,\"{\"\"height\"\":\"\"180\"\",\"\"weight\"\":\"\"75\"\",\"\"active\"\":true}\",\"sales;marketing;finance\",\"[{\"\"department\"\":\"\"sales\"\",\"\"budget\"\":5000},{\"\"department\"\":\"\"engineering\"\",\"\"budget\"\":12000}]\"\n002,Beta,\"{\"\"height\"\":\"\"170\"\",\"\"weight\"\":\"\"65\"\",\"\"active\"\":false}\",\"support;research;development\",\"[{\"\"department\"\":\"\"hr\"\",\"\"budget\"\":3000},{\"\"department\"\":\"\"it\"\",\"\"budget\"\":8000}]\"\n</code>",
            "feature_requirements": "• The output must be in XML format with a single root element that encapsulates all records.\n• Each CSV row must be represented as a separate XML element (e.g., a \"record\" element) under the root.\n• Each record element must contain child elements corresponding to each CSV header field: id, name, attributes, tags, and nested_info.\n• The \"attributes\" field must be decomposed into nested XML elements, one per key (e.g., height, weight, active), with each element containing the respective value.\n• The \"tags\" field must be split into a list of separate XML sub-elements, each representing an individual tag.\n• The \"nested_info\" field must be parsed as a collection of XML elements, one for each object in the array, with each such element containing sub-elements for its keys (e.g., department and budget).\n• All text and numeric values from the CSV should be represented as the text content within the corresponding XML elements.\n• The structure and hierarchy of the XML output must clearly distinguish between the different levels: record, attributes, tags, and nested_info.",
            "task_id": "021704",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][id]",
                "root[record][name]",
                "root[record][attributes]",
                "root[record][attributes][height]",
                "root[record][attributes][weight]",
                "root[record][attributes][active]",
                "root[record][tags]",
                "root[record][tags][tag]",
                "root[record][nested_info]",
                "root[record][nested_info][department]",
                "root[record][nested_info][budget]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021704_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,name,attributes,tags,nested_info\n001,Alpha,\"{\"\"height\"\":\"\"180\"\",\"\"weight\"\":\"\"75\"\",\"\"active\"\":true}\",\"sales;marketing;finance\",\"[{\"\"department\"\":\"\"sales\"\",\"\"budget\"\":5000},{\"\"department\"\":\"\"engineering\"\",\"\"budget\"\":12000}]\"\n002,Beta,\"{\"\"height\"\":\"\"170\"\",\"\"weight\"\":\"\"65\"\",\"\"active\"\":false}\",\"support;research;development\",\"[{\"\"department\"\":\"\"hr\"\",\"\"budget\"\":3000},{\"\"department\"\":\"\"it\"\",\"\"budget\"\":8000}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021704_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][id]",
                                "root[record][name]",
                                "root[record][attributes]",
                                "root[record][attributes][height]",
                                "root[record][attributes][weight]",
                                "root[record][attributes][active]",
                                "root[record][tags]",
                                "root[record][tags][tag]",
                                "root[record][nested_info]",
                                "root[record][nested_info][department]",
                                "root[record][nested_info][budget]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,title,attributes,tags,metrics\n001,\"Sensor Reading\",\"{\"\"type\"\":\"\"temperature\"\",\"\"unit\"\":\"\"Celsius\"\",\"\"range\"\":[-40,125]}\",\"[\"\"environment\"\",\"\"measurement\"\"]\",\"{\"\"mean\"\":23.5,\"\"median\"\":23.3,\"\"std\"\":1.2}\"\n002,\"GPS Data\",\"{\"\"type\"\":\"\"location\"\",\"\"format\"\":\"\"lat-long\"\",\"\"precision\"\":6}\",\"[\"\"navigation\"\",\"\"tracking\"\"]\",\"{\"\"avg_speed\"\":45.0,\"\"accuracy\"\":5}\"\n003,\"User Profile\",\"{\"\"username\"\":\"\"jdoe\"\",\"\"role\"\":\"\"admin\"\",\"\"active\"\":true}\",\"[\"\"security\"\",\"\"activity\"\"]\",\"{\"\"login_count\"\":150,\"\"last_login\"\":\"\"2023-10-01\"\"}\"\n004,\"Inventory Record\",\"{\"\"item\"\":\"\"laptop\"\",\"\"brand\"\":\"\"TechBrand\"\",\"\"stock\"\":[10,20,15]}\",\"[\"\"electronics\"\",\"\"office\"\"]\",\"{\"\"price_range\"\":[999.99,1299.99],\"\"warranty_months\"\":24}\"\n</code>",
            "feature_requirements": "• The XML output must include a single root element that encapsulates all record entries.  \n• Each record from the CSV must be represented as an individual child element under the root.  \n• Every record element must contain sub-elements corresponding to the CSV columns: id, title, attributes, tags, and metrics.  \n• The sub-elements for each record must retain the same order as defined in the CSV header.  \n• The values from the CSV — including those representing JSON objects or arrays (attributes, tags, metrics) — must be preserved and included as textual content within their respective sub-elements.  \n• The XML output must include all rows present in the CSV, with each row completely and accurately converted into its own record element.  \n• Field names in the XML must directly reflect the CSV header labels without alteration.",
            "task_id": "021705",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][id]",
                "root[record][title]",
                "root[record][attributes]",
                "root[record][tags]",
                "root[record][metrics]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021705_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,title,attributes,tags,metrics\n001,\"Sensor Reading\",\"{\"\"type\"\":\"\"temperature\"\",\"\"unit\"\":\"\"Celsius\"\",\"\"range\"\":[-40,125]}\",\"[\"\"environment\"\",\"\"measurement\"\"]\",\"{\"\"mean\"\":23.5,\"\"median\"\":23.3,\"\"std\"\":1.2}\"\n002,\"GPS Data\",\"{\"\"type\"\":\"\"location\"\",\"\"format\"\":\"\"lat-long\"\",\"\"precision\"\":6}\",\"[\"\"navigation\"\",\"\"tracking\"\"]\",\"{\"\"avg_speed\"\":45.0,\"\"accuracy\"\":5}\"\n003,\"User Profile\",\"{\"\"username\"\":\"\"jdoe\"\",\"\"role\"\":\"\"admin\"\",\"\"active\"\":true}\",\"[\"\"security\"\",\"\"activity\"\"]\",\"{\"\"login_count\"\":150,\"\"last_login\"\":\"\"2023-10-01\"\"}\"\n004,\"Inventory Record\",\"{\"\"item\"\":\"\"laptop\"\",\"\"brand\"\":\"\"TechBrand\"\",\"\"stock\"\":[10,20,15]}\",\"[\"\"electronics\"\",\"\"office\"\"]\",\"{\"\"price_range\"\":[999.99,1299.99],\"\"warranty_months\"\":24}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021705_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][id]",
                                "root[record][title]",
                                "root[record][attributes]",
                                "root[record][tags]",
                                "root[record][metrics]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nEmployeeID,FullName,Attributes,Performance,Tags\n101,Alice Smith,\"{\"\"department\"\":\"\"Engineering\"\",\"\"position\"\":\"\"Developer\"\",\"\"skills\"\":[\"\"Python\"\",\"\"C++\"\"]}\",\"{\"\"projects_completed\"\":12,\"\"rating\"\":4.5}\",\"[\"\"team-player\"\",\"\"innovative\"\",\"\"remote\"\"]\"\n102,Bob Johnson,\"{\"\"department\"\":\"\"Marketing\"\",\"\"position\"\":\"\"Manager\"\",\"\"skills\"\":[\"\"SEO\"\",\"\"Content Creation\"\"]}\",\"{\"\"projects_completed\"\":8,\"\"rating\"\":4.2}\",\"[\"\"leadership\"\",\"\"strategist\"\",\"\"creative\"\"]\"\n103,Carol Davis,\"{\"\"department\"\":\"\"Human Resources\"\",\"\"position\"\":\"\"Recruiter\"\",\"\"skills\"\":[\"\"Communication\"\",\"\"Negotiation\"\",\"\"Conflict Resolution\"\"]}\",\"{\"\"projects_completed\"\":15,\"\"rating\"\":4.7}\",\"[\"\"dedicated\"\",\"\"empathetic\"\",\"\"analytical\"\"]\"\n</code>",
            "feature_requirements": "• The output must have one main root element that encapsulates all employee records.  \n• Each CSV row should be converted into an individual employee element with a distinct tag, such as \"Employee\".  \n• Each employee element must include child elements for all columns from the CSV: EmployeeID, FullName, Attributes, Performance, and Tags.  \n• The EmployeeID element should contain the numeric identifier as text that exactly matches the CSV value.  \n• The FullName element must include the full name string from the CSV row.  \n• The Attributes element should represent the JSON object from the CSV, with nested child elements for keys like \"department\", \"position\", and a child container for the \"skills\" list where each skill is an individual element.  \n• The Performance element must similarly represent the JSON object with child elements for keys such as \"projects_completed\" and \"rating\", preserving their numeric or textual values.  \n• The Tags element should encapsulate the JSON array by including one child element for each tag value, ensuring the order is maintained.",
            "task_id": "021706",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "Employees",
                "Employees[Employee]",
                "Employees[Employee][EmployeeID]",
                "Employees[Employee][FullName]",
                "Employees[Employee][Attributes]",
                "Employees[Employee][Attributes][department]",
                "Employees[Employee][Attributes][position]",
                "Employees[Employee][Attributes][skills]",
                "Employees[Employee][Attributes][skills][skill]",
                "Employees[Employee][Performance]",
                "Employees[Employee][Performance][projects_completed]",
                "Employees[Employee][Performance][rating]",
                "Employees[Employee][Tags]",
                "Employees[Employee][Tags][tag]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021706_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nEmployeeID,FullName,Attributes,Performance,Tags\n101,Alice Smith,\"{\"\"department\"\":\"\"Engineering\"\",\"\"position\"\":\"\"Developer\"\",\"\"skills\"\":[\"\"Python\"\",\"\"C++\"\"]}\",\"{\"\"projects_completed\"\":12,\"\"rating\"\":4.5}\",\"[\"\"team-player\"\",\"\"innovative\"\",\"\"remote\"\"]\"\n102,Bob Johnson,\"{\"\"department\"\":\"\"Marketing\"\",\"\"position\"\":\"\"Manager\"\",\"\"skills\"\":[\"\"SEO\"\",\"\"Content Creation\"\"]}\",\"{\"\"projects_completed\"\":8,\"\"rating\"\":4.2}\",\"[\"\"leadership\"\",\"\"strategist\"\",\"\"creative\"\"]\"\n103,Carol Davis,\"{\"\"department\"\":\"\"Human Resources\"\",\"\"position\"\":\"\"Recruiter\"\",\"\"skills\"\":[\"\"Communication\"\",\"\"Negotiation\"\",\"\"Conflict Resolution\"\"]}\",\"{\"\"projects_completed\"\":15,\"\"rating\"\":4.7}\",\"[\"\"dedicated\"\",\"\"empathetic\"\",\"\"analytical\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021706_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Employees",
                                "Employees[Employee]",
                                "Employees[Employee][EmployeeID]",
                                "Employees[Employee][FullName]",
                                "Employees[Employee][Attributes]",
                                "Employees[Employee][Attributes][department]",
                                "Employees[Employee][Attributes][position]",
                                "Employees[Employee][Attributes][skills]",
                                "Employees[Employee][Attributes][skills][skill]",
                                "Employees[Employee][Performance]",
                                "Employees[Employee][Performance][projects_completed]",
                                "Employees[Employee][Performance][rating]",
                                "Employees[Employee][Tags]",
                                "Employees[Employee][Tags][tag]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]