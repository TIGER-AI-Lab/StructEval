[
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<data>\n  <users>\n    <user id=\"1\">\n      <name>John Doe</name>\n      <email>john.doe@example.com</email>\n      <preferences>\n        <preference name=\"theme\">dark</preference>\n        <preference name=\"notifications\">enabled</preference>\n        <preference name=\"language\">en</preference>\n      </preferences>\n    </user>\n    <user id=\"2\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <preferences>\n        <preference name=\"theme\">light</preference>\n        <preference name=\"notifications\">disabled</preference>\n        <preference name=\"language\">fr</preference>\n      </preferences>\n    </user>\n  </users>\n  <devices>\n    <device>\n      <deviceType>computer</deviceType>\n      <os>Windows 10</os>\n    </device>\n    <device>\n      <deviceType>smartphone</deviceType>\n      <os>Android</os>\n    </device>\n  </devices>\n  <logs>\n    <log>\n      <timestamp>2023-10-01T12:00:00Z</timestamp>\n      <event>System Startup</event>\n    </log>\n    <log>\n      <timestamp>2023-10-01T12:10:00Z</timestamp>\n      <event>User Login</event>\n    </log>\n  </logs>\n  <settings>\n    <setting name=\"version\">1.0.0</setting>\n    <setting name=\"maintenanceMode\">false</setting>\n    <setting name=\"maxUsers\">100</setting>\n  </settings>\n</data>\n</code>",
            "feature_requirements": "• The output must include a top-level JSON object containing separate keys for \"users\", \"devices\", \"logs\", and \"settings\".  \n• The \"users\" key must map to an array where each entry is an object representing a user, identifiable by an \"id\" field, and containing \"name\", \"email\", and \"preferences\".  \n• For each user, the \"preferences\" key must map to an array of objects; each preference object must have a \"name\" key and a corresponding text value that reflects its setting.  \n• The \"devices\" key must map to an array of objects, with each object containing keys for \"deviceType\" and \"os\", retaining the associated text values.  \n• The \"logs\" key must map to an array of objects where each object has a \"timestamp\" key and an \"event\" key with their respective textual content.  \n• The \"settings\" key must map to an object where each setting name (extracted from the XML attribute \"name\") is used as a key and its text content is used as the value.  \n• All element text values (such as names, emails, OS types, event descriptions, etc.) must be preserved exactly as provided in the XML.",
            "task_id": "170536",
            "task_name": "Convert XML to JSON",
            "input_type": "XML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "users",
                "users[].id",
                "users[].name",
                "users[].email",
                "users[].preferences",
                "users[].preferences[].name",
                "devices",
                "devices[].deviceType",
                "devices[].os",
                "logs",
                "logs[].timestamp",
                "logs[].event",
                "settings"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170536_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<data>\n  <users>\n    <user id=\"1\">\n      <name>John Doe</name>\n      <email>john.doe@example.com</email>\n      <preferences>\n        <preference name=\"theme\">dark</preference>\n        <preference name=\"notifications\">enabled</preference>\n        <preference name=\"language\">en</preference>\n      </preferences>\n    </user>\n    <user id=\"2\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <preferences>\n        <preference name=\"theme\">light</preference>\n        <preference name=\"notifications\">disabled</preference>\n        <preference name=\"language\">fr</preference>\n      </preferences>\n    </user>\n  </users>\n  <devices>\n    <device>\n      <deviceType>computer</deviceType>\n      <os>Windows 10</os>\n    </device>\n    <device>\n      <deviceType>smartphone</deviceType>\n      <os>Android</os>\n    </device>\n  </devices>\n  <logs>\n    <log>\n      <timestamp>2023-10-01T12:00:00Z</timestamp>\n      <event>System Startup</event>\n    </log>\n    <log>\n      <timestamp>2023-10-01T12:10:00Z</timestamp>\n      <event>User Login</event>\n    </log>\n  </logs>\n  <settings>\n    <setting name=\"version\">1.0.0</setting>\n    <setting name=\"maintenanceMode\">false</setting>\n    <setting name=\"maxUsers\">100</setting>\n  </settings>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170536_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "users",
                                "users[].id",
                                "users[].name",
                                "users[].email",
                                "users[].preferences",
                                "users[].preferences[].name",
                                "devices",
                                "devices[].deviceType",
                                "devices[].os",
                                "logs",
                                "logs[].timestamp",
                                "logs[].event",
                                "settings"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<library>\n  <libraryInfo>\n    <libraryName>Central City Library</libraryName>\n    <location>Central City</location>\n  </libraryInfo>\n  <books>\n    <book id=\"1\">\n      <title>XML Fundamentals</title>\n      <author>John Doe</author>\n      <publishedYear>2020</publishedYear>\n    </book>\n    <book id=\"2\">\n      <title>Data Structures</title>\n      <author>Jane Smith</author>\n      <publishedYear>2018</publishedYear>\n    </book>\n    <book id=\"3\">\n      <title>Modern Programming</title>\n      <author>Sam Wilson</author>\n      <publishedYear>2021</publishedYear>\n    </book>\n  </books>\n  <members>\n    <member id=\"1001\">\n      <name>Anna Johnson</name>\n      <membershipLevel>Gold</membershipLevel>\n      <joinDate>2019-05-15</joinDate>\n    </member>\n    <member id=\"1002\">\n      <name>Betty Davis</name>\n      <membershipLevel>Silver</membershipLevel>\n      <joinDate>2020-08-22</joinDate>\n    </member>\n  </members>\n  <staff>\n    <staffMember id=\"2001\">\n      <name>Robert Brown</name>\n      <role>Librarian</role>\n      <hireDate>2015-03-10</hireDate>\n    </staffMember>\n    <staffMember id=\"2002\">\n      <name>Emily White</name>\n      <role>Assistant</role>\n      <hireDate>2018-07-01</hireDate>\n    </staffMember>\n  </staff>\n  <events>\n    <event>\n      <eventName>Book Fair</eventName>\n      <eventDate>2023-10-15</eventDate>\n      <venue>Main Hall</venue>\n    </event>\n    <event>\n      <eventName>Reading Marathon</eventName>\n      <eventDate>2023-11-01</eventDate>\n      <venue>Conference Room</venue>\n    </event>\n  </events>\n</library>\n</code>",
            "feature_requirements": "• The JSON output must include a top-level object representing the XML root element with child keys for libraryInfo, books, members, staff, and events.  \n• The libraryInfo element must be converted into an object containing keys for libraryName and location with their respective text values.  \n• The books element must be converted into an array of objects, where each object includes an \"id\" property (derived from the XML attribute) along with title, author, and publishedYear keys corresponding to the XML child elements.  \n• The members element must be converted into an array of objects, each containing an \"id\" property (from the XML attribute), name, membershipLevel, and joinDate keys matching the XML content.  \n• The staff element must be converted into an array of objects, each including an \"id\" property (from the XML attribute), name, role, and hireDate keys as provided in the XML.  \n• The events element must be converted into an array of objects, each having keys for eventName, eventDate, and venue to match the structure and content of the XML events.  \n• All textual content from the XML elements (including values from both element text and attributes) must be preserved as values associated with the corresponding JSON keys.",
            "task_id": "170537",
            "task_name": "Convert XML to JSON",
            "input_type": "XML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "libraryInfo",
                "libraryInfo[libraryName]",
                "libraryInfo[location]",
                "books",
                "books[][id]",
                "books[][title]",
                "books[][author]",
                "books[][publishedYear]",
                "members",
                "members[][id]",
                "members[][name]",
                "members[][membershipLevel]",
                "members[][joinDate]",
                "staff",
                "staff[][id]",
                "staff[][name]",
                "staff[][role]",
                "staff[][hireDate]",
                "events",
                "events[][eventName]",
                "events[][eventDate]",
                "events[][venue]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170537_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<library>\n  <libraryInfo>\n    <libraryName>Central City Library</libraryName>\n    <location>Central City</location>\n  </libraryInfo>\n  <books>\n    <book id=\"1\">\n      <title>XML Fundamentals</title>\n      <author>John Doe</author>\n      <publishedYear>2020</publishedYear>\n    </book>\n    <book id=\"2\">\n      <title>Data Structures</title>\n      <author>Jane Smith</author>\n      <publishedYear>2018</publishedYear>\n    </book>\n    <book id=\"3\">\n      <title>Modern Programming</title>\n      <author>Sam Wilson</author>\n      <publishedYear>2021</publishedYear>\n    </book>\n  </books>\n  <members>\n    <member id=\"1001\">\n      <name>Anna Johnson</name>\n      <membershipLevel>Gold</membershipLevel>\n      <joinDate>2019-05-15</joinDate>\n    </member>\n    <member id=\"1002\">\n      <name>Betty Davis</name>\n      <membershipLevel>Silver</membershipLevel>\n      <joinDate>2020-08-22</joinDate>\n    </member>\n  </members>\n  <staff>\n    <staffMember id=\"2001\">\n      <name>Robert Brown</name>\n      <role>Librarian</role>\n      <hireDate>2015-03-10</hireDate>\n    </staffMember>\n    <staffMember id=\"2002\">\n      <name>Emily White</name>\n      <role>Assistant</role>\n      <hireDate>2018-07-01</hireDate>\n    </staffMember>\n  </staff>\n  <events>\n    <event>\n      <eventName>Book Fair</eventName>\n      <eventDate>2023-10-15</eventDate>\n      <venue>Main Hall</venue>\n    </event>\n    <event>\n      <eventName>Reading Marathon</eventName>\n      <eventDate>2023-11-01</eventDate>\n      <venue>Conference Room</venue>\n    </event>\n  </events>\n</library>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170537_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "libraryInfo",
                                "libraryInfo[libraryName]",
                                "libraryInfo[location]",
                                "books",
                                "books[][id]",
                                "books[][title]",
                                "books[][author]",
                                "books[][publishedYear]",
                                "members",
                                "members[][id]",
                                "members[][name]",
                                "members[][membershipLevel]",
                                "members[][joinDate]",
                                "staff",
                                "staff[][id]",
                                "staff[][name]",
                                "staff[][role]",
                                "staff[][hireDate]",
                                "events",
                                "events[][eventName]",
                                "events[][eventDate]",
                                "events[][venue]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<root>\n  <userInfo>\n    <userId>12345</userId>\n    <userName>John Doe</userName>\n    <contact>\n      <email>johndoe@example.com</email>\n      <phone>555-1234</phone>\n    </contact>\n  </userInfo>\n  <settings>\n    <theme>dark</theme>\n    <language>en</language>\n    <notifications enabled=\"true\">\n      <email>true</email>\n      <sms>false</sms>\n    </notifications>\n  </settings>\n  <orderHistory>\n    <order id=\"1\">\n      <date>2023-10-03</date>\n      <amount>150.25</amount>\n      <items>\n        <item>\n          <name>Widget</name>\n          <quantity>2</quantity>\n          <price>50.00</price>\n        </item>\n        <item>\n          <name>Gadget</name>\n          <quantity>1</quantity>\n          <price>50.25</price>\n        </item>\n      </items>\n    </order>\n    <order id=\"2\">\n      <date>2023-09-27</date>\n      <amount>89.99</amount>\n      <items>\n        <item>\n          <name>Thingamajig</name>\n          <quantity>3</quantity>\n          <price>29.99</price>\n        </item>\n      </items>\n    </order>\n  </orderHistory>\n  <metadata>\n    <created>2023-10-05</created>\n    <version>1.0</version>\n    <tags>\n      <tag>example</tag>\n      <tag>data</tag>\n      <tag>xml</tag>\n    </tags>\n  </metadata>\n</root>\n</code>",
            "feature_requirements": "• The JSON output must have a top-level object with keys that directly correspond to the XML root elements such as \"userInfo\", \"settings\", \"orderHistory\", and \"metadata\".  \n• The \"userInfo\" object must contain keys \"userId\" and \"userName\", and a nested \"contact\" object that includes \"email\" and \"phone\" keys.  \n• The \"settings\" object must include keys \"theme\" and \"language\", plus a \"notifications\" object that contains a boolean-like \"enabled\" indicator along with nested keys \"email\" and \"sms\".  \n• The \"orderHistory\" element must be represented as an array (or list) of orders, with each order object including an \"id\" property, and keys \"date\", \"amount\", and \"items\".  \n• Each order’s \"items\" must be an array of item objects, with every item containing \"name\", \"quantity\", and \"price\" values.  \n• The \"metadata\" object must have keys \"created\" and \"version\", as well as a \"tags\" array that includes each tag value from the XML.",
            "task_id": "170538",
            "task_name": "Convert XML to JSON",
            "input_type": "XML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "userInfo",
                "userInfo[userId]",
                "userInfo[userName]",
                "userInfo[contact]",
                "userInfo[contact][email]",
                "userInfo[contact][phone]",
                "settings",
                "settings[theme]",
                "settings[language]",
                "settings[notifications]",
                "settings[notifications][enabled]",
                "settings[notifications][email]",
                "settings[notifications][sms]",
                "orderHistory",
                "orderHistory[*][id]",
                "orderHistory[*][date]",
                "orderHistory[*][amount]",
                "orderHistory[*][items]",
                "orderHistory[*][items][*][name]",
                "orderHistory[*][items][*][quantity]",
                "orderHistory[*][items][*][price]",
                "metadata",
                "metadata[created]",
                "metadata[version]",
                "metadata[tags]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170538_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<root>\n  <userInfo>\n    <userId>12345</userId>\n    <userName>John Doe</userName>\n    <contact>\n      <email>johndoe@example.com</email>\n      <phone>555-1234</phone>\n    </contact>\n  </userInfo>\n  <settings>\n    <theme>dark</theme>\n    <language>en</language>\n    <notifications enabled=\"true\">\n      <email>true</email>\n      <sms>false</sms>\n    </notifications>\n  </settings>\n  <orderHistory>\n    <order id=\"1\">\n      <date>2023-10-03</date>\n      <amount>150.25</amount>\n      <items>\n        <item>\n          <name>Widget</name>\n          <quantity>2</quantity>\n          <price>50.00</price>\n        </item>\n        <item>\n          <name>Gadget</name>\n          <quantity>1</quantity>\n          <price>50.25</price>\n        </item>\n      </items>\n    </order>\n    <order id=\"2\">\n      <date>2023-09-27</date>\n      <amount>89.99</amount>\n      <items>\n        <item>\n          <name>Thingamajig</name>\n          <quantity>3</quantity>\n          <price>29.99</price>\n        </item>\n      </items>\n    </order>\n  </orderHistory>\n  <metadata>\n    <created>2023-10-05</created>\n    <version>1.0</version>\n    <tags>\n      <tag>example</tag>\n      <tag>data</tag>\n      <tag>xml</tag>\n    </tags>\n  </metadata>\n</root>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170538_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "userInfo",
                                "userInfo[userId]",
                                "userInfo[userName]",
                                "userInfo[contact]",
                                "userInfo[contact][email]",
                                "userInfo[contact][phone]",
                                "settings",
                                "settings[theme]",
                                "settings[language]",
                                "settings[notifications]",
                                "settings[notifications][enabled]",
                                "settings[notifications][email]",
                                "settings[notifications][sms]",
                                "orderHistory",
                                "orderHistory[*][id]",
                                "orderHistory[*][date]",
                                "orderHistory[*][amount]",
                                "orderHistory[*][items]",
                                "orderHistory[*][items][*][name]",
                                "orderHistory[*][items][*][quantity]",
                                "orderHistory[*][items][*][price]",
                                "metadata",
                                "metadata[created]",
                                "metadata[version]",
                                "metadata[tags]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<conversionTask>\n    <metadata>\n        <author>Jane Smith</author>\n        <creationDate>2023-10-01</creationDate>\n        <version>2.1</version>\n    </metadata>\n    <configuration>\n        <parameter name=\"inputFormat\" value=\"XML\"/>\n        <parameter name=\"outputFormat\" value=\"XML\"/>\n        <parameter name=\"strictParsing\" value=\"true\"/>\n    </configuration>\n    <input>\n        <fields>\n            <field name=\"userId\"/>\n            <field name=\"username\"/>\n            <field name=\"emailAddress\"/>\n        </fields>\n        <records>\n            <record>\n                <userId>101</userId>\n                <username>alice</username>\n                <emailAddress>alice@example.com</emailAddress>\n            </record>\n            <record>\n                <userId>102</userId>\n                <username>bob</username>\n                <emailAddress>bob@example.com</emailAddress>\n            </record>\n        </records>\n    </input>\n    <output>\n        <fields>\n            <field name=\"id\"/>\n            <field name=\"name\"/>\n            <field name=\"contact\"/>\n        </fields>\n        <records>\n            <record>\n                <id>101</id>\n                <name>Alice Jones</name>\n                <contact>alice.jones@example.com</contact>\n            </record>\n            <record>\n                <id>102</id>\n                <name>Bob Brown</name>\n                <contact>bob.brown@example.com</contact>\n            </record>\n        </records>\n    </output>\n    <logs>\n        <entry timestamp=\"2023-10-01T08:00:00Z\" message=\"Conversion started\"/>\n        <entry timestamp=\"2023-10-01T08:05:00Z\" message=\"First record processed\"/>\n        <entry timestamp=\"2023-10-01T08:10:00Z\" message=\"Conversion completed successfully\"/>\n    </logs>\n</conversionTask>\n</code>",
            "feature_requirements": "• The output JSON must have a top-level structure reflecting the XML tree, with keys for \"metadata\", \"configuration\", \"input\", \"output\", and \"logs\".  \n• Under \"metadata\", there must be keys for \"author\", \"creationDate\", and \"version\" with values \"Jane Smith\", \"2023-10-01\", and \"2.1\" respectively.  \n• The \"configuration\" section must represent a list (or collection) of parameters, each capturing a \"name\" and its corresponding \"value\" (e.g., \"inputFormat\": \"XML\", \"outputFormat\": \"XML\", \"strictParsing\": \"true\").  \n• The \"input\" section must include a \"fields\" collection listing objects (or values) with the names \"userId\", \"username\", and \"emailAddress\".  \n• The \"input\" section must also include a \"records\" array where each record is an object containing keys \"userId\", \"username\", and \"emailAddress\" with their respective values (e.g., \"101\", \"alice\", \"alice@example.com\" for the first record).  \n• The \"output\" section must include a \"fields\" collection listing objects (or values) with the names \"id\", \"name\", and \"contact\".  \n• The \"output\" section must include a \"records\" array where each record is an object containing keys \"id\", \"name\", and \"contact\" with values such as \"101\", \"Alice Jones\", \"alice.jones@example.com\" (and similarly for subsequent records).  \n• The \"logs\" section must be represented as an array of entries, each entry being an object with \"timestamp\" and \"message\" keys that capture the conversion events (e.g., the start, processing, and completion messages).",
            "task_id": "170539",
            "task_name": "Convert XML to JSON",
            "input_type": "XML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata[author]",
                "metadata[creationDate]",
                "metadata[version]",
                "configuration[].name",
                "configuration[].value",
                "input[fields]",
                "input[records][][userId]",
                "input[records][][username]",
                "input[records][][emailAddress]",
                "output[fields]",
                "output[records][][id]",
                "output[records][][name]",
                "output[records][][contact]",
                "logs[][timestamp]",
                "logs[][message]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "170539_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following XML code to JSON code.\n\n<code>\n<conversionTask>\n    <metadata>\n        <author>Jane Smith</author>\n        <creationDate>2023-10-01</creationDate>\n        <version>2.1</version>\n    </metadata>\n    <configuration>\n        <parameter name=\"inputFormat\" value=\"XML\"/>\n        <parameter name=\"outputFormat\" value=\"XML\"/>\n        <parameter name=\"strictParsing\" value=\"true\"/>\n    </configuration>\n    <input>\n        <fields>\n            <field name=\"userId\"/>\n            <field name=\"username\"/>\n            <field name=\"emailAddress\"/>\n        </fields>\n        <records>\n            <record>\n                <userId>101</userId>\n                <username>alice</username>\n                <emailAddress>alice@example.com</emailAddress>\n            </record>\n            <record>\n                <userId>102</userId>\n                <username>bob</username>\n                <emailAddress>bob@example.com</emailAddress>\n            </record>\n        </records>\n    </input>\n    <output>\n        <fields>\n            <field name=\"id\"/>\n            <field name=\"name\"/>\n            <field name=\"contact\"/>\n        </fields>\n        <records>\n            <record>\n                <id>101</id>\n                <name>Alice Jones</name>\n                <contact>alice.jones@example.com</contact>\n            </record>\n            <record>\n                <id>102</id>\n                <name>Bob Brown</name>\n                <contact>bob.brown@example.com</contact>\n            </record>\n        </records>\n    </output>\n    <logs>\n        <entry timestamp=\"2023-10-01T08:00:00Z\" message=\"Conversion started\"/>\n        <entry timestamp=\"2023-10-01T08:05:00Z\" message=\"First record processed\"/>\n        <entry timestamp=\"2023-10-01T08:10:00Z\" message=\"Conversion completed successfully\"/>\n    </logs>\n</conversionTask>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "170539_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata[author]",
                                "metadata[creationDate]",
                                "metadata[version]",
                                "configuration[].name",
                                "configuration[].value",
                                "input[fields]",
                                "input[records][][userId]",
                                "input[records][][username]",
                                "input[records][][emailAddress]",
                                "output[fields]",
                                "output[records][][id]",
                                "output[records][][name]",
                                "output[records][][contact]",
                                "logs[][timestamp]",
                                "logs[][message]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"organization\": \"City Library\",\n  \"address\": {\n    \"street\": \"456 Elm Street\",\n    \"city\": \"Metropolis\",\n    \"state\": \"MA\",\n    \"postal_code\": \"02139\"\n  },\n  \"departments\": [\n    {\n      \"name\": \"Fiction\",\n      \"categories\": [\"Mystery\", \"Drama\", \"Historical\", \"Romance\"]\n    },\n    {\n      \"name\": \"Non-Fiction\",\n      \"categories\": [\"Biography\", \"Science\", \"Technology\", \"Self-help\"]\n    },\n    {\n      \"name\": \"Children's\",\n      \"categories\": [\"Picture Books\", \"Educational\", \"Fantasy\"]\n    }\n  ],\n  \"hours\": {\n    \"monday\": \"9:00 AM - 6:00 PM\",\n    \"tuesday\": \"9:00 AM - 6:00 PM\",\n    \"wednesday\": \"9:00 AM - 6:00 PM\",\n    \"thursday\": \"9:00 AM - 8:00 PM\",\n    \"friday\": \"9:00 AM - 6:00 PM\",\n    \"saturday\": \"10:00 AM - 4:00 PM\",\n    \"sunday\": \"Closed\"\n  },\n  \"services\": [\n    \"Free Wi-Fi\",\n    \"Community Events\",\n    \"Children's Reading Hours\",\n    \"Book Rentals\"\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must have a clearly defined root element that encompasses all other elements.\n• There must be an element representing the organization, containing the organization’s name.\n• A nested element must encapsulate address details, with child elements for street, city, state, and postal_code.\n• There must be an element for departments that contains multiple department elements.\n• Each department element should include a name element and a nested list element for categories.\n• The categories within each department must be represented as individual elements for each category.\n• A dedicated element must represent hours, containing child elements for each day of the week with their respective operating hours.\n• There must be an element for services, containing separate elements for each listed service.",
            "task_id": "051700",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[organization]",
                "root[organization][name]",
                "root[organization][address]",
                "root[organization][address][street]",
                "root[organization][address][city]",
                "root[organization][address][state]",
                "root[organization][address][postal_code]",
                "root[departments]",
                "root[departments][department]",
                "root[departments][department][name]",
                "root[departments][department][categories]",
                "root[departments][department][categories][category]",
                "root[hours]",
                "root[hours][monday]",
                "root[hours][tuesday]",
                "root[hours][wednesday]",
                "root[hours][thursday]",
                "root[hours][friday]",
                "root[hours][saturday]",
                "root[hours][sunday]",
                "root[services]",
                "root[services][service]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051700_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"organization\": \"City Library\",\n  \"address\": {\n    \"street\": \"456 Elm Street\",\n    \"city\": \"Metropolis\",\n    \"state\": \"MA\",\n    \"postal_code\": \"02139\"\n  },\n  \"departments\": [\n    {\n      \"name\": \"Fiction\",\n      \"categories\": [\"Mystery\", \"Drama\", \"Historical\", \"Romance\"]\n    },\n    {\n      \"name\": \"Non-Fiction\",\n      \"categories\": [\"Biography\", \"Science\", \"Technology\", \"Self-help\"]\n    },\n    {\n      \"name\": \"Children's\",\n      \"categories\": [\"Picture Books\", \"Educational\", \"Fantasy\"]\n    }\n  ],\n  \"hours\": {\n    \"monday\": \"9:00 AM - 6:00 PM\",\n    \"tuesday\": \"9:00 AM - 6:00 PM\",\n    \"wednesday\": \"9:00 AM - 6:00 PM\",\n    \"thursday\": \"9:00 AM - 8:00 PM\",\n    \"friday\": \"9:00 AM - 6:00 PM\",\n    \"saturday\": \"10:00 AM - 4:00 PM\",\n    \"sunday\": \"Closed\"\n  },\n  \"services\": [\n    \"Free Wi-Fi\",\n    \"Community Events\",\n    \"Children's Reading Hours\",\n    \"Book Rentals\"\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051700_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[organization]",
                                "root[organization][name]",
                                "root[organization][address]",
                                "root[organization][address][street]",
                                "root[organization][address][city]",
                                "root[organization][address][state]",
                                "root[organization][address][postal_code]",
                                "root[departments]",
                                "root[departments][department]",
                                "root[departments][department][name]",
                                "root[departments][department][categories]",
                                "root[departments][department][categories][category]",
                                "root[hours]",
                                "root[hours][monday]",
                                "root[hours][tuesday]",
                                "root[hours][wednesday]",
                                "root[hours][thursday]",
                                "root[hours][friday]",
                                "root[hours][saturday]",
                                "root[hours][sunday]",
                                "root[services]",
                                "root[services][service]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": \"Mars Colony Establishment Conference\",\n  \"location\": {\n    \"planet\": \"Mars\",\n    \"base\": \"Olympus Base\",\n    \"coordinates\": [18.65, 77.75]\n  },\n  \"participants\": [\n    {\n      \"name\": \"Dr. Lena Kim\",\n      \"role\": \"Lead Scientist\",\n      \"department\": \"Biology\"\n    },\n    {\n      \"name\": \"Sgt. Tom O'Reilly\",\n      \"role\": \"Security Officer\",\n      \"department\": \"Safety\"\n    },\n    {\n      \"name\": \"Amira Khalid\",\n      \"role\": \"Logistics Coordinator\",\n      \"department\": \"Operations\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"date\": \"2050-01-04\",\n      \"session\": \"Inaugural Speech\",\n      \"durationMinutes\": 60\n    },\n    {\n      \"date\": \"2050-01-05\",\n      \"session\": \"Keynote Innovations\",\n      \"durationMinutes\": 90\n    },\n    {\n      \"date\": \"2050-01-06\",\n      \"session\": \"Roundtable Discussions\",\n      \"durationMinutes\": 120\n    }\n  ],\n  \"metadata\": {\n    \"created\": \"2049-12-15T08:00:00Z\",\n    \"version\": 1,\n    \"tags\": [\"space\", \"exploration\", \"conference\"]\n  }\n}\n</code>",
            "feature_requirements": "• The XML must have a single root element that encloses all other elements.  \n• There must be an element representing the \"event\" with its text value set to \"Mars Colony Establishment Conference\".  \n• A \"location\" element must exist with child elements for \"planet\", \"base\", and \"coordinates\"; the \"coordinates\" element should further contain two child elements representing the two numeric values [18.65, 77.75].  \n• There must be a container element for \"participants\" that includes multiple participant elements, each with child elements for \"name\", \"role\", and \"department\" matching the JSON objects.  \n• A \"schedule\" container must be present, holding multiple event elements where each contains child elements for \"date\", \"session\", and \"durationMinutes\" with their corresponding values.  \n• A \"metadata\" element must be included with child elements for \"created\" (a timestamp), \"version\" (a numeric value), and \"tags\"; the \"tags\" element should encapsulate individual tag elements for each string in the JSON array (e.g., \"space\", \"exploration\", \"conference\").  \n• All element names and their text contents must accurately reflect the keys and values provided in the original JSON code.",
            "task_id": "051701",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[event]",
                "root[location]",
                "root[location][planet]",
                "root[location][base]",
                "root[location][coordinates]",
                "root[participants]",
                "root[participants][participant]",
                "root[participants][participant][name]",
                "root[participants][participant][role]",
                "root[participants][participant][department]",
                "root[schedule]",
                "root[schedule][event]",
                "root[schedule][event][date]",
                "root[schedule][event][session]",
                "root[schedule][event][durationMinutes]",
                "root[metadata]",
                "root[metadata][created]",
                "root[metadata][version]",
                "root[metadata][tags]",
                "root[metadata][tags][tag]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051701_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": \"Mars Colony Establishment Conference\",\n  \"location\": {\n    \"planet\": \"Mars\",\n    \"base\": \"Olympus Base\",\n    \"coordinates\": [18.65, 77.75]\n  },\n  \"participants\": [\n    {\n      \"name\": \"Dr. Lena Kim\",\n      \"role\": \"Lead Scientist\",\n      \"department\": \"Biology\"\n    },\n    {\n      \"name\": \"Sgt. Tom O'Reilly\",\n      \"role\": \"Security Officer\",\n      \"department\": \"Safety\"\n    },\n    {\n      \"name\": \"Amira Khalid\",\n      \"role\": \"Logistics Coordinator\",\n      \"department\": \"Operations\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"date\": \"2050-01-04\",\n      \"session\": \"Inaugural Speech\",\n      \"durationMinutes\": 60\n    },\n    {\n      \"date\": \"2050-01-05\",\n      \"session\": \"Keynote Innovations\",\n      \"durationMinutes\": 90\n    },\n    {\n      \"date\": \"2050-01-06\",\n      \"session\": \"Roundtable Discussions\",\n      \"durationMinutes\": 120\n    }\n  ],\n  \"metadata\": {\n    \"created\": \"2049-12-15T08:00:00Z\",\n    \"version\": 1,\n    \"tags\": [\"space\", \"exploration\", \"conference\"]\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051701_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[event]",
                                "root[location]",
                                "root[location][planet]",
                                "root[location][base]",
                                "root[location][coordinates]",
                                "root[participants]",
                                "root[participants][participant]",
                                "root[participants][participant][name]",
                                "root[participants][participant][role]",
                                "root[participants][participant][department]",
                                "root[schedule]",
                                "root[schedule][event]",
                                "root[schedule][event][date]",
                                "root[schedule][event][session]",
                                "root[schedule][event][durationMinutes]",
                                "root[metadata]",
                                "root[metadata][created]",
                                "root[metadata][version]",
                                "root[metadata][tags]",
                                "root[metadata][tags][tag]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"settingName\": \"Urban City Library\",\n  \"location\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Metropolis\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\"\n  },\n  \"maintenanceSchedule\": [\n    {\n      \"task\": \"Clean carpets\",\n      \"frequency\": \"Monthly\",\n      \"lastPerformed\": \"2023-09-12\"\n    },\n    {\n      \"task\": \"Ventilation check\",\n      \"frequency\": \"Quarterly\",\n      \"lastPerformed\": \"2023-07-01\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Librarian\",\n      \"shift\": \"Morning\"\n    },\n    {\n      \"name\": \"Bob Smith\",\n      \"role\": \"Custodian\",\n      \"shift\": \"Evening\"\n    }\n  ],\n  \"amenities\": [\n    \"WiFi\",\n    \"Study Rooms\",\n    \"Printing Services\",\n    \"Cafe\"\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must include a single root element that encloses all other elements.  \n• There must be an element representing the \"settingName\" key with its corresponding text value.  \n• The XML must contain a \"location\" element that nests sub-elements for \"street\", \"city\", \"state\", and \"postalCode\", each holding the appropriate text value.  \n• A \"maintenanceSchedule\" element must be present, containing one or more child elements that each represent an individual maintenance task with nested elements for \"task\", \"frequency\", and \"lastPerformed\".  \n• The structure must include a \"staff\" element with one or more child elements that each describe a staff member, including nested elements for \"name\", \"role\", and \"shift\".  \n• An \"amenities\" element must be included which encloses multiple entries, each corresponding to one of the amenities listed in the original JSON (e.g., \"WiFi\", \"Study Rooms\", \"Printing Services\", \"Cafe\").  \n• The XML element names should clearly and consistently represent the original JSON keys, ensuring that the semantic meaning is maintained in the converted structure.  \n• The hierarchical structure of the generated XML must mirror the nested nature of the original JSON, ensuring that relationships between data items are preserved.",
            "task_id": "051702",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[settingName]",
                "root[location]",
                "root[location][street]",
                "root[location][city]",
                "root[location][state]",
                "root[location][postalCode]",
                "root[maintenanceSchedule]",
                "root[maintenanceSchedule][task]",
                "root[maintenanceSchedule][frequency]",
                "root[maintenanceSchedule][lastPerformed]",
                "root[staff]",
                "root[staff][name]",
                "root[staff][role]",
                "root[staff][shift]",
                "root[amenities]",
                "root[amenities][amenity]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051702_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"settingName\": \"Urban City Library\",\n  \"location\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Metropolis\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\"\n  },\n  \"maintenanceSchedule\": [\n    {\n      \"task\": \"Clean carpets\",\n      \"frequency\": \"Monthly\",\n      \"lastPerformed\": \"2023-09-12\"\n    },\n    {\n      \"task\": \"Ventilation check\",\n      \"frequency\": \"Quarterly\",\n      \"lastPerformed\": \"2023-07-01\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Librarian\",\n      \"shift\": \"Morning\"\n    },\n    {\n      \"name\": \"Bob Smith\",\n      \"role\": \"Custodian\",\n      \"shift\": \"Evening\"\n    }\n  ],\n  \"amenities\": [\n    \"WiFi\",\n    \"Study Rooms\",\n    \"Printing Services\",\n    \"Cafe\"\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051702_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[settingName]",
                                "root[location]",
                                "root[location][street]",
                                "root[location][city]",
                                "root[location][state]",
                                "root[location][postalCode]",
                                "root[maintenanceSchedule]",
                                "root[maintenanceSchedule][task]",
                                "root[maintenanceSchedule][frequency]",
                                "root[maintenanceSchedule][lastPerformed]",
                                "root[staff]",
                                "root[staff][name]",
                                "root[staff][role]",
                                "root[staff][shift]",
                                "root[amenities]",
                                "root[amenities][amenity]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"ship_name\": \"Star Voyager\",\n  \"captain\": {\n    \"name\": \"Aurora\",\n    \"age\": 45,\n    \"rank\": \"Captain\"\n  },\n  \"crew\": [\n    {\n      \"name\": \"Kirk\",\n      \"role\": \"Pilot\",\n      \"experience_years\": 12\n    },\n    {\n      \"name\": \"Spock\",\n      \"role\": \"Science Officer\",\n      \"experience_years\": 15\n    },\n    {\n      \"name\": \"McCoy\",\n      \"role\": \"Medic\",\n      \"experience_years\": 10\n    }\n  ],\n  \"ship_systems\": {\n    \"engine\": {\n      \"status\": \"operational\",\n      \"power_level\": 87\n    },\n    \"shields\": {\n      \"status\": \"operational\",\n      \"strength\": 95\n    },\n    \"weapons\": {\n      \"status\": \"standby\",\n      \"armed\": false\n    }\n  },\n  \"mission\": {\n    \"objective\": \"Explore unknown galaxies\",\n    \"destination\": \"Sector 7G\",\n    \"duration_days\": 42,\n    \"waypoints\": [\n      \"Alpha Centauri\",\n      \"Betelgeuse\",\n      \"Sirius\"\n    ]\n  }\n}\n</code>",
            "feature_requirements": "• The XML must have a single root element that encloses all converted data from the JSON.  \n• The converted output must include an element corresponding to \"ship_name\" containing the value \"Star Voyager\".  \n• There must be a \"captain\" element that contains child elements for \"name\", \"age\", and \"rank\", each holding the respective values (\"Aurora\", 45, \"Captain\").  \n• A \"crew\" element must be present that contains multiple child elements (one for each crew member) with sub-elements for \"name\", \"role\", and \"experience_years\", exactly reflecting each crew member’s details.  \n• The XML must include a \"ship_systems\" element, which in turn contains nested elements for \"engine\", \"shields\", and \"weapons\", and each of these must include their respective sub-elements for properties such as \"status\", \"power_level\" (or \"strength\" for shields), and \"armed\" (for weapons).  \n• There must be a \"mission\" element containing child elements for \"objective\", \"destination\", and \"duration_days\" with the corresponding values.  \n• The \"mission\" element must also include a \"waypoints\" section that represents the array from JSON; each waypoint from the list (\"Alpha Centauri\", \"Betelgeuse\", \"Sirius\") must be converted into individual sub-elements within this section.",
            "task_id": "051703",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[ship_name]",
                "root[captain]",
                "root[captain][name]",
                "root[captain][age]",
                "root[captain][rank]",
                "root[crew]",
                "root[crew][crew_member][name]",
                "root[crew][crew_member][role]",
                "root[crew][crew_member][experience_years]",
                "root[ship_systems]",
                "root[ship_systems][engine][status]",
                "root[ship_systems][engine][power_level]",
                "root[ship_systems][shields][status]",
                "root[ship_systems][shields][strength]",
                "root[ship_systems][weapons][status]",
                "root[ship_systems][weapons][armed]",
                "root[mission]",
                "root[mission][objective]",
                "root[mission][destination]",
                "root[mission][duration_days]",
                "root[mission][waypoints]",
                "root[mission][waypoints][waypoint]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051703_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"ship_name\": \"Star Voyager\",\n  \"captain\": {\n    \"name\": \"Aurora\",\n    \"age\": 45,\n    \"rank\": \"Captain\"\n  },\n  \"crew\": [\n    {\n      \"name\": \"Kirk\",\n      \"role\": \"Pilot\",\n      \"experience_years\": 12\n    },\n    {\n      \"name\": \"Spock\",\n      \"role\": \"Science Officer\",\n      \"experience_years\": 15\n    },\n    {\n      \"name\": \"McCoy\",\n      \"role\": \"Medic\",\n      \"experience_years\": 10\n    }\n  ],\n  \"ship_systems\": {\n    \"engine\": {\n      \"status\": \"operational\",\n      \"power_level\": 87\n    },\n    \"shields\": {\n      \"status\": \"operational\",\n      \"strength\": 95\n    },\n    \"weapons\": {\n      \"status\": \"standby\",\n      \"armed\": false\n    }\n  },\n  \"mission\": {\n    \"objective\": \"Explore unknown galaxies\",\n    \"destination\": \"Sector 7G\",\n    \"duration_days\": 42,\n    \"waypoints\": [\n      \"Alpha Centauri\",\n      \"Betelgeuse\",\n      \"Sirius\"\n    ]\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051703_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[ship_name]",
                                "root[captain]",
                                "root[captain][name]",
                                "root[captain][age]",
                                "root[captain][rank]",
                                "root[crew]",
                                "root[crew][crew_member][name]",
                                "root[crew][crew_member][role]",
                                "root[crew][crew_member][experience_years]",
                                "root[ship_systems]",
                                "root[ship_systems][engine][status]",
                                "root[ship_systems][engine][power_level]",
                                "root[ship_systems][shields][status]",
                                "root[ship_systems][shields][strength]",
                                "root[ship_systems][weapons][status]",
                                "root[ship_systems][weapons][armed]",
                                "root[mission]",
                                "root[mission][objective]",
                                "root[mission][destination]",
                                "root[mission][duration_days]",
                                "root[mission][waypoints]",
                                "root[mission][waypoints][waypoint]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"restaurantName\": \"The Green Garden\",\n  \"location\": {\n    \"address\": \"123 Maple Street\",\n    \"city\": \"Springfield\",\n    \"postalCode\": \"12345\"\n  },\n  \"menu\": [\n    {\n      \"name\": \"Grilled Salmon\",\n      \"price\": 16.95,\n      \"categories\": [\"Seafood\", \"Main Course\"]\n    },\n    {\n      \"name\": \"Garden Salad\",\n      \"price\": 7.5,\n      \"categories\": [\"Vegan\", \"Appetizer\"]\n    },\n    {\n      \"name\": \"Chocolate Lava Cake\",\n      \"price\": 6.75,\n      \"categories\": [\"Dessert\"]\n    }\n  ],\n  \"reservations\": [\n    {\n      \"reservationId\": 101,\n      \"customerName\": \"Emily Rose\",\n      \"date\": \"2023-11-15\",\n      \"time\": \"19:30\",\n      \"partySize\": 4\n    },\n    {\n      \"reservationId\": 102,\n      \"customerName\": \"Michael Doe\",\n      \"date\": \"2023-11-16\",\n      \"time\": \"20:00\",\n      \"partySize\": 2\n    }\n  ],\n  \"reviews\": [\n    {\n      \"customerName\": \"Emily Rose\",\n      \"rating\": 4.5,\n      \"comment\": \"Great food and relaxing atmosphere.\"\n    },\n    {\n      \"customerName\": \"Michael Doe\",\n      \"rating\": 4.0,\n      \"comment\": \"Lovely service and delicious meals.\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "- The output must have a single root element that encloses all other elements.\n- A child element for the restaurant name must be present, containing the text \"The Green Garden\".\n- A \"location\" element must be included with child elements for \"address\", \"city\", and \"postalCode\" holding the corresponding values.\n- A \"menu\" element must be present that contains multiple \"item\" (or similar) elements, each representing a menu entry.\n- Each menu entry element must have a child element for \"name\" (e.g., \"Grilled Salmon\", \"Garden Salad\", \"Chocolate Lava Cake\"), a \"price\" element with a numeric value, and a \"categories\" element that lists one or more category items.\n- A \"reservations\" element must be included that contains multiple \"reservation\" elements, with each reservation element containing child elements such as \"reservationId\", \"customerName\", \"date\", \"time\", and \"partySize\".\n- A \"reviews\" element must be added that comprises multiple \"review\" elements, each containing a \"customerName\", a \"rating\" element, and a \"comment\" element.\n- All values from the original JSON must be represented as text content within their corresponding XML elements.",
            "task_id": "051704",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[restaurantName]",
                "root[location]",
                "root[location][address]",
                "root[location][city]",
                "root[location][postalCode]",
                "root[menu]",
                "root[menu][item]",
                "root[menu][item][name]",
                "root[menu][item][price]",
                "root[menu][item][categories]",
                "root[reservations]",
                "root[reservations][reservation]",
                "root[reservations][reservation][reservationId]",
                "root[reservations][reservation][customerName]",
                "root[reservations][reservation][date]",
                "root[reservations][reservation][time]",
                "root[reservations][reservation][partySize]",
                "root[reviews]",
                "root[reviews][review]",
                "root[reviews][review][customerName]",
                "root[reviews][review][rating]",
                "root[reviews][review][comment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051704_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"restaurantName\": \"The Green Garden\",\n  \"location\": {\n    \"address\": \"123 Maple Street\",\n    \"city\": \"Springfield\",\n    \"postalCode\": \"12345\"\n  },\n  \"menu\": [\n    {\n      \"name\": \"Grilled Salmon\",\n      \"price\": 16.95,\n      \"categories\": [\"Seafood\", \"Main Course\"]\n    },\n    {\n      \"name\": \"Garden Salad\",\n      \"price\": 7.5,\n      \"categories\": [\"Vegan\", \"Appetizer\"]\n    },\n    {\n      \"name\": \"Chocolate Lava Cake\",\n      \"price\": 6.75,\n      \"categories\": [\"Dessert\"]\n    }\n  ],\n  \"reservations\": [\n    {\n      \"reservationId\": 101,\n      \"customerName\": \"Emily Rose\",\n      \"date\": \"2023-11-15\",\n      \"time\": \"19:30\",\n      \"partySize\": 4\n    },\n    {\n      \"reservationId\": 102,\n      \"customerName\": \"Michael Doe\",\n      \"date\": \"2023-11-16\",\n      \"time\": \"20:00\",\n      \"partySize\": 2\n    }\n  ],\n  \"reviews\": [\n    {\n      \"customerName\": \"Emily Rose\",\n      \"rating\": 4.5,\n      \"comment\": \"Great food and relaxing atmosphere.\"\n    },\n    {\n      \"customerName\": \"Michael Doe\",\n      \"rating\": 4.0,\n      \"comment\": \"Lovely service and delicious meals.\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051704_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[restaurantName]",
                                "root[location]",
                                "root[location][address]",
                                "root[location][city]",
                                "root[location][postalCode]",
                                "root[menu]",
                                "root[menu][item]",
                                "root[menu][item][name]",
                                "root[menu][item][price]",
                                "root[menu][item][categories]",
                                "root[reservations]",
                                "root[reservations][reservation]",
                                "root[reservations][reservation][reservationId]",
                                "root[reservations][reservation][customerName]",
                                "root[reservations][reservation][date]",
                                "root[reservations][reservation][time]",
                                "root[reservations][reservation][partySize]",
                                "root[reviews]",
                                "root[reviews][review]",
                                "root[reviews][review][customerName]",
                                "root[reviews][review][rating]",
                                "root[reviews][review][comment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"location\": \"Enchanted Forest\",\n  \"coordinates\": {\n    \"latitude\": 45.678,\n    \"longitude\": -123.456\n  },\n  \"weather\": {\n    \"temperature\": 68,\n    \"conditions\": \"Sunny\",\n    \"humidity\": 35\n  },\n  \"flora\": [\n    \"oak\",\n    \"pine\",\n    \"maple\"\n  ],\n  \"fauna\": [\n    {\n      \"species\": \"Deer\",\n      \"count\": 12,\n      \"active\": true\n    },\n    {\n      \"species\": \"Fox\",\n      \"count\": 3,\n      \"active\": false\n    }\n  ],\n  \"attractions\": [\n    {\n      \"name\": \"Mystic River\",\n      \"description\": \"A flowing river steeped in local lore.\"\n    },\n    {\n      \"name\": \"Hidden Grove\",\n      \"description\": \"A serene clearing surrounded by towering trees.\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must include a single root element that encapsulates all the content.  \n• There must be an element representing \"location\" with the text value \"Enchanted Forest\".  \n• There must be an element for \"coordinates\" containing child elements for \"latitude\" (with the value 45.678) and \"longitude\" (with the value -123.456).  \n• There must be a \"weather\" element that includes nested elements for \"temperature\" (68), \"conditions\" (\"Sunny\"), and \"humidity\" (35).  \n• There must be a \"flora\" section represented as a list with child elements for each item (\"oak\", \"pine\", \"maple\").  \n• There must be a \"fauna\" section represented as a list where each child element corresponds to an individual fauna entry that includes \"species\", \"count\", and \"active\" sub-elements (with values, for example, \"Deer\", 12, true and \"Fox\", 3, false).  \n• There must be an \"attractions\" section represented as a list where each child element includes \"name\" and \"description\" sub-elements, aligning with the two provided attraction objects.",
            "task_id": "051705",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[location]",
                "root[coordinates]",
                "root[coordinates][latitude]",
                "root[coordinates][longitude]",
                "root[weather]",
                "root[weather][temperature]",
                "root[weather][conditions]",
                "root[weather][humidity]",
                "root[flora]",
                "root[fauna]",
                "root[fauna][entry][species]",
                "root[fauna][entry][count]",
                "root[fauna][entry][active]",
                "root[attractions]",
                "root[attractions][entry][name]",
                "root[attractions][entry][description]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051705_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"location\": \"Enchanted Forest\",\n  \"coordinates\": {\n    \"latitude\": 45.678,\n    \"longitude\": -123.456\n  },\n  \"weather\": {\n    \"temperature\": 68,\n    \"conditions\": \"Sunny\",\n    \"humidity\": 35\n  },\n  \"flora\": [\n    \"oak\",\n    \"pine\",\n    \"maple\"\n  ],\n  \"fauna\": [\n    {\n      \"species\": \"Deer\",\n      \"count\": 12,\n      \"active\": true\n    },\n    {\n      \"species\": \"Fox\",\n      \"count\": 3,\n      \"active\": false\n    }\n  ],\n  \"attractions\": [\n    {\n      \"name\": \"Mystic River\",\n      \"description\": \"A flowing river steeped in local lore.\"\n    },\n    {\n      \"name\": \"Hidden Grove\",\n      \"description\": \"A serene clearing surrounded by towering trees.\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051705_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[location]",
                                "root[coordinates]",
                                "root[coordinates][latitude]",
                                "root[coordinates][longitude]",
                                "root[weather]",
                                "root[weather][temperature]",
                                "root[weather][conditions]",
                                "root[weather][humidity]",
                                "root[flora]",
                                "root[fauna]",
                                "root[fauna][entry][species]",
                                "root[fauna][entry][count]",
                                "root[fauna][entry][active]",
                                "root[attractions]",
                                "root[attractions][entry][name]",
                                "root[attractions][entry][description]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"userInfo\": {\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"id\": 1023\n  },\n  \"configuration\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true,\n    \"autoSaveInterval\": 10\n  },\n  \"recentActivities\": [\n    {\n      \"activity\": \"login\",\n      \"timestamp\": \"2023-10-01T08:00:00Z\"\n    },\n    {\n      \"activity\": \"update_profile\",\n      \"timestamp\": \"2023-10-01T09:15:00Z\"\n    },\n    {\n      \"activity\": \"logout\",\n      \"timestamp\": \"2023-10-01T10:00:00Z\"\n    }\n  ],\n  \"preferences\": {\n    \"dashboardWidgets\": [\n      \"weather\",\n      \"news\",\n      \"finance\"\n    ],\n    \"defaultPage\": \"home\",\n    \"itemsPerPage\": 20\n  },\n  \"systemLogs\": [\n    {\n      \"event\": \"system_check\",\n      \"status\": \"success\",\n      \"details\": \"All systems operational\"\n    },\n    {\n      \"event\": \"backup\",\n      \"status\": \"completed\",\n      \"details\": \"Backup finished in 3 minutes\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output XML must contain a single root element that encloses all other elements.\n• The XML must include a \"userInfo\" element that contains sub-elements for \"username\", \"email\", and \"id\" with their corresponding values.\n• The XML must include a \"configuration\" element with child elements \"theme\", \"language\", \"notifications\", and \"autoSaveInterval\", each holding the appropriate values.\n• The XML must include a \"recentActivities\" element that contains multiple child elements or repeated entries, each representing an activity with its own \"activity\" and \"timestamp\" sub-elements.\n• The XML must include a \"preferences\" element that contains a \"dashboardWidgets\" element representing a list of widget names, along with individual elements for \"defaultPage\" and \"itemsPerPage\".\n• The XML must include a \"systemLogs\" element that contains multiple log entry elements, each with \"event\", \"status\", and \"details\" sub-elements representing the corresponding information.",
            "task_id": "051706",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[userInfo]",
                "root[userInfo][username]",
                "root[userInfo][email]",
                "root[userInfo][id]",
                "root[configuration]",
                "root[configuration][theme]",
                "root[configuration][language]",
                "root[configuration][notifications]",
                "root[configuration][autoSaveInterval]",
                "root[recentActivities]",
                "root[recentActivities][*][activity]",
                "root[recentActivities][*][timestamp]",
                "root[preferences]",
                "root[preferences][dashboardWidgets]",
                "root[preferences][defaultPage]",
                "root[preferences][itemsPerPage]",
                "root[systemLogs]",
                "root[systemLogs][*][event]",
                "root[systemLogs][*][status]",
                "root[systemLogs][*][details]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051706_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"userInfo\": {\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"id\": 1023\n  },\n  \"configuration\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"notifications\": true,\n    \"autoSaveInterval\": 10\n  },\n  \"recentActivities\": [\n    {\n      \"activity\": \"login\",\n      \"timestamp\": \"2023-10-01T08:00:00Z\"\n    },\n    {\n      \"activity\": \"update_profile\",\n      \"timestamp\": \"2023-10-01T09:15:00Z\"\n    },\n    {\n      \"activity\": \"logout\",\n      \"timestamp\": \"2023-10-01T10:00:00Z\"\n    }\n  ],\n  \"preferences\": {\n    \"dashboardWidgets\": [\n      \"weather\",\n      \"news\",\n      \"finance\"\n    ],\n    \"defaultPage\": \"home\",\n    \"itemsPerPage\": 20\n  },\n  \"systemLogs\": [\n    {\n      \"event\": \"system_check\",\n      \"status\": \"success\",\n      \"details\": \"All systems operational\"\n    },\n    {\n      \"event\": \"backup\",\n      \"status\": \"completed\",\n      \"details\": \"Backup finished in 3 minutes\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051706_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[userInfo]",
                                "root[userInfo][username]",
                                "root[userInfo][email]",
                                "root[userInfo][id]",
                                "root[configuration]",
                                "root[configuration][theme]",
                                "root[configuration][language]",
                                "root[configuration][notifications]",
                                "root[configuration][autoSaveInterval]",
                                "root[recentActivities]",
                                "root[recentActivities][*][activity]",
                                "root[recentActivities][*][timestamp]",
                                "root[preferences]",
                                "root[preferences][dashboardWidgets]",
                                "root[preferences][defaultPage]",
                                "root[preferences][itemsPerPage]",
                                "root[systemLogs]",
                                "root[systemLogs][*][event]",
                                "root[systemLogs][*][status]",
                                "root[systemLogs][*][details]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 1024,\n    \"name\": \"Alice Johnson\",\n    \"email\": \"alice.johnson@example.com\",\n    \"roles\": [\"editor\", \"moderator\"],\n    \"preferences\": {\n      \"theme\": \"light\",\n      \"notifications\": {\n        \"email\": true,\n        \"sms\": false\n      }\n    }\n  },\n  \"system\": {\n    \"version\": \"1.4.2\",\n    \"maintenance\": false,\n    \"supportedLanguages\": [\"en\", \"es\", \"fr\", \"de\"]\n  },\n  \"logs\": [\n    {\n      \"timestamp\": \"2023-10-01T12:34:56Z\",\n      \"action\": \"login\",\n      \"status\": \"success\"\n    },\n    {\n      \"timestamp\": \"2023-10-02T09:20:30Z\",\n      \"action\": \"update_profile\",\n      \"status\": \"success\"\n    }\n  ],\n  \"tasks\": {\n    \"pending\": [\n      {\n        \"taskId\": \"T1001\",\n        \"description\": \"Review user submissions\",\n        \"priority\": \"high\"\n      },\n      {\n        \"taskId\": \"T1002\",\n        \"description\": \"Update terms of service\",\n        \"priority\": \"medium\"\n      }\n    ],\n    \"completed\": [\n      {\n        \"taskId\": \"T0999\",\n        \"description\": \"Fix login bug\",\n        \"priority\": \"high\",\n        \"completedAt\": \"2023-09-28T08:15:00Z\"\n      }\n    ]\n  },\n  \"metrics\": {\n    \"activeUsers\": 256,\n    \"pageViews\": 13450,\n    \"conversionRate\": 0.045\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must contain a main root element that encapsulates all converted data segments.  \n• There must be distinct XML sections corresponding to the top-level JSON keys: \"user\", \"system\", \"logs\", \"tasks\", and \"metrics\".  \n• The \"user\" section must include child elements for \"id\", \"name\", \"email\", \"roles\", and \"preferences\", with \"roles\" represented as a list of elements.  \n• Within the \"user\" section, the \"preferences\" element must include a \"theme\" element and a \"notifications\" element containing \"email\" and \"sms\" sub-elements.  \n• The \"system\" section must include child elements for \"version\", \"maintenance\", and \"supportedLanguages\", with \"supportedLanguages\" represented as a list of elements.  \n• The \"logs\" section must be structured as a list of log entries, where each entry includes child elements for \"timestamp\", \"action\", and \"status\".  \n• The \"tasks\" section must be divided into two parts – one for \"pending\" tasks and one for \"completed\" tasks – each containing task elements with corresponding child elements such as \"taskId\", \"description\", \"priority\", and, where applicable, \"completedAt\".  \n• The \"metrics\" section must include child elements for \"activeUsers\", \"pageViews\", and \"conversionRate\", ensuring numerical values are preserved as text content.",
            "task_id": "051707",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[user]",
                "root[user][id]",
                "root[user][name]",
                "root[user][email]",
                "root[user][roles]",
                "root[user][preferences]",
                "root[user][preferences][theme]",
                "root[user][preferences][notifications]",
                "root[user][preferences][notifications][email]",
                "root[user][preferences][notifications][sms]",
                "root[system]",
                "root[system][version]",
                "root[system][maintenance]",
                "root[system][supportedLanguages]",
                "root[system][supportedLanguages][*]",
                "root[logs]",
                "root[logs][entry]",
                "root[logs][entry][timestamp]",
                "root[logs][entry][action]",
                "root[logs][entry][status]",
                "root[tasks]",
                "root[tasks][pending]",
                "root[tasks][pending][task]",
                "root[tasks][pending][task][taskId]",
                "root[tasks][pending][task][description]",
                "root[tasks][pending][task][priority]",
                "root[tasks][completed]",
                "root[tasks][completed][task]",
                "root[tasks][completed][task][taskId]",
                "root[tasks][completed][task][description]",
                "root[tasks][completed][task][priority]",
                "root[tasks][completed][task][completedAt]",
                "root[metrics]",
                "root[metrics][activeUsers]",
                "root[metrics][pageViews]",
                "root[metrics][conversionRate]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051707_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 1024,\n    \"name\": \"Alice Johnson\",\n    \"email\": \"alice.johnson@example.com\",\n    \"roles\": [\"editor\", \"moderator\"],\n    \"preferences\": {\n      \"theme\": \"light\",\n      \"notifications\": {\n        \"email\": true,\n        \"sms\": false\n      }\n    }\n  },\n  \"system\": {\n    \"version\": \"1.4.2\",\n    \"maintenance\": false,\n    \"supportedLanguages\": [\"en\", \"es\", \"fr\", \"de\"]\n  },\n  \"logs\": [\n    {\n      \"timestamp\": \"2023-10-01T12:34:56Z\",\n      \"action\": \"login\",\n      \"status\": \"success\"\n    },\n    {\n      \"timestamp\": \"2023-10-02T09:20:30Z\",\n      \"action\": \"update_profile\",\n      \"status\": \"success\"\n    }\n  ],\n  \"tasks\": {\n    \"pending\": [\n      {\n        \"taskId\": \"T1001\",\n        \"description\": \"Review user submissions\",\n        \"priority\": \"high\"\n      },\n      {\n        \"taskId\": \"T1002\",\n        \"description\": \"Update terms of service\",\n        \"priority\": \"medium\"\n      }\n    ],\n    \"completed\": [\n      {\n        \"taskId\": \"T0999\",\n        \"description\": \"Fix login bug\",\n        \"priority\": \"high\",\n        \"completedAt\": \"2023-09-28T08:15:00Z\"\n      }\n    ]\n  },\n  \"metrics\": {\n    \"activeUsers\": 256,\n    \"pageViews\": 13450,\n    \"conversionRate\": 0.045\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051707_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[user]",
                                "root[user][id]",
                                "root[user][name]",
                                "root[user][email]",
                                "root[user][roles]",
                                "root[user][preferences]",
                                "root[user][preferences][theme]",
                                "root[user][preferences][notifications]",
                                "root[user][preferences][notifications][email]",
                                "root[user][preferences][notifications][sms]",
                                "root[system]",
                                "root[system][version]",
                                "root[system][maintenance]",
                                "root[system][supportedLanguages]",
                                "root[system][supportedLanguages][*]",
                                "root[logs]",
                                "root[logs][entry]",
                                "root[logs][entry][timestamp]",
                                "root[logs][entry][action]",
                                "root[logs][entry][status]",
                                "root[tasks]",
                                "root[tasks][pending]",
                                "root[tasks][pending][task]",
                                "root[tasks][pending][task][taskId]",
                                "root[tasks][pending][task][description]",
                                "root[tasks][pending][task][priority]",
                                "root[tasks][completed]",
                                "root[tasks][completed][task]",
                                "root[tasks][completed][task][taskId]",
                                "root[tasks][completed][task][description]",
                                "root[tasks][completed][task][priority]",
                                "root[tasks][completed][task][completedAt]",
                                "root[metrics]",
                                "root[metrics][activeUsers]",
                                "root[metrics][pageViews]",
                                "root[metrics][conversionRate]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"profile\": {\n    \"id\": \"U1024\",\n    \"name\": \"Alice Smith\",\n    \"email\": \"alice.smith@example.com\",\n    \"birthdate\": \"1990-07-21\"\n  },\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"notificationsEnabled\": true,\n    \"language\": \"en-US\"\n  },\n  \"activities\": [\n    {\n      \"timestamp\": \"2023-10-01T08:30:00Z\",\n      \"action\": \"login\"\n    },\n    {\n      \"timestamp\": \"2023-10-01T08:45:00Z\",\n      \"action\": \"viewed_profile\",\n      \"details\": {\n        \"section\": \"about\",\n        \"durationSeconds\": 120\n      }\n    },\n    {\n      \"timestamp\": \"2023-10-01T09:00:00Z\",\n      \"action\": \"logout\"\n    }\n  ],\n  \"statistics\": {\n    \"loginCount\": 58,\n    \"postsCreated\": 13,\n    \"commentsMade\": 27\n  },\n  \"preferences\": {\n    \"subscribedCategories\": [\n      \"technology\",\n      \"health\",\n      \"finance\"\n    ],\n    \"privacy\": {\n      \"trackingAllowed\": false,\n      \"shareDataWithPartners\": false\n    }\n  }\n}\n</code>",
            "feature_requirements": "• The output XML must contain a root element that encloses the entire data structure.\n• There must be a \"profile\" element with child elements for \"id\", \"name\", \"email\", and \"birthdate\", each carrying the corresponding JSON values.\n• There must be a \"settings\" element with child elements for \"theme\", \"notificationsEnabled\", and \"language\", with values matching the JSON.\n• The XML must contain an \"activities\" section represented by multiple repeated \"activity\" elements, each with a \"timestamp\" and \"action\" element.\n• For the activity that includes a \"details\" sub-object, there must be a nested \"details\" element containing \"section\" and \"durationSeconds\" child elements.\n• There must be a \"statistics\" element that includes child elements \"loginCount\", \"postsCreated\", and \"commentsMade\", each reflecting the proper numeric values.\n• The XML must include a \"preferences\" element containing a \"subscribedCategories\" element that in turn includes individual elements for each category value (e.g., \"technology\", \"health\", \"finance\").\n• Within \"preferences\", there must be a \"privacy\" element with child elements \"trackingAllowed\" and \"shareDataWithPartners\", carrying boolean values as specified.",
            "task_id": "051708",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[profile]",
                "root[profile][id]",
                "root[profile][name]",
                "root[profile][email]",
                "root[profile][birthdate]",
                "root[settings]",
                "root[settings][theme]",
                "root[settings][notificationsEnabled]",
                "root[settings][language]",
                "root[activities]",
                "root[activities][activity]",
                "root[activities][activity][timestamp]",
                "root[activities][activity][action]",
                "root[activities][activity][details]",
                "root[activities][activity][details][section]",
                "root[activities][activity][details][durationSeconds]",
                "root[statistics]",
                "root[statistics][loginCount]",
                "root[statistics][postsCreated]",
                "root[statistics][commentsMade]",
                "root[preferences]",
                "root[preferences][subscribedCategories]",
                "root[preferences][subscribedCategories][technology]",
                "root[preferences][subscribedCategories][health]",
                "root[preferences][subscribedCategories][finance]",
                "root[preferences][privacy]",
                "root[preferences][privacy][trackingAllowed]",
                "root[preferences][privacy][shareDataWithPartners]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051708_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"profile\": {\n    \"id\": \"U1024\",\n    \"name\": \"Alice Smith\",\n    \"email\": \"alice.smith@example.com\",\n    \"birthdate\": \"1990-07-21\"\n  },\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"notificationsEnabled\": true,\n    \"language\": \"en-US\"\n  },\n  \"activities\": [\n    {\n      \"timestamp\": \"2023-10-01T08:30:00Z\",\n      \"action\": \"login\"\n    },\n    {\n      \"timestamp\": \"2023-10-01T08:45:00Z\",\n      \"action\": \"viewed_profile\",\n      \"details\": {\n        \"section\": \"about\",\n        \"durationSeconds\": 120\n      }\n    },\n    {\n      \"timestamp\": \"2023-10-01T09:00:00Z\",\n      \"action\": \"logout\"\n    }\n  ],\n  \"statistics\": {\n    \"loginCount\": 58,\n    \"postsCreated\": 13,\n    \"commentsMade\": 27\n  },\n  \"preferences\": {\n    \"subscribedCategories\": [\n      \"technology\",\n      \"health\",\n      \"finance\"\n    ],\n    \"privacy\": {\n      \"trackingAllowed\": false,\n      \"shareDataWithPartners\": false\n    }\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051708_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[profile]",
                                "root[profile][id]",
                                "root[profile][name]",
                                "root[profile][email]",
                                "root[profile][birthdate]",
                                "root[settings]",
                                "root[settings][theme]",
                                "root[settings][notificationsEnabled]",
                                "root[settings][language]",
                                "root[activities]",
                                "root[activities][activity]",
                                "root[activities][activity][timestamp]",
                                "root[activities][activity][action]",
                                "root[activities][activity][details]",
                                "root[activities][activity][details][section]",
                                "root[activities][activity][details][durationSeconds]",
                                "root[statistics]",
                                "root[statistics][loginCount]",
                                "root[statistics][postsCreated]",
                                "root[statistics][commentsMade]",
                                "root[preferences]",
                                "root[preferences][subscribedCategories]",
                                "root[preferences][subscribedCategories][technology]",
                                "root[preferences][subscribedCategories][health]",
                                "root[preferences][subscribedCategories][finance]",
                                "root[preferences][privacy]",
                                "root[preferences][privacy][trackingAllowed]",
                                "root[preferences][privacy][shareDataWithPartners]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"business\": {\n    \"id\": \"biz-1023\",\n    \"name\": \"Greenfield Market\",\n    \"location\": {\n      \"address\": \"456 Elm Street\",\n      \"city\": \"Greenfield\",\n      \"state\": \"CA\",\n      \"country\": \"USA\"\n    },\n    \"established\": \"2010-04-15\",\n    \"active\": true\n  },\n  \"products\": [\n    {\n      \"id\": \"prod-001\",\n      \"name\": \"Organic Honey\",\n      \"price\": 12.99,\n      \"categories\": [\"Food\", \"Organic\", \"Natural\"]\n    },\n    {\n      \"id\": \"prod-002\",\n      \"name\": \"Fresh Almond Milk\",\n      \"price\": 3.49,\n      \"categories\": [\"Beverages\", \"Dairy Alternatives\"]\n    },\n    {\n      \"id\": \"prod-003\",\n      \"name\": \"Wholegrain Bread\",\n      \"price\": 4.25,\n      \"categories\": [\"Bakery\", \"Organic\"]\n    }\n  ],\n  \"staff\": [\n    {\n      \"id\": \"emp-101\",\n      \"name\": \"Alice Johnson\",\n      \"position\": \"Manager\",\n      \"joined\": \"2015-07-21\"\n    },\n    {\n      \"id\": \"emp-102\",\n      \"name\": \"Bob Smith\",\n      \"position\": \"Sales Associate\",\n      \"joined\": \"2018-03-12\"\n    }\n  ],\n  \"metadata\": {\n    \"last_updated\": \"2023-10-01T10:30:00Z\",\n    \"data_source\": \"Internal Records\",\n    \"version\": 1.2\n  }\n}\n</code>",
            "feature_requirements": "• The output must have a root element that encapsulates all the XML content converted from the JSON.  \n• There must be a distinct element for the \"business\" section that contains sub-elements for \"id\", \"name\", \"established\", and \"active\".  \n• The \"business\" element must include a nested \"location\" element with its own sub-elements for \"address\", \"city\", \"state\", and \"country\".  \n• The output must include a \"products\" container element that encapsulates a list of individual product elements, each containing sub-elements for \"id\", \"name\", and \"price\".  \n• Each product element must have a nested \"categories\" element that represents the list of categories, with each category as its own element.  \n• There must be a \"staff\" container element representing a list of employee elements, each including sub-elements for \"id\", \"name\", \"position\", and \"joined\".  \n• The output must include a \"metadata\" element with sub-elements for \"last_updated\", \"data_source\", and \"version\".",
            "task_id": "051709",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[business][id]",
                "root[business][name]",
                "root[business][established]",
                "root[business][active]",
                "root[business][location][address]",
                "root[business][location][city]",
                "root[business][location][state]",
                "root[business][location][country]",
                "root[products]",
                "root[products][product][id]",
                "root[products][product][name]",
                "root[products][product][price]",
                "root[products][product][categories][category]",
                "root[staff]",
                "root[staff][employee][id]",
                "root[staff][employee][name]",
                "root[staff][employee][position]",
                "root[staff][employee][joined]",
                "root[metadata][last_updated]",
                "root[metadata][data_source]",
                "root[metadata][version]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051709_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"business\": {\n    \"id\": \"biz-1023\",\n    \"name\": \"Greenfield Market\",\n    \"location\": {\n      \"address\": \"456 Elm Street\",\n      \"city\": \"Greenfield\",\n      \"state\": \"CA\",\n      \"country\": \"USA\"\n    },\n    \"established\": \"2010-04-15\",\n    \"active\": true\n  },\n  \"products\": [\n    {\n      \"id\": \"prod-001\",\n      \"name\": \"Organic Honey\",\n      \"price\": 12.99,\n      \"categories\": [\"Food\", \"Organic\", \"Natural\"]\n    },\n    {\n      \"id\": \"prod-002\",\n      \"name\": \"Fresh Almond Milk\",\n      \"price\": 3.49,\n      \"categories\": [\"Beverages\", \"Dairy Alternatives\"]\n    },\n    {\n      \"id\": \"prod-003\",\n      \"name\": \"Wholegrain Bread\",\n      \"price\": 4.25,\n      \"categories\": [\"Bakery\", \"Organic\"]\n    }\n  ],\n  \"staff\": [\n    {\n      \"id\": \"emp-101\",\n      \"name\": \"Alice Johnson\",\n      \"position\": \"Manager\",\n      \"joined\": \"2015-07-21\"\n    },\n    {\n      \"id\": \"emp-102\",\n      \"name\": \"Bob Smith\",\n      \"position\": \"Sales Associate\",\n      \"joined\": \"2018-03-12\"\n    }\n  ],\n  \"metadata\": {\n    \"last_updated\": \"2023-10-01T10:30:00Z\",\n    \"data_source\": \"Internal Records\",\n    \"version\": 1.2\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051709_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[business][id]",
                                "root[business][name]",
                                "root[business][established]",
                                "root[business][active]",
                                "root[business][location][address]",
                                "root[business][location][city]",
                                "root[business][location][state]",
                                "root[business][location][country]",
                                "root[products]",
                                "root[products][product][id]",
                                "root[products][product][name]",
                                "root[products][product][price]",
                                "root[products][product][categories][category]",
                                "root[staff]",
                                "root[staff][employee][id]",
                                "root[staff][employee][name]",
                                "root[staff][employee][position]",
                                "root[staff][employee][joined]",
                                "root[metadata][last_updated]",
                                "root[metadata][data_source]",
                                "root[metadata][version]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"store\": \"Electronics Hub\",\n  \"location\": {\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\",\n    \"zip\": \"94105\"\n  },\n  \"inventory\": [\n    {\n      \"id\": \"A123\",\n      \"name\": \"Smartphone\",\n      \"category\": \"Mobile\",\n      \"price\": 699.99,\n      \"inStock\": true\n    },\n    {\n      \"id\": \"B456\",\n      \"name\": \"Laptop\",\n      \"category\": \"Computers\",\n      \"price\": 1299.99,\n      \"inStock\": false\n    },\n    {\n      \"id\": \"C789\",\n      \"name\": \"Headphones\",\n      \"category\": \"Audio\",\n      \"price\": 199.99,\n      \"inStock\": true\n    }\n  ],\n  \"staff\": [\n    {\n      \"employeeID\": \"E1\",\n      \"name\": \"Alice\",\n      \"role\": \"Manager\"\n    },\n    {\n      \"employeeID\": \"E2\",\n      \"name\": \"Bob\",\n      \"role\": \"Sales Associate\"\n    }\n  ],\n  \"metadata\": {\n    \"createdDate\": \"2023-10-01\",\n    \"updatedDate\": \"2023-10-25\",\n    \"version\": 1\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates all other elements.  \n• An element representing the store name must be present, corresponding to the JSON key \"store\" with its value \"Electronics Hub\".  \n• A \"location\" element must be included with child elements for \"city\", \"state\", and \"zip\", carrying the values \"San Francisco\", \"CA\", and \"94105\" respectively.  \n• An \"inventory\" element must be present containing multiple child elements (one per inventory item), each with sub-elements for \"id\", \"name\", \"category\", \"price\", and \"inStock\".  \n• Each inventory item must have distinct elements that reflect the respective values: for example, one item with id \"A123\", name \"Smartphone\", category \"Mobile\", price 699.99, and inStock value true; and similar for the other items.  \n• A \"staff\" element must be included with child elements for each staff member, each having sub-elements for \"employeeID\", \"name\", and \"role\".  \n• A \"metadata\" element must be present with sub-elements for \"createdDate\", \"updatedDate\", and \"version\", containing the values \"2023-10-01\", \"2023-10-25\", and 1 respectively.  \n• The structure of the XML must clearly reflect the nested relationship and lists provided in the JSON code (e.g., location details nested under \"location\", inventory items as a list under \"inventory\").",
            "task_id": "051710",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[store]",
                "root[location]",
                "root[location][city]",
                "root[location][state]",
                "root[location][zip]",
                "root[inventory]",
                "root[inventory][item][id]",
                "root[inventory][item][name]",
                "root[inventory][item][category]",
                "root[inventory][item][price]",
                "root[inventory][item][inStock]",
                "root[staff]",
                "root[staff][member][employeeID]",
                "root[staff][member][name]",
                "root[staff][member][role]",
                "root[metadata]",
                "root[metadata][createdDate]",
                "root[metadata][updatedDate]",
                "root[metadata][version]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051710_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"store\": \"Electronics Hub\",\n  \"location\": {\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\",\n    \"zip\": \"94105\"\n  },\n  \"inventory\": [\n    {\n      \"id\": \"A123\",\n      \"name\": \"Smartphone\",\n      \"category\": \"Mobile\",\n      \"price\": 699.99,\n      \"inStock\": true\n    },\n    {\n      \"id\": \"B456\",\n      \"name\": \"Laptop\",\n      \"category\": \"Computers\",\n      \"price\": 1299.99,\n      \"inStock\": false\n    },\n    {\n      \"id\": \"C789\",\n      \"name\": \"Headphones\",\n      \"category\": \"Audio\",\n      \"price\": 199.99,\n      \"inStock\": true\n    }\n  ],\n  \"staff\": [\n    {\n      \"employeeID\": \"E1\",\n      \"name\": \"Alice\",\n      \"role\": \"Manager\"\n    },\n    {\n      \"employeeID\": \"E2\",\n      \"name\": \"Bob\",\n      \"role\": \"Sales Associate\"\n    }\n  ],\n  \"metadata\": {\n    \"createdDate\": \"2023-10-01\",\n    \"updatedDate\": \"2023-10-25\",\n    \"version\": 1\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051710_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[store]",
                                "root[location]",
                                "root[location][city]",
                                "root[location][state]",
                                "root[location][zip]",
                                "root[inventory]",
                                "root[inventory][item][id]",
                                "root[inventory][item][name]",
                                "root[inventory][item][category]",
                                "root[inventory][item][price]",
                                "root[inventory][item][inStock]",
                                "root[staff]",
                                "root[staff][member][employeeID]",
                                "root[staff][member][name]",
                                "root[staff][member][role]",
                                "root[metadata]",
                                "root[metadata][createdDate]",
                                "root[metadata][updatedDate]",
                                "root[metadata][version]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"type\": \"HistoricalSite\",\n    \"id\": \"site-2023\",\n    \"name\": \"Olden Manor\"\n  },\n  \"location\": {\n    \"address\": \"47 Heritage Way\",\n    \"city\": \"Riverview\",\n    \"coordinates\": {\n      \"latitude\": 38.8951,\n      \"longitude\": -77.0364\n    }\n  },\n  \"history\": [\n    {\n      \"year\": 1890,\n      \"event\": \"Constructed as a private residence.\"\n    },\n    {\n      \"year\": 1955,\n      \"event\": \"Converted into a museum.\"\n    },\n    {\n      \"year\": 2000,\n      \"event\": \"Underwent major restorations.\"\n    }\n  ],\n  \"facilities\": {\n    \"guidedTours\": true,\n    \"exhibitions\": [\n      \"Artifacts of the era\",\n      \"Historical documents\",\n      \"Local legends\"\n    ],\n    \"specialEvents\": [\n      {\n        \"name\": \"Night at the Manor\",\n        \"date\": \"2023-11-05\"\n      },\n      {\n        \"name\": \"Springtime Soirée\",\n        \"date\": \"2024-04-20\"\n      }\n    ]\n  },\n  \"contact\": {\n    \"phone\": \"+1-555-0123\",\n    \"email\": \"info@oldenmanor.org\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a clear, root element that encapsulates all other elements.\n• There must be a \"metadata\" element containing child elements for \"type\", \"id\", and \"name\" with the corresponding values.\n• The output should include a \"location\" element that contains child elements \"address\" and \"city\", as well as a \"coordinates\" element with child elements \"latitude\" and \"longitude\".\n• A \"history\" element must be present that includes multiple entries (one per historical event), each containing elements for \"year\" and \"event\" to represent the timeline.\n• A \"facilities\" element is required which includes a child element \"guidedTours\" for its boolean value, an \"exhibitions\" element that lists the exhibition items, and a \"specialEvents\" element that contains individual event entries with \"name\" and \"date\".\n• The XML must contain a \"contact\" element with child elements \"phone\" and \"email\" reflecting the contact information.",
            "task_id": "051711",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[metadata]",
                "root[metadata][type]",
                "root[metadata][id]",
                "root[metadata][name]",
                "root[location]",
                "root[location][address]",
                "root[location][city]",
                "root[location][coordinates]",
                "root[location][coordinates][latitude]",
                "root[location][coordinates][longitude]",
                "root[history]",
                "root[history][entry]",
                "root[history][entry][year]",
                "root[history][entry][event]",
                "root[facilities]",
                "root[facilities][guidedTours]",
                "root[facilities][exhibitions]",
                "root[facilities][specialEvents]",
                "root[facilities][specialEvents][event]",
                "root[facilities][specialEvents][event][name]",
                "root[facilities][specialEvents][event][date]",
                "root[contact]",
                "root[contact][phone]",
                "root[contact][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051711_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"type\": \"HistoricalSite\",\n    \"id\": \"site-2023\",\n    \"name\": \"Olden Manor\"\n  },\n  \"location\": {\n    \"address\": \"47 Heritage Way\",\n    \"city\": \"Riverview\",\n    \"coordinates\": {\n      \"latitude\": 38.8951,\n      \"longitude\": -77.0364\n    }\n  },\n  \"history\": [\n    {\n      \"year\": 1890,\n      \"event\": \"Constructed as a private residence.\"\n    },\n    {\n      \"year\": 1955,\n      \"event\": \"Converted into a museum.\"\n    },\n    {\n      \"year\": 2000,\n      \"event\": \"Underwent major restorations.\"\n    }\n  ],\n  \"facilities\": {\n    \"guidedTours\": true,\n    \"exhibitions\": [\n      \"Artifacts of the era\",\n      \"Historical documents\",\n      \"Local legends\"\n    ],\n    \"specialEvents\": [\n      {\n        \"name\": \"Night at the Manor\",\n        \"date\": \"2023-11-05\"\n      },\n      {\n        \"name\": \"Springtime Soirée\",\n        \"date\": \"2024-04-20\"\n      }\n    ]\n  },\n  \"contact\": {\n    \"phone\": \"+1-555-0123\",\n    \"email\": \"info@oldenmanor.org\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051711_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[metadata]",
                                "root[metadata][type]",
                                "root[metadata][id]",
                                "root[metadata][name]",
                                "root[location]",
                                "root[location][address]",
                                "root[location][city]",
                                "root[location][coordinates]",
                                "root[location][coordinates][latitude]",
                                "root[location][coordinates][longitude]",
                                "root[history]",
                                "root[history][entry]",
                                "root[history][entry][year]",
                                "root[history][entry][event]",
                                "root[facilities]",
                                "root[facilities][guidedTours]",
                                "root[facilities][exhibitions]",
                                "root[facilities][specialEvents]",
                                "root[facilities][specialEvents][event]",
                                "root[facilities][specialEvents][event][name]",
                                "root[facilities][specialEvents][event][date]",
                                "root[contact]",
                                "root[contact][phone]",
                                "root[contact][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"libraryName\": \"Central City Library\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Metropolis\",\n    \"postalCode\": \"54321\"\n  },\n  \"books\": [\n    {\n      \"title\": \"The Great Gatsby\",\n      \"author\": \"F. Scott Fitzgerald\",\n      \"year\": 1925\n    },\n    {\n      \"title\": \"1984\",\n      \"author\": \"George Orwell\",\n      \"year\": 1949\n    },\n    {\n      \"title\": \"To Kill a Mockingbird\",\n      \"author\": \"Harper Lee\",\n      \"year\": 1960\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M001\",\n      \"name\": \"Alice Johnson\",\n      \"membershipType\": \"Premium\"\n    },\n    {\n      \"memberId\": \"M002\",\n      \"name\": \"Bob Smith\",\n      \"membershipType\": \"Standard\"\n    }\n  ],\n  \"openHours\": {\n    \"Monday\": \"8AM-8PM\",\n    \"Tuesday\": \"8AM-8PM\",\n    \"Wednesday\": \"8AM-8PM\",\n    \"Thursday\": \"8AM-8PM\",\n    \"Friday\": \"8AM-6PM\",\n    \"Saturday\": \"10AM-4PM\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>",
            "feature_requirements": "- The XML must have a root element that encapsulates the entire library data.\n- The library's name should be represented by an element with the text \"Central City Library\".\n- There must be a separate element for the address containing child elements for street (\"123 Main St\"), city (\"Metropolis\"), and postalCode (\"54321\").\n- The XML should include an element grouping all books, with each individual book represented as a separate element containing child elements for title, author, and year with values matching the JSON.\n- The books list must include three entries: \"The Great Gatsby\" by F. Scott Fitzgerald (year 1925), \"1984\" by George Orwell (year 1949), and \"To Kill a Mockingbird\" by Harper Lee (year 1960).\n- The XML must include an element grouping all library members, with each member entry containing elements for memberId, name, and membershipType.\n- The members list must include two entries: one with memberId \"M001\" for Alice Johnson (Premium membership) and one with memberId \"M002\" for Bob Smith (Standard membership).\n- There must be an element for openHours that contains child elements for each day of the week, with days as elements (Monday, Tuesday, etc.) and corresponding text values indicating the operating hours (\"8AM-8PM\" for most weekdays, \"8AM-6PM\" for Friday, \"10AM-4PM\" for Saturday, and \"Closed\" for Sunday).",
            "task_id": "051712",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[name]",
                "library[address]",
                "library[address][street]",
                "library[address][city]",
                "library[address][postalCode]",
                "library[books]",
                "library[books][book][title]",
                "library[books][book][author]",
                "library[books][book][year]",
                "library[members]",
                "library[members][member][memberId]",
                "library[members][member][name]",
                "library[members][member][membershipType]",
                "library[openHours]",
                "library[openHours][Monday]",
                "library[openHours][Tuesday]",
                "library[openHours][Wednesday]",
                "library[openHours][Thursday]",
                "library[openHours][Friday]",
                "library[openHours][Saturday]",
                "library[openHours][Sunday]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051712_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"libraryName\": \"Central City Library\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Metropolis\",\n    \"postalCode\": \"54321\"\n  },\n  \"books\": [\n    {\n      \"title\": \"The Great Gatsby\",\n      \"author\": \"F. Scott Fitzgerald\",\n      \"year\": 1925\n    },\n    {\n      \"title\": \"1984\",\n      \"author\": \"George Orwell\",\n      \"year\": 1949\n    },\n    {\n      \"title\": \"To Kill a Mockingbird\",\n      \"author\": \"Harper Lee\",\n      \"year\": 1960\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M001\",\n      \"name\": \"Alice Johnson\",\n      \"membershipType\": \"Premium\"\n    },\n    {\n      \"memberId\": \"M002\",\n      \"name\": \"Bob Smith\",\n      \"membershipType\": \"Standard\"\n    }\n  ],\n  \"openHours\": {\n    \"Monday\": \"8AM-8PM\",\n    \"Tuesday\": \"8AM-8PM\",\n    \"Wednesday\": \"8AM-8PM\",\n    \"Thursday\": \"8AM-8PM\",\n    \"Friday\": \"8AM-6PM\",\n    \"Saturday\": \"10AM-4PM\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051712_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[name]",
                                "library[address]",
                                "library[address][street]",
                                "library[address][city]",
                                "library[address][postalCode]",
                                "library[books]",
                                "library[books][book][title]",
                                "library[books][book][author]",
                                "library[books][book][year]",
                                "library[members]",
                                "library[members][member][memberId]",
                                "library[members][member][name]",
                                "library[members][member][membershipType]",
                                "library[openHours]",
                                "library[openHours][Monday]",
                                "library[openHours][Tuesday]",
                                "library[openHours][Wednesday]",
                                "library[openHours][Thursday]",
                                "library[openHours][Friday]",
                                "library[openHours][Saturday]",
                                "library[openHours][Sunday]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"mission\": \"Exploration of the Outer Rim\",\n  \"crew\": [\n    {\n      \"name\": \"Captain Reynolds\",\n      \"role\": \"Captain\",\n      \"experienceYears\": 15\n    },\n    {\n      \"name\": \"Zoe Washburne\",\n      \"role\": \"First Mate\",\n      \"experienceYears\": 12\n    },\n    {\n      \"name\": \"Hoban Washburne\",\n      \"role\": \"Pilot\",\n      \"experienceYears\": 10\n    }\n  ],\n  \"equipment\": {\n    \"navigation\": [\n      \"star map\",\n      \"auto-pilot module\"\n    ],\n    \"defense\": [\n      \"shield generator\",\n      \"laser cannons\"\n    ],\n    \"repair\": [\n      \"tool kit\",\n      \"3D printer\"\n    ]\n  },\n  \"location\": {\n    \"quadrant\": \"Delta\",\n    \"coordinates\": {\n      \"x\": 123.45,\n      \"y\": 678.90,\n      \"z\": -101.12\n    }\n  },\n  \"logs\": [\n    {\n      \"date\": \"2023-10-01\",\n      \"entry\": \"Departed from space station.\"\n    },\n    {\n      \"date\": \"2023-10-02\",\n      \"entry\": \"Encountered minor asteroid field.\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates all other elements.\n• There must be an element representing the mission, containing the text \"Exploration of the Outer Rim\".\n• The output must include a crew section with child elements for each crew member, where each crew member element contains sub-elements for \"name\", \"role\", and \"experienceYears\".\n• There must be an equipment section divided into three separate parts: navigation, defense, and repair, where each part contains multiple sub-elements corresponding to the listed items.\n• The output must include a location element containing a quadrant element with the value \"Delta\" and a coordinates element with sub-elements for \"x\", \"y\", and \"z\" reflecting their respective numerical values.\n• A logs section must be present, containing a sequence of log entries where each entry has a date element and an entry element displaying the corresponding log text.",
            "task_id": "051713",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[mission]",
                "root[crew]",
                "root[crew][member][name]",
                "root[crew][member][role]",
                "root[crew][member][experienceYears]",
                "root[equipment]",
                "root[equipment][navigation]",
                "root[equipment][defense]",
                "root[equipment][repair]",
                "root[location]",
                "root[location][quadrant]",
                "root[location][coordinates]",
                "root[location][coordinates][x]",
                "root[location][coordinates][y]",
                "root[location][coordinates][z]",
                "root[logs]",
                "root[logs][log][date]",
                "root[logs][log][entry]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051713_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"mission\": \"Exploration of the Outer Rim\",\n  \"crew\": [\n    {\n      \"name\": \"Captain Reynolds\",\n      \"role\": \"Captain\",\n      \"experienceYears\": 15\n    },\n    {\n      \"name\": \"Zoe Washburne\",\n      \"role\": \"First Mate\",\n      \"experienceYears\": 12\n    },\n    {\n      \"name\": \"Hoban Washburne\",\n      \"role\": \"Pilot\",\n      \"experienceYears\": 10\n    }\n  ],\n  \"equipment\": {\n    \"navigation\": [\n      \"star map\",\n      \"auto-pilot module\"\n    ],\n    \"defense\": [\n      \"shield generator\",\n      \"laser cannons\"\n    ],\n    \"repair\": [\n      \"tool kit\",\n      \"3D printer\"\n    ]\n  },\n  \"location\": {\n    \"quadrant\": \"Delta\",\n    \"coordinates\": {\n      \"x\": 123.45,\n      \"y\": 678.90,\n      \"z\": -101.12\n    }\n  },\n  \"logs\": [\n    {\n      \"date\": \"2023-10-01\",\n      \"entry\": \"Departed from space station.\"\n    },\n    {\n      \"date\": \"2023-10-02\",\n      \"entry\": \"Encountered minor asteroid field.\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051713_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[mission]",
                                "root[crew]",
                                "root[crew][member][name]",
                                "root[crew][member][role]",
                                "root[crew][member][experienceYears]",
                                "root[equipment]",
                                "root[equipment][navigation]",
                                "root[equipment][defense]",
                                "root[equipment][repair]",
                                "root[location]",
                                "root[location][quadrant]",
                                "root[location][coordinates]",
                                "root[location][coordinates][x]",
                                "root[location][coordinates][y]",
                                "root[location][coordinates][z]",
                                "root[logs]",
                                "root[logs][log][date]",
                                "root[logs][log][entry]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central Community Library\",\n    \"location\": \"Maple Street, Springfield\",\n    \"established\": 1925,\n    \"sections\": [\n      \"Fiction\",\n      \"Non-Fiction\",\n      \"Children\",\n      \"Reference\"\n    ]\n  },\n  \"books\": [\n    {\n      \"id\": \"B001\",\n      \"title\": \"The Great Adventure\",\n      \"author\": \"John Doe\",\n      \"genre\": \"Fiction\",\n      \"available\": true\n    },\n    {\n      \"id\": \"B002\",\n      \"title\": \"Science Today\",\n      \"author\": \"Jane Smith\",\n      \"genre\": \"Non-Fiction\",\n      \"available\": false\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M100\",\n      \"name\": \"Alice Johnson\",\n      \"membershipType\": \"Standard\",\n      \"borrowedBooks\": [\"B001\"]\n    },\n    {\n      \"memberId\": \"M101\",\n      \"name\": \"Robert Brown\",\n      \"membershipType\": \"Premium\",\n      \"borrowedBooks\": []\n    }\n  ],\n  \"settings\": {\n    \"maxBorrowLimit\": 5,\n    \"openingHours\": {\n      \"weekdays\": \"09:00 - 18:00\",\n      \"weekends\": \"10:00 - 16:00\"\n    },\n    \"finePerDay\": 0.5\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must include a single root element that encapsulates all the main data sections (library, books, members, settings).  \n• A library element must be present with child elements for name, location, and established year, as well as a sub-element for sections that contains separate elements (one for each section value).  \n• A books element must be included that nests multiple book elements; each book element needs children for id, title, author, genre, and available status.  \n• A members element must be present that nests multiple member elements; each member element should contain child elements for memberId, name, membershipType, and a collection element for borrowedBooks that includes each borrowed book identifier as its own sub-element.  \n• A settings element must be provided with child elements for maxBorrowLimit and finePerDay, as well as an openingHours element that itself contains child elements for weekdays and weekends.  \n• All element names and values must reflect exactly the data provided in the JSON (including numeric and boolean values) ensuring data integrity and structure comparability.",
            "task_id": "051714",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[library]",
                "root[library][name]",
                "root[library][location]",
                "root[library][establishedYear]",
                "root[library][sections]",
                "root[books]",
                "root[books][book]",
                "root[books][book][id]",
                "root[books][book][title]",
                "root[books][book][author]",
                "root[books][book][genre]",
                "root[books][book][available]",
                "root[members]",
                "root[members][member]",
                "root[members][member][memberId]",
                "root[members][member][name]",
                "root[members][member][membershipType]",
                "root[members][member][borrowedBooks]",
                "root[settings]",
                "root[settings][maxBorrowLimit]",
                "root[settings][finePerDay]",
                "root[settings][openingHours]",
                "root[settings][openingHours][weekdays]",
                "root[settings][openingHours][weekends]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051714_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central Community Library\",\n    \"location\": \"Maple Street, Springfield\",\n    \"established\": 1925,\n    \"sections\": [\n      \"Fiction\",\n      \"Non-Fiction\",\n      \"Children\",\n      \"Reference\"\n    ]\n  },\n  \"books\": [\n    {\n      \"id\": \"B001\",\n      \"title\": \"The Great Adventure\",\n      \"author\": \"John Doe\",\n      \"genre\": \"Fiction\",\n      \"available\": true\n    },\n    {\n      \"id\": \"B002\",\n      \"title\": \"Science Today\",\n      \"author\": \"Jane Smith\",\n      \"genre\": \"Non-Fiction\",\n      \"available\": false\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M100\",\n      \"name\": \"Alice Johnson\",\n      \"membershipType\": \"Standard\",\n      \"borrowedBooks\": [\"B001\"]\n    },\n    {\n      \"memberId\": \"M101\",\n      \"name\": \"Robert Brown\",\n      \"membershipType\": \"Premium\",\n      \"borrowedBooks\": []\n    }\n  ],\n  \"settings\": {\n    \"maxBorrowLimit\": 5,\n    \"openingHours\": {\n      \"weekdays\": \"09:00 - 18:00\",\n      \"weekends\": \"10:00 - 16:00\"\n    },\n    \"finePerDay\": 0.5\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051714_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[library]",
                                "root[library][name]",
                                "root[library][location]",
                                "root[library][establishedYear]",
                                "root[library][sections]",
                                "root[books]",
                                "root[books][book]",
                                "root[books][book][id]",
                                "root[books][book][title]",
                                "root[books][book][author]",
                                "root[books][book][genre]",
                                "root[books][book][available]",
                                "root[members]",
                                "root[members][member]",
                                "root[members][member][memberId]",
                                "root[members][member][name]",
                                "root[members][member][membershipType]",
                                "root[members][member][borrowedBooks]",
                                "root[settings]",
                                "root[settings][maxBorrowLimit]",
                                "root[settings][finePerDay]",
                                "root[settings][openingHours]",
                                "root[settings][openingHours][weekdays]",
                                "root[settings][openingHours][weekends]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central City Library\",\n    \"location\": {\n      \"address\": \"123 Main Street\",\n      \"city\": \"Central City\",\n      \"zip\": \"12345\",\n      \"country\": \"Fictionland\"\n    },\n    \"books\": [\n      {\n        \"title\": \"The Lost Artifact\",\n        \"author\": \"J. S. Campbell\",\n        \"year\": 1998,\n        \"categories\": [\"Mystery\", \"Adventure\"]\n      },\n      {\n        \"title\": \"Future Horizons\",\n        \"author\": \"L. K. Thomas\",\n        \"year\": 2005,\n        \"categories\": [\"Science Fiction\"]\n      },\n      {\n        \"title\": \"Poems of the Underground\",\n        \"author\": \"A. N. Poet\",\n        \"year\": 2010,\n        \"categories\": [\"Poetry\", \"Modernist\"]\n      }\n    ],\n    \"staff\": [\n      {\n        \"name\": \"Alice Monroe\",\n        \"role\": \"Librarian\",\n        \"yearsOfService\": 10\n      },\n      {\n        \"name\": \"Bob D. Mike\",\n        \"role\": \"Archivist\",\n        \"yearsOfService\": 5\n      }\n    ],\n    \"membership\": {\n      \"active\": true,\n      \"types\": [\"adult\", \"child\", \"senior\"],\n      \"fees\": {\n        \"adult\": 25,\n        \"child\": 10,\n        \"senior\": 15\n      }\n    }\n  }\n}\n</code>",
            "feature_requirements": "• The output must have a root element that represents the library, encapsulating all other elements.  \n• The converted output must include a child element for the library's name with the exact value \"Central City Library\".  \n• The location element must contain separate sub-elements for address, city, zip, and country, each with their corresponding values from the JSON.  \n• For the collection of books, the output must include a structure that iterates over each book, with each book element containing child elements for title, author, year, and a nested list or set of category elements.  \n• The staff information must be represented as a list or repeated element, where each staff member has sub-elements for name, role, and yearsOfService.  \n• The membership details must include an element indicating the active status (with the Boolean value true), a nested list of membership types, and sub-elements for fees categorized by adult, child, and senior.  \n• The hierarchical structure of the JSON must be fully preserved, with each JSON object and array accurately translated into corresponding nested XML elements.",
            "task_id": "051715",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[name]",
                "library[location]",
                "library[location][address]",
                "library[location][city]",
                "library[location][zip]",
                "library[location][country]",
                "library[books]",
                "library[books][book]",
                "library[books][book][title]",
                "library[books][book][author]",
                "library[books][book][year]",
                "library[books][book][category]",
                "library[staff]",
                "library[staff][member]",
                "library[staff][member][name]",
                "library[staff][member][role]",
                "library[staff][member][yearsOfService]",
                "library[membership]",
                "library[membership][active]",
                "library[membership][membershipTypes]",
                "library[membership][membershipTypes][membershipType]",
                "library[membership][fees]",
                "library[membership][fees][adult]",
                "library[membership][fees][child]",
                "library[membership][fees][senior]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051715_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central City Library\",\n    \"location\": {\n      \"address\": \"123 Main Street\",\n      \"city\": \"Central City\",\n      \"zip\": \"12345\",\n      \"country\": \"Fictionland\"\n    },\n    \"books\": [\n      {\n        \"title\": \"The Lost Artifact\",\n        \"author\": \"J. S. Campbell\",\n        \"year\": 1998,\n        \"categories\": [\"Mystery\", \"Adventure\"]\n      },\n      {\n        \"title\": \"Future Horizons\",\n        \"author\": \"L. K. Thomas\",\n        \"year\": 2005,\n        \"categories\": [\"Science Fiction\"]\n      },\n      {\n        \"title\": \"Poems of the Underground\",\n        \"author\": \"A. N. Poet\",\n        \"year\": 2010,\n        \"categories\": [\"Poetry\", \"Modernist\"]\n      }\n    ],\n    \"staff\": [\n      {\n        \"name\": \"Alice Monroe\",\n        \"role\": \"Librarian\",\n        \"yearsOfService\": 10\n      },\n      {\n        \"name\": \"Bob D. Mike\",\n        \"role\": \"Archivist\",\n        \"yearsOfService\": 5\n      }\n    ],\n    \"membership\": {\n      \"active\": true,\n      \"types\": [\"adult\", \"child\", \"senior\"],\n      \"fees\": {\n        \"adult\": 25,\n        \"child\": 10,\n        \"senior\": 15\n      }\n    }\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051715_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[name]",
                                "library[location]",
                                "library[location][address]",
                                "library[location][city]",
                                "library[location][zip]",
                                "library[location][country]",
                                "library[books]",
                                "library[books][book]",
                                "library[books][book][title]",
                                "library[books][book][author]",
                                "library[books][book][year]",
                                "library[books][book][category]",
                                "library[staff]",
                                "library[staff][member]",
                                "library[staff][member][name]",
                                "library[staff][member][role]",
                                "library[staff][member][yearsOfService]",
                                "library[membership]",
                                "library[membership][active]",
                                "library[membership][membershipTypes]",
                                "library[membership][membershipTypes][membershipType]",
                                "library[membership][fees]",
                                "library[membership][fees][adult]",
                                "library[membership][fees][child]",
                                "library[membership][fees][senior]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"configuration\": {\n    \"version\": \"1.2.0\",\n    \"features\": [\n      \"data-sync\",\n      \"notifications\",\n      \"reporting\"\n    ],\n    \"settings\": {\n      \"theme\": \"dark\",\n      \"language\": \"en-US\",\n      \"autoUpdate\": true\n    }\n  },\n  \"users\": [\n    {\n      \"id\": 1001,\n      \"name\": \"Alice Johnson\",\n      \"roles\": [\n        \"admin\",\n        \"editor\"\n      ],\n      \"lastLogin\": \"2023-10-10T14:30:00Z\"\n    },\n    {\n      \"id\": 1002,\n      \"name\": \"Bob Smith\",\n      \"roles\": [\n        \"viewer\"\n      ],\n      \"lastLogin\": \"2023-10-09T09:15:00Z\"\n    }\n  ],\n  \"logs\": [\n    {\n      \"timestamp\": \"2023-10-11T10:15:00Z\",\n      \"event\": \"System startup\",\n      \"severity\": \"info\"\n    },\n    {\n      \"timestamp\": \"2023-10-11T10:22:00Z\",\n      \"event\": \"User login\",\n      \"severity\": \"info\"\n    },\n    {\n      \"timestamp\": \"2023-10-11T10:45:00Z\",\n      \"event\": \"Error processing request\",\n      \"severity\": \"error\"\n    }\n  ],\n  \"metadata\": {\n    \"generatedAt\": \"2023-10-11T11:00:00Z\",\n    \"source\": \"internal-system\",\n    \"environment\": \"production\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML must have a root element that encapsulates all the converted JSON data elements.\n• There should be a \"configuration\" element containing child elements for \"version\", \"features\", and \"settings\".\n• The \"features\" element must include a list structure where each feature (e.g., \"data-sync\", \"notifications\", \"reporting\") is represented by its own child element.\n• The \"settings\" element should comprise child elements for \"theme\", \"language\", and \"autoUpdate\" with values corresponding to those in the JSON.\n• There must be a \"users\" element that contains one child element for each user; each user element should include sub-elements for \"id\", \"name\", \"roles\", and \"lastLogin\".\n• Within each user element, the \"roles\" attribute must be represented as a list of child elements corresponding to each role.\n• There must be a \"logs\" element that contains one child element for each log entry; each log entry element should contain sub-elements for \"timestamp\", \"event\", and \"severity\".\n• A \"metadata\" element is required, with child elements for \"generatedAt\", \"source\", and \"environment\" as specified in the JSON.",
            "task_id": "051716",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[configuration]",
                "root[configuration][version]",
                "root[configuration][features]",
                "root[configuration][settings]",
                "root[configuration][settings][theme]",
                "root[configuration][settings][language]",
                "root[configuration][settings][autoUpdate]",
                "root[users]",
                "root[users][user]",
                "root[users][user][id]",
                "root[users][user][name]",
                "root[users][user][roles]",
                "root[users][user][roles][role]",
                "root[users][user][lastLogin]",
                "root[logs]",
                "root[logs][log]",
                "root[logs][log][timestamp]",
                "root[logs][log][event]",
                "root[logs][log][severity]",
                "root[metadata]",
                "root[metadata][generatedAt]",
                "root[metadata][source]",
                "root[metadata][environment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051716_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"configuration\": {\n    \"version\": \"1.2.0\",\n    \"features\": [\n      \"data-sync\",\n      \"notifications\",\n      \"reporting\"\n    ],\n    \"settings\": {\n      \"theme\": \"dark\",\n      \"language\": \"en-US\",\n      \"autoUpdate\": true\n    }\n  },\n  \"users\": [\n    {\n      \"id\": 1001,\n      \"name\": \"Alice Johnson\",\n      \"roles\": [\n        \"admin\",\n        \"editor\"\n      ],\n      \"lastLogin\": \"2023-10-10T14:30:00Z\"\n    },\n    {\n      \"id\": 1002,\n      \"name\": \"Bob Smith\",\n      \"roles\": [\n        \"viewer\"\n      ],\n      \"lastLogin\": \"2023-10-09T09:15:00Z\"\n    }\n  ],\n  \"logs\": [\n    {\n      \"timestamp\": \"2023-10-11T10:15:00Z\",\n      \"event\": \"System startup\",\n      \"severity\": \"info\"\n    },\n    {\n      \"timestamp\": \"2023-10-11T10:22:00Z\",\n      \"event\": \"User login\",\n      \"severity\": \"info\"\n    },\n    {\n      \"timestamp\": \"2023-10-11T10:45:00Z\",\n      \"event\": \"Error processing request\",\n      \"severity\": \"error\"\n    }\n  ],\n  \"metadata\": {\n    \"generatedAt\": \"2023-10-11T11:00:00Z\",\n    \"source\": \"internal-system\",\n    \"environment\": \"production\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051716_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[configuration]",
                                "root[configuration][version]",
                                "root[configuration][features]",
                                "root[configuration][settings]",
                                "root[configuration][settings][theme]",
                                "root[configuration][settings][language]",
                                "root[configuration][settings][autoUpdate]",
                                "root[users]",
                                "root[users][user]",
                                "root[users][user][id]",
                                "root[users][user][name]",
                                "root[users][user][roles]",
                                "root[users][user][roles][role]",
                                "root[users][user][lastLogin]",
                                "root[logs]",
                                "root[logs][log]",
                                "root[logs][log][timestamp]",
                                "root[logs][log][event]",
                                "root[logs][log][severity]",
                                "root[metadata]",
                                "root[metadata][generatedAt]",
                                "root[metadata][source]",
                                "root[metadata][environment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"application\": \"DataConverter\",\n  \"version\": \"2.1.4\",\n  \"settings\": {\n    \"theme\": \"light\",\n    \"language\": \"en-US\",\n    \"autoSave\": true,\n    \"backupInterval\": 15\n  },\n  \"dataSources\": [\n    {\n      \"name\": \"LocalDatabase\",\n      \"type\": \"SQL\",\n      \"connectionString\": \"Server=localhost;Database=main;User=root;Password=pass;\"\n    },\n    {\n      \"name\": \"RemoteAPI\",\n      \"type\": \"REST\",\n      \"endpoint\": \"https://api.example.com/data\",\n      \"authentication\": {\n        \"method\": \"Bearer\",\n        \"token\": \"abcd1234secret\"\n      }\n    }\n  ],\n  \"users\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Smith\",\n      \"roles\": [\"admin\", \"editor\"],\n      \"active\": true\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Johnson\",\n      \"roles\": [\"viewer\"],\n      \"active\": false\n    }\n  ],\n  \"metadata\": {\n    \"created\": \"2023-10-01T12:00:00Z\",\n    \"updated\": \"2023-10-05T09:30:00Z\",\n    \"notes\": \"Initial configuration setup for conversion task\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates all data from the provided JSON.  \n• There must be child elements for \"application\" and \"version\" with precise text values \"DataConverter\" and \"2.1.4\", respectively.  \n• A \"settings\" element must exist containing nested elements for \"theme\", \"language\", \"autoSave\", and \"backupInterval\" with the corresponding values \"light\", \"en-US\", true, and 15.  \n• A \"dataSources\" section must be present that includes separate elements for each data source, preserving the order in the JSON array.  \n• Within each data source element, there must be sub-elements for \"name\" and \"type\"; for the first data source, a \"connectionString\" element must be included, and for the second, an \"endpoint\" element must be provided.  \n• For the second data source, an \"authentication\" element must be included with nested \"method\" and \"token\" elements that contain \"Bearer\" and \"abcd1234secret\".  \n• A \"users\" section must be created that contains individual user elements for each entry in the JSON array, each including \"id\", \"name\", and \"active\" elements.  \n• Within each user element, the \"roles\" data must be represented as multiple sub-elements (one for each role) to accurately reflect the JSON array structure.  \n• A \"metadata\" element must be included with child elements \"created\", \"updated\", and \"notes\" containing the corresponding values from the JSON.",
            "task_id": "051717",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[application]",
                "root[version]",
                "root[settings][theme]",
                "root[settings][language]",
                "root[settings][autoSave]",
                "root[settings][backupInterval]",
                "root[dataSources]",
                "root[dataSources][0][name]",
                "root[dataSources][0][type]",
                "root[dataSources][0][connectionString]",
                "root[dataSources][1][name]",
                "root[dataSources][1][type]",
                "root[dataSources][1][endpoint]",
                "root[dataSources][1][authentication][method]",
                "root[dataSources][1][authentication][token]",
                "root[users]",
                "root[users][user][id]",
                "root[users][user][name]",
                "root[users][user][active]",
                "root[users][user][role]",
                "root[metadata][created]",
                "root[metadata][updated]",
                "root[metadata][notes]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051717_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"application\": \"DataConverter\",\n  \"version\": \"2.1.4\",\n  \"settings\": {\n    \"theme\": \"light\",\n    \"language\": \"en-US\",\n    \"autoSave\": true,\n    \"backupInterval\": 15\n  },\n  \"dataSources\": [\n    {\n      \"name\": \"LocalDatabase\",\n      \"type\": \"SQL\",\n      \"connectionString\": \"Server=localhost;Database=main;User=root;Password=pass;\"\n    },\n    {\n      \"name\": \"RemoteAPI\",\n      \"type\": \"REST\",\n      \"endpoint\": \"https://api.example.com/data\",\n      \"authentication\": {\n        \"method\": \"Bearer\",\n        \"token\": \"abcd1234secret\"\n      }\n    }\n  ],\n  \"users\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Smith\",\n      \"roles\": [\"admin\", \"editor\"],\n      \"active\": true\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Johnson\",\n      \"roles\": [\"viewer\"],\n      \"active\": false\n    }\n  ],\n  \"metadata\": {\n    \"created\": \"2023-10-01T12:00:00Z\",\n    \"updated\": \"2023-10-05T09:30:00Z\",\n    \"notes\": \"Initial configuration setup for conversion task\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051717_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[application]",
                                "root[version]",
                                "root[settings][theme]",
                                "root[settings][language]",
                                "root[settings][autoSave]",
                                "root[settings][backupInterval]",
                                "root[dataSources]",
                                "root[dataSources][0][name]",
                                "root[dataSources][0][type]",
                                "root[dataSources][0][connectionString]",
                                "root[dataSources][1][name]",
                                "root[dataSources][1][type]",
                                "root[dataSources][1][endpoint]",
                                "root[dataSources][1][authentication][method]",
                                "root[dataSources][1][authentication][token]",
                                "root[users]",
                                "root[users][user][id]",
                                "root[users][user][name]",
                                "root[users][user][active]",
                                "root[users][user][role]",
                                "root[metadata][created]",
                                "root[metadata][updated]",
                                "root[metadata][notes]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"source\": \"internal_system\",\n    \"conversionType\": \"json_to_json\",\n    \"timestamp\": \"2023-10-01T12:00:00Z\"\n  },\n  \"config\": {\n    \"format\": \"json\",\n    \"version\": \"1.2\",\n    \"options\": {\n      \"validate\": true,\n      \"prettyPrint\": false\n    }\n  },\n  \"data\": {\n    \"records\": [\n      {\n        \"id\": \"rec_001\",\n        \"fields\": {\n          \"name\": \"Alice\",\n          \"age\": 30,\n          \"active\": true\n        }\n      },\n      {\n        \"id\": \"rec_002\",\n        \"fields\": {\n          \"name\": \"Bob\",\n          \"age\": 24,\n          \"active\": false\n        }\n      }\n    ],\n    \"summary\": {\n      \"recordCount\": 2,\n      \"processed\": true\n    }\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item_001\",\n      \"description\": \"First item\",\n      \"tags\": [\"new\", \"sale\", \"popular\"]\n    },\n    {\n      \"itemId\": \"item_002\",\n      \"description\": \"Second item\",\n      \"tags\": [\"featured\", \"discount\"]\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must have a single top-level element that contains child elements corresponding to the top-level keys: metadata, config, data, and items.  \n• The metadata element must include child elements for source, conversionType, and timestamp with values matching those provided in the JSON.  \n• The config element must contain elements for format and version, as well as an options element that further includes validate and prettyPrint elements with their respective values.  \n• The data element must include a records section and a summary section. Within the records section, each individual record must be represented as a repeated element containing an id element and a fields element; the fields element must include individual elements for name, age, and active.  \n• The summary element under data must include recordCount and processed elements that encapsulate the summary data.  \n• The items element must contain multiple item entries, each represented by elements corresponding to itemId, description, and a tags section; within the tags section each tag from the JSON list must be represented as its own tag element.  \n• All values, whether strings, numbers, or booleans, must be represented as text within their respective XML elements.",
            "task_id": "051718",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[metadata]",
                "root[metadata][source]",
                "root[metadata][conversionType]",
                "root[metadata][timestamp]",
                "root[config]",
                "root[config][format]",
                "root[config][version]",
                "root[config][options]",
                "root[config][options][validate]",
                "root[config][options][prettyPrint]",
                "root[data]",
                "root[data][records]",
                "root[data][records][record]",
                "root[data][records][record][id]",
                "root[data][records][record][fields]",
                "root[data][records][record][fields][name]",
                "root[data][records][record][fields][age]",
                "root[data][records][record][fields][active]",
                "root[data][summary]",
                "root[data][summary][recordCount]",
                "root[data][summary][processed]",
                "root[items]",
                "root[items][item]",
                "root[items][item][itemId]",
                "root[items][item][description]",
                "root[items][item][tags]",
                "root[items][item][tags][tag]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051718_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"source\": \"internal_system\",\n    \"conversionType\": \"json_to_json\",\n    \"timestamp\": \"2023-10-01T12:00:00Z\"\n  },\n  \"config\": {\n    \"format\": \"json\",\n    \"version\": \"1.2\",\n    \"options\": {\n      \"validate\": true,\n      \"prettyPrint\": false\n    }\n  },\n  \"data\": {\n    \"records\": [\n      {\n        \"id\": \"rec_001\",\n        \"fields\": {\n          \"name\": \"Alice\",\n          \"age\": 30,\n          \"active\": true\n        }\n      },\n      {\n        \"id\": \"rec_002\",\n        \"fields\": {\n          \"name\": \"Bob\",\n          \"age\": 24,\n          \"active\": false\n        }\n      }\n    ],\n    \"summary\": {\n      \"recordCount\": 2,\n      \"processed\": true\n    }\n  },\n  \"items\": [\n    {\n      \"itemId\": \"item_001\",\n      \"description\": \"First item\",\n      \"tags\": [\"new\", \"sale\", \"popular\"]\n    },\n    {\n      \"itemId\": \"item_002\",\n      \"description\": \"Second item\",\n      \"tags\": [\"featured\", \"discount\"]\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051718_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[metadata]",
                                "root[metadata][source]",
                                "root[metadata][conversionType]",
                                "root[metadata][timestamp]",
                                "root[config]",
                                "root[config][format]",
                                "root[config][version]",
                                "root[config][options]",
                                "root[config][options][validate]",
                                "root[config][options][prettyPrint]",
                                "root[data]",
                                "root[data][records]",
                                "root[data][records][record]",
                                "root[data][records][record][id]",
                                "root[data][records][record][fields]",
                                "root[data][records][record][fields][name]",
                                "root[data][records][record][fields][age]",
                                "root[data][records][record][fields][active]",
                                "root[data][summary]",
                                "root[data][summary][recordCount]",
                                "root[data][summary][processed]",
                                "root[items]",
                                "root[items][item]",
                                "root[items][item][itemId]",
                                "root[items][item][description]",
                                "root[items][item][tags]",
                                "root[items][item][tags][tag]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"userProfile\": {\n    \"username\": \"jane_doe\",\n    \"age\": 28,\n    \"registeredOn\": \"2023-08-15\",\n    \"email\": \"jane.doe@example.com\"\n  },\n  \"transactionHistory\": [\n    {\n      \"transactionId\": \"tx1001\",\n      \"amount\": 150.75,\n      \"currency\": \"USD\",\n      \"date\": \"2023-09-21\"\n    },\n    {\n      \"transactionId\": \"tx1002\",\n      \"amount\": 89.50,\n      \"currency\": \"USD\",\n      \"date\": \"2023-09-25\"\n    }\n  ],\n  \"preferences\": {\n    \"language\": \"en-US\",\n    \"theme\": \"light\",\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    }\n  },\n  \"systemStatus\": {\n    \"uptime\": \"99.9%\",\n    \"lastChecked\": \"2023-10-10T14:30:00Z\",\n    \"maintenanceMode\": false\n  },\n  \"notifications\": [\n    {\n      \"id\": \"notif001\",\n      \"message\": \"New login detected on your account.\",\n      \"read\": false\n    },\n    {\n      \"id\": \"notif002\",\n      \"message\": \"Your password will expire in 5 days.\",\n      \"read\": true\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must contain a root element that encapsulates all the converted data.\n• There should be a distinct element for \"userProfile\" containing child elements for \"username\", \"age\", \"registeredOn\", and \"email\" with their corresponding values.\n• The \"transactionHistory\" should be represented as a sequence of elements, with each transaction having its own element containing child elements for \"transactionId\", \"amount\", \"currency\", and \"date\".\n• The \"preferences\" element must include child elements for \"language\" and \"theme\", as well as a nested \"notifications\" element that contains its specific boolean properties (\"email\", \"sms\", and \"push\").\n• The \"systemStatus\" must be a separate element featuring child elements for \"uptime\", \"lastChecked\", and \"maintenanceMode\".\n• The XML must also include a separate \"notifications\" element that represents a collection of individual notification elements, each of which contains child elements for \"id\", \"message\", and \"read\".",
            "task_id": "051719",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[userProfile][username]",
                "root[userProfile][age]",
                "root[userProfile][registeredOn]",
                "root[userProfile][email]",
                "root[transactionHistory][transaction][transactionId]",
                "root[transactionHistory][transaction][amount]",
                "root[transactionHistory][transaction][currency]",
                "root[transactionHistory][transaction][date]",
                "root[preferences][language]",
                "root[preferences][theme]",
                "root[preferences][notifications][email]",
                "root[preferences][notifications][sms]",
                "root[preferences][notifications][push]",
                "root[systemStatus][uptime]",
                "root[systemStatus][lastChecked]",
                "root[systemStatus][maintenanceMode]",
                "root[notifications][notification][id]",
                "root[notifications][notification][message]",
                "root[notifications][notification][read]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051719_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"userProfile\": {\n    \"username\": \"jane_doe\",\n    \"age\": 28,\n    \"registeredOn\": \"2023-08-15\",\n    \"email\": \"jane.doe@example.com\"\n  },\n  \"transactionHistory\": [\n    {\n      \"transactionId\": \"tx1001\",\n      \"amount\": 150.75,\n      \"currency\": \"USD\",\n      \"date\": \"2023-09-21\"\n    },\n    {\n      \"transactionId\": \"tx1002\",\n      \"amount\": 89.50,\n      \"currency\": \"USD\",\n      \"date\": \"2023-09-25\"\n    }\n  ],\n  \"preferences\": {\n    \"language\": \"en-US\",\n    \"theme\": \"light\",\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    }\n  },\n  \"systemStatus\": {\n    \"uptime\": \"99.9%\",\n    \"lastChecked\": \"2023-10-10T14:30:00Z\",\n    \"maintenanceMode\": false\n  },\n  \"notifications\": [\n    {\n      \"id\": \"notif001\",\n      \"message\": \"New login detected on your account.\",\n      \"read\": false\n    },\n    {\n      \"id\": \"notif002\",\n      \"message\": \"Your password will expire in 5 days.\",\n      \"read\": true\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051719_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[userProfile][username]",
                                "root[userProfile][age]",
                                "root[userProfile][registeredOn]",
                                "root[userProfile][email]",
                                "root[transactionHistory][transaction][transactionId]",
                                "root[transactionHistory][transaction][amount]",
                                "root[transactionHistory][transaction][currency]",
                                "root[transactionHistory][transaction][date]",
                                "root[preferences][language]",
                                "root[preferences][theme]",
                                "root[preferences][notifications][email]",
                                "root[preferences][notifications][sms]",
                                "root[preferences][notifications][push]",
                                "root[systemStatus][uptime]",
                                "root[systemStatus][lastChecked]",
                                "root[systemStatus][maintenanceMode]",
                                "root[notifications][notification][id]",
                                "root[notifications][notification][message]",
                                "root[notifications][notification][read]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"project\": {\n    \"id\": 1024,\n    \"name\": \"Data Conversion Utility\",\n    \"created_at\": \"2023-10-05T12:34:56Z\",\n    \"description\": \"A tool to transform and reorganize structured data formats.\"\n  },\n  \"contributors\": [\n    {\n      \"user_id\": 1,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Developer\"\n    },\n    {\n      \"user_id\": 2,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Data Architect\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"task_id\": 201,\n      \"title\": \"Design JSON Schema\",\n      \"status\": \"completed\",\n      \"due_date\": \"2023-10-01\"\n    },\n    {\n      \"task_id\": 202,\n      \"title\": \"Implement Conversion Logic\",\n      \"status\": \"in-progress\",\n      \"due_date\": \"2023-10-15\"\n    },\n    {\n      \"task_id\": 203,\n      \"title\": \"Write Unit Tests\",\n      \"status\": \"pending\",\n      \"due_date\": \"2023-10-20\"\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"auto_update\": true,\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false\n    }\n  },\n  \"logs\": [\n    \"2023-10-05T12:35:00Z - Project initialized.\",\n    \"2023-10-05T12:40:15Z - First task completed.\",\n    \"2023-10-05T13:05:30Z - Conversion module updated.\"\n  ]\n}\n</code>",
            "feature_requirements": "• The XML must contain a main element representing the project data, with sub-elements for project details.  \n• The project element should include sub-elements for id, name, created_at, and description.  \n• There must be a container element for contributors, which in turn contains one or more contributor elements.  \n• Each contributor element must include sub-elements for user_id, name, and role.  \n• There must be a container element for tasks, which in turn contains one or more task elements.  \n• Each task element must include sub-elements for task_id, title, status, and due_date.  \n• There must be an element for settings, containing sub-elements for theme and auto_update.  \n• The settings element must include a nested element for notifications with sub-elements for email and sms.  \n• There must be a container element for logs that includes multiple log entry elements as text nodes.",
            "task_id": "051720",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project[id]",
                "project[name]",
                "project[created_at]",
                "project[description]",
                "project[contributors]",
                "project[contributors][contributor]",
                "project[contributors][contributor][user_id]",
                "project[contributors][contributor][name]",
                "project[contributors][contributor][role]",
                "project[tasks]",
                "project[tasks][task]",
                "project[tasks][task][task_id]",
                "project[tasks][task][title]",
                "project[tasks][task][status]",
                "project[tasks][task][due_date]",
                "project[settings]",
                "project[settings][theme]",
                "project[settings][auto_update]",
                "project[settings][notifications]",
                "project[settings][notifications][email]",
                "project[settings][notifications][sms]",
                "project[logs]",
                "project[logs][log]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051720_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"project\": {\n    \"id\": 1024,\n    \"name\": \"Data Conversion Utility\",\n    \"created_at\": \"2023-10-05T12:34:56Z\",\n    \"description\": \"A tool to transform and reorganize structured data formats.\"\n  },\n  \"contributors\": [\n    {\n      \"user_id\": 1,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Developer\"\n    },\n    {\n      \"user_id\": 2,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Data Architect\"\n    }\n  ],\n  \"tasks\": [\n    {\n      \"task_id\": 201,\n      \"title\": \"Design JSON Schema\",\n      \"status\": \"completed\",\n      \"due_date\": \"2023-10-01\"\n    },\n    {\n      \"task_id\": 202,\n      \"title\": \"Implement Conversion Logic\",\n      \"status\": \"in-progress\",\n      \"due_date\": \"2023-10-15\"\n    },\n    {\n      \"task_id\": 203,\n      \"title\": \"Write Unit Tests\",\n      \"status\": \"pending\",\n      \"due_date\": \"2023-10-20\"\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"auto_update\": true,\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false\n    }\n  },\n  \"logs\": [\n    \"2023-10-05T12:35:00Z - Project initialized.\",\n    \"2023-10-05T12:40:15Z - First task completed.\",\n    \"2023-10-05T13:05:30Z - Conversion module updated.\"\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051720_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project[id]",
                                "project[name]",
                                "project[created_at]",
                                "project[description]",
                                "project[contributors]",
                                "project[contributors][contributor]",
                                "project[contributors][contributor][user_id]",
                                "project[contributors][contributor][name]",
                                "project[contributors][contributor][role]",
                                "project[tasks]",
                                "project[tasks][task]",
                                "project[tasks][task][task_id]",
                                "project[tasks][task][title]",
                                "project[tasks][task][status]",
                                "project[tasks][task][due_date]",
                                "project[settings]",
                                "project[settings][theme]",
                                "project[settings][auto_update]",
                                "project[settings][notifications]",
                                "project[settings][notifications][email]",
                                "project[settings][notifications][sms]",
                                "project[logs]",
                                "project[logs][log]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"store\": {\n    \"id\": \"S1001\",\n    \"name\": \"Urban Corner Market\",\n    \"address\": {\n      \"street\": \"456 Elm Street\",\n      \"city\": \"Rivertown\",\n      \"postal_code\": \"67890\"\n    },\n    \"hours\": {\n      \"open\": \"08:00\",\n      \"close\": \"21:00\"\n    },\n    \"departments\": [\n      {\n        \"name\": \"Produce\",\n        \"manager\": \"Sandra Lee\",\n        \"items\": [\n          \"Apples\",\n          \"Bananas\",\n          \"Carrots\"\n        ]\n      },\n      {\n        \"name\": \"Bakery\",\n        \"manager\": \"Tom Richards\",\n        \"items\": [\n          \"Bread\",\n          \"Pastries\",\n          \"Cakes\"\n        ]\n      },\n      {\n        \"name\": \"Dairy\",\n        \"manager\": \"Elena Garcia\",\n        \"items\": [\n          \"Milk\",\n          \"Cheese\",\n          \"Yogurt\"\n        ]\n      }\n    ],\n    \"staff\": [\n      {\n        \"employee_id\": \"E101\",\n        \"name\": \"Marcus Brown\",\n        \"position\": \"Cashier\"\n      },\n      {\n        \"employee_id\": \"E102\",\n        \"name\": \"Lily Thompson\",\n        \"position\": \"Stock Associate\"\n      },\n      {\n        \"employee_id\": \"E103\",\n        \"name\": \"Kevin Patel\",\n        \"position\": \"Store Manager\"\n      }\n    ]\n  }\n}\n</code>",
            "feature_requirements": "- The XML output must contain a single root element representing the store.\n- The store element must include child elements for the store's id and name.\n- There must be an address element nested within the store, which itself contains elements for street, city, and postal_code.\n- A hours element must be present under the store element, with child elements for open and close times.\n- There must be a departments element containing a list of department elements; each department element must include a name, manager, and an items element.\n- Each items element within a department must include individual elements for each item (e.g., Apples, Bananas, Carrots, etc.).\n- A staff element must be present under the store element, containing a list of staff members, where each staff member is represented by an element that includes employee_id, name, and position.",
            "task_id": "051721",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "store",
                "store[id]",
                "store[name]",
                "store[address]",
                "store[address][street]",
                "store[address][city]",
                "store[address][postal_code]",
                "store[hours]",
                "store[hours][open]",
                "store[hours][close]",
                "store[departments]",
                "store[departments][department]",
                "store[departments][department][name]",
                "store[departments][department][manager]",
                "store[departments][department][items]",
                "store[staff]",
                "store[staff][member]",
                "store[staff][member][employee_id]",
                "store[staff][member][name]",
                "store[staff][member][position]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051721_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"store\": {\n    \"id\": \"S1001\",\n    \"name\": \"Urban Corner Market\",\n    \"address\": {\n      \"street\": \"456 Elm Street\",\n      \"city\": \"Rivertown\",\n      \"postal_code\": \"67890\"\n    },\n    \"hours\": {\n      \"open\": \"08:00\",\n      \"close\": \"21:00\"\n    },\n    \"departments\": [\n      {\n        \"name\": \"Produce\",\n        \"manager\": \"Sandra Lee\",\n        \"items\": [\n          \"Apples\",\n          \"Bananas\",\n          \"Carrots\"\n        ]\n      },\n      {\n        \"name\": \"Bakery\",\n        \"manager\": \"Tom Richards\",\n        \"items\": [\n          \"Bread\",\n          \"Pastries\",\n          \"Cakes\"\n        ]\n      },\n      {\n        \"name\": \"Dairy\",\n        \"manager\": \"Elena Garcia\",\n        \"items\": [\n          \"Milk\",\n          \"Cheese\",\n          \"Yogurt\"\n        ]\n      }\n    ],\n    \"staff\": [\n      {\n        \"employee_id\": \"E101\",\n        \"name\": \"Marcus Brown\",\n        \"position\": \"Cashier\"\n      },\n      {\n        \"employee_id\": \"E102\",\n        \"name\": \"Lily Thompson\",\n        \"position\": \"Stock Associate\"\n      },\n      {\n        \"employee_id\": \"E103\",\n        \"name\": \"Kevin Patel\",\n        \"position\": \"Store Manager\"\n      }\n    ]\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051721_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "store",
                                "store[id]",
                                "store[name]",
                                "store[address]",
                                "store[address][street]",
                                "store[address][city]",
                                "store[address][postal_code]",
                                "store[hours]",
                                "store[hours][open]",
                                "store[hours][close]",
                                "store[departments]",
                                "store[departments][department]",
                                "store[departments][department][name]",
                                "store[departments][department][manager]",
                                "store[departments][department][items]",
                                "store[staff]",
                                "store[staff][member]",
                                "store[staff][member][employee_id]",
                                "store[staff][member][name]",
                                "store[staff][member][position]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"companyName\": \"Tech Innovations Inc.\",\n  \"employees\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\"\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Product Manager\"\n    },\n    {\n      \"id\": 103,\n      \"name\": \"Carol Davis\",\n      \"role\": \"UX Designer\"\n    }\n  ],\n  \"departments\": [\n    \"Engineering\",\n    \"Product Management\",\n    \"Design\",\n    \"Human Resources\"\n  ],\n  \"officeLocations\": [\n    {\n      \"city\": \"San Francisco\",\n      \"address\": \"123 Market Street\",\n      \"postalCode\": \"94103\"\n    },\n    {\n      \"city\": \"New York\",\n      \"address\": \"456 Madison Avenue\",\n      \"postalCode\": \"10022\"\n    },\n    {\n      \"city\": \"Chicago\",\n      \"address\": \"789 Lake Shore Drive\",\n      \"postalCode\": \"60611\"\n    }\n  ],\n  \"metadata\": {\n    \"createdAt\": \"2023-01-15T08:30:00Z\",\n    \"updatedAt\": \"2023-10-01T12:00:00Z\",\n    \"active\": true\n  }\n}\n</code>",
            "feature_requirements": "• The XML must have a single root element that contains all other converted elements.  \n• There must be a companyName element with text content matching \"Tech Innovations Inc.\"  \n• There must be an employees section where each employee is represented as an element with nested id, name, and role elements that hold the corresponding values from each employee object.  \n• There must be a departments section that includes separate elements for each department string in the same order as provided (\"Engineering\", \"Product Management\", \"Design\", \"Human Resources\").  \n• There must be an officeLocations section where each office location is represented as an element containing child elements for city, address, and postalCode with the corresponding values.  \n• There must be a metadata section with child elements for createdAt, updatedAt, and active, each carrying the corresponding value from the JSON metadata object.  \n• The structure of the XML must directly reflect the hierarchical nature of the JSON data, preserving all keys and their nested configurations.",
            "task_id": "051722",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[companyName]",
                "root[employees]",
                "root[employees][employee]",
                "root[employees][employee][id]",
                "root[employees][employee][name]",
                "root[employees][employee][role]",
                "root[departments]",
                "root[departments][department]",
                "root[officeLocations]",
                "root[officeLocations][officeLocation]",
                "root[officeLocations][officeLocation][city]",
                "root[officeLocations][officeLocation][address]",
                "root[officeLocations][officeLocation][postalCode]",
                "root[metadata]",
                "root[metadata][createdAt]",
                "root[metadata][updatedAt]",
                "root[metadata][active]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051722_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"companyName\": \"Tech Innovations Inc.\",\n  \"employees\": [\n    {\n      \"id\": 101,\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\"\n    },\n    {\n      \"id\": 102,\n      \"name\": \"Bob Smith\",\n      \"role\": \"Product Manager\"\n    },\n    {\n      \"id\": 103,\n      \"name\": \"Carol Davis\",\n      \"role\": \"UX Designer\"\n    }\n  ],\n  \"departments\": [\n    \"Engineering\",\n    \"Product Management\",\n    \"Design\",\n    \"Human Resources\"\n  ],\n  \"officeLocations\": [\n    {\n      \"city\": \"San Francisco\",\n      \"address\": \"123 Market Street\",\n      \"postalCode\": \"94103\"\n    },\n    {\n      \"city\": \"New York\",\n      \"address\": \"456 Madison Avenue\",\n      \"postalCode\": \"10022\"\n    },\n    {\n      \"city\": \"Chicago\",\n      \"address\": \"789 Lake Shore Drive\",\n      \"postalCode\": \"60611\"\n    }\n  ],\n  \"metadata\": {\n    \"createdAt\": \"2023-01-15T08:30:00Z\",\n    \"updatedAt\": \"2023-10-01T12:00:00Z\",\n    \"active\": true\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051722_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[companyName]",
                                "root[employees]",
                                "root[employees][employee]",
                                "root[employees][employee][id]",
                                "root[employees][employee][name]",
                                "root[employees][employee][role]",
                                "root[departments]",
                                "root[departments][department]",
                                "root[officeLocations]",
                                "root[officeLocations][officeLocation]",
                                "root[officeLocations][officeLocation][city]",
                                "root[officeLocations][officeLocation][address]",
                                "root[officeLocations][officeLocation][postalCode]",
                                "root[metadata]",
                                "root[metadata][createdAt]",
                                "root[metadata][updatedAt]",
                                "root[metadata][active]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": \"Tech Conference 2023\",\n  \"location\": {\n    \"venue\": \"Innovation Center\",\n    \"city\": \"San Francisco\",\n    \"country\": \"USA\",\n    \"address\": {\n      \"street\": \"456 Elm Street\",\n      \"zipCode\": \"94103\"\n    }\n  },\n  \"schedule\": [\n    {\n      \"day\": \"Monday\",\n      \"sessions\": [\n        {\n          \"title\": \"Opening Keynote\",\n          \"presenter\": \"Dr. Jane Smith\",\n          \"startTime\": \"09:00\",\n          \"endTime\": \"10:00\"\n        },\n        {\n          \"title\": \"AI in Industry\",\n          \"presenter\": \"John Doe\",\n          \"startTime\": \"10:30\",\n          \"endTime\": \"11:30\"\n        }\n      ]\n    },\n    {\n      \"day\": \"Tuesday\",\n      \"sessions\": [\n        {\n          \"title\": \"Future of Cloud Computing\",\n          \"presenter\": \"Alice Johnson\",\n          \"startTime\": \"09:00\",\n          \"endTime\": \"10:00\"\n        },\n        {\n          \"title\": \"Cybersecurity Trends\",\n          \"presenter\": \"Bob Williams\",\n          \"startTime\": \"10:30\",\n          \"endTime\": \"11:30\"\n        }\n      ]\n    }\n  ],\n  \"attendees\": [\n    {\n      \"id\": \"A001\",\n      \"name\": \"Michael Brown\",\n      \"registrationType\": \"VIP\"\n    },\n    {\n      \"id\": \"A002\",\n      \"name\": \"Emily Davis\",\n      \"registrationType\": \"Regular\"\n    }\n  ],\n  \"sponsors\": [\n    \"TechCorp\",\n    \"InnovateX\",\n    \"CloudNet\"\n  ]\n}\n</code>",
            "feature_requirements": "• The XML must contain a top-level element encapsulating all other elements.\n• An element representing the event name must be present that holds the text \"Tech Conference 2023\".\n• A location element must be included with nested child elements for venue, city, and country, each holding their respective values.\n• Within the location element, there must be an address element containing child elements for street and zipCode with appropriate values.\n• The XML must have a schedule section where each day is represented by an element that includes a day identifier and a list of session elements.\n• Each session element within the schedule must include child elements for title, presenter, startTime, and endTime.\n• The XML must include an attendees section containing individual attendee elements with child elements for id, name, and registrationType.\n• A sponsors section must be present containing a list of sponsor entries, each as an individual element with the sponsor name as its text content.",
            "task_id": "051723",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[eventName]",
                "root[location]",
                "root[location][venue]",
                "root[location][city]",
                "root[location][country]",
                "root[location][address]",
                "root[location][address][street]",
                "root[location][address][zipCode]",
                "root[schedule]",
                "root[schedule][day]",
                "root[schedule][day][session]",
                "root[schedule][day][session][title]",
                "root[schedule][day][session][presenter]",
                "root[schedule][day][session][startTime]",
                "root[schedule][day][session][endTime]",
                "root[attendees]",
                "root[attendees][attendee]",
                "root[attendees][attendee][id]",
                "root[attendees][attendee][name]",
                "root[attendees][attendee][registrationType]",
                "root[sponsors]",
                "root[sponsors][sponsor]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051723_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": \"Tech Conference 2023\",\n  \"location\": {\n    \"venue\": \"Innovation Center\",\n    \"city\": \"San Francisco\",\n    \"country\": \"USA\",\n    \"address\": {\n      \"street\": \"456 Elm Street\",\n      \"zipCode\": \"94103\"\n    }\n  },\n  \"schedule\": [\n    {\n      \"day\": \"Monday\",\n      \"sessions\": [\n        {\n          \"title\": \"Opening Keynote\",\n          \"presenter\": \"Dr. Jane Smith\",\n          \"startTime\": \"09:00\",\n          \"endTime\": \"10:00\"\n        },\n        {\n          \"title\": \"AI in Industry\",\n          \"presenter\": \"John Doe\",\n          \"startTime\": \"10:30\",\n          \"endTime\": \"11:30\"\n        }\n      ]\n    },\n    {\n      \"day\": \"Tuesday\",\n      \"sessions\": [\n        {\n          \"title\": \"Future of Cloud Computing\",\n          \"presenter\": \"Alice Johnson\",\n          \"startTime\": \"09:00\",\n          \"endTime\": \"10:00\"\n        },\n        {\n          \"title\": \"Cybersecurity Trends\",\n          \"presenter\": \"Bob Williams\",\n          \"startTime\": \"10:30\",\n          \"endTime\": \"11:30\"\n        }\n      ]\n    }\n  ],\n  \"attendees\": [\n    {\n      \"id\": \"A001\",\n      \"name\": \"Michael Brown\",\n      \"registrationType\": \"VIP\"\n    },\n    {\n      \"id\": \"A002\",\n      \"name\": \"Emily Davis\",\n      \"registrationType\": \"Regular\"\n    }\n  ],\n  \"sponsors\": [\n    \"TechCorp\",\n    \"InnovateX\",\n    \"CloudNet\"\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051723_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[eventName]",
                                "root[location]",
                                "root[location][venue]",
                                "root[location][city]",
                                "root[location][country]",
                                "root[location][address]",
                                "root[location][address][street]",
                                "root[location][address][zipCode]",
                                "root[schedule]",
                                "root[schedule][day]",
                                "root[schedule][day][session]",
                                "root[schedule][day][session][title]",
                                "root[schedule][day][session][presenter]",
                                "root[schedule][day][session][startTime]",
                                "root[schedule][day][session][endTime]",
                                "root[attendees]",
                                "root[attendees][attendee]",
                                "root[attendees][attendee][id]",
                                "root[attendees][attendee][name]",
                                "root[attendees][attendee][registrationType]",
                                "root[sponsors]",
                                "root[sponsors][sponsor]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"festival\": {\n    \"name\": \"Culinary Delights\",\n    \"location\": \"Riverfront Park\",\n    \"date\": \"2023-11-15\",\n    \"activities\": [\n      {\n        \"id\": 1,\n        \"type\": \"Cooking Competition\",\n        \"description\": \"Local chefs compete in timed challenges\",\n        \"participants\": [\"Chef Andrea\", \"Chef Luis\", \"Chef Mei\"]\n      },\n      {\n        \"id\": 2,\n        \"type\": \"Wine Tasting\",\n        \"description\": \"Experience a variety of local and imported wines\",\n        \"participants\": [\"Sommelier Tom\", \"Sommelier Eva\"]\n      },\n      {\n        \"id\": 3,\n        \"type\": \"Live Cooking Demos\",\n        \"description\": \"Interactive sessions by famous chefs\",\n        \"participants\": [\"Chef Roberto\", \"Chef Akira\"]\n      }\n    ]\n  },\n  \"vendors\": [\n    {\n      \"id\": \"V001\",\n      \"name\": \"Gourmet Grills\",\n      \"specialty\": \"BBQ and Grilled Dishes\",\n      \"rating\": 4.7\n    },\n    {\n      \"id\": \"V002\",\n      \"name\": \"Vegan Fresh\",\n      \"specialty\": \"Plant-based meals\",\n      \"rating\": 4.5\n    },\n    {\n      \"id\": \"V003\",\n      \"name\": \"Sweet Treats\",\n      \"specialty\": \"Desserts and Pastries\",\n      \"rating\": 4.9\n    }\n  ],\n  \"ticketing\": {\n    \"prices\": {\n      \"adult\": 20.0,\n      \"child\": 10.0,\n      \"senior\": 15.0\n    },\n    \"sales\": {\n      \"online\": true,\n      \"onsite\": false\n    }\n  },\n  \"organizers\": [\n    {\n      \"name\": \"Samuel Green\",\n      \"role\": \"Event Director\",\n      \"contact\": {\n        \"email\": \"samuel.green@example.com\",\n        \"phone\": \"123-456-7890\"\n      }\n    },\n    {\n      \"name\": \"Lily Thompson\",\n      \"role\": \"Marketing Manager\",\n      \"contact\": {\n        \"email\": \"lily.thompson@example.com\",\n        \"phone\": \"987-654-3210\"\n      }\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must use a single root element that encloses the entire XML document, then include separate child elements for each top-level JSON key (\"festival\", \"vendors\", \"ticketing\", and \"organizers\").\n\n• The \"festival\" element must include nested elements for \"name\", \"location\", and \"date\", followed by an \"activities\" container element that lists individual \"activity\" elements.\n\n• Each \"activity\" element under \"activities\" must contain child elements for \"id\", \"type\", and \"description\", and include a nested \"participants\" element that in turn contains a list of \"participant\" elements representing individual participant names.\n\n• The \"vendors\" element must include multiple \"vendor\" sub-elements, each containing child elements for \"id\", \"name\", \"specialty\", and \"rating\".\n\n• The \"ticketing\" element must be represented with two child elements: one for \"prices\" (which contains elements \"adult\", \"child\", and \"senior\") and one for \"sales\" (which contains elements \"online\" and \"onsite\" with their corresponding boolean values).\n\n• The \"organizers\" element must include multiple \"organizer\" elements, each having child elements for \"name\" and \"role\", and a nested \"contact\" element that itself contains \"email\" and \"phone\" elements.",
            "task_id": "051724",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[festival]",
                "root[vendors]",
                "root[ticketing]",
                "root[organizers]",
                "root[festival][name]",
                "root[festival][location]",
                "root[festival][date]",
                "root[festival][activities]",
                "root[festival][activities][activity]",
                "root[festival][activities][activity][id]",
                "root[festival][activities][activity][type]",
                "root[festival][activities][activity][description]",
                "root[festival][activities][activity][participants]",
                "root[festival][activities][activity][participants][participant]",
                "root[vendors][vendor]",
                "root[vendors][vendor][id]",
                "root[vendors][vendor][name]",
                "root[vendors][vendor][specialty]",
                "root[vendors][vendor][rating]",
                "root[ticketing][prices]",
                "root[ticketing][prices][adult]",
                "root[ticketing][prices][child]",
                "root[ticketing][prices][senior]",
                "root[ticketing][sales]",
                "root[ticketing][sales][online]",
                "root[ticketing][sales][onsite]",
                "root[organizers][organizer]",
                "root[organizers][organizer][name]",
                "root[organizers][organizer][role]",
                "root[organizers][organizer][contact]",
                "root[organizers][organizer][contact][email]",
                "root[organizers][organizer][contact][phone]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051724_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"festival\": {\n    \"name\": \"Culinary Delights\",\n    \"location\": \"Riverfront Park\",\n    \"date\": \"2023-11-15\",\n    \"activities\": [\n      {\n        \"id\": 1,\n        \"type\": \"Cooking Competition\",\n        \"description\": \"Local chefs compete in timed challenges\",\n        \"participants\": [\"Chef Andrea\", \"Chef Luis\", \"Chef Mei\"]\n      },\n      {\n        \"id\": 2,\n        \"type\": \"Wine Tasting\",\n        \"description\": \"Experience a variety of local and imported wines\",\n        \"participants\": [\"Sommelier Tom\", \"Sommelier Eva\"]\n      },\n      {\n        \"id\": 3,\n        \"type\": \"Live Cooking Demos\",\n        \"description\": \"Interactive sessions by famous chefs\",\n        \"participants\": [\"Chef Roberto\", \"Chef Akira\"]\n      }\n    ]\n  },\n  \"vendors\": [\n    {\n      \"id\": \"V001\",\n      \"name\": \"Gourmet Grills\",\n      \"specialty\": \"BBQ and Grilled Dishes\",\n      \"rating\": 4.7\n    },\n    {\n      \"id\": \"V002\",\n      \"name\": \"Vegan Fresh\",\n      \"specialty\": \"Plant-based meals\",\n      \"rating\": 4.5\n    },\n    {\n      \"id\": \"V003\",\n      \"name\": \"Sweet Treats\",\n      \"specialty\": \"Desserts and Pastries\",\n      \"rating\": 4.9\n    }\n  ],\n  \"ticketing\": {\n    \"prices\": {\n      \"adult\": 20.0,\n      \"child\": 10.0,\n      \"senior\": 15.0\n    },\n    \"sales\": {\n      \"online\": true,\n      \"onsite\": false\n    }\n  },\n  \"organizers\": [\n    {\n      \"name\": \"Samuel Green\",\n      \"role\": \"Event Director\",\n      \"contact\": {\n        \"email\": \"samuel.green@example.com\",\n        \"phone\": \"123-456-7890\"\n      }\n    },\n    {\n      \"name\": \"Lily Thompson\",\n      \"role\": \"Marketing Manager\",\n      \"contact\": {\n        \"email\": \"lily.thompson@example.com\",\n        \"phone\": \"987-654-3210\"\n      }\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051724_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[festival]",
                                "root[vendors]",
                                "root[ticketing]",
                                "root[organizers]",
                                "root[festival][name]",
                                "root[festival][location]",
                                "root[festival][date]",
                                "root[festival][activities]",
                                "root[festival][activities][activity]",
                                "root[festival][activities][activity][id]",
                                "root[festival][activities][activity][type]",
                                "root[festival][activities][activity][description]",
                                "root[festival][activities][activity][participants]",
                                "root[festival][activities][activity][participants][participant]",
                                "root[vendors][vendor]",
                                "root[vendors][vendor][id]",
                                "root[vendors][vendor][name]",
                                "root[vendors][vendor][specialty]",
                                "root[vendors][vendor][rating]",
                                "root[ticketing][prices]",
                                "root[ticketing][prices][adult]",
                                "root[ticketing][prices][child]",
                                "root[ticketing][prices][senior]",
                                "root[ticketing][sales]",
                                "root[ticketing][sales][online]",
                                "root[ticketing][sales][onsite]",
                                "root[organizers][organizer]",
                                "root[organizers][organizer][name]",
                                "root[organizers][organizer][role]",
                                "root[organizers][organizer][contact]",
                                "root[organizers][organizer][contact][email]",
                                "root[organizers][organizer][contact][phone]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"project\": \"Data Conversion Suite\",\n  \"version\": \"1.2.3\",\n  \"configuration\": {\n    \"enableLogging\": true,\n    \"logLevel\": \"verbose\",\n    \"outputFormats\": [\"json\", \"xml\", \"csv\"],\n    \"retryPolicy\": {\n      \"maxRetries\": 3,\n      \"delaySeconds\": 5\n    }\n  },\n  \"users\": [\n    {\n      \"userId\": 101,\n      \"name\": \"Alice\",\n      \"roles\": [\"admin\", \"converter\"]\n    },\n    {\n      \"userId\": 102,\n      \"name\": \"Bob\",\n      \"roles\": [\"viewer\"]\n    },\n    {\n      \"userId\": 103,\n      \"name\": \"Carol\",\n      \"roles\": [\"editor\", \"validator\"]\n    }\n  ],\n  \"tasks\": [\n    {\n      \"taskId\": \"T001\",\n      \"description\": \"Convert JSON to XML\",\n      \"status\": \"completed\",\n      \"parameters\": {\n        \"includeHeaders\": true,\n        \"indentation\": 4\n      }\n    },\n    {\n      \"taskId\": \"T002\",\n      \"description\": \"Validate structured data formats\",\n      \"status\": \"in_progress\",\n      \"parameters\": {\n        \"validateSchema\": true,\n        \"schemaVersion\": \"v2.1\"\n      }\n    },\n    {\n      \"taskId\": \"T003\",\n      \"description\": \"Generate conversion report\",\n      \"status\": \"pending\",\n      \"parameters\": {\n        \"includeStatistics\": true\n      }\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encompasses all other elements derived from the JSON keys.  \n• The root element must contain distinct child elements corresponding to \"project\", \"version\", \"configuration\", \"users\", and \"tasks\".  \n• The \"configuration\" element must include child elements for \"enableLogging\", \"logLevel\", \"outputFormats\", and \"retryPolicy\", with each key represented as a separate nested element.  \n• The \"outputFormats\" element must represent an ordered list, where each format from the JSON array (\"json\", \"xml\", \"csv\") is rendered as an individual element.  \n• The \"retryPolicy\" element must contain child elements for \"maxRetries\" and \"delaySeconds\", capturing their numeric values.  \n• The \"users\" element must encapsulate multiple \"user\" elements, with each \"user\" element containing child elements for \"userId\", \"name\", and a nested \"roles\" list.  \n• Each \"roles\" list under a user must consist of individual elements, each representing one role from the respective JSON array.  \n• The \"tasks\" element must include multiple \"task\" elements, where each \"task\" element contains child elements for \"taskId\", \"description\", \"status\", and a nested \"parameters\" element.  \n• Within each \"parameters\" element found under a task, there must be individual child elements for every key-value pair provided (such as \"includeHeaders\", \"indentation\", \"validateSchema\", \"schemaVersion\", and \"includeStatistics\") depending on the JSON object structure.",
            "task_id": "051725",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[project]",
                "root[version]",
                "root[configuration]",
                "root[configuration][enableLogging]",
                "root[configuration][logLevel]",
                "root[configuration][outputFormats]",
                "root[configuration][retryPolicy]",
                "root[configuration][retryPolicy][maxRetries]",
                "root[configuration][retryPolicy][delaySeconds]",
                "root[users]",
                "root[users][user]",
                "root[users][user][userId]",
                "root[users][user][name]",
                "root[users][user][roles]",
                "root[users][user][roles][*]",
                "root[tasks]",
                "root[tasks][task]",
                "root[tasks][task][taskId]",
                "root[tasks][task][description]",
                "root[tasks][task][status]",
                "root[tasks][task][parameters]",
                "root[tasks][task][parameters][includeHeaders]",
                "root[tasks][task][parameters][indentation]",
                "root[tasks][task][parameters][validateSchema]",
                "root[tasks][task][parameters][schemaVersion]",
                "root[tasks][task][parameters][includeStatistics]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051725_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"project\": \"Data Conversion Suite\",\n  \"version\": \"1.2.3\",\n  \"configuration\": {\n    \"enableLogging\": true,\n    \"logLevel\": \"verbose\",\n    \"outputFormats\": [\"json\", \"xml\", \"csv\"],\n    \"retryPolicy\": {\n      \"maxRetries\": 3,\n      \"delaySeconds\": 5\n    }\n  },\n  \"users\": [\n    {\n      \"userId\": 101,\n      \"name\": \"Alice\",\n      \"roles\": [\"admin\", \"converter\"]\n    },\n    {\n      \"userId\": 102,\n      \"name\": \"Bob\",\n      \"roles\": [\"viewer\"]\n    },\n    {\n      \"userId\": 103,\n      \"name\": \"Carol\",\n      \"roles\": [\"editor\", \"validator\"]\n    }\n  ],\n  \"tasks\": [\n    {\n      \"taskId\": \"T001\",\n      \"description\": \"Convert JSON to XML\",\n      \"status\": \"completed\",\n      \"parameters\": {\n        \"includeHeaders\": true,\n        \"indentation\": 4\n      }\n    },\n    {\n      \"taskId\": \"T002\",\n      \"description\": \"Validate structured data formats\",\n      \"status\": \"in_progress\",\n      \"parameters\": {\n        \"validateSchema\": true,\n        \"schemaVersion\": \"v2.1\"\n      }\n    },\n    {\n      \"taskId\": \"T003\",\n      \"description\": \"Generate conversion report\",\n      \"status\": \"pending\",\n      \"parameters\": {\n        \"includeStatistics\": true\n      }\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051725_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[project]",
                                "root[version]",
                                "root[configuration]",
                                "root[configuration][enableLogging]",
                                "root[configuration][logLevel]",
                                "root[configuration][outputFormats]",
                                "root[configuration][retryPolicy]",
                                "root[configuration][retryPolicy][maxRetries]",
                                "root[configuration][retryPolicy][delaySeconds]",
                                "root[users]",
                                "root[users][user]",
                                "root[users][user][userId]",
                                "root[users][user][name]",
                                "root[users][user][roles]",
                                "root[users][user][roles][*]",
                                "root[tasks]",
                                "root[tasks][task]",
                                "root[tasks][task][taskId]",
                                "root[tasks][task][description]",
                                "root[tasks][task][status]",
                                "root[tasks][task][parameters]",
                                "root[tasks][task][parameters][includeHeaders]",
                                "root[tasks][task][parameters][indentation]",
                                "root[tasks][task][parameters][validateSchema]",
                                "root[tasks][task][parameters][schemaVersion]",
                                "root[tasks][task][parameters][includeStatistics]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"profile\": {\n    \"userId\": \"user123\",\n    \"name\": \"Alice Johnson\",\n    \"age\": 29,\n    \"email\": \"alice.johnson@example.com\"\n  },\n  \"preferences\": {\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    },\n    \"language\": \"en\",\n    \"theme\": \"light\"\n  },\n  \"dataEntries\": [\n    {\n      \"entryId\": \"entry001\",\n      \"value\": 100,\n      \"timestamp\": \"2023-10-01T09:15:00Z\"\n    },\n    {\n      \"entryId\": \"entry002\",\n      \"value\": 245,\n      \"timestamp\": \"2023-10-02T11:30:00Z\"\n    },\n    {\n      \"entryId\": \"entry003\",\n      \"value\": 367,\n      \"timestamp\": \"2023-10-03T14:45:00Z\"\n    }\n  ],\n  \"logs\": [\n    {\n      \"logId\": \"logA\",\n      \"message\": \"User profile updated\",\n      \"level\": \"info\",\n      \"timestamp\": \"2023-10-04T16:00:00Z\"\n    },\n    {\n      \"logId\": \"logB\",\n      \"message\": \"Data synchronization completed\",\n      \"level\": \"success\",\n      \"timestamp\": \"2023-10-05T18:30:00Z\"\n    }\n  ]\n}\n</code>",
            "feature_requirements": "• The output must have a single root element that encapsulates all other elements converted from the JSON data.  \n• There must be a \"profile\" element containing nested elements \"userId\", \"name\", \"age\", and \"email\", each holding the corresponding values from the JSON.  \n• A \"preferences\" element must be present; it should include a \"notifications\" sub-element with nested \"email\", \"sms\", and \"push\" elements carrying the respective boolean values, as well as separate \"language\" and \"theme\" elements.  \n• A \"dataEntries\" element must exist that contains a list of child elements (one for each data entry); each child element must include \"entryId\", \"value\", and \"timestamp\" sub-elements with the appropriate data.  \n• There must be a \"logs\" element that holds a collection of child elements (one per log record); each of these must include \"logId\", \"message\", \"level\", and \"timestamp\" sub-elements reflecting the JSON log data.",
            "task_id": "051726",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[profile]",
                "root[profile][userId]",
                "root[profile][name]",
                "root[profile][age]",
                "root[profile][email]",
                "root[preferences]",
                "root[preferences][notifications]",
                "root[preferences][notifications][email]",
                "root[preferences][notifications][sms]",
                "root[preferences][notifications][push]",
                "root[preferences][language]",
                "root[preferences][theme]",
                "root[dataEntries]",
                "root[dataEntries][*][entryId]",
                "root[dataEntries][*][value]",
                "root[dataEntries][*][timestamp]",
                "root[logs]",
                "root[logs][*][logId]",
                "root[logs][*][message]",
                "root[logs][*][level]",
                "root[logs][*][timestamp]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051726_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"profile\": {\n    \"userId\": \"user123\",\n    \"name\": \"Alice Johnson\",\n    \"age\": 29,\n    \"email\": \"alice.johnson@example.com\"\n  },\n  \"preferences\": {\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    },\n    \"language\": \"en\",\n    \"theme\": \"light\"\n  },\n  \"dataEntries\": [\n    {\n      \"entryId\": \"entry001\",\n      \"value\": 100,\n      \"timestamp\": \"2023-10-01T09:15:00Z\"\n    },\n    {\n      \"entryId\": \"entry002\",\n      \"value\": 245,\n      \"timestamp\": \"2023-10-02T11:30:00Z\"\n    },\n    {\n      \"entryId\": \"entry003\",\n      \"value\": 367,\n      \"timestamp\": \"2023-10-03T14:45:00Z\"\n    }\n  ],\n  \"logs\": [\n    {\n      \"logId\": \"logA\",\n      \"message\": \"User profile updated\",\n      \"level\": \"info\",\n      \"timestamp\": \"2023-10-04T16:00:00Z\"\n    },\n    {\n      \"logId\": \"logB\",\n      \"message\": \"Data synchronization completed\",\n      \"level\": \"success\",\n      \"timestamp\": \"2023-10-05T18:30:00Z\"\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051726_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[profile]",
                                "root[profile][userId]",
                                "root[profile][name]",
                                "root[profile][age]",
                                "root[profile][email]",
                                "root[preferences]",
                                "root[preferences][notifications]",
                                "root[preferences][notifications][email]",
                                "root[preferences][notifications][sms]",
                                "root[preferences][notifications][push]",
                                "root[preferences][language]",
                                "root[preferences][theme]",
                                "root[dataEntries]",
                                "root[dataEntries][*][entryId]",
                                "root[dataEntries][*][value]",
                                "root[dataEntries][*][timestamp]",
                                "root[logs]",
                                "root[logs][*][logId]",
                                "root[logs][*][message]",
                                "root[logs][*][level]",
                                "root[logs][*][timestamp]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central Public Library\",\n    \"location\": \"Downtown\",\n    \"established\": 1923,\n    \"sections\": [\n      \"Fiction\",\n      \"Non-Fiction\",\n      \"Reference\",\n      \"Children\"\n    ],\n    \"staff\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice Johnson\",\n        \"position\": \"Head Librarian\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob Smith\",\n        \"position\": \"Assistant Librarian\"\n      }\n    ]\n  },\n  \"inventory\": {\n    \"totalBooks\": 150000,\n    \"categories\": [\n      {\n        \"name\": \"Fiction\",\n        \"count\": 60000\n      },\n      {\n        \"name\": \"Non-Fiction\",\n        \"count\": 50000\n      },\n      {\n        \"name\": \"Reference\",\n        \"count\": 20000\n      },\n      {\n        \"name\": \"Children\",\n        \"count\": 20000\n      }\n    ]\n  },\n  \"membership\": {\n    \"activeMembers\": 2500,\n    \"membershipTypes\": [\n      \"Standard\",\n      \"Premium\",\n      \"Student\"\n    ],\n    \"benefits\": {\n      \"borrowingLimit\": 10,\n      \"overdueFinePerDay\": 0.25,\n      \"onlineAccess\": true\n    }\n  },\n  \"services\": [\n    \"Book Lending\",\n    \"Research Assistance\",\n    \"Community Events\",\n    \"Digital Collections\"\n  ]\n}\n</code>",
            "feature_requirements": "• The output must be valid XML, with a single root element that encloses all converted data.  \n• The top-level JSON keys (\"library\", \"inventory\", \"membership\", \"services\") must each become separate XML child elements under the root.  \n• The \"library\" element must include child elements for \"name\", \"location\", \"established\", \"sections\", and \"staff\"; each with corresponding text values or nested elements.  \n• The \"sections\" inside \"library\" must be represented as a list of individual XML elements, each containing a section title (e.g., \"Fiction\", \"Non-Fiction\", etc.).  \n• The \"staff\" array under \"library\" must be converted into multiple XML elements, with each staff element containing child elements for \"id\", \"name\", and \"position\".  \n• The \"inventory\" element must contain a child element for \"totalBooks\" and a \"categories\" element that encloses multiple category elements; each category element must include \"name\" and \"count\" as its children.  \n• The \"membership\" element must include a child element for \"activeMembers\", a list element for \"membershipTypes\" (each type represented individually), and a \"benefits\" element.  \n• The \"benefits\" element must include child elements for \"borrowingLimit\", \"overdueFinePerDay\", and \"onlineAccess\" with their respective values.  \n• The \"services\" array from JSON must be converted into a series of XML elements (or a containing element with child elements) that list each service (e.g., \"Book Lending\", \"Research Assistance\", etc.).",
            "task_id": "051727",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[library]",
                "root[library][name]",
                "root[library][location]",
                "root[library][established]",
                "root[library][sections]",
                "root[library][sections][section]",
                "root[library][staff]",
                "root[library][staff][id]",
                "root[library][staff][name]",
                "root[library][staff][position]",
                "root[inventory]",
                "root[inventory][totalBooks]",
                "root[inventory][categories]",
                "root[inventory][categories][category]",
                "root[inventory][categories][category][name]",
                "root[inventory][categories][category][count]",
                "root[membership]",
                "root[membership][activeMembers]",
                "root[membership][membershipTypes]",
                "root[membership][benefits]",
                "root[membership][benefits][borrowingLimit]",
                "root[membership][benefits][overdueFinePerDay]",
                "root[membership][benefits][onlineAccess]",
                "root[services]",
                "root[services][service]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051727_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"library\": {\n    \"name\": \"Central Public Library\",\n    \"location\": \"Downtown\",\n    \"established\": 1923,\n    \"sections\": [\n      \"Fiction\",\n      \"Non-Fiction\",\n      \"Reference\",\n      \"Children\"\n    ],\n    \"staff\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice Johnson\",\n        \"position\": \"Head Librarian\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob Smith\",\n        \"position\": \"Assistant Librarian\"\n      }\n    ]\n  },\n  \"inventory\": {\n    \"totalBooks\": 150000,\n    \"categories\": [\n      {\n        \"name\": \"Fiction\",\n        \"count\": 60000\n      },\n      {\n        \"name\": \"Non-Fiction\",\n        \"count\": 50000\n      },\n      {\n        \"name\": \"Reference\",\n        \"count\": 20000\n      },\n      {\n        \"name\": \"Children\",\n        \"count\": 20000\n      }\n    ]\n  },\n  \"membership\": {\n    \"activeMembers\": 2500,\n    \"membershipTypes\": [\n      \"Standard\",\n      \"Premium\",\n      \"Student\"\n    ],\n    \"benefits\": {\n      \"borrowingLimit\": 10,\n      \"overdueFinePerDay\": 0.25,\n      \"onlineAccess\": true\n    }\n  },\n  \"services\": [\n    \"Book Lending\",\n    \"Research Assistance\",\n    \"Community Events\",\n    \"Digital Collections\"\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051727_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[library]",
                                "root[library][name]",
                                "root[library][location]",
                                "root[library][established]",
                                "root[library][sections]",
                                "root[library][sections][section]",
                                "root[library][staff]",
                                "root[library][staff][id]",
                                "root[library][staff][name]",
                                "root[library][staff][position]",
                                "root[inventory]",
                                "root[inventory][totalBooks]",
                                "root[inventory][categories]",
                                "root[inventory][categories][category]",
                                "root[inventory][categories][category][name]",
                                "root[inventory][categories][category][count]",
                                "root[membership]",
                                "root[membership][activeMembers]",
                                "root[membership][membershipTypes]",
                                "root[membership][benefits]",
                                "root[membership][benefits][borrowingLimit]",
                                "root[membership][benefits][overdueFinePerDay]",
                                "root[membership][benefits][onlineAccess]",
                                "root[services]",
                                "root[services][service]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": {\n    \"name\": \"Tech Innovators Conference\",\n    \"date\": \"2023-11-15\",\n    \"location\": \"Downtown Convention Center\",\n    \"description\": \"A conference showcasing the latest trends in technology and innovation.\"\n  },\n  \"attendees\": [\n    {\n      \"id\": 101,\n      \"firstName\": \"Alice\",\n      \"lastName\": \"Johnson\",\n      \"registrationStatus\": \"confirmed\"\n    },\n    {\n      \"id\": 102,\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Lee\",\n      \"registrationStatus\": \"pending\"\n    },\n    {\n      \"id\": 103,\n      \"firstName\": \"Charlie\",\n      \"lastName\": \"Kim\",\n      \"registrationStatus\": \"confirmed\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"sessionId\": 1,\n      \"title\": \"Future of AI\",\n      \"speaker\": \"Dr. Emily Watts\",\n      \"startTime\": \"09:00\",\n      \"endTime\": \"10:00\"\n    },\n    {\n      \"sessionId\": 2,\n      \"title\": \"Advancements in Quantum Computing\",\n      \"speaker\": \"Prof. Mark Rivera\",\n      \"startTime\": \"10:15\",\n      \"endTime\": \"11:15\"\n    },\n    {\n      \"sessionId\": 3,\n      \"title\": \"Cybersecurity Trends\",\n      \"speaker\": \"Ms. Nina Patel\",\n      \"startTime\": \"11:30\",\n      \"endTime\": \"12:30\"\n    }\n  ],\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"createdBy\": \"Event Management System\",\n    \"lastUpdated\": \"2023-10-01T12:00:00Z\"\n  },\n  \"contacts\": {\n    \"organizer\": \"Tech Events Inc.\",\n    \"email\": \"contact@techevents.com\",\n    \"phone\": \"+1234567890\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encloses all other elements.  \n• An <event> element must be present with child elements for name, date, location, and description, each containing the corresponding values.  \n• An element (or container) for attendees must include individual attendee elements, each with child elements for id, firstName, lastName, and registrationStatus that reflect the JSON’s attendees array.  \n• An element (or container) for schedule must include individual session elements, each having child elements for sessionId, title, speaker, startTime, and endTime, corresponding to each session in the JSON array.  \n• A <metadata> element must be included containing child elements for version, createdBy, and lastUpdated with their respective values.  \n• A <contacts> element must contain child elements for organizer, email, and phone, reflecting the JSON's contacts object.  \n• The structure and tag names of the XML output must directly correspond to the keys and hierarchical organization of the provided JSON input.",
            "task_id": "051728",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[event]",
                "root[event][name]",
                "root[event][date]",
                "root[event][location]",
                "root[event][description]",
                "root[attendees]",
                "root[attendees][attendee]",
                "root[attendees][attendee][id]",
                "root[attendees][attendee][firstName]",
                "root[attendees][attendee][lastName]",
                "root[attendees][attendee][registrationStatus]",
                "root[schedule]",
                "root[schedule][session]",
                "root[schedule][session][sessionId]",
                "root[schedule][session][title]",
                "root[schedule][session][speaker]",
                "root[schedule][session][startTime]",
                "root[schedule][session][endTime]",
                "root[metadata]",
                "root[metadata][version]",
                "root[metadata][createdBy]",
                "root[metadata][lastUpdated]",
                "root[contacts]",
                "root[contacts][organizer]",
                "root[contacts][email]",
                "root[contacts][phone]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051728_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"event\": {\n    \"name\": \"Tech Innovators Conference\",\n    \"date\": \"2023-11-15\",\n    \"location\": \"Downtown Convention Center\",\n    \"description\": \"A conference showcasing the latest trends in technology and innovation.\"\n  },\n  \"attendees\": [\n    {\n      \"id\": 101,\n      \"firstName\": \"Alice\",\n      \"lastName\": \"Johnson\",\n      \"registrationStatus\": \"confirmed\"\n    },\n    {\n      \"id\": 102,\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Lee\",\n      \"registrationStatus\": \"pending\"\n    },\n    {\n      \"id\": 103,\n      \"firstName\": \"Charlie\",\n      \"lastName\": \"Kim\",\n      \"registrationStatus\": \"confirmed\"\n    }\n  ],\n  \"schedule\": [\n    {\n      \"sessionId\": 1,\n      \"title\": \"Future of AI\",\n      \"speaker\": \"Dr. Emily Watts\",\n      \"startTime\": \"09:00\",\n      \"endTime\": \"10:00\"\n    },\n    {\n      \"sessionId\": 2,\n      \"title\": \"Advancements in Quantum Computing\",\n      \"speaker\": \"Prof. Mark Rivera\",\n      \"startTime\": \"10:15\",\n      \"endTime\": \"11:15\"\n    },\n    {\n      \"sessionId\": 3,\n      \"title\": \"Cybersecurity Trends\",\n      \"speaker\": \"Ms. Nina Patel\",\n      \"startTime\": \"11:30\",\n      \"endTime\": \"12:30\"\n    }\n  ],\n  \"metadata\": {\n    \"version\": \"1.0\",\n    \"createdBy\": \"Event Management System\",\n    \"lastUpdated\": \"2023-10-01T12:00:00Z\"\n  },\n  \"contacts\": {\n    \"organizer\": \"Tech Events Inc.\",\n    \"email\": \"contact@techevents.com\",\n    \"phone\": \"+1234567890\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051728_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[event]",
                                "root[event][name]",
                                "root[event][date]",
                                "root[event][location]",
                                "root[event][description]",
                                "root[attendees]",
                                "root[attendees][attendee]",
                                "root[attendees][attendee][id]",
                                "root[attendees][attendee][firstName]",
                                "root[attendees][attendee][lastName]",
                                "root[attendees][attendee][registrationStatus]",
                                "root[schedule]",
                                "root[schedule][session]",
                                "root[schedule][session][sessionId]",
                                "root[schedule][session][title]",
                                "root[schedule][session][speaker]",
                                "root[schedule][session][startTime]",
                                "root[schedule][session][endTime]",
                                "root[metadata]",
                                "root[metadata][version]",
                                "root[metadata][createdBy]",
                                "root[metadata][lastUpdated]",
                                "root[contacts]",
                                "root[contacts][organizer]",
                                "root[contacts][email]",
                                "root[contacts][phone]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"systemId\": \"smart_home_controller_01\",\n  \"systemInfo\": {\n    \"name\": \"Smart Home Controller\",\n    \"version\": \"1.2.3\",\n    \"manufacturer\": \"AlphaTech\"\n  },\n  \"devices\": [\n    {\n      \"deviceId\": \"sensor_001\",\n      \"type\": \"temperature_sensor\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"actuator_002\",\n      \"type\": \"smart_light\",\n      \"status\": \"inactive\"\n    }\n  ],\n  \"userProfiles\": [\n    {\n      \"userId\": \"user_123\",\n      \"name\": \"Alice\",\n      \"roles\": [\"home_owner\", \"admin\"]\n    },\n    {\n      \"userId\": \"user_456\",\n      \"name\": \"Bob\",\n      \"roles\": [\"guest\"]\n    }\n  ],\n  \"automationRules\": {\n    \"rules\": [\n      {\n        \"ruleId\": \"rule_001\",\n        \"description\": \"Turn on lights when motion detected\",\n        \"conditions\": [\"motion_detected\"],\n        \"actions\": [\"activate_light\"]\n      },\n      {\n        \"ruleId\": \"rule_002\",\n        \"description\": \"Turn off thermostat if window open\",\n        \"conditions\": [\"window_open\"],\n        \"actions\": [\"deactivate_thermostat\"]\n      }\n    ],\n    \"lastUpdated\": \"2023-10-10T10:00:00Z\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates the entire system configuration.\n• A child element within the root must represent the system identifier, capturing the \"systemId\" value.\n• The XML must include a section for \"systemInfo\" consisting of child elements for \"name\", \"version\", and \"manufacturer\", each containing their corresponding values.\n• A \"devices\" section must be present, containing nested elements for each device. Each device element must include sub-elements for \"deviceId\", \"type\", and \"status\".\n• A \"userProfiles\" section is required, with nested elements for each user profile. Each profile must include sub-elements for \"userId\" and \"name\", and a nested list element for \"roles\" with each role represented as an individual element.\n• The automation rules must be encapsulated within an \"automationRules\" section, which includes a \"rules\" sub-section. Each rule within this section must have child elements for \"ruleId\", \"description\", conditions (as a list of elements), and actions (as a list of elements).\n• The \"automationRules\" section must also include a \"lastUpdated\" element storing the time stamp provided in the JSON.",
            "task_id": "051729",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[systemId]",
                "root[systemInfo][name]",
                "root[systemInfo][version]",
                "root[systemInfo][manufacturer]",
                "root[devices]",
                "root[devices][device][deviceId]",
                "root[devices][device][type]",
                "root[devices][device][status]",
                "root[userProfiles]",
                "root[userProfiles][profile][userId]",
                "root[userProfiles][profile][name]",
                "root[userProfiles][profile][roles]",
                "root[userProfiles][profile][roles][role]",
                "root[automationRules]",
                "root[automationRules][rules]",
                "root[automationRules][rules][rule][ruleId]",
                "root[automationRules][rules][rule][description]",
                "root[automationRules][rules][rule][conditions]",
                "root[automationRules][rules][rule][actions]",
                "root[automationRules][lastUpdated]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051729_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"systemId\": \"smart_home_controller_01\",\n  \"systemInfo\": {\n    \"name\": \"Smart Home Controller\",\n    \"version\": \"1.2.3\",\n    \"manufacturer\": \"AlphaTech\"\n  },\n  \"devices\": [\n    {\n      \"deviceId\": \"sensor_001\",\n      \"type\": \"temperature_sensor\",\n      \"status\": \"active\"\n    },\n    {\n      \"deviceId\": \"actuator_002\",\n      \"type\": \"smart_light\",\n      \"status\": \"inactive\"\n    }\n  ],\n  \"userProfiles\": [\n    {\n      \"userId\": \"user_123\",\n      \"name\": \"Alice\",\n      \"roles\": [\"home_owner\", \"admin\"]\n    },\n    {\n      \"userId\": \"user_456\",\n      \"name\": \"Bob\",\n      \"roles\": [\"guest\"]\n    }\n  ],\n  \"automationRules\": {\n    \"rules\": [\n      {\n        \"ruleId\": \"rule_001\",\n        \"description\": \"Turn on lights when motion detected\",\n        \"conditions\": [\"motion_detected\"],\n        \"actions\": [\"activate_light\"]\n      },\n      {\n        \"ruleId\": \"rule_002\",\n        \"description\": \"Turn off thermostat if window open\",\n        \"conditions\": [\"window_open\"],\n        \"actions\": [\"deactivate_thermostat\"]\n      }\n    ],\n    \"lastUpdated\": \"2023-10-10T10:00:00Z\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051729_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[systemId]",
                                "root[systemInfo][name]",
                                "root[systemInfo][version]",
                                "root[systemInfo][manufacturer]",
                                "root[devices]",
                                "root[devices][device][deviceId]",
                                "root[devices][device][type]",
                                "root[devices][device][status]",
                                "root[userProfiles]",
                                "root[userProfiles][profile][userId]",
                                "root[userProfiles][profile][name]",
                                "root[userProfiles][profile][roles]",
                                "root[userProfiles][profile][roles][role]",
                                "root[automationRules]",
                                "root[automationRules][rules]",
                                "root[automationRules][rules][rule][ruleId]",
                                "root[automationRules][rules][rule][description]",
                                "root[automationRules][rules][rule][conditions]",
                                "root[automationRules][rules][rule][actions]",
                                "root[automationRules][lastUpdated]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"libraryInfo\": {\n    \"name\": \"City Central Library\",\n    \"address\": \"123 Main Street\",\n    \"establishedYear\": 1950\n  },\n  \"books\": [\n    {\n      \"bookId\": \"B001\",\n      \"title\": \"The Great Adventure\",\n      \"author\": \"Jane Doe\",\n      \"publishedYear\": 1998,\n      \"genres\": [\"Adventure\", \"Fiction\"]\n    },\n    {\n      \"bookId\": \"B002\",\n      \"title\": \"Mysteries Uncovered\",\n      \"author\": \"John Smith\",\n      \"publishedYear\": 2005,\n      \"genres\": [\"Mystery\", \"Thriller\"]\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M1001\",\n      \"firstName\": \"Alice\",\n      \"lastName\": \"Johnson\",\n      \"membershipDate\": \"2020-06-15\"\n    },\n    {\n      \"memberId\": \"M1002\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Lee\",\n      \"membershipDate\": \"2019-11-20\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"staffId\": \"S001\",\n      \"name\": \"Emily Carter\",\n      \"role\": \"Librarian\"\n    },\n    {\n      \"staffId\": \"S002\",\n      \"name\": \"Michael Brown\",\n      \"role\": \"Assistant Librarian\"\n    }\n  ],\n  \"operationalHours\": {\n    \"Monday\": \"9:00-17:00\",\n    \"Tuesday\": \"9:00-17:00\",\n    \"Wednesday\": \"9:00-17:00\",\n    \"Thursday\": \"9:00-17:00\",\n    \"Friday\": \"9:00-17:00\",\n    \"Saturday\": \"10:00-14:00\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>",
            "feature_requirements": "• The converted output must be structured as an XML document with a single root element that encapsulates all the other elements.  \n• There must be an element corresponding to \"libraryInfo\" that contains child elements for \"name\", \"address\", and \"establishedYear\", each representing the respective values.  \n• The XML must include a \"books\" section that contains multiple entries (one per book), where each book entry has child elements for \"bookId\", \"title\", \"author\", \"publishedYear\", and a nested structure for \"genres\" with individual elements for each genre.  \n• There must be a \"members\" section that includes multiple entries (one per member), each entry containing child elements for \"memberId\", \"firstName\", \"lastName\", and \"membershipDate\".  \n• The output must contain a \"staff\" section with multiple entries (one per staff member), where each entry includes child elements for \"staffId\", \"name\", and \"role\".  \n• An \"operationalHours\" section must be present, containing child elements for each day of the week (e.g., \"Monday\", \"Tuesday\", etc.) with text values representing the operational times for each day.",
            "task_id": "051730",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[libraryInfo]",
                "root[libraryInfo][name]",
                "root[libraryInfo][address]",
                "root[libraryInfo][establishedYear]",
                "root[books]",
                "root[books][book]",
                "root[books][book][bookId]",
                "root[books][book][title]",
                "root[books][book][author]",
                "root[books][book][publishedYear]",
                "root[books][book][genres]",
                "root[books][book][genres][genre]",
                "root[members]",
                "root[members][member]",
                "root[members][member][memberId]",
                "root[members][member][firstName]",
                "root[members][member][lastName]",
                "root[members][member][membershipDate]",
                "root[staff]",
                "root[staff][staffMember]",
                "root[staff][staffMember][staffId]",
                "root[staff][staffMember][name]",
                "root[staff][staffMember][role]",
                "root[operationalHours]",
                "root[operationalHours][Monday]",
                "root[operationalHours][Tuesday]",
                "root[operationalHours][Wednesday]",
                "root[operationalHours][Thursday]",
                "root[operationalHours][Friday]",
                "root[operationalHours][Saturday]",
                "root[operationalHours][Sunday]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051730_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"libraryInfo\": {\n    \"name\": \"City Central Library\",\n    \"address\": \"123 Main Street\",\n    \"establishedYear\": 1950\n  },\n  \"books\": [\n    {\n      \"bookId\": \"B001\",\n      \"title\": \"The Great Adventure\",\n      \"author\": \"Jane Doe\",\n      \"publishedYear\": 1998,\n      \"genres\": [\"Adventure\", \"Fiction\"]\n    },\n    {\n      \"bookId\": \"B002\",\n      \"title\": \"Mysteries Uncovered\",\n      \"author\": \"John Smith\",\n      \"publishedYear\": 2005,\n      \"genres\": [\"Mystery\", \"Thriller\"]\n    }\n  ],\n  \"members\": [\n    {\n      \"memberId\": \"M1001\",\n      \"firstName\": \"Alice\",\n      \"lastName\": \"Johnson\",\n      \"membershipDate\": \"2020-06-15\"\n    },\n    {\n      \"memberId\": \"M1002\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Lee\",\n      \"membershipDate\": \"2019-11-20\"\n    }\n  ],\n  \"staff\": [\n    {\n      \"staffId\": \"S001\",\n      \"name\": \"Emily Carter\",\n      \"role\": \"Librarian\"\n    },\n    {\n      \"staffId\": \"S002\",\n      \"name\": \"Michael Brown\",\n      \"role\": \"Assistant Librarian\"\n    }\n  ],\n  \"operationalHours\": {\n    \"Monday\": \"9:00-17:00\",\n    \"Tuesday\": \"9:00-17:00\",\n    \"Wednesday\": \"9:00-17:00\",\n    \"Thursday\": \"9:00-17:00\",\n    \"Friday\": \"9:00-17:00\",\n    \"Saturday\": \"10:00-14:00\",\n    \"Sunday\": \"Closed\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051730_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[libraryInfo]",
                                "root[libraryInfo][name]",
                                "root[libraryInfo][address]",
                                "root[libraryInfo][establishedYear]",
                                "root[books]",
                                "root[books][book]",
                                "root[books][book][bookId]",
                                "root[books][book][title]",
                                "root[books][book][author]",
                                "root[books][book][publishedYear]",
                                "root[books][book][genres]",
                                "root[books][book][genres][genre]",
                                "root[members]",
                                "root[members][member]",
                                "root[members][member][memberId]",
                                "root[members][member][firstName]",
                                "root[members][member][lastName]",
                                "root[members][member][membershipDate]",
                                "root[staff]",
                                "root[staff][staffMember]",
                                "root[staff][staffMember][staffId]",
                                "root[staff][staffMember][name]",
                                "root[staff][staffMember][role]",
                                "root[operationalHours]",
                                "root[operationalHours][Monday]",
                                "root[operationalHours][Tuesday]",
                                "root[operationalHours][Wednesday]",
                                "root[operationalHours][Thursday]",
                                "root[operationalHours][Friday]",
                                "root[operationalHours][Saturday]",
                                "root[operationalHours][Sunday]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"companyName\": \"Tech Innovators Inc\",\n  \"departments\": [\n    {\n      \"name\": \"Research and Development\",\n      \"manager\": \"Dr. Emma Wells\",\n      \"budget\": 500000\n    },\n    {\n      \"name\": \"Marketing\",\n      \"manager\": \"Mr. John Doe\",\n      \"budget\": 300000\n    }\n  ],\n  \"employees\": [\n    {\n      \"id\": \"E001\",\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\",\n      \"skills\": [\"Python\", \"JavaScript\", \"SQL\"]\n    },\n    {\n      \"id\": \"E002\",\n      \"name\": \"Bob Smith\",\n      \"role\": \"Product Manager\",\n      \"skills\": [\"Agile\", \"Scrum\", \"UX Design\"]\n    },\n    {\n      \"id\": \"E003\",\n      \"name\": \"Cathy Brown\",\n      \"role\": \"Data Analyst\",\n      \"skills\": [\"R\", \"Python\", \"Data Visualization\"]\n    }\n  ],\n  \"projects\": [\n    {\n      \"projectId\": \"P001\",\n      \"title\": \"Next-Gen Platform\",\n      \"status\": \"Active\",\n      \"team\": [\"Alice Johnson\", \"Cathy Brown\"]\n    },\n    {\n      \"projectId\": \"P002\",\n      \"title\": \"Market Expansion\",\n      \"status\": \"Planning\",\n      \"team\": [\"Bob Smith\"]\n    }\n  ],\n  \"metadata\": {\n    \"version\": \"1.2.3\",\n    \"lastUpdated\": \"2023-10-05\",\n    \"active\": true\n  }\n}\n</code>",
            "feature_requirements": "• The output must be structured with a single root element that encapsulates all converted data from the JSON.  \n• The XML must contain an element representing \"companyName\" with its text content set to \"Tech Innovators Inc\".  \n• There must be a section (element) for \"departments\" that includes a separate sub-element for each department; each department element must include child elements for \"name\", \"manager\", and \"budget\".  \n• An \"employees\" section must be present containing an element for each employee; within each employee element there should be child elements for \"id\", \"name\", and \"role\", as well as a nested list element for \"skills\" with individual skill entries.  \n• A \"projects\" section must be included, with each project represented as an element containing child elements for \"projectId\", \"title\", and \"status\", along with a nested element for \"team\" that includes entries for each team member.  \n• A \"metadata\" section must be present with child elements for \"version\", \"lastUpdated\", and \"active\", mirroring the JSON metadata fields.  \n• All JSON arrays (departments, employees, projects, skills, team) must be represented as multiple repeating XML elements within their corresponding parent sections.  \n• The converted XML must preserve the hierarchical structure of the original JSON, ensuring that each key and its value are converted into matching XML elements with appropriate nesting.",
            "task_id": "051731",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[companyName]",
                "root[departments]",
                "root[departments][department][name]",
                "root[departments][department][manager]",
                "root[departments][department][budget]",
                "root[employees]",
                "root[employees][employee][id]",
                "root[employees][employee][name]",
                "root[employees][employee][role]",
                "root[employees][employee][skills]",
                "root[employees][employee][skills][skill]",
                "root[projects]",
                "root[projects][project][projectId]",
                "root[projects][project][title]",
                "root[projects][project][status]",
                "root[projects][project][team]",
                "root[projects][project][team][member]",
                "root[metadata]",
                "root[metadata][version]",
                "root[metadata][lastUpdated]",
                "root[metadata][active]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051731_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"companyName\": \"Tech Innovators Inc\",\n  \"departments\": [\n    {\n      \"name\": \"Research and Development\",\n      \"manager\": \"Dr. Emma Wells\",\n      \"budget\": 500000\n    },\n    {\n      \"name\": \"Marketing\",\n      \"manager\": \"Mr. John Doe\",\n      \"budget\": 300000\n    }\n  ],\n  \"employees\": [\n    {\n      \"id\": \"E001\",\n      \"name\": \"Alice Johnson\",\n      \"role\": \"Software Engineer\",\n      \"skills\": [\"Python\", \"JavaScript\", \"SQL\"]\n    },\n    {\n      \"id\": \"E002\",\n      \"name\": \"Bob Smith\",\n      \"role\": \"Product Manager\",\n      \"skills\": [\"Agile\", \"Scrum\", \"UX Design\"]\n    },\n    {\n      \"id\": \"E003\",\n      \"name\": \"Cathy Brown\",\n      \"role\": \"Data Analyst\",\n      \"skills\": [\"R\", \"Python\", \"Data Visualization\"]\n    }\n  ],\n  \"projects\": [\n    {\n      \"projectId\": \"P001\",\n      \"title\": \"Next-Gen Platform\",\n      \"status\": \"Active\",\n      \"team\": [\"Alice Johnson\", \"Cathy Brown\"]\n    },\n    {\n      \"projectId\": \"P002\",\n      \"title\": \"Market Expansion\",\n      \"status\": \"Planning\",\n      \"team\": [\"Bob Smith\"]\n    }\n  ],\n  \"metadata\": {\n    \"version\": \"1.2.3\",\n    \"lastUpdated\": \"2023-10-05\",\n    \"active\": true\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051731_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[companyName]",
                                "root[departments]",
                                "root[departments][department][name]",
                                "root[departments][department][manager]",
                                "root[departments][department][budget]",
                                "root[employees]",
                                "root[employees][employee][id]",
                                "root[employees][employee][name]",
                                "root[employees][employee][role]",
                                "root[employees][employee][skills]",
                                "root[employees][employee][skills][skill]",
                                "root[projects]",
                                "root[projects][project][projectId]",
                                "root[projects][project][title]",
                                "root[projects][project][status]",
                                "root[projects][project][team]",
                                "root[projects][project][team][member]",
                                "root[metadata]",
                                "root[metadata][version]",
                                "root[metadata][lastUpdated]",
                                "root[metadata][active]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"id\": \"abc123\",\n    \"version\": \"1.0\",\n    \"timestamp\": \"2023-10-03T15:45:00Z\"\n  },\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"role\": \"admin\"\n  },\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"notifications\": true,\n    \"languages\": [\n      \"en\",\n      \"es\",\n      \"fr\"\n    ]\n  },\n  \"history\": [\n    {\n      \"action\": \"login\",\n      \"timestamp\": \"2023-10-03T15:30:00Z\"\n    },\n    {\n      \"action\": \"update_profile\",\n      \"timestamp\": \"2023-10-03T15:35:00Z\"\n    }\n  ],\n  \"items\": [\n    {\n      \"item_id\": \"item001\",\n      \"description\": \"Sample item\",\n      \"quantity\": 5,\n      \"price\": 9.99\n    },\n    {\n      \"item_id\": \"item002\",\n      \"description\": \"Another item\",\n      \"quantity\": 3,\n      \"price\": 19.99\n    }\n  ]\n}\n</code>",
            "feature_requirements": "- The XML output must have a single root element that encapsulates all the converted sections.\n- The XML must contain a metadata section with child elements for id, version, and timestamp, each carrying the corresponding values from the JSON.\n- The XML must include a user section with child elements for name, email, and role, maintaining the mapping of keys to values.\n- The XML must include a settings section that has separate child elements for theme and notifications, along with a languages list that contains individual elements for each language code provided.\n- The XML must contain a history section that holds a list of history records, with each record having child elements for action and timestamp in the same order as in the JSON array.\n- The XML must include an items section that holds a list of item records, and each item record must have child elements for item_id, description, quantity, and price.\n- The structure of the XML must preserve the hierarchical relationships and ordering present in the original JSON data.\n- All data values, including date-time strings and numerical values, must be accurately represented as the text content of the corresponding XML elements.",
            "task_id": "051732",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[metadata]",
                "root[metadata][id]",
                "root[metadata][version]",
                "root[metadata][timestamp]",
                "root[user]",
                "root[user][name]",
                "root[user][email]",
                "root[user][role]",
                "root[settings]",
                "root[settings][theme]",
                "root[settings][notifications]",
                "root[settings][languages]",
                "root[settings][languages][language]",
                "root[history]",
                "root[history][record]",
                "root[history][record][action]",
                "root[history][record][timestamp]",
                "root[items]",
                "root[items][record]",
                "root[items][record][item_id]",
                "root[items][record][description]",
                "root[items][record][quantity]",
                "root[items][record][price]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051732_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"metadata\": {\n    \"id\": \"abc123\",\n    \"version\": \"1.0\",\n    \"timestamp\": \"2023-10-03T15:45:00Z\"\n  },\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"role\": \"admin\"\n  },\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"notifications\": true,\n    \"languages\": [\n      \"en\",\n      \"es\",\n      \"fr\"\n    ]\n  },\n  \"history\": [\n    {\n      \"action\": \"login\",\n      \"timestamp\": \"2023-10-03T15:30:00Z\"\n    },\n    {\n      \"action\": \"update_profile\",\n      \"timestamp\": \"2023-10-03T15:35:00Z\"\n    }\n  ],\n  \"items\": [\n    {\n      \"item_id\": \"item001\",\n      \"description\": \"Sample item\",\n      \"quantity\": 5,\n      \"price\": 9.99\n    },\n    {\n      \"item_id\": \"item002\",\n      \"description\": \"Another item\",\n      \"quantity\": 3,\n      \"price\": 19.99\n    }\n  ]\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051732_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[metadata]",
                                "root[metadata][id]",
                                "root[metadata][version]",
                                "root[metadata][timestamp]",
                                "root[user]",
                                "root[user][name]",
                                "root[user][email]",
                                "root[user][role]",
                                "root[settings]",
                                "root[settings][theme]",
                                "root[settings][notifications]",
                                "root[settings][languages]",
                                "root[settings][languages][language]",
                                "root[history]",
                                "root[history][record]",
                                "root[history][record][action]",
                                "root[history][record][timestamp]",
                                "root[items]",
                                "root[items][record]",
                                "root[items][record][item_id]",
                                "root[items][record][description]",
                                "root[items][record][quantity]",
                                "root[items][record][price]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"applicationName\": \"TaskFlow Manager\",\n  \"version\": \"1.2.3\",\n  \"features\": [\n    \"scheduling\",\n    \"analytics\",\n    \"reporting\"\n  ],\n  \"users\": [\n    {\n      \"id\": 1,\n      \"username\": \"alice\",\n      \"role\": \"admin\",\n      \"active\": true\n    },\n    {\n      \"id\": 2,\n      \"username\": \"bob\",\n      \"role\": \"user\",\n      \"active\": false\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"autoSync\": true,\n    \"syncInterval\": 15,\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false\n    }\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must contain a single root element that encapsulates the entire document corresponding to the JSON structure.  \n• The output must include child elements corresponding to all top-level JSON keys: applicationName, version, features, users, and settings.  \n• The features element must represent a list of items with individual elements (e.g., a repeated \"feature\" element) for each array value (scheduling, analytics, reporting).  \n• The users element must contain multiple child elements (one per user), each with nested elements corresponding to id, username, role, and active.  \n• The settings element must include nested child elements for theme, autoSync, syncInterval, and notifications, preserving the JSON hierarchy.  \n• The notifications element within settings must include individual child elements for email and sms that reflect their Boolean values.  \n• The conversion must preserve the data types (e.g., Booleans, numbers, text) as text values within the XML elements so that the original information is verifiable.  \n• Each XML element's content must be directly mapped from its corresponding JSON key-value association to ensure an accurate representation of the data structure.",
            "task_id": "051733",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[applicationName]",
                "root[version]",
                "root[features]",
                "root[features][feature]",
                "root[users]",
                "root[users][user]",
                "root[users][user][id]",
                "root[users][user][username]",
                "root[users][user][role]",
                "root[users][user][active]",
                "root[settings]",
                "root[settings][theme]",
                "root[settings][autoSync]",
                "root[settings][syncInterval]",
                "root[settings][notifications]",
                "root[settings][notifications][email]",
                "root[settings][notifications][sms]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051733_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"applicationName\": \"TaskFlow Manager\",\n  \"version\": \"1.2.3\",\n  \"features\": [\n    \"scheduling\",\n    \"analytics\",\n    \"reporting\"\n  ],\n  \"users\": [\n    {\n      \"id\": 1,\n      \"username\": \"alice\",\n      \"role\": \"admin\",\n      \"active\": true\n    },\n    {\n      \"id\": 2,\n      \"username\": \"bob\",\n      \"role\": \"user\",\n      \"active\": false\n    }\n  ],\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"autoSync\": true,\n    \"syncInterval\": 15,\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false\n    }\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051733_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[applicationName]",
                                "root[version]",
                                "root[features]",
                                "root[features][feature]",
                                "root[users]",
                                "root[users][user]",
                                "root[users][user][id]",
                                "root[users][user][username]",
                                "root[users][user][role]",
                                "root[users][user][active]",
                                "root[settings]",
                                "root[settings][theme]",
                                "root[settings][autoSync]",
                                "root[settings][syncInterval]",
                                "root[settings][notifications]",
                                "root[settings][notifications][email]",
                                "root[settings][notifications][sms]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 101,\n    \"username\": \"jane_doe\",\n    \"email\": \"jane.doe@example.com\"\n  },\n  \"orders\": [\n    {\n      \"orderId\": \"ORD001\",\n      \"date\": \"2023-10-01\",\n      \"total\": 250.50,\n      \"items\": [\n        {\n          \"productId\": \"P1001\",\n          \"name\": \"Wireless Mouse\",\n          \"quantity\": 1,\n          \"price\": 50.50\n        },\n        {\n          \"productId\": \"P1002\",\n          \"name\": \"Keyboard\",\n          \"quantity\": 1,\n          \"price\": 200.00\n        }\n      ]\n    },\n    {\n      \"orderId\": \"ORD002\",\n      \"date\": \"2023-10-05\",\n      \"total\": 75.00,\n      \"items\": [\n        {\n          \"productId\": \"P1003\",\n          \"name\": \"USB-C Hub\",\n          \"quantity\": 1,\n          \"price\": 75.00\n        }\n      ]\n    }\n  ],\n  \"settings\": {\n    \"notifications\": true,\n    \"newsletterSubscribed\": false,\n    \"theme\": \"dark\"\n  },\n  \"metadata\": {\n    \"createdAt\": \"2023-09-30T08:30:00Z\",\n    \"updatedAt\": \"2023-10-06T14:45:00Z\"\n  },\n  \"preferences\": {\n    \"language\": \"en-US\",\n    \"currency\": \"USD\",\n    \"displayDensity\": \"compact\"\n  }\n}\n</code>",
            "feature_requirements": "• The XML output must have a single root element that encapsulates all converted data from the JSON.\n\n• The XML must include a \"user\" element that contains child elements for \"id\", \"username\", and \"email\", with their text values coming directly from the JSON.\n\n• The XML must include an \"orders\" element that represents a list, with each order represented by its own \"order\" element.\n\n• Each \"order\" element must contain child elements for \"orderId\", \"date\", and \"total\", reflecting the corresponding JSON values.\n\n• Each \"order\" element must contain an \"items\" element that represents a list, with each item represented by its own \"item\" element.\n\n• Each \"item\" element must include child elements for \"productId\", \"name\", \"quantity\", and \"price\", with their values taken directly from the JSON.\n\n• The XML must include a \"settings\" element that contains child elements for \"notifications\", \"newsletterSubscribed\", and \"theme\", preserving the JSON data.\n\n• The XML must include a \"metadata\" element that contains child elements for \"createdAt\" and \"updatedAt\" with text values matching the JSON.\n\n• The XML must include a \"preferences\" element that contains child elements for \"language\", \"currency\", and \"displayDensity\" as specified in the JSON.",
            "task_id": "051734",
            "task_name": "Convert JSON to XML",
            "input_type": "JSON",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[user][id]",
                "root[user][username]",
                "root[user][email]",
                "root[orders][order][orderId]",
                "root[orders][order][date]",
                "root[orders][order][total]",
                "root[orders][order][items][item][productId]",
                "root[orders][order][items][item][name]",
                "root[orders][order][items][item][quantity]",
                "root[orders][order][items][item][price]",
                "root[settings][notifications]",
                "root[settings][newsletterSubscribed]",
                "root[settings][theme]",
                "root[metadata][createdAt]",
                "root[metadata][updatedAt]",
                "root[preferences][language]",
                "root[preferences][currency]",
                "root[preferences][displayDensity]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "051734_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following JSON code to XML code.\n\n<code>\n{\n  \"user\": {\n    \"id\": 101,\n    \"username\": \"jane_doe\",\n    \"email\": \"jane.doe@example.com\"\n  },\n  \"orders\": [\n    {\n      \"orderId\": \"ORD001\",\n      \"date\": \"2023-10-01\",\n      \"total\": 250.50,\n      \"items\": [\n        {\n          \"productId\": \"P1001\",\n          \"name\": \"Wireless Mouse\",\n          \"quantity\": 1,\n          \"price\": 50.50\n        },\n        {\n          \"productId\": \"P1002\",\n          \"name\": \"Keyboard\",\n          \"quantity\": 1,\n          \"price\": 200.00\n        }\n      ]\n    },\n    {\n      \"orderId\": \"ORD002\",\n      \"date\": \"2023-10-05\",\n      \"total\": 75.00,\n      \"items\": [\n        {\n          \"productId\": \"P1003\",\n          \"name\": \"USB-C Hub\",\n          \"quantity\": 1,\n          \"price\": 75.00\n        }\n      ]\n    }\n  ],\n  \"settings\": {\n    \"notifications\": true,\n    \"newsletterSubscribed\": false,\n    \"theme\": \"dark\"\n  },\n  \"metadata\": {\n    \"createdAt\": \"2023-09-30T08:30:00Z\",\n    \"updatedAt\": \"2023-10-06T14:45:00Z\"\n  },\n  \"preferences\": {\n    \"language\": \"en-US\",\n    \"currency\": \"USD\",\n    \"displayDensity\": \"compact\"\n  }\n}\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "051734_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[user][id]",
                                "root[user][username]",
                                "root[user][email]",
                                "root[orders][order][orderId]",
                                "root[orders][order][date]",
                                "root[orders][order][total]",
                                "root[orders][order][items][item][productId]",
                                "root[orders][order][items][item][name]",
                                "root[orders][order][items][item][quantity]",
                                "root[orders][order][items][item][price]",
                                "root[settings][notifications]",
                                "root[settings][newsletterSubscribed]",
                                "root[settings][theme]",
                                "root[metadata][createdAt]",
                                "root[metadata][updatedAt]",
                                "root[preferences][language]",
                                "root[preferences][currency]",
                                "root[preferences][displayDensity]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"ExampleApp\"\n  version: \"1.2.3\"\n  features:\n    - search\n    - recommendations\n    - notifications\n  maxConnections: 500\n\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  username: \"dbuser\"\n  password: \"securepassword\"\n  schema: \"public\"\n  options:\n    pooling: true\n    timeout: 30\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - admin\n      - editor\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - user\n  - id: 3\n    name: \"Charlie\"\n    roles:\n      - user\n      - contributor\n\nlogging:\n  level: \"debug\"\n  outputs:\n    - console\n    - file\n  file:\n    path: \"/var/log/exampleapp.log\"\n    maxSizeMB: 100\n\nmeta:\n  created: \"2023-10-05T12:00:00Z\"\n  updated: \"2023-10-06T08:30:00Z\"\n  environment: \"development\"\n</code>",
            "feature_requirements": "• The JSON must include a top-level object with keys for \"app\", \"database\", \"users\", \"logging\", and \"meta\" that mirror the YAML structure.  \n• The \"app\" object must contain a \"name\" (string), \"version\" (string), \"features\" (an array of strings), and \"maxConnections\" (a number).  \n• The \"database\" object must include \"host\", \"username\", \"password\", and \"schema\" as strings; \"port\" as a number; and \"options\" as an object containing \"pooling\" (boolean) and \"timeout\" (number).  \n• The \"users\" key must map to an array of objects where each object includes an \"id\" (number), \"name\" (string), and \"roles\" (an array of strings).  \n• The \"logging\" object must contain a \"level\" (string), \"outputs\" (an array containing strings), and a \"file\" object that includes \"path\" (string) and \"maxSizeMB\" (number).  \n• The \"meta\" object must consist of \"created\" and \"updated\" as timestamp strings in ISO 8601 format, along with \"environment\" as a string.  \n• All data types in the JSON output (strings, numbers, booleans, and arrays) must exactly match those of the original YAML input.",
            "task_id": "180500",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app",
                "app[name]",
                "app[version]",
                "app[features]",
                "app[maxConnections]",
                "database",
                "database[host]",
                "database[username]",
                "database[password]",
                "database[schema]",
                "database[port]",
                "database[options]",
                "database[options][pooling]",
                "database[options][timeout]",
                "users",
                "users[][id]",
                "users[][name]",
                "users[][roles]",
                "logging",
                "logging[level]",
                "logging[outputs]",
                "logging[file]",
                "logging[file][path]",
                "logging[file][maxSizeMB]",
                "meta",
                "meta[created]",
                "meta[updated]",
                "meta[environment]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180500_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"ExampleApp\"\n  version: \"1.2.3\"\n  features:\n    - search\n    - recommendations\n    - notifications\n  maxConnections: 500\n\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  username: \"dbuser\"\n  password: \"securepassword\"\n  schema: \"public\"\n  options:\n    pooling: true\n    timeout: 30\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - admin\n      - editor\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - user\n  - id: 3\n    name: \"Charlie\"\n    roles:\n      - user\n      - contributor\n\nlogging:\n  level: \"debug\"\n  outputs:\n    - console\n    - file\n  file:\n    path: \"/var/log/exampleapp.log\"\n    maxSizeMB: 100\n\nmeta:\n  created: \"2023-10-05T12:00:00Z\"\n  updated: \"2023-10-06T08:30:00Z\"\n  environment: \"development\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180500_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app",
                                "app[name]",
                                "app[version]",
                                "app[features]",
                                "app[maxConnections]",
                                "database",
                                "database[host]",
                                "database[username]",
                                "database[password]",
                                "database[schema]",
                                "database[port]",
                                "database[options]",
                                "database[options][pooling]",
                                "database[options][timeout]",
                                "users",
                                "users[][id]",
                                "users[][name]",
                                "users[][roles]",
                                "logging",
                                "logging[level]",
                                "logging[outputs]",
                                "logging[file]",
                                "logging[file][path]",
                                "logging[file][maxSizeMB]",
                                "meta",
                                "meta[created]",
                                "meta[updated]",
                                "meta[environment]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napplication:\n  name: \"Task Manager\"\n  version: \"2.1.3\"\n  environment: \"production\"\n\ndatabase:\n  type: \"postgresql\"\n  host: \"db.example.com\"\n  port: 5432\n  credentials:\n    user: \"admin\"\n    password: \"s3cr3t\"\n\nfeatures:\n  authentication: true\n  caching: true\n  logging: true\n\nservers:\n  - name: \"server1\"\n    ip: \"192.168.0.101\"\n    roles:\n      - \"web\"\n      - \"api\"\n  - name: \"server2\"\n    ip: \"192.168.0.102\"\n    roles:\n      - \"worker\"\n      - \"queue\"\n\nusers:\n  - id: 1\n    username: \"alice\"\n    roles:\n      - \"admin\"\n      - \"user\"\n  - id: 2\n    username: \"bob\"\n    roles:\n      - \"user\"\n  - id: 3\n    username: \"carol\"\n    roles:\n      - \"moderator\"\n</code>",
            "feature_requirements": "• The output must contain a key \"application\" as an object with keys \"name\", \"version\", and \"environment\", each with corresponding string values.\n• The output must include a key \"database\" as an object containing keys \"type\", \"host\", \"port\" (as a number), and \"credentials\", where \"credentials\" is an object with string keys \"user\" and \"password\".\n• The output must contain a key \"features\" represented as an object with boolean keys: \"authentication\", \"caching\", and \"logging\".\n• The output must include a key \"servers\" represented as an array of objects, where each object contains a \"name\" (string), \"ip\" (string), and \"roles\" (an array of strings).\n• The output must contain a key \"users\" represented as an array of objects, where each object contains an \"id\" (number), \"username\" (string), and \"roles\" (an array of strings).",
            "task_id": "180501",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "application",
                "application[name]",
                "application[version]",
                "application[environment]",
                "database",
                "database[type]",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][user]",
                "database[credentials][password]",
                "features",
                "features[authentication]",
                "features[caching]",
                "features[logging]",
                "servers",
                "servers[][name]",
                "servers[][ip]",
                "servers[][roles]",
                "users",
                "users[][id]",
                "users[][username]",
                "users[][roles]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180501_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napplication:\n  name: \"Task Manager\"\n  version: \"2.1.3\"\n  environment: \"production\"\n\ndatabase:\n  type: \"postgresql\"\n  host: \"db.example.com\"\n  port: 5432\n  credentials:\n    user: \"admin\"\n    password: \"s3cr3t\"\n\nfeatures:\n  authentication: true\n  caching: true\n  logging: true\n\nservers:\n  - name: \"server1\"\n    ip: \"192.168.0.101\"\n    roles:\n      - \"web\"\n      - \"api\"\n  - name: \"server2\"\n    ip: \"192.168.0.102\"\n    roles:\n      - \"worker\"\n      - \"queue\"\n\nusers:\n  - id: 1\n    username: \"alice\"\n    roles:\n      - \"admin\"\n      - \"user\"\n  - id: 2\n    username: \"bob\"\n    roles:\n      - \"user\"\n  - id: 3\n    username: \"carol\"\n    roles:\n      - \"moderator\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180501_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "application",
                                "application[name]",
                                "application[version]",
                                "application[environment]",
                                "database",
                                "database[type]",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][user]",
                                "database[credentials][password]",
                                "features",
                                "features[authentication]",
                                "features[caching]",
                                "features[logging]",
                                "servers",
                                "servers[][name]",
                                "servers[][ip]",
                                "servers[][roles]",
                                "users",
                                "users[][id]",
                                "users[][username]",
                                "users[][roles]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nsystem: Linux\nversion: \"1.0.2\"\nsettings:\n  logging: true\n  log_level: \"info\"\n  modules:\n    - authentication\n    - data_processing\n    - notifications\nusers:\n  - id: 101\n    name: Alice\n    roles:\n      - admin\n      - developer\n  - id: 102\n    name: Bob\n    roles:\n      - developer\n  - id: 103\n    name: Charlie\n    roles:\n      - tester\n      - support\nmetadata:\n  created: \"2023-10-15\"\n  updated: \"2023-10-17\"\nservices:\n  api:\n    endpoint: \"https://api.example.com\"\n    timeout: 30\n  worker:\n    count: 4\n    check_interval: 15\n</code>",
            "feature_requirements": "- The output must represent a complete JSON object containing the keys: \"system\", \"version\", \"settings\", \"users\", \"metadata\", and \"services\".\n- The \"system\" key must have a string value \"Linux\".\n- The \"version\" key must have a string value \"1.0.2\".\n- The \"settings\" key must be an object that includes:\n  - A boolean key \"logging\" set to true.\n  - A string key \"log_level\" with the value \"info\".\n  - A list key \"modules\" containing the strings \"authentication\", \"data_processing\", and \"notifications\" in that order.\n- The \"users\" key must be an array of objects, each containing:\n  - A numerical key \"id\" with values 101, 102, and 103 for the respective users.\n  - A string key \"name\" with values \"Alice\", \"Bob\", and \"Charlie\" respectively.\n  - A list key \"roles\" with the appropriate roles: for 101, the roles \"admin\" and \"developer\"; for 102, the role \"developer\"; for 103, the roles \"tester\" and \"support\".\n- The \"metadata\" key must be an object with:\n  - A string key \"created\" holding the value \"2023-10-15\".\n  - A string key \"updated\" holding the value \"2023-10-17\".\n- The \"services\" key must be an object containing:\n  - An \"api\" key that is an object with:\n    - A string key \"endpoint\" set to \"https://api.example.com\".\n    - A numerical key \"timeout\" set to 30.\n  - A \"worker\" key that is an object with:\n    - A numerical key \"count\" set to 4.\n    - A numerical key \"check_interval\" set to 15.",
            "task_id": "180502",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "system",
                "version",
                "settings",
                "settings[logging]",
                "settings[log_level]",
                "settings[modules]",
                "users",
                "users[0][id]",
                "users[0][name]",
                "users[0][roles]",
                "users[1][id]",
                "users[1][name]",
                "users[1][roles]",
                "users[2][id]",
                "users[2][name]",
                "users[2][roles]",
                "metadata",
                "metadata[created]",
                "metadata[updated]",
                "services",
                "services[api]",
                "services[api][endpoint]",
                "services[api][timeout]",
                "services[worker]",
                "services[worker][count]",
                "services[worker][check_interval]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180502_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nsystem: Linux\nversion: \"1.0.2\"\nsettings:\n  logging: true\n  log_level: \"info\"\n  modules:\n    - authentication\n    - data_processing\n    - notifications\nusers:\n  - id: 101\n    name: Alice\n    roles:\n      - admin\n      - developer\n  - id: 102\n    name: Bob\n    roles:\n      - developer\n  - id: 103\n    name: Charlie\n    roles:\n      - tester\n      - support\nmetadata:\n  created: \"2023-10-15\"\n  updated: \"2023-10-17\"\nservices:\n  api:\n    endpoint: \"https://api.example.com\"\n    timeout: 30\n  worker:\n    count: 4\n    check_interval: 15\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180502_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "system",
                                "version",
                                "settings",
                                "settings[logging]",
                                "settings[log_level]",
                                "settings[modules]",
                                "users",
                                "users[0][id]",
                                "users[0][name]",
                                "users[0][roles]",
                                "users[1][id]",
                                "users[1][name]",
                                "users[1][roles]",
                                "users[2][id]",
                                "users[2][name]",
                                "users[2][roles]",
                                "metadata",
                                "metadata[created]",
                                "metadata[updated]",
                                "services",
                                "services[api]",
                                "services[api][endpoint]",
                                "services[api][timeout]",
                                "services[worker]",
                                "services[worker][count]",
                                "services[worker][check_interval]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  title: \"System Conversion Module\"\n  version: \"2.4\"\n  author: \"Alex Rivera\"\n  description: \"YAML configuration for conversion tasks between structured data formats.\"\n\nsettings:\n  environment: \"production\"\n  debug: false\n  supportedFormats:\n    - JSON\n    - XML\n    - YAML\n  logging:\n    level: \"info\"\n    file: \"/var/log/conversion_module.log\"\n\nresources:\n  database:\n    host: \"db.example.com\"\n    port: 3306\n    name: \"conversion_db\"\n    credentials:\n      user: \"db_user\"\n      password: \"secure_password\"\n  cache:\n    type: \"memcached\"\n    servers:\n      - \"cache1.example.com:11211\"\n      - \"cache2.example.com:11211\"\n\ncontacts:\n  - name: \"Laura Chen\"\n    role: \"System Administrator\"\n    email: \"laura.chen@example.com\"\n  - name: \"Eric Thompson\"\n    role: \"Developer\"\n    email: \"eric.thompson@example.com\"\n</code>",
            "feature_requirements": "• The output must contain a top-level object with four keys: \"metadata\", \"settings\", \"resources\", and \"contacts\".  \n• Under \"metadata\", it must include keys \"title\", \"version\", \"author\", and \"description\" with corresponding string values.  \n• Under \"settings\", it must include keys \"environment\", \"debug\", \"supportedFormats\", and \"logging\"; \"supportedFormats\" must be a list of strings, and \"logging\" must include \"level\" and \"file\" as keys with string values.  \n• Under \"resources\", it must include a \"database\" object containing \"host\", \"port\", \"name\", and a \"credentials\" object with \"user\" and \"password\" keys; it must also include a \"cache\" object with \"type\" and a \"servers\" list where each element is a string.  \n• The \"contacts\" key must map to a list of objects, each containing \"name\", \"role\", and \"email\" keys with string values.",
            "task_id": "180503",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata",
                "metadata[title]",
                "metadata[version]",
                "metadata[author]",
                "metadata[description]",
                "settings",
                "settings[environment]",
                "settings[debug]",
                "settings[supportedFormats]",
                "settings[logging]",
                "settings[logging][level]",
                "settings[logging][file]",
                "resources",
                "resources[database]",
                "resources[database][host]",
                "resources[database][port]",
                "resources[database][name]",
                "resources[database][credentials]",
                "resources[database][credentials][user]",
                "resources[database][credentials][password]",
                "resources[cache]",
                "resources[cache][type]",
                "resources[cache][servers]",
                "contacts",
                "contacts[][name]",
                "contacts[][role]",
                "contacts[][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180503_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  title: \"System Conversion Module\"\n  version: \"2.4\"\n  author: \"Alex Rivera\"\n  description: \"YAML configuration for conversion tasks between structured data formats.\"\n\nsettings:\n  environment: \"production\"\n  debug: false\n  supportedFormats:\n    - JSON\n    - XML\n    - YAML\n  logging:\n    level: \"info\"\n    file: \"/var/log/conversion_module.log\"\n\nresources:\n  database:\n    host: \"db.example.com\"\n    port: 3306\n    name: \"conversion_db\"\n    credentials:\n      user: \"db_user\"\n      password: \"secure_password\"\n  cache:\n    type: \"memcached\"\n    servers:\n      - \"cache1.example.com:11211\"\n      - \"cache2.example.com:11211\"\n\ncontacts:\n  - name: \"Laura Chen\"\n    role: \"System Administrator\"\n    email: \"laura.chen@example.com\"\n  - name: \"Eric Thompson\"\n    role: \"Developer\"\n    email: \"eric.thompson@example.com\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180503_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata",
                                "metadata[title]",
                                "metadata[version]",
                                "metadata[author]",
                                "metadata[description]",
                                "settings",
                                "settings[environment]",
                                "settings[debug]",
                                "settings[supportedFormats]",
                                "settings[logging]",
                                "settings[logging][level]",
                                "settings[logging][file]",
                                "resources",
                                "resources[database]",
                                "resources[database][host]",
                                "resources[database][port]",
                                "resources[database][name]",
                                "resources[database][credentials]",
                                "resources[database][credentials][user]",
                                "resources[database][credentials][password]",
                                "resources[cache]",
                                "resources[cache][type]",
                                "resources[cache][servers]",
                                "contacts",
                                "contacts[][name]",
                                "contacts[][role]",
                                "contacts[][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_name: Coffee POS\nversion: \"3.0\"\ndatabase:\n  engine: PostgreSQL\n  host: localhost\n  port: 5432\n  credentials:\n    username: coffee_admin\n    password: securepassword\nmenus:\n  - category: Espresso\n    items:\n      - name: Single Espresso\n        price: 2.50\n      - name: Double Espresso\n        price: 3.50\n  - category: Milk Based\n    items:\n      - name: Cappuccino\n        price: 3.75\n      - name: Latte\n        price: 4.00\nstaff:\n  managers:\n    - name: Alice\n      email: alice@example.com\n    - name: Bob\n      email: bob@example.com\n  baristas:\n    - name: Charlie\n      email: charlie@example.com\n    - name: Dana\n      email: dana@example.com\n</code>",
            "feature_requirements": "• The output must include a top-level key \"app_name\" with the exact value \"Coffee POS\".  \n• The output must include a top-level key \"version\" with the exact string value \"3.0\".  \n• The output must include a top-level key \"database\" that contains nested keys \"engine\", \"host\", \"port\", and \"credentials\", where \"credentials\" itself contains \"username\" and \"password\" with their specified values (\"coffee_admin\" and \"securepassword\").  \n• The output must include a top-level key \"menus\" that holds an array of objects; each object in this array must include a \"category\" key and an \"items\" key, where \"items\" is an array of objects each containing \"name\" and \"price\" with their respective values.  \n• The output must include a top-level key \"staff\" that contains nested keys \"managers\" and \"baristas\", with each key mapping to an array of objects; every object in these arrays must contain a \"name\" and an \"email\" with the specified values.",
            "task_id": "180504",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app_name",
                "version",
                "database[engine]",
                "database[host]",
                "database[port]",
                "database[credentials][username]",
                "database[credentials][password]",
                "menus",
                "menus[][category]",
                "menus[][items]",
                "menus[][items][][name]",
                "menus[][items][][price]",
                "staff",
                "staff[managers]",
                "staff[managers][][name]",
                "staff[managers][][email]",
                "staff[baristas]",
                "staff[baristas][][name]",
                "staff[baristas][][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180504_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_name: Coffee POS\nversion: \"3.0\"\ndatabase:\n  engine: PostgreSQL\n  host: localhost\n  port: 5432\n  credentials:\n    username: coffee_admin\n    password: securepassword\nmenus:\n  - category: Espresso\n    items:\n      - name: Single Espresso\n        price: 2.50\n      - name: Double Espresso\n        price: 3.50\n  - category: Milk Based\n    items:\n      - name: Cappuccino\n        price: 3.75\n      - name: Latte\n        price: 4.00\nstaff:\n  managers:\n    - name: Alice\n      email: alice@example.com\n    - name: Bob\n      email: bob@example.com\n  baristas:\n    - name: Charlie\n      email: charlie@example.com\n    - name: Dana\n      email: dana@example.com\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180504_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app_name",
                                "version",
                                "database[engine]",
                                "database[host]",
                                "database[port]",
                                "database[credentials][username]",
                                "database[credentials][password]",
                                "menus",
                                "menus[][category]",
                                "menus[][items]",
                                "menus[][items][][name]",
                                "menus[][items][][price]",
                                "staff",
                                "staff[managers]",
                                "staff[managers][][name]",
                                "staff[managers][][email]",
                                "staff[baristas]",
                                "staff[baristas][][name]",
                                "staff[baristas][][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"DataConverter\"\n  version: \"1.0.3\"\n  description: \"A service to convert structured data between formats.\"\n\nservices:\n  - name: \"InputParser\"\n    port: 5000\n    endpoints:\n      - \"/parse/json\"\n      - \"/parse/xml\"\n  - name: \"OutputFormatter\"\n    port: 5001\n    endpoints:\n      - \"/format/csv\"\n      - \"/format/yaml\"\n\nsettings:\n  debug: true\n  log_level: \"info\"\n  max_connections: 200\n\nusers:\n  admins:\n    - username: \"alice\"\n      email: \"alice@dataconverter.com\"\n    - username: \"bob\"\n      email: \"bob@dataconverter.com\"\n\nmodules:\n  conversion:\n    enabled: true\n    supported_formats:\n      - \"JSON\"\n      - \"XML\"\n      - \"YAML\"\n      - \"CSV\"\n  monitoring:\n    enabled: false\n</code>",
            "feature_requirements": "- The output must be structured as a top-level object containing keys: \"app\", \"services\", \"settings\", \"users\", and \"modules\".\n- The \"app\" object must contain string-valued keys \"name\", \"version\", and \"description\" that match the values provided.\n- The \"services\" key must map to an array of objects, each with a \"name\" (string), \"port\" (number), and \"endpoints\" (an array of string paths).\n- The \"settings\" object must include a boolean \"debug\", a string \"log_level\", and a numeric \"max_connections\".\n- The \"users\" object must contain an \"admins\" key that maps to an array of objects, where each object includes a \"username\" and an \"email\" (both strings).\n- The \"modules\" object must include nested objects for \"conversion\" and \"monitoring\"; \"conversion\" must have a boolean \"enabled\" and an array \"supported_formats\" of strings, while \"monitoring\" must have a boolean \"enabled\".\n- All data types (strings, numbers, booleans, arrays, and objects) must be correctly preserved and represented in the output.",
            "task_id": "180505",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app",
                "app[name]",
                "app[version]",
                "app[description]",
                "services",
                "services[*][name]",
                "services[*][port]",
                "services[*][endpoints]",
                "services[*][endpoints][*]",
                "settings",
                "settings[debug]",
                "settings[log_level]",
                "settings[max_connections]",
                "users",
                "users[admins]",
                "users[admins][*][username]",
                "users[admins][*][email]",
                "modules",
                "modules[conversion]",
                "modules[conversion][enabled]",
                "modules[conversion][supported_formats]",
                "modules[conversion][supported_formats][*]",
                "modules[monitoring]",
                "modules[monitoring][enabled]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180505_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"DataConverter\"\n  version: \"1.0.3\"\n  description: \"A service to convert structured data between formats.\"\n\nservices:\n  - name: \"InputParser\"\n    port: 5000\n    endpoints:\n      - \"/parse/json\"\n      - \"/parse/xml\"\n  - name: \"OutputFormatter\"\n    port: 5001\n    endpoints:\n      - \"/format/csv\"\n      - \"/format/yaml\"\n\nsettings:\n  debug: true\n  log_level: \"info\"\n  max_connections: 200\n\nusers:\n  admins:\n    - username: \"alice\"\n      email: \"alice@dataconverter.com\"\n    - username: \"bob\"\n      email: \"bob@dataconverter.com\"\n\nmodules:\n  conversion:\n    enabled: true\n    supported_formats:\n      - \"JSON\"\n      - \"XML\"\n      - \"YAML\"\n      - \"CSV\"\n  monitoring:\n    enabled: false\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180505_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app",
                                "app[name]",
                                "app[version]",
                                "app[description]",
                                "services",
                                "services[*][name]",
                                "services[*][port]",
                                "services[*][endpoints]",
                                "services[*][endpoints][*]",
                                "settings",
                                "settings[debug]",
                                "settings[log_level]",
                                "settings[max_connections]",
                                "users",
                                "users[admins]",
                                "users[admins][*][username]",
                                "users[admins][*][email]",
                                "modules",
                                "modules[conversion]",
                                "modules[conversion][enabled]",
                                "modules[conversion][supported_formats]",
                                "modules[conversion][supported_formats][*]",
                                "modules[monitoring]",
                                "modules[monitoring][enabled]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject:\n  name: \"Data Transformation App\"\n  version: \"1.2.3\"\n  maintainers:\n    - name: \"Alice Smith\"\n      role: \"Lead Developer\"\n      email: \"alice.smith@example.com\"\n    - name: \"Bob Johnson\"\n      role: \"QA Engineer\"\n      email: \"bob.johnson@example.com\"\n\nenvironment:\n  type: \"production\"\n  servers:\n    - host: \"server1.example.com\"\n      ip: \"192.168.1.101\"\n    - host: \"server2.example.com\"\n      ip: \"192.168.1.102\"\n\nsettings:\n  logging: true\n  max_connections: 100\n  timeout: 30\n\ndata:\n  databases:\n    primary:\n      engine: \"PostgreSQL\"\n      version: \"13.3\"\n    secondary:\n      engine: \"MongoDB\"\n      version: \"4.4\"\n</code>",
            "feature_requirements": "• The converted output must be a JSON object containing exactly four top-level keys: \"project\", \"environment\", \"settings\", and \"data\".  \n• Under the \"project\" key, there must be keys \"name\" (a string), \"version\" (a string), and \"maintainers\" (an array).  \n• Each element in the \"maintainers\" array must be an object with exactly three keys: \"name\", \"role\", and \"email\", all represented as strings.  \n• Under the \"environment\" key, there must be keys \"type\" (a string) and \"servers\" (an array).  \n• Each element in the \"servers\" array must be an object with exactly two keys: \"host\" (a string) and \"ip\" (a string representing an IP address).  \n• The \"settings\" key must include keys \"logging\" (a boolean), \"max_connections\" (a number), and \"timeout\" (a number).  \n• Under the \"data\" key, there must be a single key \"databases\" that contains exactly two keys: \"primary\" and \"secondary\".  \n• Both \"primary\" and \"secondary\" under \"databases\" must be objects containing exactly two keys: \"engine\" (a string) and \"version\" (a string).",
            "task_id": "180506",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project",
                "project[name]",
                "project[version]",
                "project[maintainers]",
                "project[maintainers][*][name]",
                "project[maintainers][*][role]",
                "project[maintainers][*][email]",
                "environment",
                "environment[type]",
                "environment[servers]",
                "environment[servers][*][host]",
                "environment[servers][*][ip]",
                "settings",
                "settings[logging]",
                "settings[max_connections]",
                "settings[timeout]",
                "data",
                "data[databases]",
                "data[databases][primary][engine]",
                "data[databases][primary][version]",
                "data[databases][secondary][engine]",
                "data[databases][secondary][version]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180506_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject:\n  name: \"Data Transformation App\"\n  version: \"1.2.3\"\n  maintainers:\n    - name: \"Alice Smith\"\n      role: \"Lead Developer\"\n      email: \"alice.smith@example.com\"\n    - name: \"Bob Johnson\"\n      role: \"QA Engineer\"\n      email: \"bob.johnson@example.com\"\n\nenvironment:\n  type: \"production\"\n  servers:\n    - host: \"server1.example.com\"\n      ip: \"192.168.1.101\"\n    - host: \"server2.example.com\"\n      ip: \"192.168.1.102\"\n\nsettings:\n  logging: true\n  max_connections: 100\n  timeout: 30\n\ndata:\n  databases:\n    primary:\n      engine: \"PostgreSQL\"\n      version: \"13.3\"\n    secondary:\n      engine: \"MongoDB\"\n      version: \"4.4\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180506_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project",
                                "project[name]",
                                "project[version]",
                                "project[maintainers]",
                                "project[maintainers][*][name]",
                                "project[maintainers][*][role]",
                                "project[maintainers][*][email]",
                                "environment",
                                "environment[type]",
                                "environment[servers]",
                                "environment[servers][*][host]",
                                "environment[servers][*][ip]",
                                "settings",
                                "settings[logging]",
                                "settings[max_connections]",
                                "settings[timeout]",
                                "data",
                                "data[databases]",
                                "data[databases][primary][engine]",
                                "data[databases][primary][version]",
                                "data[databases][secondary][engine]",
                                "data[databases][secondary][version]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  title: \"Data Conversion Project\"\n  version: \"1.0\"\n  author: \"Team Alpha\"\nenvironment:\n  mode: \"development\"\n  logging: true\n  region: \"us-east-1\"\nprojects:\n  - id: 101\n    name: \"Data Ingestion\"\n    tasks:\n      - name: \"Extract Data\"\n        status: \"complete\"\n      - name: \"Transform Data\"\n        status: \"pending\"\n  - id: 102\n    name: \"Data Export\"\n    tasks:\n      - name: \"Map Fields\"\n        status: \"pending\"\n      - name: \"Validate Data\"\n        status: \"pending\"\nusers:\n  - username: \"alice\"\n    role: \"admin\"\n    active: true\n  - username: \"bob\"\n    role: \"user\"\n    active: false\n</code>",
            "feature_requirements": "• The output must include a top-level object with keys for metadata, environment, projects, and users.  \n• The metadata section must contain keys for title, version, and author, with corresponding string values (\"Data Conversion Project\", \"1.0\", and \"Team Alpha\").  \n• The environment section must include keys for mode, logging, and region, with expected values \"development\", true (a boolean), and \"us-east-1\" respectively.  \n• The projects section must be an array containing at least two project objects. Each project must have keys for id, name, and tasks.  \n• Each project's tasks must be represented as an array of objects, where each task includes a name and a status, with values matching those in the source code (e.g., \"Extract Data\" with \"complete\", \"Transform Data\" with \"pending\", etc.).  \n• The users section must be an array of objects, each containing a username, role, and active key, with values exactly as provided (e.g., \"alice\" with role \"admin\" and active true, \"bob\" with role \"user\" and active false).",
            "task_id": "180507",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata",
                "metadata[title]",
                "metadata[version]",
                "metadata[author]",
                "environment",
                "environment[mode]",
                "environment[logging]",
                "environment[region]",
                "projects",
                "projects[][id]",
                "projects[][name]",
                "projects[][tasks]",
                "projects[][tasks][][name]",
                "projects[][tasks][][status]",
                "users",
                "users[][username]",
                "users[][role]",
                "users[][active]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180507_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  title: \"Data Conversion Project\"\n  version: \"1.0\"\n  author: \"Team Alpha\"\nenvironment:\n  mode: \"development\"\n  logging: true\n  region: \"us-east-1\"\nprojects:\n  - id: 101\n    name: \"Data Ingestion\"\n    tasks:\n      - name: \"Extract Data\"\n        status: \"complete\"\n      - name: \"Transform Data\"\n        status: \"pending\"\n  - id: 102\n    name: \"Data Export\"\n    tasks:\n      - name: \"Map Fields\"\n        status: \"pending\"\n      - name: \"Validate Data\"\n        status: \"pending\"\nusers:\n  - username: \"alice\"\n    role: \"admin\"\n    active: true\n  - username: \"bob\"\n    role: \"user\"\n    active: false\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180507_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata",
                                "metadata[title]",
                                "metadata[version]",
                                "metadata[author]",
                                "environment",
                                "environment[mode]",
                                "environment[logging]",
                                "environment[region]",
                                "projects",
                                "projects[][id]",
                                "projects[][name]",
                                "projects[][tasks]",
                                "projects[][tasks][][name]",
                                "projects[][tasks][][status]",
                                "users",
                                "users[][username]",
                                "users[][role]",
                                "users[][active]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_info:\n  name: \"DataConverter\"\n  version: \"1.2.0\"\n  release_date: \"2023-10-15\"\n\nuser_settings:\n  theme: \"light\"\n  notifications: true\n  language: \"en-US\"\n  shortcuts:\n    save: \"Ctrl+S\"\n    open: \"Ctrl+O\"\n    close: \"Ctrl+W\"\n\nmetadata:\n  author: \"Jane Doe\"\n  license: \"MIT\"\n  contributions:\n    - name: \"John Smith\"\n      role: \"developer\"\n    - name: \"Alice Johnson\"\n      role: \"reviewer\"\n  tags:\n    - \"conversion\"\n    - \"yaml\"\n    - \"structure\"\n\ndata_map:\n  items:\n    - id: 101\n      name: \"Record One\"\n      attributes:\n        status: \"active\"\n        priority: \"high\"\n    - id: 102\n      name: \"Record Two\"\n      attributes:\n        status: \"inactive\"\n        priority: \"low\"\n\nlogs:\n  - timestamp: \"2023-10-15T08:00:00Z\"\n    event: \"start\"\n    details:\n      user: \"admin\"\n      action: \"initialize\"\n  - timestamp: \"2023-10-15T09:15:00Z\"\n    event: \"update\"\n    details:\n      user: \"editor\"\n      action: \"modify record\"\n</code>",
            "feature_requirements": "• The output must contain an object with keys: \"app_info\", \"user_settings\", \"metadata\", \"data_map\", and \"logs\".  \n• The \"app_info\" section must include the properties \"name\", \"version\", and \"release_date\" with their corresponding string values.  \n• The \"user_settings\" section must include the keys \"theme\", \"notifications\", \"language\", and a nested \"shortcuts\" object containing \"save\", \"open\", and \"close\" keys with string values.  \n• The \"metadata\" section must include \"author\" and \"license\" as string properties, along with a \"contributions\" list and a \"tags\" list.  \n• Each element in the \"contributions\" list must be an object with the properties \"name\" and \"role\", both as strings.  \n• The \"tags\" field in \"metadata\" must be a list containing multiple string elements.  \n• The \"data_map\" section must include an \"items\" list where each item is an object with properties \"id\", \"name\", and an \"attributes\" object that includes \"status\" and \"priority\".  \n• In each item of \"data_map\", the \"id\" must be represented as a numeric value, and \"name\" as a string.  \n• The \"logs\" section must be a list where each entry is an object containing \"timestamp\", \"event\", and a \"details\" object.  \n• Each \"details\" object in \"logs\" must include the keys \"user\" and \"action\", both associated with string values.",
            "task_id": "180508",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app_info",
                "app_info[name]",
                "app_info[version]",
                "app_info[release_date]",
                "user_settings",
                "user_settings[theme]",
                "user_settings[notifications]",
                "user_settings[language]",
                "user_settings[shortcuts]",
                "user_settings[shortcuts][save]",
                "user_settings[shortcuts][open]",
                "user_settings[shortcuts][close]",
                "metadata",
                "metadata[author]",
                "metadata[license]",
                "metadata[contributions]",
                "metadata[contributions][][name]",
                "metadata[contributions][][role]",
                "metadata[tags]",
                "data_map",
                "data_map[items]",
                "data_map[items][][id]",
                "data_map[items][][name]",
                "data_map[items][][attributes]",
                "data_map[items][][attributes][status]",
                "data_map[items][][attributes][priority]",
                "logs",
                "logs[][timestamp]",
                "logs[][event]",
                "logs[][details]",
                "logs[][details][user]",
                "logs[][details][action]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180508_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_info:\n  name: \"DataConverter\"\n  version: \"1.2.0\"\n  release_date: \"2023-10-15\"\n\nuser_settings:\n  theme: \"light\"\n  notifications: true\n  language: \"en-US\"\n  shortcuts:\n    save: \"Ctrl+S\"\n    open: \"Ctrl+O\"\n    close: \"Ctrl+W\"\n\nmetadata:\n  author: \"Jane Doe\"\n  license: \"MIT\"\n  contributions:\n    - name: \"John Smith\"\n      role: \"developer\"\n    - name: \"Alice Johnson\"\n      role: \"reviewer\"\n  tags:\n    - \"conversion\"\n    - \"yaml\"\n    - \"structure\"\n\ndata_map:\n  items:\n    - id: 101\n      name: \"Record One\"\n      attributes:\n        status: \"active\"\n        priority: \"high\"\n    - id: 102\n      name: \"Record Two\"\n      attributes:\n        status: \"inactive\"\n        priority: \"low\"\n\nlogs:\n  - timestamp: \"2023-10-15T08:00:00Z\"\n    event: \"start\"\n    details:\n      user: \"admin\"\n      action: \"initialize\"\n  - timestamp: \"2023-10-15T09:15:00Z\"\n    event: \"update\"\n    details:\n      user: \"editor\"\n      action: \"modify record\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180508_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app_info",
                                "app_info[name]",
                                "app_info[version]",
                                "app_info[release_date]",
                                "user_settings",
                                "user_settings[theme]",
                                "user_settings[notifications]",
                                "user_settings[language]",
                                "user_settings[shortcuts]",
                                "user_settings[shortcuts][save]",
                                "user_settings[shortcuts][open]",
                                "user_settings[shortcuts][close]",
                                "metadata",
                                "metadata[author]",
                                "metadata[license]",
                                "metadata[contributions]",
                                "metadata[contributions][][name]",
                                "metadata[contributions][][role]",
                                "metadata[tags]",
                                "data_map",
                                "data_map[items]",
                                "data_map[items][][id]",
                                "data_map[items][][name]",
                                "data_map[items][][attributes]",
                                "data_map[items][][attributes][status]",
                                "data_map[items][][attributes][priority]",
                                "logs",
                                "logs[][timestamp]",
                                "logs[][event]",
                                "logs[][details]",
                                "logs[][details][user]",
                                "logs[][details][action]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"Data Converter\"\n  version: \"2.0.1\"\n  environment: \"production\"\n\ndatabase:\n  host: \"localhost\"\n  port: 3306\n  username: \"converter_user\"\n  password: \"securePass123\"\n  schemas:\n    - name: \"input_data\"\n      tables:\n        - \"raw_records\"\n        - \"temp_storage\"\n    - name: \"output_data\"\n      tables:\n        - \"converted_results\"\n        - \"archive\"\n\nusers:\n  - id: 101\n    name: \"Alice\"\n    roles:\n      - \"admin\"\n      - \"operator\"\n  - id: 102\n    name: \"Bob\"\n    roles:\n      - \"operator\"\n  - id: 103\n    name: \"Charlie\"\n    roles:\n      - \"viewer\"\n\nlogs:\n  level: \"info\"\n  file_path: \"/var/log/dataconverter/app.log\"\n  rotation: \"daily\"\n\nfeatures:\n  enable_conversion: true\n  auto_save: true\n  backup_interval_minutes: 15\n</code>",
            "feature_requirements": "- The JSON output must contain a top-level object with keys \"app\", \"database\", \"users\", \"logs\", and \"features\".\n- The \"app\" object must include \"name\", \"version\", and \"environment\" keys, each having string values.\n- The \"database\" object must include keys \"host\", \"port\", \"username\", \"password\", and \"schemas\", where \"port\" is represented as a number and \"schemas\" is an array of objects.\n- Each object in the \"schemas\" array must have a \"name\" key with a string value and a \"tables\" key containing an array of strings.\n- The \"users\" key must map to an array where each item is an object with keys \"id\", \"name\", and \"roles\"; \"id\" must be a number, \"name\" a string, and \"roles\" an array of strings.\n- The \"logs\" object must include keys \"level\", \"file_path\", and \"rotation\", each with string values.\n- The \"features\" object must include \"enable_conversion\" and \"auto_save\" as boolean values, and \"backup_interval_minutes\" as a number.",
            "task_id": "180509",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app",
                "app[name]",
                "app[version]",
                "app[environment]",
                "database",
                "database[host]",
                "database[port]",
                "database[username]",
                "database[password]",
                "database[schemas]",
                "database[schemas][][name]",
                "database[schemas][][tables]",
                "users",
                "users[][id]",
                "users[][name]",
                "users[][roles]",
                "logs",
                "logs[level]",
                "logs[file_path]",
                "logs[rotation]",
                "features",
                "features[enable_conversion]",
                "features[auto_save]",
                "features[backup_interval_minutes]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180509_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"Data Converter\"\n  version: \"2.0.1\"\n  environment: \"production\"\n\ndatabase:\n  host: \"localhost\"\n  port: 3306\n  username: \"converter_user\"\n  password: \"securePass123\"\n  schemas:\n    - name: \"input_data\"\n      tables:\n        - \"raw_records\"\n        - \"temp_storage\"\n    - name: \"output_data\"\n      tables:\n        - \"converted_results\"\n        - \"archive\"\n\nusers:\n  - id: 101\n    name: \"Alice\"\n    roles:\n      - \"admin\"\n      - \"operator\"\n  - id: 102\n    name: \"Bob\"\n    roles:\n      - \"operator\"\n  - id: 103\n    name: \"Charlie\"\n    roles:\n      - \"viewer\"\n\nlogs:\n  level: \"info\"\n  file_path: \"/var/log/dataconverter/app.log\"\n  rotation: \"daily\"\n\nfeatures:\n  enable_conversion: true\n  auto_save: true\n  backup_interval_minutes: 15\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180509_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app",
                                "app[name]",
                                "app[version]",
                                "app[environment]",
                                "database",
                                "database[host]",
                                "database[port]",
                                "database[username]",
                                "database[password]",
                                "database[schemas]",
                                "database[schemas][][name]",
                                "database[schemas][][tables]",
                                "users",
                                "users[][id]",
                                "users[][name]",
                                "users[][roles]",
                                "logs",
                                "logs[level]",
                                "logs[file_path]",
                                "logs[rotation]",
                                "features",
                                "features[enable_conversion]",
                                "features[auto_save]",
                                "features[backup_interval_minutes]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"SampleApp\"\n  version: \"1.0.0\"\n  environment: \"production\"\n\ndatabase:\n  engine: \"postgresql\"\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    username: \"dbuser\"\n    password: \"securepassword\"\n\nservices:\n  - name: \"user-authentication\"\n    endpoint: \"/api/auth\"\n    methods:\n      - \"GET\"\n      - \"POST\"\n  - name: \"data-aggregation\"\n    endpoint: \"/api/aggregate\"\n    methods:\n      - \"GET\"\n      - \"POST\"\n      - \"PUT\"\n\nsecurity:\n  firewall: \"enabled\"\n  allowed_ips:\n    - \"192.168.1.100\"\n    - \"192.168.1.101\"\n  ssl: \"enabled\"\n\nlogging:\n  level: \"info\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  file_path: \"/var/log/sampleapp.log\"\n</code>",
            "feature_requirements": "• The JSON must have a top-level object with keys \"app\", \"database\", \"services\", \"security\", and \"logging\".\n\n• The \"app\" object must contain the keys \"name\", \"version\", and \"environment\", with corresponding string values \"SampleApp\", \"1.0.0\", and \"production\".\n\n• The \"database\" object must include keys \"engine\", \"host\", and \"port\", where \"port\" is a numeric value, and a nested \"credentials\" object containing \"username\" and \"password\" with string values \"dbuser\" and \"securepassword\".\n\n• The \"services\" key must map to an array of objects. Each object must include the keys \"name\", \"endpoint\", and \"methods\", with \"methods\" being an array of strings. The first object should list methods \"GET\" and \"POST\", while the second should list \"GET\", \"POST\", and \"PUT\".\n\n• The \"security\" object must contain the keys \"firewall\", \"allowed_ips\", and \"ssl\", where \"allowed_ips\" is an array listing the IPs \"192.168.1.100\" and \"192.168.1.101\".\n\n• The \"logging\" object must include the keys \"level\", \"outputs\", and \"file_path\", with \"outputs\" as an array that includes \"console\" and \"file\", and \"file_path\" as the string \"/var/log/sampleapp.log\".",
            "task_id": "180510",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app",
                "database",
                "services",
                "security",
                "logging",
                "app[name]",
                "app[version]",
                "app[environment]",
                "database[engine]",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][username]",
                "database[credentials][password]",
                "services[0]",
                "services[0][name]",
                "services[0][endpoint]",
                "services[0][methods]",
                "services[1]",
                "services[1][name]",
                "services[1][endpoint]",
                "services[1][methods]",
                "security[firewall]",
                "security[allowed_ips]",
                "security[allowed_ips][0]",
                "security[allowed_ips][1]",
                "security[ssl]",
                "logging[level]",
                "logging[outputs]",
                "logging[outputs][0]",
                "logging[outputs][1]",
                "logging[file_path]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180510_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp:\n  name: \"SampleApp\"\n  version: \"1.0.0\"\n  environment: \"production\"\n\ndatabase:\n  engine: \"postgresql\"\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    username: \"dbuser\"\n    password: \"securepassword\"\n\nservices:\n  - name: \"user-authentication\"\n    endpoint: \"/api/auth\"\n    methods:\n      - \"GET\"\n      - \"POST\"\n  - name: \"data-aggregation\"\n    endpoint: \"/api/aggregate\"\n    methods:\n      - \"GET\"\n      - \"POST\"\n      - \"PUT\"\n\nsecurity:\n  firewall: \"enabled\"\n  allowed_ips:\n    - \"192.168.1.100\"\n    - \"192.168.1.101\"\n  ssl: \"enabled\"\n\nlogging:\n  level: \"info\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  file_path: \"/var/log/sampleapp.log\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180510_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app",
                                "database",
                                "services",
                                "security",
                                "logging",
                                "app[name]",
                                "app[version]",
                                "app[environment]",
                                "database[engine]",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][username]",
                                "database[credentials][password]",
                                "services[0]",
                                "services[0][name]",
                                "services[0][endpoint]",
                                "services[0][methods]",
                                "services[1]",
                                "services[1][name]",
                                "services[1][endpoint]",
                                "services[1][methods]",
                                "security[firewall]",
                                "security[allowed_ips]",
                                "security[allowed_ips][0]",
                                "security[allowed_ips][1]",
                                "security[ssl]",
                                "logging[level]",
                                "logging[outputs]",
                                "logging[outputs][0]",
                                "logging[outputs][1]",
                                "logging[file_path]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  version: \"1.0\"\n  created_at: \"2023-10-12T08:00:00Z\"\n  environment: \"production\"\n\nsettings:\n  theme: \"dark\"\n  language: \"en-US\"\n  features:\n    logging: true\n    notifications: false\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - admin\n      - editor\n    preferences:\n      email_notifications: true\n      timezone: \"UTC\"\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - viewer\n    preferences:\n      email_notifications: false\n      timezone: \"PST\"\n\ntasks:\n  pending:\n    - id: \"task-001\"\n      title: \"Design database schema\"\n      due_date: \"2023-10-25\"\n    - id: \"task-002\"\n      title: \"Implement API endpoints\"\n      due_date: \"2023-10-28\"\n  completed:\n    - id: \"task-000\"\n      title: \"Setup project boilerplate\"\n      completed_on: \"2023-10-10\"\n\nlogs:\n  - timestamp: \"2023-10-12T09:15:00Z\"\n    event: \"User login\"\n    user_id: 1\n  - timestamp: \"2023-10-12T09:30:00Z\"\n    event: \"Task created\"\n    user_id: 2\n</code>",
            "feature_requirements": "• The output must be valid JSON that accurately mirrors the hierarchical structure of the original YAML input.\n• The top-level JSON structure must contain the keys: metadata, settings, users, tasks, and logs.\n• The metadata object must include keys for version (with value \"1.0\"), created_at (with value \"2023-10-12T08:00:00Z\"), and environment (with value \"production\").\n• The settings object must include keys for theme (with value \"dark\"), language (with value \"en-US\"), and features; the features object must contain logging (boolean true) and notifications (boolean false).\n• The users key must map to a list of user objects, each containing an integer id, a string name, a roles list (array of strings), and a preferences object that includes email_notifications (boolean) and timezone (string).\n• The tasks object must contain two keys: pending and completed. The pending list must include task objects with id (string), title (string), and due_date (string), while the completed list must include task objects with id (string), title (string), and completed_on (string).\n• The logs key must map to a list of log objects, each containing timestamp (string), event (string), and user_id (integer).",
            "task_id": "180511",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata",
                "metadata[version]",
                "metadata[created_at]",
                "metadata[environment]",
                "settings",
                "settings[theme]",
                "settings[language]",
                "settings[features]",
                "settings[features][logging]",
                "settings[features][notifications]",
                "users",
                "users[]",
                "users[][id]",
                "users[][name]",
                "users[][roles]",
                "users[][preferences]",
                "users[][preferences][email_notifications]",
                "users[][preferences][timezone]",
                "tasks",
                "tasks[pending]",
                "tasks[pending][]",
                "tasks[pending][][id]",
                "tasks[pending][][title]",
                "tasks[pending][][due_date]",
                "tasks[completed]",
                "tasks[completed][]",
                "tasks[completed][][id]",
                "tasks[completed][][title]",
                "tasks[completed][][completed_on]",
                "logs",
                "logs[]",
                "logs[][timestamp]",
                "logs[][event]",
                "logs[][user_id]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180511_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nmetadata:\n  version: \"1.0\"\n  created_at: \"2023-10-12T08:00:00Z\"\n  environment: \"production\"\n\nsettings:\n  theme: \"dark\"\n  language: \"en-US\"\n  features:\n    logging: true\n    notifications: false\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - admin\n      - editor\n    preferences:\n      email_notifications: true\n      timezone: \"UTC\"\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - viewer\n    preferences:\n      email_notifications: false\n      timezone: \"PST\"\n\ntasks:\n  pending:\n    - id: \"task-001\"\n      title: \"Design database schema\"\n      due_date: \"2023-10-25\"\n    - id: \"task-002\"\n      title: \"Implement API endpoints\"\n      due_date: \"2023-10-28\"\n  completed:\n    - id: \"task-000\"\n      title: \"Setup project boilerplate\"\n      completed_on: \"2023-10-10\"\n\nlogs:\n  - timestamp: \"2023-10-12T09:15:00Z\"\n    event: \"User login\"\n    user_id: 1\n  - timestamp: \"2023-10-12T09:30:00Z\"\n    event: \"Task created\"\n    user_id: 2\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180511_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata",
                                "metadata[version]",
                                "metadata[created_at]",
                                "metadata[environment]",
                                "settings",
                                "settings[theme]",
                                "settings[language]",
                                "settings[features]",
                                "settings[features][logging]",
                                "settings[features][notifications]",
                                "users",
                                "users[]",
                                "users[][id]",
                                "users[][name]",
                                "users[][roles]",
                                "users[][preferences]",
                                "users[][preferences][email_notifications]",
                                "users[][preferences][timezone]",
                                "tasks",
                                "tasks[pending]",
                                "tasks[pending][]",
                                "tasks[pending][][id]",
                                "tasks[pending][][title]",
                                "tasks[pending][][due_date]",
                                "tasks[completed]",
                                "tasks[completed][]",
                                "tasks[completed][][id]",
                                "tasks[completed][][title]",
                                "tasks[completed][][completed_on]",
                                "logs",
                                "logs[]",
                                "logs[][timestamp]",
                                "logs[][event]",
                                "logs[][user_id]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_config:\n  version: \"1.0.3\"\n  settings:\n    theme: \"dark\"\n    notifications: true\n    auto_update: false\n\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    user: \"admin\"\n    password: \"securePassword123\"\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - \"admin\"\n      - \"editor\"\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - \"viewer\"\n      - \"contributor\"\n\nlogs:\n  retention_days: 30\n  level: \"INFO\"\n\nservices:\n  - name: \"authentication\"\n    status: \"active\"\n  - name: \"payment_gateway\"\n    status: \"maintenance\"\n</code>",
            "feature_requirements": "• The output must be a JSON object with top-level keys: \"app_config\", \"database\", \"users\", \"logs\", and \"services\".  \n• Under \"app_config\", there must be a key \"version\" with the string value \"1.0.3\" and a nested \"settings\" object containing the keys \"theme\" (string \"dark\"), \"notifications\" (boolean true), and \"auto_update\" (boolean false).  \n• Under \"database\", the JSON must include keys \"host\" (string \"localhost\"), \"port\" (number 5432), and \"credentials\" which is an object with the keys \"user\" (string \"admin\") and \"password\" (string \"securePassword123\").  \n• The \"users\" key must map to an array where each element is an object that includes \"id\" (number), \"name\" (string), and \"roles\" (an array of strings). One object must have \"id\": 1, \"name\": \"Alice\", and \"roles\" containing \"admin\" and \"editor\", while the other must have \"id\": 2, \"name\": \"Bob\", and \"roles\" containing \"viewer\" and \"contributor\".  \n• The \"logs\" key must map to an object with \"retention_days\" set as a number (30) and \"level\" as a string (\"INFO\").  \n• The \"services\" key must map to an array of objects; each object must include \"name\" (string) and \"status\" (string). One service object should have \"name\": \"authentication\" and \"status\": \"active\", and another should have \"name\": \"payment_gateway\" and \"status\": \"maintenance\".  \n• All values must retain their appropriate data types (string, number, boolean, or array) as specified in the original YAML code.",
            "task_id": "180512",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app_config",
                "app_config[version]",
                "app_config[settings]",
                "app_config[settings][theme]",
                "app_config[settings][notifications]",
                "app_config[settings][auto_update]",
                "database",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][user]",
                "database[credentials][password]",
                "users",
                "users[][id]",
                "users[][name]",
                "users[][roles]",
                "logs",
                "logs[retention_days]",
                "logs[level]",
                "services",
                "services[][name]",
                "services[][status]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180512_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\napp_config:\n  version: \"1.0.3\"\n  settings:\n    theme: \"dark\"\n    notifications: true\n    auto_update: false\n\ndatabase:\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    user: \"admin\"\n    password: \"securePassword123\"\n\nusers:\n  - id: 1\n    name: \"Alice\"\n    roles:\n      - \"admin\"\n      - \"editor\"\n  - id: 2\n    name: \"Bob\"\n    roles:\n      - \"viewer\"\n      - \"contributor\"\n\nlogs:\n  retention_days: 30\n  level: \"INFO\"\n\nservices:\n  - name: \"authentication\"\n    status: \"active\"\n  - name: \"payment_gateway\"\n    status: \"maintenance\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180512_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app_config",
                                "app_config[version]",
                                "app_config[settings]",
                                "app_config[settings][theme]",
                                "app_config[settings][notifications]",
                                "app_config[settings][auto_update]",
                                "database",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][user]",
                                "database[credentials][password]",
                                "users",
                                "users[][id]",
                                "users[][name]",
                                "users[][roles]",
                                "logs",
                                "logs[retention_days]",
                                "logs[level]",
                                "services",
                                "services[][name]",
                                "services[][status]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject: \"Data Conversion Pipeline\"\nowner:\n  name: \"Alice Smith\"\n  role: \"Data Engineer\"\n  contact:\n    email: \"alice.smith@example.com\"\n    phone: \"123-456-7890\"\nsettings:\n  retry_attempts: 3\n  timeout: 30\n  enable_logging: true\nresources:\n  databases:\n    - name: \"SourceDB\"\n      type: \"PostgreSQL\"\n      host: \"source.db.example.com\"\n      port: 5432\n    - name: \"TargetDB\"\n      type: \"MySQL\"\n      host: \"target.db.example.com\"\n      port: 3306\nschedule:\n  frequency: \"daily\"\n  time: \"02:00\"\n  timezone: \"UTC\"\n</code>",
            "feature_requirements": "• The output must be structured as valid JSON containing a top-level object.\n• The JSON object must include a key \"project\" with the string value \"Data Conversion Pipeline\".\n• The JSON object must include an \"owner\" key, whose value is an object containing the keys \"name\", \"role\", and \"contact\".\n• Within the \"owner\" object, \"contact\" must be an object with the keys \"email\" (value \"alice.smith@example.com\") and \"phone\" (value \"123-456-7890\").\n• The JSON object must include a \"settings\" key whose value is an object containing \"retry_attempts\" (numeric value 3), \"timeout\" (numeric value 30), and \"enable_logging\" (boolean true).\n• The JSON object must include a \"resources\" key with a value that is an object containing a \"databases\" key.\n• The \"databases\" key must map to an array of database objects. Each object in the array must include the keys \"name\", \"type\", \"host\", and \"port\"; one object must have values \"SourceDB\", \"PostgreSQL\", \"source.db.example.com\", 5432, and another object must have \"TargetDB\", \"MySQL\", \"target.db.example.com\", 3306.\n• The JSON object must include a \"schedule\" key with a value that is an object containing the keys \"frequency\" (value \"daily\"), \"time\" (value \"02:00\"), and \"timezone\" (value \"UTC\").",
            "task_id": "180513",
            "task_name": "Convert YAML to JSON",
            "input_type": "YAML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project",
                "owner",
                "owner[name]",
                "owner[role]",
                "owner[contact]",
                "owner[contact][email]",
                "owner[contact][phone]",
                "settings",
                "settings[retry_attempts]",
                "settings[timeout]",
                "settings[enable_logging]",
                "resources",
                "resources[databases]",
                "resources[databases][][name]",
                "resources[databases][][type]",
                "resources[databases][][host]",
                "resources[databases][][port]",
                "schedule",
                "schedule[frequency]",
                "schedule[time]",
                "schedule[timezone]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180513_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following YAML code to JSON code.\n\n<code>\nproject: \"Data Conversion Pipeline\"\nowner:\n  name: \"Alice Smith\"\n  role: \"Data Engineer\"\n  contact:\n    email: \"alice.smith@example.com\"\n    phone: \"123-456-7890\"\nsettings:\n  retry_attempts: 3\n  timeout: 30\n  enable_logging: true\nresources:\n  databases:\n    - name: \"SourceDB\"\n      type: \"PostgreSQL\"\n      host: \"source.db.example.com\"\n      port: 5432\n    - name: \"TargetDB\"\n      type: \"MySQL\"\n      host: \"target.db.example.com\"\n      port: 3306\nschedule:\n  frequency: \"daily\"\n  time: \"02:00\"\n  timezone: \"UTC\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180513_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project",
                                "owner",
                                "owner[name]",
                                "owner[role]",
                                "owner[contact]",
                                "owner[contact][email]",
                                "owner[contact][phone]",
                                "settings",
                                "settings[retry_attempts]",
                                "settings[timeout]",
                                "settings[enable_logging]",
                                "resources",
                                "resources[databases]",
                                "resources[databases][][name]",
                                "resources[databases][][type]",
                                "resources[databases][][host]",
                                "resources[databases][][port]",
                                "schedule",
                                "schedule[frequency]",
                                "schedule[time]",
                                "schedule[timezone]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]