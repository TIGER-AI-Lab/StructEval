[
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#------------------------------------------------------------\n# Create a figure and a grid layout\n#------------------------------------------------------------\nfig = plt.figure(figsize=(12, 10))\ngrid = plt.GridSpec(3, 3, wspace=0.4, hspace=0.6)\n\n#------------------------------------------------------------\n# Global Title for the Report\n#------------------------------------------------------------\nplt.suptitle('Data Visualization Report', fontsize=20, weight='bold')\n\n#------------------------------------------------------------\n# Section 1: Overview Text Block\n#------------------------------------------------------------\noverview_ax = fig.add_subplot(grid[0, :])\noverview_ax.axis('off')\noverview_text = (\n    \"Section: Overview\\n\"\n    \"-------------------------\\n\"\n    \"This report delivers a comprehensive analysis of sample data.\\n\"\n    \"The following sections are included:\\n\"\n    \"   1. Overview\\n\"\n    \"   2. Data Distribution Histogram\\n\"\n    \"   3. Trend Analysis (Line Plot)\\n\"\n    \"   4. Regression Insights (Scatter & Fit Line)\\n\"\n    \"   5. Detailed Metrics Summary\\n\"\n    \"\\n\"\n    \"Key Metrics:\\n\"\n    \"   - Mean Value       : 5.3\\n\"\n    \"   - Median Value     : 5.0\\n\"\n    \"   - Std. Deviation   : 1.2\\n\"\n)\noverview_ax.text(0.01, 0.5, overview_text, fontsize=10, va='center', ha='left', family='monospace')\n\n#------------------------------------------------------------\n# Section 2: Data Distribution Histogram\n#------------------------------------------------------------\nhist_ax = fig.add_subplot(grid[1, 0])\nnp.random.seed(42)\ndata = np.random.normal(5, 1.5, 150)\nhist_ax.hist(data, bins=20, color='skyblue', edgecolor='black')\nhist_ax.set_title('Data Distribution', fontsize=14)\nhist_ax.set_xlabel('Data Value')\nhist_ax.set_ylabel('Frequency')\nhist_ax.grid(True, linestyle='--', alpha=0.7)\n\n#------------------------------------------------------------\n# Section 3: Trend Analysis - Line Plot\n#------------------------------------------------------------\nline_ax = fig.add_subplot(grid[1, 1])\nx_values = np.arange(0, 50)\ntrend_data = np.sin(x_values * 0.2) + np.random.normal(0, 0.2, len(x_values))\nline_ax.plot(x_values, trend_data, marker='o', linestyle='-', color='green')\nline_ax.set_title('Trend Analysis', fontsize=14)\nline_ax.set_xlabel('Time (s)')\nline_ax.set_ylabel('Amplitude')\nline_ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n#------------------------------------------------------------\n# Section 4: Regression Insights - Scatter Plot & Fit Line\n#------------------------------------------------------------\nreg_ax = fig.add_subplot(grid[1, 2])\nx_reg = np.linspace(0, 10, 30)\ny_reg = 2 * x_reg + np.random.normal(0, 2, len(x_reg))\nreg_ax.scatter(x_reg, y_reg, color='red', label='Data Points')\n# Fit a linear regression model\ncoeffs = np.polyfit(x_reg, y_reg, 1)\npoly_fit = np.poly1d(coeffs)\nreg_ax.plot(x_reg, poly_fit(x_reg), color='blue', label=f'Fit: y={coeffs[0]:.2f}x+{coeffs[1]:.2f}')\nreg_ax.set_title('Regression Insights', fontsize=14)\nreg_ax.set_xlabel('Independent Variable')\nreg_ax.set_ylabel('Dependent Variable')\nreg_ax.legend()\nreg_ax.grid(True, linestyle=':', alpha=0.8)\n\n#------------------------------------------------------------\n# Section 5: Detailed Metrics Table (Text Box)\n#------------------------------------------------------------\nmetrics_ax = fig.add_subplot(grid[2, :])\nmetrics_ax.axis('off')\ntable_text = (\n    \"Detailed Metrics:\\n",
            "feature_requirements": "• A prominent global title at the top reading “Data Visualization Report” shown in a larger, bold font.  \n• An overview text block placed in a dedicated section with no axes, displaying multiple lines of information including a section label (“Section: Overview”), a separator line, a list of report sections, and key metrics (Mean Value, Median Value, Std. Deviation) in a monospace font.  \n• A histogram section titled “Data Distribution” that visually displays a histogram with approximately 20 bins, using sky blue bars with black edges, accompanied by labeled X-axis (“Data Value”) and Y-axis (“Frequency”) and overlaying grid lines with dashed styling.  \n• A trend analysis section containing a line plot where individual data points (from a sine function with noise) are marked by circles and connected by a green line, with the plot titled “Trend Analysis”, X-axis labeled “Time (s)”, Y-axis labeled “Amplitude”, and grid lines drawn as dashed lines.  \n• A regression insights section featuring a scatter plot of red markers representing data points and an overlaid blue linear fit line; the legend in this section displays both “Data Points” and the fitted line equation formatted as “Fit: y=[slope]x+[intercept]”, with the section titled “Regression Insights”, and both axes appropriately labeled (“Independent Variable” and “Dependent Variable”) along with grid lines using dotted or specially styled lines.  \n• A detailed metrics table presented as a text box in a section with no visible axes, clearly headed “Detailed Metrics:” to segregate it from the plot sections.  \n• An overall grid layout that arranges these components in a structured format: the overview section spans the full width at the top; the histogram, line plot, and regression sections are arranged side by side in the middle row; and the detailed metrics text box covers the bottom row.",
            "task_id": "08XX72",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the global title displayed at the top of the report?",
                "How is the global title styled?",
                "What key text elements are included in the overview section's text block?",
                "How many bins does the histogram approximately display?",
                "What are the color and border details for the histogram bars?",
                "How are data points and connections represented in the trend analysis section?",
                "What does the legend in the regression insights section show?",
                "How is the overall grid layout arranged?"
            ],
            "VQA_answers": [
                "Data Visualization Report",
                "Larger, bold font",
                "Section label 'Section: Overview', a separator line, a list of report sections, and key metrics (Mean Value, Median Value, Std. Deviation) in monospace font",
                "Approximately 20 bins",
                "Sky blue bars with black edges",
                "Points are marked by circles and connected by a green line (data from a sine function with noise)",
                "It displays 'Data Points' and the fitted line equation formatted as 'Fit: y=[slope]x+[intercept]'",
                "Overview section spans the full width at the top; the middle row has the histogram, trend analysis, and regression insights side by side; the detailed metrics text box covers the bottom row"
            ],
            "raw_output_metric": [
                "Data Visualization Report",
                "Section: Overview",
                "Mean Value",
                "Median Value",
                "Std. Deviation",
                "Data Distribution",
                "Data Value",
                "Frequency",
                "Trend Analysis",
                "Time (s)",
                "Amplitude",
                "Regression Insights",
                "Independent Variable",
                "Dependent Variable",
                "Data Points",
                "Fit: y=[slope]x+[intercept]",
                "Detailed Metrics:",
                "sky blue",
                "black",
                "dashed",
                "green",
                "red",
                "blue",
                "dotted"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX72_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#------------------------------------------------------------\n# Create a figure and a grid layout\n#------------------------------------------------------------\nfig = plt.figure(figsize=(12, 10))\ngrid = plt.GridSpec(3, 3, wspace=0.4, hspace=0.6)\n\n#------------------------------------------------------------\n# Global Title for the Report\n#------------------------------------------------------------\nplt.suptitle('Data Visualization Report', fontsize=20, weight='bold')\n\n#------------------------------------------------------------\n# Section 1: Overview Text Block\n#------------------------------------------------------------\noverview_ax = fig.add_subplot(grid[0, :])\noverview_ax.axis('off')\noverview_text = (\n    \"Section: Overview\\n\"\n    \"-------------------------\\n\"\n    \"This report delivers a comprehensive analysis of sample data.\\n\"\n    \"The following sections are included:\\n\"\n    \"   1. Overview\\n\"\n    \"   2. Data Distribution Histogram\\n\"\n    \"   3. Trend Analysis (Line Plot)\\n\"\n    \"   4. Regression Insights (Scatter & Fit Line)\\n\"\n    \"   5. Detailed Metrics Summary\\n\"\n    \"\\n\"\n    \"Key Metrics:\\n\"\n    \"   - Mean Value       : 5.3\\n\"\n    \"   - Median Value     : 5.0\\n\"\n    \"   - Std. Deviation   : 1.2\\n\"\n)\noverview_ax.text(0.01, 0.5, overview_text, fontsize=10, va='center', ha='left', family='monospace')\n\n#------------------------------------------------------------\n# Section 2: Data Distribution Histogram\n#------------------------------------------------------------\nhist_ax = fig.add_subplot(grid[1, 0])\nnp.random.seed(42)\ndata = np.random.normal(5, 1.5, 150)\nhist_ax.hist(data, bins=20, color='skyblue', edgecolor='black')\nhist_ax.set_title('Data Distribution', fontsize=14)\nhist_ax.set_xlabel('Data Value')\nhist_ax.set_ylabel('Frequency')\nhist_ax.grid(True, linestyle='--', alpha=0.7)\n\n#------------------------------------------------------------\n# Section 3: Trend Analysis - Line Plot\n#------------------------------------------------------------\nline_ax = fig.add_subplot(grid[1, 1])\nx_values = np.arange(0, 50)\ntrend_data = np.sin(x_values * 0.2) + np.random.normal(0, 0.2, len(x_values))\nline_ax.plot(x_values, trend_data, marker='o', linestyle='-', color='green')\nline_ax.set_title('Trend Analysis', fontsize=14)\nline_ax.set_xlabel('Time (s)')\nline_ax.set_ylabel('Amplitude')\nline_ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n#------------------------------------------------------------\n# Section 4: Regression Insights - Scatter Plot & Fit Line\n#------------------------------------------------------------\nreg_ax = fig.add_subplot(grid[1, 2])\nx_reg = np.linspace(0, 10, 30)\ny_reg = 2 * x_reg + np.random.normal(0, 2, len(x_reg))\nreg_ax.scatter(x_reg, y_reg, color='red', label='Data Points')\n# Fit a linear regression model\ncoeffs = np.polyfit(x_reg, y_reg, 1)\npoly_fit = np.poly1d(coeffs)\nreg_ax.plot(x_reg, poly_fit(x_reg), color='blue', label=f'Fit: y={coeffs[0]:.2f}x+{coeffs[1]:.2f}')\nreg_ax.set_title('Regression Insights', fontsize=14)\nreg_ax.set_xlabel('Independent Variable')\nreg_ax.set_ylabel('Dependent Variable')\nreg_ax.legend()\nreg_ax.grid(True, linestyle=':', alpha=0.8)\n\n#------------------------------------------------------------\n# Section 5: Detailed Metrics Table (Text Box)\n#------------------------------------------------------------\nmetrics_ax = fig.add_subplot(grid[2, :])\nmetrics_ax.axis('off')\ntable_text = (\n    \"Detailed Metrics:\\n"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX72_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Report",
                                "Section: Overview",
                                "Mean Value",
                                "Median Value",
                                "Std. Deviation",
                                "Data Distribution",
                                "Data Value",
                                "Frequency",
                                "Trend Analysis",
                                "Time (s)",
                                "Amplitude",
                                "Regression Insights",
                                "Independent Variable",
                                "Dependent Variable",
                                "Data Points",
                                "Fit: y=[slope]x+[intercept]",
                                "Detailed Metrics:",
                                "sky blue",
                                "black",
                                "dashed",
                                "green",
                                "red",
                                "blue",
                                "dotted"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX72_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX72_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the global title displayed at the top of the report?",
                                "How is the global title styled?",
                                "What key text elements are included in the overview section's text block?",
                                "How many bins does the histogram approximately display?",
                                "What are the color and border details for the histogram bars?",
                                "How are data points and connections represented in the trend analysis section?",
                                "What does the legend in the regression insights section show?",
                                "How is the overall grid layout arranged?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX72_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Report",
                                "Larger, bold font",
                                "Section label 'Section: Overview', a separator line, a list of report sections, and key metrics (Mean Value, Median Value, Std. Deviation) in monospace font",
                                "Approximately 20 bins",
                                "Sky blue bars with black edges",
                                "Points are marked by circles and connected by a green line (data from a sine function with noise)",
                                "It displays 'Data Points' and the fitted line equation formatted as 'Fit: y=[slope]x+[intercept]'",
                                "Overview section spans the full width at the top; the middle row has the histogram, trend analysis, and regression insights side by side; the detailed metrics text box covers the bottom row"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef main():\n    # Initialize sample data arrays\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n    data = np.random.rand(10) * 100\n\n    # Create a figure with a custom size and overall title\n    fig = plt.figure(figsize=(12, 10))\n    main_title = \"Data Analysis Overview Report\"\n    fig.suptitle(main_title, fontsize=16, fontweight=\"bold\", color=\"navy\", y=0.98)\n\n    # -------------------------------\n    # Section 1: Time Series Analysis\n    # -------------------------------\n    ax1 = fig.add_subplot(2, 2, 1)\n    ax1.plot(x, y, label=\"Sine Wave\", color=\"blue\", linewidth=2)\n    ax1.set_title(\"Section 1: Time Series Analysis\", fontsize=12, fontweight=\"bold\")\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Amplitude\")\n    ax1.grid(True, linestyle=\"--\", linewidth=0.5)\n    ax1.legend(loc=\"upper right\")\n\n    # Adding an annotation with a heading-style text\n    ax1.text(0.5, 0.9, \"Important Note: Periodic oscillation detected\", transform=ax1.transAxes,\n             fontsize=10, color=\"darkred\", ha=\"center\", bbox=dict(facecolor='white', alpha=0.6))\n\n    # -------------------------------\n    # Section 2: Category Distribution\n    # -------------------------------\n    ax2 = fig.add_subplot(2, 2, 2)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\n    ax2.bar(categories, data, color=\"orange\", edgecolor=\"black\")\n    ax2.set_title(\"Section 2: Category Distribution\", fontsize=12, fontweight=\"bold\")\n    ax2.set_xlabel(\"Categories\")\n    ax2.set_ylabel(\"Values\")\n    ax2.grid(axis='y', linestyle=\"--\", linewidth=0.5)\n\n    # Label each bar with the corresponding value\n    for idx, val in enumerate(data):\n        ax2.text(idx, val + 1, f\"{val:.1f}\", ha=\"center\", va=\"bottom\", fontsize=8, color=\"black\")\n\n    # -------------------------------\n    # Section 3: Random Scatter Distribution\n    # -------------------------------\n    ax3 = fig.add_subplot(2, 2, 3)\n    x_scatter = np.random.rand(50) * 20\n    y_scatter = np.random.rand(50) * 20\n    ax3.scatter(x_scatter, y_scatter, marker='o', color='green', edgecolor='black', linewidth=0.5, s=50)\n    ax3.set_title(\"Section 3: Random Distribution\", fontsize=12, fontweight=\"bold\")\n    ax3.set_xlabel(\"Variable X\")\n    ax3.set_ylabel(\"Variable Y\")\n    ax3.grid(True, linestyle=\"--\", linewidth=0.5)\n\n    # Add bullet list style annotation inside the scatter plot\n    bullet_text = (\"Key Points:\\n\"\n                   \"• Uniform spread detected\\n\"\n                   \"• Potential outliers visible\\n\"\n                   \"• Clustering in some regions\")\n    ax3.text(0.05, 0.95, bullet_text, transform=ax3.trans",
            "feature_requirements": "• The TikZ output must include an overall figure with a main title \"Data Analysis Overview Report\" rendered prominently at the top, styled with a bold font, a larger size (approximately 16pt), and navy color.  \n• It must render a subplot for \"Section 1: Time Series Analysis\" that displays a sine wave curve (from x = 0 to 10, based on 100 sample points) with blue color and a linewidth approximating 2, including labeled x-axis (\"Time (s)\") and y-axis (\"Amplitude\"), a dashed grid, and a legend indicating \"Sine Wave\" positioned at the upper right.  \n• Within Section 1, the TikZ diagram must incorporate an annotation inside the plotting area with the text \"Important Note: Periodic oscillation detected\", centered horizontally at 50% of the axis width and near the top (approximately 90% of the axis height), using a smaller font (around 10pt), dark red color, and displayed against a light, semi-transparent white background box.  \n• It must render a subplot for \"Section 2: Category Distribution\" that displays a bar chart with 10 bars labeled with categories \"A\" through \"J\". Each bar should be filled in orange with a black edge, and the respective y-axis values (derived from random numbers scaled up to about 100) must be displayed just above each bar (formatted to one decimal place). Additionally, the plot must feature labeled axes (\"Categories\" on the x-axis and \"Values\" on the y-axis) along with a dashed grid visible on the y-axis.  \n• The TikZ output must include a subplot for \"Section 3: Random Distribution\" that displays a scatter plot of 50 points, where each point is represented as a circle with green fill, a black edge, a thin linewidth (approximately 0.5) and a moderate size (close to size 50), with labeled axes (\"Variable X\" and \"Variable Y\") and a full dashed grid.  \n• Inside the scatter plot (Section 3), the diagram must incorporate a multi-line bullet-style annotation in the upper left area that starts with \"Key Points:\" followed by three bullet items: \"Uniform spread detected\", \"Potential outliers visible\", and \"Clustering in some regions\", ensuring each bullet is visibly and distinctly rendered.  \n• Each subplot title (\"Section 1: Time Series Analysis\", \"Section 2: Category Distribution\", \"Section 3: Random Distribution\") must be rendered using a bold style with a font size around 12pt to clearly distinguish it as a section header.",
            "task_id": "08XX73",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title displayed at the top of the figure?",
                "What is the font size and color style of the main title?",
                "What is the x-axis label of the Time Series Analysis subplot?",
                "What curve is shown in the Time Series Analysis subplot and what is its color?",
                "What legend label is used in the Time Series Analysis subplot?",
                "What annotation text is included inside the Time Series Analysis plot area?",
                "How many bars are displayed in the Category Distribution subplot and what are their labels?",
                "What are the axis labels for the Category Distribution subplot?",
                "What are the axis labels for the Random Distribution scatter plot?",
                "What bullet items are listed in the annotation inside the Random Distribution scatter plot?"
            ],
            "VQA_answers": [
                "Data Analysis Overview Report",
                "Approximately 16pt, bold, and navy",
                "Time (s)",
                "A sine wave displayed in blue",
                "Sine Wave",
                "Important Note: Periodic oscillation detected",
                "10 bars labeled A through J",
                "Categories on the x-axis and Values on the y-axis",
                "Variable X and Variable Y",
                "Uniform spread detected, Potential outliers visible, Clustering in some regions"
            ],
            "raw_output_metric": [
                "Data Analysis Overview Report",
                "Section 1: Time Series Analysis",
                "Time (s)",
                "Amplitude",
                "Sine Wave",
                "Important Note: Periodic oscillation detected",
                "Section 2: Category Distribution",
                "Categories",
                "Values",
                "Section 3: Random Distribution",
                "Variable X",
                "Variable Y",
                "Key Points:",
                "Uniform spread detected",
                "Potential outliers visible",
                "Clustering in some regions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX73_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef main():\n    # Initialize sample data arrays\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n    data = np.random.rand(10) * 100\n\n    # Create a figure with a custom size and overall title\n    fig = plt.figure(figsize=(12, 10))\n    main_title = \"Data Analysis Overview Report\"\n    fig.suptitle(main_title, fontsize=16, fontweight=\"bold\", color=\"navy\", y=0.98)\n\n    # -------------------------------\n    # Section 1: Time Series Analysis\n    # -------------------------------\n    ax1 = fig.add_subplot(2, 2, 1)\n    ax1.plot(x, y, label=\"Sine Wave\", color=\"blue\", linewidth=2)\n    ax1.set_title(\"Section 1: Time Series Analysis\", fontsize=12, fontweight=\"bold\")\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Amplitude\")\n    ax1.grid(True, linestyle=\"--\", linewidth=0.5)\n    ax1.legend(loc=\"upper right\")\n\n    # Adding an annotation with a heading-style text\n    ax1.text(0.5, 0.9, \"Important Note: Periodic oscillation detected\", transform=ax1.transAxes,\n             fontsize=10, color=\"darkred\", ha=\"center\", bbox=dict(facecolor='white', alpha=0.6))\n\n    # -------------------------------\n    # Section 2: Category Distribution\n    # -------------------------------\n    ax2 = fig.add_subplot(2, 2, 2)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]\n    ax2.bar(categories, data, color=\"orange\", edgecolor=\"black\")\n    ax2.set_title(\"Section 2: Category Distribution\", fontsize=12, fontweight=\"bold\")\n    ax2.set_xlabel(\"Categories\")\n    ax2.set_ylabel(\"Values\")\n    ax2.grid(axis='y', linestyle=\"--\", linewidth=0.5)\n\n    # Label each bar with the corresponding value\n    for idx, val in enumerate(data):\n        ax2.text(idx, val + 1, f\"{val:.1f}\", ha=\"center\", va=\"bottom\", fontsize=8, color=\"black\")\n\n    # -------------------------------\n    # Section 3: Random Scatter Distribution\n    # -------------------------------\n    ax3 = fig.add_subplot(2, 2, 3)\n    x_scatter = np.random.rand(50) * 20\n    y_scatter = np.random.rand(50) * 20\n    ax3.scatter(x_scatter, y_scatter, marker='o', color='green', edgecolor='black', linewidth=0.5, s=50)\n    ax3.set_title(\"Section 3: Random Distribution\", fontsize=12, fontweight=\"bold\")\n    ax3.set_xlabel(\"Variable X\")\n    ax3.set_ylabel(\"Variable Y\")\n    ax3.grid(True, linestyle=\"--\", linewidth=0.5)\n\n    # Add bullet list style annotation inside the scatter plot\n    bullet_text = (\"Key Points:\\n\"\n                   \"• Uniform spread detected\\n\"\n                   \"• Potential outliers visible\\n\"\n                   \"• Clustering in some regions\")\n    ax3.text(0.05, 0.95, bullet_text, transform=ax3.trans"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX73_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Analysis Overview Report",
                                "Section 1: Time Series Analysis",
                                "Time (s)",
                                "Amplitude",
                                "Sine Wave",
                                "Important Note: Periodic oscillation detected",
                                "Section 2: Category Distribution",
                                "Categories",
                                "Values",
                                "Section 3: Random Distribution",
                                "Variable X",
                                "Variable Y",
                                "Key Points:",
                                "Uniform spread detected",
                                "Potential outliers visible",
                                "Clustering in some regions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX73_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX73_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the figure?",
                                "What is the font size and color style of the main title?",
                                "What is the x-axis label of the Time Series Analysis subplot?",
                                "What curve is shown in the Time Series Analysis subplot and what is its color?",
                                "What legend label is used in the Time Series Analysis subplot?",
                                "What annotation text is included inside the Time Series Analysis plot area?",
                                "How many bars are displayed in the Category Distribution subplot and what are their labels?",
                                "What are the axis labels for the Category Distribution subplot?",
                                "What are the axis labels for the Random Distribution scatter plot?",
                                "What bullet items are listed in the annotation inside the Random Distribution scatter plot?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX73_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Analysis Overview Report",
                                "Approximately 16pt, bold, and navy",
                                "Time (s)",
                                "A sine wave displayed in blue",
                                "Sine Wave",
                                "Important Note: Periodic oscillation detected",
                                "10 bars labeled A through J",
                                "Categories on the x-axis and Values on the y-axis",
                                "Variable X and Variable Y",
                                "Uniform spread detected, Potential outliers visible, Clustering in some regions"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# --------------------------\n# Data Preparation Section\n# --------------------------\n# Generate some simulated data\nnp.random.seed(42)\nx = np.linspace(0, 10, 100)\nlinear_trend = 2 * x + 1\nnoise = np.random.normal(0, 2, size=x.shape)\ny_noisy = linear_trend + noise\nquadratic = 0.5 * x**2 - x + 3\n\n# --------------------------\n# Figure and Layout Setup\n# --------------------------\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[0.5, 1, 1], width_ratios=[1, 1])\nfig.suptitle('Data Metrics Report', fontsize=16, fontweight='bold', y=0.98)\n\n# --------------------------\n# Header Section\n# --------------------------\nax_header = plt.subplot(gs[0, :])\nax_header.axis('off')\nheader_text = (\"REPORT OVERVIEW\\n\"\n               \"------------------\\n\"\n               \"This report includes multiple sections:\\n\"\n               \"   • Data Trend Analysis\\n\"\n               \"   • Noise Analysis\\n\"\n               \"   • Quadratic Model Comparison\\n\"\n               \"\\n\"\n               \"Each section is labeled with headings and annotated values.\")\nax_header.text(0.01, 0.5, header_text, fontsize=12, fontfamily='monospace', va='center', ha='left')\n\n# --------------------------\n# Section 1: Trend Analysis Plot\n# --------------------------\nax1 = plt.subplot(gs[1, 0])\nax1.plot(x, linear_trend, color='blue', linestyle='--', label='Linear Trend')\nax1.set_title('Section 1: Linear Trend Analysis', fontsize=14, fontweight='bold')\n\nax1.set_xlabel('Independent Variable (x)')\nax1.set_ylabel('Dependent Variable (y)')\nax1.grid(True, linestyle=':', color='grey', alpha=0.7)\nax1.legend(loc='upper left')\n\n# Adding marker for a specific value\nhighlight_index = 50\nax1.plot(x[highlight_index], linear_trend[highlight_index], 'ro')\nax1.annotate('Key Value: {:.1f}'.format(linear_trend[highlight_index]),\n             xy=(x[highlight_index], linear_trend[highlight_index]),\n             xytext=(x[highlight_index]+1, linear_trend[highlight_index]+5),\n             arrowprops=dict(facecolor='red', arrowstyle='->'),\n             fontsize=10)\n\n# --------------------------\n# Section 2: Noise Analysis Plot\n# --------------------------\nax2 = plt.subplot(gs[1, 1])\nax2.scatter(x, y_noisy, c='green', s=30, alpha=0.6, label='Noisy Measurements')\nax2.plot(x, linear_trend, color='black', linestyle='dotted', label='Expected Trend')\nax2.set_title('Section 2: Noise Analysis', fontsize=14, fontweight='bold')\nax2.set_xlabel('Sample Index')\nax2.set_ylabel('Measurement Value')\nax2.grid(True, linestyle=':', color='grey', alpha=0.5)\nax2.legend(loc='upper right')\n\n# --------------------------\n# Section 3: Quadratic Model Comparison and Metrics Table\n# --------------------------\n# Top subplot for comparison\nax3 = plt.subplot(gs[2, 0])\nax3.plot(x, quadratic, color='magenta', linestyle='-', label='Quadratic Model')\nax3.plot(x, linear_trend, color='blue', linestyle='--', label='Linear Trend')\nax3.set_title('Section 3: Model Comparison', fontsize=14, fontweight='bold')\nax3.set_xlabel('Independent Variable (x)')\nax3.set_ylabel('Model Output')\nax3.grid(True, linestyle=':', color='grey', alpha=0.7)\nax3.legend(loc='upper left')\n\n# Bottom subplot for metrics table (using text)\nax4 = plt.subplot(gs[2, 1])\nax4.axis('off')  # Hide the axis for table display\nmetrics_text = (\n    \"METRICS SUMMARY\\n\"\n    \"-----------------------\\n\"\n    \"1. Linear Trend:\\n\"\n    \"   - Slope: 2.0\\n\"\n    \"   - Intercept: 1.0\\n\"\n    \"   - R²: 0.95\\n\\n\"\n    \"2. Noise Analysis:\\n\"\n    \"   - Noise Mean: {:.2f}\\n\"\n    \"   - Noise Std Dev: {:.2f}\\n\\n\"\n    \"3. Quadratic Model:\\n\"\n    \"   - Coefficient: 0.5\\n\"\n    \"   - Shift: -1.0\\n\"\n    \"   - Constant: 3.0\\n\"\n    \"\\n\"\n    \"Observation: The quadratic model diverges from the linear trend\\n\"\n    \"at higher x values, indicating non-linear behavior in the data.\"\n).format(np.mean(noise), np.std(noise))\nax4.text(0.01, 0.5, metrics_text, fontsize=12, fontfamily='monospace', va='center', ha='left')\n\n# --------------------------\n# Final Layout Adjustments\n# --------------------------\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n</code>",
            "feature_requirements": "• The converted TikZ code must create a figure split into a grid layout that corresponds to three rows and two columns, with specific height ratios (first row shorter) and equal width columns.  \n• It must include a header section that displays a title (\"Data Metrics Report\") at the top and a block of header text containing an overview and a bulleted list of report sections.  \n• It should render a first section (Section 1) with a line plot of a linear trend using a blue dashed line, along with labelled x and y axes, a grid, and an upper-left legend.  \n• The TikZ output must depict a highlighted point on the first plot with a red circular marker and an annotation arrow pointing to this point with text indicating the key value.  \n• It must render a second section (Section 2) that includes a scatter plot of noisy data using green markers with partial transparency, overlaid with a black dotted line representing the expected trend, and appropriate axis labels and grid.  \n• The second section should include a legend indicating the data series, positioned at the upper-right of the plot.  \n• The third section must display two parts: one subfigure comparing models by overlaying a magenta solid quadratic curve with a blue dashed linear trend, and the other subfigure showing a metrics summary rendered as formatted text (using a monospace font) with headings, bullet points, and empirical values.  \n• All textual elements (titles, axis labels, annotations, and metrics text) should be styled to reflect the original emphasis (such as bold titles and suitably-sized fonts) and positioned according to the grid layout.",
            "task_id": "08XX74",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main header title displayed at the top?",
                "How is the overall figure grid layout structured?",
                "What is the line style used in Section 1 for the linear trend plot?",
                "Where is the legend positioned in Section 1?",
                "How is the key point on the line plot in Section 1 highlighted?",
                "What visual elements are used in Section 2 to represent the scatter plot and the expected trend?",
                "Where is the legend located in Section 2?",
                "What are the two parts displayed in Section 3?"
            ],
            "VQA_answers": [
                "Data Metrics Report",
                "Three rows and two columns",
                "Blue dashed line",
                "Upper-left",
                "It is marked with a red circular marker and an annotation arrow indicating the key value",
                "Green markers with partial transparency for the scatter plot and a black dotted line for the expected trend",
                "Upper-right",
                "One subfigure compares models with a magenta solid quadratic curve and a blue dashed linear trend, and the other shows a metrics summary rendered as formatted text with headings and bullet points"
            ],
            "raw_output_metric": [
                "Data Metrics Report",
                "Section 1",
                "line plot",
                "blue dashed",
                "x axis",
                "y axis",
                "grid",
                "upper-left",
                "red circular",
                "annotation arrow",
                "key value",
                "Section 2",
                "scatter plot",
                "green markers",
                "partial transparency",
                "black dotted",
                "expected trend",
                "upper-right",
                "Section 3",
                "magenta solid quadratic curve",
                "blue dashed linear trend",
                "monospace",
                "formatted text",
                "bulleted list",
                "report sections"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX74_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# --------------------------\n# Data Preparation Section\n# --------------------------\n# Generate some simulated data\nnp.random.seed(42)\nx = np.linspace(0, 10, 100)\nlinear_trend = 2 * x + 1\nnoise = np.random.normal(0, 2, size=x.shape)\ny_noisy = linear_trend + noise\nquadratic = 0.5 * x**2 - x + 3\n\n# --------------------------\n# Figure and Layout Setup\n# --------------------------\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[0.5, 1, 1], width_ratios=[1, 1])\nfig.suptitle('Data Metrics Report', fontsize=16, fontweight='bold', y=0.98)\n\n# --------------------------\n# Header Section\n# --------------------------\nax_header = plt.subplot(gs[0, :])\nax_header.axis('off')\nheader_text = (\"REPORT OVERVIEW\\n\"\n               \"------------------\\n\"\n               \"This report includes multiple sections:\\n\"\n               \"   • Data Trend Analysis\\n\"\n               \"   • Noise Analysis\\n\"\n               \"   • Quadratic Model Comparison\\n\"\n               \"\\n\"\n               \"Each section is labeled with headings and annotated values.\")\nax_header.text(0.01, 0.5, header_text, fontsize=12, fontfamily='monospace', va='center', ha='left')\n\n# --------------------------\n# Section 1: Trend Analysis Plot\n# --------------------------\nax1 = plt.subplot(gs[1, 0])\nax1.plot(x, linear_trend, color='blue', linestyle='--', label='Linear Trend')\nax1.set_title('Section 1: Linear Trend Analysis', fontsize=14, fontweight='bold')\n\nax1.set_xlabel('Independent Variable (x)')\nax1.set_ylabel('Dependent Variable (y)')\nax1.grid(True, linestyle=':', color='grey', alpha=0.7)\nax1.legend(loc='upper left')\n\n# Adding marker for a specific value\nhighlight_index = 50\nax1.plot(x[highlight_index], linear_trend[highlight_index], 'ro')\nax1.annotate('Key Value: {:.1f}'.format(linear_trend[highlight_index]),\n             xy=(x[highlight_index], linear_trend[highlight_index]),\n             xytext=(x[highlight_index]+1, linear_trend[highlight_index]+5),\n             arrowprops=dict(facecolor='red', arrowstyle='->'),\n             fontsize=10)\n\n# --------------------------\n# Section 2: Noise Analysis Plot\n# --------------------------\nax2 = plt.subplot(gs[1, 1])\nax2.scatter(x, y_noisy, c='green', s=30, alpha=0.6, label='Noisy Measurements')\nax2.plot(x, linear_trend, color='black', linestyle='dotted', label='Expected Trend')\nax2.set_title('Section 2: Noise Analysis', fontsize=14, fontweight='bold')\nax2.set_xlabel('Sample Index')\nax2.set_ylabel('Measurement Value')\nax2.grid(True, linestyle=':', color='grey', alpha=0.5)\nax2.legend(loc='upper right')\n\n# --------------------------\n# Section 3: Quadratic Model Comparison and Metrics Table\n# --------------------------\n# Top subplot for comparison\nax3 = plt.subplot(gs[2, 0])\nax3.plot(x, quadratic, color='magenta', linestyle='-', label='Quadratic Model')\nax3.plot(x, linear_trend, color='blue', linestyle='--', label='Linear Trend')\nax3.set_title('Section 3: Model Comparison', fontsize=14, fontweight='bold')\nax3.set_xlabel('Independent Variable (x)')\nax3.set_ylabel('Model Output')\nax3.grid(True, linestyle=':', color='grey', alpha=0.7)\nax3.legend(loc='upper left')\n\n# Bottom subplot for metrics table (using text)\nax4 = plt.subplot(gs[2, 1])\nax4.axis('off')  # Hide the axis for table display\nmetrics_text = (\n    \"METRICS SUMMARY\\n\"\n    \"-----------------------\\n\"\n    \"1. Linear Trend:\\n\"\n    \"   - Slope: 2.0\\n\"\n    \"   - Intercept: 1.0\\n\"\n    \"   - R²: 0.95\\n\\n\"\n    \"2. Noise Analysis:\\n\"\n    \"   - Noise Mean: {:.2f}\\n\"\n    \"   - Noise Std Dev: {:.2f}\\n\\n\"\n    \"3. Quadratic Model:\\n\"\n    \"   - Coefficient: 0.5\\n\"\n    \"   - Shift: -1.0\\n\"\n    \"   - Constant: 3.0\\n\"\n    \"\\n\"\n    \"Observation: The quadratic model diverges from the linear trend\\n\"\n    \"at higher x values, indicating non-linear behavior in the data.\"\n).format(np.mean(noise), np.std(noise))\nax4.text(0.01, 0.5, metrics_text, fontsize=12, fontfamily='monospace', va='center', ha='left')\n\n# --------------------------\n# Final Layout Adjustments\n# --------------------------\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX74_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Metrics Report",
                                "Section 1",
                                "line plot",
                                "blue dashed",
                                "x axis",
                                "y axis",
                                "grid",
                                "upper-left",
                                "red circular",
                                "annotation arrow",
                                "key value",
                                "Section 2",
                                "scatter plot",
                                "green markers",
                                "partial transparency",
                                "black dotted",
                                "expected trend",
                                "upper-right",
                                "Section 3",
                                "magenta solid quadratic curve",
                                "blue dashed linear trend",
                                "monospace",
                                "formatted text",
                                "bulleted list",
                                "report sections"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX74_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX74_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header title displayed at the top?",
                                "How is the overall figure grid layout structured?",
                                "What is the line style used in Section 1 for the linear trend plot?",
                                "Where is the legend positioned in Section 1?",
                                "How is the key point on the line plot in Section 1 highlighted?",
                                "What visual elements are used in Section 2 to represent the scatter plot and the expected trend?",
                                "Where is the legend located in Section 2?",
                                "What are the two parts displayed in Section 3?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX74_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Metrics Report",
                                "Three rows and two columns",
                                "Blue dashed line",
                                "Upper-left",
                                "It is marked with a red circular marker and an annotation arrow indicating the key value",
                                "Green markers with partial transparency for the scatter plot and a black dotted line for the expected trend",
                                "Upper-right",
                                "One subfigure compares models with a magenta solid quadratic curve and a blue dashed linear trend, and the other shows a metrics summary rendered as formatted text with headings and bullet points"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\n# =============================================================================\n# Visualization Report: Data Overview and Detailed Analysis\n# =============================================================================\n#\n# This script generates a multi-panel report using Matplotlib.\n# It includes:\n#   - Report headings and sections\n#   - Subplots with labeled axes\n#   - Lists of key statistics\n#   - Annotated values and formatted content\n#\n# Sections:\n#   1. Data Overview (Top left): Shows raw data trends.\n#   2. Statistical Summary (Top right): Displays key statistics.\n#   3. Detailed Analysis (Bottom full-width): Contains side-by-side comparisons.\n#\n# Key labeled values:\n#   * Mean, Median, Std Dev for each dataset.\n#   * Trend lines and annotation markers.\n# =============================================================================\n\n# Generate sample data\nnp.random.seed(42)\nt = np.linspace(0, 10, 100)\ndata1 = np.sin(t) + np.random.normal(0, 0.2, size=t.shape)\ndata2 = np.cos(t) + np.random.normal(0, 0.2, size=t.shape)\n\n# Calculate key statistics\nmean_data1 = np.mean(data1)\nmedian_data1 = np.median(data1)\nstd_data1 = np.std(data1)\n\nmean_data2 = np.mean(data2)\nmedian_data2 = np.median(data2)\nstd_data2 = np.std(data2)\n\n# Create a new figure with specified dimensions\nfig = plt.figure(constrained_layout=True, figsize=(10, 8))\ngs = GridSpec(ncols=2, nrows=2, figure=fig, height_ratios=[1, 1.2])\n\n# -----------------------------------------------------------------------------\n# Section 1: Data Overview (Top Left)\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(t, data1, label='Dataset 1', color='blue', linewidth=1.5)\nax1.plot(t, data2, label='Dataset 2', color='green', linewidth=1.5)\nax1.set_title('Data Overview')\nax1.set_xlabel('Time (s)')\nax1.set_ylabel('Amplitude')\nax1.legend(loc='upper right')\nax1.grid(True, linestyle='--', alpha=0.6)\nax1.text(1, np.max(data1) - 0.4, 'Key Points:\\n- Sinusoidal trend\\n- Noisy signal', \n         bbox=dict(facecolor='white', alpha=0.7))\n\n# -----------------------------------------------------------------------------\n# Section 2: Statistical Summary (Top Right)\nax2 = fig.add_subplot(gs[0, 1])\n# Create a table-like structure using text annotations\nax2.axis('off')\nstats_text = (\n    \"Statistical Summary\\n\"\n    \"-----------------------------\\n\"\n    \"Dataset 1:\\n\"\n    \"  Mean:   {:.2f}\\n\"\n    \"  Median: {:.2f}\\n\"\n    \"  StdDev: {:.2f}\\n\\n\"\n    \"Dataset 2:\\n\"\n    \"  Mean:   {:.2f}\\n\"\n    \"  Median: {:.2f}\\n\"\n    \"  StdDev: {:.2f}\\n\"\n).format(mean_data1, median_data1, std_data1, mean_data2, median_data2, std_data2)\nax2.text(0.05, 0.5, stats_text, fontsize=11, va='center', family='monospace')\n\n# -----------------------------------------------------------------------------\n# Section 3: Detailed Analysis (Bottom)\nax3 = fig.add_subplot(gs[1, :])\n# Plot data trends along with trend lines\nax3.plot(t, data1, label='Dataset 1', marker='o', markersize=3, linestyle='-', color='blue')\nax3.plot(t, data2, label='Dataset 2', marker='s', markersize=3, linestyle='-', color='green')\n\n# Fit simple linear trend lines for each dataset\ncoeffs1 = np.polyfit(t, data1, 1)\ntrend1 = np.poly1d(coeffs1)(t)\ncoeffs2 = np.polyfit(t, data2, 1)\ntrend2 = np.poly1d(coeffs2)(t)\n\nax3.plot(t, trend1, '--', label='Trend Line 1', color='navy')\nax3.plot(t, trend2, '--', label='Trend Line 2', color='darkgreen')\n\nax3.set_title('Detailed Comparative Analysis')\nax3.set_xlabel('Time (s)')\nax3.set_ylabel('Value')\nax3.legend(loc='lower right')\nax3.grid(True, linestyle='--', color='gray', alpha=0.5)\n\n# Add annotations to highlight specific time points in analysis.\n# Mark the maximum value in Dataset1\nmax_index = np.argmax(data1)\nax3.annotate('Max Data1', xy=(t[max_index], data1[max_index]), \n             xytext=(t[max_index]+0.5, data1[max_index]+0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='blue'), color='blue')\n\n# Mark the minimum value in Dataset2\nmin_index = np.argmin(data2)\nax3.annotate('Min Data2', xy=(t[min_index], data2[min_index]), \n             xytext=(t[min_index]-1, data2[min_index]-0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='green'), color='green')\n\n# -----------------------------------------------------------------------------\n# Overall Title and Footer\nfig.suptitle('Visualization Report: Structural Layout & Data Inspection', fontsize=16, fontweight='bold', y=0.98)\nfig.text(0.5, 0.01, 'Report generated by Matplotlib Visualizer', ha='center', fontsize=10, style='italic')\n\n# -----------------------------------------------------------------------------\n# Save or display the figure\nplt.tight_layout()\nplt.show()\n</code>",
            "feature_requirements": "• The output must render a multi-panel layout consisting of three distinct sections: a top left panel titled “Data Overview”, a top right panel titled “Statistical Summary”, and a bottom panel spanning the full width titled “Detailed Comparative Analysis.”\n\n• The “Data Overview” section must display two overlaid line plots: one representing Dataset 1 in blue and the other representing Dataset 2 in green, along with labeled axes (“Time (s)” for the x-axis and “Amplitude” for the y-axis).\n\n• A legend must appear in the “Data Overview” panel (positioned toward the upper right) that identifies each dataset by its name.\n\n• A text annotation within the “Data Overview” section must list key points (formatted as a multi-line list, e.g., “- Sinusoidal trend” and “- Noisy signal”) placed within a visible bordered or highlighted box.\n\n• The “Statistical Summary” section must present a formatted block of monospace text that includes headers and numerical values (with labels for Mean, Median, and StdDev) for both Dataset 1 and Dataset 2 in a table-like format.\n\n• The “Detailed Comparative Analysis” section must display detailed plots with markers (circles for Dataset 1 and squares for Dataset 2) and overlaid dashed trend lines (one in navy for Dataset 1 and one in dark green for Dataset 2), along with axes labeled “Time (s)” and “Value.”\n\n• A legend for the “Detailed Comparative Analysis” panel should be included (positioned toward the lower right), clearly identifying the plotted datasets and their corresponding trend lines.\n\n• Annotation arrows must be present in the “Detailed Comparative Analysis” section to indicate the maximum value for Dataset 1 (marked with “Max Data1”) and the minimum value for Dataset 2 (marked with “Min Data2”).\n\n• The overall figure must include a super title at the top stating “Visualization Report: Structural Layout & Data Inspection” and a footer text at the bottom center stating “Report generated by Matplotlib Visualizer.”",
            "task_id": "08XX75",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall figure's super title?",
                "How many panels are displayed in the layout?",
                "What are the titles of the three panels?",
                "In the Data Overview panel, what are the colors of the line plots for Dataset 1 and Dataset 2?",
                "What labels are used for the axes in the Data Overview panel?",
                "What items are listed in the annotation box within the Data Overview panel?",
                "How is the Statistical Summary panel formatted in terms of text style?",
                "Which markers and trend line styles are used for Dataset 1 and Dataset 2 in the Detailed Comparative Analysis panel?",
                "Where is the legend placed within the Detailed Comparative Analysis panel and what does it identify?",
                "What footer text is displayed at the bottom center of the overall figure?"
            ],
            "VQA_answers": [
                "Visualization Report: Structural Layout & Data Inspection",
                "Three",
                "Data Overview, Statistical Summary, Detailed Comparative Analysis",
                "Blue for Dataset 1 and Green for Dataset 2",
                "Time (s) for the x-axis and Amplitude for the y-axis",
                "• Sinusoidal trend and • Noisy signal",
                "It is presented in a monospace (formatted block) style",
                "Circles for Dataset 1 with a dashed navy trend line, and squares for Dataset 2 with a dashed dark green trend line",
                "At the lower right, identifying the plotted datasets and their corresponding trend lines",
                "Report generated by Matplotlib Visualizer"
            ],
            "raw_output_metric": [
                "Data Overview",
                "Statistical Summary",
                "Detailed Comparative Analysis",
                "Time (s)",
                "Amplitude",
                "Dataset 1",
                "Dataset 2",
                "- Sinusoidal trend",
                "- Noisy signal",
                "Mean",
                "Median",
                "StdDev",
                "Value",
                "circle",
                "square",
                "dashed",
                "navy",
                "dark green",
                "Max Data1",
                "Min Data2",
                "Visualization Report: Structural Layout & Data Inspection",
                "Report generated by Matplotlib Visualizer"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX75_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\n# =============================================================================\n# Visualization Report: Data Overview and Detailed Analysis\n# =============================================================================\n#\n# This script generates a multi-panel report using Matplotlib.\n# It includes:\n#   - Report headings and sections\n#   - Subplots with labeled axes\n#   - Lists of key statistics\n#   - Annotated values and formatted content\n#\n# Sections:\n#   1. Data Overview (Top left): Shows raw data trends.\n#   2. Statistical Summary (Top right): Displays key statistics.\n#   3. Detailed Analysis (Bottom full-width): Contains side-by-side comparisons.\n#\n# Key labeled values:\n#   * Mean, Median, Std Dev for each dataset.\n#   * Trend lines and annotation markers.\n# =============================================================================\n\n# Generate sample data\nnp.random.seed(42)\nt = np.linspace(0, 10, 100)\ndata1 = np.sin(t) + np.random.normal(0, 0.2, size=t.shape)\ndata2 = np.cos(t) + np.random.normal(0, 0.2, size=t.shape)\n\n# Calculate key statistics\nmean_data1 = np.mean(data1)\nmedian_data1 = np.median(data1)\nstd_data1 = np.std(data1)\n\nmean_data2 = np.mean(data2)\nmedian_data2 = np.median(data2)\nstd_data2 = np.std(data2)\n\n# Create a new figure with specified dimensions\nfig = plt.figure(constrained_layout=True, figsize=(10, 8))\ngs = GridSpec(ncols=2, nrows=2, figure=fig, height_ratios=[1, 1.2])\n\n# -----------------------------------------------------------------------------\n# Section 1: Data Overview (Top Left)\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(t, data1, label='Dataset 1', color='blue', linewidth=1.5)\nax1.plot(t, data2, label='Dataset 2', color='green', linewidth=1.5)\nax1.set_title('Data Overview')\nax1.set_xlabel('Time (s)')\nax1.set_ylabel('Amplitude')\nax1.legend(loc='upper right')\nax1.grid(True, linestyle='--', alpha=0.6)\nax1.text(1, np.max(data1) - 0.4, 'Key Points:\\n- Sinusoidal trend\\n- Noisy signal', \n         bbox=dict(facecolor='white', alpha=0.7))\n\n# -----------------------------------------------------------------------------\n# Section 2: Statistical Summary (Top Right)\nax2 = fig.add_subplot(gs[0, 1])\n# Create a table-like structure using text annotations\nax2.axis('off')\nstats_text = (\n    \"Statistical Summary\\n\"\n    \"-----------------------------\\n\"\n    \"Dataset 1:\\n\"\n    \"  Mean:   {:.2f}\\n\"\n    \"  Median: {:.2f}\\n\"\n    \"  StdDev: {:.2f}\\n\\n\"\n    \"Dataset 2:\\n\"\n    \"  Mean:   {:.2f}\\n\"\n    \"  Median: {:.2f}\\n\"\n    \"  StdDev: {:.2f}\\n\"\n).format(mean_data1, median_data1, std_data1, mean_data2, median_data2, std_data2)\nax2.text(0.05, 0.5, stats_text, fontsize=11, va='center', family='monospace')\n\n# -----------------------------------------------------------------------------\n# Section 3: Detailed Analysis (Bottom)\nax3 = fig.add_subplot(gs[1, :])\n# Plot data trends along with trend lines\nax3.plot(t, data1, label='Dataset 1', marker='o', markersize=3, linestyle='-', color='blue')\nax3.plot(t, data2, label='Dataset 2', marker='s', markersize=3, linestyle='-', color='green')\n\n# Fit simple linear trend lines for each dataset\ncoeffs1 = np.polyfit(t, data1, 1)\ntrend1 = np.poly1d(coeffs1)(t)\ncoeffs2 = np.polyfit(t, data2, 1)\ntrend2 = np.poly1d(coeffs2)(t)\n\nax3.plot(t, trend1, '--', label='Trend Line 1', color='navy')\nax3.plot(t, trend2, '--', label='Trend Line 2', color='darkgreen')\n\nax3.set_title('Detailed Comparative Analysis')\nax3.set_xlabel('Time (s)')\nax3.set_ylabel('Value')\nax3.legend(loc='lower right')\nax3.grid(True, linestyle='--', color='gray', alpha=0.5)\n\n# Add annotations to highlight specific time points in analysis.\n# Mark the maximum value in Dataset1\nmax_index = np.argmax(data1)\nax3.annotate('Max Data1', xy=(t[max_index], data1[max_index]), \n             xytext=(t[max_index]+0.5, data1[max_index]+0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='blue'), color='blue')\n\n# Mark the minimum value in Dataset2\nmin_index = np.argmin(data2)\nax3.annotate('Min Data2', xy=(t[min_index], data2[min_index]), \n             xytext=(t[min_index]-1, data2[min_index]-0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='green'), color='green')\n\n# -----------------------------------------------------------------------------\n# Overall Title and Footer\nfig.suptitle('Visualization Report: Structural Layout & Data Inspection', fontsize=16, fontweight='bold', y=0.98)\nfig.text(0.5, 0.01, 'Report generated by Matplotlib Visualizer', ha='center', fontsize=10, style='italic')\n\n# -----------------------------------------------------------------------------\n# Save or display the figure\nplt.tight_layout()\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX75_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Overview",
                                "Statistical Summary",
                                "Detailed Comparative Analysis",
                                "Time (s)",
                                "Amplitude",
                                "Dataset 1",
                                "Dataset 2",
                                "- Sinusoidal trend",
                                "- Noisy signal",
                                "Mean",
                                "Median",
                                "StdDev",
                                "Value",
                                "circle",
                                "square",
                                "dashed",
                                "navy",
                                "dark green",
                                "Max Data1",
                                "Min Data2",
                                "Visualization Report: Structural Layout & Data Inspection",
                                "Report generated by Matplotlib Visualizer"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX75_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX75_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall figure's super title?",
                                "How many panels are displayed in the layout?",
                                "What are the titles of the three panels?",
                                "In the Data Overview panel, what are the colors of the line plots for Dataset 1 and Dataset 2?",
                                "What labels are used for the axes in the Data Overview panel?",
                                "What items are listed in the annotation box within the Data Overview panel?",
                                "How is the Statistical Summary panel formatted in terms of text style?",
                                "Which markers and trend line styles are used for Dataset 1 and Dataset 2 in the Detailed Comparative Analysis panel?",
                                "Where is the legend placed within the Detailed Comparative Analysis panel and what does it identify?",
                                "What footer text is displayed at the bottom center of the overall figure?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX75_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Visualization Report: Structural Layout & Data Inspection",
                                "Three",
                                "Data Overview, Statistical Summary, Detailed Comparative Analysis",
                                "Blue for Dataset 1 and Green for Dataset 2",
                                "Time (s) for the x-axis and Amplitude for the y-axis",
                                "• Sinusoidal trend and • Noisy signal",
                                "It is presented in a monospace (formatted block) style",
                                "Circles for Dataset 1 with a dashed navy trend line, and squares for Dataset 2 with a dashed dark green trend line",
                                "At the lower right, identifying the plotted datasets and their corresponding trend lines",
                                "Report generated by Matplotlib Visualizer"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Initialize Data and Figure\n# =============================================================================\n\n# Generate x values for the functions\nx = np.linspace(0, 2 * np.pi, 400)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\ny_tan = np.tan(x)\n# Clip tan values to avoid large jumps for visualization\ny_tan = np.clip(y_tan, -5, 5)\n\n# Data for the bar chart in Section D\ncategories = ['Alpha', 'Beta', 'Gamma', 'Delta']\nvalues = [24, 37, 19, 45]\n\n# Create a figure with a 2x2 grid of subplots\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))\nfig.suptitle('Main Visualization Report', fontsize=18, fontweight='bold', color='navy', y=0.97)\n\n# =============================================================================\n# Section A: Sine Wave Analysis\n# =============================================================================\n\nax1 = axes[0,0]\nax1.plot(x, y_sin, color='blue', linewidth=2, label='y = sin(x)')\nax1.set_title('Section A: Sine Wave', fontsize=14, fontweight='bold')\nax1.set_xlabel('Angle (radians)')\nax1.set_ylabel('Amplitude')\nax1.grid(True, linestyle='--', alpha=0.7)\n\n# Insert a text box with detailed bullet list\ntextstr = ('Key Points:\\n'\n           u'\\u2022 Smooth periodic behavior\\n'\n           u'\\u2022 Range: [-1, 1]\\n'\n           u'\\u2022 Zero crossings at: 0, \\u03C0, 2\\u03C0')\nprops = dict(boxstyle='round', facecolor='lightblue', alpha=0.5)\nax1.text(0.05, 0.95, textstr, transform=ax1.transAxes, fontsize=10,\n         verticalalignment='top', bbox=props)\n\nax1.legend(loc='upper right')\n\n# =============================================================================\n# Section B: Cosine Wave Analysis\n# =============================================================================\n\nax2 = axes[0,1]\nax2.plot(x, y_cos, color='red', linewidth=2, linestyle='--', label='y = cos(x)')\nax2.set_title('Section B: Cosine Wave', fontsize=14, fontweight='bold')\nax2.set_xlabel('Angle (radians)')\nax2.set_ylabel('Amplitude')\nax2.grid(True, linestyle='-.', alpha=0.7)\n\n# Annotate with a list of properties\nannotation_text = ('Properties:\\n'\n                   '1. Begins at y=1\\n'\n                   '2. Range: [-1, 1]\\n'\n                   '3. Maximum at 0, Minimum at \\u03C0')\nax2.annotate(annotation_text, xy=(0.5, 0.5), xycoords='data',\n             fontsize=10, bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\", alpha=0.7),\n             ha='center')\n\nax2.legend(loc='upper left')\n\n# =============================================================================\n# Section C: Tangent Function Overview (Clipped)\n# =============================================================================\n\nax3 = axes[1,0]\nax3.plot(x, y_tan, color='green', linewidth=2, label='y = tan(x) (clipped)')\nax3.set_title('Section C: Tangent Overview', fontsize=14, fontweight='bold')\nax3.set_xlabel('Angle (radians)')\nax3.set_ylabel('Tangent Value')\nax3.grid(True, linestyle=':', alpha=0.7)\n\n# Add multiple textual annotations inside the plot\nannotations = [\n    \"Note: Clipping applied to avoid asymptotic spikes.\",\n    \"Observation:\",\n    \"   \\u2022 Rapid changes near ±\\u03C0/2\",\n    \"   \\u2022 Controlled display with limits [-5, 5]\"\n]\ny_text = 0.95\nfor line in annotations:\n    ax3.text(0.05, y_text, line, transform=ax3.transAxes, fontsize=9, color='darkgreen')\n    y_text -= 0.07\n\nax3.legend(loc='lower right')\n\n# =============================================================================\n# Section D: Statistical Summary (Bar Chart)\n# =============================================================================\n\nax4 = axes[1,1]\nbars = ax4.bar(categories, values, color=['orange', 'purple', 'teal', 'brown'], edgecolor='black')\nax4.set_title('Section D: Summary Data', fontsize=14, fontweight='bold')\nax4.set_xlabel('Categories')\nax4.set_ylabel('Values')\nax4.grid(axis='y', linestyle='--', alpha=0.6)\n\n# Attach a text label above each bar, displaying its height as labeled value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.text(bar.get_x() + bar.get_width()/2.0, height + 1,\n             f'{height}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Additional textual content in the bar chart area\nsummary_text = (\"Summary Statistics:\\n\"\n                \"• Total Categories: 4\\n\"\n                \"• Highest Value: 45\\n\"\n                \"• Lowest Value: 19\")\nax4.text(0.05, 0.05, summary_text, transform=ax4.transAxes, fontsize=9,\n         bbox=dict(facecolor='lightgrey', alpha=0.5))\n\n# =============================================================================\n# Layout Adjustments and Display\n# =============================================================================\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n</code>",
            "feature_requirements": "• The output must display an overall title “Main Visualization Report” at the top with a bold, large (approximately 18-point) font in navy color.  \n• The visualization should be divided into a 2×2 grid of panels (subfigures), each clearly separated and labeled.  \n• In the top‐left panel (Section A: Sine Wave), a blue line representing y = sin(x) is plotted with a thicker stroke, accompanied by labeled x-axis (“Angle (radians)”) and y-axis (“Amplitude”), a grid with dashed lines, and an internal text box listing bullet points (e.g., “Smooth periodic behavior”, “Range: [-1, 1]”, “Zero crossings at: 0, π, 2π”).  \n• In the top‐right panel (Section B: Cosine Wave), a red dashed line representing y = cos(x) is drawn with similar axis labels and grid (using dash‐dot styling); an annotation with a rounded white box and gray border is placed near the center containing a numbered list of properties (such as “Begins at y=1”, “Range: [-1, 1]”, “Maximum at 0, Minimum at π”).  \n• In the bottom‐left panel (Section C: Tangent Overview), a green line representing a clipped tangent function (y = tan(x) with limits –5 to 5) is shown with labeled axes (“Angle (radians)” and “Tangent Value”), a grid with dotted lines, and multiple text annotations placed sequentially in the plotting area that list observations (including a note about clipping and bullet points regarding rapid changes near ±π/2 and display limits).  \n• In the bottom‐right panel (Section D: Summary Data), a bar chart is depicted with four bars corresponding to the categories “Alpha,” “Beta,” “Gamma,” and “Delta” having values 24, 37, 19, and 45 respectively; each bar should be rendered in distinct colors (e.g., orange, purple, teal, brown) with a black edge, and each bar must have its numerical value displayed just above it.  \n• The bar chart panel must also include an additional text block (within a light grey box) with summary statistics listing items like “Total Categories: 4”, “Highest Value: 45”, and “Lowest Value: 19”.  \n• All panels should include legends positioned appropriately (upper right for Section A, upper left for Section B, lower right for Section C) that clearly link the plotted data to its label.  \n• The overall layout should have balanced spacing between subfigures, resembling a tightly arranged grid without overlapping elements.",
            "task_id": "08XX76",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title displayed at the top of the visualization?",
                "How is the overall visualization layout organized?",
                "Which section shows the sine wave and what are its key visual features?",
                "What color and line style is used for the cosine wave in Section B?",
                "What unique annotation is present in the cosine wave panel?",
                "How is the tangent function depicted in Section C and what specific note is included?",
                "How many bars are shown in the bar chart of Section D and which categories do they represent?",
                "What visual style is applied to the bars in the bar chart?",
                "What additional text content appears in the bar chart panel (Section D)?",
                "Where are the legends located in the visualization panels?"
            ],
            "VQA_answers": [
                "Main Visualization Report in bold, large (~18-point) navy font",
                "A 2×2 grid of panels (subfigures)",
                "Section A: Sine Wave; it features a blue line for y = sin(x) with a thicker stroke, labeled axes ('Angle (radians)' and 'Amplitude'), a grid with dashed lines, and an internal text box listing bullet points",
                "Red dashed line (with dash‐dot styled grid) for y = cos(x)",
                "A rounded white box with a gray border containing a numbered list of properties",
                "Section C: Tangent Overview displays a green line for a clipped tangent function (y = tan(x) limited to –5 to 5) with text annotations noting clipping and bullet points regarding rapid changes near ±π/2",
                "Four bars representing the categories 'Alpha', 'Beta', 'Gamma', and 'Delta'",
                "They are rendered in distinct colors (orange, purple, teal, brown) with a black edge and numerical values displayed just above each bar",
                "A text block inside a light grey box with summary statistics ('Total Categories: 4', 'Highest Value: 45', 'Lowest Value: 19')",
                "Section A: upper right, Section B: upper left, Section C: lower right"
            ],
            "raw_output_metric": [
                "Main Visualization Report",
                "Section A: Sine Wave",
                "y = sin(x)",
                "Angle (radians)",
                "Amplitude",
                "Smooth periodic behavior",
                "Range: [-1, 1]",
                "Zero crossings at: 0, π, 2π",
                "Section B: Cosine Wave",
                "y = cos(x)",
                "Begins at y=1",
                "Maximum at 0, Minimum at π",
                "Section C: Tangent Overview",
                "y = tan(x)",
                "Tangent Value",
                "clipping",
                "rapid changes near ±π/2",
                "display limits",
                "Section D: Summary Data",
                "Alpha",
                "Beta",
                "Gamma",
                "Delta",
                "24",
                "37",
                "19",
                "45",
                "Total Categories: 4",
                "Highest Value: 45",
                "Lowest Value: 19"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX76_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Initialize Data and Figure\n# =============================================================================\n\n# Generate x values for the functions\nx = np.linspace(0, 2 * np.pi, 400)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\ny_tan = np.tan(x)\n# Clip tan values to avoid large jumps for visualization\ny_tan = np.clip(y_tan, -5, 5)\n\n# Data for the bar chart in Section D\ncategories = ['Alpha', 'Beta', 'Gamma', 'Delta']\nvalues = [24, 37, 19, 45]\n\n# Create a figure with a 2x2 grid of subplots\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))\nfig.suptitle('Main Visualization Report', fontsize=18, fontweight='bold', color='navy', y=0.97)\n\n# =============================================================================\n# Section A: Sine Wave Analysis\n# =============================================================================\n\nax1 = axes[0,0]\nax1.plot(x, y_sin, color='blue', linewidth=2, label='y = sin(x)')\nax1.set_title('Section A: Sine Wave', fontsize=14, fontweight='bold')\nax1.set_xlabel('Angle (radians)')\nax1.set_ylabel('Amplitude')\nax1.grid(True, linestyle='--', alpha=0.7)\n\n# Insert a text box with detailed bullet list\ntextstr = ('Key Points:\\n'\n           u'\\u2022 Smooth periodic behavior\\n'\n           u'\\u2022 Range: [-1, 1]\\n'\n           u'\\u2022 Zero crossings at: 0, \\u03C0, 2\\u03C0')\nprops = dict(boxstyle='round', facecolor='lightblue', alpha=0.5)\nax1.text(0.05, 0.95, textstr, transform=ax1.transAxes, fontsize=10,\n         verticalalignment='top', bbox=props)\n\nax1.legend(loc='upper right')\n\n# =============================================================================\n# Section B: Cosine Wave Analysis\n# =============================================================================\n\nax2 = axes[0,1]\nax2.plot(x, y_cos, color='red', linewidth=2, linestyle='--', label='y = cos(x)')\nax2.set_title('Section B: Cosine Wave', fontsize=14, fontweight='bold')\nax2.set_xlabel('Angle (radians)')\nax2.set_ylabel('Amplitude')\nax2.grid(True, linestyle='-.', alpha=0.7)\n\n# Annotate with a list of properties\nannotation_text = ('Properties:\\n'\n                   '1. Begins at y=1\\n'\n                   '2. Range: [-1, 1]\\n'\n                   '3. Maximum at 0, Minimum at \\u03C0')\nax2.annotate(annotation_text, xy=(0.5, 0.5), xycoords='data',\n             fontsize=10, bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\", alpha=0.7),\n             ha='center')\n\nax2.legend(loc='upper left')\n\n# =============================================================================\n# Section C: Tangent Function Overview (Clipped)\n# =============================================================================\n\nax3 = axes[1,0]\nax3.plot(x, y_tan, color='green', linewidth=2, label='y = tan(x) (clipped)')\nax3.set_title('Section C: Tangent Overview', fontsize=14, fontweight='bold')\nax3.set_xlabel('Angle (radians)')\nax3.set_ylabel('Tangent Value')\nax3.grid(True, linestyle=':', alpha=0.7)\n\n# Add multiple textual annotations inside the plot\nannotations = [\n    \"Note: Clipping applied to avoid asymptotic spikes.\",\n    \"Observation:\",\n    \"   \\u2022 Rapid changes near ±\\u03C0/2\",\n    \"   \\u2022 Controlled display with limits [-5, 5]\"\n]\ny_text = 0.95\nfor line in annotations:\n    ax3.text(0.05, y_text, line, transform=ax3.transAxes, fontsize=9, color='darkgreen')\n    y_text -= 0.07\n\nax3.legend(loc='lower right')\n\n# =============================================================================\n# Section D: Statistical Summary (Bar Chart)\n# =============================================================================\n\nax4 = axes[1,1]\nbars = ax4.bar(categories, values, color=['orange', 'purple', 'teal', 'brown'], edgecolor='black')\nax4.set_title('Section D: Summary Data', fontsize=14, fontweight='bold')\nax4.set_xlabel('Categories')\nax4.set_ylabel('Values')\nax4.grid(axis='y', linestyle='--', alpha=0.6)\n\n# Attach a text label above each bar, displaying its height as labeled value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.text(bar.get_x() + bar.get_width()/2.0, height + 1,\n             f'{height}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Additional textual content in the bar chart area\nsummary_text = (\"Summary Statistics:\\n\"\n                \"• Total Categories: 4\\n\"\n                \"• Highest Value: 45\\n\"\n                \"• Lowest Value: 19\")\nax4.text(0.05, 0.05, summary_text, transform=ax4.transAxes, fontsize=9,\n         bbox=dict(facecolor='lightgrey', alpha=0.5))\n\n# =============================================================================\n# Layout Adjustments and Display\n# =============================================================================\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX76_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Visualization Report",
                                "Section A: Sine Wave",
                                "y = sin(x)",
                                "Angle (radians)",
                                "Amplitude",
                                "Smooth periodic behavior",
                                "Range: [-1, 1]",
                                "Zero crossings at: 0, π, 2π",
                                "Section B: Cosine Wave",
                                "y = cos(x)",
                                "Begins at y=1",
                                "Maximum at 0, Minimum at π",
                                "Section C: Tangent Overview",
                                "y = tan(x)",
                                "Tangent Value",
                                "clipping",
                                "rapid changes near ±π/2",
                                "display limits",
                                "Section D: Summary Data",
                                "Alpha",
                                "Beta",
                                "Gamma",
                                "Delta",
                                "24",
                                "37",
                                "19",
                                "45",
                                "Total Categories: 4",
                                "Highest Value: 45",
                                "Lowest Value: 19"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX76_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX76_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title displayed at the top of the visualization?",
                                "How is the overall visualization layout organized?",
                                "Which section shows the sine wave and what are its key visual features?",
                                "What color and line style is used for the cosine wave in Section B?",
                                "What unique annotation is present in the cosine wave panel?",
                                "How is the tangent function depicted in Section C and what specific note is included?",
                                "How many bars are shown in the bar chart of Section D and which categories do they represent?",
                                "What visual style is applied to the bars in the bar chart?",
                                "What additional text content appears in the bar chart panel (Section D)?",
                                "Where are the legends located in the visualization panels?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX76_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Visualization Report in bold, large (~18-point) navy font",
                                "A 2×2 grid of panels (subfigures)",
                                "Section A: Sine Wave; it features a blue line for y = sin(x) with a thicker stroke, labeled axes ('Angle (radians)' and 'Amplitude'), a grid with dashed lines, and an internal text box listing bullet points",
                                "Red dashed line (with dash‐dot styled grid) for y = cos(x)",
                                "A rounded white box with a gray border containing a numbered list of properties",
                                "Section C: Tangent Overview displays a green line for a clipped tangent function (y = tan(x) limited to –5 to 5) with text annotations noting clipping and bullet points regarding rapid changes near ±π/2",
                                "Four bars representing the categories 'Alpha', 'Beta', 'Gamma', and 'Delta'",
                                "They are rendered in distinct colors (orange, purple, teal, brown) with a black edge and numerical values displayed just above each bar",
                                "A text block inside a light grey box with summary statistics ('Total Categories: 4', 'Highest Value: 45', 'Lowest Value: 19')",
                                "Section A: upper right, Section B: upper left, Section C: lower right"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Section 1: Initialize Data and Global Settings\n# =============================================================================\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny_line = np.sin(x)\ny_scatter = np.random.rand(50) * 10\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [5, 7, 3, 8, 4]\n\nplt.rcParams.update({\n    'font.size': 10,\n    'axes.titlesize': 12,\n    'axes.labelsize': 10,\n    'xtick.labelsize': 8,\n    'ytick.labelsize': 8\n})\n\n# =============================================================================\n# Section 2: Create Figure and Subplots Layout\n# =============================================================================\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle('Comprehensive Data Visualization Report', fontsize=16, fontweight='bold')\n\n# -----------------------------------------------------------------------------\n# Subplot 1: Line Plot (Top Left)\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y_line, marker='o', linestyle='-', color='b', label='sin(x)')\nax1.set_title('Section 1.1: Line Plot')\nax1.set_xlabel('X-axis (units)')\nax1.set_ylabel('sin(X)')\nax1.legend()\nax1.grid(True)\n\n# Add additional text annotation for header info\nax1.text(0.05, 0.95, 'Data Source: Generated\\nMethod: Sinusoidal Function', \n         transform=ax1.transAxes, fontsize=8, verticalalignment='top',\n         bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))\n\n# -----------------------------------------------------------------------------\n# Subplot 2: Bar Chart (Top Right)\nax2 = fig.add_subplot(2, 2, 2)\nbars = ax2.bar(categories, values, color=['red', 'green', 'blue', 'cyan', 'magenta'])\nax2.set_title('Section 1.2: Bar Chart of Category Values')\nax2.set_xlabel('Categories')\nax2.set_ylabel('Values')\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2.0, height + 0.2, f'{height}', \n             ha='center', va='bottom', fontsize=8)\n\n# -----------------------------------------------------------------------------\n# Subplot 3: Scatter Plot (Bottom Left)\nax3 = fig.add_subplot(2, 2, 3)\nscatter = ax3.scatter(x, y_scatter, c=y_scatter, cmap='viridis', marker='^')\nax3.set_title('Section 2.1: Scatter Plot Analysis')\nax3.set_xlabel('X-axis (units)')\nax3.set_ylabel('Random Values')\ncbar = plt.colorbar(scatter, ax=ax3)\ncbar.set_label('Value Intensity')\n\n# Add structured label area inside plot\nax3.text(0.5, 0.05, 'Note: Random distribution scaled between 0 and 10', \n         transform=ax3.transAxes, fontsize=8, ha='center', bbox=dict(facecolor='lavender', alpha=0.7))\n\n# -----------------------------------------------------------------------------\n# Subplot 4: Tabular Data and Annotation (Bottom Right)\nax4 = fig.add_subplot(2, 2, 4)\nax4.axis('tight')\nax4.axis('off')\ntable_data = [\n    [\"Metric\", \"Value\", \"Description\"],\n    [\"Mean\", f\"{np.round(np.mean(y_scatter),2)}\", \"Average of random data\"],\n    [\"Std Dev\", f\"{np.round(np.std(y_scatter),2)}\", \"Standard Deviation\"],\n    [\"Max\", f\"{np.round(np.max(y_scatter),2)}\", \"Maximum value\"],\n    [\"Min\", f\"{np.round(np.min(y_scatter),2)}\", \"Minimum value\"],\n]\ntable = ax4.table(cellText=table_data, colLabels=None, cellLoc='center', loc='center')\ntable.auto_set_font_size(False)\ntable.set_fontsize(8)\nax4.set_title('Section 2.2: Statistical Summary', pad=20)\n\n# =============================================================================\n# Section 3: Final Layout Adjustments and Annotations\n# =============================================================================\n# Adding overall footer note on the figure\nfig.text(0.5, 0.02, 'Report generated on: 2023-10-xx | Author: Data Visualization Team', \n         ha='center', fontsize=9, color='gray')\n\n# Adding a decorative border around the entire figure\nfor spine in fig.gca().spines.values():\n    spine.set_edgecolor('black')\n    spine.set_linewidth(1.2)\n\n# Optimize layout spacing\nplt.tight_layout(rect=[0, 0.04, 1, 0.96])\n\n# =============================================================================\n# Section 4: Save or Display the Figure\n# =============================================================================\nif __name__ == '__main__':\n    plt.show()\n</code>",
            "feature_requirements": "• The output must render a main title at the top reading \"Comprehensive Data Visualization Report\" with a noticeably larger font and bold styling.  \n• The output will be divided into a 2×2 grid of subplots, each clearly separated into four distinct sections.  \n• The top‐left subplot must depict a line plot titled \"Section 1.1: Line Plot\" with axes labeled \"X-axis (units)\" and \"sin(X)\", include a blue line plot with markers, a legend labeled \"sin(x)\", and an additional text annotation detailing \"Data Source: Generated\" and \"Method: Sinusoidal Function\" inside the plot.  \n• The top‐right subplot must display a bar chart titled \"Section 1.2: Bar Chart of Category Values\" with x-axis labeled \"Categories\" and y-axis labeled \"Values\", showing bars for five categories (A, B, C, D, E) colored red, green, blue, cyan, and magenta respectively, with each bar annotated on top with its numeric value.  \n• The bottom‐left subplot must render a scatter plot titled \"Section 2.1: Scatter Plot Analysis\" with axes labeled \"X-axis (units)\" and \"Random Values\", featuring data points plotted with a triangle marker and a color mapping (using a viridis scheme), accompanied by a colorbar labeled \"Value Intensity\" and an in-plot text note \"Note: Random distribution scaled between 0 and 10\".  \n• The bottom‐right subplot must present a table under the title \"Section 2.2: Statistical Summary\" that is centered within the plot area, with rows for metrics \"Mean\", \"Std Dev\", \"Max\", and \"Min\" accompanied by two-decimal rounded values and a brief description in each row; the table should include a header row containing column labels \"Metric\", \"Value\", and \"Description\".  \n• A footer text must appear across the bottom of the figure indicating \"Report generated on: 2023-10-xx | Author: Data Visualization Team\" in a smaller, gray-colored font.  \n• The entire figure should feature a decorative border outlining the whole layout.  \n• The layout must be optimized to ensure adequate spacing between subplots, titles, and annotations, mimicking the neatly adjusted layout seen in the original code.",
            "task_id": "08XX77",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title at the top of the report?",
                "How many subplot sections are arranged in the grid?",
                "What is the title of the top‐left subplot?",
                "What additional text annotations appear inside the top‐left subplot?",
                "What labels are used for the x-axis and y-axis in the top‐right bar chart?",
                "How many categories are depicted in the top‐right bar chart and what are they?",
                "What marker shape and color scheme are used in the bottom‐left scatter plot?",
                "What column headers are present in the table of the bottom‐right subplot?"
            ],
            "VQA_answers": [
                "Comprehensive Data Visualization Report",
                "4",
                "Section 1.1: Line Plot",
                "Data Source: Generated and Method: Sinusoidal Function",
                "x-axis: Categories and y-axis: Values",
                "Five; A, B, C, D, E",
                "Triangle marker with a viridis color scheme",
                "Metric, Value, and Description"
            ],
            "raw_output_metric": [
                "Comprehensive Data Visualization Report",
                "Section 1.1: Line Plot",
                "X-axis (units)",
                "sin(X)",
                "sin(x)",
                "Data Source: Generated",
                "Method: Sinusoidal Function",
                "Section 1.2: Bar Chart of Category Values",
                "Categories",
                "Values",
                "A",
                "B",
                "C",
                "D",
                "E",
                "Section 2.1: Scatter Plot Analysis",
                "Random Values",
                "Value Intensity",
                "Note: Random distribution scaled between 0 and 10",
                "Section 2.2: Statistical Summary",
                "Metric",
                "Value",
                "Description",
                "Mean",
                "Std Dev",
                "Max",
                "Min",
                "Report generated on: 2023-10-xx | Author: Data Visualization Team"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX77_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Section 1: Initialize Data and Global Settings\n# =============================================================================\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny_line = np.sin(x)\ny_scatter = np.random.rand(50) * 10\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [5, 7, 3, 8, 4]\n\nplt.rcParams.update({\n    'font.size': 10,\n    'axes.titlesize': 12,\n    'axes.labelsize': 10,\n    'xtick.labelsize': 8,\n    'ytick.labelsize': 8\n})\n\n# =============================================================================\n# Section 2: Create Figure and Subplots Layout\n# =============================================================================\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle('Comprehensive Data Visualization Report', fontsize=16, fontweight='bold')\n\n# -----------------------------------------------------------------------------\n# Subplot 1: Line Plot (Top Left)\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y_line, marker='o', linestyle='-', color='b', label='sin(x)')\nax1.set_title('Section 1.1: Line Plot')\nax1.set_xlabel('X-axis (units)')\nax1.set_ylabel('sin(X)')\nax1.legend()\nax1.grid(True)\n\n# Add additional text annotation for header info\nax1.text(0.05, 0.95, 'Data Source: Generated\\nMethod: Sinusoidal Function', \n         transform=ax1.transAxes, fontsize=8, verticalalignment='top',\n         bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))\n\n# -----------------------------------------------------------------------------\n# Subplot 2: Bar Chart (Top Right)\nax2 = fig.add_subplot(2, 2, 2)\nbars = ax2.bar(categories, values, color=['red', 'green', 'blue', 'cyan', 'magenta'])\nax2.set_title('Section 1.2: Bar Chart of Category Values')\nax2.set_xlabel('Categories')\nax2.set_ylabel('Values')\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2.0, height + 0.2, f'{height}', \n             ha='center', va='bottom', fontsize=8)\n\n# -----------------------------------------------------------------------------\n# Subplot 3: Scatter Plot (Bottom Left)\nax3 = fig.add_subplot(2, 2, 3)\nscatter = ax3.scatter(x, y_scatter, c=y_scatter, cmap='viridis', marker='^')\nax3.set_title('Section 2.1: Scatter Plot Analysis')\nax3.set_xlabel('X-axis (units)')\nax3.set_ylabel('Random Values')\ncbar = plt.colorbar(scatter, ax=ax3)\ncbar.set_label('Value Intensity')\n\n# Add structured label area inside plot\nax3.text(0.5, 0.05, 'Note: Random distribution scaled between 0 and 10', \n         transform=ax3.transAxes, fontsize=8, ha='center', bbox=dict(facecolor='lavender', alpha=0.7))\n\n# -----------------------------------------------------------------------------\n# Subplot 4: Tabular Data and Annotation (Bottom Right)\nax4 = fig.add_subplot(2, 2, 4)\nax4.axis('tight')\nax4.axis('off')\ntable_data = [\n    [\"Metric\", \"Value\", \"Description\"],\n    [\"Mean\", f\"{np.round(np.mean(y_scatter),2)}\", \"Average of random data\"],\n    [\"Std Dev\", f\"{np.round(np.std(y_scatter),2)}\", \"Standard Deviation\"],\n    [\"Max\", f\"{np.round(np.max(y_scatter),2)}\", \"Maximum value\"],\n    [\"Min\", f\"{np.round(np.min(y_scatter),2)}\", \"Minimum value\"],\n]\ntable = ax4.table(cellText=table_data, colLabels=None, cellLoc='center', loc='center')\ntable.auto_set_font_size(False)\ntable.set_fontsize(8)\nax4.set_title('Section 2.2: Statistical Summary', pad=20)\n\n# =============================================================================\n# Section 3: Final Layout Adjustments and Annotations\n# =============================================================================\n# Adding overall footer note on the figure\nfig.text(0.5, 0.02, 'Report generated on: 2023-10-xx | Author: Data Visualization Team', \n         ha='center', fontsize=9, color='gray')\n\n# Adding a decorative border around the entire figure\nfor spine in fig.gca().spines.values():\n    spine.set_edgecolor('black')\n    spine.set_linewidth(1.2)\n\n# Optimize layout spacing\nplt.tight_layout(rect=[0, 0.04, 1, 0.96])\n\n# =============================================================================\n# Section 4: Save or Display the Figure\n# =============================================================================\nif __name__ == '__main__':\n    plt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX77_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "Section 1.1: Line Plot",
                                "X-axis (units)",
                                "sin(X)",
                                "sin(x)",
                                "Data Source: Generated",
                                "Method: Sinusoidal Function",
                                "Section 1.2: Bar Chart of Category Values",
                                "Categories",
                                "Values",
                                "A",
                                "B",
                                "C",
                                "D",
                                "E",
                                "Section 2.1: Scatter Plot Analysis",
                                "Random Values",
                                "Value Intensity",
                                "Note: Random distribution scaled between 0 and 10",
                                "Section 2.2: Statistical Summary",
                                "Metric",
                                "Value",
                                "Description",
                                "Mean",
                                "Std Dev",
                                "Max",
                                "Min",
                                "Report generated on: 2023-10-xx | Author: Data Visualization Team"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX77_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX77_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title at the top of the report?",
                                "How many subplot sections are arranged in the grid?",
                                "What is the title of the top‐left subplot?",
                                "What additional text annotations appear inside the top‐left subplot?",
                                "What labels are used for the x-axis and y-axis in the top‐right bar chart?",
                                "How many categories are depicted in the top‐right bar chart and what are they?",
                                "What marker shape and color scheme are used in the bottom‐left scatter plot?",
                                "What column headers are present in the table of the bottom‐right subplot?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX77_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "4",
                                "Section 1.1: Line Plot",
                                "Data Source: Generated and Method: Sinusoidal Function",
                                "x-axis: Categories and y-axis: Values",
                                "Five; A, B, C, D, E",
                                "Triangle marker with a viridis color scheme",
                                "Metric, Value, and Description"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ------------------------------\n# Section 1: Data Preparation\n# ------------------------------\n# Generate sample data for demonstration\nnp.random.seed(42)\nx = np.linspace(0, 10, 200)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# List of calculated labeled values for display\nlabeled_values = {\n    \"Mean sin(x)\": np.mean(y1),\n    \"Mean cos(x)\": np.mean(y2),\n    \"Std sin*cos\": np.std(y3)\n}\n\n# ------------------------------\n# Section 2: Plot Layout and Structure\n# ------------------------------\n# Create a figure with multiple subplots arranged in grid layout\nfig = plt.figure(constrained_layout=True, figsize=(12, 10))\ngs = fig.add_gridspec(3, 2)\n\n# Subplot 1: Main sine function\nax1 = fig.add_subplot(gs[0, :])\nax1.plot(x, y1, color=\"blue\", lw=2, label=\"sin(x)\")\nax1.set_title(\"Main Plot: sin(x) Analysis\", fontsize=14, fontweight=\"bold\")\nax1.set_xlabel(\"X Axis Value\")\nax1.set_ylabel(\"sin(x)\")\nax1.legend(loc=\"upper right\")\nax1.grid(True)\n\n# Annotate panel with a list of bullet points\nannotation_text = \"Key Observations:\\n\" \\\n                  \" - Periodic behavior is evident.\\n\" \\\n                  \" - Amplitude ~1.\\n\" \\\n                  \" - Phase shift not applicable.\"\nax1.text(0.02, 0.95, annotation_text, transform=ax1.transAxes,\n         fontsize=10, verticalalignment=\"top\",\n         bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\n# Subplot 2: cosine function\nax2 = fig.add_subplot(gs[1, 0])\nax2.plot(x, y2, color=\"green\", lw=2, label=\"cos(x)\")\nax2.set_title(\"Secondary Plot: cos(x)\", fontsize=12, fontweight=\"bold\")\nax2.set_xlabel(\"X Axis Value\")\nax2.set_ylabel(\"cos(x)\")\nax2.legend(loc=\"upper right\")\nax2.grid(True)\n\n# Subplot 3: Product of sine and cosine functions\nax3 = fig.add_subplot(gs[1, 1])\nax3.plot(x, y3, color=\"red\", lw=2, label=\"sin(x)*cos(x)\")\nax3.set_title(\"Product Analysis: sin(x) * cos(x)\", fontsize=12, fontweight=\"bold\")\nax3.set_xlabel(\"X Axis Value\")\nax3.set_ylabel(\"sin(x)*cos(x)\")\nax3.legend(loc=\"upper right\")\nax3.grid(True)\n\n# Subplot 4: Bar chart displaying labeled values from our analysis\nax4 = fig.add_subplot(gs[2, :])\ncategories = list(labeled_values.keys())\nvalues = list(labeled_values.values())\nbars = ax4.bar(categories, values, color=[\"skyblue\", \"lightgreen\", \"salmon\"])\nax4.set_title(\"Statistical Summary\", fontsize=12, fontweight=\"bold\")\nax4.set_ylabel(\"Computed Value\")\nax4.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\n# Annotate each bar with its exact value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.annotate(f'{height:.3f}',\n                 xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3),\n                 textcoords=\"offset points\",\n                 ha=\"center\", va=\"bottom\", fontsize=10)\n\n# ------------------------------\n# Section 3: Additional Annotations and Formatting\n# ------------------------------\n# Add a global title to the entire figure\nfig.suptitle(\"Comprehensive Analysis of Trigonometric Functions\", fontsize=16, fontweight=\"bold\", color=\"navy\")\n\n# Create an inset axis for extra notes\ninset_ax = fig.add_axes([0.65, 0.05, 0.3, 0.15])\ninset_text = (\"Notes:\\n\"\n              \"1. Data generated using numpy's linspace and trigonometric functions.\\n\"\n              \"2. All plots include gridlines for better readability.\\n\"\n              \"3. Example of structured layout with headings, sections,\\n\"\n              \"   and dynamically labeled values.\")\ninset_ax.text(0.05, 0.95, inset_text, fontsize=9, va=\"top\", color=\"darkslategray\")\ninset_ax.set_axis_off()  # No axis for note panel\n\n# ------------------------------\n# Section 4: Final Adjustments and Display\n# ------------------------------\n# Adjust overall layout parameters if needed\nplt.subplots_adjust(top=0.9, wspace=0.3, hspace=0.4)\n\n# Render the plots to a single page display\nplt.show()\n</code>",
            "feature_requirements": "• A main figure that contains multiple subplots arranged in a grid layout.  \n• A primary subplot displaying the sin(x) function with a blue line, title \"Main Plot: sin(x) Analysis\", x and y axis labels, a legend (showing \"sin(x)\"), gridlines, and an annotation box containing a multi-line list of key observations.  \n• A secondary subplot showing the cosine function with a green line, title \"Secondary Plot: cos(x)\", appropriate axis labels, a legend (showing \"cos(x)\"), and gridlines.  \n• A third subplot illustrating the product sin(x)*cos(x) with a red line, title \"Product Analysis: sin(x) * cos(x)\", proper axis labels, a legend (showing \"sin(x)*cos(x)\"), and gridlines.  \n• A fourth subplot rendering a bar chart labeled \"Statistical Summary\", where bars represent computed values (Mean sin(x), Mean cos(x), Std sin*cos) with distinct colors, y-axis label, gridlines on the y-axis, and each bar is annotated with its numeric value to three decimal places.  \n• A global title atop the entire figure displaying \"Comprehensive Analysis of Trigonometric Functions\" in a prominent and bold style.  \n• An inset panel (or axis) dedicated to extra notes at the lower right portion, showing multi-line text with numbered and textual descriptions, and with its axis turned off.",
            "task_id": "08XX78",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the global title displayed at the top of the figure?",
                "How many subplots are arranged in the grid layout?",
                "What function is plotted with a blue line in the primary subplot?",
                "What is the title of the primary subplot?",
                "What additional annotation is found in the primary subplot?",
                "Which function is plotted in the secondary subplot and what line color is used?",
                "What does the third subplot illustrate and what is its line color?",
                "What information is presented in the bar chart of the fourth subplot?",
                "Are gridlines visible in each subplot, and if so, on which parts?",
                "Where is the inset panel located and what is unique about its display?"
            ],
            "VQA_answers": [
                "Comprehensive Analysis of Trigonometric Functions",
                "Four",
                "sin(x)",
                "Main Plot: sin(x) Analysis",
                "A multi-line annotation box with key observations",
                "cos(x) with a green line",
                "sin(x)*cos(x) with a red line",
                "Statistical Summary with three bars for Mean sin(x), Mean cos(x), and Std sin*cos, each annotated to three decimal places",
                "Yes, gridlines are shown in the primary, secondary, and third subplots; the bar chart has y-axis gridlines",
                "Lower right with the axis turned off, showing multi-line extra notes"
            ],
            "raw_output_metric": [
                "Main Plot: sin(x) Analysis",
                "sin(x)",
                "blue",
                "Secondary Plot: cos(x)",
                "cos(x)",
                "green",
                "Product Analysis: sin(x) * cos(x)",
                "sin(x)*cos(x)",
                "red",
                "Statistical Summary",
                "Mean sin(x)",
                "Mean cos(x)",
                "Std sin*cos",
                "Comprehensive Analysis of Trigonometric Functions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX78_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ------------------------------\n# Section 1: Data Preparation\n# ------------------------------\n# Generate sample data for demonstration\nnp.random.seed(42)\nx = np.linspace(0, 10, 200)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# List of calculated labeled values for display\nlabeled_values = {\n    \"Mean sin(x)\": np.mean(y1),\n    \"Mean cos(x)\": np.mean(y2),\n    \"Std sin*cos\": np.std(y3)\n}\n\n# ------------------------------\n# Section 2: Plot Layout and Structure\n# ------------------------------\n# Create a figure with multiple subplots arranged in grid layout\nfig = plt.figure(constrained_layout=True, figsize=(12, 10))\ngs = fig.add_gridspec(3, 2)\n\n# Subplot 1: Main sine function\nax1 = fig.add_subplot(gs[0, :])\nax1.plot(x, y1, color=\"blue\", lw=2, label=\"sin(x)\")\nax1.set_title(\"Main Plot: sin(x) Analysis\", fontsize=14, fontweight=\"bold\")\nax1.set_xlabel(\"X Axis Value\")\nax1.set_ylabel(\"sin(x)\")\nax1.legend(loc=\"upper right\")\nax1.grid(True)\n\n# Annotate panel with a list of bullet points\nannotation_text = \"Key Observations:\\n\" \\\n                  \" - Periodic behavior is evident.\\n\" \\\n                  \" - Amplitude ~1.\\n\" \\\n                  \" - Phase shift not applicable.\"\nax1.text(0.02, 0.95, annotation_text, transform=ax1.transAxes,\n         fontsize=10, verticalalignment=\"top\",\n         bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\n# Subplot 2: cosine function\nax2 = fig.add_subplot(gs[1, 0])\nax2.plot(x, y2, color=\"green\", lw=2, label=\"cos(x)\")\nax2.set_title(\"Secondary Plot: cos(x)\", fontsize=12, fontweight=\"bold\")\nax2.set_xlabel(\"X Axis Value\")\nax2.set_ylabel(\"cos(x)\")\nax2.legend(loc=\"upper right\")\nax2.grid(True)\n\n# Subplot 3: Product of sine and cosine functions\nax3 = fig.add_subplot(gs[1, 1])\nax3.plot(x, y3, color=\"red\", lw=2, label=\"sin(x)*cos(x)\")\nax3.set_title(\"Product Analysis: sin(x) * cos(x)\", fontsize=12, fontweight=\"bold\")\nax3.set_xlabel(\"X Axis Value\")\nax3.set_ylabel(\"sin(x)*cos(x)\")\nax3.legend(loc=\"upper right\")\nax3.grid(True)\n\n# Subplot 4: Bar chart displaying labeled values from our analysis\nax4 = fig.add_subplot(gs[2, :])\ncategories = list(labeled_values.keys())\nvalues = list(labeled_values.values())\nbars = ax4.bar(categories, values, color=[\"skyblue\", \"lightgreen\", \"salmon\"])\nax4.set_title(\"Statistical Summary\", fontsize=12, fontweight=\"bold\")\nax4.set_ylabel(\"Computed Value\")\nax4.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\n# Annotate each bar with its exact value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.annotate(f'{height:.3f}',\n                 xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3),\n                 textcoords=\"offset points\",\n                 ha=\"center\", va=\"bottom\", fontsize=10)\n\n# ------------------------------\n# Section 3: Additional Annotations and Formatting\n# ------------------------------\n# Add a global title to the entire figure\nfig.suptitle(\"Comprehensive Analysis of Trigonometric Functions\", fontsize=16, fontweight=\"bold\", color=\"navy\")\n\n# Create an inset axis for extra notes\ninset_ax = fig.add_axes([0.65, 0.05, 0.3, 0.15])\ninset_text = (\"Notes:\\n\"\n              \"1. Data generated using numpy's linspace and trigonometric functions.\\n\"\n              \"2. All plots include gridlines for better readability.\\n\"\n              \"3. Example of structured layout with headings, sections,\\n\"\n              \"   and dynamically labeled values.\")\ninset_ax.text(0.05, 0.95, inset_text, fontsize=9, va=\"top\", color=\"darkslategray\")\ninset_ax.set_axis_off()  # No axis for note panel\n\n# ------------------------------\n# Section 4: Final Adjustments and Display\n# ------------------------------\n# Adjust overall layout parameters if needed\nplt.subplots_adjust(top=0.9, wspace=0.3, hspace=0.4)\n\n# Render the plots to a single page display\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX78_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Plot: sin(x) Analysis",
                                "sin(x)",
                                "blue",
                                "Secondary Plot: cos(x)",
                                "cos(x)",
                                "green",
                                "Product Analysis: sin(x) * cos(x)",
                                "sin(x)*cos(x)",
                                "red",
                                "Statistical Summary",
                                "Mean sin(x)",
                                "Mean cos(x)",
                                "Std sin*cos",
                                "Comprehensive Analysis of Trigonometric Functions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX78_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX78_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the global title displayed at the top of the figure?",
                                "How many subplots are arranged in the grid layout?",
                                "What function is plotted with a blue line in the primary subplot?",
                                "What is the title of the primary subplot?",
                                "What additional annotation is found in the primary subplot?",
                                "Which function is plotted in the secondary subplot and what line color is used?",
                                "What does the third subplot illustrate and what is its line color?",
                                "What information is presented in the bar chart of the fourth subplot?",
                                "Are gridlines visible in each subplot, and if so, on which parts?",
                                "Where is the inset panel located and what is unique about its display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX78_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Analysis of Trigonometric Functions",
                                "Four",
                                "sin(x)",
                                "Main Plot: sin(x) Analysis",
                                "A multi-line annotation box with key observations",
                                "cos(x) with a green line",
                                "sin(x)*cos(x) with a red line",
                                "Statistical Summary with three bars for Mean sin(x), Mean cos(x), and Std sin*cos, each annotated to three decimal places",
                                "Yes, gridlines are shown in the primary, secondary, and third subplots; the bar chart has y-axis gridlines",
                                "Lower right with the axis turned off, showing multi-line extra notes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------------------------------------\n# Section 1: Data Preparation and Overview\n# ---------------------------------------------------------\n# Generate sample data for plotting.\nx = np.linspace(0, 10, 100)\nsin_values = np.sin(x)\ncos_values = np.cos(x)\nexp_values = np.exp(-0.3*x)\nquad_values = (x - 5)**2 / 10\n\n# Create detailed labels for each data series.\ndata_descriptions = {\n    \"Sine Wave\": \"y = sin(x)\",\n    \"Cosine Wave\": \"y = cos(x)\",\n    \"Exponential Decay\": \"y = exp(-0.3*x)\",\n    \"Quadratic\": \"y = (x-5)^2/10\"\n}\n\n# ---------------------------------------------------------\n# Section 2: Layout Setup using Gridspec\n# ---------------------------------------------------------\n# We will create a figure with multiple subplots arranged in a grid.\nfig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(3, 2, width_ratios=[1, 1], height_ratios=[1, 2, 1], hspace=0.4, wspace=0.3)\n\n# ---------------------------------------------------------\n# Subplot A (top left): Title and Introductory Text\n# ---------------------------------------------------------\nax0 = fig.add_subplot(gs[0, 0])\nax0.axis('off')\nintro_text = (\"Visualization Layout Overview\\n\"\n              \"--------------------------------\\n\"\n              \"This figure is divided into multiple sections:\\n\"\n              \"1. Data Overview\\n\"\n              \"2. Detailed Plots\\n\"\n              \"3. Summary Statistics\\n\\n\"\n              \"Each section is annotated with headings, labeled values, and lists \"\n              \"to ensure clarity in the structural hierarchy.\")\nax0.text(0.05, 0.5, intro_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Subplot B (top right): Data Legend and List of Descriptions\n# ---------------------------------------------------------\nax1 = fig.add_subplot(gs[0, 1])\nax1.axis('off')\nlegend_lines = [\"Data Series Descriptions:\"]\nfor key, desc in data_descriptions.items():\n    legend_lines.append(f\" - {key}: {desc}\")\nlegend_text = \"\\n\".join(legend_lines)\nax1.text(0.05, 0.5, legend_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Subplot C (middle, left): Plotting Sine and Cosine Waves\n# ---------------------------------------------------------\nax2 = fig.add_subplot(gs[1, 0])\nax2.plot(x, sin_values, label=\"Sine Wave\", color=\"blue\", linewidth=2)\nax2.plot(x, cos_values, label=\"Cosine Wave\", color=\"red\", linestyle=\"--\", linewidth=2)\nax2.set_title(\"Trigonometric Functions\", fontsize=12, fontweight=\"bold\")\nax2.set_xlabel(\"x\")\nax2.set_ylabel(\"y\")\nax2.grid(True, linestyle=\":\")\nax2.legend(loc=\"upper right\")\n\n# ---------------------------------------------------------\n# Subplot D (middle, right): Plotting Exponential and Quadratic Functions\n# ---------------------------------------------------------\nax3 = fig.add_subplot(gs[1, 1])\nax3.plot(x, exp_values, label=\"Exponential Decay\", color=\"green\", marker=\"o\", markersize=4, linestyle=\"-\")\nax3.plot(x, quad_values, label=\"Quadratic Function\", color=\"purple\", marker=\"s\", markersize=4, linestyle=\"--\")\nax3.set_title(\"Other Functions\", fontsize=12, fontweight=\"bold\")\nax3.set_xlabel(\"x\")\nax3.set_ylabel(\"y\")\nax3.grid(True, linestyle=\":\")\nax3.legend(loc=\"upper left\")\n\n# ---------------------------------------------------------\n# Subplot E (bottom, full width): Summary Statistics and Detailed Annotations\n# ---------------------------------------------------------\nax4 = fig.add_subplot(gs[2, :])\nax4.axis('off')\n\n# List summary statistics computed from the data.\nmean_sin = np.mean(sin_values)\nstd_sin = np.std(sin_values)\nmean_cos = np.mean(cos_values)\nstd_cos = np.std(cos_values)\nmean_exp = np.mean(exp_values)\nstd_exp = np.std(exp_values)\nmean_quad = np.mean(quad_values)\nstd_quad = np.std(quad_values)\n\nsummary_text = (\n    \"Summary Statistics:\\n\"\n    \"--------------------\\n\"\n    f\"Sine Wave    -> Mean: {mean_sin:.3f} | Std: {std_sin:.3f}\\n\"\n    f\"Cosine Wave  -> Mean: {mean_cos:.3f} | Std: {std_cos:.3f}\\n\"\n    f\"Exponential  -> Mean: {mean_exp:.3f} | Std: {std_exp:.3f}\\n\"\n    f\"Quadratic    -> Mean: {mean_quad:.3f} | Std: {std_quad:.3f}\\n\\n\"\n    \"Notes:\\n\"\n    \"-------\\n\"\n    \"1. The sine and cosine functions oscillate periodically.\\n\"\n    \"2. The exponential decay shows a rapid decrease, and the quadratic function\\n\"\n    \"   represents a parabolic trend centered around x = 5.\\n\"\n    \"3. All plots share consistent styling for ease of comparison.\"\n)\n\nax4.text(0.05, 0.5, summary_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Final Adjustments and Display\n# ---------------------------------------------------------\nplt.suptitle(\"Comprehensive Data Visualization Using Matplotlib\", fontsize=16, fontweight=\"bold\")\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n</code>",
            "feature_requirements": "• A top-level title reading “Comprehensive Data Visualization Using Matplotlib” prominently displayed above the subplots.  \n• A first section (subplot A) that contains a block of introductory text with a heading “Visualization Layout Overview” and a list explaining the figure’s division into multiple sections.  \n• A second section (subplot B) that includes a descriptive list beginning with “Data Series Descriptions:” followed by individual items for “Sine Wave,” “Cosine Wave,” “Exponential Decay,” and “Quadratic” along with their corresponding formulas.  \n• A third section (subplot C) featuring a graph titled “Trigonometric Functions” with labeled x-axis (“x”) and y-axis (“y”), displaying two plotted curves: one for a sine wave (blue, solid line) and one for a cosine wave (red, dashed line), both with a visible grid.  \n• A fourth section (subplot D) that presents a graph titled “Other Functions” with labeled axes, including plots for an exponential decay curve (green with circle markers, solid line) and a quadratic function (purple with square markers, dashed line), along with a grid and an appropriate legend.  \n• A bottom summary section (subplot E) that is text-only (without visible axes) and displays a formatted block of summary statistics including mean and standard deviation values for the sine, cosine, exponential, and quadratic data series, enhanced with notes explaining the observed trends.",
            "task_id": "08XX79",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title displayed at the top of the figure?",
                "What is the heading of the introductory text in subplot A?",
                "What does the list in subplot A explain?",
                "What phrase does the descriptive list in subplot B start with?",
                "How many items are listed in the descriptive list in subplot B?",
                "What names are provided in subplot B for the data series?",
                "What is the title of the graph in subplot C?",
                "Which data series and corresponding line styles and colors are shown in subplot C?",
                "What is the title of the graph in subplot D and what functions does it display?",
                "How are the exponential decay and quadratic functions represented in subplot D in terms of markers, colors, and line styles?",
                "What details are included in the bottom summary section (subplot E)?"
            ],
            "VQA_answers": [
                "Comprehensive Data Visualization Using Matplotlib",
                "Visualization Layout Overview",
                "The figure’s division into multiple sections",
                "Data Series Descriptions:",
                "4",
                "Sine Wave, Cosine Wave, Exponential Decay, and Quadratic",
                "Trigonometric Functions",
                "A blue solid line for the Sine Wave and a red dashed line for the Cosine Wave",
                "Other Functions; it displays an exponential decay curve and a quadratic function",
                "The exponential decay curve is shown in green with circle markers and a solid line, while the quadratic function is in purple with square markers and a dashed line",
                "A formatted block of summary statistics including mean and standard deviation values for the sine, cosine, exponential, and quadratic data series, along with explanatory notes on the observed trends"
            ],
            "raw_output_metric": [
                "Comprehensive Data Visualization Using Matplotlib",
                "Visualization Layout Overview",
                "Data Series Descriptions:",
                "Sine Wave",
                "Cosine Wave",
                "Exponential Decay",
                "Quadratic",
                "Trigonometric Functions",
                "x",
                "y",
                "blue",
                "solid",
                "red",
                "dashed",
                "grid",
                "Other Functions",
                "green",
                "circle markers",
                "purple",
                "square markers",
                "legend",
                "mean",
                "standard deviation",
                "notes"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX79_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------------------------------------\n# Section 1: Data Preparation and Overview\n# ---------------------------------------------------------\n# Generate sample data for plotting.\nx = np.linspace(0, 10, 100)\nsin_values = np.sin(x)\ncos_values = np.cos(x)\nexp_values = np.exp(-0.3*x)\nquad_values = (x - 5)**2 / 10\n\n# Create detailed labels for each data series.\ndata_descriptions = {\n    \"Sine Wave\": \"y = sin(x)\",\n    \"Cosine Wave\": \"y = cos(x)\",\n    \"Exponential Decay\": \"y = exp(-0.3*x)\",\n    \"Quadratic\": \"y = (x-5)^2/10\"\n}\n\n# ---------------------------------------------------------\n# Section 2: Layout Setup using Gridspec\n# ---------------------------------------------------------\n# We will create a figure with multiple subplots arranged in a grid.\nfig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(3, 2, width_ratios=[1, 1], height_ratios=[1, 2, 1], hspace=0.4, wspace=0.3)\n\n# ---------------------------------------------------------\n# Subplot A (top left): Title and Introductory Text\n# ---------------------------------------------------------\nax0 = fig.add_subplot(gs[0, 0])\nax0.axis('off')\nintro_text = (\"Visualization Layout Overview\\n\"\n              \"--------------------------------\\n\"\n              \"This figure is divided into multiple sections:\\n\"\n              \"1. Data Overview\\n\"\n              \"2. Detailed Plots\\n\"\n              \"3. Summary Statistics\\n\\n\"\n              \"Each section is annotated with headings, labeled values, and lists \"\n              \"to ensure clarity in the structural hierarchy.\")\nax0.text(0.05, 0.5, intro_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Subplot B (top right): Data Legend and List of Descriptions\n# ---------------------------------------------------------\nax1 = fig.add_subplot(gs[0, 1])\nax1.axis('off')\nlegend_lines = [\"Data Series Descriptions:\"]\nfor key, desc in data_descriptions.items():\n    legend_lines.append(f\" - {key}: {desc}\")\nlegend_text = \"\\n\".join(legend_lines)\nax1.text(0.05, 0.5, legend_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Subplot C (middle, left): Plotting Sine and Cosine Waves\n# ---------------------------------------------------------\nax2 = fig.add_subplot(gs[1, 0])\nax2.plot(x, sin_values, label=\"Sine Wave\", color=\"blue\", linewidth=2)\nax2.plot(x, cos_values, label=\"Cosine Wave\", color=\"red\", linestyle=\"--\", linewidth=2)\nax2.set_title(\"Trigonometric Functions\", fontsize=12, fontweight=\"bold\")\nax2.set_xlabel(\"x\")\nax2.set_ylabel(\"y\")\nax2.grid(True, linestyle=\":\")\nax2.legend(loc=\"upper right\")\n\n# ---------------------------------------------------------\n# Subplot D (middle, right): Plotting Exponential and Quadratic Functions\n# ---------------------------------------------------------\nax3 = fig.add_subplot(gs[1, 1])\nax3.plot(x, exp_values, label=\"Exponential Decay\", color=\"green\", marker=\"o\", markersize=4, linestyle=\"-\")\nax3.plot(x, quad_values, label=\"Quadratic Function\", color=\"purple\", marker=\"s\", markersize=4, linestyle=\"--\")\nax3.set_title(\"Other Functions\", fontsize=12, fontweight=\"bold\")\nax3.set_xlabel(\"x\")\nax3.set_ylabel(\"y\")\nax3.grid(True, linestyle=\":\")\nax3.legend(loc=\"upper left\")\n\n# ---------------------------------------------------------\n# Subplot E (bottom, full width): Summary Statistics and Detailed Annotations\n# ---------------------------------------------------------\nax4 = fig.add_subplot(gs[2, :])\nax4.axis('off')\n\n# List summary statistics computed from the data.\nmean_sin = np.mean(sin_values)\nstd_sin = np.std(sin_values)\nmean_cos = np.mean(cos_values)\nstd_cos = np.std(cos_values)\nmean_exp = np.mean(exp_values)\nstd_exp = np.std(exp_values)\nmean_quad = np.mean(quad_values)\nstd_quad = np.std(quad_values)\n\nsummary_text = (\n    \"Summary Statistics:\\n\"\n    \"--------------------\\n\"\n    f\"Sine Wave    -> Mean: {mean_sin:.3f} | Std: {std_sin:.3f}\\n\"\n    f\"Cosine Wave  -> Mean: {mean_cos:.3f} | Std: {std_cos:.3f}\\n\"\n    f\"Exponential  -> Mean: {mean_exp:.3f} | Std: {std_exp:.3f}\\n\"\n    f\"Quadratic    -> Mean: {mean_quad:.3f} | Std: {std_quad:.3f}\\n\\n\"\n    \"Notes:\\n\"\n    \"-------\\n\"\n    \"1. The sine and cosine functions oscillate periodically.\\n\"\n    \"2. The exponential decay shows a rapid decrease, and the quadratic function\\n\"\n    \"   represents a parabolic trend centered around x = 5.\\n\"\n    \"3. All plots share consistent styling for ease of comparison.\"\n)\n\nax4.text(0.05, 0.5, summary_text, fontsize=10, va=\"center\", ha=\"left\", family=\"monospace\")\n\n# ---------------------------------------------------------\n# Final Adjustments and Display\n# ---------------------------------------------------------\nplt.suptitle(\"Comprehensive Data Visualization Using Matplotlib\", fontsize=16, fontweight=\"bold\")\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX79_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Using Matplotlib",
                                "Visualization Layout Overview",
                                "Data Series Descriptions:",
                                "Sine Wave",
                                "Cosine Wave",
                                "Exponential Decay",
                                "Quadratic",
                                "Trigonometric Functions",
                                "x",
                                "y",
                                "blue",
                                "solid",
                                "red",
                                "dashed",
                                "grid",
                                "Other Functions",
                                "green",
                                "circle markers",
                                "purple",
                                "square markers",
                                "legend",
                                "mean",
                                "standard deviation",
                                "notes"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX79_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX79_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the figure?",
                                "What is the heading of the introductory text in subplot A?",
                                "What does the list in subplot A explain?",
                                "What phrase does the descriptive list in subplot B start with?",
                                "How many items are listed in the descriptive list in subplot B?",
                                "What names are provided in subplot B for the data series?",
                                "What is the title of the graph in subplot C?",
                                "Which data series and corresponding line styles and colors are shown in subplot C?",
                                "What is the title of the graph in subplot D and what functions does it display?",
                                "How are the exponential decay and quadratic functions represented in subplot D in terms of markers, colors, and line styles?",
                                "What details are included in the bottom summary section (subplot E)?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX79_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Using Matplotlib",
                                "Visualization Layout Overview",
                                "The figure’s division into multiple sections",
                                "Data Series Descriptions:",
                                "4",
                                "Sine Wave, Cosine Wave, Exponential Decay, and Quadratic",
                                "Trigonometric Functions",
                                "A blue solid line for the Sine Wave and a red dashed line for the Cosine Wave",
                                "Other Functions; it displays an exponential decay curve and a quadratic function",
                                "The exponential decay curve is shown in green with circle markers and a solid line, while the quadratic function is in purple with square markers and a dashed line",
                                "A formatted block of summary statistics including mean and standard deviation values for the sine, cosine, exponential, and quadratic data series, along with explanatory notes on the observed trends"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate sample data for different plots\nx = np.linspace(0, 10, 100)\ny_sine = np.sin(x)\ny_cosine = np.cos(x)\ny_tangent = np.tan(x / 4)\ny_quadratic = x**2 / 10\n\n# Create a figure with 2x2 grid of subplots\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Main Dashboard: Analysis of Sample Data\", fontsize=18, weight='bold')\n\n# ============================================================================\n# Section A: Sine Function\n# ----------------------------------------------------------------------------\nax = axs[0, 0]\nax.plot(x, y_sine, color='blue', label=\"Sine Wave\")\nax.set_title(\"Section A: Sine Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"sin(x)\")\nax.grid(True)\nax.legend(loc='upper right')\n# Annotate with formatted details\nax.text(1, 0.6,\n        \"Data Details:\\n\"\n        \"- Amplitude: 1\\n\"\n        \"- Period: 2π\",\n        fontsize=10,\n        bbox=dict(facecolor='white', edgecolor='gray', alpha=0.5))\n        \n# ============================================================================\n# Section B: Cosine Function\n# ----------------------------------------------------------------------------\nax = axs[0, 1]\nax.plot(x, y_cosine, color='red', linestyle='--', marker='o', label=\"Cosine Wave\")\nax.set_title(\"Section B: Cosine Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"cos(x)\")\nax.grid(True)\nax.legend(loc='upper right')\n# Add observations in list format\nax.text(1, 0.6,\n        \"Observations:\\n\"\n        \"  • Phase shift: 0\\n\"\n        \"  • Amplitude: 1\",\n        fontsize=10,\n        bbox=dict(facecolor='lightyellow', edgecolor='gray', alpha=0.5))\n\n# ============================================================================\n# Section C: Tangent Function (Scaled)\n# ----------------------------------------------------------------------------\nax = axs[1, 0]\nax.plot(x, y_tangent, color='green', linestyle='-.', label=\"Scaled Tangent\")\nax.set_title(\"Section C: Tangent Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"tan(x/4)\")\nax.set_ylim(-5, 5)\nax.grid(True)\nax.legend(loc='upper left')\n# Annotate with key parameters in a bullet list style\ninfo_text = (\n    \"Key Parameters:\\n\"\n    \"  * Scaling Factor: 1/4\\n\"\n    \"  * Y-limit: (-5, 5)\\n\"\n    \"  * Caution: High nonlinearity\"\n)\nax",
            "feature_requirements": "• The output must present a 2×2 grid of plots that visually mimic subplots arranged in two rows and two columns.  \n• A prominent overall title at the top (\"Main Dashboard: Analysis of Sample Data\") should be displayed in bold with larger font size.  \n• For the top‐left subplot (Section A):  \n – A blue sine curve must be drawn with a matching legend entry (\"Sine Wave\") placed in the upper right of the plot.  \n – The plot must include a title (\"Section A: Sine Function\") in bold with a moderate font, x‐axis labeled \"X-axis value\" and y‐axis labeled \"sin(x)\".  \n – Grid lines must be visible, and a text annotation displaying a multi‐line note (with details on Amplitude and Period) enclosed in a box with a white fill and gray border should appear at a specific location.  \n• For the top‐right subplot (Section B):  \n – A red cosine curve should be drawn with a dashed line style and circular markers alongside a legend (“Cosine Wave”) in the upper right.  \n – This subplot must have a title (\"Section B: Cosine Function\") in bold, with x-axis labeled \"X-axis value\" and y-axis labeled \"cos(x)\", and grid lines enabled.  \n – A separate text annotation containing observation details in a list-like bullet format must be displayed within a box filled with a light yellow color and bordered in gray.  \n• For the bottom‐left subplot (Section C):  \n – A green tangent curve (with dash-dotted styling) corresponding to tan(x/4) must be depicted, accompanied by a legend (\"Scaled Tangent\") positioned in the upper left.  \n – The subplot should include a title (\"Section C: Tangent Function\") in bold, x-axis labeled \"X-axis value\", y-axis labeled \"tan(x/4)\", and the y-axis must be limited to the range of –5 to 5 with grid lines.  \n – An annotation in bullet list format containing key parameter details (Scaling Factor: 1/4, Y-limit: (-5, 5), and a caution note) should be rendered within a bounding box.  \n• The fourth subplot (bottom‐right), although not explicitly drawn in the source code, should be represented as an empty or placeholder region to maintain the 2×2 grid structure.  \n• All textual elements (titles, labels, annotation texts) and graphical elements (curves, legends, grid lines) must be rendered consistently so that a direct visual comparison can be made with the original Matplotlib output.",
            "task_id": "08XX80",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title displayed at the top?",
                "How many subplots are arranged in the grid?",
                "What is drawn in the top‐left subplot (Section A)?",
                "Which elements appear in the top‐left subplot's annotation?",
                "What is the title for the top‐right subplot (Section B)?",
                "What line style and markers are used for the cosine curve in Section B?",
                "What details characterize the annotation in Section B?",
                "Which function is depicted in the bottom‐left subplot (Section C) and with what styling?",
                "What y-axis range is set for the bottom‐left subplot?",
                "Which subplot acts as the placeholder in the grid?"
            ],
            "VQA_answers": [
                "Main Dashboard: Analysis of Sample Data",
                "4 (2×2 grid)",
                "A blue sine curve with a legend entry 'Sine Wave'",
                "A multi‐line note on Amplitude and Period in a box with white fill and gray border",
                "Section B: Cosine Function",
                "Dashed line style with circular markers",
                "Observation details in bullet list format inside a box with light yellow fill and gray border",
                "A green tangent curve of tan(x/4) with a dash-dotted style and legend 'Scaled Tangent'",
                "Limited to –5 to 5",
                "The bottom‐right subplot is empty (placeholder)"
            ],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX80_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate sample data for different plots\nx = np.linspace(0, 10, 100)\ny_sine = np.sin(x)\ny_cosine = np.cos(x)\ny_tangent = np.tan(x / 4)\ny_quadratic = x**2 / 10\n\n# Create a figure with 2x2 grid of subplots\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Main Dashboard: Analysis of Sample Data\", fontsize=18, weight='bold')\n\n# ============================================================================\n# Section A: Sine Function\n# ----------------------------------------------------------------------------\nax = axs[0, 0]\nax.plot(x, y_sine, color='blue', label=\"Sine Wave\")\nax.set_title(\"Section A: Sine Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"sin(x)\")\nax.grid(True)\nax.legend(loc='upper right')\n# Annotate with formatted details\nax.text(1, 0.6,\n        \"Data Details:\\n\"\n        \"- Amplitude: 1\\n\"\n        \"- Period: 2π\",\n        fontsize=10,\n        bbox=dict(facecolor='white', edgecolor='gray', alpha=0.5))\n        \n# ============================================================================\n# Section B: Cosine Function\n# ----------------------------------------------------------------------------\nax = axs[0, 1]\nax.plot(x, y_cosine, color='red', linestyle='--', marker='o', label=\"Cosine Wave\")\nax.set_title(\"Section B: Cosine Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"cos(x)\")\nax.grid(True)\nax.legend(loc='upper right')\n# Add observations in list format\nax.text(1, 0.6,\n        \"Observations:\\n\"\n        \"  • Phase shift: 0\\n\"\n        \"  • Amplitude: 1\",\n        fontsize=10,\n        bbox=dict(facecolor='lightyellow', edgecolor='gray', alpha=0.5))\n\n# ============================================================================\n# Section C: Tangent Function (Scaled)\n# ----------------------------------------------------------------------------\nax = axs[1, 0]\nax.plot(x, y_tangent, color='green', linestyle='-.', label=\"Scaled Tangent\")\nax.set_title(\"Section C: Tangent Function\", fontsize=14, weight='bold')\nax.set_xlabel(\"X-axis value\")\nax.set_ylabel(\"tan(x/4)\")\nax.set_ylim(-5, 5)\nax.grid(True)\nax.legend(loc='upper left')\n# Annotate with key parameters in a bullet list style\ninfo_text = (\n    \"Key Parameters:\\n\"\n    \"  * Scaling Factor: 1/4\\n\"\n    \"  * Y-limit: (-5, 5)\\n\"\n    \"  * Caution: High nonlinearity\"\n)\nax"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX80_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX80_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX80_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title displayed at the top?",
                                "How many subplots are arranged in the grid?",
                                "What is drawn in the top‐left subplot (Section A)?",
                                "Which elements appear in the top‐left subplot's annotation?",
                                "What is the title for the top‐right subplot (Section B)?",
                                "What line style and markers are used for the cosine curve in Section B?",
                                "What details characterize the annotation in Section B?",
                                "Which function is depicted in the bottom‐left subplot (Section C) and with what styling?",
                                "What y-axis range is set for the bottom‐left subplot?",
                                "Which subplot acts as the placeholder in the grid?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX80_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Dashboard: Analysis of Sample Data",
                                "4 (2×2 grid)",
                                "A blue sine curve with a legend entry 'Sine Wave'",
                                "A multi‐line note on Amplitude and Period in a box with white fill and gray border",
                                "Section B: Cosine Function",
                                "Dashed line style with circular markers",
                                "Observation details in bullet list format inside a box with light yellow fill and gray border",
                                "A green tangent curve of tan(x/4) with a dash-dotted style and legend 'Scaled Tangent'",
                                "Limited to –5 to 5",
                                "The bottom‐right subplot is empty (placeholder)"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n#!/usr/bin/env python3\n\"\"\"\nMatplotlib Dashboard Example\n----------------------------\nThis script demonstrates a complex visual layout using Matplotlib.\nThe dashboard includes several sections such as:\n    1. A Line Plot displaying Sine and Cosine functions.\n    2. A Bar Chart representing categorical data.\n    3. A Scatter Plot with random data points.\n    4. A custom text area showing labeled parameters in a table-like format.\n\nAll rendering is static and fits within a single page layout.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# -------------------------------\n# Section 1: Data Preparation\n# -------------------------------\n\n# Generate data for line plots (sine and cosine functions)\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Data for bar chart (categorical values)\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [23, 45, 56, 78]\n\n# Data for scatter plot (random values)\nnp.random.seed(0)  # For reproducibility\nx_scatter = np.random.rand(20)\ny_scatter = np.random.rand(20)\ncolors = np.random.rand(20)\nsizes = 100 * np.random.rand(20)\n\n# Data for the detailed text summary (labeled parameters)\ndetailed_info = [\n    (\"Parameter A\", 3.1415),\n    (\"Parameter B\", 2.7182),\n    (\"Parameter C\", 1.6180),\n    (\"Parameter D\", 0.5772),\n]\n\n# -------------------------------\n# Section 2: Figure Layout Setup\n# -------------------------------\nfig = plt.figure(figsize=(12, 10))\nplt.suptitle(\"Matplotlib Dashboard\", fontsize=16, fontweight='bold')\n\n# Use GridSpec for structured layout (3 rows x 2 columns)\ngs = fig.add_gridspec(3, 2)\n\n# Subplot 1 (Line Plot spanning the first row)\nax1 = fig.add_subplot(gs[0, :])\n# Subplot 2 (Bar Chart in row 2, left column)\nax2 = fig.add_subplot(gs[1, 0])\n# Subplot 3 (Scatter Plot in row 2, right column)\nax3 = fig.add_subplot(gs[1, 1])\n# Subplot 4 (Text summary spanning the third row)\nax4 = fig.add_subplot(gs[2, :])\n\n# -------------------------------\n# Section 3: Plotting Data\n# -------------------------------\n\n# --- Subplot 1: Line Plot (Sine and Cosine Functions) ---\nax1.plot(x, y_sin, label='Sine Wave', color='blue', linestyle='-', marker='o', markersize=3)\nax1.plot(x, y_cos, label='Cosine Wave', color='red', linestyle='--', markersize=3)\nax1.set_title(\"Line Plot: Sine and Cosine Functions\", fontsize=14)\nax1.set_xlabel(\"X-axis value\")\nax1.set_ylabel(\"Function value\")\nax1.grid(True)\nax1.legend(loc='upper right')\n\n# --- Subplot 2: Bar Chart (Categorical Data) ---\nbars = ax2.bar(categories, values, color=['cyan', 'magenta', 'yellow', 'orange'])\nax2.set_title(\"Bar Chart: Data Categories\", fontsize=12)\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\n# Annotate each bar with its value\nfor idx, bar in enumerate(bars):\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width() / 2, height + 2, f\"{values[idx]}\", \n             ha='center', va='bottom', fontsize=10)\n\n# --- Subplot 3: Scatter Plot (Random Data Points) ---\nscatter = ax3.scatter(x_scatter, y_scatter, c=colors, s=sizes, marker='^', cmap='viridis', edgecolor='black')\nax3.set_title(\"",
            "feature_requirements": "• The output must include a main title \"Matplotlib Dashboard\" prominently displayed at the top of the layout.\n• The layout should be divided into distinct sections corresponding to a grid: one large section for the line plot at the top (spanning full width), two side-by-side sections beneath for the bar chart (left) and scatter plot (right), and a bottom section for the text summary.\n• In the top section, a line plot must appear showing two curves: one representing a sine function and the other a cosine function, each with differentiated colors (blue for sine, red for cosine), line styles (solid for sine, dashed for cosine), markers (visible circles for sine and an indication for cosine), and a legend clearly labelling \"Sine Wave\" and \"Cosine Wave\".\n• The line plot should include labeled axes (with \"X-axis value\" on the horizontal axis and \"Function value\" on the vertical axis), a descriptive title such as \"Line Plot: Sine and Cosine Functions\", and a visible grid.\n• The bar chart section must display four bars corresponding to the categories \"Category A\", \"Category B\", \"Category C\", and \"Category D\" with respective numerical values 23, 45, 56, and 78, with each bar uniquely colored (cyan, magenta, yellow, and orange) and annotated with its value above the bar.\n• The scatter plot section should contain 20 data points, styled with a triangular marker, using a color gradient consistent with a viridis-like colormap, outlined in black, and varied point sizes proportional to given data.\n• The bottom section must render a text summary that lists labeled parameters in a table-like format showing \"Parameter A: 3.1415\", \"Parameter B: 2.7182\", \"Parameter C: 1.6180\", and \"Parameter D: 0.5772\".\n• Each subplot must have its own title (for example, \"Bar Chart: Data Categories\" and appropriate title for the scatter plot) and axis labels where applicable, ensuring all labels, legends, and annotations are clearly rendered and positioned.",
            "task_id": "08XX81",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title at the top of the layout?",
                "How many distinct layout sections are visible in the dashboard?",
                "What functions are plotted in the top line plot section?",
                "What colors and line styles differentiate the sine and cosine curves?",
                "What labels are used for the x and y axes in the line plot?",
                "How many bars are displayed in the bar chart section and what categories do they represent?",
                "What unique colors are assigned to each bar in the bar chart?",
                "How many data points are shown in the scatter plot, and what marker shape is used?",
                "What distinctive styling is applied to the data points in the scatter plot?",
                "What parameters and their corresponding values are listed in the bottom text summary?"
            ],
            "VQA_answers": [
                "Matplotlib Dashboard",
                "Four",
                "Sine and Cosine",
                "Blue solid line for sine and red dashed line for cosine",
                "X-axis value and Function value",
                "Four bars representing Category A, Category B, Category C, and Category D",
                "Cyan, Magenta, Yellow, and Orange",
                "20 data points with a triangular marker",
                "Outlined in black with a viridis-like colormap and varied point sizes",
                "Parameter A: 3.1415, Parameter B: 2.7182, Parameter C: 1.6180, and Parameter D: 0.5772"
            ],
            "raw_output_metric": [
                "Matplotlib Dashboard",
                "Line Plot: Sine and Cosine Functions",
                "X-axis value",
                "Function value",
                "Sine Wave",
                "Cosine Wave",
                "blue",
                "red",
                "solid",
                "dashed",
                "circle",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "23",
                "45",
                "56",
                "78",
                "cyan",
                "magenta",
                "yellow",
                "orange",
                "Bar Chart: Data Categories",
                "Parameter A: 3.1415",
                "Parameter B: 2.7182",
                "Parameter C: 1.6180",
                "Parameter D: 0.5772",
                "viridis",
                "triangular marker",
                "grid"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX81_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n#!/usr/bin/env python3\n\"\"\"\nMatplotlib Dashboard Example\n----------------------------\nThis script demonstrates a complex visual layout using Matplotlib.\nThe dashboard includes several sections such as:\n    1. A Line Plot displaying Sine and Cosine functions.\n    2. A Bar Chart representing categorical data.\n    3. A Scatter Plot with random data points.\n    4. A custom text area showing labeled parameters in a table-like format.\n\nAll rendering is static and fits within a single page layout.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# -------------------------------\n# Section 1: Data Preparation\n# -------------------------------\n\n# Generate data for line plots (sine and cosine functions)\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Data for bar chart (categorical values)\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [23, 45, 56, 78]\n\n# Data for scatter plot (random values)\nnp.random.seed(0)  # For reproducibility\nx_scatter = np.random.rand(20)\ny_scatter = np.random.rand(20)\ncolors = np.random.rand(20)\nsizes = 100 * np.random.rand(20)\n\n# Data for the detailed text summary (labeled parameters)\ndetailed_info = [\n    (\"Parameter A\", 3.1415),\n    (\"Parameter B\", 2.7182),\n    (\"Parameter C\", 1.6180),\n    (\"Parameter D\", 0.5772),\n]\n\n# -------------------------------\n# Section 2: Figure Layout Setup\n# -------------------------------\nfig = plt.figure(figsize=(12, 10))\nplt.suptitle(\"Matplotlib Dashboard\", fontsize=16, fontweight='bold')\n\n# Use GridSpec for structured layout (3 rows x 2 columns)\ngs = fig.add_gridspec(3, 2)\n\n# Subplot 1 (Line Plot spanning the first row)\nax1 = fig.add_subplot(gs[0, :])\n# Subplot 2 (Bar Chart in row 2, left column)\nax2 = fig.add_subplot(gs[1, 0])\n# Subplot 3 (Scatter Plot in row 2, right column)\nax3 = fig.add_subplot(gs[1, 1])\n# Subplot 4 (Text summary spanning the third row)\nax4 = fig.add_subplot(gs[2, :])\n\n# -------------------------------\n# Section 3: Plotting Data\n# -------------------------------\n\n# --- Subplot 1: Line Plot (Sine and Cosine Functions) ---\nax1.plot(x, y_sin, label='Sine Wave', color='blue', linestyle='-', marker='o', markersize=3)\nax1.plot(x, y_cos, label='Cosine Wave', color='red', linestyle='--', markersize=3)\nax1.set_title(\"Line Plot: Sine and Cosine Functions\", fontsize=14)\nax1.set_xlabel(\"X-axis value\")\nax1.set_ylabel(\"Function value\")\nax1.grid(True)\nax1.legend(loc='upper right')\n\n# --- Subplot 2: Bar Chart (Categorical Data) ---\nbars = ax2.bar(categories, values, color=['cyan', 'magenta', 'yellow', 'orange'])\nax2.set_title(\"Bar Chart: Data Categories\", fontsize=12)\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\n# Annotate each bar with its value\nfor idx, bar in enumerate(bars):\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width() / 2, height + 2, f\"{values[idx]}\", \n             ha='center', va='bottom', fontsize=10)\n\n# --- Subplot 3: Scatter Plot (Random Data Points) ---\nscatter = ax3.scatter(x_scatter, y_scatter, c=colors, s=sizes, marker='^', cmap='viridis', edgecolor='black')\nax3.set_title(\""
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX81_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Matplotlib Dashboard",
                                "Line Plot: Sine and Cosine Functions",
                                "X-axis value",
                                "Function value",
                                "Sine Wave",
                                "Cosine Wave",
                                "blue",
                                "red",
                                "solid",
                                "dashed",
                                "circle",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "23",
                                "45",
                                "56",
                                "78",
                                "cyan",
                                "magenta",
                                "yellow",
                                "orange",
                                "Bar Chart: Data Categories",
                                "Parameter A: 3.1415",
                                "Parameter B: 2.7182",
                                "Parameter C: 1.6180",
                                "Parameter D: 0.5772",
                                "viridis",
                                "triangular marker",
                                "grid"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX81_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX81_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title at the top of the layout?",
                                "How many distinct layout sections are visible in the dashboard?",
                                "What functions are plotted in the top line plot section?",
                                "What colors and line styles differentiate the sine and cosine curves?",
                                "What labels are used for the x and y axes in the line plot?",
                                "How many bars are displayed in the bar chart section and what categories do they represent?",
                                "What unique colors are assigned to each bar in the bar chart?",
                                "How many data points are shown in the scatter plot, and what marker shape is used?",
                                "What distinctive styling is applied to the data points in the scatter plot?",
                                "What parameters and their corresponding values are listed in the bottom text summary?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX81_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Matplotlib Dashboard",
                                "Four",
                                "Sine and Cosine",
                                "Blue solid line for sine and red dashed line for cosine",
                                "X-axis value and Function value",
                                "Four bars representing Category A, Category B, Category C, and Category D",
                                "Cyan, Magenta, Yellow, and Orange",
                                "20 data points with a triangular marker",
                                "Outlined in black with a viridis-like colormap and varied point sizes",
                                "Parameter A: 3.1415, Parameter B: 2.7182, Parameter C: 1.6180, and Parameter D: 0.5772"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# -------------------------\n# Data Generation Section\n# -------------------------\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Random data for scatter plot\nnp.random.seed(42)\nx_scatter = np.random.rand(50)\ny_scatter = np.random.rand(50)\n\n# Data for bar chart (categorical)\ncategories = ['A', 'B', 'C', 'D']\nvalues = [23, 45, 56, 78]\n\n# -------------------------\n# Figure and Subplots Setup\n# -------------------------\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=16, fontweight='bold')\n\n# -------------------------\n# Subplot 1: Sine Wave Analysis\n# -------------------------\naxs[0, 0].plot(x, y_sin, label=\"sin(x)\", color='navy', linewidth=2)\naxs[0, 0].set_title(\"Section 1: Sine Wave Analysis\", fontsize=14, fontweight='bold')\naxs[0, 0].set_xlabel(\"Time (seconds)\")\naxs[0, 0].set_ylabel(\"Amplitude\")\naxs[0, 0].grid(True)\naxs[0, 0].legend()\n\n# Adding a text box with key bullet points\nannotations_sin = (\"Highlights:\\n\"\n                   \" - Peak at ~1.57\\n\"\n                   \" - Zero crossing at ~3.14\\n\"\n                   \" - Trough at ~4.71\")\naxs[0, 0].text(0.05, 0.95, annotations_sin, transform=axs[0, 0].transAxes,\n               fontsize=10, verticalalignment='top',\n               bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\"))\n\n# -------------------------\n# Subplot 2: Cosine Wave Overview\n# -------------------------\naxs[0, 1].plot(x, y_cos, label=\"cos(x)\", color='crimson', linewidth=2)\naxs[0, 1].set_title(\"Section 2: Cosine Wave Overview\", fontsize=14, fontweight='bold')\naxs[0, 1].set_xlabel(\"Time (seconds)\")\naxs[0, 1].set_ylabel(\"Amplitude\")\naxs[0, 1].grid(True)\naxs[0, 1].legend()\n\n# Adding a text box with a brief description\nannotations_cos = (\"Points to Note:\\n\"\n                   \"• Phase: Starts at 0\\n\"\n                   \"• Frequency: 1 Hz\\n\"\n                   \"• Cycle: Smooth oscillations\")\naxs[0, 1].text(0.05, 0.90, annotations_cos, transform=axs[0, 1].transAxes,\n               fontsize=10, verticalalignment='top',\n               bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\"))\n\n# -------------------------\n# Subplot 3: Scatter Data Overview\n# -------------------------\naxs[1, 0].scatter(x_scatter, y_scatter, color='forestgreen', edgecolors='black', label=\"Random Points\")\naxs[1, 0].set_title(\"Section 3: Scatter Data Overview\", fontsize=14, fontweight='",
            "feature_requirements": "• The output must depict one overall title, \"Comprehensive Data Visualization Report\", prominently rendered at the top of the diagram.  \n• The diagram must be divided into a 2×2 grid replicating four subplots.  \n• In the first (top‐left) subplot, the TikZ output must display a sine wave labeled \"sin(x)\" in a navy-like color with a visibly thicker stroke, along with x-axis label \"Time (seconds)\" and y-axis label \"Amplitude\", grid lines, and a legend.  \n• The first subplot must also include an annotation box (with a rounded border and white background) located at the top left (within relative axis coordinates) containing a multiline text with bullet-like entries: \"Highlights:\", \" - Peak at ~1.57\", \" - Zero crossing at ~3.14\", and \" - Trough at ~4.71\".  \n• In the second (top‐right) subplot, the output must display a cosine wave labeled \"cos(x)\" in a crimson-like color with a similar stroke width, along with matching axis labels \"Time (seconds)\" and \"Amplitude\", grid lines, and a legend.  \n• The second subplot must incorporate an annotation box (similarly styled) placed near the top left inside the subplot that contains multiline text including \"Points to Note:\" followed by bullet-like entries \"• Phase: Starts at 0\", \"• Frequency: 1 Hz\", and \"• Cycle: Smooth oscillations\".  \n• The third (bottom‐left) subplot must render a scatter plot consisting of randomly generated points depicted in a forest green-like color with black edge colors and labeled \"Random Points\".  \n• The fourth (bottom‐right) subplot must depict a bar chart with categorical data, plotting the categories 'A', 'B', 'C', 'D' with corresponding values of 23, 45, 56, and 78, clearly aligning categories with their respective bars.  \n• All subplots must include visible and correctly placed axes titles, axis labels, legends, and grid lines where applicable, ensuring that text elements (titles, labels, annotation texts) are rendered with clearly measurable font sizes (e.g., subplot titles at 14 pt and overall title at 16 pt).",
            "task_id": "08XX82",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title displayed at the top of the diagram?",
                "How is the diagram layout organized?",
                "What plot is depicted in the top-left subplot?",
                "What axis labels are used in the first subplot?",
                "What bullet points are included in the annotation box in the first subplot?",
                "What plot is depicted in the top-right subplot and what annotation does it include?",
                "What axis labels are used in the second subplot?",
                "What is displayed in the bottom-left subplot?",
                "What does the bottom-right subplot illustrate?"
            ],
            "VQA_answers": [
                "Comprehensive Data Visualization Report",
                "A 2×2 grid with four subplots",
                "A sine wave labeled 'sin(x)' in a navy-like color with thicker stroke",
                "x-axis: 'Time (seconds)', y-axis: 'Amplitude'",
                "Highlights:, - Peak at ~1.57, - Zero crossing at ~3.14, - Trough at ~4.71",
                "A cosine wave labeled 'cos(x)' in a crimson-like color with an annotation box listing: Points to Note:, • Phase: Starts at 0, • Frequency: 1 Hz, • Cycle: Smooth oscillations",
                "x-axis: 'Time (seconds)', y-axis: 'Amplitude'",
                "A scatter plot of randomly generated points in a forest green-like color with black edges labeled 'Random Points'",
                "A bar chart with categorical data for A, B, C, D with values 23, 45, 56, and 78 respectively"
            ],
            "raw_output_metric": [
                "Comprehensive Data Visualization Report",
                "sin(x)",
                "Time (seconds)",
                "Amplitude",
                "Highlights:",
                " - Peak at ~1.57",
                " - Zero crossing at ~3.14",
                " - Trough at ~4.71",
                "cos(x)",
                "Points to Note:",
                "• Phase: Starts at 0",
                "• Frequency: 1 Hz",
                "• Cycle: Smooth oscillations",
                "Random Points",
                "A",
                "B",
                "C",
                "D",
                "23",
                "45",
                "56",
                "78"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX82_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# -------------------------\n# Data Generation Section\n# -------------------------\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Random data for scatter plot\nnp.random.seed(42)\nx_scatter = np.random.rand(50)\ny_scatter = np.random.rand(50)\n\n# Data for bar chart (categorical)\ncategories = ['A', 'B', 'C', 'D']\nvalues = [23, 45, 56, 78]\n\n# -------------------------\n# Figure and Subplots Setup\n# -------------------------\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=16, fontweight='bold')\n\n# -------------------------\n# Subplot 1: Sine Wave Analysis\n# -------------------------\naxs[0, 0].plot(x, y_sin, label=\"sin(x)\", color='navy', linewidth=2)\naxs[0, 0].set_title(\"Section 1: Sine Wave Analysis\", fontsize=14, fontweight='bold')\naxs[0, 0].set_xlabel(\"Time (seconds)\")\naxs[0, 0].set_ylabel(\"Amplitude\")\naxs[0, 0].grid(True)\naxs[0, 0].legend()\n\n# Adding a text box with key bullet points\nannotations_sin = (\"Highlights:\\n\"\n                   \" - Peak at ~1.57\\n\"\n                   \" - Zero crossing at ~3.14\\n\"\n                   \" - Trough at ~4.71\")\naxs[0, 0].text(0.05, 0.95, annotations_sin, transform=axs[0, 0].transAxes,\n               fontsize=10, verticalalignment='top',\n               bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\"))\n\n# -------------------------\n# Subplot 2: Cosine Wave Overview\n# -------------------------\naxs[0, 1].plot(x, y_cos, label=\"cos(x)\", color='crimson', linewidth=2)\naxs[0, 1].set_title(\"Section 2: Cosine Wave Overview\", fontsize=14, fontweight='bold')\naxs[0, 1].set_xlabel(\"Time (seconds)\")\naxs[0, 1].set_ylabel(\"Amplitude\")\naxs[0, 1].grid(True)\naxs[0, 1].legend()\n\n# Adding a text box with a brief description\nannotations_cos = (\"Points to Note:\\n\"\n                   \"• Phase: Starts at 0\\n\"\n                   \"• Frequency: 1 Hz\\n\"\n                   \"• Cycle: Smooth oscillations\")\naxs[0, 1].text(0.05, 0.90, annotations_cos, transform=axs[0, 1].transAxes,\n               fontsize=10, verticalalignment='top',\n               bbox=dict(boxstyle=\"round\", fc=\"w\", ec=\"gray\"))\n\n# -------------------------\n# Subplot 3: Scatter Data Overview\n# -------------------------\naxs[1, 0].scatter(x_scatter, y_scatter, color='forestgreen', edgecolors='black', label=\"Random Points\")\naxs[1, 0].set_title(\"Section 3: Scatter Data Overview\", fontsize=14, fontweight='"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX82_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "sin(x)",
                                "Time (seconds)",
                                "Amplitude",
                                "Highlights:",
                                " - Peak at ~1.57",
                                " - Zero crossing at ~3.14",
                                " - Trough at ~4.71",
                                "cos(x)",
                                "Points to Note:",
                                "• Phase: Starts at 0",
                                "• Frequency: 1 Hz",
                                "• Cycle: Smooth oscillations",
                                "Random Points",
                                "A",
                                "B",
                                "C",
                                "D",
                                "23",
                                "45",
                                "56",
                                "78"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX82_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX82_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title displayed at the top of the diagram?",
                                "How is the diagram layout organized?",
                                "What plot is depicted in the top-left subplot?",
                                "What axis labels are used in the first subplot?",
                                "What bullet points are included in the annotation box in the first subplot?",
                                "What plot is depicted in the top-right subplot and what annotation does it include?",
                                "What axis labels are used in the second subplot?",
                                "What is displayed in the bottom-left subplot?",
                                "What does the bottom-right subplot illustrate?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX82_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "A 2×2 grid with four subplots",
                                "A sine wave labeled 'sin(x)' in a navy-like color with thicker stroke",
                                "x-axis: 'Time (seconds)', y-axis: 'Amplitude'",
                                "Highlights:, - Peak at ~1.57, - Zero crossing at ~3.14, - Trough at ~4.71",
                                "A cosine wave labeled 'cos(x)' in a crimson-like color with an annotation box listing: Points to Note:, • Phase: Starts at 0, • Frequency: 1 Hz, • Cycle: Smooth oscillations",
                                "x-axis: 'Time (seconds)', y-axis: 'Amplitude'",
                                "A scatter plot of randomly generated points in a forest green-like color with black edges labeled 'Random Points'",
                                "A bar chart with categorical data for A, B, C, D with values 23, 45, 56, and 78 respectively"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Main Visualization Script using Matplotlib\n# =============================================================================\ndef create_visual_layout():\n    # Create a figure with a custom grid layout (2 rows, 2 columns)\n    fig = plt.figure(constrained_layout=True, figsize=(12, 10))\n    gs = fig.add_gridspec(2, 2)\n\n    # -----------------------------------------------------------------------------\n    # Section 1: Header and Title Information\n    # -----------------------------------------------------------------------------\n    ax_header = fig.add_subplot(gs[0, :])\n    ax_header.axis('off')  # Hide the axis\n    header_title = \"Data Visualization Report\"\n    header_subtitle = \"Structural Layout & Hierarchy Demonstration\"\n    header_info = (\n        \"--------------------------------------------------\\n\"\n        \"Report Sections:\\n\"\n        \"  1. Summary Statistics\\n\"\n        \"  2. Time Series Analysis\\n\"\n        \"  3. Category Distribution\\n\"\n        \"  4. Detailed Annotations\\n\"\n        \"--------------------------------------------------\"\n    )\n    # Draw header text on the top subplot\n    ax_header.text(0.5, 0.8, header_title, fontsize=22, fontweight='bold', ha='center')\n    ax_header.text(0.5, 0.6, header_subtitle, fontsize=16, color='gray', ha='center')\n    ax_header.text(0.5, 0.3, header_info, fontsize=12, ha='center', family='monospace')\n\n    # -----------------------------------------------------------------------------\n    # Section 2: Summary Statistics (Bar Chart)\n    # -----------------------------------------------------------------------------\n    ax1 = fig.add_subplot(gs[1, 0])\n    categories = ['Metric A', 'Metric B', 'Metric C', 'Metric D']\n    values = [23, 45, 56, 78]\n    bars = ax1.bar(categories, values, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])\n    ax1.set_title(\"Summary Statistics\", fontsize=14, pad=10)\n    ax1.set_xlabel(\"Metrics\")\n    ax1.set_ylabel(\"Values\")\n    ax1.grid(axis='y', linestyle='--', alpha=0.7)\n\n    # Annotate each bar with its value\n    for bar in bars:\n        height = bar.get_height()\n        ax1.text(bar.get_x() + bar.get_width()/2.0, height + 2, f'{height}', \n                 ha='center', va='bottom', fontsize=10)\n\n    # -----------------------------------------------------------------------------\n    # Section 3: Time Series Analysis (Line Plot with Detailed Labels)\n    # -----------------------------------------------------------------------------\n    ax2 = fig.add_subplot(gs[0, 0])\n    # Generate sample time series data\n    time = np.linspace(0, 10, 100)\n    series1 = np.sin(time) + np.random.normal(0, 0.1, len(time))\n    series2 = np.cos(time) + np.random.normal(0, 0.1, len(time))\n    \n    ax2.plot(time, series1, label='Sine Wave', color='#9467bd', linewidth=2)\n    ax2.plot(time, series2, label='Cosine Wave', color='#8c564b', linewidth=2, linestyle='--')\n    ax2.set_title(\"Time Series Analysis\", fontsize=14, pad=10)\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Value\")\n    ax2.legend(loc='upper right', fontsize=9)\n    ax2.grid(True, linestyle=':', alpha=0.6)\n    \n    # Add detailed annotations\n    annotation_text = (\n        \"Key Observations:\\n\"\n        \"  - Sine wave oscillates around 0.\\n\"\n        \"  - Cosine wave shows a phase shift.\\n\"\n        \"  - Noise added for realism.\"\n    )\n    ax2.text(0.05, 0.95, annotation_text, transform=ax2.transAxes, fontsize=10,\n             verticalalignment='top', bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"wheat\", alpha=0.5))\n    \n    # -----------------------------------------------------------------------------\n    # Section 4: Category Distribution (Pie Chart)\n    # -----------------------------------------------------------------------------\n    ax3 = fig.add_subplot(gs[1, 1])\n    labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4', 'Segment 5']\n    sizes = [15, 30, 10, 25, 20]\n    colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00']\n    wedges, texts, autotexts = ax3.pie(\n        sizes, labels=labels, colors=colors, autopct='%1.1f%%',\n        startangle=140, textprops=dict(color=\"black\")\n    )\n    ax3.set_title(\"Category Distribution\", fontsize=14, pad=10)\n    \n    # Create a legend with extra details\n    legend_labels = [\n        f\"{label}: {size} units\" for label, size in zip(labels, sizes)\n    ]\n    ax3.legend(wedges, legend_labels, title=\"Segments\", loc=\"center left\",\n               bbox_to_anchor=(1, 0, 0.5, 1), fontsize=10)\n\n    # -----------------------------------------------------------------------------\n    # Final Adjustments and Show Plot\n    # -----------------------------------------------------------------------------\n    plt.suptitle(\"Comprehensive Data Analysis Dashboard\", fontsize=18, y=0.98, fontweight='bold')\n    plt.tight_layout(rect=[0, 0, 0.85, 0.95])\n    plt.show()\n\nif __name__ == '__main__':\n    create_visual_layout()\n</code>",
            "feature_requirements": "• The output must include a header section displaying a main title (\"Data Visualization Report\"), a subtitle (\"Structural Layout & Hierarchy Demonstration\"), and a multi‑line report information block containing report section listings surrounded by dashed lines.  \n• The header text elements must be centered and rendered with differing font sizes and weights to distinguish the title, subtitle, and details.  \n• The output must render a bar chart representing summary statistics with four bars labeled \"Metric A\", \"Metric B\", \"Metric C\", and \"Metric D\" having heights corresponding to the values 23, 45, 56, and 78, respectively, and each bar must display its numeric value as an annotation above it.  \n• The bar chart section must include axis labels (\"Metrics\" for the x‑axis and \"Values\" for the y‑axis), a title (\"Summary Statistics\"), and horizontal grid lines (with dashed styling) behind the bars.  \n• The output must include a time series line chart showing two curves: one solid curve labeled \"Sine Wave\" in a specified color and one dashed curve labeled \"Cosine Wave\" in a different specified color; both curves should be plotted against a time axis covering a continuous range.  \n• The time series chart must include axis labels (\"Time (s)\" and \"Value\"), a legend identifying the two series, and a text box with key observations that lists at least three bullet points or lines summarizing the behavior of the curves and the addition of noise.  \n• The output must include a pie chart representing a category distribution with five segments labeled \"Segment 1\" through \"Segment 5\" with relative sizes of 15, 30, 10, 25, and 20, each rendered with a distinct color; the pie slices should display percentage labels when appropriate.  \n• The pie chart section must be accompanied by a legend that details each segment with its label and corresponding numerical value (e.g., \"Segment 1: 15 units\").  \n• The overall layout must include an overarching title (\"Comprehensive Data Analysis Dashboard\") placed prominently at the top of the visualization, ensuring that all sections (header, bar chart, time series, and pie chart) are arranged in a structured, grid‑like layout.",
            "task_id": "08XX83",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overarching title displayed at the very top of the visualization?",
                "Which header text elements are centered in the header section?",
                "How many bars are shown in the bar chart and what are their labels?",
                "What numeric value is annotated above the bar labeled 'Metric C'?",
                "What are the axis labels and the title in the bar chart section?",
                "What are the labels and line styles of the two curves in the time series line chart?",
                "How many segments are displayed in the pie chart and what is the value for 'Segment 4'?"
            ],
            "VQA_answers": [
                "Comprehensive Data Analysis Dashboard",
                "The main title 'Data Visualization Report', the subtitle 'Structural Layout & Hierarchy Demonstration', and a multi-line report info block surrounded by dashed lines",
                "4 bars labeled 'Metric A', 'Metric B', 'Metric C', and 'Metric D'",
                "56",
                "X-axis: 'Metrics', Y-axis: 'Values', Title: 'Summary Statistics'",
                "The solid curve is labeled 'Sine Wave' and the dashed curve is labeled 'Cosine Wave'",
                "5 segments are displayed; 'Segment 4' has a value of 25"
            ],
            "raw_output_metric": [
                "Data Visualization Report",
                "Structural Layout & Hierarchy Demonstration",
                "Summary Statistics",
                "Metric A",
                "Metric B",
                "Metric C",
                "Metric D",
                "23",
                "45",
                "56",
                "78",
                "Metrics",
                "Values",
                "Sine Wave",
                "Cosine Wave",
                "Time (s)",
                "Value",
                "Segment 1",
                "Segment 2",
                "Segment 3",
                "Segment 4",
                "Segment 5",
                "Segment 1: 15 units",
                "Segment 2: 30 units",
                "Segment 3: 10 units",
                "Segment 4: 25 units",
                "Segment 5: 20 units",
                "Comprehensive Data Analysis Dashboard"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX83_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# Main Visualization Script using Matplotlib\n# =============================================================================\ndef create_visual_layout():\n    # Create a figure with a custom grid layout (2 rows, 2 columns)\n    fig = plt.figure(constrained_layout=True, figsize=(12, 10))\n    gs = fig.add_gridspec(2, 2)\n\n    # -----------------------------------------------------------------------------\n    # Section 1: Header and Title Information\n    # -----------------------------------------------------------------------------\n    ax_header = fig.add_subplot(gs[0, :])\n    ax_header.axis('off')  # Hide the axis\n    header_title = \"Data Visualization Report\"\n    header_subtitle = \"Structural Layout & Hierarchy Demonstration\"\n    header_info = (\n        \"--------------------------------------------------\\n\"\n        \"Report Sections:\\n\"\n        \"  1. Summary Statistics\\n\"\n        \"  2. Time Series Analysis\\n\"\n        \"  3. Category Distribution\\n\"\n        \"  4. Detailed Annotations\\n\"\n        \"--------------------------------------------------\"\n    )\n    # Draw header text on the top subplot\n    ax_header.text(0.5, 0.8, header_title, fontsize=22, fontweight='bold', ha='center')\n    ax_header.text(0.5, 0.6, header_subtitle, fontsize=16, color='gray', ha='center')\n    ax_header.text(0.5, 0.3, header_info, fontsize=12, ha='center', family='monospace')\n\n    # -----------------------------------------------------------------------------\n    # Section 2: Summary Statistics (Bar Chart)\n    # -----------------------------------------------------------------------------\n    ax1 = fig.add_subplot(gs[1, 0])\n    categories = ['Metric A', 'Metric B', 'Metric C', 'Metric D']\n    values = [23, 45, 56, 78]\n    bars = ax1.bar(categories, values, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])\n    ax1.set_title(\"Summary Statistics\", fontsize=14, pad=10)\n    ax1.set_xlabel(\"Metrics\")\n    ax1.set_ylabel(\"Values\")\n    ax1.grid(axis='y', linestyle='--', alpha=0.7)\n\n    # Annotate each bar with its value\n    for bar in bars:\n        height = bar.get_height()\n        ax1.text(bar.get_x() + bar.get_width()/2.0, height + 2, f'{height}', \n                 ha='center', va='bottom', fontsize=10)\n\n    # -----------------------------------------------------------------------------\n    # Section 3: Time Series Analysis (Line Plot with Detailed Labels)\n    # -----------------------------------------------------------------------------\n    ax2 = fig.add_subplot(gs[0, 0])\n    # Generate sample time series data\n    time = np.linspace(0, 10, 100)\n    series1 = np.sin(time) + np.random.normal(0, 0.1, len(time))\n    series2 = np.cos(time) + np.random.normal(0, 0.1, len(time))\n    \n    ax2.plot(time, series1, label='Sine Wave', color='#9467bd', linewidth=2)\n    ax2.plot(time, series2, label='Cosine Wave', color='#8c564b', linewidth=2, linestyle='--')\n    ax2.set_title(\"Time Series Analysis\", fontsize=14, pad=10)\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Value\")\n    ax2.legend(loc='upper right', fontsize=9)\n    ax2.grid(True, linestyle=':', alpha=0.6)\n    \n    # Add detailed annotations\n    annotation_text = (\n        \"Key Observations:\\n\"\n        \"  - Sine wave oscillates around 0.\\n\"\n        \"  - Cosine wave shows a phase shift.\\n\"\n        \"  - Noise added for realism.\"\n    )\n    ax2.text(0.05, 0.95, annotation_text, transform=ax2.transAxes, fontsize=10,\n             verticalalignment='top', bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"wheat\", alpha=0.5))\n    \n    # -----------------------------------------------------------------------------\n    # Section 4: Category Distribution (Pie Chart)\n    # -----------------------------------------------------------------------------\n    ax3 = fig.add_subplot(gs[1, 1])\n    labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4', 'Segment 5']\n    sizes = [15, 30, 10, 25, 20]\n    colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00']\n    wedges, texts, autotexts = ax3.pie(\n        sizes, labels=labels, colors=colors, autopct='%1.1f%%',\n        startangle=140, textprops=dict(color=\"black\")\n    )\n    ax3.set_title(\"Category Distribution\", fontsize=14, pad=10)\n    \n    # Create a legend with extra details\n    legend_labels = [\n        f\"{label}: {size} units\" for label, size in zip(labels, sizes)\n    ]\n    ax3.legend(wedges, legend_labels, title=\"Segments\", loc=\"center left\",\n               bbox_to_anchor=(1, 0, 0.5, 1), fontsize=10)\n\n    # -----------------------------------------------------------------------------\n    # Final Adjustments and Show Plot\n    # -----------------------------------------------------------------------------\n    plt.suptitle(\"Comprehensive Data Analysis Dashboard\", fontsize=18, y=0.98, fontweight='bold')\n    plt.tight_layout(rect=[0, 0, 0.85, 0.95])\n    plt.show()\n\nif __name__ == '__main__':\n    create_visual_layout()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX83_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Report",
                                "Structural Layout & Hierarchy Demonstration",
                                "Summary Statistics",
                                "Metric A",
                                "Metric B",
                                "Metric C",
                                "Metric D",
                                "23",
                                "45",
                                "56",
                                "78",
                                "Metrics",
                                "Values",
                                "Sine Wave",
                                "Cosine Wave",
                                "Time (s)",
                                "Value",
                                "Segment 1",
                                "Segment 2",
                                "Segment 3",
                                "Segment 4",
                                "Segment 5",
                                "Segment 1: 15 units",
                                "Segment 2: 30 units",
                                "Segment 3: 10 units",
                                "Segment 4: 25 units",
                                "Segment 5: 20 units",
                                "Comprehensive Data Analysis Dashboard"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX83_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX83_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overarching title displayed at the very top of the visualization?",
                                "Which header text elements are centered in the header section?",
                                "How many bars are shown in the bar chart and what are their labels?",
                                "What numeric value is annotated above the bar labeled 'Metric C'?",
                                "What are the axis labels and the title in the bar chart section?",
                                "What are the labels and line styles of the two curves in the time series line chart?",
                                "How many segments are displayed in the pie chart and what is the value for 'Segment 4'?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX83_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Analysis Dashboard",
                                "The main title 'Data Visualization Report', the subtitle 'Structural Layout & Hierarchy Demonstration', and a multi-line report info block surrounded by dashed lines",
                                "4 bars labeled 'Metric A', 'Metric B', 'Metric C', and 'Metric D'",
                                "56",
                                "X-axis: 'Metrics', Y-axis: 'Values', Title: 'Summary Statistics'",
                                "The solid curve is labeled 'Sine Wave' and the dashed curve is labeled 'Cosine Wave'",
                                "5 segments are displayed; 'Segment 4' has a value of 25"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nThis script creates a Matplotlib figure that visually represents a structured layout\nwith clear headings, sections, lists, labeled values and annotations. The structure is\nillustrative for visual conversion testing, ensuring the layout's visible content and hierarchy.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a figure with a grid layout\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, width_ratios=[1, 1], height_ratios=[1, 2, 1])\nfig.suptitle(\"Overall Report: Scientific Data Visualization\", fontsize=18, fontweight='bold')\n\n# --------------------------\n# Section 1: Sine Wave Plot\n# --------------------------\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(x, y1, color='blue', label='sin(x)')\nax1.set_title(\"Section 1: Sine Wave\", fontsize=14, fontweight='bold')\nax1.set_xlabel(\"Time (s)\")\nax1.set_ylabel(\"Amplitude\")\nax1.legend(loc='upper right')\nax1.grid(True)\n\n# Adding a text block with a list in the plot\ntext_str = (\n    \"Key Points:\\n\"\n    \" - Frequency: 1 Hz\\n\"\n    \" - Amplitude: ±1\\n\"\n    \" - Period: 2π seconds\"\n)\nax1.text(0.05, 0.95, text_str, transform=ax1.transAxes, fontsize=10,\n         verticalalignment='top', bbox={'boxstyle':'round', 'facecolor':'lightyellow', 'alpha':0.5})\n\n# --------------------------\n# Section 2: Cosine Wave Plot\n# --------------------------\nax2 = fig.add_subplot(gs[0, 1])\nax2.plot(x, y2, color='red', linestyle='--', label='cos(x)')\nax2.set_title(\"Section 2: Cosine Wave\", fontsize=14, fontweight='bold')\nax2.set_xlabel(\"Time (s)\")\nax2.set_ylabel(\"Amplitude\")\nax2.legend(loc='upper right')\nax2.grid(True)\n\n# Adding annotation with labeled values\nax2.annotate('Max Value: 1', xy=(0, 1), xytext=(2, 0.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, backgroundcolor='white')\n\n# --------------------------\n# Section 3: Combined Analysis\n# --------------------------\nax3 = fig.add_subplot(gs[1, :])\n# Plot both sine and cosine for comparative analysis\nax3.plot(x, y1, color='blue', label='sin(x)')\nax3.plot(x, y2, color='red', linestyle='--', label='cos(x)')\nax3.set_title(\"Section 3: Combined Sine & Cosine Analysis\", fontsize=14, fontweight='bold')\nax3.set_xlabel(\"Time (s)\")\nax3.set_ylabel(\"Amplitude\")\nax3.legend(loc='upper right')\nax3.grid(True)\n\n# Add a multi-line text box with hierarchical details\nanalysis_text = (\n    \"Analysis Summary:\\n\"\n    \"-----------------\\n\"\n    \"1. Sine and Cosine functions are periodic.\\n\"\n    \"2. They are phase-shifted by π/2.\\n\"\n    \"3. Observations:\\n\"\n    \"   * Sine wave leads cosine wave in phase.\\n\"\n    \"   * Amplitude and frequency remain consistent.\\n\"\n    \"\\nConclusion: The signals are complementary.\"\n)\nax3.text(0.02, 0.02, analysis_text, transform=ax3.transAxes, fontsize=10,\n         verticalalignment='bottom', bbox=dict(boxstyle=\"round,pad=0.5\", fc=\"white\", ec=\"gray\", lw=1))\n\n# --------------------------\n# Section 4: Detailed Data Annotations\n# --------------------------\nax4 = fig.add_subplot(gs[2, 0])\n# Creating a bar chart to show derived data\ncategories = ['A', 'B', 'C', 'D']\nvalues = [23, 45, 12, 36]\nbars = ax4.bar(categories, values, color='green')\nax4.set_title(\"Section 4: Data Summary\", fontsize=14, fontweight='bold')\nax4.set_xlabel(\"Categories\")\nax4.set_ylabel(\"Value Count\")\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.text(bar.get_x() + bar.get_width()/2, height + 1, f'{height}', ha='center', va='bottom', fontsize=10)\n\n# --------------------------\n# Section 5: Statistical Overview\n# --------------------------\nax5 = fig.add_subplot(gs[2, 1])\n# Plotting a histogram of random data for demonstration\nrandom_data = np.random.normal(loc=50, scale=15, size=200)\nn, bins, patches = ax5.hist(random_data, bins=15, color='purple', alpha=0.7, edgecolor='black')\nax5.set_title(\"Section 5: Statistical Distribution\", fontsize=14, fontweight='bold')\nax5.set_xlabel(\"Value Range\")\nax5.set_ylabel(\"Frequency\")\n\n# Adding vertical lines for mean and median\nmean_val = np.mean(random_data)\nmedian_val = np.median(random_data)\nax5.axvline(mean_val, color='yellow', linestyle='dashed', linewidth=2, label=f'Mean = {mean_val:.1f}')\nax5.axvline(median_val, color='cyan', linestyle='dashdot', linewidth=2, label=f'Median = {median_val:.1f}')\nax5.legend(loc='upper right')\n\n# --------------------------\n# Overall Annotations and Footnotes\n# --------------------------\n# Add a unified box at the bottom of the figure with extra info.\nfig.text(0.5, 0.01, \"Note: This visualization is auto-generated and serves as a structure-sample for layout testing.\",\n         ha=\"center\", fontsize=10, bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\n# Layout adjustments to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Save the figure to a file (for testing and verification)\nplt.savefig(\"structured_layout_plot.png\", dpi=150)\n\n# Display the plot\nplt.show()\n</code>",
            "feature_requirements": "• An overall title \"Overall Report: Scientific Data Visualization\" centered at the top with a bold, large font.  \n• A first section labeled \"Section 1: Sine Wave\" containing a blue sine curve plot with the x-axis labeled \"Time (s)\" and y-axis labeled \"Amplitude\", including a legend at the upper right and grid lines.  \n• Within Section 1, a text annotation box displaying a key points list that includes \"Frequency: 1 Hz\", \"Amplitude: ±1\", and \"Period: 2π seconds\", positioned in the upper left of the plot area.  \n• A second section labeled \"Section 2: Cosine Wave\" featuring a red dashed cosine curve plot with the same x-axis (\"Time (s)\") and y-axis (\"Amplitude\"), including a legend at the upper right and grid lines, along with an annotation arrow pointing to a labeled value \"Max Value: 1\".  \n• A third section labeled \"Section 3: Combined Sine & Cosine Analysis\" that overlays both the sine and cosine plots with their respective colors and styles, includes axis labels \"Time (s)\" and \"Amplitude\", a legend, grid lines, and a multi-line text box detailing an analysis summary with hierarchical numbering and bullet points.  \n• A fourth section labeled \"Section 4: Data Summary\" presenting a bar chart with four bars corresponding to categories 'A', 'B', 'C', and 'D'; each bar is annotated with its numerical value displayed just above it, and the axes are labeled \"Categories\" and \"Value Count\".  \n• A fifth section labeled \"Section 5: Statistical Distribution\" displaying a histogram plotted in purple with 15 bins, axis labels \"Value Range\" and \"Frequency\", and vertical lines indicating the mean (yellow, dashed) and median (cyan, dash-dotted), each line accompanied by a label showing the respective numeric value.  \n• A footer note centered at the bottom of the figure that reads \"Note: This visualization is auto-generated and serves as a structure-sample for layout testing,\" enclosed in a box with a distinct background color.",
            "task_id": "08XX84",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title displayed at the top of the visualization?",
                "What is the label of Section 1 and what plot is displayed there?",
                "What axis labels and legend position are used in the sine wave plot in Section 1?",
                "Which key points are listed in the text annotation box within Section 1?",
                "What is unique about the cosine curve in Section 2?",
                "What elements are combined in Section 3 and what additional text does it include?",
                "How many bars are shown in the bar chart in Section 4 and what are their category labels?",
                "In Section 4, where are the numerical values of the bars displayed?",
                "What features are included in Section 5 regarding the histogram and statistical markers?",
                "How is the footer note formatted and what text does it contain?"
            ],
            "VQA_answers": [
                "Overall Report: Scientific Data Visualization",
                "Section 1: Sine Wave with a blue sine curve plot",
                "x-axis: Time (s), y-axis: Amplitude, legend at the upper right",
                "Frequency: 1 Hz, Amplitude: ±1, Period: 2π seconds",
                "It is red, dashed, and includes an annotation arrow pointing to 'Max Value: 1'",
                "Both sine and cosine plots are overlaid, with a multi-line text box detailing an analysis summary with hierarchical numbering and bullet points",
                "Four bars labeled A, B, C, and D",
                "Just above each bar",
                "A purple histogram with 15 bins, axis labels 'Value Range' and 'Frequency', and vertical lines for the mean (yellow, dashed) and median (cyan, dash-dotted) with labels",
                "It is centered at the bottom in a box with a distinct background, reading 'Note: This visualization is auto-generated and serves as a structure-sample for layout testing'"
            ],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX84_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nThis script creates a Matplotlib figure that visually represents a structured layout\nwith clear headings, sections, lists, labeled values and annotations. The structure is\nillustrative for visual conversion testing, ensuring the layout's visible content and hierarchy.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a figure with a grid layout\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, width_ratios=[1, 1], height_ratios=[1, 2, 1])\nfig.suptitle(\"Overall Report: Scientific Data Visualization\", fontsize=18, fontweight='bold')\n\n# --------------------------\n# Section 1: Sine Wave Plot\n# --------------------------\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(x, y1, color='blue', label='sin(x)')\nax1.set_title(\"Section 1: Sine Wave\", fontsize=14, fontweight='bold')\nax1.set_xlabel(\"Time (s)\")\nax1.set_ylabel(\"Amplitude\")\nax1.legend(loc='upper right')\nax1.grid(True)\n\n# Adding a text block with a list in the plot\ntext_str = (\n    \"Key Points:\\n\"\n    \" - Frequency: 1 Hz\\n\"\n    \" - Amplitude: ±1\\n\"\n    \" - Period: 2π seconds\"\n)\nax1.text(0.05, 0.95, text_str, transform=ax1.transAxes, fontsize=10,\n         verticalalignment='top', bbox={'boxstyle':'round', 'facecolor':'lightyellow', 'alpha':0.5})\n\n# --------------------------\n# Section 2: Cosine Wave Plot\n# --------------------------\nax2 = fig.add_subplot(gs[0, 1])\nax2.plot(x, y2, color='red', linestyle='--', label='cos(x)')\nax2.set_title(\"Section 2: Cosine Wave\", fontsize=14, fontweight='bold')\nax2.set_xlabel(\"Time (s)\")\nax2.set_ylabel(\"Amplitude\")\nax2.legend(loc='upper right')\nax2.grid(True)\n\n# Adding annotation with labeled values\nax2.annotate('Max Value: 1', xy=(0, 1), xytext=(2, 0.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, backgroundcolor='white')\n\n# --------------------------\n# Section 3: Combined Analysis\n# --------------------------\nax3 = fig.add_subplot(gs[1, :])\n# Plot both sine and cosine for comparative analysis\nax3.plot(x, y1, color='blue', label='sin(x)')\nax3.plot(x, y2, color='red', linestyle='--', label='cos(x)')\nax3.set_title(\"Section 3: Combined Sine & Cosine Analysis\", fontsize=14, fontweight='bold')\nax3.set_xlabel(\"Time (s)\")\nax3.set_ylabel(\"Amplitude\")\nax3.legend(loc='upper right')\nax3.grid(True)\n\n# Add a multi-line text box with hierarchical details\nanalysis_text = (\n    \"Analysis Summary:\\n\"\n    \"-----------------\\n\"\n    \"1. Sine and Cosine functions are periodic.\\n\"\n    \"2. They are phase-shifted by π/2.\\n\"\n    \"3. Observations:\\n\"\n    \"   * Sine wave leads cosine wave in phase.\\n\"\n    \"   * Amplitude and frequency remain consistent.\\n\"\n    \"\\nConclusion: The signals are complementary.\"\n)\nax3.text(0.02, 0.02, analysis_text, transform=ax3.transAxes, fontsize=10,\n         verticalalignment='bottom', bbox=dict(boxstyle=\"round,pad=0.5\", fc=\"white\", ec=\"gray\", lw=1))\n\n# --------------------------\n# Section 4: Detailed Data Annotations\n# --------------------------\nax4 = fig.add_subplot(gs[2, 0])\n# Creating a bar chart to show derived data\ncategories = ['A', 'B', 'C', 'D']\nvalues = [23, 45, 12, 36]\nbars = ax4.bar(categories, values, color='green')\nax4.set_title(\"Section 4: Data Summary\", fontsize=14, fontweight='bold')\nax4.set_xlabel(\"Categories\")\nax4.set_ylabel(\"Value Count\")\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax4.text(bar.get_x() + bar.get_width()/2, height + 1, f'{height}', ha='center', va='bottom', fontsize=10)\n\n# --------------------------\n# Section 5: Statistical Overview\n# --------------------------\nax5 = fig.add_subplot(gs[2, 1])\n# Plotting a histogram of random data for demonstration\nrandom_data = np.random.normal(loc=50, scale=15, size=200)\nn, bins, patches = ax5.hist(random_data, bins=15, color='purple', alpha=0.7, edgecolor='black')\nax5.set_title(\"Section 5: Statistical Distribution\", fontsize=14, fontweight='bold')\nax5.set_xlabel(\"Value Range\")\nax5.set_ylabel(\"Frequency\")\n\n# Adding vertical lines for mean and median\nmean_val = np.mean(random_data)\nmedian_val = np.median(random_data)\nax5.axvline(mean_val, color='yellow', linestyle='dashed', linewidth=2, label=f'Mean = {mean_val:.1f}')\nax5.axvline(median_val, color='cyan', linestyle='dashdot', linewidth=2, label=f'Median = {median_val:.1f}')\nax5.legend(loc='upper right')\n\n# --------------------------\n# Overall Annotations and Footnotes\n# --------------------------\n# Add a unified box at the bottom of the figure with extra info.\nfig.text(0.5, 0.01, \"Note: This visualization is auto-generated and serves as a structure-sample for layout testing.\",\n         ha=\"center\", fontsize=10, bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\n# Layout adjustments to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Save the figure to a file (for testing and verification)\nplt.savefig(\"structured_layout_plot.png\", dpi=150)\n\n# Display the plot\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX84_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX84_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX84_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title displayed at the top of the visualization?",
                                "What is the label of Section 1 and what plot is displayed there?",
                                "What axis labels and legend position are used in the sine wave plot in Section 1?",
                                "Which key points are listed in the text annotation box within Section 1?",
                                "What is unique about the cosine curve in Section 2?",
                                "What elements are combined in Section 3 and what additional text does it include?",
                                "How many bars are shown in the bar chart in Section 4 and what are their category labels?",
                                "In Section 4, where are the numerical values of the bars displayed?",
                                "What features are included in Section 5 regarding the histogram and statistical markers?",
                                "How is the footer note formatted and what text does it contain?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX84_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Overall Report: Scientific Data Visualization",
                                "Section 1: Sine Wave with a blue sine curve plot",
                                "x-axis: Time (s), y-axis: Amplitude, legend at the upper right",
                                "Frequency: 1 Hz, Amplitude: ±1, Period: 2π seconds",
                                "It is red, dashed, and includes an annotation arrow pointing to 'Max Value: 1'",
                                "Both sine and cosine plots are overlaid, with a multi-line text box detailing an analysis summary with hierarchical numbering and bullet points",
                                "Four bars labeled A, B, C, and D",
                                "Just above each bar",
                                "A purple histogram with 15 bins, axis labels 'Value Range' and 'Frequency', and vertical lines for the mean (yellow, dashed) and median (cyan, dash-dotted) with labels",
                                "It is centered at the bottom in a box with a distinct background, reading 'Note: This visualization is auto-generated and serves as a structure-sample for layout testing'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize synthetic data for demonstration\nnp.random.seed(42)\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# Create a figure with a defined grid layout (3 rows, 2 columns)\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Data Analysis Report\", fontsize=20, fontweight='bold', y=0.97)\n\n# Section A: Overview (Top Left: Large text info box)\nax_overview = fig.add_subplot(3, 2, 1)\nax_overview.axis('off')\noverview_text = (\n    \"Section A: Overview\\n\"\n    \"-------------------------\\n\"\n    \"This report presents a comparative analysis of three datasets:\\n\"\n    \"1. Sine Wave (y1 = sin(x))\\n\"\n    \"2. Cosine Wave (y2 = cos(x))\\n\"\n    \"3. Combined Wave (y3 = sin(x)*cos(x))\\n\\n\"\n    \"Key Observations:\\n\"\n    \"   - Periodicity and amplitude variations are evident.\\n\"\n    \"   - The combined wave exhibits mixed characteristics.\\n\"\n    \"   - Useful for learning patterns in oscillatory data.\"\n)\nax_overview.text(0, 0.5, overview_text, fontsize=11, va='center', family='monospace')\n\n# Section B: Data Summary (Top Right: Listing labeled values)\nax_summary = fig.add_subplot(3, 2, 2)\nax_summary.axis('off')\nsummary_text = (\n    \"Section B: Data Summary\\n\"\n    \"-------------------------\\n\"\n    \"Sample Statistics:\\n\"\n    \"-------------------------\\n\"\n    \"x-range          : {:.2f} to {:.2f}\\n\"\n    \"y1 (Sin)         : Mean = {:.2f}, Std = {:.2f}\\n\"\n    \"y2 (Cos)         : Mean = {:.2f}, Std = {:.2f}\\n\"\n    \"y3 (Sine*Cosine) : Mean = {:.2f}, Std = {:.2f}\\n\"\n).format(\n    x.min(), x.max(),\n    np.mean(y1), np.std(y1),\n    np.mean(y2), np.std(y2),\n    np.mean(y3), np.std(y3)\n)\nax_summary.text(0, 0.5, summary_text, fontsize=11, va='center', family='monospace')\n\n# Section C: Sine Wave Plot (Middle Left)\nax_sine = fig.add_subplot(3, 2, 3)\nax_sine.plot(x, y1, color='blue', label='sin(x)')\nax_sine.set_title(\"Plot C1: Sine Wave\")\nax_sine.set_xlabel(\"X Axis\")\nax_sine.set_ylabel(\"sin(x)\")\nax_sine.grid(True)\nax_sine.legend(loc='upper right')\nax_sine.text(0.05, 0.9, \"Observation:\\n- Smooth oscillation\", \n             transform=ax_sine.transAxes, fontsize=9, color='navy',\n             bbox=dict(facecolor='white', alpha=0.5, edgecolor='blue'))\n\n# Section D: Cosine Wave Plot (Middle Right)\nax_cosine = fig.add_subplot(3, 2, 4)\nax_cosine.plot(x, y2, color='green', linestyle='--', label='cos(x)')\nax_cosine.set_title(\"Plot C2: Cosine Wave\")\nax_cosine.set_xlabel(\"X Axis\")\nax_cosine.set_ylabel(\"cos(x)\")\nax_cosine.grid(True)\nax_cosine.legend(loc='upper right')\nax_cosine.text(0.05, 0.9, \"Observation:\\n- Delayed peak\", \n               transform=ax_cosine.transAxes, fontsize=9, color='darkgreen',\n               bbox=dict(facecolor='white', alpha=0.5, edgecolor='green'))\n\n# Section E: Combined Wave Plot with Detailed Formatting (Bottom: Spanning two columns)\nax_combined = fig.add_subplot(3, 1, 3)\nax_combined.plot(x, y3, color='magenta', label='sin(x)*cos(x)')\nax_combined.set_title(\"Section E: Combined Wave Analysis\")\nax_combined.set_xlabel(\"X Axis\")\nax_combined.set_ylabel(\"sin(x)*cos(x)\")\nax_combined.grid(True)\nax_combined.legend(loc='upper right')\n\n# Annotate detailed list and values on the combined plot\ndetailed_info = (\n    \"Detailed Analysis:\\n\"\n    \"-------------------------\\n\"\n    \"• Amplitude Range : {:.2f} to {:.2f}\\n\"\n    \"• Notable Points  : \\n\"\n    \"    - Max Value at x ≈ {:.2f}\\n\"\n    \"    - Min Value at x ≈ {:.2f}\\n\"\n    \"• Trend: Periodic with modulation effects\\n\"\n).format(\n    np.min(y3), np.max(y3),\n    x[np.argmax(y3)], x[np.argmin(y3)]\n)\nax_combined.text(0.02, 0.75, detailed_info, transform=ax_combined.transAxes, \n                 fontsize=10, verticalalignment='top', family='monospace',\n                 bbox=dict(facecolor='floralwhite', edgecolor='grey', boxstyle='round,pad=0.5'))\n\n# Additional annotations for emphasis\nax_combined.text(0.02, 0.1, \"Note: Data generated for demonstration purposes only.\", \n                 transform=ax_combined.transAxes, fontsize=9, color='red', style='italic')\n\n# Adjust layout to prevent overlapping elements\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Save the figure (Optional: comment out if not needed)\n# plt.savefig(\"matplotlib_report.png\", dpi=300)\n\n# Display the final report figure\nplt.show()\n</code>",
            "feature_requirements": "• The output must display a main title \"Data Analysis Report\" at the top of the figure, rendered in a large, bold font.  \n• The top-left section must contain an \"Overview\" text box titled \"Section A: Overview\" with descriptive text and a list of key observations, all displayed without any visible axes.  \n• The top-right section must display a \"Data Summary\" text box titled \"Section B: Data Summary\" showing formatted statistics (including x-range, mean, and standard deviation for sine, cosine, and combined waves) rendered in a monospaced font, with no axes shown.  \n• The middle-left section must include a sine wave plot labeled \"Plot C1: Sine Wave\", featuring a blue sine curve with proper x and y-axis labels, gridlines, a legend positioned in the upper right, and an annotation stating \"Observation: - Smooth oscillation\" enclosed in a box with a white background and blue border.  \n• The middle-right section must include a cosine wave plot labeled \"Plot C2: Cosine Wave\", featuring a dashed green cosine curve with appropriate axis labels, gridlines, a legend in the upper right, and an annotation stating \"Observation: - Delayed peak\" with a white background and green border.  \n• The bottom section must present a combined wave plot spanning the full width, titled \"Section E: Combined Wave Analysis\", displaying a magenta curve with labeled x and y axes, gridlines, and a legend; it must include a detailed analysis annotation that shows the amplitude range, the x-values for the maximum and minimum points, and a trend description, all enclosed in a box with a floralwhite background and grey border, along with an additional italicized red note.  \n• The overall layout must mimic a grid with two columns for the top two rows (Overview and Data Summary, then the sine and cosine plots) and a single row spanning both columns for the combined wave plot.",
            "task_id": "08XX85",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title displayed at the top of the figure?",
                "Is the main title rendered in a large, bold font?",
                "What title is shown in the top-left text box?",
                "What key details are included in the Data Summary section?",
                "Which font style is used for the statistics in the Data Summary text box?",
                "What is the title of the sine wave plot in the middle-left section?",
                "What color is the sine curve and what annotation does it include?",
                "What is the title of the cosine wave plot in the middle-right section?",
                "How is the cosine wave styled and what annotation accompanies it?",
                "What title and additional details are provided in the bottom combined wave plot?"
            ],
            "VQA_answers": [
                "Data Analysis Report",
                "Yes",
                "Section A: Overview",
                "Formatted statistics including x-range, mean, and standard deviation for sine, cosine, and combined waves",
                "Monospaced",
                "Plot C1: Sine Wave",
                "Blue curve with an annotation 'Observation: - Smooth oscillation' in a box with a white background and blue border",
                "Plot C2: Cosine Wave",
                "Dashed green curve with an annotation 'Observation: - Delayed peak' in a box with a white background and green border",
                "Section E: Combined Wave Analysis; it displays a magenta curve with labeled axes, gridlines, a legend, a detailed analysis annotation (amplitude range, x-values for maximum and minimum points, and a trend description) in a box with a floralwhite background and grey border, plus an additional italicized red note"
            ],
            "raw_output_metric": [
                "Data Analysis Report",
                "Section A: Overview",
                "Section B: Data Summary",
                "Plot C1: Sine Wave",
                "Plot C2: Cosine Wave",
                "Section E: Combined Wave Analysis",
                "Observation: - Smooth oscillation",
                "Observation: - Delayed peak",
                "x-range",
                "mean",
                "standard deviation",
                "floralwhite",
                "grey",
                "blue",
                "dashed",
                "green",
                "magenta",
                "monospaced",
                "gridlines"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX85_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize synthetic data for demonstration\nnp.random.seed(42)\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# Create a figure with a defined grid layout (3 rows, 2 columns)\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Data Analysis Report\", fontsize=20, fontweight='bold', y=0.97)\n\n# Section A: Overview (Top Left: Large text info box)\nax_overview = fig.add_subplot(3, 2, 1)\nax_overview.axis('off')\noverview_text = (\n    \"Section A: Overview\\n\"\n    \"-------------------------\\n\"\n    \"This report presents a comparative analysis of three datasets:\\n\"\n    \"1. Sine Wave (y1 = sin(x))\\n\"\n    \"2. Cosine Wave (y2 = cos(x))\\n\"\n    \"3. Combined Wave (y3 = sin(x)*cos(x))\\n\\n\"\n    \"Key Observations:\\n\"\n    \"   - Periodicity and amplitude variations are evident.\\n\"\n    \"   - The combined wave exhibits mixed characteristics.\\n\"\n    \"   - Useful for learning patterns in oscillatory data.\"\n)\nax_overview.text(0, 0.5, overview_text, fontsize=11, va='center', family='monospace')\n\n# Section B: Data Summary (Top Right: Listing labeled values)\nax_summary = fig.add_subplot(3, 2, 2)\nax_summary.axis('off')\nsummary_text = (\n    \"Section B: Data Summary\\n\"\n    \"-------------------------\\n\"\n    \"Sample Statistics:\\n\"\n    \"-------------------------\\n\"\n    \"x-range          : {:.2f} to {:.2f}\\n\"\n    \"y1 (Sin)         : Mean = {:.2f}, Std = {:.2f}\\n\"\n    \"y2 (Cos)         : Mean = {:.2f}, Std = {:.2f}\\n\"\n    \"y3 (Sine*Cosine) : Mean = {:.2f}, Std = {:.2f}\\n\"\n).format(\n    x.min(), x.max(),\n    np.mean(y1), np.std(y1),\n    np.mean(y2), np.std(y2),\n    np.mean(y3), np.std(y3)\n)\nax_summary.text(0, 0.5, summary_text, fontsize=11, va='center', family='monospace')\n\n# Section C: Sine Wave Plot (Middle Left)\nax_sine = fig.add_subplot(3, 2, 3)\nax_sine.plot(x, y1, color='blue', label='sin(x)')\nax_sine.set_title(\"Plot C1: Sine Wave\")\nax_sine.set_xlabel(\"X Axis\")\nax_sine.set_ylabel(\"sin(x)\")\nax_sine.grid(True)\nax_sine.legend(loc='upper right')\nax_sine.text(0.05, 0.9, \"Observation:\\n- Smooth oscillation\", \n             transform=ax_sine.transAxes, fontsize=9, color='navy',\n             bbox=dict(facecolor='white', alpha=0.5, edgecolor='blue'))\n\n# Section D: Cosine Wave Plot (Middle Right)\nax_cosine = fig.add_subplot(3, 2, 4)\nax_cosine.plot(x, y2, color='green', linestyle='--', label='cos(x)')\nax_cosine.set_title(\"Plot C2: Cosine Wave\")\nax_cosine.set_xlabel(\"X Axis\")\nax_cosine.set_ylabel(\"cos(x)\")\nax_cosine.grid(True)\nax_cosine.legend(loc='upper right')\nax_cosine.text(0.05, 0.9, \"Observation:\\n- Delayed peak\", \n               transform=ax_cosine.transAxes, fontsize=9, color='darkgreen',\n               bbox=dict(facecolor='white', alpha=0.5, edgecolor='green'))\n\n# Section E: Combined Wave Plot with Detailed Formatting (Bottom: Spanning two columns)\nax_combined = fig.add_subplot(3, 1, 3)\nax_combined.plot(x, y3, color='magenta', label='sin(x)*cos(x)')\nax_combined.set_title(\"Section E: Combined Wave Analysis\")\nax_combined.set_xlabel(\"X Axis\")\nax_combined.set_ylabel(\"sin(x)*cos(x)\")\nax_combined.grid(True)\nax_combined.legend(loc='upper right')\n\n# Annotate detailed list and values on the combined plot\ndetailed_info = (\n    \"Detailed Analysis:\\n\"\n    \"-------------------------\\n\"\n    \"• Amplitude Range : {:.2f} to {:.2f}\\n\"\n    \"• Notable Points  : \\n\"\n    \"    - Max Value at x ≈ {:.2f}\\n\"\n    \"    - Min Value at x ≈ {:.2f}\\n\"\n    \"• Trend: Periodic with modulation effects\\n\"\n).format(\n    np.min(y3), np.max(y3),\n    x[np.argmax(y3)], x[np.argmin(y3)]\n)\nax_combined.text(0.02, 0.75, detailed_info, transform=ax_combined.transAxes, \n                 fontsize=10, verticalalignment='top', family='monospace',\n                 bbox=dict(facecolor='floralwhite', edgecolor='grey', boxstyle='round,pad=0.5'))\n\n# Additional annotations for emphasis\nax_combined.text(0.02, 0.1, \"Note: Data generated for demonstration purposes only.\", \n                 transform=ax_combined.transAxes, fontsize=9, color='red', style='italic')\n\n# Adjust layout to prevent overlapping elements\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Save the figure (Optional: comment out if not needed)\n# plt.savefig(\"matplotlib_report.png\", dpi=300)\n\n# Display the final report figure\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX85_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Analysis Report",
                                "Section A: Overview",
                                "Section B: Data Summary",
                                "Plot C1: Sine Wave",
                                "Plot C2: Cosine Wave",
                                "Section E: Combined Wave Analysis",
                                "Observation: - Smooth oscillation",
                                "Observation: - Delayed peak",
                                "x-range",
                                "mean",
                                "standard deviation",
                                "floralwhite",
                                "grey",
                                "blue",
                                "dashed",
                                "green",
                                "magenta",
                                "monospaced",
                                "gridlines"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX85_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX85_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the figure?",
                                "Is the main title rendered in a large, bold font?",
                                "What title is shown in the top-left text box?",
                                "What key details are included in the Data Summary section?",
                                "Which font style is used for the statistics in the Data Summary text box?",
                                "What is the title of the sine wave plot in the middle-left section?",
                                "What color is the sine curve and what annotation does it include?",
                                "What is the title of the cosine wave plot in the middle-right section?",
                                "How is the cosine wave styled and what annotation accompanies it?",
                                "What title and additional details are provided in the bottom combined wave plot?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX85_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Analysis Report",
                                "Yes",
                                "Section A: Overview",
                                "Formatted statistics including x-range, mean, and standard deviation for sine, cosine, and combined waves",
                                "Monospaced",
                                "Plot C1: Sine Wave",
                                "Blue curve with an annotation 'Observation: - Smooth oscillation' in a box with a white background and blue border",
                                "Plot C2: Cosine Wave",
                                "Dashed green curve with an annotation 'Observation: - Delayed peak' in a box with a white background and green border",
                                "Section E: Combined Wave Analysis; it displays a magenta curve with labeled axes, gridlines, a legend, a detailed analysis annotation (amplitude range, x-values for maximum and minimum points, and a trend description) in a box with a floralwhite background and grey border, plus an additional italicized red note"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\n\n# =============================================================================\n# Section: Setup the Figure and GridSpec Layout\n# =============================================================================\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[1, 2, 1], width_ratios=[2, 1],\n                       hspace=0.4, wspace=0.3)\n\n# =============================================================================\n# Section: Header\n# =============================================================================\nax_header = fig.add_subplot(gs[0, :])\nax_header.axis('off')\nax_header.text(0.5, 0.70, \"Main Visualization Dashboard\", fontsize=22,\n               ha='center', weight='bold')\nax_header.text(0.5, 0.35, \"A comprehensive analysis using Matplotlib\", fontsize=14,\n               ha='center', style='italic')\n\n# =============================================================================\n# Section: Left Panel - Sine Wave Analysis\n# =============================================================================\nax_left = fig.add_subplot(gs[1, 0])\n# Generate data for plotting a sine wave\nx = np.linspace(0, 10, 200)\ny = np.sin(x)\nax_left.plot(x, y, label='Sine Function', color='navy', linewidth=2)\nax_left.set_title(\"Sine Wave Analysis\", fontsize=16, pad=12)\nax_left.set_xlabel(\"X Axis (seconds)\")\nax_left.set_ylabel(\"Amplitude\")\nax_left.grid(True, linestyle='--', alpha=0.6)\nax_left.legend(loc='upper right', frameon=True)\n\n# Mark significant points on the sine wave\nsignificant_points = [np.pi/2, 3*np.pi/2, 5*np.pi/2]\nfor sp in significant_points:\n    ax_left.axvline(x=sp, color='red', linestyle=':', linewidth=1.5)\n    # Labeled value for each significant point\n    ax_left.text(sp, 0.0, f' {sp:.2f}', rotation=90,\n                 verticalalignment='bottom', color='red', fontsize=9)\n\n# =============================================================================\n# Section: Right Panel - Performance Metrics (Bar Chart)\n# =============================================================================\nax_right = fig.add_subplot(gs[1, 1])\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nmetrics = [7, 4, 9, 3]\nbars = ax_right.bar(categories, metrics, color='seagreen', alpha=0.8)\nax_right.set_title(\"Performance Metrics\", fontsize=16, pad=12)\nax_right.set_ylabel(\"Score\")\nax_right.set_ylim(0, 10)\n# Annotate bars with their values\nfor bar, val in zip(bars, metrics):\n    height = bar.get_height()\n    ax_right.text(bar.get_x() + bar.get_width() / 2, height + 0.3,\n                  f'{val}', ha='center', fontsize=10, color='black')\n\n# =============================================================================\n# Section: Footer - Data Table Display\n# =============================================================================\nax_footer = fig.add_subplot(gs[2, :])\nax_footer.axis('off')\n# Create a table to show parameter summary\ntable_data = [\n    [\"Parameter\", \"Value\", \"Status\"],\n    [\"Alpha\", \"0.05\", \"OK\"],\n    [\"Beta\", \"1.25\", \"Warning\"],\n    [\"Gamma\", \"3.14\", \"OK\"],\n    [\"Delta\", \"2.72\", \"Error\"],\n]\ntable = ax_footer.table(cellText=table_data, loc='center', cellLoc='center', edges='closed')\ntable.auto_set_font_size(False)\ntable.set_fontsize(10)\ntable.scale(1, 2)\nax_footer.set_title(\"Model Parameters Summary\", fontsize=16, pad=10, weight='bold')\n\n# =============================================================================\n# Section: Annotations and Additional Text Content\n# =============================================================================\n# Add a text box with bullet lists for key observations\nkey_observations = (\n    \"Key Observations:\\n\"\n    \"• Sine wave illustrates periodic behavior clearly.\\n\"\n    \"• Category C records the highest performance score.\\n\"\n    \"• Parameter 'Delta' requires further investigation.\\n\"\n    \"• Overall, the dashboard consolidates critical metrics.\"\n)\n# Position the",
            "feature_requirements": "• The output must include a header section spanning the width of the figure that displays a large, bold title “Main Visualization Dashboard” centered at the top and a centered italic subtitle “A comprehensive analysis using Matplotlib.”  \n• The central area should be divided into two panels: a left panel for the sine wave analysis and a right panel for the performance metrics bar chart.  \n• In the left panel, a smooth sine curve (generated over the interval 0 to 10) must be drawn with a clearly labeled “Sine Wave Analysis” title, x-axis labeled “X Axis (seconds)” and y-axis labeled “Amplitude,” plus a dashed grid background and a legend identifying the curve as “Sine Function.”  \n• The left panel must also show vertical red dotted lines at x-values corresponding to π/2, 3π/2, and 5π/2, each marked with a rotated label displaying the numerical value formatted to two decimal places.  \n• In the right panel, a bar chart should display four categories (“Category A”, “Category B”, “Category C”, “Category D”) with bar heights of 7, 4, 9, and 3 respectively, along with the title “Performance Metrics,” a y-axis labeled “Score” (with a scale from 0 to 10), and each bar annotated above with its corresponding numeric value.  \n• Below the central panels, a footer section must be included that contains a centered data table showing a header row (“Parameter”, “Value”, “Status”) and four rows with the values: [\"Alpha\", \"0.05\", \"OK\"], [\"Beta\", \"1.25\", \"Warning\"], [\"Gamma\", \"3.14\", \"OK\"], and [\"Delta\", \"2.72\", \"Error\"].  \n• The footer section should also include a bold title “Model Parameters Summary” positioned above the table.  \n• Additionally, an extra text box should be present that lists key observations in bullet form, including points such as the sine wave’s clear periodic behavior, the highest performance score in Category C, a note that Parameter ‘Delta’ requires further investigation, and a summary statement that the dashboard consolidates critical metrics.",
            "task_id": "08XX86",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the large title displayed in the header?",
                "What is the subtitle text under the header and how is it styled?",
                "How is the central area of the visualization divided?",
                "What elements are included in the left panel for the sine wave analysis?",
                "What additional markers appear on the left panel's sine curve?",
                "What type of chart is shown in the right panel and what are its details?",
                "What appears in the footer section of the visualization?",
                "What additional information is provided in a text box?",
                "How are axes and grid lines styled in the left panel?"
            ],
            "VQA_answers": [
                "Main Visualization Dashboard",
                "A comprehensive analysis using Matplotlib (italicized and centered)",
                "Into two panels: left for sine wave analysis and right for performance metrics bar chart",
                "A smooth sine curve over 0 to 10 with title 'Sine Wave Analysis', x-axis labeled 'X Axis (seconds)', y-axis labeled 'Amplitude', a dashed grid, and a legend 'Sine Function'",
                "Vertical red dotted lines at x = π/2, 3π/2, and 5π/2 with rotated labels showing values formatted to two decimal places",
                "A bar chart titled 'Performance Metrics' with four categories (Category A: 7, Category B: 4, Category C: 9, Category D: 3), y-axis labeled 'Score' with a scale from 0 to 10, and each bar annotated with its numeric value",
                "A bold title 'Model Parameters Summary' above a data table with header ('Parameter', 'Value', 'Status') and four rows: [Alpha, 0.05, OK], [Beta, 1.25, Warning], [Gamma, 3.14, OK], [Delta, 2.72, Error]",
                "Key observations in bullet form noting the sine wave’s clear periodic behavior, highest performance score in Category C, Parameter 'Delta' requiring further investigation, and that the dashboard consolidates critical metrics",
                "The x-axis is labeled 'X Axis (seconds)', the y-axis 'Amplitude', with a dashed grid background over the sine wave plot"
            ],
            "raw_output_metric": [
                "Main Visualization Dashboard",
                "A comprehensive analysis using Matplotlib.",
                "Sine Wave Analysis",
                "X Axis (seconds)",
                "Amplitude",
                "Sine Function",
                "π/2",
                "3π/2",
                "5π/2",
                "1.57",
                "4.71",
                "7.85",
                "Performance Metrics",
                "Score",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "7",
                "4",
                "9",
                "3",
                "Model Parameters Summary",
                "Parameter",
                "Value",
                "Status",
                "Alpha",
                "0.05",
                "OK",
                "Beta",
                "1.25",
                "Warning",
                "Gamma",
                "3.14",
                "Delta",
                "2.72",
                "Error",
                "sine wave’s clear periodic behavior",
                "highest performance score in Category C",
                "Parameter ‘Delta’ requires further investigation",
                "dashboard consolidates critical metrics"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX86_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.gridspec as gridspec\n\n# =============================================================================\n# Section: Setup the Figure and GridSpec Layout\n# =============================================================================\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[1, 2, 1], width_ratios=[2, 1],\n                       hspace=0.4, wspace=0.3)\n\n# =============================================================================\n# Section: Header\n# =============================================================================\nax_header = fig.add_subplot(gs[0, :])\nax_header.axis('off')\nax_header.text(0.5, 0.70, \"Main Visualization Dashboard\", fontsize=22,\n               ha='center', weight='bold')\nax_header.text(0.5, 0.35, \"A comprehensive analysis using Matplotlib\", fontsize=14,\n               ha='center', style='italic')\n\n# =============================================================================\n# Section: Left Panel - Sine Wave Analysis\n# =============================================================================\nax_left = fig.add_subplot(gs[1, 0])\n# Generate data for plotting a sine wave\nx = np.linspace(0, 10, 200)\ny = np.sin(x)\nax_left.plot(x, y, label='Sine Function', color='navy', linewidth=2)\nax_left.set_title(\"Sine Wave Analysis\", fontsize=16, pad=12)\nax_left.set_xlabel(\"X Axis (seconds)\")\nax_left.set_ylabel(\"Amplitude\")\nax_left.grid(True, linestyle='--', alpha=0.6)\nax_left.legend(loc='upper right', frameon=True)\n\n# Mark significant points on the sine wave\nsignificant_points = [np.pi/2, 3*np.pi/2, 5*np.pi/2]\nfor sp in significant_points:\n    ax_left.axvline(x=sp, color='red', linestyle=':', linewidth=1.5)\n    # Labeled value for each significant point\n    ax_left.text(sp, 0.0, f' {sp:.2f}', rotation=90,\n                 verticalalignment='bottom', color='red', fontsize=9)\n\n# =============================================================================\n# Section: Right Panel - Performance Metrics (Bar Chart)\n# =============================================================================\nax_right = fig.add_subplot(gs[1, 1])\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nmetrics = [7, 4, 9, 3]\nbars = ax_right.bar(categories, metrics, color='seagreen', alpha=0.8)\nax_right.set_title(\"Performance Metrics\", fontsize=16, pad=12)\nax_right.set_ylabel(\"Score\")\nax_right.set_ylim(0, 10)\n# Annotate bars with their values\nfor bar, val in zip(bars, metrics):\n    height = bar.get_height()\n    ax_right.text(bar.get_x() + bar.get_width() / 2, height + 0.3,\n                  f'{val}', ha='center', fontsize=10, color='black')\n\n# =============================================================================\n# Section: Footer - Data Table Display\n# =============================================================================\nax_footer = fig.add_subplot(gs[2, :])\nax_footer.axis('off')\n# Create a table to show parameter summary\ntable_data = [\n    [\"Parameter\", \"Value\", \"Status\"],\n    [\"Alpha\", \"0.05\", \"OK\"],\n    [\"Beta\", \"1.25\", \"Warning\"],\n    [\"Gamma\", \"3.14\", \"OK\"],\n    [\"Delta\", \"2.72\", \"Error\"],\n]\ntable = ax_footer.table(cellText=table_data, loc='center', cellLoc='center', edges='closed')\ntable.auto_set_font_size(False)\ntable.set_fontsize(10)\ntable.scale(1, 2)\nax_footer.set_title(\"Model Parameters Summary\", fontsize=16, pad=10, weight='bold')\n\n# =============================================================================\n# Section: Annotations and Additional Text Content\n# =============================================================================\n# Add a text box with bullet lists for key observations\nkey_observations = (\n    \"Key Observations:\\n\"\n    \"• Sine wave illustrates periodic behavior clearly.\\n\"\n    \"• Category C records the highest performance score.\\n\"\n    \"• Parameter 'Delta' requires further investigation.\\n\"\n    \"• Overall, the dashboard consolidates critical metrics.\"\n)\n# Position the"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX86_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Visualization Dashboard",
                                "A comprehensive analysis using Matplotlib.",
                                "Sine Wave Analysis",
                                "X Axis (seconds)",
                                "Amplitude",
                                "Sine Function",
                                "π/2",
                                "3π/2",
                                "5π/2",
                                "1.57",
                                "4.71",
                                "7.85",
                                "Performance Metrics",
                                "Score",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "7",
                                "4",
                                "9",
                                "3",
                                "Model Parameters Summary",
                                "Parameter",
                                "Value",
                                "Status",
                                "Alpha",
                                "0.05",
                                "OK",
                                "Beta",
                                "1.25",
                                "Warning",
                                "Gamma",
                                "3.14",
                                "Delta",
                                "2.72",
                                "Error",
                                "sine wave’s clear periodic behavior",
                                "highest performance score in Category C",
                                "Parameter ‘Delta’ requires further investigation",
                                "dashboard consolidates critical metrics"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX86_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX86_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the large title displayed in the header?",
                                "What is the subtitle text under the header and how is it styled?",
                                "How is the central area of the visualization divided?",
                                "What elements are included in the left panel for the sine wave analysis?",
                                "What additional markers appear on the left panel's sine curve?",
                                "What type of chart is shown in the right panel and what are its details?",
                                "What appears in the footer section of the visualization?",
                                "What additional information is provided in a text box?",
                                "How are axes and grid lines styled in the left panel?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX86_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Visualization Dashboard",
                                "A comprehensive analysis using Matplotlib (italicized and centered)",
                                "Into two panels: left for sine wave analysis and right for performance metrics bar chart",
                                "A smooth sine curve over 0 to 10 with title 'Sine Wave Analysis', x-axis labeled 'X Axis (seconds)', y-axis labeled 'Amplitude', a dashed grid, and a legend 'Sine Function'",
                                "Vertical red dotted lines at x = π/2, 3π/2, and 5π/2 with rotated labels showing values formatted to two decimal places",
                                "A bar chart titled 'Performance Metrics' with four categories (Category A: 7, Category B: 4, Category C: 9, Category D: 3), y-axis labeled 'Score' with a scale from 0 to 10, and each bar annotated with its numeric value",
                                "A bold title 'Model Parameters Summary' above a data table with header ('Parameter', 'Value', 'Status') and four rows: [Alpha, 0.05, OK], [Beta, 1.25, Warning], [Gamma, 3.14, OK], [Delta, 2.72, Error]",
                                "Key observations in bullet form noting the sine wave’s clear periodic behavior, highest performance score in Category C, Parameter 'Delta' requiring further investigation, and that the dashboard consolidates critical metrics",
                                "The x-axis is labeled 'X Axis (seconds)', the y-axis 'Amplitude', with a dashed grid background over the sine wave plot"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# MATPLOTLIB VISUAL REPORT\n# =============================================================================\n# This script generates a detailed report visualizing sample data.\n# It includes multiple sections, headings, and structured content.\n\ndef create_line_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Line Plot - Trend Analysis\n    # -----------------------------------------------------------------------------\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n    ax.plot(x, y, label='Sine Wave', color='b', linewidth=2)\n    \n    # Headings and annotations\n    ax.set_title(\"Trend Analysis - Sine Function\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Time (s)\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.grid(True, linestyle='--', alpha=0.6)\n    \n    # Adding structural text\n    text_str = (\n        \"Summary:\\n\"\n        \"- Represents periodic motion\\n\"\n        \"- Peaks at multiple intervals\\n\"\n        \"- Amplitude normalized to [-1, 1]\"\n    )\n    # Annotate structured content\n    ax.text(0.05, 0.95, text_str, transform=ax.transAxes, fontsize=9,\n            verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n    \n    ax.legend(loc='upper right')\n\n\ndef create_bar_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Bar Chart - Data Distribution\n    # -----------------------------------------------------------------------------\n    categories = ['A', 'B', 'C', 'D', 'E']\n    values = [23, 45, 12, 36, 29]\n    \n    bars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n    ax.set_title(\"Data Distribution by Category\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Category\")\n    ax.set_ylabel(\"Value\")\n    \n    # Adding labeled values on top of bars\n    for bar in bars:\n        height = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2.0, height + 1, f'{height}', \n                ha='center', va='bottom', fontsize=10, color='darkblue')\n    \n    # Insert a text box summarizing key points\n    summary = (\n        \"Key Insights:\\n\"\n        \"1. Category B shows the highest value.\\n\"\n        \"2. Category C is the lowest.\\n\"\n        \"3. Values vary significantly.\"\n    )\n    ax.text(0.02, 0.75, summary, transform=ax.transAxes, fontsize=9,\n            verticalalignment='top', bbox=dict(facecolor='lavender', edgecolor='gray', pad=5))\n\n\ndef create_scatter_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Scatter Plot - Correlation Analysis\n    # -----------------------------------------------------------------------------\n    np.random.seed(42)\n    x = np.random.rand(50) * 100\n    y = np.random.rand(50) * 100\n    colors = np.random.rand(50)\n    sizes = 100 * np.random.rand(50)\n    \n    scatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')\n    ax.set_title(\"Correlation Scatter Plot\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Variable X\")\n    ax.set_ylabel(\"Variable Y\")\n    ax.grid(True, linestyle=':', alpha=0.5)\n    \n    # Add colorbar for additional info\n    cbar = plt.colorbar(scatter, ax=ax)\n    cbar.set_label(\"Intensity\", fontsize=10)\n    \n    # Detailed observation as structured text\n    observations = (\n        \"Observations:\\n\"\n        \"- No clear linear correlation observed.\\n\"\n        \"- Dispersion is uniform.\\n\"\n        \"- Data points vary widely in size.\"\n    )\n    ax.text(0.65, 0.1, observations, transform=ax.transAxes, fontsize=9,\n            verticalalignment='bottom', bbox=dict(facecolor='lightyellow', alpha=0.7))\n\n\ndef create_table_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Table - Statistical Summary\n    # -----------------------------------------------------------------------------\n    ax.axis('off')  # Hide the axes\n    \n    # Create a table with sample statistics\n    columns = (\"Metric\", \"Value\")\n    cell_text = [\n        [\"Mean\", \"27.4\"],\n        [\"Median\", \"25.0\"],\n        [\"Std Dev\", \"5.8\"],\n        [\"Max\", \"35.2\"],\n        [\"Min\", \"18.1\"]\n    ]\n    \n    table = ax.table(cellText=cell_text, colLabels=columns, loc='center', cellLoc='center')\n    table.auto_set_font_size(False)\n    table.set_fontsize(10)\n    \n    # Adding a heading above the table\n    ax.set_title(\"Statistical Summary\", fontsize=14, fontweight='bold', pad=20)\n    \n    # Draw borders for emphasis\n    for key, cell in table.get_celld().items():\n        cell.set_linewidth(1.5)\n        cell.set_edgecolor('gray')\n\n\ndef visualize_report():\n    # =============================================================================\n    # Create a Multi-Panel Figure for Comprehensive Report\n    # =============================================================================\n    fig = plt.figure(constrained_layout=True, figsize=(14, 10))\n    \n    # Create a grid specification for layout\n    gs = fig.add_gridspec(3, 2)\n    \n    # Subplot 1: Line Plot on top left\n    ax1 = fig.add_subplot(gs[0, 0])\n    create_line_plot(ax1)\n    \n    # Subplot 2: Bar Plot on top right\n    ax2 = fig.add_subplot(gs[0, 1])\n    create_bar_plot(ax2)\n    \n    # Subplot 3: Scatter Plot in the middle spanning two columns\n    ax3 = fig.add_subplot(gs[1, :])\n    create_scatter_plot(ax3)\n    \n    # Subplot 4: Table plot on bottom spanning two columns\n    ax4 = fig.add_subplot(gs[2, :])\n    create_table_plot(ax4)\n    \n    # Overall Figure Title\n    fig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=16, fontweight='bold')\n    \n    # Footer Note embedded as text\n    fig.text(0.5, 0.02,\n             \"Note: This report is generated using Matplotlib. All data is for demonstration purposes.\",\n             ha='center', fontsize=10, style='italic')\n    \n    # Display the final figure\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    visualize_report()\n</code>",
            "feature_requirements": "• The converted output must include a multi-panel layout arranged in a grid simulating the four subplots: a top-left line plot, a top-right bar chart, a middle spanning scatter plot, and a bottom spanning table plot.\n\n• The line plot should display a blue sine wave curve with a legend labeled \"Sine Wave,\" accompanied by a title \"Trend Analysis - Sine Function,\" x-axis label \"Time (s),\" and y-axis label \"Amplitude\" with grid lines and an annotated text box summarizing key sine wave characteristics.\n\n• The bar chart must present five categories (A through E) with corresponding numeric values, display a title \"Data Distribution by Category,\" x-axis labeled \"Category,\" y-axis labeled \"Value,\" and include numeric labels atop each bar as well as an embedded text box listing key insights in a structured list.\n\n• The scatter plot should depict 50 data points with varying sizes and colors, have a title \"Correlation Scatter Plot,\" x-axis labeled \"Variable X,\" y-axis labeled \"Variable Y,\" include a grid with distinct linestyle, and show a colorbar labeled \"Intensity\" alongside a text box detailing observations in a multi-line list.\n\n• The table plot must render a table (without visible axes) containing two columns labeled \"Metric\" and \"Value\" and five rows displaying statistical values (Mean, Median, Std Dev, Max, Min), include clear cell borders, and feature a heading \"Statistical Summary\" situated above the table.\n\n• The overall visualization must include a central, prominent figure title \"Comprehensive Data Visualization Report\" and a footer note stating \"Note: This report is generated using Matplotlib. All data is for demonstration purposes.\" \n\n• All textual elements, numerical labels, legends, and annotations must be visibly and accurately positioned so they are clearly rendered in the TikZ output for verification.",
            "task_id": "08XX87",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the central figure title at the top of the visualization?",
                "What titles are given to the line and bar subplots?",
                "What label is used for the x-axis in the line (sine wave) plot?",
                "How many categories are displayed in the bar chart?",
                "What is the title of the scatter plot?",
                "What axis labels are shown in the scatter plot?",
                "What is the heading above the table plot?",
                "What text content is set as the footer note of the overall visualization?",
                "Which subplots include embedded text boxes and what do they summarize?"
            ],
            "VQA_answers": [
                "Comprehensive Data Visualization Report",
                "Trend Analysis - Sine Function and Data Distribution by Category",
                "Time (s)",
                "5",
                "Correlation Scatter Plot",
                "Variable X and Variable Y",
                "Statistical Summary",
                "Note: This report is generated using Matplotlib. All data is for demonstration purposes.",
                "The line plot has a text box summarizing key sine wave characteristics and the scatter plot has a text box detailing observations in a multi-line list"
            ],
            "raw_output_metric": [
                "Comprehensive Data Visualization Report",
                "Trend Analysis - Sine Function",
                "Time (s)",
                "Amplitude",
                "Sine Wave",
                "Data Distribution by Category",
                "Category",
                "Value",
                "Correlation Scatter Plot",
                "Variable X",
                "Variable Y",
                "Intensity",
                "Statistical Summary",
                "Metric",
                "Mean",
                "Median",
                "Std Dev",
                "Max",
                "Min",
                "Note: This report is generated using Matplotlib. All data is for demonstration purposes.",
                "key sine wave characteristics",
                "key insights",
                "observations"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX87_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# =============================================================================\n# MATPLOTLIB VISUAL REPORT\n# =============================================================================\n# This script generates a detailed report visualizing sample data.\n# It includes multiple sections, headings, and structured content.\n\ndef create_line_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Line Plot - Trend Analysis\n    # -----------------------------------------------------------------------------\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n    ax.plot(x, y, label='Sine Wave', color='b', linewidth=2)\n    \n    # Headings and annotations\n    ax.set_title(\"Trend Analysis - Sine Function\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Time (s)\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.grid(True, linestyle='--', alpha=0.6)\n    \n    # Adding structural text\n    text_str = (\n        \"Summary:\\n\"\n        \"- Represents periodic motion\\n\"\n        \"- Peaks at multiple intervals\\n\"\n        \"- Amplitude normalized to [-1, 1]\"\n    )\n    # Annotate structured content\n    ax.text(0.05, 0.95, text_str, transform=ax.transAxes, fontsize=9,\n            verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n    \n    ax.legend(loc='upper right')\n\n\ndef create_bar_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Bar Chart - Data Distribution\n    # -----------------------------------------------------------------------------\n    categories = ['A', 'B', 'C', 'D', 'E']\n    values = [23, 45, 12, 36, 29]\n    \n    bars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n    ax.set_title(\"Data Distribution by Category\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Category\")\n    ax.set_ylabel(\"Value\")\n    \n    # Adding labeled values on top of bars\n    for bar in bars:\n        height = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2.0, height + 1, f'{height}', \n                ha='center', va='bottom', fontsize=10, color='darkblue')\n    \n    # Insert a text box summarizing key points\n    summary = (\n        \"Key Insights:\\n\"\n        \"1. Category B shows the highest value.\\n\"\n        \"2. Category C is the lowest.\\n\"\n        \"3. Values vary significantly.\"\n    )\n    ax.text(0.02, 0.75, summary, transform=ax.transAxes, fontsize=9,\n            verticalalignment='top', bbox=dict(facecolor='lavender', edgecolor='gray', pad=5))\n\n\ndef create_scatter_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Scatter Plot - Correlation Analysis\n    # -----------------------------------------------------------------------------\n    np.random.seed(42)\n    x = np.random.rand(50) * 100\n    y = np.random.rand(50) * 100\n    colors = np.random.rand(50)\n    sizes = 100 * np.random.rand(50)\n    \n    scatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')\n    ax.set_title(\"Correlation Scatter Plot\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Variable X\")\n    ax.set_ylabel(\"Variable Y\")\n    ax.grid(True, linestyle=':', alpha=0.5)\n    \n    # Add colorbar for additional info\n    cbar = plt.colorbar(scatter, ax=ax)\n    cbar.set_label(\"Intensity\", fontsize=10)\n    \n    # Detailed observation as structured text\n    observations = (\n        \"Observations:\\n\"\n        \"- No clear linear correlation observed.\\n\"\n        \"- Dispersion is uniform.\\n\"\n        \"- Data points vary widely in size.\"\n    )\n    ax.text(0.65, 0.1, observations, transform=ax.transAxes, fontsize=9,\n            verticalalignment='bottom', bbox=dict(facecolor='lightyellow', alpha=0.7))\n\n\ndef create_table_plot(ax):\n    # -----------------------------------------------------------------------------\n    # Section: Table - Statistical Summary\n    # -----------------------------------------------------------------------------\n    ax.axis('off')  # Hide the axes\n    \n    # Create a table with sample statistics\n    columns = (\"Metric\", \"Value\")\n    cell_text = [\n        [\"Mean\", \"27.4\"],\n        [\"Median\", \"25.0\"],\n        [\"Std Dev\", \"5.8\"],\n        [\"Max\", \"35.2\"],\n        [\"Min\", \"18.1\"]\n    ]\n    \n    table = ax.table(cellText=cell_text, colLabels=columns, loc='center', cellLoc='center')\n    table.auto_set_font_size(False)\n    table.set_fontsize(10)\n    \n    # Adding a heading above the table\n    ax.set_title(\"Statistical Summary\", fontsize=14, fontweight='bold', pad=20)\n    \n    # Draw borders for emphasis\n    for key, cell in table.get_celld().items():\n        cell.set_linewidth(1.5)\n        cell.set_edgecolor('gray')\n\n\ndef visualize_report():\n    # =============================================================================\n    # Create a Multi-Panel Figure for Comprehensive Report\n    # =============================================================================\n    fig = plt.figure(constrained_layout=True, figsize=(14, 10))\n    \n    # Create a grid specification for layout\n    gs = fig.add_gridspec(3, 2)\n    \n    # Subplot 1: Line Plot on top left\n    ax1 = fig.add_subplot(gs[0, 0])\n    create_line_plot(ax1)\n    \n    # Subplot 2: Bar Plot on top right\n    ax2 = fig.add_subplot(gs[0, 1])\n    create_bar_plot(ax2)\n    \n    # Subplot 3: Scatter Plot in the middle spanning two columns\n    ax3 = fig.add_subplot(gs[1, :])\n    create_scatter_plot(ax3)\n    \n    # Subplot 4: Table plot on bottom spanning two columns\n    ax4 = fig.add_subplot(gs[2, :])\n    create_table_plot(ax4)\n    \n    # Overall Figure Title\n    fig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=16, fontweight='bold')\n    \n    # Footer Note embedded as text\n    fig.text(0.5, 0.02,\n             \"Note: This report is generated using Matplotlib. All data is for demonstration purposes.\",\n             ha='center', fontsize=10, style='italic')\n    \n    # Display the final figure\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    visualize_report()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX87_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "Trend Analysis - Sine Function",
                                "Time (s)",
                                "Amplitude",
                                "Sine Wave",
                                "Data Distribution by Category",
                                "Category",
                                "Value",
                                "Correlation Scatter Plot",
                                "Variable X",
                                "Variable Y",
                                "Intensity",
                                "Statistical Summary",
                                "Metric",
                                "Mean",
                                "Median",
                                "Std Dev",
                                "Max",
                                "Min",
                                "Note: This report is generated using Matplotlib. All data is for demonstration purposes.",
                                "key sine wave characteristics",
                                "key insights",
                                "observations"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX87_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX87_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the central figure title at the top of the visualization?",
                                "What titles are given to the line and bar subplots?",
                                "What label is used for the x-axis in the line (sine wave) plot?",
                                "How many categories are displayed in the bar chart?",
                                "What is the title of the scatter plot?",
                                "What axis labels are shown in the scatter plot?",
                                "What is the heading above the table plot?",
                                "What text content is set as the footer note of the overall visualization?",
                                "Which subplots include embedded text boxes and what do they summarize?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX87_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "Trend Analysis - Sine Function and Data Distribution by Category",
                                "Time (s)",
                                "5",
                                "Correlation Scatter Plot",
                                "Variable X and Variable Y",
                                "Statistical Summary",
                                "Note: This report is generated using Matplotlib. All data is for demonstration purposes.",
                                "The line plot has a text box summarizing key sine wave characteristics and the scatter plot has a text box detailing observations in a multi-line list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# -------------------------- #\n#       Data Generation      #\n# -------------------------- #\ndef generate_sine_data(n_points):\n    \"\"\"Generate sine data with n_points.\"\"\"\n    x = np.linspace(0, 10, n_points)\n    y = np.sin(x)\n    return x, y\n\ndef generate_cosine_data(n_points):\n    \"\"\"Generate cosine data with n_points.\"\"\"\n    x = np.linspace(0, 10, n_points)\n    y = np.cos(x)\n    return x, y\n\ndef generate_quadratic_data(start=0, stop=5, step=0.5):\n    \"\"\"Generate quadratic data between start and stop.\"\"\"\n    x = np.arange(start, stop, step)\n    y = x ** 2\n    return x, y\n\n# -------------------------- #\n#      Create Sample Data    #\n# -------------------------- #\n# Data for Sine Plot (Section 1)\nx_sin, y_sin = generate_sine_data(20)\n\n# Data for Cosine Plot (Section 2)\nx_cos, y_cos = generate_cosine_data(15)\n\n# Data for Quadratic Bar Plot (Section 3)\nx_quad, y_quad = generate_quadratic_data()\n\n# Data for Mixed Plot (Section 4)\nx_mixed, y_mixed = generate_sine_data(30)\n\n# -------------------------- #\n#   Figure & Subplots Setup  #\n# -------------------------- #\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\nfig.suptitle(\"Main Dashboard: Data Visualization Overview\", fontsize=16, fontweight='bold')\n\n# Adjust overall layout with space for annotations\nplt.subplots_adjust(top=0.92, bottom=0.08, hspace=0.3, wspace=0.3)\n\n# -------------------------- #\n#     Section 1: Sine Plot   #\n# -------------------------- #\naxs[0, 0].plot(x_sin, y_sin, marker='o', linestyle='-', color='blue', label='sin(x)')\naxs[0, 0].set_title(\"Section 1: Sine Function\")\naxs[0, 0].set_xlabel(\"X-axis\")\naxs[0, 0].set_ylabel(\"sin",
            "feature_requirements": "• The output must include a main title reading \"Main Dashboard: Data Visualization Overview\" that is prominently displayed, with a font size equivalent to 16 points and styled in bold.  \n• The diagram must be divided into four distinct subplots, arranged in a 2×2 grid layout, each clearly separated from the others.  \n• The first subplot (Section 1) must plot a sine function using 20 data points, represented by a blue line with circular markers, and include a legend entry labeled \"sin(x)\".  \n• The axes for each subplot must include descriptive labels; for example, Section 1 should have the x-axis labeled \"X-axis\" and the y-axis labeled to indicate the sine function.  \n• The conversion output must visually distinguish each subplot, reflecting different datasets: one for sine (Section 1), one for cosine (Section 2), one for a quadratic bar plot (Section 3), and one for a mixed plot using sine data (Section 4).  \n• The layout should replicate the original subplot spacing and overall figure dimensions as closely as possible, ensuring that elements such as inter-subplot spacing (horizontal and vertical gaps) are visually identifiable.",
            "task_id": "08XX88",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title text displayed at the top of the output?",
                "What is the font size and style of the main title?",
                "How many subplots are arranged in the diagram?",
                "What is the grid layout used for placing the subplots?",
                "What does Section 1 display and how is it represented?",
                "How many data points are used in the sine plot of Section 1?",
                "What is the legend entry for the sine plot in Section 1?",
                "Which types of plots are it expected to see in Sections 2, 3, and 4?"
            ],
            "VQA_answers": [
                "Main Dashboard: Data Visualization Overview",
                "16 points and bold",
                "4",
                "2×2 grid layout",
                "A sine function plotted with a blue line and circular markers",
                "20",
                "sin(x)",
                "cosine function, quadratic bar plot, and a mixed plot using sine data respectively"
            ],
            "raw_output_metric": [
                "Main Dashboard: Data Visualization Overview",
                "16",
                "bold",
                "tikzpicture",
                "2x2",
                "Section 1",
                "sin(x)",
                "X-axis",
                "sine",
                "Section 2",
                "cosine",
                "Section 3",
                "quadratic bar plot",
                "Section 4",
                "mixed plot",
                "blue",
                "circle",
                "20"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX88_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# -------------------------- #\n#       Data Generation      #\n# -------------------------- #\ndef generate_sine_data(n_points):\n    \"\"\"Generate sine data with n_points.\"\"\"\n    x = np.linspace(0, 10, n_points)\n    y = np.sin(x)\n    return x, y\n\ndef generate_cosine_data(n_points):\n    \"\"\"Generate cosine data with n_points.\"\"\"\n    x = np.linspace(0, 10, n_points)\n    y = np.cos(x)\n    return x, y\n\ndef generate_quadratic_data(start=0, stop=5, step=0.5):\n    \"\"\"Generate quadratic data between start and stop.\"\"\"\n    x = np.arange(start, stop, step)\n    y = x ** 2\n    return x, y\n\n# -------------------------- #\n#      Create Sample Data    #\n# -------------------------- #\n# Data for Sine Plot (Section 1)\nx_sin, y_sin = generate_sine_data(20)\n\n# Data for Cosine Plot (Section 2)\nx_cos, y_cos = generate_cosine_data(15)\n\n# Data for Quadratic Bar Plot (Section 3)\nx_quad, y_quad = generate_quadratic_data()\n\n# Data for Mixed Plot (Section 4)\nx_mixed, y_mixed = generate_sine_data(30)\n\n# -------------------------- #\n#   Figure & Subplots Setup  #\n# -------------------------- #\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\nfig.suptitle(\"Main Dashboard: Data Visualization Overview\", fontsize=16, fontweight='bold')\n\n# Adjust overall layout with space for annotations\nplt.subplots_adjust(top=0.92, bottom=0.08, hspace=0.3, wspace=0.3)\n\n# -------------------------- #\n#     Section 1: Sine Plot   #\n# -------------------------- #\naxs[0, 0].plot(x_sin, y_sin, marker='o', linestyle='-', color='blue', label='sin(x)')\naxs[0, 0].set_title(\"Section 1: Sine Function\")\naxs[0, 0].set_xlabel(\"X-axis\")\naxs[0, 0].set_ylabel(\"sin"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX88_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Dashboard: Data Visualization Overview",
                                "16",
                                "bold",
                                "tikzpicture",
                                "2x2",
                                "Section 1",
                                "sin(x)",
                                "X-axis",
                                "sine",
                                "Section 2",
                                "cosine",
                                "Section 3",
                                "quadratic bar plot",
                                "Section 4",
                                "mixed plot",
                                "blue",
                                "circle",
                                "20"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX88_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX88_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title text displayed at the top of the output?",
                                "What is the font size and style of the main title?",
                                "How many subplots are arranged in the diagram?",
                                "What is the grid layout used for placing the subplots?",
                                "What does Section 1 display and how is it represented?",
                                "How many data points are used in the sine plot of Section 1?",
                                "What is the legend entry for the sine plot in Section 1?",
                                "Which types of plots are it expected to see in Sections 2, 3, and 4?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX88_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Dashboard: Data Visualization Overview",
                                "16 points and bold",
                                "4",
                                "2×2 grid layout",
                                "A sine function plotted with a blue line and circular markers",
                                "20",
                                "sin(x)",
                                "cosine function, quadratic bar plot, and a mixed plot using sine data respectively"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------\n# Generate Sample Data\n# ---------------------------\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\nnp.random.seed(42)\nrandom_data = np.random.rand(10) * 10\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']\n\n# ---------------------------\n# Set up the Figure and Grid Layout\n# ---------------------------\nfig = plt.figure(constrained_layout=True, figsize=(12, 12))\ngs = fig.add_gridspec(3, 2)\n\n# ---------------------------\n# Main Title and Header\n# ---------------------------\nfig.suptitle(\"Data Visualization Dashboard\", fontsize=18, fontweight='bold')\nfig.text(0.5, 0.96, \"A Comprehensive Overview of Multiple Data Representations\", \n         ha='center', fontsize=14, color='navy')\n\n# ---------------------------\n# Subplot 1: Line Plot of sin(x) and cos(x)\n# ---------------------------\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(x, y, label='sin(x)', color='blue', linestyle='-', linewidth=2)\nax1.plot(x, z, label='cos(x)', color='red', linestyle='--', linewidth=2)\nax1.set_title(\"Trigonometric Functions\", fontsize=12, fontweight='bold')\nax1.set_xlabel(\"X Axis\")\nax1.set_ylabel(\"Y Axis\")\nax1.legend(loc='upper right')\nax1.grid(True)\n\n# ---------------------------\n# Subplot 2: Bar Chart of Categories\n# ---------------------------\nax2 = fig.add_subplot(gs[0, 1])\nbars = ax2.bar(categories, random_data, color='skyblue')\nax2.set_title(\"Random Data by Category\", fontsize=12, fontweight='bold')\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Value\")\nax2.grid(axis='y')\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2.0, height + 0.2, f'{height:.1f}', \n             ha='center', va='bottom', fontsize=9)\n\n# ---------------------------\n# Subplot 3: Scatter Plot with Annotations\n# ---------------------------\nax3 = fig.add_subplot(gs[1, :])\n# Generate random scatter data\nx_scatter = np.random.rand(50) * 10\ny_scatter = np.random.rand(50) * 10\nscatter = ax3.scatter(x_scatter, y_scatter, c=x_scatter, cmap='viridis', edgecolor='black')\nax3.set_title(\"Scatter Plot of",
            "feature_requirements": "• The output must display a main title reading \"Data Visualization Dashboard\" at the top of the visualization, along with a centered header text \"A Comprehensive Overview of Multiple Data Representations\" positioned just below the title.\n\n• There must be a subplot representing a line plot that includes two curves: one depicting sin(x) using a blue, solid line of width 2 and labeled 'sin(x)', and another depicting cos(x) using a red, dashed line of width 2 and labeled 'cos(x)'.\n\n• The line plot subplot must include a title \"Trigonometric Functions\", clearly labeled X and Y axes (\"X Axis\" and \"Y Axis\"), a legend in the upper right corner identifying the two curves, and grid lines visible in the background.\n\n• The output must contain a separate subplot presenting a bar chart with five bars corresponding to the categories \"Category A\", \"Category B\", \"Category C\", \"Category D\", and \"Category E\". Each bar should be colored in skyblue and represent a random value. Additionally, each bar must have its value displayed as an annotation above it (formatted to one decimal place) and display grid lines along the Y axis.\n\n• There must be a subplot for a scatter plot that spans across the full width of the grid. This subplot should include 50 scattered points plotted with random X and Y values within the [0, 10] range, colored according to a viridis color map and outlined with black edges, and should include an appropriate title indicating it is a scatter plot.\n\n• The overall layout of the visualization should be arranged in a grid structure similar to a 3-row by 2-column layout with appropriate positioning of subplots, ensuring that the scatter plot spans the full width in its grid row.",
            "task_id": "08XX89",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title at the top of the visualization?",
                "What is the centered header text displayed just below the main title?",
                "How many subplots are specified in the feature requirements?",
                "What color and style is used for the sin(x) curve in the line plot?",
                "What color and style is used for the cos(x) curve in the line plot?",
                "What title is given to the line plot subplot?",
                "How many bars are displayed in the bar chart subplot and what are their category labels?",
                "How many points are plotted in the scatter plot subplot?",
                "Which color map is used for the scattered points in the scatter plot?",
                "Where is the legend for the line plot positioned?"
            ],
            "VQA_answers": [
                "Data Visualization Dashboard",
                "A Comprehensive Overview of Multiple Data Representations",
                "3",
                "Blue, solid line",
                "Red, dashed line",
                "Trigonometric Functions",
                "5 bars labeled Category A, Category B, Category C, Category D, Category E",
                "50",
                "Viridis",
                "Upper right corner"
            ],
            "raw_output_metric": [
                "Data Visualization Dashboard",
                "A Comprehensive Overview of Multiple Data Representations",
                "Trigonometric Functions",
                "X Axis",
                "Y Axis",
                "sin(x)",
                "cos(x)",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "Category E",
                "skyblue",
                "viridis",
                "scatter plot"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX89_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------\n# Generate Sample Data\n# ---------------------------\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\nnp.random.seed(42)\nrandom_data = np.random.rand(10) * 10\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']\n\n# ---------------------------\n# Set up the Figure and Grid Layout\n# ---------------------------\nfig = plt.figure(constrained_layout=True, figsize=(12, 12))\ngs = fig.add_gridspec(3, 2)\n\n# ---------------------------\n# Main Title and Header\n# ---------------------------\nfig.suptitle(\"Data Visualization Dashboard\", fontsize=18, fontweight='bold')\nfig.text(0.5, 0.96, \"A Comprehensive Overview of Multiple Data Representations\", \n         ha='center', fontsize=14, color='navy')\n\n# ---------------------------\n# Subplot 1: Line Plot of sin(x) and cos(x)\n# ---------------------------\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot(x, y, label='sin(x)', color='blue', linestyle='-', linewidth=2)\nax1.plot(x, z, label='cos(x)', color='red', linestyle='--', linewidth=2)\nax1.set_title(\"Trigonometric Functions\", fontsize=12, fontweight='bold')\nax1.set_xlabel(\"X Axis\")\nax1.set_ylabel(\"Y Axis\")\nax1.legend(loc='upper right')\nax1.grid(True)\n\n# ---------------------------\n# Subplot 2: Bar Chart of Categories\n# ---------------------------\nax2 = fig.add_subplot(gs[0, 1])\nbars = ax2.bar(categories, random_data, color='skyblue')\nax2.set_title(\"Random Data by Category\", fontsize=12, fontweight='bold')\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Value\")\nax2.grid(axis='y')\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2.0, height + 0.2, f'{height:.1f}', \n             ha='center', va='bottom', fontsize=9)\n\n# ---------------------------\n# Subplot 3: Scatter Plot with Annotations\n# ---------------------------\nax3 = fig.add_subplot(gs[1, :])\n# Generate random scatter data\nx_scatter = np.random.rand(50) * 10\ny_scatter = np.random.rand(50) * 10\nscatter = ax3.scatter(x_scatter, y_scatter, c=x_scatter, cmap='viridis', edgecolor='black')\nax3.set_title(\"Scatter Plot of"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX89_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Dashboard",
                                "A Comprehensive Overview of Multiple Data Representations",
                                "Trigonometric Functions",
                                "X Axis",
                                "Y Axis",
                                "sin(x)",
                                "cos(x)",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "Category E",
                                "skyblue",
                                "viridis",
                                "scatter plot"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX89_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX89_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title at the top of the visualization?",
                                "What is the centered header text displayed just below the main title?",
                                "How many subplots are specified in the feature requirements?",
                                "What color and style is used for the sin(x) curve in the line plot?",
                                "What color and style is used for the cos(x) curve in the line plot?",
                                "What title is given to the line plot subplot?",
                                "How many bars are displayed in the bar chart subplot and what are their category labels?",
                                "How many points are plotted in the scatter plot subplot?",
                                "Which color map is used for the scattered points in the scatter plot?",
                                "Where is the legend for the line plot positioned?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX89_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Dashboard",
                                "A Comprehensive Overview of Multiple Data Representations",
                                "3",
                                "Blue, solid line",
                                "Red, dashed line",
                                "Trigonometric Functions",
                                "5 bars labeled Category A, Category B, Category C, Category D, Category E",
                                "50",
                                "Viridis",
                                "Upper right corner"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nMatplotlib Dashboard Example\n============================\nThis script demonstrates a standalone Matplotlib dashboard layout containing\nmultiple sections with headings, lists, labeled values, and structured content.\n\nSections:\n-----------\n1. Line Chart Analysis  - Displays a structured line plot with annotated analysis.\n2. Category Bar Chart   - Presents categories with labeled values.\n3. Scatter Data Spread  - Visualizes scatter plot data with formatted labels.\n4. Distribution Pie     - Shows a pie chart representation of data distribution.\n\nNote: All plots are rendered in a single static page.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------- Data Generation ---------------------------------\n# Generate sample data for line chart\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, x.size)\n\n# Data for bar chart: Categories and associated values\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [23, 17, 35, 29]\n\n# Data for scatter plot: Random data spread with clear clustering\nnp.random.seed(42)\nx_scatter = np.random.rand(50) * 10\ny_scatter = np.random.rand(50) * 10\n\n# Data for pie chart: Distribution of segments\npie_labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4']\npie_sizes = [15, 30, 45, 10]\n\n# ---------------------------- Figure and Axes Setup ---------------------------\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Dashboard: Data Visualization & Analysis\", fontsize=16, fontweight='bold')\n\n# ----------------------- Section 1: Line Chart Analysis -----------------------\nax1 = axs[0, 0]\nax1.plot(x, y, color='blue', linewidth=2, label=\"Sinusoidal Trend\")\nax1.set_title(\"1. Line Chart Analysis\", fontsize=14, pad=10)\nax1.set_xlabel(\"Time (s)\")\nax1.set_ylabel(\"Amplitude\")\nax1.grid(True, linestyle=\"--\", alpha=0.6)\n\n# Add structured annotation text (heading and bullet points)\nanalysis_text = (\n    \"Key Observations:\\n\"\n    \" - Data shows periodic behavior.\\n\"\n    \" - Noise perturbations present.\\n\"\n    \" - Potential cyclical trends identified.\"\n)\nax1.text(0.05, 0.95, analysis_text, transform=ax1.transAxes, fontsize=9,\n         verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\nax1.legend(loc=\"lower left\")\n\n# ----------------------- Section 2: Category Bar Chart ------------------------\nax2 = axs[0, 1]\nbars = ax2.bar(categories, values, color=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\nax2.set_title(\"2. Category Bar Chart\", fontsize=14, pad=10)\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\nax2.grid(axis='y', linestyle=\"--\", alpha=0.7)\n\n# Annotate each bar with its respective value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.annotate(f'{height}', xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3), textcoords=\"offset points\",\n                 ha='center', va='bottom', fontsize=9)\n\n# ----------------------- Section 3: Scatter Data Spread -----------------------\nax3 = axs[1, 0]\nscatter = ax3.scatter(x_scatter, y_scatter, c='purple', alpha=0.7, edgecolors='w', s=80)\nax3.set_title(\"3. Scatter Data Spread\", fontsize=14, pad=10)\nax3.set_xlabel(\"X-axis Label\")\nax3.set_ylabel(\"Y-axis Label\")\nax3.grid(True, linestyle=\"--\", alpha=0.5)\n\n# List structured annotations on the scatter plot\nscatter_info = (\n    \"Scatter Details:\\n\"\n    \" * Total Points: {}\\n\"\n    \" * Random Seed: 42\\n\"\n    \" * Color: Purple\".format(len(x_scatter))\n)\nax3.text(0.02, 0.98, scatter_info, transform=ax3.transAxes, fontsize=9,\n         verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"#e0e0e0\", alpha=0.8))\n\n# ----------------------- Section 4: Distribution Pie Chart --------------------\nax4 = axs[1, 1]\nwedges, texts, autotexts = ax4.pie(pie_sizes, labels=pie_labels, autopct='%1.1f%%',\n                                   startangle=90, colors=['#ff6666', '#ffcc66', '#99ff99', '#66b3ff'])\nax4.set_title(\"4. Distribution Pie\", fontsize=14, pad=10)\nax4.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n\n# Add additional annotation inside the pie chart\nax4.text(0, -1.2,\n         \"Pie Chart Breakdown:\\n - Total Segments: {}\\n - Sum: {}\"\n         .format(len(pie_labels), sum(pie_sizes)),\n         ha='center', fontsize=9, bbox=dict(boxstyle=\"round\", facecolor=\"lavender\", alpha=0.7))\n\n# ----------------------- Footer: Structured Metadata --------------------------\nfig.text(0.5, 0.02,\n         \"Dashboard generated using Matplotlib | Sections include Line Chart, Bar Chart, Scatter, and Pie Chart\",\n         ha=\"center\", fontsize=10, color='gray')\n\n# Display the complete dashboard\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n</code>",
            "feature_requirements": "• The output must render an overall dashboard title at the top that reads \"Dashboard: Data Visualization & Analysis\".  \n• The dashboard must be divided into four distinct sections arranged in a 2×2 grid layout.  \n• In the first section (titled \"1. Line Chart Analysis\"), a line plot with a blue sinuous curve should be shown, with x-axis labeled \"Time (s)\", y-axis labeled \"Amplitude\", grid lines, and an annotation box displaying key observations in a bullet list format.  \n• The second section (titled \"2. Category Bar Chart\") should display a bar chart with four bars corresponding to the categories \"Category A\", \"Category B\", \"Category C\", and \"Category D\", each annotated with its respective numeric value (23, 17, 35, 29), and include y-axis grid lines.  \n• The third section (titled \"3. Scatter Data Spread\") must include a scatter plot rendered with purple points (with white edges), axis labels \"X-axis Label\" and \"Y-axis Label\", grid lines, and a text box that details scatter specifics (including total points, the random seed, and the color used).  \n• The fourth section (titled \"4. Distribution Pie\") should render a circular pie chart with four segments labeled \"Segment 1\", \"Segment 2\", \"Segment 3\", and \"Segment 4\" along with percentage annotations, and an internal text annotation that describes the pie chart breakdown (listing the total segments and the sum of segment sizes).  \n• A centered footer text must appear at the bottom of the dashboard stating that the dashboard was generated using Matplotlib and listing the included sections (Line Chart, Bar Chart, Scatter, and Pie Chart).",
            "task_id": "08XX90",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall dashboard title at the top?",
                "How is the dashboard arranged?",
                "What is the title of the first section?",
                "What are the x-axis and y-axis labels of the line plot in the first section?",
                "How many categories are shown in the bar chart of the second section?",
                "What are the categories displayed in the bar chart?",
                "What is the title of the third section?",
                "What are the axis labels for the scatter plot?",
                "What is the title of the fourth section?",
                "What does the centered footer text state?"
            ],
            "VQA_answers": [
                "Dashboard: Data Visualization & Analysis",
                "Divided into four sections in a 2×2 grid layout",
                "1. Line Chart Analysis",
                "Time (s) and Amplitude",
                "4",
                "Category A, Category B, Category C, and Category D",
                "3. Scatter Data Spread",
                "X-axis Label and Y-axis Label",
                "4. Distribution Pie",
                "The dashboard was generated using Matplotlib and includes sections: Line Chart, Bar Chart, Scatter, and Pie Chart"
            ],
            "raw_output_metric": [
                "Dashboard: Data Visualization & Analysis",
                "1. Line Chart Analysis",
                "Time (s)",
                "Amplitude",
                "2. Category Bar Chart",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "23",
                "17",
                "35",
                "29",
                "3. Scatter Data Spread",
                "X-axis Label",
                "Y-axis Label",
                "purple",
                "white edges",
                "total points",
                "random seed",
                "color used",
                "4. Distribution Pie",
                "Segment 1",
                "Segment 2",
                "Segment 3",
                "Segment 4",
                "total segments",
                "sum of segment sizes",
                "Matplotlib",
                "Line Chart",
                "Bar Chart",
                "Scatter",
                "Pie Chart"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX90_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nMatplotlib Dashboard Example\n============================\nThis script demonstrates a standalone Matplotlib dashboard layout containing\nmultiple sections with headings, lists, labeled values, and structured content.\n\nSections:\n-----------\n1. Line Chart Analysis  - Displays a structured line plot with annotated analysis.\n2. Category Bar Chart   - Presents categories with labeled values.\n3. Scatter Data Spread  - Visualizes scatter plot data with formatted labels.\n4. Distribution Pie     - Shows a pie chart representation of data distribution.\n\nNote: All plots are rendered in a single static page.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ---------------------------- Data Generation ---------------------------------\n# Generate sample data for line chart\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, x.size)\n\n# Data for bar chart: Categories and associated values\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [23, 17, 35, 29]\n\n# Data for scatter plot: Random data spread with clear clustering\nnp.random.seed(42)\nx_scatter = np.random.rand(50) * 10\ny_scatter = np.random.rand(50) * 10\n\n# Data for pie chart: Distribution of segments\npie_labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4']\npie_sizes = [15, 30, 45, 10]\n\n# ---------------------------- Figure and Axes Setup ---------------------------\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nfig.suptitle(\"Dashboard: Data Visualization & Analysis\", fontsize=16, fontweight='bold')\n\n# ----------------------- Section 1: Line Chart Analysis -----------------------\nax1 = axs[0, 0]\nax1.plot(x, y, color='blue', linewidth=2, label=\"Sinusoidal Trend\")\nax1.set_title(\"1. Line Chart Analysis\", fontsize=14, pad=10)\nax1.set_xlabel(\"Time (s)\")\nax1.set_ylabel(\"Amplitude\")\nax1.grid(True, linestyle=\"--\", alpha=0.6)\n\n# Add structured annotation text (heading and bullet points)\nanalysis_text = (\n    \"Key Observations:\\n\"\n    \" - Data shows periodic behavior.\\n\"\n    \" - Noise perturbations present.\\n\"\n    \" - Potential cyclical trends identified.\"\n)\nax1.text(0.05, 0.95, analysis_text, transform=ax1.transAxes, fontsize=9,\n         verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.5))\n\nax1.legend(loc=\"lower left\")\n\n# ----------------------- Section 2: Category Bar Chart ------------------------\nax2 = axs[0, 1]\nbars = ax2.bar(categories, values, color=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\nax2.set_title(\"2. Category Bar Chart\", fontsize=14, pad=10)\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\nax2.grid(axis='y', linestyle=\"--\", alpha=0.7)\n\n# Annotate each bar with its respective value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.annotate(f'{height}', xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3), textcoords=\"offset points\",\n                 ha='center', va='bottom', fontsize=9)\n\n# ----------------------- Section 3: Scatter Data Spread -----------------------\nax3 = axs[1, 0]\nscatter = ax3.scatter(x_scatter, y_scatter, c='purple', alpha=0.7, edgecolors='w', s=80)\nax3.set_title(\"3. Scatter Data Spread\", fontsize=14, pad=10)\nax3.set_xlabel(\"X-axis Label\")\nax3.set_ylabel(\"Y-axis Label\")\nax3.grid(True, linestyle=\"--\", alpha=0.5)\n\n# List structured annotations on the scatter plot\nscatter_info = (\n    \"Scatter Details:\\n\"\n    \" * Total Points: {}\\n\"\n    \" * Random Seed: 42\\n\"\n    \" * Color: Purple\".format(len(x_scatter))\n)\nax3.text(0.02, 0.98, scatter_info, transform=ax3.transAxes, fontsize=9,\n         verticalalignment='top', bbox=dict(boxstyle=\"round\", facecolor=\"#e0e0e0\", alpha=0.8))\n\n# ----------------------- Section 4: Distribution Pie Chart --------------------\nax4 = axs[1, 1]\nwedges, texts, autotexts = ax4.pie(pie_sizes, labels=pie_labels, autopct='%1.1f%%',\n                                   startangle=90, colors=['#ff6666', '#ffcc66', '#99ff99', '#66b3ff'])\nax4.set_title(\"4. Distribution Pie\", fontsize=14, pad=10)\nax4.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n\n# Add additional annotation inside the pie chart\nax4.text(0, -1.2,\n         \"Pie Chart Breakdown:\\n - Total Segments: {}\\n - Sum: {}\"\n         .format(len(pie_labels), sum(pie_sizes)),\n         ha='center', fontsize=9, bbox=dict(boxstyle=\"round\", facecolor=\"lavender\", alpha=0.7))\n\n# ----------------------- Footer: Structured Metadata --------------------------\nfig.text(0.5, 0.02,\n         \"Dashboard generated using Matplotlib | Sections include Line Chart, Bar Chart, Scatter, and Pie Chart\",\n         ha=\"center\", fontsize=10, color='gray')\n\n# Display the complete dashboard\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX90_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard: Data Visualization & Analysis",
                                "1. Line Chart Analysis",
                                "Time (s)",
                                "Amplitude",
                                "2. Category Bar Chart",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "23",
                                "17",
                                "35",
                                "29",
                                "3. Scatter Data Spread",
                                "X-axis Label",
                                "Y-axis Label",
                                "purple",
                                "white edges",
                                "total points",
                                "random seed",
                                "color used",
                                "4. Distribution Pie",
                                "Segment 1",
                                "Segment 2",
                                "Segment 3",
                                "Segment 4",
                                "total segments",
                                "sum of segment sizes",
                                "Matplotlib",
                                "Line Chart",
                                "Bar Chart",
                                "Scatter",
                                "Pie Chart"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX90_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX90_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall dashboard title at the top?",
                                "How is the dashboard arranged?",
                                "What is the title of the first section?",
                                "What are the x-axis and y-axis labels of the line plot in the first section?",
                                "How many categories are shown in the bar chart of the second section?",
                                "What are the categories displayed in the bar chart?",
                                "What is the title of the third section?",
                                "What are the axis labels for the scatter plot?",
                                "What is the title of the fourth section?",
                                "What does the centered footer text state?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX90_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard: Data Visualization & Analysis",
                                "Divided into four sections in a 2×2 grid layout",
                                "1. Line Chart Analysis",
                                "Time (s) and Amplitude",
                                "4",
                                "Category A, Category B, Category C, and Category D",
                                "3. Scatter Data Spread",
                                "X-axis Label and Y-axis Label",
                                "4. Distribution Pie",
                                "The dashboard was generated using Matplotlib and includes sections: Line Chart, Bar Chart, Scatter, and Pie Chart"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nMatplotlib Visualization - Dashboard Overview\nThis script creates a multi-panel layout that features various sections such as headers,\nlists, and labeled values in different subplots. The goal is to produce a visual conversion\ntask output that tests structural layout and formatted content.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Figure and layout settings\nfig, axs = plt.subplots(2, 2, figsize=(12, 8), constrained_layout=True)\nfig.suptitle('Dashboard Visualization Layout', fontsize=16, fontweight='bold')\n\n###############################\n# Panel 1: Overview & Instructions (Top-Left)\n###############################\nax1 = axs[0, 0]\nax1.axis('off')  # Hide the axis for textual content\n\n# Title block\nax1.text(0.5, 0.95, \"Section 1: Overview\", ha='center', va='top', fontsize=14, fontweight='bold')\nax1.text(0.5, 0.88, \"This dashboard displays critical information.\", \n         ha='center', va='top', fontsize=10, style='italic')\n\n# Instructions list\ninstructions = [\n    \"Step 1: Review the overview details.\",\n    \"Step 2: Analyze the trends in Section 2.\",\n    \"Step 3: Compare the values in Section 3.\",\n    \"Step 4: Note the special markers in Section 4.\"\n]\n\ny_coord = 0.8\nfor i, instr in enumerate(instructions):\n    ax1.text(0.1, y_coord - i*0.07, f\"• {instr}\", fontsize=10, ha='left')\n\n# Labeled configuration values\nconfigs = {\n    \"Data Points\": 150,\n    \"Threshold\": 0.75,\n    \"Iteration Steps\": 100,\n    \"Sampling Rate\": \"0.2 sec\"\n}\ny_start = 0.5\nax1.text(0.5, y_start, \"Configuration Settings:\", fontsize=12, fontweight='bold', ha='center')\nfor i, (key, val) in enumerate(configs.items()):\n    ax1.text(0.2, y_start - (i+1)*0.06, f\"{key}:\", fontsize=10, ha='right')\n    ax1.text(0.25, y_start - (i+1)*0.06, f\"{val}\", fontsize=10, ha='left')\n\n###############################\n# Panel 2: Line Plot with Annotations (Top-Right)\n###############################\nax2 = axs[0, 1]\n\n# Generate sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot lines\nax2.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\nax2.plot(x, y2, label='cos(x)', color='red', linewidth=2, linestyle='--')\n\n# Add markers at significant points\nmarkers_idx = np.arange(0, 100, 10)\nax2.scatter(x[markers_idx], y1[markers_idx], color='navy', marker='o')\nax2.scatter(x[markers_idx], y2[markers_idx], color='darkred', marker='s')\n\n# Title and labels\nax2.set_title(\"Section 2: Trigonometric Trends\", fontsize=12, fontweight='bold')\nax2.set_xlabel(\"Time (s)\", fontsize=10)\nax2.set_ylabel(\"Amplitude\", fontsize=10)\nax2.legend(loc='upper right', fontsize=8)\nax2.grid(True, linestyle='--', alpha=0.5)\n\n###############################\n# Panel 3: Bar Chart with Data Comparison (Bottom-Left)\n###############################\nax3 = axs[1, 0]\n\n# Sample data for bar chart\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [23, 45, 12, 36, 30]\n\n# Create bars\nbars = ax3.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of bars\nfor bar in bars:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2, height + 1, f'{int(height)}',\n             ha='center', va='bottom', fontsize=9)\n\nax3.set_title(\"Section 3: Performance Metrics\", fontsize=12, fontweight='bold')\nax3.set_ylabel(\"Metric Value\", fontsize=10)\nax3.set_ylim(0, max(values) + 15)\nax3.grid(axis='y', linestyle=':', alpha=0.6)\n\n###############################\n# Panel 4: Scatter Plot with Labeled Annotations (Bottom-Right)\n###############################\nax4 = axs[1, 1]\n\n# Generate random scatter data\nnp.random.seed(42)\nx_data = np.random.rand(50) * 10\ny_data = np.random.rand(50) * 10\nsizes = np.random.rand(50) * 200 + 50\n\nscatter = ax4.scatter(x_data, y_data, s=sizes, c=x_data, cmap='viridis', alpha=0.7)\n\nax4.set_title(\"Section 4: Data Distribution\", fontsize=12, fontweight='bold')\nax4.set_xlabel(\"X Value\", fontsize=10)\nax4.set_ylabel(\"Y Value\", fontsize=10)\nax4.grid(True, linestyle='--', alpha=0.5)\n\n# Annotate a few key points\nfor i in range(0, 50, 10):\n    ax4.annotate(f\"Point {i}\",\n                 xy=(x_data[i], y_data[i]),\n                 xytext=(x_data[i]+0.5, y_data[i]+0.5),\n                 arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\", color='gray'),\n                 fontsize=9)\n\n# Colorbar for scatter plot\ncbar = fig.colorbar(scatter, ax=ax4, orientation='vertical', pad=0.02)\ncbar.set_label('X Value Intensity', fontsize=9)\n\n###############################\n# Final touches and display\n###############################\nplt.subplots_adjust(top=0.92)\nplt.show()\n</code>",
            "feature_requirements": "• The output must include an overall title \"Dashboard Visualization Layout\" displayed prominently, indicating the dashboard’s header.  \n• The layout must be divided into four panels arranged in a 2×2 grid corresponding to the original Matplotlib subplots.  \n• The top‐left panel (Panel 1) must display:  \n – A bold header \"Section 1: Overview\" with a subtitle \"This dashboard displays critical information.\" in italic text.  \n – A bullet list of instructions where each step (Step 1 through Step 4) is clearly listed with leading bullet markers.  \n – A centered label \"Configuration Settings:\" followed by key-value pairs (\"Data Points: 150\", \"Threshold: 0.75\", \"Iteration Steps: 100\", \"Sampling Rate: 0.2 sec\") rendered as separated text items.  \n• The top‐right panel (Panel 2) must showcase a line plot with two curves representing sin(x) and cos(x):  \n – sin(x) must be drawn as a blue solid line with circle markers at regular intervals, and cos(x) as a red dashed line with square markers.  \n – The panel should include a title \"Section 2: Trigonometric Trends\", x-axis label \"Time (s)\", y-axis label \"Amplitude\", a legend that identifies both curves, and visible dashed grid lines.  \n• The bottom‐left panel (Panel 3) must present a bar chart with five bars labeled with categories A, B, C, D, and E, with corresponding heights 23, 45, 12, 36, and 30:  \n – Each bar must have its numeric value displayed right above it.  \n – The panel must include a title \"Section 3: Performance Metrics\", a y-axis label \"Metric Value\", and a y-axis grid with a dotted line style.  \n• The bottom‐right panel (Panel 4) must feature a scatter plot composed of 50 data points with variable sizes and a color gradient based on x values (using a viridis-like colormap):  \n – This panel must include a title \"Section 4: Data Distribution\", x-axis label \"X Value\", and y-axis label \"Y Value\".  \n – A few specific points must be annotated with labels (e.g., \"Point 0\", \"Point 10\", etc.) along with arrow pointers.  \n – A vertical colorbar with the label \"X Value Intensity\" should be rendered adjacent to the scatter plot.  \n• All panels should maintain clear axis definitions (or intentionally hidden axes for text-based panels) and incorporate grid lines with specified dashed or dotted styles where applicable.",
            "task_id": "08XX91",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title displayed at the top of the dashboard?",
                "How many panels are arranged in the dashboard layout?",
                "Which panel shows the text 'Section 1: Overview' as a bold header?",
                "How many steps are listed as bullet points in the top‐left panel?",
                "What are the key-value pairs listed under 'Configuration Settings:'?",
                "Which panel contains the line plot of sin(x) and cos(x)?",
                "What are the styling differences for the sin(x) and cos(x) curves?",
                "What type of chart is displayed in the bottom‐left panel and how many bars does it have?",
                "What additional detail is shown for each bar in the bottom‐left panel?",
                "Which panel features a scatter plot with a vertical colorbar labeled 'X Value Intensity'?"
            ],
            "VQA_answers": [
                "Dashboard Visualization Layout",
                "Four panels in a 2x2 grid",
                "The top‐left panel",
                "Four steps (Step 1 through Step 4)",
                "Data Points: 150, Threshold: 0.75, Iteration Steps: 100, Sampling Rate: 0.2 sec",
                "The top‐right panel",
                "sin(x) is a blue solid line with circle markers; cos(x) is a red dashed line with square markers",
                "A bar chart with five bars labeled A, B, C, D, and E",
                "Each bar has its numeric value displayed right above it",
                "The bottom‐right panel"
            ],
            "raw_output_metric": [
                "Dashboard Visualization Layout",
                "Section 1: Overview",
                "This dashboard displays critical information.",
                "Step 1",
                "Step 2",
                "Step 3",
                "Step 4",
                "Configuration Settings:",
                "Data Points: 150",
                "Threshold: 0.75",
                "Iteration Steps: 100",
                "Sampling Rate: 0.2 sec",
                "Section 2: Trigonometric Trends",
                "Time (s)",
                "Amplitude",
                "sin(x)",
                "cos(x)",
                "Section 3: Performance Metrics",
                "Metric Value",
                "Section 4: Data Distribution",
                "X Value",
                "Y Value",
                "Point 0",
                "Point 10",
                "X Value Intensity"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX91_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\n\"\"\"\nMatplotlib Visualization - Dashboard Overview\nThis script creates a multi-panel layout that features various sections such as headers,\nlists, and labeled values in different subplots. The goal is to produce a visual conversion\ntask output that tests structural layout and formatted content.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Figure and layout settings\nfig, axs = plt.subplots(2, 2, figsize=(12, 8), constrained_layout=True)\nfig.suptitle('Dashboard Visualization Layout', fontsize=16, fontweight='bold')\n\n###############################\n# Panel 1: Overview & Instructions (Top-Left)\n###############################\nax1 = axs[0, 0]\nax1.axis('off')  # Hide the axis for textual content\n\n# Title block\nax1.text(0.5, 0.95, \"Section 1: Overview\", ha='center', va='top', fontsize=14, fontweight='bold')\nax1.text(0.5, 0.88, \"This dashboard displays critical information.\", \n         ha='center', va='top', fontsize=10, style='italic')\n\n# Instructions list\ninstructions = [\n    \"Step 1: Review the overview details.\",\n    \"Step 2: Analyze the trends in Section 2.\",\n    \"Step 3: Compare the values in Section 3.\",\n    \"Step 4: Note the special markers in Section 4.\"\n]\n\ny_coord = 0.8\nfor i, instr in enumerate(instructions):\n    ax1.text(0.1, y_coord - i*0.07, f\"• {instr}\", fontsize=10, ha='left')\n\n# Labeled configuration values\nconfigs = {\n    \"Data Points\": 150,\n    \"Threshold\": 0.75,\n    \"Iteration Steps\": 100,\n    \"Sampling Rate\": \"0.2 sec\"\n}\ny_start = 0.5\nax1.text(0.5, y_start, \"Configuration Settings:\", fontsize=12, fontweight='bold', ha='center')\nfor i, (key, val) in enumerate(configs.items()):\n    ax1.text(0.2, y_start - (i+1)*0.06, f\"{key}:\", fontsize=10, ha='right')\n    ax1.text(0.25, y_start - (i+1)*0.06, f\"{val}\", fontsize=10, ha='left')\n\n###############################\n# Panel 2: Line Plot with Annotations (Top-Right)\n###############################\nax2 = axs[0, 1]\n\n# Generate sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot lines\nax2.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\nax2.plot(x, y2, label='cos(x)', color='red', linewidth=2, linestyle='--')\n\n# Add markers at significant points\nmarkers_idx = np.arange(0, 100, 10)\nax2.scatter(x[markers_idx], y1[markers_idx], color='navy', marker='o')\nax2.scatter(x[markers_idx], y2[markers_idx], color='darkred', marker='s')\n\n# Title and labels\nax2.set_title(\"Section 2: Trigonometric Trends\", fontsize=12, fontweight='bold')\nax2.set_xlabel(\"Time (s)\", fontsize=10)\nax2.set_ylabel(\"Amplitude\", fontsize=10)\nax2.legend(loc='upper right', fontsize=8)\nax2.grid(True, linestyle='--', alpha=0.5)\n\n###############################\n# Panel 3: Bar Chart with Data Comparison (Bottom-Left)\n###############################\nax3 = axs[1, 0]\n\n# Sample data for bar chart\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [23, 45, 12, 36, 30]\n\n# Create bars\nbars = ax3.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of bars\nfor bar in bars:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2, height + 1, f'{int(height)}',\n             ha='center', va='bottom', fontsize=9)\n\nax3.set_title(\"Section 3: Performance Metrics\", fontsize=12, fontweight='bold')\nax3.set_ylabel(\"Metric Value\", fontsize=10)\nax3.set_ylim(0, max(values) + 15)\nax3.grid(axis='y', linestyle=':', alpha=0.6)\n\n###############################\n# Panel 4: Scatter Plot with Labeled Annotations (Bottom-Right)\n###############################\nax4 = axs[1, 1]\n\n# Generate random scatter data\nnp.random.seed(42)\nx_data = np.random.rand(50) * 10\ny_data = np.random.rand(50) * 10\nsizes = np.random.rand(50) * 200 + 50\n\nscatter = ax4.scatter(x_data, y_data, s=sizes, c=x_data, cmap='viridis', alpha=0.7)\n\nax4.set_title(\"Section 4: Data Distribution\", fontsize=12, fontweight='bold')\nax4.set_xlabel(\"X Value\", fontsize=10)\nax4.set_ylabel(\"Y Value\", fontsize=10)\nax4.grid(True, linestyle='--', alpha=0.5)\n\n# Annotate a few key points\nfor i in range(0, 50, 10):\n    ax4.annotate(f\"Point {i}\",\n                 xy=(x_data[i], y_data[i]),\n                 xytext=(x_data[i]+0.5, y_data[i]+0.5),\n                 arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\", color='gray'),\n                 fontsize=9)\n\n# Colorbar for scatter plot\ncbar = fig.colorbar(scatter, ax=ax4, orientation='vertical', pad=0.02)\ncbar.set_label('X Value Intensity', fontsize=9)\n\n###############################\n# Final touches and display\n###############################\nplt.subplots_adjust(top=0.92)\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX91_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Visualization Layout",
                                "Section 1: Overview",
                                "This dashboard displays critical information.",
                                "Step 1",
                                "Step 2",
                                "Step 3",
                                "Step 4",
                                "Configuration Settings:",
                                "Data Points: 150",
                                "Threshold: 0.75",
                                "Iteration Steps: 100",
                                "Sampling Rate: 0.2 sec",
                                "Section 2: Trigonometric Trends",
                                "Time (s)",
                                "Amplitude",
                                "sin(x)",
                                "cos(x)",
                                "Section 3: Performance Metrics",
                                "Metric Value",
                                "Section 4: Data Distribution",
                                "X Value",
                                "Y Value",
                                "Point 0",
                                "Point 10",
                                "X Value Intensity"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX91_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX91_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title displayed at the top of the dashboard?",
                                "How many panels are arranged in the dashboard layout?",
                                "Which panel shows the text 'Section 1: Overview' as a bold header?",
                                "How many steps are listed as bullet points in the top‐left panel?",
                                "What are the key-value pairs listed under 'Configuration Settings:'?",
                                "Which panel contains the line plot of sin(x) and cos(x)?",
                                "What are the styling differences for the sin(x) and cos(x) curves?",
                                "What type of chart is displayed in the bottom‐left panel and how many bars does it have?",
                                "What additional detail is shown for each bar in the bottom‐left panel?",
                                "Which panel features a scatter plot with a vertical colorbar labeled 'X Value Intensity'?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX91_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Visualization Layout",
                                "Four panels in a 2x2 grid",
                                "The top‐left panel",
                                "Four steps (Step 1 through Step 4)",
                                "Data Points: 150, Threshold: 0.75, Iteration Steps: 100, Sampling Rate: 0.2 sec",
                                "The top‐right panel",
                                "sin(x) is a blue solid line with circle markers; cos(x) is a red dashed line with square markers",
                                "A bar chart with five bars labeled A, B, C, D, and E",
                                "Each bar has its numeric value displayed right above it",
                                "The bottom‐right panel"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ------------------------------------------------------------------------------\n# FUNCTION DEFINITIONS\n# ------------------------------------------------------------------------------\n\ndef create_bar_chart(ax, data, labels):\n    \"\"\"\n    Create a Bar Chart with given data and labels.\n    \"\"\"\n    bar_positions = np.arange(len(data))\n    ax.bar(bar_positions, data, color='skyblue', edgecolor='black')\n    ax.set_title('Bar Chart - Category Values', fontsize=12, fontweight='bold')\n    ax.set_xlabel('Categories', fontsize=10)\n    ax.set_ylabel('Values', fontsize=10)\n    ax.set_xticks(bar_positions)\n    ax.set_xticklabels(labels, rotation=45, ha='right', fontsize=8)\n    ax.grid(True, linestyle='--', alpha=0.5)\n    # Label values above bars\n    for pos, value in zip(bar_positions, data):\n        ax.text(pos, value + 0.5, f'{value}', ha='center', va='bottom', fontsize=8)\n\n\ndef create_pie_chart(ax, data, labels):\n    \"\"\"\n    Create a Pie Chart with given data and labels.\n    \"\"\"\n    wedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', \n                                      startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n    ax.set_title('Pie Chart - Distribution', fontsize=12, fontweight='bold')\n    for text in texts + autotexts:\n        text.set_fontsize(8)\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n\ndef create_line_chart(ax, x, y):\n    \"\"\"\n    Create a Line Chart with multiple annotations and structural labels.\n    \"\"\"\n    ax.plot(x, y, marker='o', linestyle='-', color='green', label='Trend Line')\n    ax.set_title('Line Chart - Temporal Analysis', fontsize=12, fontweight='bold')\n    ax.set_xlabel('Time (units)', fontsize=10)\n    ax.set_ylabel('Values', fontsize=10)\n    ax.grid(True, linestyle='--', alpha=0.5)\n    ax.legend(fontsize=8)\n    \n    # Annotate key points\n    max_index = np.argmax(y)\n    ax.annotate(f\"Peak: {y[max_index]}\", \n                xy=(x[max_index], y[max_index]), \n                xytext=(x[max_index], y[max_index] + 3),\n                arrowprops=dict(facecolor='black', arrowstyle='->'),\n                fontsize=8, ha='center')\n\n\ndef add_structural_layout(fig):\n    \"\"\"\n    Adds headings and sections with formatted content to the main figure.\n    \"\"\"\n    # Main Title and Subtitle\n    fig.suptitle('Data Visualization Report', fontsize=16, fontweight='bold', color='navy')\n    fig.text(0.5, 0.95, 'Visual Conversion Task: Structural Layout & Content', \n             ha='center', va='center', fontsize=12, color='darkred')\n    \n    # Left Margin Label Column - key sections\n    sections = [\n        \"Section 1: Overview\",\n        \"  - Data Sources: Simulated\",\n        \"  - Metrics: Value counts, Percentages\",\n        \"\",\n        \"Section 2: Detailed Analysis\",\n        \"  - Bar Analysis\",\n        \"  - Pie Distribution\",\n        \"  - Temporal Trends\",\n        \"\",\n        \"Section 3: Conclusions\",\n        \"  - Trends Observed\",\n        \"  - Insights and Remarks\"\n    ]\n    y_position = 0.80\n    for line in sections:\n        fig.text(0.02, y_position, line, ha='left', va='center', fontsize=9, color='black')\n        y_position -= 0.03\n\n\ndef main():\n    # ------------------------------------------------------------------------------\n    # DATA PREPARATION\n    # ------------------------------------------------------------------------------\n    # Data for Bar Chart\n    categories = ['A', 'B', 'C', 'D', 'E']\n    bar_data = [10, 15, 12, 8, 20]\n    \n    # Data for Pie Chart\n    pie_data = [40, 25, 20, 15]\n    pie_labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4']\n    \n    # Data for Line Chart\n    x_values = np.linspace(1, 10, 10)\n    y_values = np.array([3, 5, 7, 6, 8, 12, 10, 14, 13, 15])\n    \n    # ------------------------------------------------------------------------------\n    # FIGURE AND SUBPLOTS CREATION\n    # ------------------------------------------------------------------------------\n    fig = plt.figure(figsize=(12, 8))\n    \n    # Create a GridSpec layout with 2 rows and 2 columns\n    gs = fig.add_gridspec(2, 2, width_ratios=[2, 1])\n    \n    # Subplot for Bar Chart (Top Left)\n    ax_bar = fig.add_subplot(gs[0, 0])\n    create_bar_chart(ax_bar, bar_data, categories)\n    \n    # Subplot for Pie Chart (Top Right)\n    ax_pie = fig.add_subplot(gs[0, 1])\n    create_pie_chart(ax_pie, pie_data, pie_labels)\n    \n    # Subplot for Line Chart (Bottom, spanning both columns)\n    ax_line = fig.add_subplot(gs[1, :])\n    create_line_chart(ax_line, x_values, y_values)\n    \n    # Add structural headings, sections, and lists to the overall figure\n    add_structural_layout(fig)\n    \n    # ------------------------------------------------------------------------------\n    # ADDITIONAL FIGURE ANNOTATIONS\n    # ------------------------------------------------------------------------------\n    # Footer annotation with labeled values summary\n    footer_text = (\n        \"Summary Stats:\\n\"\n        \" - Total Categories: {}\\n\"\n        \" - Maximum Value (Bar Chart): {}\\n\"\n        \" - Highest Percentage (Pie): {:.1f}%\\n\"\n        \" - Peak Value (Line Chart): {}\\n\"\n    ).format(\n        len(categories),\n        max(bar_data),\n        max(pie_data) / sum(pie_data) * 100,\n        max(y_values)\n    )\n    fig.text(0.5, 0.02, footer_text, ha='center', va='bottom', fontsize=9, bbox=dict(facecolor='white', alpha=0.6, edgecolor='black'))\n    \n    # ------------------------------------------------------------------------------\n    # SHOW THE PLOT\n    # ------------------------------------------------------------------------------\n    plt.tight_layout(rect=[0.05, 0.05, 0.98, 0.93])\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n</code>",
            "feature_requirements": "• The output must display a composite figure with three distinct charts arranged via a grid layout: a bar chart on the top left, a pie chart on the top right, and a line chart spanning the bottom row.  \n• The bar chart must show five separate bars (labeled A, B, C, D, E) colored in skyblue with black outlines, include the title \"Bar Chart - Category Values\", axis labels \"Categories\" (x-axis) and \"Values\" (y-axis), and display numeric labels above each bar.  \n• The pie chart must depict four segments with specified colors (e.g., analogous to #ff9999, #66b3ff, #99ff99, and #ffcc99), include the title \"Pie Chart - Distribution\", and show percentage labels formatted to one decimal point, ensuring the pie is drawn with an equal aspect ratio.  \n• The line chart must present a green line with markers representing data points, include a legend labeled \"Trend Line\", and have axis labels \"Time (units)\" (x-axis) and \"Values\" (y-axis) along with grid lines; it must also feature an annotation at the peak point (displaying something like \"Peak: [value]\") with an arrow pointing to the corresponding data point.  \n• The overall figure must incorporate structural text elements, including a main title \"Data Visualization Report\" and a centered subtitle \"Visual Conversion Task: Structural Layout & Content\" placed near the top of the diagram.  \n• A left-side text column must be present that lists key sections such as \"Section 1: Overview\", \"Section 2: Detailed Analysis\", and \"Section 3: Conclusions\", along with additional bulleted sub-items describing content details.  \n• A footer annotation area must be visible at the bottom of the figure summarizing key statistics (e.g., total number of categories, maximum bar value, highest pie percentage, and peak line chart value) formatted in a clear multi-line text block.  \n• All text elements (titles, axis labels, annotations, and sectional lists) must have visibly distinct typography sizes and weights to convey their hierarchical importance in the overall layout.",
            "task_id": "08XX92",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the main title at the top of the figure?",
                "What is the subtitle near the top of the diagram?",
                "How many distinct charts are arranged in the figure and where are they located?",
                "What are the x-axis and y-axis labels on the bar chart?",
                "How many bars are in the bar chart and what are their labels?",
                "Which colors are used for the pie chart segments?",
                "What details are provided in the left-side text column?",
                "What information is summarized in the footer annotation area?"
            ],
            "VQA_answers": [
                "Data Visualization Report",
                "Visual Conversion Task: Structural Layout & Content",
                "3 charts: bar chart (top left), pie chart (top right), and line chart (bottom row)",
                "Categories (x-axis) and Values (y-axis)",
                "5 bars labeled A, B, C, D, E",
                "#ff9999, #66b3ff, #99ff99, and #ffcc99",
                "It lists Section 1: Overview, Section 2: Detailed Analysis, and Section 3: Conclusions with additional bulleted sub-items",
                "Total number of categories, maximum bar value, highest pie percentage, and peak line chart value"
            ],
            "raw_output_metric": [
                "Data Visualization Report",
                "Visual Conversion Task: Structural Layout & Content",
                "Bar Chart - Category Values",
                "Categories",
                "Values",
                "A",
                "B",
                "C",
                "D",
                "E",
                "skyblue",
                "black",
                "Pie Chart - Distribution",
                "#ff9999",
                "#66b3ff",
                "#99ff99",
                "#ffcc99",
                "Trend Line",
                "Time (units)",
                "Peak: [value]",
                "Section 1: Overview",
                "Section 2: Detailed Analysis",
                "Section 3: Conclusions",
                "total number of categories",
                "maximum bar value",
                "highest pie percentage",
                "peak line chart value"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX92_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ------------------------------------------------------------------------------\n# FUNCTION DEFINITIONS\n# ------------------------------------------------------------------------------\n\ndef create_bar_chart(ax, data, labels):\n    \"\"\"\n    Create a Bar Chart with given data and labels.\n    \"\"\"\n    bar_positions = np.arange(len(data))\n    ax.bar(bar_positions, data, color='skyblue', edgecolor='black')\n    ax.set_title('Bar Chart - Category Values', fontsize=12, fontweight='bold')\n    ax.set_xlabel('Categories', fontsize=10)\n    ax.set_ylabel('Values', fontsize=10)\n    ax.set_xticks(bar_positions)\n    ax.set_xticklabels(labels, rotation=45, ha='right', fontsize=8)\n    ax.grid(True, linestyle='--', alpha=0.5)\n    # Label values above bars\n    for pos, value in zip(bar_positions, data):\n        ax.text(pos, value + 0.5, f'{value}', ha='center', va='bottom', fontsize=8)\n\n\ndef create_pie_chart(ax, data, labels):\n    \"\"\"\n    Create a Pie Chart with given data and labels.\n    \"\"\"\n    wedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', \n                                      startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n    ax.set_title('Pie Chart - Distribution', fontsize=12, fontweight='bold')\n    for text in texts + autotexts:\n        text.set_fontsize(8)\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n\ndef create_line_chart(ax, x, y):\n    \"\"\"\n    Create a Line Chart with multiple annotations and structural labels.\n    \"\"\"\n    ax.plot(x, y, marker='o', linestyle='-', color='green', label='Trend Line')\n    ax.set_title('Line Chart - Temporal Analysis', fontsize=12, fontweight='bold')\n    ax.set_xlabel('Time (units)', fontsize=10)\n    ax.set_ylabel('Values', fontsize=10)\n    ax.grid(True, linestyle='--', alpha=0.5)\n    ax.legend(fontsize=8)\n    \n    # Annotate key points\n    max_index = np.argmax(y)\n    ax.annotate(f\"Peak: {y[max_index]}\", \n                xy=(x[max_index], y[max_index]), \n                xytext=(x[max_index], y[max_index] + 3),\n                arrowprops=dict(facecolor='black', arrowstyle='->'),\n                fontsize=8, ha='center')\n\n\ndef add_structural_layout(fig):\n    \"\"\"\n    Adds headings and sections with formatted content to the main figure.\n    \"\"\"\n    # Main Title and Subtitle\n    fig.suptitle('Data Visualization Report', fontsize=16, fontweight='bold', color='navy')\n    fig.text(0.5, 0.95, 'Visual Conversion Task: Structural Layout & Content', \n             ha='center', va='center', fontsize=12, color='darkred')\n    \n    # Left Margin Label Column - key sections\n    sections = [\n        \"Section 1: Overview\",\n        \"  - Data Sources: Simulated\",\n        \"  - Metrics: Value counts, Percentages\",\n        \"\",\n        \"Section 2: Detailed Analysis\",\n        \"  - Bar Analysis\",\n        \"  - Pie Distribution\",\n        \"  - Temporal Trends\",\n        \"\",\n        \"Section 3: Conclusions\",\n        \"  - Trends Observed\",\n        \"  - Insights and Remarks\"\n    ]\n    y_position = 0.80\n    for line in sections:\n        fig.text(0.02, y_position, line, ha='left', va='center', fontsize=9, color='black')\n        y_position -= 0.03\n\n\ndef main():\n    # ------------------------------------------------------------------------------\n    # DATA PREPARATION\n    # ------------------------------------------------------------------------------\n    # Data for Bar Chart\n    categories = ['A', 'B', 'C', 'D', 'E']\n    bar_data = [10, 15, 12, 8, 20]\n    \n    # Data for Pie Chart\n    pie_data = [40, 25, 20, 15]\n    pie_labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4']\n    \n    # Data for Line Chart\n    x_values = np.linspace(1, 10, 10)\n    y_values = np.array([3, 5, 7, 6, 8, 12, 10, 14, 13, 15])\n    \n    # ------------------------------------------------------------------------------\n    # FIGURE AND SUBPLOTS CREATION\n    # ------------------------------------------------------------------------------\n    fig = plt.figure(figsize=(12, 8))\n    \n    # Create a GridSpec layout with 2 rows and 2 columns\n    gs = fig.add_gridspec(2, 2, width_ratios=[2, 1])\n    \n    # Subplot for Bar Chart (Top Left)\n    ax_bar = fig.add_subplot(gs[0, 0])\n    create_bar_chart(ax_bar, bar_data, categories)\n    \n    # Subplot for Pie Chart (Top Right)\n    ax_pie = fig.add_subplot(gs[0, 1])\n    create_pie_chart(ax_pie, pie_data, pie_labels)\n    \n    # Subplot for Line Chart (Bottom, spanning both columns)\n    ax_line = fig.add_subplot(gs[1, :])\n    create_line_chart(ax_line, x_values, y_values)\n    \n    # Add structural headings, sections, and lists to the overall figure\n    add_structural_layout(fig)\n    \n    # ------------------------------------------------------------------------------\n    # ADDITIONAL FIGURE ANNOTATIONS\n    # ------------------------------------------------------------------------------\n    # Footer annotation with labeled values summary\n    footer_text = (\n        \"Summary Stats:\\n\"\n        \" - Total Categories: {}\\n\"\n        \" - Maximum Value (Bar Chart): {}\\n\"\n        \" - Highest Percentage (Pie): {:.1f}%\\n\"\n        \" - Peak Value (Line Chart): {}\\n\"\n    ).format(\n        len(categories),\n        max(bar_data),\n        max(pie_data) / sum(pie_data) * 100,\n        max(y_values)\n    )\n    fig.text(0.5, 0.02, footer_text, ha='center', va='bottom', fontsize=9, bbox=dict(facecolor='white', alpha=0.6, edgecolor='black'))\n    \n    # ------------------------------------------------------------------------------\n    # SHOW THE PLOT\n    # ------------------------------------------------------------------------------\n    plt.tight_layout(rect=[0.05, 0.05, 0.98, 0.93])\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX92_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Report",
                                "Visual Conversion Task: Structural Layout & Content",
                                "Bar Chart - Category Values",
                                "Categories",
                                "Values",
                                "A",
                                "B",
                                "C",
                                "D",
                                "E",
                                "skyblue",
                                "black",
                                "Pie Chart - Distribution",
                                "#ff9999",
                                "#66b3ff",
                                "#99ff99",
                                "#ffcc99",
                                "Trend Line",
                                "Time (units)",
                                "Peak: [value]",
                                "Section 1: Overview",
                                "Section 2: Detailed Analysis",
                                "Section 3: Conclusions",
                                "total number of categories",
                                "maximum bar value",
                                "highest pie percentage",
                                "peak line chart value"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX92_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX92_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title at the top of the figure?",
                                "What is the subtitle near the top of the diagram?",
                                "How many distinct charts are arranged in the figure and where are they located?",
                                "What are the x-axis and y-axis labels on the bar chart?",
                                "How many bars are in the bar chart and what are their labels?",
                                "Which colors are used for the pie chart segments?",
                                "What details are provided in the left-side text column?",
                                "What information is summarized in the footer annotation area?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX92_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Data Visualization Report",
                                "Visual Conversion Task: Structural Layout & Content",
                                "3 charts: bar chart (top left), pie chart (top right), and line chart (bottom row)",
                                "Categories (x-axis) and Values (y-axis)",
                                "5 bars labeled A, B, C, D, E",
                                "#ff9999, #66b3ff, #99ff99, and #ffcc99",
                                "It lists Section 1: Overview, Section 2: Detailed Analysis, and Section 3: Conclusions with additional bulleted sub-items",
                                "Total number of categories, maximum bar value, highest pie percentage, and peak line chart value"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setup the figure and gridspec layout (2 rows x 2 columns)\nfig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(2, 2, wspace=0.3, hspace=0.4)\n\n# ------------------------\n# Subplot 1: Main Title and Summary\n# ------------------------\nax0 = fig.add_subplot(gs[0, :])\nax0.axis('off')  # We'll use text, so no axes needed\nax0.set_title(\"Main Dashboard: Data Visualization Overview\", fontsize=20, fontweight='bold', pad=20)\n\n# Draw a summary text block\nsummary_text = (\n    \"Overview:\\n\"\n    \"  - This dashboard provides insight into sample data using Matplotlib.\\n\"\n    \"  - It demonstrates structure, layout, and formatted content.\\n\"\n    \"  - The following sections include a list of key metrics, detailed sections, and data plots.\\n\\n\"\n    \"Key Highlights:\\n\"\n    \"  • Structured layout with grids\\n\"\n    \"  • Bullet lists and labeled sections\\n\"\n    \"  • Renderable without interactivity\\n\"\n)\nax0.text(0.02, 0.5, summary_text, fontsize=12, family='monospace', va='center', ha='left')\n\n# ------------------------\n# Subplot 2: Section A - Data Summary Table\n# ------------------------\nax1 = fig.add_subplot(gs[1, 0])\nax1.axis('off')\nax1.set_title(\"Section A: Data Summary\", fontsize=16, fontweight='bold', pad=15)\n\n# Create a \"table\" of labeled values using text annotations\ntable_data = [\n    (\"Metric\", \"Value\", \"Description\"),\n    (\"Mean\", \"23.5\", \"Average of data set\"),\n    (\"Std Dev\", \"5.2\", \"Standard deviation\"),\n    (\"Max\", \"34.1\", \"Maximum observed value\"),\n    (\"Min\", \"12.3\", \"Minimum observed value\"),\n    (\"Count\", \"150\", \"Total number of samples\")\n]\n\n# Display table headers and rows\nx_positions = [0.05, 0.45, 0.75]\ny_start = 0.9\ny_step = 0.15\n\nfor i, row in enumerate(table_data):\n    y = y_start - i * y_step\n    for j, cell in enumerate(row):\n        if i == 0:\n            font = {'weight': 'bold', 'size': 12}\n        else:\n            font = {'size': 11}\n        ax1.text(x_positions[j], y, cell, fontdict=font, va='center', ha='left')\n\n# Draw horizontal lines between rows for visual separation\nfor i in range(len(table_data) + 1):\n    y = y_start - i * y_step + 0.05\n    ax1.plot([0.02, 0.98], [y, y], color='gray', lw=0.5)\n\n# ------------------------\n# Subplot 3: Section B - Data Visualizations\n# ------------------------\nax2 = fig.add_subplot(gs[0, 0])\nax2.set_title(\"Section B1: Line Plot\", fontsize=14, fontweight='bold', pad=10)\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax2.plot(x, y, label='Sine Wave', color='teal', lw=2)\nax2.set_xlabel(\"X Axis\")\nax2.set_ylabel(\"Amplitude\")\nax2.legend(loc='upper right')\n# Add annotation for clarity\nax2.text(0.7, 0.8, \"sin(x) curve\", transform=ax2.transAxes, fontsize=10,\n         bbox=dict(facecolor='white', alpha=0.7, edgecolor='gray'))\n\n# ------------------------\n# Subplot 4: Section C - Scatter Plot with Bullet List\n# ------------------------\nax3 = fig.add_subplot(gs[1, 1])\nax3.set_title(\"Section C: Scatter Plot Analysis\", fontsize=14, fontweight='bold', pad=10)\n\n# Generate random data\nnp.random.seed(42)\nx_scatter = np.random.normal(5, 1.5, 100)\ny_scatter = np.random.normal(5, 1.5, 100)\nsizes = np.random.rand(100) * 100\ncolors = np.random.rand(100)\nscatter = ax3.scatter(x_scatter, y_scatter, s=sizes, c=colors, cmap='viridis', alpha=0.7)\n\nax3.set_xlabel(\"X Value\")\nax3.set_ylabel(\"Y Value\")\n\n# Add colorbar to indicate magnitude\ncbar = plt.colorbar(scatter, ax=ax3, label='Magnitude')\n\n# Insert a bullet list on the scatter plot area as an inset annotation\nlist_text = (\n    \"Observations:\\n\"\n    \"  • Data is roughly centered around (5,5)\\n\"\n    \"  • Variability in point sizes indicates diverse sampling\\n\"\n    \"  • Color gradient reflects intensity variations\\n\"\n)\nax3.text(0.05, 0.95, list_text, transform=ax3.transAxes,\n         fontsize=10, va='top', ha='left',\n         bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5'))\n\n# ------------------------\n# Additional formatting and layout adjustment\n# ------------------------\n# Add an overall footer text at the bottom of the figure\nplt.figtext(0.5, 0.02,\n            \"Dashboard generated by Matplotlib - Displaying structured content including headings, lists, and charts.\",\n            wrap=True, horizontalalignment='center', fontsize=10, family='sans-serif')\n\n# Ensure layout is tight so elements do not overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Save the figure as a PNG file (optional) and show the plot\n# plt.savefig(\"dashboard_visualization.png\", dpi=300)\nplt.show()\n</code>",
            "feature_requirements": "• A prominent main title spanning the top section reading \"Main Dashboard: Data Visualization Overview\" with accompanying summary text formatted in a monospaced style.  \n• A summary text block that includes an overview with bullet points, describing the dashboard's purpose and highlighting key features.  \n• A data summary section titled \"Section A: Data Summary\" featuring a table with a header row (\"Metric\", \"Value\", \"Description\") and subsequent rows displaying numerical and descriptive data.  \n• Horizontal separator lines drawn across the data table to visually separate the header and each subsequent row.  \n• A line plot section titled \"Section B1: Line Plot\" displaying a sine curve with clearly labeled X and Y axes, a legend identifying the \"Sine Wave\", and an annotation box indicating \"sin(x) curve\".  \n• A scatter plot section titled \"Section C: Scatter Plot Analysis\" with a distribution of randomly placed points, each point having varying sizes and colors, and with X and Y axes labeled \"X Value\" and \"Y Value\".  \n• An inset bullet list within the scatter plot area that highlights observations about the data distribution and point variability with details like centering around (5,5).  \n• A footer text at the bottom of the overall layout stating that the dashboard is generated by Matplotlib and describing the structured content, including headings, lists, and charts.",
            "task_id": "08XX93",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "Main Dashboard: Data Visualization Overview",
                "Section A: Data Summary",
                "Metric",
                "Value",
                "Description",
                "Section B1: Line Plot",
                "Sine Wave",
                "sin(x) curve",
                "Section C: Scatter Plot Analysis",
                "X Value",
                "Y Value",
                "(5,5)",
                "generated by Matplotlib"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX93_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Setup the figure and gridspec layout (2 rows x 2 columns)\nfig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(2, 2, wspace=0.3, hspace=0.4)\n\n# ------------------------\n# Subplot 1: Main Title and Summary\n# ------------------------\nax0 = fig.add_subplot(gs[0, :])\nax0.axis('off')  # We'll use text, so no axes needed\nax0.set_title(\"Main Dashboard: Data Visualization Overview\", fontsize=20, fontweight='bold', pad=20)\n\n# Draw a summary text block\nsummary_text = (\n    \"Overview:\\n\"\n    \"  - This dashboard provides insight into sample data using Matplotlib.\\n\"\n    \"  - It demonstrates structure, layout, and formatted content.\\n\"\n    \"  - The following sections include a list of key metrics, detailed sections, and data plots.\\n\\n\"\n    \"Key Highlights:\\n\"\n    \"  • Structured layout with grids\\n\"\n    \"  • Bullet lists and labeled sections\\n\"\n    \"  • Renderable without interactivity\\n\"\n)\nax0.text(0.02, 0.5, summary_text, fontsize=12, family='monospace', va='center', ha='left')\n\n# ------------------------\n# Subplot 2: Section A - Data Summary Table\n# ------------------------\nax1 = fig.add_subplot(gs[1, 0])\nax1.axis('off')\nax1.set_title(\"Section A: Data Summary\", fontsize=16, fontweight='bold', pad=15)\n\n# Create a \"table\" of labeled values using text annotations\ntable_data = [\n    (\"Metric\", \"Value\", \"Description\"),\n    (\"Mean\", \"23.5\", \"Average of data set\"),\n    (\"Std Dev\", \"5.2\", \"Standard deviation\"),\n    (\"Max\", \"34.1\", \"Maximum observed value\"),\n    (\"Min\", \"12.3\", \"Minimum observed value\"),\n    (\"Count\", \"150\", \"Total number of samples\")\n]\n\n# Display table headers and rows\nx_positions = [0.05, 0.45, 0.75]\ny_start = 0.9\ny_step = 0.15\n\nfor i, row in enumerate(table_data):\n    y = y_start - i * y_step\n    for j, cell in enumerate(row):\n        if i == 0:\n            font = {'weight': 'bold', 'size': 12}\n        else:\n            font = {'size': 11}\n        ax1.text(x_positions[j], y, cell, fontdict=font, va='center', ha='left')\n\n# Draw horizontal lines between rows for visual separation\nfor i in range(len(table_data) + 1):\n    y = y_start - i * y_step + 0.05\n    ax1.plot([0.02, 0.98], [y, y], color='gray', lw=0.5)\n\n# ------------------------\n# Subplot 3: Section B - Data Visualizations\n# ------------------------\nax2 = fig.add_subplot(gs[0, 0])\nax2.set_title(\"Section B1: Line Plot\", fontsize=14, fontweight='bold', pad=10)\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax2.plot(x, y, label='Sine Wave', color='teal', lw=2)\nax2.set_xlabel(\"X Axis\")\nax2.set_ylabel(\"Amplitude\")\nax2.legend(loc='upper right')\n# Add annotation for clarity\nax2.text(0.7, 0.8, \"sin(x) curve\", transform=ax2.transAxes, fontsize=10,\n         bbox=dict(facecolor='white', alpha=0.7, edgecolor='gray'))\n\n# ------------------------\n# Subplot 4: Section C - Scatter Plot with Bullet List\n# ------------------------\nax3 = fig.add_subplot(gs[1, 1])\nax3.set_title(\"Section C: Scatter Plot Analysis\", fontsize=14, fontweight='bold', pad=10)\n\n# Generate random data\nnp.random.seed(42)\nx_scatter = np.random.normal(5, 1.5, 100)\ny_scatter = np.random.normal(5, 1.5, 100)\nsizes = np.random.rand(100) * 100\ncolors = np.random.rand(100)\nscatter = ax3.scatter(x_scatter, y_scatter, s=sizes, c=colors, cmap='viridis', alpha=0.7)\n\nax3.set_xlabel(\"X Value\")\nax3.set_ylabel(\"Y Value\")\n\n# Add colorbar to indicate magnitude\ncbar = plt.colorbar(scatter, ax=ax3, label='Magnitude')\n\n# Insert a bullet list on the scatter plot area as an inset annotation\nlist_text = (\n    \"Observations:\\n\"\n    \"  • Data is roughly centered around (5,5)\\n\"\n    \"  • Variability in point sizes indicates diverse sampling\\n\"\n    \"  • Color gradient reflects intensity variations\\n\"\n)\nax3.text(0.05, 0.95, list_text, transform=ax3.transAxes,\n         fontsize=10, va='top', ha='left',\n         bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5'))\n\n# ------------------------\n# Additional formatting and layout adjustment\n# ------------------------\n# Add an overall footer text at the bottom of the figure\nplt.figtext(0.5, 0.02,\n            \"Dashboard generated by Matplotlib - Displaying structured content including headings, lists, and charts.\",\n            wrap=True, horizontalalignment='center', fontsize=10, family='sans-serif')\n\n# Ensure layout is tight so elements do not overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Save the figure as a PNG file (optional) and show the plot\n# plt.savefig(\"dashboard_visualization.png\", dpi=300)\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX93_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Main Dashboard: Data Visualization Overview",
                                "Section A: Data Summary",
                                "Metric",
                                "Value",
                                "Description",
                                "Section B1: Line Plot",
                                "Sine Wave",
                                "sin(x) curve",
                                "Section C: Scatter Plot Analysis",
                                "X Value",
                                "Y Value",
                                "(5,5)",
                                "generated by Matplotlib"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX93_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set up the overall figure with a main title and proper subplots for structured layout\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=20, fontweight='bold', y=0.95)\n\n# Section 1: Overview and Key Metrics\nax_overview = fig.add_subplot(2, 2, 1)\nax_overview.set_title(\"Key Metrics\", fontsize=14, fontweight='bold')\n# Dummy data for key metrics\nmetrics = ['Metric A', 'Metric B', 'Metric C', 'Metric D']\nvalues = [23, 45, 12, 37]\nbars = ax_overview.bar(metrics, values, color='skyblue')\nax_overview.set_ylabel(\"Values\")\nax_overview.grid(True, linestyle='--', alpha=0.6)\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax_overview.annotate(f'{height}', \n                         xy=(bar.get_x() + bar.get_width() / 2, height),\n                         xytext=(0, 3), textcoords=\"offset points\",\n                         ha='center', va='bottom', fontsize=10)\n\n# Section 2: Trends Over Time\nax_trends = fig.add_subplot(2, 2, 2)\nax_trends.set_title(\"Trends Over Time\", fontsize=14, fontweight='bold')\nx = np.linspace(0, 10, 100)\ntrend1 = np.sin(x)\ntrend2 = np.cos(x)\nax_trends.plot(x, trend1, label=\"Sine Wave\", color='magenta', linewidth=2)\nax_trends.plot(x, trend2, label=\"Cosine Wave\", color='green', linestyle='--', linewidth=2)\nax_trends.set_xlabel(\"Time\")\nax_trends.set_ylabel(\"Amplitude\")\nax_trends.legend(loc='upper right')\nax_trends.grid(True, linestyle='-', alpha=0.7)\n\n# Section 3: Detailed Breakdown with List and Labeled Callouts\nax_breakdown = fig.add_subplot(2, 2, 3)\nax_breakdown.set_title(\"Breakdown & Detailed Analysis\", fontsize=14, fontweight='bold')\n# Create a table-like structure for details\ntable_data = [\n    [\"Section\", \"Parameter\", \"Value\"],\n    [\"Overview\", \"Total Items\", \"117\"],\n    [\"Trends\", \"Peak Amplitude\", \"1.0\"],\n    [\"Breakdown\", \"Variance\", \"0.35\"],\n    [\"Summary\", \"Completion Rate\", \"87%\"]\n]\n# Remove axes for table display\nax_breakdown.axis('off')\n# Display table as text in axes\ntable_text = \"\"\nfor row in table_data:\n    # Formatting row text with fixed width columns:\n    table_text += \"{:<10} {:<15} {:<10}\\n\".format(row[0], row[1], row[2])\nax_breakdown.text(0.02, 0.5, table_text, fontsize=12, fontfamily='monospace', va='center')\n\n# Section 4: Comparative Analysis with Structured Layout\nax_comparison = fig.add_subplot(2, 2, 4)\nax_comparison.set_title(\"Comparative Analysis\", fontsize=14, fontweight='bold')\n# Creating sample data for two categories over 5 periods\nperiods = np.arange(1, 6)\ncategory1 = [15, 21, 18, 30, 25]\ncategory2 = [10, 14, 20, 22, 19]\n\n# Plot side by side bar charts for each period\nwidth = 0.35\nbars1 = ax_comparison.bar(periods - width/2, category1, width, label=\"Category 1\", color='cornflowerblue')\nbars2 = ax_comparison.bar(periods + width/2, category2, width, label=\"Category 2\", color='salmon')\nax_comparison.set_xlabel(\"Period\")\nax_comparison.set_ylabel(\"Results\")\nax_comparison.set_xticks(periods)\nax_comparison.legend()\n\n# Adding summary text box beneath the comparison chart\nsummary_text = (\n    \"Summary of Comparative Analysis:\\n\"\n    \" - Category 1 outperforms in Periods 1 and 4.\\n\"\n    \" - Category 2 shows steady growth in Period 3.\\n\"\n    \" - Overall performance fluctuates moderately.\\n\"\n    \"Key Observations:\\n\"\n    \" - Monitor future trends for persistent divergences.\"\n)\nax_comparison.text(0.05, -0.25, summary_text, transform=ax_comparison.transAxes,\n                   fontsize=10, verticalalignment='top', bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"wheat\", alpha=0.5))\n\n# Additional annotations to display structured lists on the entire figure using figtext\ndetailed_list = (\n    \"Report Sections:\\n\"\n    \"1. Key Metrics\\n\"\n    \"   - Lists basic numerical data\\n\"\n    \"2. Trends Over Time\\n\"\n    \"   - Illustrates periodic behavior\\n\"\n    \"3. Breakdown & Detailed Analysis\\n\"\n    \"   - Tabulated insights\\n\"\n    \"4. Comparative Analysis\\n\"\n    \"   - Dual-category performance\\n\"\n)\nfig.text(0.02, 0.02, detailed_list, fontsize=10, fontfamily='monospace', bbox=dict(facecolor='lightgrey', alpha=0.4))\n\n# Adjust layout to prevent overlapping elements and ensure visual hierarchy is maintained\nplt.tight_layout(rect=[0, 0.05, 1, 0.93])\nplt.show()\n</code>",
            "feature_requirements": "• An overall title \"Comprehensive Data Visualization Report\" must appear at the top of the figure with emphasized (e.g., bold, larger) font styling.  \n• The output should depict a 2×2 grid arrangement containing four distinct sections or subfigures.  \n• In the top‐left section titled \"Key Metrics\", a bar chart is required that displays four bars labeled \"Metric A\", \"Metric B\", \"Metric C\", and \"Metric D\" with their corresponding numerical values annotated on each bar, and a visible grid with dashed lines.  \n• The top‐right section titled \"Trends Over Time\" must include two line plots: one for a sine wave (in magenta with a solid line, labeled \"Sine Wave\") and one for a cosine wave (in green with dashed line style, labeled \"Cosine Wave\"), complete with labeled axes (\"Time\" for x-axis and \"Amplitude\" for y-axis), a legend placed in the upper right, and a grid with defined line style.  \n• The bottom‐left section titled \"Breakdown & Detailed Analysis\" should display a table-like structure rendered as monospaced text (or a formatted text block) with three columns (\"Section\", \"Parameter\", \"Value\") and several rows corresponding to provided data, with no visible axis lines.  \n• In the bottom‐right section titled \"Comparative Analysis\", side-by-side bar charts for \"Category 1\" and \"Category 2\" must be shown over five periods with labeled x-axis \"Period\", labeled y-axis \"Results\", visible legends, and an additional multi-line summary text box positioned beneath the chart within a styled (e.g., rounded, padded) box.  \n• A global annotation should be included (e.g., as a textual note along the bottom edge) listing the report sections (\"Key Metrics\", \"Trends Over Time\", \"Breakdown & Detailed Analysis\", \"Comparative Analysis\") using monospaced font and set within a lightly shaded background box.",
            "task_id": "08XX94",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall title at the top of the figure?",
                "How many subfigures are arranged in the grid?",
                "What is the title of the top‐left section?",
                "Which chart appears in the top‐left section and what bar labels does it include?",
                "Are numerical values shown on each bar in the 'Key Metrics' chart?",
                "What two plots are displayed in the 'Trends Over Time' section and how are they styled?",
                "What axis labels are provided in the 'Trends Over Time' section?",
                "What is displayed in the bottom‐left section titled 'Breakdown & Detailed Analysis'?",
                "What type of chart is shown in the bottom‐right 'Comparative Analysis' section and what extra element is included beneath it?",
                "What does the global annotation along the bottom edge list and how is it styled?"
            ],
            "VQA_answers": [
                "Comprehensive Data Visualization Report",
                "4 (arranged in a 2×2 grid)",
                "Key Metrics",
                "A bar chart with bars labeled 'Metric A', 'Metric B', 'Metric C', and 'Metric D'",
                "Yes",
                "A sine wave (magenta, solid line) and a cosine wave (green, dashed line)",
                "Time for the x-axis and Amplitude for the y-axis",
                "A table-like structure rendered as monospaced text with columns 'Section', 'Parameter', and 'Value'",
                "Side-by-side bar charts for 'Category 1' and 'Category 2' over five periods with a multi-line summary text box in a styled box beneath the chart",
                "It lists the report sections ('Key Metrics', 'Trends Over Time', 'Breakdown & Detailed Analysis', 'Comparative Analysis') in monospaced font within a lightly shaded background box"
            ],
            "raw_output_metric": [
                "Comprehensive Data Visualization Report",
                "Key Metrics",
                "Metric A",
                "Metric B",
                "Metric C",
                "Metric D",
                "Trends Over Time",
                "Sine Wave",
                "Cosine Wave",
                "Time",
                "Amplitude",
                "Breakdown & Detailed Analysis",
                "Section",
                "Parameter",
                "Value",
                "Comparative Analysis",
                "Category 1",
                "Category 2",
                "Period",
                "Results"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX94_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set up the overall figure with a main title and proper subplots for structured layout\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Comprehensive Data Visualization Report\", fontsize=20, fontweight='bold', y=0.95)\n\n# Section 1: Overview and Key Metrics\nax_overview = fig.add_subplot(2, 2, 1)\nax_overview.set_title(\"Key Metrics\", fontsize=14, fontweight='bold')\n# Dummy data for key metrics\nmetrics = ['Metric A', 'Metric B', 'Metric C', 'Metric D']\nvalues = [23, 45, 12, 37]\nbars = ax_overview.bar(metrics, values, color='skyblue')\nax_overview.set_ylabel(\"Values\")\nax_overview.grid(True, linestyle='--', alpha=0.6)\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax_overview.annotate(f'{height}', \n                         xy=(bar.get_x() + bar.get_width() / 2, height),\n                         xytext=(0, 3), textcoords=\"offset points\",\n                         ha='center', va='bottom', fontsize=10)\n\n# Section 2: Trends Over Time\nax_trends = fig.add_subplot(2, 2, 2)\nax_trends.set_title(\"Trends Over Time\", fontsize=14, fontweight='bold')\nx = np.linspace(0, 10, 100)\ntrend1 = np.sin(x)\ntrend2 = np.cos(x)\nax_trends.plot(x, trend1, label=\"Sine Wave\", color='magenta', linewidth=2)\nax_trends.plot(x, trend2, label=\"Cosine Wave\", color='green', linestyle='--', linewidth=2)\nax_trends.set_xlabel(\"Time\")\nax_trends.set_ylabel(\"Amplitude\")\nax_trends.legend(loc='upper right')\nax_trends.grid(True, linestyle='-', alpha=0.7)\n\n# Section 3: Detailed Breakdown with List and Labeled Callouts\nax_breakdown = fig.add_subplot(2, 2, 3)\nax_breakdown.set_title(\"Breakdown & Detailed Analysis\", fontsize=14, fontweight='bold')\n# Create a table-like structure for details\ntable_data = [\n    [\"Section\", \"Parameter\", \"Value\"],\n    [\"Overview\", \"Total Items\", \"117\"],\n    [\"Trends\", \"Peak Amplitude\", \"1.0\"],\n    [\"Breakdown\", \"Variance\", \"0.35\"],\n    [\"Summary\", \"Completion Rate\", \"87%\"]\n]\n# Remove axes for table display\nax_breakdown.axis('off')\n# Display table as text in axes\ntable_text = \"\"\nfor row in table_data:\n    # Formatting row text with fixed width columns:\n    table_text += \"{:<10} {:<15} {:<10}\\n\".format(row[0], row[1], row[2])\nax_breakdown.text(0.02, 0.5, table_text, fontsize=12, fontfamily='monospace', va='center')\n\n# Section 4: Comparative Analysis with Structured Layout\nax_comparison = fig.add_subplot(2, 2, 4)\nax_comparison.set_title(\"Comparative Analysis\", fontsize=14, fontweight='bold')\n# Creating sample data for two categories over 5 periods\nperiods = np.arange(1, 6)\ncategory1 = [15, 21, 18, 30, 25]\ncategory2 = [10, 14, 20, 22, 19]\n\n# Plot side by side bar charts for each period\nwidth = 0.35\nbars1 = ax_comparison.bar(periods - width/2, category1, width, label=\"Category 1\", color='cornflowerblue')\nbars2 = ax_comparison.bar(periods + width/2, category2, width, label=\"Category 2\", color='salmon')\nax_comparison.set_xlabel(\"Period\")\nax_comparison.set_ylabel(\"Results\")\nax_comparison.set_xticks(periods)\nax_comparison.legend()\n\n# Adding summary text box beneath the comparison chart\nsummary_text = (\n    \"Summary of Comparative Analysis:\\n\"\n    \" - Category 1 outperforms in Periods 1 and 4.\\n\"\n    \" - Category 2 shows steady growth in Period 3.\\n\"\n    \" - Overall performance fluctuates moderately.\\n\"\n    \"Key Observations:\\n\"\n    \" - Monitor future trends for persistent divergences.\"\n)\nax_comparison.text(0.05, -0.25, summary_text, transform=ax_comparison.transAxes,\n                   fontsize=10, verticalalignment='top', bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"wheat\", alpha=0.5))\n\n# Additional annotations to display structured lists on the entire figure using figtext\ndetailed_list = (\n    \"Report Sections:\\n\"\n    \"1. Key Metrics\\n\"\n    \"   - Lists basic numerical data\\n\"\n    \"2. Trends Over Time\\n\"\n    \"   - Illustrates periodic behavior\\n\"\n    \"3. Breakdown & Detailed Analysis\\n\"\n    \"   - Tabulated insights\\n\"\n    \"4. Comparative Analysis\\n\"\n    \"   - Dual-category performance\\n\"\n)\nfig.text(0.02, 0.02, detailed_list, fontsize=10, fontfamily='monospace', bbox=dict(facecolor='lightgrey', alpha=0.4))\n\n# Adjust layout to prevent overlapping elements and ensure visual hierarchy is maintained\nplt.tight_layout(rect=[0, 0.05, 1, 0.93])\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX94_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "Key Metrics",
                                "Metric A",
                                "Metric B",
                                "Metric C",
                                "Metric D",
                                "Trends Over Time",
                                "Sine Wave",
                                "Cosine Wave",
                                "Time",
                                "Amplitude",
                                "Breakdown & Detailed Analysis",
                                "Section",
                                "Parameter",
                                "Value",
                                "Comparative Analysis",
                                "Category 1",
                                "Category 2",
                                "Period",
                                "Results"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX94_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX94_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall title at the top of the figure?",
                                "How many subfigures are arranged in the grid?",
                                "What is the title of the top‐left section?",
                                "Which chart appears in the top‐left section and what bar labels does it include?",
                                "Are numerical values shown on each bar in the 'Key Metrics' chart?",
                                "What two plots are displayed in the 'Trends Over Time' section and how are they styled?",
                                "What axis labels are provided in the 'Trends Over Time' section?",
                                "What is displayed in the bottom‐left section titled 'Breakdown & Detailed Analysis'?",
                                "What type of chart is shown in the bottom‐right 'Comparative Analysis' section and what extra element is included beneath it?",
                                "What does the global annotation along the bottom edge list and how is it styled?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX94_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Comprehensive Data Visualization Report",
                                "4 (arranged in a 2×2 grid)",
                                "Key Metrics",
                                "A bar chart with bars labeled 'Metric A', 'Metric B', 'Metric C', and 'Metric D'",
                                "Yes",
                                "A sine wave (magenta, solid line) and a cosine wave (green, dashed line)",
                                "Time for the x-axis and Amplitude for the y-axis",
                                "A table-like structure rendered as monospaced text with columns 'Section', 'Parameter', and 'Value'",
                                "Side-by-side bar charts for 'Category 1' and 'Category 2' over five periods with a multi-line summary text box in a styled box beneath the chart",
                                "It lists the report sections ('Key Metrics', 'Trends Over Time', 'Breakdown & Detailed Analysis', 'Comparative Analysis') in monospaced font within a lightly shaded background box"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate sample data for plotting\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\ny_damped = np.exp(-x / 3) * np.sin(2 * x)\n\n# Create a figure with a detailed layout of subplots\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Matplotlib Visual Layout Example\", fontsize=16, weight='bold')\n\n# ============================================================================\n# Section 1: Sine and Cosine Functions\n# ----------------------------------------------------------------------------\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y_sin, label='Sine Wave', color='blue', linestyle='-')\nax1.plot(x, y_cos, label='Cosine Wave', color='red', linestyle='--')\nax1.set_title(\"Section 1: Sine and Cosine Functions\", fontsize=12)\nax1.set_xlabel(\"X axis\")\nax1.set_ylabel(\"Y axis\")\nax1.grid(True)\n\n# List of key observations for Section 1\nobservations = (\n    \"Key Observations:\\n\"\n    \"• Sine wave oscillates between -1 and 1.\\n\"\n    \"• Cosine wave is phase-shifted relative to sine.\\n\"\n    \"• Both functions are periodic.\"\n)\nax1.text(0.02, 0.98, observations, transform=ax1.transAxes,\n         fontsize=8, verticalalignment='top', bbox=dict(facecolor='white', alpha=0.8, edgecolor='gray'))\nax1.legend(loc=\"upper right\")\n\n\n# ============================================================================\n# Section 2: Exponential Damped Sine Wave\n# ----------------------------------------------------------------------------\nax2 = fig.add_subplot(2, 2, 2)\nax2.plot(x, y_damped, label='Damped Sine', color='green')\nax2.set_title(\"Section 2: Exponential Damped Sine Wave\", fontsize=12)\nax2.set_xlabel(\"Time\")\nax2.set_ylabel(\"Amplitude\")\nax2.grid(True)\nax2.legend(loc=\"upper right\")\n\n# Annotate the peak point in the damped sine curve\npeak_index = np.argmax(y_damped)\npeak_x = x[peak_index]\npeak_y = y_damped[peak_index]\nax2.annotate(\"Peak\", xy=(peak_x, peak_y), xytext=(peak_x + 1, peak_y - 0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='black'),\n             fontsize=8)\n\n\n# ============================================================================\n# Section 3: Bar Chart for Category Analysis\n# ----------------------------------------------------------------------------\nax3 = fig.add_subplot(2, 2, 3)\ncategories = [\"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\"]\nvalues = [23, 45, 56, 78, 12]\nbars = ax3.bar(categories, values, color=['red', 'blue', 'green",
            "feature_requirements": "• The output must display an overall figure title reading \"Matplotlib Visual Layout Example\" in a noticeably larger, bold font at the top of the diagram.  \n• There must be a subplot (labeled Section 1) showing both a sine curve (in blue with a solid style) and a cosine curve (in red with a dashed style) over a shared x-axis labeled \"X axis\" and a y-axis labeled \"Y axis\", with a grid and a legend indicating \"Sine Wave\" and \"Cosine Wave\".  \n• Within the Section 1 subplot, include a text annotation area that presents key bullet point observations (e.g., points about the sine and cosine functions) enclosed in a box with a white background and a grey border, positioned near the top-left of the subplot.  \n• The output must contain a second subplot (labeled Section 2) that plots an exponential damped sine wave in green, with an x-axis labeled \"Time\" and a y-axis labeled \"Amplitude\", a grid, and a legend marking \"Damped Sine\".  \n• In the Section 2 subplot, there must be an annotation of the peak point on the damped sine curve by displaying the label \"Peak\" with an arrow pointing from the text to the corresponding point on the curve.  \n• The output must include a third subplot (labeled Section 3) that presents a bar chart representing five categories (\"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\") with numerical values (23, 45, 56, 78, 12) and each bar assigned a distinct color (for example, red, blue, green, etc.).  \n• The overall layout should simulate a 2x2 grid arrangement for the subplots, with the first two subplots occupying the top row and the third subplot appropriately positioned in the bottom-left cell.  \n• Each subplot’s title should be clearly displayed within its respective area, corresponding to its section (for instance, \"Section 1: Sine and Cosine Functions\" and \"Section 2: Exponential Damped Sine Wave\").",
            "task_id": "08XX95",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall figure title displayed at the top of the diagram?",
                "Which section shows both the sine and cosine curves?",
                "What are the colors and line styles for the sine and cosine curves in Section 1?",
                "What axis labels are used in the Section 1 subplot?",
                "What elements are included in Section 1 besides the curves?",
                "How is the annotation area in Section 1 styled?",
                "What does Section 2 display?",
                "What are the axis labels and additional features for Section 2?",
                "How is the peak point on the damped sine wave in Section 2 highlighted?",
                "What type of chart and what categories are shown in Section 3?"
            ],
            "VQA_answers": [
                "Matplotlib Visual Layout Example",
                "Section 1",
                "Sine is blue with a solid style; Cosine is red with a dashed style",
                "X axis for the horizontal axis and Y axis for the vertical axis",
                "A grid, a legend indicating 'Sine Wave' and 'Cosine Wave', and a text annotation box with bullet point observations",
                "It has a white background and a grey border",
                "An exponential damped sine wave in green",
                "X axis labeled 'Time', y-axis labeled 'Amplitude', a grid, a legend marking 'Damped Sine', and an annotation for the peak point",
                "With a label 'Peak' and an arrow pointing to the corresponding point",
                "A bar chart with five categories: Category A, Category B, Category C, Category D, and Category E with values 23, 45, 56, 78, and 12 respectively"
            ],
            "raw_output_metric": [
                "Matplotlib Visual Layout Example",
                "Section 1: Sine and Cosine Functions",
                "Section 2: Exponential Damped Sine Wave",
                "Section 1",
                "Section 2",
                "Section 3",
                "Sine Wave",
                "Cosine Wave",
                "Damped Sine",
                "X axis",
                "Y axis",
                "Time",
                "Amplitude",
                "Peak",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "Category E",
                "23",
                "45",
                "56",
                "78",
                "12"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX95_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate sample data for plotting\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\ny_damped = np.exp(-x / 3) * np.sin(2 * x)\n\n# Create a figure with a detailed layout of subplots\nfig = plt.figure(figsize=(12, 10))\nfig.suptitle(\"Matplotlib Visual Layout Example\", fontsize=16, weight='bold')\n\n# ============================================================================\n# Section 1: Sine and Cosine Functions\n# ----------------------------------------------------------------------------\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y_sin, label='Sine Wave', color='blue', linestyle='-')\nax1.plot(x, y_cos, label='Cosine Wave', color='red', linestyle='--')\nax1.set_title(\"Section 1: Sine and Cosine Functions\", fontsize=12)\nax1.set_xlabel(\"X axis\")\nax1.set_ylabel(\"Y axis\")\nax1.grid(True)\n\n# List of key observations for Section 1\nobservations = (\n    \"Key Observations:\\n\"\n    \"• Sine wave oscillates between -1 and 1.\\n\"\n    \"• Cosine wave is phase-shifted relative to sine.\\n\"\n    \"• Both functions are periodic.\"\n)\nax1.text(0.02, 0.98, observations, transform=ax1.transAxes,\n         fontsize=8, verticalalignment='top', bbox=dict(facecolor='white', alpha=0.8, edgecolor='gray'))\nax1.legend(loc=\"upper right\")\n\n\n# ============================================================================\n# Section 2: Exponential Damped Sine Wave\n# ----------------------------------------------------------------------------\nax2 = fig.add_subplot(2, 2, 2)\nax2.plot(x, y_damped, label='Damped Sine', color='green')\nax2.set_title(\"Section 2: Exponential Damped Sine Wave\", fontsize=12)\nax2.set_xlabel(\"Time\")\nax2.set_ylabel(\"Amplitude\")\nax2.grid(True)\nax2.legend(loc=\"upper right\")\n\n# Annotate the peak point in the damped sine curve\npeak_index = np.argmax(y_damped)\npeak_x = x[peak_index]\npeak_y = y_damped[peak_index]\nax2.annotate(\"Peak\", xy=(peak_x, peak_y), xytext=(peak_x + 1, peak_y - 0.5),\n             arrowprops=dict(arrowstyle=\"->\", color='black'),\n             fontsize=8)\n\n\n# ============================================================================\n# Section 3: Bar Chart for Category Analysis\n# ----------------------------------------------------------------------------\nax3 = fig.add_subplot(2, 2, 3)\ncategories = [\"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\"]\nvalues = [23, 45, 56, 78, 12]\nbars = ax3.bar(categories, values, color=['red', 'blue', 'green"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX95_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Matplotlib Visual Layout Example",
                                "Section 1: Sine and Cosine Functions",
                                "Section 2: Exponential Damped Sine Wave",
                                "Section 1",
                                "Section 2",
                                "Section 3",
                                "Sine Wave",
                                "Cosine Wave",
                                "Damped Sine",
                                "X axis",
                                "Y axis",
                                "Time",
                                "Amplitude",
                                "Peak",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "Category E",
                                "23",
                                "45",
                                "56",
                                "78",
                                "12"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX95_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX95_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall figure title displayed at the top of the diagram?",
                                "Which section shows both the sine and cosine curves?",
                                "What are the colors and line styles for the sine and cosine curves in Section 1?",
                                "What axis labels are used in the Section 1 subplot?",
                                "What elements are included in Section 1 besides the curves?",
                                "How is the annotation area in Section 1 styled?",
                                "What does Section 2 display?",
                                "What are the axis labels and additional features for Section 2?",
                                "How is the peak point on the damped sine wave in Section 2 highlighted?",
                                "What type of chart and what categories are shown in Section 3?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX95_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Matplotlib Visual Layout Example",
                                "Section 1",
                                "Sine is blue with a solid style; Cosine is red with a dashed style",
                                "X axis for the horizontal axis and Y axis for the vertical axis",
                                "A grid, a legend indicating 'Sine Wave' and 'Cosine Wave', and a text annotation box with bullet point observations",
                                "It has a white background and a grey border",
                                "An exponential damped sine wave in green",
                                "X axis labeled 'Time', y-axis labeled 'Amplitude', a grid, a legend marking 'Damped Sine', and an annotation for the peak point",
                                "With a label 'Peak' and an arrow pointing to the corresponding point",
                                "A bar chart with five categories: Category A, Category B, Category C, Category D, and Category E with values 23, 45, 56, 78, and 12 respectively"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# -----------------------------\n# Setup Figure and Layout Grid\n# -----------------------------\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[1, 3, 3], width_ratios=[1, 1])\nfig.patch.set_facecolor('whitesmoke')  # Overall figure background\n\n# -------------------------------\n# Title Section\n# -------------------------------\nax_title = fig.add_subplot(gs[0, :])\nax_title.axis('off')\nmain_title = \"Comprehensive Data Report\"\nsubtitle = \"Analysis and Visualization Summary\"\ndivider = \"-----------------------------------------------\"\nax_title.text(0.5, 0.7, main_title, fontsize=20, fontweight='bold', ha='center', color='darkblue')\nax_title.text(0.5, 0.5, subtitle, fontsize=14, ha='center', color='navy')\nax_title.text",
            "feature_requirements": "• The output must render a TikZ figure that represents a 12 by 10 inches canvas with a background colored in whitesmoke.  \n• The TikZ code must create a grid layout equivalent to a 3×2 grid where the rows have height ratios 1:3:3 and the columns have equal width ratios.  \n• The top section of the figure (spanning the entire first row) must be designated as a title section with no visible axes or borders.  \n• Within the title section, a main title reading \"Comprehensive Data Report\" must be displayed in a central position (horizontally centered, around 70% vertical position within the section), styled with a bold font, a large font size (approximately equivalent to size 20), and dark blue color.  \n• A subtitle \"Analysis and Visualization Summary\" must appear beneath the main title (approximately at 50% vertical position in the title section), centered horizontally, in a slightly smaller font size (around 14) and using a navy color.  \n• A horizontal divider consisting of a series of dashes (\"-----------------------------------------------\") must be included as an identifiable text element in the title section.  \n• All these elements (background, grid layout, titles, subtitle, and divider) must be generated using TikZ constructs that enable the visual appearance to be verified by rendering.",
            "task_id": "08XX96",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the size of the canvas?",
                "What background color is used for the canvas?",
                "How is the grid layout organized in terms of rows and columns?",
                "What are the height ratios for the rows?",
                "How are the column widths determined?",
                "What is the main title text displayed in the title section?",
                "At approximately what vertical position within the title section is the main title placed?",
                "What font style, size, and color are applied to the main title?",
                "What is the subtitle text shown beneath the main title?",
                "What does the horizontal divider in the title section consist of?"
            ],
            "VQA_answers": [
                "12 by 10 inches",
                "whitesmoke",
                "3 rows and 2 columns",
                "1:3:3",
                "Equal width ratios",
                "Comprehensive Data Report",
                "Around 70%",
                "Bold, size about 20, dark blue",
                "Analysis and Visualization Summary",
                "A series of dashes (-----------------------------------------------)"
            ],
            "raw_output_metric": [
                "tikzpicture",
                "whitesmoke",
                "Comprehensive Data Report",
                "Analysis and Visualization Summary",
                "-----------------------------------------------",
                "1:3:3",
                "darkblue",
                "navy"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX96_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np\n\n# -----------------------------\n# Setup Figure and Layout Grid\n# -----------------------------\nfig = plt.figure(figsize=(12, 10))\ngs = gridspec.GridSpec(3, 2, height_ratios=[1, 3, 3], width_ratios=[1, 1])\nfig.patch.set_facecolor('whitesmoke')  # Overall figure background\n\n# -------------------------------\n# Title Section\n# -------------------------------\nax_title = fig.add_subplot(gs[0, :])\nax_title.axis('off')\nmain_title = \"Comprehensive Data Report\"\nsubtitle = \"Analysis and Visualization Summary\"\ndivider = \"-----------------------------------------------\"\nax_title.text(0.5, 0.7, main_title, fontsize=20, fontweight='bold', ha='center', color='darkblue')\nax_title.text(0.5, 0.5, subtitle, fontsize=14, ha='center', color='navy')\nax_title.text"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX96_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "tikzpicture",
                                "whitesmoke",
                                "Comprehensive Data Report",
                                "Analysis and Visualization Summary",
                                "-----------------------------------------------",
                                "1:3:3",
                                "darkblue",
                                "navy"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX96_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX96_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the size of the canvas?",
                                "What background color is used for the canvas?",
                                "How is the grid layout organized in terms of rows and columns?",
                                "What are the height ratios for the rows?",
                                "How are the column widths determined?",
                                "What is the main title text displayed in the title section?",
                                "At approximately what vertical position within the title section is the main title placed?",
                                "What font style, size, and color are applied to the main title?",
                                "What is the subtitle text shown beneath the main title?",
                                "What does the horizontal divider in the title section consist of?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX96_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "12 by 10 inches",
                                "whitesmoke",
                                "3 rows and 2 columns",
                                "1:3:3",
                                "Equal width ratios",
                                "Comprehensive Data Report",
                                "Around 70%",
                                "Bold, size about 20, dark blue",
                                "Analysis and Visualization Summary",
                                "A series of dashes (-----------------------------------------------)"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(10, 12))\nax = fig.add_subplot(111)\n\n# Set background color for the axis\nax.set_facecolor('whitesmoke')\nax.set_xlim(0, 100)\nax.set_ylim(0, 120)\n\n# Hide axes details for a cleaner \"paper\" look\nax.axis('off')\n\n# Draw a border around the entire page (simulate a page border)\nborder = patches.Rectangle((1, 1), 98, 118, linewidth=2, edgecolor='black', facecolor='none')\nax.add_patch(border)\n\n# Add a heading at the top center (Title)\nfig.text(0.5, 0.95, 'Project Analysis Report', fontsize=22, ha='center', weight='bold')\n\n# Add a subheading below the title (Date and Author)\nfig.text(0.5, 0.92, 'Compiled on: October 2023 | Author: Data Team', fontsize=12, ha='center', style='italic')\n\n# Section 1: Introduction\nfig.text(0.05, 0.87, '1. Introduction', fontsize=16, weight='bold', color='navy')\nfig.text(0.06, 0.84, 'This document provides a comprehensive analysis of the dataset results.', fontsize=12)\nfig.text(0.06, 0.81, 'It is divided into several key sections discussing methodology, data summary,', fontsize=12)\nfig.text(0.06, 0.78, 'results, and conclusions. The visual layout is designed for clarity and ', fontsize=12)\nfig.text(0.06, 0.75, 'ease of reference.', fontsize=12)\n\n# Horizontal divider line after introduction\nax.plot([5, 95], [72, 72], color='gray', linestyle='--', linewidth=1)\n\n# Section 2: Data Summary\nfig.text(0.05, 0.70, '2. Data Summary', fontsize=16, weight='bold', color='navy')\nsummary_text = [\n    'a. Total Records: 5230',\n    'b. Missing Values: 12%',\n    'c. Data Range: Jan 2010 - Dec 2020'\n]\ny_pos = 0.66\nfor item in summary_text:\n    fig.text(0.07, y_pos, '- ' + item, fontsize=12)\n    y_pos -= 0.03\n\n# Section 3: Methodology\nfig.text(0.05, 0.57, '3. Methodology', fontsize=16, weight='bold', color='navy')\nmethodology_list = [\n    'Step 1: Data Cleaning',\n    'Step 2: Feature Engineering',\n    'Step 3: Model Selection',\n    'Step 4: Validation & Testing'\n]\ny_pos = 0.53\nfor idx, step in enumerate(methodology_list, start=1):\n    fig.text(0.07, y_pos, f'{idx}. {step}', fontsize=12)\n    y_pos -= 0.03\n\n# Section 4: Detailed Analysis\nfig.text(0.05, 0.42, '4. Detailed Analysis', fontsize=16, weight='bold', color='navy')\nanalysis_items = [\n    {'label': 'Trend Analysis', 'value': 'Significant growth in Q3 and Q4'},\n    {'label': 'Seasonal Patterns', 'value': 'Clear seasonal fluctuations observed'},\n    {'label': 'Anomaly Detection', 'value': 'Few outliers detected during 2016'},\n    {'label': 'Comparative Metrics', 'value': 'Benchmarking against industry standards'}\n]\ny_pos = 0.38\nfor item in analysis_items:\n    fig.text(0.07, y_pos, f\"- {item['label']}:\", fontsize=12, weight='bold')\n    fig.text(0.27, y_pos, item['value'], fontsize=12)\n    y_pos -= 0.03\n\n# Draw boxes around the analysis items to highlight them\nbox_start_y = 35\nbox_height = 12\nbox = patches.Rectangle((5, box_start_y), 90, box_height, linewidth=1.5, edgecolor='blue', facecolor='none')\nax.add_patch(box)\n\n# Section 5: Conclusions\nfig.text(0.05, 0.22, '5. Conclusions', fontsize=16, weight='bold', color='navy')\nconclusions = [\n    '• The dataset is robust with minor missing values.',\n    '• Clear trends justify further predictive models.',\n    '• Future work should explore real-time data integration.'\n]\ny_pos = 0.18\nfor item in conclusions:\n    fig.text(0.07, y_pos, item, fontsize=12)\n    y_pos -= 0.03\n\n# Footer note with additional info\nfig.text(0.5, 0.05, 'End of Report - Confidential', fontsize=10, ha='center', style='italic', color='gray')\n\n# Optionally, add a logo-like element using a simple geometric shape (simulated)\ncircle = patches.Circle((90, 110), 4, edgecolor='red', facecolor='none', linewidth=2)\nax.add_patch(circle)\nfig.text(0.88, 0.107, 'LOGO', fontsize=10, color='red', weight='bold')\n\n# Draw a legend-like box summarizing key metrics (structured layout)\nlegend_box = patches.Rectangle((60, 10), 35, 10, linewidth=1, edgecolor='black', facecolor='lightgray')\nax.add_patch(legend_box)\nfig.text(0.62, 18, 'Key Metrics', fontsize=14, weight='bold')\nmetrics = [\n    ('Total Samples', 5230),\n    ('Missing Data', '12%'),\n    ('Prediction Accuracy', '89%')\n]\ny_start = 16\nfor label, value in metrics:\n    fig.text(0.62, y_start, f'{label}: ', fontsize=12, weight='bold')\n    fig.text(0.75, y_start, str(value), fontsize=12)\n    y_start -= 1.5\n\n# Render the layout using tight layout function so the text is not clipped\nplt.tight_layout()\n\n# Show the final figure\nplt.show()\n</code>",
            "feature_requirements": "• A solid page border that simulates a page edge, drawn as a rectangle inset from the page boundaries with a visible black outline.  \n• A centered main title at the top labeled “Project Analysis Report” rendered in a large, bold font.  \n• A subheading immediately below the title stating “Compiled on: October 2023 | Author: Data Team” in an italic, medium-sized font.  \n• Multiple section headers—specifically “1. Introduction”, “2. Data Summary”, “3. Methodology”, “4. Detailed Analysis”, and “5. Conclusions”—each styled with bold text in a navy color.  \n• Body text for each section that presents paragraphs or lists with precise spacing (e.g., bulleted or numbered lists for subpoints) demonstrating clear separation between items.  \n• A horizontal divider line, styled as a gray dashed line, separating the introduction from later content.  \n• In the Detailed Analysis section, pairs of text elements: a bolded label (e.g., “Trend Analysis:”) and an adjacent regular text value, arranged horizontally.  \n• A highlighted box (with a blue border) drawn around the detailed analysis items to visually enclose them.  \n• A footer note centered at the bottom of the page reading “End of Report - Confidential” in a smaller, italic, gray font.  \n• A logo element simulated by a red-outlined circle positioned near the top right, accompanied by the text “LOGO” in a matching red bold font, as well as a legend box with the title “Key Metrics” that lists key statistics such as “Total Samples: 5230”, “Missing Data: 12%”, and “Prediction Accuracy: 89%”.",
            "task_id": "08XX97",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What does the solid page border look like?",
                "What is the main title displayed at the top?",
                "What subheading is shown right below the title?",
                "How many section headers are there and what are they?",
                "What styling is applied to the section headers?",
                "How is the horizontal divider line styled?",
                "How are items in the Detailed Analysis section displayed?",
                "What is the content and style of the footer note at the bottom of the page?",
                "How is the logo element designed and positioned?",
                "What information is included in the legend box titled 'Key Metrics'?"
            ],
            "VQA_answers": [
                "A rectangle inset from the page boundaries with a visible black outline.",
                "Project Analysis Report",
                "Compiled on: October 2023 | Author: Data Team",
                "Five: 1. Introduction, 2. Data Summary, 3. Methodology, 4. Detailed Analysis, and 5. Conclusions",
                "Bold text in a navy color",
                "A gray dashed line",
                "As horizontally arranged pairs with a bolded label and adjacent regular text, enclosed in a blue-bordered box",
                "End of Report - Confidential, centered, small, italic, and gray",
                "A red-outlined circle near the top right with the text 'LOGO' in matching red bold font",
                "It lists key statistics: Total Samples: 5230, Missing Data: 12%, and Prediction Accuracy: 89%"
            ],
            "raw_output_metric": [
                "Project Analysis Report",
                "Compiled on: October 2023 | Author: Data Team",
                "1. Introduction",
                "2. Data Summary",
                "3. Methodology",
                "4. Detailed Analysis",
                "5. Conclusions",
                "Trend Analysis:",
                "End of Report - Confidential",
                "LOGO",
                "Key Metrics",
                "Total Samples: 5230",
                "Missing Data: 12%",
                "Prediction Accuracy: 89%"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX97_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(10, 12))\nax = fig.add_subplot(111)\n\n# Set background color for the axis\nax.set_facecolor('whitesmoke')\nax.set_xlim(0, 100)\nax.set_ylim(0, 120)\n\n# Hide axes details for a cleaner \"paper\" look\nax.axis('off')\n\n# Draw a border around the entire page (simulate a page border)\nborder = patches.Rectangle((1, 1), 98, 118, linewidth=2, edgecolor='black', facecolor='none')\nax.add_patch(border)\n\n# Add a heading at the top center (Title)\nfig.text(0.5, 0.95, 'Project Analysis Report', fontsize=22, ha='center', weight='bold')\n\n# Add a subheading below the title (Date and Author)\nfig.text(0.5, 0.92, 'Compiled on: October 2023 | Author: Data Team', fontsize=12, ha='center', style='italic')\n\n# Section 1: Introduction\nfig.text(0.05, 0.87, '1. Introduction', fontsize=16, weight='bold', color='navy')\nfig.text(0.06, 0.84, 'This document provides a comprehensive analysis of the dataset results.', fontsize=12)\nfig.text(0.06, 0.81, 'It is divided into several key sections discussing methodology, data summary,', fontsize=12)\nfig.text(0.06, 0.78, 'results, and conclusions. The visual layout is designed for clarity and ', fontsize=12)\nfig.text(0.06, 0.75, 'ease of reference.', fontsize=12)\n\n# Horizontal divider line after introduction\nax.plot([5, 95], [72, 72], color='gray', linestyle='--', linewidth=1)\n\n# Section 2: Data Summary\nfig.text(0.05, 0.70, '2. Data Summary', fontsize=16, weight='bold', color='navy')\nsummary_text = [\n    'a. Total Records: 5230',\n    'b. Missing Values: 12%',\n    'c. Data Range: Jan 2010 - Dec 2020'\n]\ny_pos = 0.66\nfor item in summary_text:\n    fig.text(0.07, y_pos, '- ' + item, fontsize=12)\n    y_pos -= 0.03\n\n# Section 3: Methodology\nfig.text(0.05, 0.57, '3. Methodology', fontsize=16, weight='bold', color='navy')\nmethodology_list = [\n    'Step 1: Data Cleaning',\n    'Step 2: Feature Engineering',\n    'Step 3: Model Selection',\n    'Step 4: Validation & Testing'\n]\ny_pos = 0.53\nfor idx, step in enumerate(methodology_list, start=1):\n    fig.text(0.07, y_pos, f'{idx}. {step}', fontsize=12)\n    y_pos -= 0.03\n\n# Section 4: Detailed Analysis\nfig.text(0.05, 0.42, '4. Detailed Analysis', fontsize=16, weight='bold', color='navy')\nanalysis_items = [\n    {'label': 'Trend Analysis', 'value': 'Significant growth in Q3 and Q4'},\n    {'label': 'Seasonal Patterns', 'value': 'Clear seasonal fluctuations observed'},\n    {'label': 'Anomaly Detection', 'value': 'Few outliers detected during 2016'},\n    {'label': 'Comparative Metrics', 'value': 'Benchmarking against industry standards'}\n]\ny_pos = 0.38\nfor item in analysis_items:\n    fig.text(0.07, y_pos, f\"- {item['label']}:\", fontsize=12, weight='bold')\n    fig.text(0.27, y_pos, item['value'], fontsize=12)\n    y_pos -= 0.03\n\n# Draw boxes around the analysis items to highlight them\nbox_start_y = 35\nbox_height = 12\nbox = patches.Rectangle((5, box_start_y), 90, box_height, linewidth=1.5, edgecolor='blue', facecolor='none')\nax.add_patch(box)\n\n# Section 5: Conclusions\nfig.text(0.05, 0.22, '5. Conclusions', fontsize=16, weight='bold', color='navy')\nconclusions = [\n    '• The dataset is robust with minor missing values.',\n    '• Clear trends justify further predictive models.',\n    '• Future work should explore real-time data integration.'\n]\ny_pos = 0.18\nfor item in conclusions:\n    fig.text(0.07, y_pos, item, fontsize=12)\n    y_pos -= 0.03\n\n# Footer note with additional info\nfig.text(0.5, 0.05, 'End of Report - Confidential', fontsize=10, ha='center', style='italic', color='gray')\n\n# Optionally, add a logo-like element using a simple geometric shape (simulated)\ncircle = patches.Circle((90, 110), 4, edgecolor='red', facecolor='none', linewidth=2)\nax.add_patch(circle)\nfig.text(0.88, 0.107, 'LOGO', fontsize=10, color='red', weight='bold')\n\n# Draw a legend-like box summarizing key metrics (structured layout)\nlegend_box = patches.Rectangle((60, 10), 35, 10, linewidth=1, edgecolor='black', facecolor='lightgray')\nax.add_patch(legend_box)\nfig.text(0.62, 18, 'Key Metrics', fontsize=14, weight='bold')\nmetrics = [\n    ('Total Samples', 5230),\n    ('Missing Data', '12%'),\n    ('Prediction Accuracy', '89%')\n]\ny_start = 16\nfor label, value in metrics:\n    fig.text(0.62, y_start, f'{label}: ', fontsize=12, weight='bold')\n    fig.text(0.75, y_start, str(value), fontsize=12)\n    y_start -= 1.5\n\n# Render the layout using tight layout function so the text is not clipped\nplt.tight_layout()\n\n# Show the final figure\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX97_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Analysis Report",
                                "Compiled on: October 2023 | Author: Data Team",
                                "1. Introduction",
                                "2. Data Summary",
                                "3. Methodology",
                                "4. Detailed Analysis",
                                "5. Conclusions",
                                "Trend Analysis:",
                                "End of Report - Confidential",
                                "LOGO",
                                "Key Metrics",
                                "Total Samples: 5230",
                                "Missing Data: 12%",
                                "Prediction Accuracy: 89%"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX97_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX97_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What does the solid page border look like?",
                                "What is the main title displayed at the top?",
                                "What subheading is shown right below the title?",
                                "How many section headers are there and what are they?",
                                "What styling is applied to the section headers?",
                                "How is the horizontal divider line styled?",
                                "How are items in the Detailed Analysis section displayed?",
                                "What is the content and style of the footer note at the bottom of the page?",
                                "How is the logo element designed and positioned?",
                                "What information is included in the legend box titled 'Key Metrics'?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX97_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "A rectangle inset from the page boundaries with a visible black outline.",
                                "Project Analysis Report",
                                "Compiled on: October 2023 | Author: Data Team",
                                "Five: 1. Introduction, 2. Data Summary, 3. Methodology, 4. Detailed Analysis, and 5. Conclusions",
                                "Bold text in a navy color",
                                "A gray dashed line",
                                "As horizontally arranged pairs with a bolded label and adjacent regular text, enclosed in a blue-bordered box",
                                "End of Report - Confidential, centered, small, italic, and gray",
                                "A red-outlined circle near the top right with the text 'LOGO' in matching red bold font",
                                "It lists key statistics: Total Samples: 5230, Missing Data: 12%, and Prediction Accuracy: 89%"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef main():\n    # Create the main figure with constrained layout for neat spacing\n    fig = plt.figure(constrained_layout=True, figsize=(12, 10))\n    gs = fig.add_gridspec(3, 2)\n\n    # Header Section: Title and Overview\n    ax_header = fig.add_subplot(gs[0, :])\n    ax_header.axis(\"off\")\n    ax_header.text(0.5, 0.80, \"Dashboard Visualization Report\", \n                   ha=\"center\", va=\"center\", fontsize=22, fontweight=\"bold\")\n    ax_header.text(0.5, 0.65, \"Structured Analytical Report\", \n                   ha=\"center\", va=\"center\", fontsize=16)\n    overview_text = (\n        \"Sections Included:\\n\"\n        \"  1. Sine Wave Analysis\\n\"\n        \"  2. Scatter Plot Insights\\n\"\n        \"  3. Categorical Data Overview\"\n    )\n    ax_header.text(0.05, 0.35, overview_text, transform=ax_header.transAxes, fontsize=12, \n                   verticalalignment=\"top\",\n                   bbox=dict(facecolor=\"white\", edgecolor=\"black\", boxstyle=\"round,pad=0.5\"))\n\n    # Section 1: Sine Wave Analysis (Line Plot)\n    ax1 = fig.add_subplot(gs[1, 0])\n    x = np.linspace(0, 10, 200)\n    y = np.sin(x)\n    ax1.plot(x, y, label=\"sin(x)\", color=\"blue\", linewidth=2)\n    ax1.set_title(\"Section 1: Sine Wave Analysis\", fontsize=14, fontweight=\"bold\")\n    ax1.set_xlabel(\"X Axis\")\n    ax1.set_ylabel(\"Sin(X)\")\n    ax1.legend(loc=\"upper right\")\n    ax1.grid(True, linestyle='--', alpha=0.7)\n    \n    # Add a bullet list annotation inside the plot area\n    observations = (\n        \"Key Observations:\\n\"\n        \"• Period: ~6.28 (2π)\\n\"\n        \"• Amplitude: 1\\n\"\n        \"• Zero crossings at multiples of π\"\n    )\n    ax1.text(0.02, 0.95, observations, transform=ax1.transAxes, fontsize=10, \n             verticalalignment=\"top\", bbox=dict(facecolor=\"lightyellow\", alpha=0.7, edgecolor=\"gray\", boxstyle=\"round\"))\n    \n    # Section 2: Scatter Plot Insights\n    ax2 = fig.add_subplot(gs[1, 1])\n    np.random.seed(42)\n    x_scatter = np.random.normal(loc=",
            "feature_requirements": "• The converted TikZ output must depict a main figure divided into a grid layout with a header section at the top (spanning two columns) and at least two distinct subplot sections below.  \n• The header section should display a centered, bold title reading “Dashboard Visualization Report” in a large font, directly above a subtitle “Structured Analytical Report” in a smaller font.  \n• Within the header area, there must be a bounding box (or visually similar enclosure) containing multi‐line text that lists the sections included, specifically: “1. Sine Wave Analysis”, “2. Scatter Plot Insights”, and “3. Categorical Data Overview”.  \n• The first subplot (Section 1) must include a line plot representing the function sin(x) (with x drawn continuously over an interval approximating 0 to 10) rendered in blue with a visually discernible line width.  \n• The subplot for the sine wave must display clearly labeled axes with “X Axis” on the horizontal axis and “Sin(X)” on the vertical axis, and must include a legend identifying the plotted line as “sin(x)” positioned in the upper right of the subplot.  \n• Grid lines should be visible in the sine wave subplot, styled in a dashed manner with a degree of translucency to mimic the Matplotlib grid settings.  \n• Within the sine wave subplot, an annotation in the form of a text box should appear in the upper left region containing a bullet list of key observations: indicating “• Period: ~6.28 (2π)”, “• Amplitude: 1”, and “• Zero crossings at multiples of π” with a background fill that contrasts with the plot (e.g., light color with a rounded rectangular border).",
            "task_id": "08XX98",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the centered, bold title displayed in the header section?",
                "What subtitle appears directly below the main header title?",
                "What text is contained within the bounding box in the header area?",
                "Which function is plotted in the first subplot and in what color is it rendered?",
                "What labels are used for the horizontal and vertical axes in the sine wave subplot?",
                "How is the legend in the sine wave subplot described and where is it positioned?",
                "How are the grid lines styled in the sine wave subplot?",
                "What key observations are included in the annotation text box in the sine wave subplot?"
            ],
            "VQA_answers": [
                "Dashboard Visualization Report",
                "Structured Analytical Report",
                "1. Sine Wave Analysis, 2. Scatter Plot Insights, 3. Categorical Data Overview",
                "sin(x) rendered in blue",
                "X Axis (horizontal) and Sin(X) (vertical)",
                "It identifies the line as sin(x) and is positioned in the upper right",
                "Dashed with a degree of translucency",
                "• Period: ~6.28 (2π), • Amplitude: 1, and • Zero crossings at multiples of π"
            ],
            "raw_output_metric": [
                "Dashboard Visualization Report",
                "Structured Analytical Report",
                "1. Sine Wave Analysis",
                "2. Scatter Plot Insights",
                "3. Categorical Data Overview",
                "sin(x)",
                "X Axis",
                "Sin(X)",
                "• Period: ~6.28 (2π)",
                "• Amplitude: 1",
                "• Zero crossings at multiples of π"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX98_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef main():\n    # Create the main figure with constrained layout for neat spacing\n    fig = plt.figure(constrained_layout=True, figsize=(12, 10))\n    gs = fig.add_gridspec(3, 2)\n\n    # Header Section: Title and Overview\n    ax_header = fig.add_subplot(gs[0, :])\n    ax_header.axis(\"off\")\n    ax_header.text(0.5, 0.80, \"Dashboard Visualization Report\", \n                   ha=\"center\", va=\"center\", fontsize=22, fontweight=\"bold\")\n    ax_header.text(0.5, 0.65, \"Structured Analytical Report\", \n                   ha=\"center\", va=\"center\", fontsize=16)\n    overview_text = (\n        \"Sections Included:\\n\"\n        \"  1. Sine Wave Analysis\\n\"\n        \"  2. Scatter Plot Insights\\n\"\n        \"  3. Categorical Data Overview\"\n    )\n    ax_header.text(0.05, 0.35, overview_text, transform=ax_header.transAxes, fontsize=12, \n                   verticalalignment=\"top\",\n                   bbox=dict(facecolor=\"white\", edgecolor=\"black\", boxstyle=\"round,pad=0.5\"))\n\n    # Section 1: Sine Wave Analysis (Line Plot)\n    ax1 = fig.add_subplot(gs[1, 0])\n    x = np.linspace(0, 10, 200)\n    y = np.sin(x)\n    ax1.plot(x, y, label=\"sin(x)\", color=\"blue\", linewidth=2)\n    ax1.set_title(\"Section 1: Sine Wave Analysis\", fontsize=14, fontweight=\"bold\")\n    ax1.set_xlabel(\"X Axis\")\n    ax1.set_ylabel(\"Sin(X)\")\n    ax1.legend(loc=\"upper right\")\n    ax1.grid(True, linestyle='--', alpha=0.7)\n    \n    # Add a bullet list annotation inside the plot area\n    observations = (\n        \"Key Observations:\\n\"\n        \"• Period: ~6.28 (2π)\\n\"\n        \"• Amplitude: 1\\n\"\n        \"• Zero crossings at multiples of π\"\n    )\n    ax1.text(0.02, 0.95, observations, transform=ax1.transAxes, fontsize=10, \n             verticalalignment=\"top\", bbox=dict(facecolor=\"lightyellow\", alpha=0.7, edgecolor=\"gray\", boxstyle=\"round\"))\n    \n    # Section 2: Scatter Plot Insights\n    ax2 = fig.add_subplot(gs[1, 1])\n    np.random.seed(42)\n    x_scatter = np.random.normal(loc="
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX98_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Visualization Report",
                                "Structured Analytical Report",
                                "1. Sine Wave Analysis",
                                "2. Scatter Plot Insights",
                                "3. Categorical Data Overview",
                                "sin(x)",
                                "X Axis",
                                "Sin(X)",
                                "• Period: ~6.28 (2π)",
                                "• Amplitude: 1",
                                "• Zero crossings at multiples of π"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX98_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX98_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered, bold title displayed in the header section?",
                                "What subtitle appears directly below the main header title?",
                                "What text is contained within the bounding box in the header area?",
                                "Which function is plotted in the first subplot and in what color is it rendered?",
                                "What labels are used for the horizontal and vertical axes in the sine wave subplot?",
                                "How is the legend in the sine wave subplot described and where is it positioned?",
                                "How are the grid lines styled in the sine wave subplot?",
                                "What key observations are included in the annotation text box in the sine wave subplot?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX98_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Visualization Report",
                                "Structured Analytical Report",
                                "1. Sine Wave Analysis, 2. Scatter Plot Insights, 3. Categorical Data Overview",
                                "sin(x) rendered in blue",
                                "X Axis (horizontal) and Sin(X) (vertical)",
                                "It identifies the line as sin(x) and is positioned in the upper right",
                                "Dashed with a degree of translucency",
                                "• Period: ~6.28 (2π), • Amplitude: 1, and • Zero crossings at multiples of π"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate sample data for various charts\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nnoise = np.random.normal(0, 0.2, size=x.shape)\ny_noisy = y + noise\n\nbar_categories = ['Category A', 'Category B', 'Category C', 'Category D']\nbar_values = [23, 45, 12, 36]\n\nscatter_x = np.random.rand(50) * 10\nscatter_y = np.random.rand(50) * 10\nscatter_sizes = np.random.randint(50, 300, size=50)\n\n# Create a large figure with multiple subplots to display layout and content\nfig = plt.figure(figsize=(14, 10))\nfig.suptitle(\"Dashboard Analysis Report\", fontsize=20, fontweight='bold', color='navy', y=0.95)\n\n# Section 1: Line Plot with Sinusoidal Data\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y, label=\"Sine Wave\", color='blue', linewidth=2)\nax1.plot(x, y_noisy, label=\"Noisy Sine\", linestyle=\"--\", color='orange')\nax1.set_title(\"Section 1: Sinusoidal Data\", fontsize=14, fontweight='bold')\nax1.set_xlabel(\"X Axis (radians)\")\nax1.set_ylabel(\"Amplitude\")\nax1.grid(True, linestyle=':')\nax1.legend(loc='upper right')\n\n# Adding a list of observations as text inside the first subplot\nobservations = [\n    \"Observation 1: Regular sine wave behavior\",\n    \"Observation 2: Noise introduces slight variations\",\n    \"Observation 3: Peaks and troughs remain identifiable\"\n]\ntext_str = \"Key Observations:\\n\" + \"\\n\".join(observations)\nax1.text(0.05, 0.95, text_str, transform=ax1.transAxes,\n         fontsize=9, verticalalignment='top',\n         bbox=dict(boxstyle=\"round,pad=0.5\", edgecolor=\"gray\", facecolor=\"lightyellow\"))\n\n# Section 2: Bar Chart with Category Data\nax2 = fig.add_subplot(2, 2, 2)\nbars = ax2.bar(bar_categories, bar_values, color=['teal', 'purple', 'olive', 'maroon'])\nax2.set_title(\"Section 2: Category Analysis\", fontsize=14, fontweight='bold')\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\nax2.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.annotate(f'{height}',\n                 xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3),  # 3 points vertical offset\n                 textcoords=\"offset points\",\n                 ha='center', va='bottom', fontsize=9)\n\n# Section 3: Scatter Plot with Random Data Points\nax3 = fig.add_subplot(2, 2, 3)\nscatter = ax3.scatter(scatter_x, scatter_y, s=scatter_sizes, c=scatter_sizes,\n                      cmap='viridis', alpha=0.7, edgecolors=\"w\")\nax3.set_title(\"Section 3: Random Scatter Data\", fontsize=14, fontweight='bold')\nax3.set_xlabel(\"Random X\")\nax3.set_ylabel(\"Random Y\")\nax3.grid(True, linestyle=':', color='gray', alpha=0.5)\n\n# Add a colorbar for reference\ncbar = plt.colorbar(scatter, ax=ax3)\ncbar.set_label(\"Size Scale\", fontsize=10)\n\n# Section 4: Placeholder for Additional Information\nax4 = fig.add_subplot(2, 2, 4)\nax4.axis('off')  # Hide axes\n\n# Manually add structured content with headings and lists\nsection_text = (\n    \"Section 4: Summary & Key Metrics\\n\"\n    \"---------------------------------\\n\"\n    \"1. Total Data Points: 100\\n\"\n    \"2. Noise Standard Deviation: ~0.2\\n\"\n    \"3. Categories Assessed: 4\\n\\n\"\n    \"Important Notes:\\n\"\n    \"  - Data is synthesized for demonstration purposes.\\n\"\n    \"  - Visualizations aim to reflect layout and hierarchical structuring.\\n\"\n    \"  - For further analysis, consider enhancing interactivity (not implemented here).\\n\"\n)\nax4.text(0.05, 0.95, section_text, fontsize=11, fontfamily='monospace',\n         verticalalignment='top', horizontalalignment='left',\n         bbox=dict(boxstyle=\"round,pad=0.5\", facecolor=\"lavender\", edgecolor=\"gray\"))\n\n# Adjust layout to prevent overlapping titles and labels\nplt.tight_layout(rect=[0, 0, 1, 0.93])\n\n# Render the figure to a single page\nplt.show()\n</code>",
            "feature_requirements": "• The output must display an overall dashboard title, “Dashboard Analysis Report”, prominently at the top.  \n• The layout should be divided into a 2×2 grid, with four distinct sections corresponding to different charts or textual content.  \n• The top‐left section must contain a line plot featuring two lines: one representing a smooth sine wave (in blue, with a thicker line) and another representing a noisy sine wave (in orange, with a dashed style).  \n• The top‐left section should include X and Y axis labels (“X Axis (radians)” and “Amplitude”), a grid with dotted lines, and a legend labeling the lines as “Sine Wave” and “Noisy Sine”.  \n• Within the top‐left section, there must be an inset text box that displays a list of key observations split into multiple lines.  \n• The top‐right section must exhibit a bar chart with four bars corresponding to the categories “Category A”, “Category B”, “Category C”, and “Category D”, with each bar being annotated at its top with its numerical value.  \n• The top‐right section should include a title (“Section 2: Category Analysis”) and axis labels (“Categories” and “Values”), along with horizontal grid lines along the Y axis.  \n• The bottom‐left section must show a scatter plot of data points with varied sizes and a color gradient, including a colorbar clearly labeled “Size Scale”.  \n• The bottom‐left section should also have labeled axes (“Random X” and “Random Y”) and a background grid with dotted lines in gray.  \n• The bottom‐right section should be a placeholder without visible axes, containing structured textual content that summarizes key metrics and important notes in a formatted text box.",
            "task_id": "08XX99",
            "task_name": "Convert Matplotlib to TikZ",
            "input_type": "Matplotlib",
            "output_type": "TikZ",
            "query_example": "",
            "VQA_questions": [
                "What is the overall dashboard title displayed at the top?",
                "How is the layout divided?",
                "What type of plot is in the top‐left section?",
                "Which two lines are plotted in the top‐left section and how are they styled?",
                "What axis labels and grid style are used in the top‐left section?",
                "What additional element is included in the top‐left section?",
                "What does the top‐right section display?",
                "How is the top‐right section titled and what additional features does it include?",
                "What type of plot is shown in the bottom‐left section and what are its key features?",
                "What is contained in the bottom‐right section?"
            ],
            "VQA_answers": [
                "Dashboard Analysis Report",
                "2×2 grid",
                "Line plot",
                "Smooth sine wave in blue (thicker) and noisy sine wave in orange (dashed)",
                "X Axis (radians) and Amplitude with a dotted grid",
                "An inset text box with a list of key observations",
                "A bar chart with four bars",
                "It is titled 'Section 2: Category Analysis', includes axis labels (Categories and Values), horizontal grid lines, and numerical annotations on each bar",
                "A scatter plot with varied point sizes, a color gradient, a colorbar labeled 'Size Scale', and axes labeled 'Random X' and 'Random Y' with a gray dotted grid",
                "A placeholder with structured textual content summarizing key metrics and important notes without visible axes"
            ],
            "raw_output_metric": [
                "Dashboard Analysis Report",
                "X Axis (radians)",
                "Amplitude",
                "Sine Wave",
                "Noisy Sine",
                "Section 2: Category Analysis",
                "Category A",
                "Category B",
                "Category C",
                "Category D",
                "Categories",
                "Values",
                "Random X",
                "Random Y",
                "Size Scale"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "08XX99_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TikZ:\n\nTask:\nConvert the following Matplotlib code to TikZ code.\n\n<code>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Generate sample data for various charts\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nnoise = np.random.normal(0, 0.2, size=x.shape)\ny_noisy = y + noise\n\nbar_categories = ['Category A', 'Category B', 'Category C', 'Category D']\nbar_values = [23, 45, 12, 36]\n\nscatter_x = np.random.rand(50) * 10\nscatter_y = np.random.rand(50) * 10\nscatter_sizes = np.random.randint(50, 300, size=50)\n\n# Create a large figure with multiple subplots to display layout and content\nfig = plt.figure(figsize=(14, 10))\nfig.suptitle(\"Dashboard Analysis Report\", fontsize=20, fontweight='bold', color='navy', y=0.95)\n\n# Section 1: Line Plot with Sinusoidal Data\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, y, label=\"Sine Wave\", color='blue', linewidth=2)\nax1.plot(x, y_noisy, label=\"Noisy Sine\", linestyle=\"--\", color='orange')\nax1.set_title(\"Section 1: Sinusoidal Data\", fontsize=14, fontweight='bold')\nax1.set_xlabel(\"X Axis (radians)\")\nax1.set_ylabel(\"Amplitude\")\nax1.grid(True, linestyle=':')\nax1.legend(loc='upper right')\n\n# Adding a list of observations as text inside the first subplot\nobservations = [\n    \"Observation 1: Regular sine wave behavior\",\n    \"Observation 2: Noise introduces slight variations\",\n    \"Observation 3: Peaks and troughs remain identifiable\"\n]\ntext_str = \"Key Observations:\\n\" + \"\\n\".join(observations)\nax1.text(0.05, 0.95, text_str, transform=ax1.transAxes,\n         fontsize=9, verticalalignment='top',\n         bbox=dict(boxstyle=\"round,pad=0.5\", edgecolor=\"gray\", facecolor=\"lightyellow\"))\n\n# Section 2: Bar Chart with Category Data\nax2 = fig.add_subplot(2, 2, 2)\nbars = ax2.bar(bar_categories, bar_values, color=['teal', 'purple', 'olive', 'maroon'])\nax2.set_title(\"Section 2: Category Analysis\", fontsize=14, fontweight='bold')\nax2.set_xlabel(\"Categories\")\nax2.set_ylabel(\"Values\")\nax2.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    height = bar.get_height()\n    ax2.annotate(f'{height}',\n                 xy=(bar.get_x() + bar.get_width() / 2, height),\n                 xytext=(0, 3),  # 3 points vertical offset\n                 textcoords=\"offset points\",\n                 ha='center', va='bottom', fontsize=9)\n\n# Section 3: Scatter Plot with Random Data Points\nax3 = fig.add_subplot(2, 2, 3)\nscatter = ax3.scatter(scatter_x, scatter_y, s=scatter_sizes, c=scatter_sizes,\n                      cmap='viridis', alpha=0.7, edgecolors=\"w\")\nax3.set_title(\"Section 3: Random Scatter Data\", fontsize=14, fontweight='bold')\nax3.set_xlabel(\"Random X\")\nax3.set_ylabel(\"Random Y\")\nax3.grid(True, linestyle=':', color='gray', alpha=0.5)\n\n# Add a colorbar for reference\ncbar = plt.colorbar(scatter, ax=ax3)\ncbar.set_label(\"Size Scale\", fontsize=10)\n\n# Section 4: Placeholder for Additional Information\nax4 = fig.add_subplot(2, 2, 4)\nax4.axis('off')  # Hide axes\n\n# Manually add structured content with headings and lists\nsection_text = (\n    \"Section 4: Summary & Key Metrics\\n\"\n    \"---------------------------------\\n\"\n    \"1. Total Data Points: 100\\n\"\n    \"2. Noise Standard Deviation: ~0.2\\n\"\n    \"3. Categories Assessed: 4\\n\\n\"\n    \"Important Notes:\\n\"\n    \"  - Data is synthesized for demonstration purposes.\\n\"\n    \"  - Visualizations aim to reflect layout and hierarchical structuring.\\n\"\n    \"  - For further analysis, consider enhancing interactivity (not implemented here).\\n\"\n)\nax4.text(0.05, 0.95, section_text, fontsize=11, fontfamily='monospace',\n         verticalalignment='top', horizontalalignment='left',\n         bbox=dict(boxstyle=\"round,pad=0.5\", facecolor=\"lavender\", edgecolor=\"gray\"))\n\n# Adjust layout to prevent overlapping titles and labels\nplt.tight_layout(rect=[0, 0, 1, 0.93])\n\n# Render the figure to a single page\nplt.show()\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "08XX99_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Analysis Report",
                                "X Axis (radians)",
                                "Amplitude",
                                "Sine Wave",
                                "Noisy Sine",
                                "Section 2: Category Analysis",
                                "Category A",
                                "Category B",
                                "Category C",
                                "Category D",
                                "Categories",
                                "Values",
                                "Random X",
                                "Random Y",
                                "Size Scale"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "08XX99_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "08XX99_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the overall dashboard title displayed at the top?",
                                "How is the layout divided?",
                                "What type of plot is in the top‐left section?",
                                "Which two lines are plotted in the top‐left section and how are they styled?",
                                "What axis labels and grid style are used in the top‐left section?",
                                "What additional element is included in the top‐left section?",
                                "What does the top‐right section display?",
                                "How is the top‐right section titled and what additional features does it include?",
                                "What type of plot is shown in the bottom‐left section and what are its key features?",
                                "What is contained in the bottom‐right section?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "08XX99_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Dashboard Analysis Report",
                                "2×2 grid",
                                "Line plot",
                                "Smooth sine wave in blue (thicker) and noisy sine wave in orange (dashed)",
                                "X Axis (radians) and Amplitude with a dotted grid",
                                "An inset text box with a list of key observations",
                                "A bar chart with four bars",
                                "It is titled 'Section 2: Category Analysis', includes axis labels (Categories and Values), horizontal grid lines, and numerical annotations on each bar",
                                "A scatter plot with varied point sizes, a color gradient, a colorbar labeled 'Size Scale', and axes labeled 'Random X' and 'Random Y' with a gray dotted grid",
                                "A placeholder with structured textual content summarizing key metrics and important notes without visible axes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"SensorID\",\"SensorName\",\"Location\",\"Readings\",\"Config\"\n\"S101\",\"Temperature Sensor\",\"{\"\"latitude\"\":37.7749,\"\"longitude\"\":-122.4194}\",\"[22.5,23.0,22.8]\",\"{\"\"unit\"\":\"\"Celsius\"\",\"\"threshold\"\":25}\"\n\"S102\",\"Air Quality Sensor\",\"{\"\"latitude\"\":34.0522,\"\"longitude\"\":-118.2437}\",\"[78,82,80]\",\"{\"\"unit\"\":\"\"AQI\"\",\"\"alert\"\":true}\"\n\"S103\",\"Humidity Sensor\",\"{\"\"latitude\"\":40.7128,\"\"longitude\"\":-74.0060}\",\"[45,47,44]\",\"{\"\"unit\"\":\"\"Percent\"\",\"\"calibration\"\":\"\"2023-09-01\"\"}\"\n</code>",
            "feature_requirements": "• The output must represent a collection of sensor records in JSON format.  \n• Each sensor record should be structured as an object with clearly defined keys: SensorID, SensorName, Location, Readings, and Config.  \n• The SensorID field must retain its original string value from the CSV.  \n• The SensorName field must retain its original string value from the CSV.  \n• The Location field must be an object containing latitude and longitude keys, with both values represented as numbers derived from the CSV.  \n• The Readings field must be represented as a list of numeric values.  \n• The Config field must be an object that includes key-value pairs such as unit (as a string) and additional properties like threshold (as a number), alert (as a boolean), or calibration (as a string) as applicable.  \n• The order of sensor records in the JSON output must match the order they appear in the CSV input.  \n• All sensor records present in the CSV (three records) must be included in the JSON output.",
            "task_id": "020500",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020500_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"SensorID\",\"SensorName\",\"Location\",\"Readings\",\"Config\"\n\"S101\",\"Temperature Sensor\",\"{\"\"latitude\"\":37.7749,\"\"longitude\"\":-122.4194}\",\"[22.5,23.0,22.8]\",\"{\"\"unit\"\":\"\"Celsius\"\",\"\"threshold\"\":25}\"\n\"S102\",\"Air Quality Sensor\",\"{\"\"latitude\"\":34.0522,\"\"longitude\"\":-118.2437}\",\"[78,82,80]\",\"{\"\"unit\"\":\"\"AQI\"\",\"\"alert\"\":true}\"\n\"S103\",\"Humidity Sensor\",\"{\"\"latitude\"\":40.7128,\"\"longitude\"\":-74.0060}\",\"[45,47,44]\",\"{\"\"unit\"\":\"\"Percent\"\",\"\"calibration\"\":\"\"2023-09-01\"\"}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020500_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,setting_name,location,facilities,events\nMT001,\"Mountain Retreat\",\"{\"\"city\"\":\"\"Aspen\"\",\"\"state\"\":\"\"CO\"\",\"\"country\"\":\"\"USA\"\"}\",\"Hiking Trails;Spa;Yoga Studio\",\"[{\"\"name\"\":\"\"Sunrise Yoga\"\",\"\"time\"\":\"\"06:30 AM\"\"}, {\"\"name\"\":\"\"Mountain Hike\"\",\"\"time\"\":\"\"09:00 AM\"\"}]\"\nURB002,\"Urban Office\",\"{\"\"city\"\":\"\"New York\"\",\"\"state\"\":\"\"NY\"\",\"\"country\"\":\"\"USA\"\"}\",\"Conference Room;Cafeteria;Gym\",\"[{\"\"name\"\":\"\"Team Meeting\"\",\"\"time\"\":\"\"10:00 AM\"\"}, {\"\"name\"\":\"\"Project Review\"\",\"\"time\"\":\"\"02:00 PM\"\"}]\"\nRL003,\"Rural Farmhouse\",\"{\"\"city\"\":\"\"Springfield\"\",\"\"state\"\":\"\"IL\"\",\"\"country\"\":\"\"USA\"\"}\",\"Barn;Greenhouse;Tractor Room\",\"[{\"\"name\"\":\"\"Farm Tour\"\",\"\"time\"\":\"\"08:00 AM\"\"}, {\"\"name\"\":\"\"Animal Feeding\"\",\"\"time\"\":\"\"01:00 PM\"\"}]\"\n</code>",
            "feature_requirements": "• The output must be structured as a JSON array containing one object for each row in the CSV input.  \n• Each object in the JSON array must include the keys: \"id\", \"setting_name\", \"location\", \"facilities\", and \"events\".  \n• The value for the \"location\" key must be an object that includes the keys \"city\", \"state\", and \"country\" with corresponding values.  \n• The \"facilities\" value must be converted into a list (array) of string values, splitting the CSV semicolon-separated items into individual strings.  \n• The \"events\" value must be converted into a list (array) of objects, where each event object contains the keys \"name\" and \"time\" with their respective values.  \n• Each CSV row must be correctly transformed into its corresponding JSON object, maintaining the order and accurate values from the CSV fields.",
            "task_id": "020501",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[][id]",
                "rows[][setting_name]",
                "rows[][location]",
                "rows[][location][city]",
                "rows[][location][state]",
                "rows[][location][country]",
                "rows[][facilities]",
                "rows[][events]",
                "rows[][events][][name]",
                "rows[][events][][time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020501_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,setting_name,location,facilities,events\nMT001,\"Mountain Retreat\",\"{\"\"city\"\":\"\"Aspen\"\",\"\"state\"\":\"\"CO\"\",\"\"country\"\":\"\"USA\"\"}\",\"Hiking Trails;Spa;Yoga Studio\",\"[{\"\"name\"\":\"\"Sunrise Yoga\"\",\"\"time\"\":\"\"06:30 AM\"\"}, {\"\"name\"\":\"\"Mountain Hike\"\",\"\"time\"\":\"\"09:00 AM\"\"}]\"\nURB002,\"Urban Office\",\"{\"\"city\"\":\"\"New York\"\",\"\"state\"\":\"\"NY\"\",\"\"country\"\":\"\"USA\"\"}\",\"Conference Room;Cafeteria;Gym\",\"[{\"\"name\"\":\"\"Team Meeting\"\",\"\"time\"\":\"\"10:00 AM\"\"}, {\"\"name\"\":\"\"Project Review\"\",\"\"time\"\":\"\"02:00 PM\"\"}]\"\nRL003,\"Rural Farmhouse\",\"{\"\"city\"\":\"\"Springfield\"\",\"\"state\"\":\"\"IL\"\",\"\"country\"\":\"\"USA\"\"}\",\"Barn;Greenhouse;Tractor Room\",\"[{\"\"name\"\":\"\"Farm Tour\"\",\"\"time\"\":\"\"08:00 AM\"\"}, {\"\"name\"\":\"\"Animal Feeding\"\",\"\"time\"\":\"\"01:00 PM\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020501_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[][id]",
                                "rows[][setting_name]",
                                "rows[][location]",
                                "rows[][location][city]",
                                "rows[][location][state]",
                                "rows[][location][country]",
                                "rows[][facilities]",
                                "rows[][events]",
                                "rows[][events][][name]",
                                "rows[][events][][time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\ndevice_id,device_name,features,settings,location\n101,\"Smart Thermostat\",\"[\"\"temperature control\"\",\"\"humidity monitoring\"\"]\",\"{\"\"min_temp\"\": 18, \"\"max_temp\"\": 26, \"\"eco_mode\"\": true}\",\"Living Room\"\n102,\"Smart Light\",\"[\"\"color change\"\",\"\"dimming\"\",\"\"scheduling\"\"]\",\"{\"\"brightness_level\"\": 75, \"\"default_color\"\": \"\"warm white\"\"}\",\"Bedroom\"\n103,\"Smart Door Lock\",\"[\"\"remote access\"\",\"\"auto lock\"\",\"\"keyless entry\"\"]\",\"{\"\"lock_delay\"\": 30, \"\"alarm_enabled\"\": false}\",\"Front Door\"\n</code>",
            "feature_requirements": "• The output must be structured as an array of JSON objects, with each object corresponding to a row in the CSV data.  \n• Each JSON object must include the keys: device_id, device_name, features, settings, and location.  \n• The device_id key must map to a numeric value extracted from the CSV.  \n• The device_name key must map to a string value exactly as provided in the CSV.  \n• The features key must contain an array of strings, parsed from the CSV's representation of a list.  \n• The settings key must contain an object with key-value pairs, where numerical and boolean values are represented appropriately (e.g., true as a boolean, 18 as a number).  \n• The location key must map to a string value corresponding to the CSV entry for that field.",
            "task_id": "020502",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[*][device_id]",
                "[*][device_name]",
                "[*][features]",
                "[*][settings]",
                "[*][location]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020502_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\ndevice_id,device_name,features,settings,location\n101,\"Smart Thermostat\",\"[\"\"temperature control\"\",\"\"humidity monitoring\"\"]\",\"{\"\"min_temp\"\": 18, \"\"max_temp\"\": 26, \"\"eco_mode\"\": true}\",\"Living Room\"\n102,\"Smart Light\",\"[\"\"color change\"\",\"\"dimming\"\",\"\"scheduling\"\"]\",\"{\"\"brightness_level\"\": 75, \"\"default_color\"\": \"\"warm white\"\"}\",\"Bedroom\"\n103,\"Smart Door Lock\",\"[\"\"remote access\"\",\"\"auto lock\"\",\"\"keyless entry\"\"]\",\"{\"\"lock_delay\"\": 30, \"\"alarm_enabled\"\": false}\",\"Front Door\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020502_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[*][device_id]",
                                "[*][device_name]",
                                "[*][features]",
                                "[*][settings]",
                                "[*][location]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nrecord_id,username,contact_emails,roles,preferences\n1,alice,\"[\"\"alice@example.com\"\", \"\"alice.work@example.com\"\"]\",\"[\"\"admin\"\", \"\"editor\"\"]\",\"{\"theme\":\"\"dark\"\",\"\"notifications\"\":true,\"\"language\"\":\"\"en\"\"}\"\n2,bob,\"[\"\"bob@example.com\"\"]\",\"[\"\"user\"\"]\",\"{\"theme\":\"\"light\"\",\"\"notifications\"\":false,\"\"language\"\":\"\"fr\"\"}\"\n3,charlie,\"[\"\"charlie123@example.com\"\", \"\"charlie.home@example.com\"\"]\",\"[\"\"editor\"\", \"\"user\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"language\"\":\"\"es\"\"}\"\n</code>",
            "feature_requirements": "• The JSON output must contain an array of objects where each object represents one CSV row.  \n• Each object must include keys corresponding to the CSV header: record_id, username, contact_emails, roles, and preferences.  \n• The record_id value must be represented as a numeric value.  \n• The username value must be represented as a string.  \n• The contact_emails value must be converted to an array of email address strings.  \n• The roles value must be converted to an array containing role strings.  \n• The preferences value must be converted to an object with key-value pairs, specifically containing keys for theme, notifications, and language.  \n• The notifications key within preferences must be represented as a boolean value while theme and language should be strings.",
            "task_id": "020503",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[i][record_id]",
                "rows[i][username]",
                "rows[i][contact_emails]",
                "rows[i][roles]",
                "rows[i][preferences]",
                "rows[i][preferences][theme]",
                "rows[i][preferences][notifications]",
                "rows[i][preferences][language]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020503_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nrecord_id,username,contact_emails,roles,preferences\n1,alice,\"[\"\"alice@example.com\"\", \"\"alice.work@example.com\"\"]\",\"[\"\"admin\"\", \"\"editor\"\"]\",\"{\"theme\":\"\"dark\"\",\"\"notifications\"\":true,\"\"language\"\":\"\"en\"\"}\"\n2,bob,\"[\"\"bob@example.com\"\"]\",\"[\"\"user\"\"]\",\"{\"theme\":\"\"light\"\",\"\"notifications\"\":false,\"\"language\"\":\"\"fr\"\"}\"\n3,charlie,\"[\"\"charlie123@example.com\"\", \"\"charlie.home@example.com\"\"]\",\"[\"\"editor\"\", \"\"user\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"language\"\":\"\"es\"\"}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020503_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[i][record_id]",
                                "rows[i][username]",
                                "rows[i][contact_emails]",
                                "rows[i][roles]",
                                "rows[i][preferences]",
                                "rows[i][preferences][theme]",
                                "rows[i][preferences][notifications]",
                                "rows[i][preferences][language]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nPersonID,FullName,Age,Contacts,Interests\n101,\"Alice Johnson\",29,\"[{\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"alice@example.com\"\"}, {\"\"type\"\": \"\"phone\"\", \"\"value\"\": \"\"555-0123\"\"}]\",\"reading;hiking;music\"\n102,\"Bob Smith\",35,\"[{\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"bob@example.com\"\"}]\",\"cooking;travel\"\n103,\"Clara Lee\",42,\"[{\"\"type\"\": \"\"phone\"\", \"\"value\"\": \"\"555-6789\"\"}, {\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"clara@example.com\"\"}, {\"\"type\"\": \"\"social\"\", \"\"value\"\": \"\"@claralee\"\"}]\",\"gardening;painting;cycling\"\n</code>",
            "feature_requirements": "• The output must be a JSON array, where each element represents one row of the CSV data.\n• Each object in the JSON array must include the keys: PersonID, FullName, Age, Contacts, and Interests.\n• The PersonID and Age values must be represented as numbers.\n• The Contacts field must be converted into an array of objects, each with keys such as type and value.\n• The Interests field must be converted into an array of strings, splitting the original semicolon-separated interests.\n• The FullName value must remain as a string in the output.\n• All objects and arrays must accurately reflect the data from each corresponding CSV row.",
            "task_id": "020504",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[][PersonID]",
                "rows[][FullName]",
                "rows[][Age]",
                "rows[][Contacts]",
                "rows[][Contacts][][type]",
                "rows[][Contacts][][value]",
                "rows[][Interests]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020504_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nPersonID,FullName,Age,Contacts,Interests\n101,\"Alice Johnson\",29,\"[{\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"alice@example.com\"\"}, {\"\"type\"\": \"\"phone\"\", \"\"value\"\": \"\"555-0123\"\"}]\",\"reading;hiking;music\"\n102,\"Bob Smith\",35,\"[{\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"bob@example.com\"\"}]\",\"cooking;travel\"\n103,\"Clara Lee\",42,\"[{\"\"type\"\": \"\"phone\"\", \"\"value\"\": \"\"555-6789\"\"}, {\"\"type\"\": \"\"email\"\", \"\"value\"\": \"\"clara@example.com\"\"}, {\"\"type\"\": \"\"social\"\", \"\"value\"\": \"\"@claralee\"\"}]\",\"gardening;painting;cycling\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020504_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[][PersonID]",
                                "rows[][FullName]",
                                "rows[][Age]",
                                "rows[][Contacts]",
                                "rows[][Contacts][][type]",
                                "rows[][Contacts][][value]",
                                "rows[][Interests]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"RecordID\",\"Name\",\"ContactInfo\",\"Roles\",\"Projects\"\n\"101\",\"Alice Johnson\",\"{\"\"Email\"\":\"\"alice.johnson@example.com\"\",\"\"Phone\"\":\"\"555-0101\"\"}\",\"[\"\"Developer\"\",\"\"Researcher\"\"]\",\"[{\"\"ProjectID\"\":\"\"P01\"\",\"\"Description\"\":\"\"AI Research\"\"},{\"\"ProjectID\"\":\"\"P02\"\",\"\"Description\"\":\"\"Cloud Architecture\"\"}]\"\n\"102\",\"Bob Smith\",\"{\"\"Email\"\":\"\"bob.smith@example.com\"\",\"\"Phone\"\":\"\"555-0123\"\"}\",\"[\"\"Manager\"\",\"\"Team Lead\"\"]\",\"[{\"\"ProjectID\"\":\"\"P03\"\",\"\"Description\"\":\"\"Product Launch\"\"},{\"\"ProjectID\"\":\"\"P04\"\",\"\"Description\"\":\"\"Market Analysis\"\"}]\"\n</code>",
            "feature_requirements": "• The output must be structured as an array of objects, each object corresponding to one row of data (excluding the header).  \n• Each object in the array must contain the keys \"RecordID\", \"Name\", \"ContactInfo\", \"Roles\", and \"Projects\".  \n• The value for \"RecordID\" should come directly from the CSV and maintained as the corresponding text value.  \n• The value for \"Name\" must be a string extracted from the CSV.  \n• The \"ContactInfo\" value must be converted from its CSV string representation into a nested object containing keys \"Email\" and \"Phone\".  \n• The \"Roles\" value must be converted from a CSV string representation into an array of strings.  \n• The \"Projects\" value must be converted from its CSV representation into an array of objects, where each project object contains the keys \"ProjectID\" and \"Description\".  \n• The ordering of items in the output JSON array must reflect the order of the rows in the original CSV file.",
            "task_id": "020505",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "RecordID",
                "Name",
                "ContactInfo[Email]",
                "ContactInfo[Phone]",
                "Roles",
                "Projects",
                "Projects[*][ProjectID]",
                "Projects[*][Description]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020505_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"RecordID\",\"Name\",\"ContactInfo\",\"Roles\",\"Projects\"\n\"101\",\"Alice Johnson\",\"{\"\"Email\"\":\"\"alice.johnson@example.com\"\",\"\"Phone\"\":\"\"555-0101\"\"}\",\"[\"\"Developer\"\",\"\"Researcher\"\"]\",\"[{\"\"ProjectID\"\":\"\"P01\"\",\"\"Description\"\":\"\"AI Research\"\"},{\"\"ProjectID\"\":\"\"P02\"\",\"\"Description\"\":\"\"Cloud Architecture\"\"}]\"\n\"102\",\"Bob Smith\",\"{\"\"Email\"\":\"\"bob.smith@example.com\"\",\"\"Phone\"\":\"\"555-0123\"\"}\",\"[\"\"Manager\"\",\"\"Team Lead\"\"]\",\"[{\"\"ProjectID\"\":\"\"P03\"\",\"\"Description\"\":\"\"Product Launch\"\"},{\"\"ProjectID\"\":\"\"P04\"\",\"\"Description\"\":\"\"Market Analysis\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020505_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "RecordID",
                                "Name",
                                "ContactInfo[Email]",
                                "ContactInfo[Phone]",
                                "Roles",
                                "Projects",
                                "Projects[*][ProjectID]",
                                "Projects[*][Description]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"UserID\",\"Name\",\"Roles\",\"Preferences\",\"History\"\n\"101\",\"Alice Smith\",\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true}\",\"login;edit;logout\"\n\"102\",\"Bob Johnson\",\"viewer\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false}\",\"login;view\"\n\"103\",\"Charlie Lee\",\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true}\",\"login;edit;comment\"\n</code>",
            "feature_requirements": "• The output must represent a collection of user records derived from the CSV data.  \n• Each user record must contain the keys \"UserID\", \"Name\", \"Roles\", \"Preferences\", and \"History\".  \n• The \"UserID\" field in each record should map directly to the corresponding CSV value.  \n• The \"Roles\" field must be represented as an array of strings, with the CSV value split by semicolons.  \n• The \"Preferences\" field must be a nested object containing key–value pairs (e.g., \"theme\" and \"notifications\") as defined in the CSV.  \n• The \"History\" field must be represented as an array of strings, with the CSV value split by semicolons.  \n• The JSON output must correctly convert and include all three CSV rows as separate records.  \n• Each record’s keys must strictly correspond to the CSV header labels.",
            "task_id": "020506",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "records[0][UserID]",
                "records[0][Name]",
                "records[0][Roles]",
                "records[0][Preferences]",
                "records[0][Preferences][theme]",
                "records[0][Preferences][notifications]",
                "records[0][History]",
                "records[1][UserID]",
                "records[1][Name]",
                "records[1][Roles]",
                "records[1][Preferences]",
                "records[1][Preferences][theme]",
                "records[1][Preferences][notifications]",
                "records[1][History]",
                "records[2][UserID]",
                "records[2][Name]",
                "records[2][Roles]",
                "records[2][Preferences]",
                "records[2][Preferences][theme]",
                "records[2][Preferences][notifications]",
                "records[2][History]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020506_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"UserID\",\"Name\",\"Roles\",\"Preferences\",\"History\"\n\"101\",\"Alice Smith\",\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true}\",\"login;edit;logout\"\n\"102\",\"Bob Johnson\",\"viewer\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false}\",\"login;view\"\n\"103\",\"Charlie Lee\",\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true}\",\"login;edit;comment\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020506_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "records[0][UserID]",
                                "records[0][Name]",
                                "records[0][Roles]",
                                "records[0][Preferences]",
                                "records[0][Preferences][theme]",
                                "records[0][Preferences][notifications]",
                                "records[0][History]",
                                "records[1][UserID]",
                                "records[1][Name]",
                                "records[1][Roles]",
                                "records[1][Preferences]",
                                "records[1][Preferences][theme]",
                                "records[1][Preferences][notifications]",
                                "records[1][History]",
                                "records[2][UserID]",
                                "records[2][Name]",
                                "records[2][Roles]",
                                "records[2][Preferences]",
                                "records[2][Preferences][theme]",
                                "records[2][Preferences][notifications]",
                                "records[2][History]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,email,details,orders\n001,\"Alice Smith\",\"alice.smith@example.com\",\"{\"\"age\"\": 30, \"\"address\"\": {\"\"street\"\": \"\"123 Maple Ave\"\", \"\"city\"\": \"\"Springfield\"\", \"\"zip\"\": \"\"62704\"\"}, \"\"phones\"\": [\"\"555-1234\"\", \"\"555-5678\"\"]}\",\"[\"\"order1001\"\", \"\"order1002\"\"]\"\n002,\"Bob Johnson\",\"bob.johnson@example.com\",\"{\"\"age\"\": 42, \"\"address\"\": {\"\"street\"\": \"\"456 Oak St\"\", \"\"city\"\": \"\"Metropolis\"\", \"\"zip\"\": \"\"10118\"\"}, \"\"phones\"\": [\"\"555-8765\"\", \"\"555-4321\"\"]}\",\"[\"\"order2001\"\"]\"\n</code>",
            "feature_requirements": "• The output must be a JSON array where each element represents a record converted from a CSV row.  \n• Each record must contain the keys \"id\", \"name\", \"email\", \"details\", and \"orders\", with values derived exactly from the corresponding CSV columns.  \n• For the \"details\" key, the value must be a nested object that includes an \"age\" property (as a numeric value), an \"address\" property (as a nested object), and a \"phones\" property (as an array of strings).  \n• The nested \"address\" object must include the keys \"street\", \"city\", and \"zip\" with values taken from the CSV details field.  \n• The \"orders\" key in each record must contain an array of order identifiers as strings, reflecting the CSV data accurately.  \n• The converted JSON must accurately represent the data types, such as numbers for age and arrays for both phones and orders.  \n• The overall structure must maintain the data hierarchy, ensuring that nested objects and arrays within each record are correctly represented.",
            "task_id": "020507",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[][id]",
                "[][name]",
                "[][email]",
                "[][details]",
                "[][details][age]",
                "[][details][address]",
                "[][details][address][street]",
                "[][details][address][city]",
                "[][details][address][zip]",
                "[][details][phones]",
                "[][orders]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020507_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,email,details,orders\n001,\"Alice Smith\",\"alice.smith@example.com\",\"{\"\"age\"\": 30, \"\"address\"\": {\"\"street\"\": \"\"123 Maple Ave\"\", \"\"city\"\": \"\"Springfield\"\", \"\"zip\"\": \"\"62704\"\"}, \"\"phones\"\": [\"\"555-1234\"\", \"\"555-5678\"\"]}\",\"[\"\"order1001\"\", \"\"order1002\"\"]\"\n002,\"Bob Johnson\",\"bob.johnson@example.com\",\"{\"\"age\"\": 42, \"\"address\"\": {\"\"street\"\": \"\"456 Oak St\"\", \"\"city\"\": \"\"Metropolis\"\", \"\"zip\"\": \"\"10118\"\"}, \"\"phones\"\": [\"\"555-8765\"\", \"\"555-4321\"\"]}\",\"[\"\"order2001\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020507_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[][id]",
                                "[][name]",
                                "[][email]",
                                "[][details]",
                                "[][details][age]",
                                "[][details][address]",
                                "[][details][address][street]",
                                "[][details][address][city]",
                                "[][details][address][zip]",
                                "[][details][phones]",
                                "[][orders]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\ndevice_id,device_name,location,supported_commands,sensors,firmware_versions\n001,AlphaSensor,Living Room,\"[\"\"turn_on\"\",\"\"turn_off\"\",\"\"dim\"\"]\",\"[{\"\"type\"\":\"\"temperature\"\",\"\"unit\"\":\"\"C\"\"},{\"\"type\"\":\"\"humidity\"\",\"\"unit\"\":\"\"%\"\"}]\",\"[\"\"v1.0\"\",\"\"v1.1\"\"]\"\n002,BetaHub,Kitchen,\"[\"\"activate\"\",\"\"deactivate\"\",\"\"reset\"\"]\",\"[{\"\"type\"\":\"\"smoke\"\",\"\"unit\"\":\"\"ppm\"\"}]\",\"[\"\"v2.0\"\",\"\"v2.1\"\"]\"\n</code>",
            "feature_requirements": "• The JSON output must be an array where each item represents a row from the CSV input.  \n• Each item in the output array must be an object containing exactly these keys: device_id, device_name, location, supported_commands, sensors, and firmware_versions.  \n• The value for device_id must be a string corresponding to the CSV's first column value for that row.  \n• The supported_commands key must map to an array of strings, parsed from the CSV field which originally includes a JSON-formatted list of commands.  \n• The sensors key must map to an array of objects, with each object containing keys such as type and unit, directly converted from the CSV's sensors field.  \n• The firmware_versions key must map to an array of strings, parsed from the CSV field containing a JSON-formatted list of firmware versions.  \n• The order of keys in each JSON object should reflect the order provided in the CSV header.",
            "task_id": "020508",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[][device_id]",
                "[][device_name]",
                "[][location]",
                "[][supported_commands]",
                "[][sensors]",
                "[][sensors][*][type]",
                "[][sensors][*][unit]",
                "[][firmware_versions]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020508_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\ndevice_id,device_name,location,supported_commands,sensors,firmware_versions\n001,AlphaSensor,Living Room,\"[\"\"turn_on\"\",\"\"turn_off\"\",\"\"dim\"\"]\",\"[{\"\"type\"\":\"\"temperature\"\",\"\"unit\"\":\"\"C\"\"},{\"\"type\"\":\"\"humidity\"\",\"\"unit\"\":\"\"%\"\"}]\",\"[\"\"v1.0\"\",\"\"v1.1\"\"]\"\n002,BetaHub,Kitchen,\"[\"\"activate\"\",\"\"deactivate\"\",\"\"reset\"\"]\",\"[{\"\"type\"\":\"\"smoke\"\",\"\"unit\"\":\"\"ppm\"\"}]\",\"[\"\"v2.0\"\",\"\"v2.1\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020508_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[][device_id]",
                                "[][device_name]",
                                "[][location]",
                                "[][supported_commands]",
                                "[][sensors]",
                                "[][sensors][*][type]",
                                "[][sensors][*][unit]",
                                "[][firmware_versions]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,location,attributes,tags,contacts\n1,Emerald City,Central Mountain,\"{\"\"population\"\":12000, \"\"features\"\": [\"\"green energy\"\", \"\"eco-friendly\"\"]}\",\"[\"\"urban\"\",\"\"sustainable\"\"]\",\"{\"\"phone\"\":\"\"555-001\"\", \"\"email\"\":\"\"info@emeraldcity.org\"\"}\"\n2,Cyberpolis,Neon District,\"{\"\"population\"\":50000, \"\"features\"\": [\"\"high tech\"\", \"\"cyber security\"\", \"\"innovation lab\"\"]}\",\"[\"\"tech hub\"\",\"\"futuristic\"\",\"\"vibrant\"\"]\",\"{\"\"phone\"\":\"\"555-002\"\", \"\"email\"\":\"\"contact@cyberpolis.net\"\"}\"\n3,Aurora Haven,Frost Valley,\"{\"\"population\"\":8000, \"\"features\"\": [\"\"renewable energy\"\", \"\"quiet life\"\", \"\"artisanal crafts\"\"]}\",\"[\"\"rural\"\",\"\"peaceful\"\"]\",\"{\"\"phone\"\":\"\"555-003\"\", \"\"email\"\":\"\"hello@aurorahaven.com\"\"}\"\n</code>",
            "feature_requirements": "• The output must be a valid JSON structure that accurately represents the CSV data.\n• The JSON data should be an array of objects, with each object representing a row from the CSV.\n• Each object must include keys: \"id\", \"name\", \"location\", \"attributes\", \"tags\", and \"contacts\", matching the CSV headers.\n• The value for \"id\" must be a number that corresponds to the CSV id field.\n• The \"attributes\" key must contain a nested object with keys such as \"population\" (a number) and \"features\" (an array of strings).\n• The \"tags\" key should contain an array of strings.\n• The \"contacts\" key must contain a nested object with keys \"phone\" and \"email\", each having string values.\n• The conversion must preserve the order of the records as presented in the CSV.",
            "task_id": "020509",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][id]",
                "rows[0][name]",
                "rows[0][location]",
                "rows[0][attributes]",
                "rows[0][attributes][population]",
                "rows[0][attributes][features]",
                "rows[0][tags]",
                "rows[0][contacts]",
                "rows[0][contacts][phone]",
                "rows[0][contacts][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020509_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,location,attributes,tags,contacts\n1,Emerald City,Central Mountain,\"{\"\"population\"\":12000, \"\"features\"\": [\"\"green energy\"\", \"\"eco-friendly\"\"]}\",\"[\"\"urban\"\",\"\"sustainable\"\"]\",\"{\"\"phone\"\":\"\"555-001\"\", \"\"email\"\":\"\"info@emeraldcity.org\"\"}\"\n2,Cyberpolis,Neon District,\"{\"\"population\"\":50000, \"\"features\"\": [\"\"high tech\"\", \"\"cyber security\"\", \"\"innovation lab\"\"]}\",\"[\"\"tech hub\"\",\"\"futuristic\"\",\"\"vibrant\"\"]\",\"{\"\"phone\"\":\"\"555-002\"\", \"\"email\"\":\"\"contact@cyberpolis.net\"\"}\"\n3,Aurora Haven,Frost Valley,\"{\"\"population\"\":8000, \"\"features\"\": [\"\"renewable energy\"\", \"\"quiet life\"\", \"\"artisanal crafts\"\"]}\",\"[\"\"rural\"\",\"\"peaceful\"\"]\",\"{\"\"phone\"\":\"\"555-003\"\", \"\"email\"\":\"\"hello@aurorahaven.com\"\"}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020509_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][id]",
                                "rows[0][name]",
                                "rows[0][location]",
                                "rows[0][attributes]",
                                "rows[0][attributes][population]",
                                "rows[0][attributes][features]",
                                "rows[0][tags]",
                                "rows[0][contacts]",
                                "rows[0][contacts][phone]",
                                "rows[0][contacts][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nrecord_id,user_name,emails,roles,settings\n1,John Doe,\"john@example.com;jd@example.com\",\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"en\"\",\"\"es\"\"]}\"\n2,Jane Smith,\"jane.smith@example.com\",\"user\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false,\"\"languages\"\":[\"\"en\"\",\"\"fr\"\"]}\"\n3,Bob Johnson,\"bob.johnson@example.com;bjohn@example.com\",\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"en\"\",\"\"de\"\"]}\"\n</code>",
            "feature_requirements": "• The output must be a valid JSON object containing an array of records.\n• Each record in the array must include the keys: record_id, user_name, emails, roles, and settings.\n• The record_id field must have a numeric value.\n• The user_name field must contain a string representing the user's name.\n• The emails field must be an array containing each email address as separate string entries, split from the semicolon-delimited input.\n• The roles field must be an array containing each role as separate string entries, split from the semicolon-delimited input.\n• The settings field must be a nested JSON object containing keys such as theme, notifications, and languages.\n• Within the settings object, the theme field must be a string, the notifications field must be a boolean, and the languages field must be an array of strings.\n• The JSON output must include exactly three records corresponding to the three rows provided in the CSV input.",
            "task_id": "020510",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "records",
                "records[].record_id",
                "records[].user_name",
                "records[].emails",
                "records[].roles",
                "records[].settings",
                "records[].settings.theme",
                "records[].settings.notifications",
                "records[].settings.languages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020510_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nrecord_id,user_name,emails,roles,settings\n1,John Doe,\"john@example.com;jd@example.com\",\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"en\"\",\"\"es\"\"]}\"\n2,Jane Smith,\"jane.smith@example.com\",\"user\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false,\"\"languages\"\":[\"\"en\"\",\"\"fr\"\"]}\"\n3,Bob Johnson,\"bob.johnson@example.com;bjohn@example.com\",\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"en\"\",\"\"de\"\"]}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020510_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "records",
                                "records[].record_id",
                                "records[].user_name",
                                "records[].emails",
                                "records[].roles",
                                "records[].settings",
                                "records[].settings.theme",
                                "records[].settings.notifications",
                                "records[].settings.languages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nevent_id,event_name,location,participants,schedule\n001,Annual Meeting,\"New York\",\"[\"\"Alice\"\",\"\"Bob\"\",\"\"Charlie\"\"]\",\"{\"\"start_time\"\":\"\"09:00\"\",\"\"end_time\"\":\"\"17:00\"\",\"\"sessions\"\":[\"\"Opening\"\",\"\"Keynote\"\"]}\"\n002,Tech Conference,\"San Francisco\",\"[\"\"Diana\"\",\"\"Elijah\"\"]\",\"{\"\"start_time\"\":\"\"10:00\"\",\"\"end_time\"\":\"\"18:00\"\",\"\"sessions\"\":[\"\"Innovation\"\",\"\"Networking\"\"]}\"\n003,Workshop,\"Chicago\",\"[\"\"Frank\"\",\"\"Grace\"\",\"\"Hannah\"\",\"\"Ian\"\"]\",\"{\"\"start_time\"\":\"\"08:30\"\",\"\"end_time\"\":\"\"16:30\"\",\"\"sessions\"\":[\"\"Intro\"\",\"\"Deep Dive\"\",\"\"Wrap-up\"\"]}\"\n</code>",
            "feature_requirements": "- The converted JSON must represent a collection of event entries as a structured data container.\n- Each event entry must include the keys: event_id, event_name, location, participants, and schedule.\n- The event_id, event_name, and location keys must map directly to their respective values as strings taken from the CSV.\n- The participants key must map to an array of participant names, converting the CSV string representation of a list into an actual JSON list.\n- The schedule key must map to an object containing details of the event’s schedule.\n- Within each schedule object, there must be keys for start_time and end_time with corresponding time values as strings.\n- The schedule object must also include a sessions key that maps to an array of session names extracted from the CSV string.\n- All values in the JSON output must exactly reflect the information provided in the CSV, ensuring proper conversion of string representations to JSON arrays and objects.",
            "task_id": "020511",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "events[*][event_id]",
                "events[*][event_name]",
                "events[*][location]",
                "events[*][participants]",
                "events[*][schedule]",
                "events[*][schedule][start_time]",
                "events[*][schedule][end_time]",
                "events[*][schedule][sessions]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020511_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nevent_id,event_name,location,participants,schedule\n001,Annual Meeting,\"New York\",\"[\"\"Alice\"\",\"\"Bob\"\",\"\"Charlie\"\"]\",\"{\"\"start_time\"\":\"\"09:00\"\",\"\"end_time\"\":\"\"17:00\"\",\"\"sessions\"\":[\"\"Opening\"\",\"\"Keynote\"\"]}\"\n002,Tech Conference,\"San Francisco\",\"[\"\"Diana\"\",\"\"Elijah\"\"]\",\"{\"\"start_time\"\":\"\"10:00\"\",\"\"end_time\"\":\"\"18:00\"\",\"\"sessions\"\":[\"\"Innovation\"\",\"\"Networking\"\"]}\"\n003,Workshop,\"Chicago\",\"[\"\"Frank\"\",\"\"Grace\"\",\"\"Hannah\"\",\"\"Ian\"\"]\",\"{\"\"start_time\"\":\"\"08:30\"\",\"\"end_time\"\":\"\"16:30\"\",\"\"sessions\"\":[\"\"Intro\"\",\"\"Deep Dive\"\",\"\"Wrap-up\"\"]}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020511_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "events[*][event_id]",
                                "events[*][event_name]",
                                "events[*][location]",
                                "events[*][participants]",
                                "events[*][schedule]",
                                "events[*][schedule][start_time]",
                                "events[*][schedule][end_time]",
                                "events[*][schedule][sessions]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,skills,contact,projects\n1001,\"Alice Johnson\",\"[\"\"Python\"\",\"\"Data Analysis\"\",\"\"Machine Learning\"\"]\",\"{\"\"email\"\":\"\"alice.johnson@example.com\"\",\"\"phone\"\":\"\"555-1234\"\",\"\"address\"\":\"\"123 Maple Street\"\"}\",\"[{\"\"projectId\"\":101,\"\"projectName\"\":\"\"Alpha\"\"},{\"\"projectId\"\":102,\"\"projectName\"\":\"\"Beta\"\"}]\"\n1002,\"Bob Smith\",\"[\"\"JavaScript\"\",\"\"Project Management\"\"]\",\"{\"\"email\"\":\"\"bob.smith@example.com\"\",\"\"phone\"\":\"\"555-2345\"\",\"\"address\"\":\"\"456 Oak Avenue\"\"}\",\"[{\"\"projectId\"\":103,\"\"projectName\"\":\"\"Gamma\"\"}]\"\n</code>",
            "feature_requirements": "• The output must be a top-level array where each element corresponds to one CSV row (excluding the header row).  \n• Each object in the array must contain the keys: id, name, skills, contact, and projects, matching the CSV header order.  \n• The \"id\" value must be represented as a number.  \n• The \"name\" value must be represented as a string.  \n• The \"skills\" value must be represented as a list of strings.  \n• The \"contact\" value must be represented as an object containing the keys: email, phone, and address, each with string values.  \n• The \"projects\" value must be represented as a list of objects, where each object includes the keys: projectId (as a number) and projectName (as a string).",
            "task_id": "020512",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[*][id]",
                "[*][name]",
                "[*][skills]",
                "[*][contact]",
                "[*][contact][email]",
                "[*][contact][phone]",
                "[*][contact][address]",
                "[*][projects]",
                "[*][projects][*][projectId]",
                "[*][projects][*][projectName]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020512_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,skills,contact,projects\n1001,\"Alice Johnson\",\"[\"\"Python\"\",\"\"Data Analysis\"\",\"\"Machine Learning\"\"]\",\"{\"\"email\"\":\"\"alice.johnson@example.com\"\",\"\"phone\"\":\"\"555-1234\"\",\"\"address\"\":\"\"123 Maple Street\"\"}\",\"[{\"\"projectId\"\":101,\"\"projectName\"\":\"\"Alpha\"\"},{\"\"projectId\"\":102,\"\"projectName\"\":\"\"Beta\"\"}]\"\n1002,\"Bob Smith\",\"[\"\"JavaScript\"\",\"\"Project Management\"\"]\",\"{\"\"email\"\":\"\"bob.smith@example.com\"\",\"\"phone\"\":\"\"555-2345\"\",\"\"address\"\":\"\"456 Oak Avenue\"\"}\",\"[{\"\"projectId\"\":103,\"\"projectName\"\":\"\"Gamma\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020512_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[*][id]",
                                "[*][name]",
                                "[*][skills]",
                                "[*][contact]",
                                "[*][contact][email]",
                                "[*][contact][phone]",
                                "[*][contact][address]",
                                "[*][projects]",
                                "[*][projects][*][projectId]",
                                "[*][projects][*][projectName]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nID,Name,Email,Roles,Preferences,Projects\n1,Alice Thompson,alice.t@example.com,\"[\"\"Admin\"\",\"\"User\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"en\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ001\"\",\"\"project_name\"\":\"\"Website Redesign\"\"},{\"\"project_id\"\":\"\"PRJ002\"\",\"\"project_name\"\":\"\"API Integration\"\"}]\"\n2,Bob Martinez,bob.martinez@example.com,\"[\"\"User\"\",\"\"Contributor\"\"]\",\"{\"\"theme\"\":\"\"light\"\",\"\"language\"\":\"\"es\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ003\"\",\"\"project_name\"\":\"\"Mobile App Development\"\"},{\"\"project_id\"\":\"\"PRJ004\"\",\"\"project_name\"\":\"\"System Upgrade\"\"}]\"\n3,Carla Nguyen,carla.nguyen@example.com,\"[\"\"User\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"fr\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ005\"\",\"\"project_name\"\":\"\"Data Analytics\"\"}]\"\n</code>",
            "feature_requirements": "• The output must be in JSON format representing structured data, where each CSV row is converted into a JSON object.\n• Each JSON object must include the keys: ID, Name, Email, Roles, Preferences, and Projects.\n• The value of the ID key must be a numerical type, not a string.\n• The value of the Roles key must be an array of strings, based on the CSV's JSON array in that cell.\n• The value of the Preferences key must be an object with specific keys such as theme and language, reflecting the input JSON string in the CSV.\n• The value of the Projects key must be an array of objects, where each object includes keys like project_id and project_name.\n• The JSON output must preserve the sequence of records as provided in the CSV input.",
            "task_id": "020513",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][ID]",
                "rows[*][Name]",
                "rows[*][Email]",
                "rows[*][Roles]",
                "rows[*][Preferences]",
                "rows[*][Preferences][theme]",
                "rows[*][Preferences][language]",
                "rows[*][Projects]",
                "rows[*][Projects][*][project_id]",
                "rows[*][Projects][*][project_name]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020513_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nID,Name,Email,Roles,Preferences,Projects\n1,Alice Thompson,alice.t@example.com,\"[\"\"Admin\"\",\"\"User\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"en\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ001\"\",\"\"project_name\"\":\"\"Website Redesign\"\"},{\"\"project_id\"\":\"\"PRJ002\"\",\"\"project_name\"\":\"\"API Integration\"\"}]\"\n2,Bob Martinez,bob.martinez@example.com,\"[\"\"User\"\",\"\"Contributor\"\"]\",\"{\"\"theme\"\":\"\"light\"\",\"\"language\"\":\"\"es\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ003\"\",\"\"project_name\"\":\"\"Mobile App Development\"\"},{\"\"project_id\"\":\"\"PRJ004\"\",\"\"project_name\"\":\"\"System Upgrade\"\"}]\"\n3,Carla Nguyen,carla.nguyen@example.com,\"[\"\"User\"\"]\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"fr\"\"}\",\"[{\"\"project_id\"\":\"\"PRJ005\"\",\"\"project_name\"\":\"\"Data Analytics\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020513_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][ID]",
                                "rows[*][Name]",
                                "rows[*][Email]",
                                "rows[*][Roles]",
                                "rows[*][Preferences]",
                                "rows[*][Preferences][theme]",
                                "rows[*][Preferences][language]",
                                "rows[*][Projects]",
                                "rows[*][Projects][*][project_id]",
                                "rows[*][Projects][*][project_name]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"ID\",\"Name\",\"Age\",\"Roles\",\"Hobbies\",\"Address\"\n\"1\",\"Alice\",30,\"['admin', 'editor']\",\"['reading', 'hiking', 'travel']\",\"{'street':'123 Maple St', 'city':'Wonderland', 'zip':12345}\"\n\"2\",\"Bob\",25,\"['user']\",\"['gaming', 'cooking']\",\"{'street':'456 Oak St', 'city':'Builderland', 'zip':67890}\"\n\"3\",\"Charlie\",28,\"['user', 'moderator']\",\"['cycling', 'photography', 'music']\",\"{'street':'789 Pine St', 'city':'Metropolis', 'zip':11223}\"\n</code>",
            "feature_requirements": "• The converted output must be a valid JSON structure consisting of a top-level array, where each element represents one CSV row.  \n• Each object in the JSON array must include keys corresponding exactly to the CSV column headers: \"ID\", \"Name\", \"Age\", \"Roles\", \"Hobbies\", and \"Address\".  \n• The value for the \"ID\" key must be taken directly from the CSV and remain unchanged, representing the unique identifier for each row.  \n• The \"Name\" key must hold the value from the CSV row as a string.  \n• The \"Age\" key must contain a numerical value corresponding to the age listed in the CSV.  \n• The \"Roles\" and \"Hobbies\" keys must each contain an array of strings, converted from the CSV string representations of these lists.  \n• The \"Address\" key must hold an object with keys \"street\", \"city\", and \"zip\", where each value corresponds to the respective data parsed from the CSV address string.  \n• Each JSON object should exactly reflect the data from one CSV row, ensuring a one-to-one conversion between rows and objects.",
            "task_id": "020514",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[*][ID]",
                "[*][Name]",
                "[*][Age]",
                "[*][Roles]",
                "[*][Hobbies]",
                "[*][Address][street]",
                "[*][Address][city]",
                "[*][Address][zip]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020514_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"ID\",\"Name\",\"Age\",\"Roles\",\"Hobbies\",\"Address\"\n\"1\",\"Alice\",30,\"['admin', 'editor']\",\"['reading', 'hiking', 'travel']\",\"{'street':'123 Maple St', 'city':'Wonderland', 'zip':12345}\"\n\"2\",\"Bob\",25,\"['user']\",\"['gaming', 'cooking']\",\"{'street':'456 Oak St', 'city':'Builderland', 'zip':67890}\"\n\"3\",\"Charlie\",28,\"['user', 'moderator']\",\"['cycling', 'photography', 'music']\",\"{'street':'789 Pine St', 'city':'Metropolis', 'zip':11223}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020514_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[*][ID]",
                                "[*][Name]",
                                "[*][Age]",
                                "[*][Roles]",
                                "[*][Hobbies]",
                                "[*][Address][street]",
                                "[*][Address][city]",
                                "[*][Address][zip]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"id\",\"name\",\"attributes\",\"contacts\",\"tags\"\n\"102\",\"Alice Johnson\",\"{\"\"profession\"\": \"\"Engineer\"\", \"\"experience\"\": 5}\",\"{\"\"phone\"\": \"\"555-1234\"\", \"\"email\"\": \"\"alice.j@example.com\"\"}\",\"[\"\"team lead\"\", \"\"mentor\"\"]\"\n\"205\",\"Bob Smith\",\"{\"\"profession\"\": \"\"Designer\"\", \"\"experience\"\": 8}\",\"{\"\"phone\"\": \"\"555-5678\"\", \"\"email\"\": \"\"bob.smith@example.com\"\"}\",\"[\"\"creative\"\", \"\"collaborator\"\"]\"\n\"309\",\"Carol White\",\"{\"\"profession\"\": \"\"Manager\"\", \"\"experience\"\": 10}\",\"{\"\"phone\"\": \"\"555-9012\"\", \"\"email\"\": \"\"carol.white@example.com\"\"}\",\"[\"\"strategic\"\", \"\"leader\"\"]\"\n</code>",
            "feature_requirements": "• The output must be a structured data representation that captures the CSV header as keys (id, name, attributes, contacts, tags) and each subsequent row as an object with corresponding key-value pairs.  \n• There must be an array (or list) container comprising three objects, one for each CSV row.  \n• Each object must include an \"id\" field with its value as found in the CSV, preserving exact order and type.  \n• Each object must include a \"name\" field that contains the person’s name from the CSV.  \n• The \"attributes\" field must contain a nested object with keys \"profession\" and \"experience\", where \"experience\" reflects the numeric value provided in the CSV.  \n• The \"contacts\" field must contain a nested object with keys \"phone\" and \"email\", directly mapping to the CSV data.  \n• The \"tags\" field must be represented as a list of string values that exactly reflect the CSV’s provided list of tags.",
            "task_id": "020515",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows",
                "rows[*][id]",
                "rows[*][name]",
                "rows[*][attributes]",
                "rows[*][attributes][profession]",
                "rows[*][attributes][experience]",
                "rows[*][contacts]",
                "rows[*][contacts][phone]",
                "rows[*][contacts][email]",
                "rows[*][tags]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020515_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"id\",\"name\",\"attributes\",\"contacts\",\"tags\"\n\"102\",\"Alice Johnson\",\"{\"\"profession\"\": \"\"Engineer\"\", \"\"experience\"\": 5}\",\"{\"\"phone\"\": \"\"555-1234\"\", \"\"email\"\": \"\"alice.j@example.com\"\"}\",\"[\"\"team lead\"\", \"\"mentor\"\"]\"\n\"205\",\"Bob Smith\",\"{\"\"profession\"\": \"\"Designer\"\", \"\"experience\"\": 8}\",\"{\"\"phone\"\": \"\"555-5678\"\", \"\"email\"\": \"\"bob.smith@example.com\"\"}\",\"[\"\"creative\"\", \"\"collaborator\"\"]\"\n\"309\",\"Carol White\",\"{\"\"profession\"\": \"\"Manager\"\", \"\"experience\"\": 10}\",\"{\"\"phone\"\": \"\"555-9012\"\", \"\"email\"\": \"\"carol.white@example.com\"\"}\",\"[\"\"strategic\"\", \"\"leader\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020515_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows",
                                "rows[*][id]",
                                "rows[*][name]",
                                "rows[*][attributes]",
                                "rows[*][attributes][profession]",
                                "rows[*][attributes][experience]",
                                "rows[*][contacts]",
                                "rows[*][contacts][phone]",
                                "rows[*][contacts][email]",
                                "rows[*][tags]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nUserID,Name,Email,Roles,Preferences,PurchaseHistory\n1,John Doe,john.doe@example.com,\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"en\"\"}\",\"[{\"\"orderId\"\": 1001, \"\"item\"\": \"\"Laptop\"\", \"\"price\"\": 1200.00}, {\"\"orderId\"\": 1002, \"\"item\"\": \"\"Mouse\"\", \"\"price\"\": 25.50}]\"\n2,Jane Smith,jane.smith@example.com,\"viewer\",\"{\"\"theme\"\":\"\"light\"\",\"\"language\"\":\"\"fr\"\"}\",\"[{\"\"orderId\"\": 1003, \"\"item\"\": \"\"Tablet\"\", \"\"price\"\": 350.00}]\"\n3,Bob Johnson,bob.johnson@example.com,\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"es\"\"}\",\"[{\"\"orderId\"\": 1004, \"\"item\"\": \"\"Smartphone\"\", \"\"price\"\": 800.00}, {\"\"orderId\"\": 1005, \"\"item\"\": \"\"Charger\"\", \"\"price\"\": 20.00}]\"\n</code>",
            "feature_requirements": "• The output must be a JSON structure containing an array of objects, with each object representing a row from the CSV data.  \n• Each object must include keys corresponding to the CSV header values: UserID, Name, Email, Roles, Preferences, and PurchaseHistory.  \n• The UserID value should be maintained as a number.  \n• The Roles field must be converted into a list of strings by splitting the semicolon-delimited string.  \n• The Preferences field must be converted from its string representation into a nested JSON object containing its key-value pairs.  \n• The PurchaseHistory field must be converted into a list of JSON objects, with each object representing an individual order, and each order must include the keys orderId, item, and price.  \n• The price values in the PurchaseHistory objects should be represented as numbers.",
            "task_id": "020516",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][UserID]",
                "rows[*][Name]",
                "rows[*][Email]",
                "rows[*][Roles]",
                "rows[*][Preferences]",
                "rows[*][PurchaseHistory]",
                "rows[*][PurchaseHistory][*][orderId]",
                "rows[*][PurchaseHistory][*][item]",
                "rows[*][PurchaseHistory][*][price]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020516_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nUserID,Name,Email,Roles,Preferences,PurchaseHistory\n1,John Doe,john.doe@example.com,\"admin;editor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"en\"\"}\",\"[{\"\"orderId\"\": 1001, \"\"item\"\": \"\"Laptop\"\", \"\"price\"\": 1200.00}, {\"\"orderId\"\": 1002, \"\"item\"\": \"\"Mouse\"\", \"\"price\"\": 25.50}]\"\n2,Jane Smith,jane.smith@example.com,\"viewer\",\"{\"\"theme\"\":\"\"light\"\",\"\"language\"\":\"\"fr\"\"}\",\"[{\"\"orderId\"\": 1003, \"\"item\"\": \"\"Tablet\"\", \"\"price\"\": 350.00}]\"\n3,Bob Johnson,bob.johnson@example.com,\"editor;contributor\",\"{\"\"theme\"\":\"\"dark\"\",\"\"language\"\":\"\"es\"\"}\",\"[{\"\"orderId\"\": 1004, \"\"item\"\": \"\"Smartphone\"\", \"\"price\"\": 800.00}, {\"\"orderId\"\": 1005, \"\"item\"\": \"\"Charger\"\", \"\"price\"\": 20.00}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020516_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][UserID]",
                                "rows[*][Name]",
                                "rows[*][Email]",
                                "rows[*][Roles]",
                                "rows[*][Preferences]",
                                "rows[*][PurchaseHistory]",
                                "rows[*][PurchaseHistory][*][orderId]",
                                "rows[*][PurchaseHistory][*][item]",
                                "rows[*][PurchaseHistory][*][price]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"id\",\"name\",\"age\",\"hobbies\",\"scores\",\"departments\"\n\"1\",\"Alice Johnson\",\"29\",\"reading;cycling;swimming\",\"88;92;85\",\"HR|Finance\"\n\"2\",\"Bob Smith\",\"35\",\"cooking;hiking;gardening\",\"90;87;93\",\"Sales|Marketing|R&D\"\n\"3\",\"Charlie Lee\",\"42\",\"photography;traveling;blogging\",\"85;80;86\",\"Operations|IT\"\n</code>",
            "feature_requirements": "• The JSON output must contain a top-level list or array where each element represents one CSV record.  \n• Each object in the array must include keys exactly matching the CSV headers: id, name, age, hobbies, scores, and departments.  \n• The id and age values should be converted to numerical values rather than remaining as strings.  \n• The hobbies field must be represented as a list of strings, with the individual hobbies extracted by splitting the CSV string on the semicolon (;) delimiter.  \n• The scores field must be represented as a list of numbers, with the individual scores extracted by splitting the CSV string on the semicolon (;) delimiter.  \n• The departments field must be represented as a list of strings, with the individual departments extracted by splitting the CSV string on the vertical bar (|) delimiter.  \n• The JSON output must include all records from the CSV input, ensuring that each record is fully transformed according to the specified field conversion rules.",
            "task_id": "020517",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[*].id",
                "[*].name",
                "[*].age",
                "[*].hobbies",
                "[*].scores",
                "[*].departments"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020517_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"id\",\"name\",\"age\",\"hobbies\",\"scores\",\"departments\"\n\"1\",\"Alice Johnson\",\"29\",\"reading;cycling;swimming\",\"88;92;85\",\"HR|Finance\"\n\"2\",\"Bob Smith\",\"35\",\"cooking;hiking;gardening\",\"90;87;93\",\"Sales|Marketing|R&D\"\n\"3\",\"Charlie Lee\",\"42\",\"photography;traveling;blogging\",\"85;80;86\",\"Operations|IT\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020517_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[*].id",
                                "[*].name",
                                "[*].age",
                                "[*].hobbies",
                                "[*].scores",
                                "[*].departments"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nSettingID,SettingName,Description,KeyFeatures,AvailableItems\n\"facility_01\",\"Subterranean Research Facility\",\"A hidden underground facility designed for confidential research and experiments.\",\"[Security, High-tech Labs, Isolation]\",\"[Lab Equipment, Specimen Containers, Access Cards]\"\n</code>",
            "feature_requirements": "• The output must use a structured data format where each CSV row is represented as an object within a list or array.  \n• Each object must contain keys that correspond exactly to the CSV header fields: \"SettingID\", \"SettingName\", \"Description\", \"KeyFeatures\", and \"AvailableItems\".  \n• The values for \"SettingID\", \"SettingName\", and \"Description\" must be represented as simple text strings.  \n• The \"KeyFeatures\" value must be represented as a list of strings with items such as \"Security\", \"High-tech Labs\", and \"Isolation\".  \n• The \"AvailableItems\" value must be represented as a list of strings with items such as \"Lab Equipment\", \"Specimen Containers\", and \"Access Cards\".  \n• The conversion must accurately reflect the data order and grouping as defined in the CSV input.",
            "task_id": "020518",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][SettingID]",
                "rows[0][SettingName]",
                "rows[0][Description]",
                "rows[0][KeyFeatures]",
                "rows[0][AvailableItems]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020518_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nSettingID,SettingName,Description,KeyFeatures,AvailableItems\n\"facility_01\",\"Subterranean Research Facility\",\"A hidden underground facility designed for confidential research and experiments.\",\"[Security, High-tech Labs, Isolation]\",\"[Lab Equipment, Specimen Containers, Access Cards]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020518_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][SettingID]",
                                "rows[0][SettingName]",
                                "rows[0][Description]",
                                "rows[0][KeyFeatures]",
                                "rows[0][AvailableItems]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,tags,attributes,items\n1,Central Park,\"[\"\"recreation\"\",\"\"landmark\"\"]\",\"{\"\"area\"\": \"\"843 acres\"\", \"\"location\"\": \"\"NY\"\"}\",\"[{\"\"itemId\"\":101, \"\"name\"\":\"\"Bench\"\", \"\"position\"\":\"\"north\"\"}, {\"\"itemId\"\":102, \"\"name\"\":\"\"Fountain\"\", \"\"position\"\":\"\"center\"\"}]\"\n2,Sydney Opera House,\"[\"\"architecture\"\",\"\"history\"\"]\",\"{\"\"yearOpened\"\": \"\"1973\"\", \"\"location\"\": \"\"Sydney\"\"}\",\"[{\"\"itemId\"\":201, \"\"name\"\":\"\"Auditorium\"\", \"\"capacity\"\":\"\"2000\"\"}, {\"\"itemId\"\":202, \"\"name\"\":\"\"Roof\"\", \"\"purpose\"\":\"\"view\"\"}]\"\n3,Tokyo Tower,\"[\"\"landmark\"\",\"\"observation\"\"]\",\"{\"\"height\"\": \"\"333m\"\", \"\"location\"\": \"\"Tokyo\"\"}\",\"[{\"\"itemId\"\":301, \"\"name\"\":\"\"Observation Deck\"\", \"\"floors\"\":\"\"2\"\"}, {\"\"itemId\"\":302, \"\"name\"\":\"\"Gift Shop\"\", \"\"items\"\":\"\"souvenirs\"\"}]\"\n</code>",
            "feature_requirements": "• The output must be a JSON array containing an object for each row in the CSV file.  \n• Each object must have the keys \"id\", \"name\", \"tags\", \"attributes\", and \"items\".  \n• The \"id\" key must have a numeric value corresponding to the CSV id field.  \n• The \"name\" key must have a string value corresponding to the CSV name field.  \n• The \"tags\" key must contain an array of strings parsed from the CSV tags field.  \n• The \"attributes\" key must contain an object with key-value pairs parsed from the CSV attributes field.  \n• The \"items\" key must contain an array of objects, with each object being parsed from the CSV items field.  \n• Each item object in the \"items\" array must include keys such as \"itemId\", \"name\", and other properties (like \"position\", \"capacity\", or \"purpose\") with appropriate data types.",
            "task_id": "020519",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[i][id]",
                "rows[i][name]",
                "rows[i][tags]",
                "rows[i][attributes]",
                "rows[i][items]",
                "rows[i][items][j][itemId]",
                "rows[i][items][j][name]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020519_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nid,name,tags,attributes,items\n1,Central Park,\"[\"\"recreation\"\",\"\"landmark\"\"]\",\"{\"\"area\"\": \"\"843 acres\"\", \"\"location\"\": \"\"NY\"\"}\",\"[{\"\"itemId\"\":101, \"\"name\"\":\"\"Bench\"\", \"\"position\"\":\"\"north\"\"}, {\"\"itemId\"\":102, \"\"name\"\":\"\"Fountain\"\", \"\"position\"\":\"\"center\"\"}]\"\n2,Sydney Opera House,\"[\"\"architecture\"\",\"\"history\"\"]\",\"{\"\"yearOpened\"\": \"\"1973\"\", \"\"location\"\": \"\"Sydney\"\"}\",\"[{\"\"itemId\"\":201, \"\"name\"\":\"\"Auditorium\"\", \"\"capacity\"\":\"\"2000\"\"}, {\"\"itemId\"\":202, \"\"name\"\":\"\"Roof\"\", \"\"purpose\"\":\"\"view\"\"}]\"\n3,Tokyo Tower,\"[\"\"landmark\"\",\"\"observation\"\"]\",\"{\"\"height\"\": \"\"333m\"\", \"\"location\"\": \"\"Tokyo\"\"}\",\"[{\"\"itemId\"\":301, \"\"name\"\":\"\"Observation Deck\"\", \"\"floors\"\":\"\"2\"\"}, {\"\"itemId\"\":302, \"\"name\"\":\"\"Gift Shop\"\", \"\"items\"\":\"\"souvenirs\"\"}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020519_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[i][id]",
                                "rows[i][name]",
                                "rows[i][tags]",
                                "rows[i][attributes]",
                                "rows[i][items]",
                                "rows[i][items][j][itemId]",
                                "rows[i][items][j][name]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nEmployeeID,EmployeeName,Department,Skills,Projects\n1001,John Doe,Engineering,\"[\"\"Python\"\",\"\"C++\"\",\"\"Data Analysis\"\"]\",\"{\"\"ongoing\"\": [\"\"Project A\"\",\"\"Project B\"\"], \"\"completed\"\": [\"\"Project X\"\"]}\"\n1002,Jane Smith,Marketing,\"[\"\"SEO\"\",\"\"Content Writing\"\"]\",\"{\"\"ongoing\"\": [\"\"Project C\"\"], \"\"completed\"\": [\"\"Project Y\"\",\"\"Project Z\"\"]}\"\n1003,Alice Johnson,Finance,\"[\"\"Excel\"\",\"\"Budgeting\"\",\"\"Forecasting\"\"]\",\"{\"\"ongoing\"\": [], \"\"completed\"\": [\"\"Project W\"\"]}\"\n</code>",
            "feature_requirements": "• The JSON output must be structured as an array (or list) of employee objects.  \n• Each employee object must include exactly five keys: EmployeeID, EmployeeName, Department, Skills, and Projects.  \n• The EmployeeID must be represented as a number, reflecting the numeric value from the CSV.  \n• The EmployeeName and Department must be represented as strings.  \n• The Skills must be represented as a list of strings, exactly matching the CSV values for skills.  \n• The Projects must be represented as an object containing two keys: \"ongoing\" and \"completed\".  \n• Within the Projects object, both \"ongoing\" and \"completed\" must store lists of strings corresponding to the CSV project data.  \n• Each key and corresponding value must reflect the data provided in each CSV row accurately and in a verifiable JSON structure.",
            "task_id": "020520",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[*][EmployeeID]",
                "[*][EmployeeName]",
                "[*][Department]",
                "[*][Skills]",
                "[*][Projects]",
                "[*][Projects][ongoing]",
                "[*][Projects][completed]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020520_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nEmployeeID,EmployeeName,Department,Skills,Projects\n1001,John Doe,Engineering,\"[\"\"Python\"\",\"\"C++\"\",\"\"Data Analysis\"\"]\",\"{\"\"ongoing\"\": [\"\"Project A\"\",\"\"Project B\"\"], \"\"completed\"\": [\"\"Project X\"\"]}\"\n1002,Jane Smith,Marketing,\"[\"\"SEO\"\",\"\"Content Writing\"\"]\",\"{\"\"ongoing\"\": [\"\"Project C\"\"], \"\"completed\"\": [\"\"Project Y\"\",\"\"Project Z\"\"]}\"\n1003,Alice Johnson,Finance,\"[\"\"Excel\"\",\"\"Budgeting\"\",\"\"Forecasting\"\"]\",\"{\"\"ongoing\"\": [], \"\"completed\"\": [\"\"Project W\"\"]}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020520_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[*][EmployeeID]",
                                "[*][EmployeeName]",
                                "[*][Department]",
                                "[*][Skills]",
                                "[*][Projects]",
                                "[*][Projects][ongoing]",
                                "[*][Projects][completed]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nRecordID,Name,Categories,Details,Parameters\n1,Widget,\"Electronics;Tools;Home\",\"{\"\"manufacturer\"\":\"\"Acme Inc\"\",\"\"release_year\"\":2021}\",\"size:small|weight:1.2kg|color:red\"\n2,Gadget,\"Electronics;Innovations\",\"{\"\"manufacturer\"\":\"\"Beta Tech\"\",\"\"release_year\"\":2020}\",\"size:medium|weight:0.8kg|color:blue\"\n3,Doohickey,\"Tools;Outdoor;Utility\",\"{\"\"manufacturer\"\":\"\"Gamma Goods\"\",\"\"release_year\"\":2019}\",\"size:large|weight:2.5kg|color:green\"\n</code>",
            "feature_requirements": "• The JSON output must represent the CSV data as an array of record objects, each corresponding to a row in the CSV.\n• Each record object must contain the following keys: \"RecordID\", \"Name\", \"Categories\", \"Details\", and \"Parameters\".\n• The \"RecordID\" key must have a numeric value corresponding to the CSV row identifier.\n• The \"Name\" key must have a string value as provided in the CSV.\n• The \"Categories\" key must contain a list of strings generated by splitting the CSV input on semicolons.\n• The \"Details\" key must be represented as a nested object, parsed from a JSON-like string, including keys such as \"manufacturer\" (string) and \"release_year\" (numeric).\n• The \"Parameters\" key must be represented as a nested object, created by splitting the CSV field on vertical bars and then splitting each segment on a colon to form key-value pairs.\n• The overall JSON output must preserve the ordering of records as they appear in the CSV data.",
            "task_id": "020521",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows",
                "rows[i][RecordID]",
                "rows[i][Name]",
                "rows[i][Categories]",
                "rows[i][Details]",
                "rows[i][Details][manufacturer]",
                "rows[i][Details][release_year]",
                "rows[i][Parameters]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020521_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nRecordID,Name,Categories,Details,Parameters\n1,Widget,\"Electronics;Tools;Home\",\"{\"\"manufacturer\"\":\"\"Acme Inc\"\",\"\"release_year\"\":2021}\",\"size:small|weight:1.2kg|color:red\"\n2,Gadget,\"Electronics;Innovations\",\"{\"\"manufacturer\"\":\"\"Beta Tech\"\",\"\"release_year\"\":2020}\",\"size:medium|weight:0.8kg|color:blue\"\n3,Doohickey,\"Tools;Outdoor;Utility\",\"{\"\"manufacturer\"\":\"\"Gamma Goods\"\",\"\"release_year\"\":2019}\",\"size:large|weight:2.5kg|color:green\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020521_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows",
                                "rows[i][RecordID]",
                                "rows[i][Name]",
                                "rows[i][Categories]",
                                "rows[i][Details]",
                                "rows[i][Details][manufacturer]",
                                "rows[i][Details][release_year]",
                                "rows[i][Parameters]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nRecordID,DeviceName,Location,Metrics,EventTimestamps,Alerts\n101,ThermostatA,Living Room,\"temperature:22.8;humidity:40;pressure:1010\",\"2023-10-04T08:00:00,2023-10-04T12:00:00\",\"battery_low:False,maintenance_required:False\"\n102,AirQualitySensorB,Bedroom,\"CO2:800;VOC:0.45;humidity:38\",\"2023-10-04T09:15:00,2023-10-04T14:15:00\",\"co2_alert:True\"\n103,SecurityCamC,Front Door,\"motion_detected:True;recording:True\",\"2023-10-04T10:30:00\",\"intruder_alert:True,recording:True\"\n</code>",
            "feature_requirements": "• The output must be valid JSON structured as a list (array) of records.  \n• Each record must be represented as a JSON object with keys corresponding to the CSV headers: RecordID, DeviceName, Location, Metrics, EventTimestamps, and Alerts.  \n• The RecordID field must be represented as a numeric value.  \n• The DeviceName and Location fields must be represented as strings.  \n• The Metrics field must be transformed into a JSON object by splitting the semicolon-separated key–value pairs; each key must retain its name and each value must be parsed into an appropriate type (e.g., numeric when applicable).  \n• The EventTimestamps field must be converted into a JSON array by splitting the comma-separated list of timestamp strings, ensuring each timestamp remains in ISO 8601 format.  \n• The Alerts field must be transformed into a JSON object by parsing the comma-separated key–value pairs; the alert values must be converted to boolean types (true or false) where applicable.",
            "task_id": "020522",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][RecordID]",
                "rows[*][DeviceName]",
                "rows[*][Location]",
                "rows[*][Metrics]",
                "rows[*][EventTimestamps]",
                "rows[*][Alerts]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020522_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\nRecordID,DeviceName,Location,Metrics,EventTimestamps,Alerts\n101,ThermostatA,Living Room,\"temperature:22.8;humidity:40;pressure:1010\",\"2023-10-04T08:00:00,2023-10-04T12:00:00\",\"battery_low:False,maintenance_required:False\"\n102,AirQualitySensorB,Bedroom,\"CO2:800;VOC:0.45;humidity:38\",\"2023-10-04T09:15:00,2023-10-04T14:15:00\",\"co2_alert:True\"\n103,SecurityCamC,Front Door,\"motion_detected:True;recording:True\",\"2023-10-04T10:30:00\",\"intruder_alert:True,recording:True\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020522_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][RecordID]",
                                "rows[*][DeviceName]",
                                "rows[*][Location]",
                                "rows[*][Metrics]",
                                "rows[*][EventTimestamps]",
                                "rows[*][Alerts]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"MissionID\",\"MissionName\",\"LaunchDate\",\"CrewMembers\",\"MissionObjectives\",\"Instrumentation\"\n\"Apollo11\",\"Lunar Landing\",\"1969-07-16\",\"Neil Armstrong;Buzz Aldrin;Michael Collins\",\"Surface Exploration;Sample Collection;Orbital Survey\",\"Camera:2;Radar:1;Spectrometer:1\"\n\"Voyager1\",\"Interstellar Probe\",\"1977-09-05\",\"Carl Sagan;Ann Druyan\",\"Planetary Flyby;Interstellar Medium Study\",\"Plasma Sensor:3;Cosmic Ray Detector:2\"\n</code>",
            "feature_requirements": "• The output must represent a JSON array where each element is an object representing a single mission.  \n• Each mission object must include the keys: \"MissionID\", \"MissionName\", \"LaunchDate\", \"CrewMembers\", \"MissionObjectives\", and \"Instrumentation\".  \n• The value for \"MissionID\", \"MissionName\", and \"LaunchDate\" must be extracted as individual strings from the CSV.  \n• The \"CrewMembers\" field must be converted into a list of strings by splitting the CSV field on the semicolon delimiter.  \n• The \"MissionObjectives\" field must be converted into a list of strings by splitting the CSV field on the semicolon delimiter.  \n• The \"Instrumentation\" field must be transformed such that it reflects a mapping (or object) where each instrument name is a key and its corresponding quantity (extracted from the CSV using the colon delimiter) is the value.",
            "task_id": "020523",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "[i][MissionID]",
                "[i][MissionName]",
                "[i][LaunchDate]",
                "[i][CrewMembers]",
                "[i][MissionObjectives]",
                "[i][Instrumentation]",
                "[i][Instrumentation][<instrumentName>]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020523_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"MissionID\",\"MissionName\",\"LaunchDate\",\"CrewMembers\",\"MissionObjectives\",\"Instrumentation\"\n\"Apollo11\",\"Lunar Landing\",\"1969-07-16\",\"Neil Armstrong;Buzz Aldrin;Michael Collins\",\"Surface Exploration;Sample Collection;Orbital Survey\",\"Camera:2;Radar:1;Spectrometer:1\"\n\"Voyager1\",\"Interstellar Probe\",\"1977-09-05\",\"Carl Sagan;Ann Druyan\",\"Planetary Flyby;Interstellar Medium Study\",\"Plasma Sensor:3;Cosmic Ray Detector:2\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020523_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "[i][MissionID]",
                                "[i][MissionName]",
                                "[i][LaunchDate]",
                                "[i][CrewMembers]",
                                "[i][MissionObjectives]",
                                "[i][Instrumentation]",
                                "[i][Instrumentation][<instrumentName>]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"EntityID\",\"EntityName\",\"Details\",\"Roles\",\"Preferences\"\n\"001\",\"Acme Corp\",\"{\"\"Address\"\":\"\"123 Main St, Anytown\"\",\"\"ContactNumber\"\":\"\"123-456-7890\"\"}\",\"[\"\"admin\"\",\"\"editor\"\"]\",\"{\"\"Theme\"\":\"\"Modern\"\",\"\"Notifications\"\":[\"\"email\"\",\"\"sms\"\"]}\"\n\"002\",\"Beta LLC\",\"{\"\"Address\"\":\"\"456 Oak Ave, Othertown\"\",\"\"ContactNumber\"\":\"\"987-654-3210\"\"}\",\"[\"\"viewer\"\"]\",\"{\"\"Theme\"\":\"\"Minimal\"\",\"\"Notifications\"\":[\"\"email\"\"]}\"\n\"003\",\"Delta Inc\",\"{\"\"Address\"\":\"\"789 Pine Rd, Newcity\"\",\"\"ContactNumber\"\":\"\"555-123-4567\"\"}\",\"[\"\"editor\"\",\"\"contributor\"\"]\",\"{\"\"Theme\"\":\"\"Classic\"\",\"\"Notifications\"\":[\"\"push\"\",\"\"email\"\"]}\"\n</code>",
            "feature_requirements": "• The output must be a JSON structure that contains an array with one object for each CSV row.  \n• Each object in the array must include keys: \"EntityID\", \"EntityName\", \"Details\", \"Roles\", and \"Preferences\".  \n• The \"EntityID\" and \"EntityName\" keys must retain their string values as provided in the CSV rows.  \n• The \"Details\" key must contain a nested JSON object with keys \"Address\" and \"ContactNumber\", reflecting the respective values from the CSV.  \n• The \"Roles\" key must contain an array of strings, corresponding to the list items in the CSV for that field.  \n• The \"Preferences\" key must contain a nested JSON object with at least two keys: \"Theme\" (a string) and \"Notifications\" (an array of strings).  \n• The values in all keys must exactly match the data from the corresponding CSV fields, preserving the nested structures embedded in the CSV.",
            "task_id": "020524",
            "task_name": "Convert CSV to JSON",
            "input_type": "CSV",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][EntityID]",
                "rows[0][EntityName]",
                "rows[0][Details][Address]",
                "rows[0][Details][ContactNumber]",
                "rows[0][Roles]",
                "rows[0][Preferences][Theme]",
                "rows[0][Preferences][Notifications]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "020524_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following CSV code to JSON code.\n\n<code>\n\"EntityID\",\"EntityName\",\"Details\",\"Roles\",\"Preferences\"\n\"001\",\"Acme Corp\",\"{\"\"Address\"\":\"\"123 Main St, Anytown\"\",\"\"ContactNumber\"\":\"\"123-456-7890\"\"}\",\"[\"\"admin\"\",\"\"editor\"\"]\",\"{\"\"Theme\"\":\"\"Modern\"\",\"\"Notifications\"\":[\"\"email\"\",\"\"sms\"\"]}\"\n\"002\",\"Beta LLC\",\"{\"\"Address\"\":\"\"456 Oak Ave, Othertown\"\",\"\"ContactNumber\"\":\"\"987-654-3210\"\"}\",\"[\"\"viewer\"\"]\",\"{\"\"Theme\"\":\"\"Minimal\"\",\"\"Notifications\"\":[\"\"email\"\"]}\"\n\"003\",\"Delta Inc\",\"{\"\"Address\"\":\"\"789 Pine Rd, Newcity\"\",\"\"ContactNumber\"\":\"\"555-123-4567\"\"}\",\"[\"\"editor\"\",\"\"contributor\"\"]\",\"{\"\"Theme\"\":\"\"Classic\"\",\"\"Notifications\"\":[\"\"push\"\",\"\"email\"\"]}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "020524_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][EntityID]",
                                "rows[0][EntityName]",
                                "rows[0][Details][Address]",
                                "rows[0][Details][ContactNumber]",
                                "rows[0][Roles]",
                                "rows[0][Preferences][Theme]",
                                "rows[0][Preferences][Notifications]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]