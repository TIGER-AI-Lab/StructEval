[
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a brief narrative of a historical event into an HTML structure.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Historical Event Overview\".\n- Display the original narrative inside a <p> element immediately after the main title.\n- Insert a horizontal line using the <hr> element directly following the narrative.\n- Add a secondary section using an <h2> element that states \"Event Timeline\".\n- Present an ordered list using an <ol> element containing exactly 4 items: \"Start\", \"Peak\", \"Decline\", and \"Resolution\", with each item within its own <li> element in that order.\n- Include another section titled \"Key Figures\" using an <h2> element.\n- Add an unordered list using a <ul> element with exactly 3 list items naming notable historical figures, ensuring each name is enclosed in an <li> element.\n- Conclude the HTML document with a <footer> element that includes the text \"End of Event Summary\".",
            "task_id": "000430",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title text displayed at the top of the page?",
                "What text is contained in the paragraph immediately following the main title?",
                "What visual element follows the narrative text?",
                "What is the title of the section that introduces the ordered list?",
                "How many items does the ordered list contain and what are they?",
                "What is the title of the section that features notable historical figures?",
                "How many items appear in the unordered list under 'Key Figures'?",
                "What text is shown in the footer of the document?"
            ],
            "VQA_answers": [
                "Historical Event Overview",
                "The original narrative of the historical event.",
                "A horizontal line.",
                "Event Timeline",
                "4 items: Start, Peak, Decline, Resolution",
                "Key Figures",
                "3 items",
                "End of Event Summary"
            ],
            "raw_output_metric": [
                "<h1>",
                "Historical Event Overview",
                "<p>",
                "<hr>",
                "<h2>",
                "Event Timeline",
                "<ol>",
                "Start",
                "Peak",
                "Decline",
                "Resolution",
                "<h2>",
                "Key Figures",
                "<ul>",
                "<footer>",
                "End of Event Summary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000430_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a brief narrative of a historical event into an HTML structure.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Historical Event Overview\".\n- Display the original narrative inside a <p> element immediately after the main title.\n- Insert a horizontal line using the <hr> element directly following the narrative.\n- Add a secondary section using an <h2> element that states \"Event Timeline\".\n- Present an ordered list using an <ol> element containing exactly 4 items: \"Start\", \"Peak\", \"Decline\", and \"Resolution\", with each item within its own <li> element in that order.\n- Include another section titled \"Key Figures\" using an <h2> element.\n- Add an unordered list using a <ul> element with exactly 3 list items naming notable historical figures, ensuring each name is enclosed in an <li> element.\n- Conclude the HTML document with a <footer> element that includes the text \"End of Event Summary\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000430_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>",
                                "Historical Event Overview",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "Event Timeline",
                                "<ol>",
                                "Start",
                                "Peak",
                                "Decline",
                                "Resolution",
                                "<h2>",
                                "Key Figures",
                                "<ul>",
                                "<footer>",
                                "End of Event Summary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000430_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000430_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title text displayed at the top of the page?",
                                "What text is contained in the paragraph immediately following the main title?",
                                "What visual element follows the narrative text?",
                                "What is the title of the section that introduces the ordered list?",
                                "How many items does the ordered list contain and what are they?",
                                "What is the title of the section that features notable historical figures?",
                                "How many items appear in the unordered list under 'Key Figures'?",
                                "What text is shown in the footer of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000430_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Historical Event Overview",
                                "The original narrative of the historical event.",
                                "A horizontal line.",
                                "Event Timeline",
                                "4 items: Start, Peak, Decline, Resolution",
                                "Key Figures",
                                "3 items",
                                "End of Event Summary"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate an HTML document that structures a brief description of a coastal travel experience.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Coastal Journey\".\n- Place the original travel description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header with an <h2> element containing the text \"Highlights\".\n- Present an ordered list using an <ol> element with exactly three items: \"Sunrise at the beach\", \"Sandcastle building\", and \"Local cuisine tasting\" in that specific order.\n- Conclude the document with a <footer> element that includes the text \"Travel log concludes here\".",
            "task_id": "000431",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title text displayed at the top of the page?",
                "Which element directly follows the title?",
                "What visual element is seen immediately after the travel description paragraph?",
                "What is the text of the section header after the horizontal line?",
                "How many items are present in the ordered list?",
                "What is the text of the first item in the ordered list?",
                "What is the text of the second item in the ordered list?",
                "What is the text of the third item in the ordered list?",
                "What text is shown within the footer of the document?"
            ],
            "VQA_answers": [
                "Coastal Journey",
                "Paragraph containing the travel description",
                "Horizontal line",
                "Highlights",
                "3",
                "Sunrise at the beach",
                "Sandcastle building",
                "Local cuisine tasting",
                "Travel log concludes here"
            ],
            "raw_output_metric": [
                "<h1>Coastal Journey</h1>",
                "<p>",
                "</p>",
                "<hr>",
                "<h2>Highlights</h2>",
                "<ol>",
                "<li>Sunrise at the beach</li>",
                "<li>Sandcastle building</li>",
                "<li>Local cuisine tasting</li>",
                "</ol>",
                "<footer>Travel log concludes here</footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000431_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate an HTML document that structures a brief description of a coastal travel experience.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Coastal Journey\".\n- Place the original travel description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header with an <h2> element containing the text \"Highlights\".\n- Present an ordered list using an <ol> element with exactly three items: \"Sunrise at the beach\", \"Sandcastle building\", and \"Local cuisine tasting\" in that specific order.\n- Conclude the document with a <footer> element that includes the text \"Travel log concludes here\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000431_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>Coastal Journey</h1>",
                                "<p>",
                                "</p>",
                                "<hr>",
                                "<h2>Highlights</h2>",
                                "<ol>",
                                "<li>Sunrise at the beach</li>",
                                "<li>Sandcastle building</li>",
                                "<li>Local cuisine tasting</li>",
                                "</ol>",
                                "<footer>Travel log concludes here</footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000431_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000431_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title text displayed at the top of the page?",
                                "Which element directly follows the title?",
                                "What visual element is seen immediately after the travel description paragraph?",
                                "What is the text of the section header after the horizontal line?",
                                "How many items are present in the ordered list?",
                                "What is the text of the first item in the ordered list?",
                                "What is the text of the second item in the ordered list?",
                                "What is the text of the third item in the ordered list?",
                                "What text is shown within the footer of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000431_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Coastal Journey",
                                "Paragraph containing the travel description",
                                "Horizontal line",
                                "Highlights",
                                "3",
                                "Sunrise at the beach",
                                "Sandcastle building",
                                "Local cuisine tasting",
                                "Travel log concludes here"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nTransform a brief text describing a mythological creature into an HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mythical Creature\".\n- Display the original narrative inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header using an <h2> element with the text \"Legend Details\" placed after the horizontal line.\n- Create an unordered list using a <ul> element that contains exactly 3 list items in the following order: \"Origin\", \"Abilities\", and \"Habitat\", where each list item is wrapped in an <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"Narrative Complete\".",
            "task_id": "000432",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title displayed at the top of the document?",
                "What immediately follows the main title in the document?",
                "What element is visible right after the narrative paragraph?",
                "What section heading is displayed after the horizontal line?",
                "How many list items are displayed in the unordered list?",
                "What are the names of the list items in the unordered list?",
                "What text is shown at the bottom of the document in the footer?"
            ],
            "VQA_answers": [
                "Mythical Creature",
                "A paragraph containing the original narrative text",
                "A horizontal line",
                "Legend Details",
                "3",
                "Origin, Abilities, Habitat",
                "Narrative Complete"
            ],
            "raw_output_metric": [
                "Mythical Creature",
                "Legend Details",
                "Origin",
                "Abilities",
                "Habitat",
                "Narrative Complete",
                "<h1>",
                "</h1>",
                "<p>",
                "</p>",
                "<hr>",
                "<h2>",
                "</h2>",
                "<ul>",
                "</ul>",
                "<li>",
                "</li>",
                "<footer>",
                "</footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000432_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nTransform a brief text describing a mythological creature into an HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mythical Creature\".\n- Display the original narrative inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header using an <h2> element with the text \"Legend Details\" placed after the horizontal line.\n- Create an unordered list using a <ul> element that contains exactly 3 list items in the following order: \"Origin\", \"Abilities\", and \"Habitat\", where each list item is wrapped in an <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"Narrative Complete\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000432_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mythical Creature",
                                "Legend Details",
                                "Origin",
                                "Abilities",
                                "Habitat",
                                "Narrative Complete",
                                "<h1>",
                                "</h1>",
                                "<p>",
                                "</p>",
                                "<hr>",
                                "<h2>",
                                "</h2>",
                                "<ul>",
                                "</ul>",
                                "<li>",
                                "</li>",
                                "<footer>",
                                "</footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000432_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000432_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the document?",
                                "What immediately follows the main title in the document?",
                                "What element is visible right after the narrative paragraph?",
                                "What section heading is displayed after the horizontal line?",
                                "How many list items are displayed in the unordered list?",
                                "What are the names of the list items in the unordered list?",
                                "What text is shown at the bottom of the document in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000432_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mythical Creature",
                                "A paragraph containing the original narrative text",
                                "A horizontal line",
                                "Legend Details",
                                "3",
                                "Origin, Abilities, Habitat",
                                "Narrative Complete"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate a HTML page that details the history and features of a famous landmark.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Landmark Spotlight\".\n- Display a brief historical description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element directly after the historical description.\n- Create a subsection title using an <h2> element with the text \"Key Features\" placed below the horizontal line.\n- Display a numbered list within an <ol> element that contains exactly 4 items: \"Architectural Style\", \"Construction Date\", \"Cultural Significance\", and \"Visitor Information\".\n- Each list item must be wrapped in an <li> element and appear in the specified order.\n- Conclude the HTML document with a <footer> element that includes the text \"Information provided by the City Archives\".",
            "task_id": "000433",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title text displayed at the top of the page?",
                "What element immediately follows the main title?",
                "What element is used to separate the historical description from the rest of the content?",
                "What is the text of the subsection title under the horizontal line?",
                "How many list items are included in the numbered list?",
                "What are the four items displayed in the numbered list?",
                "What element concludes the HTML document?",
                "Which section in the document clearly introduces the features of the landmark?"
            ],
            "VQA_answers": [
                "Landmark Spotlight",
                "A paragraph element with a brief historical description",
                "A horizontal line",
                "Key Features",
                "4",
                "Architectural Style, Construction Date, Cultural Significance, Visitor Information",
                "A footer with the text 'Information provided by the City Archives'",
                "The section titled 'Key Features'"
            ],
            "raw_output_metric": [
                "Landmark Spotlight",
                "Key Features",
                "Architectural Style",
                "Construction Date",
                "Cultural Significance",
                "Visitor Information",
                "Information provided by the City Archives",
                "<h1>",
                "<p>",
                "<hr>",
                "<h2>",
                "<ol>",
                "<li>",
                "<footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000433_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate a HTML page that details the history and features of a famous landmark.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Landmark Spotlight\".\n- Display a brief historical description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element directly after the historical description.\n- Create a subsection title using an <h2> element with the text \"Key Features\" placed below the horizontal line.\n- Display a numbered list within an <ol> element that contains exactly 4 items: \"Architectural Style\", \"Construction Date\", \"Cultural Significance\", and \"Visitor Information\".\n- Each list item must be wrapped in an <li> element and appear in the specified order.\n- Conclude the HTML document with a <footer> element that includes the text \"Information provided by the City Archives\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000433_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Landmark Spotlight",
                                "Key Features",
                                "Architectural Style",
                                "Construction Date",
                                "Cultural Significance",
                                "Visitor Information",
                                "Information provided by the City Archives",
                                "<h1>",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "<ol>",
                                "<li>",
                                "<footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000433_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000433_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title text displayed at the top of the page?",
                                "What element immediately follows the main title?",
                                "What element is used to separate the historical description from the rest of the content?",
                                "What is the text of the subsection title under the horizontal line?",
                                "How many list items are included in the numbered list?",
                                "What are the four items displayed in the numbered list?",
                                "What element concludes the HTML document?",
                                "Which section in the document clearly introduces the features of the landmark?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000433_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Landmark Spotlight",
                                "A paragraph element with a brief historical description",
                                "A horizontal line",
                                "Key Features",
                                "4",
                                "Architectural Style, Construction Date, Cultural Significance, Visitor Information",
                                "A footer with the text 'Information provided by the City Archives'",
                                "The section titled 'Key Features'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a descriptive paragraph about a mythical library into a structured HTML document.\n\nFeature Requirements:\n- Begin with a title using an <h1> element containing the text \"Mythical Library\".\n- Immediately follow the title with a <p> element that contains the original descriptive paragraph.\n- Insert a horizontal rule using the <hr> element right after the paragraph.\n- Add a subsection header with an <h2> element that displays the text \"Library Sections\".\n- Create an ordered list using an <ol> element containing exactly 4 items: \"Ancient Manuscripts\", \"Enchanted Scrolls\", \"Magical Artifacts\", and \"Scribe Studios\", each within an <li> element.\n- After the ordered list, include an <h3> element with the text \"Visit Information\".\n- Provide a <p> element that specifies visiting hours in the format \"Open: 9 AM - 5 PM\".\n- Immediately after, add a <small> element containing the text \"Public Access\" within the same paragraph.\n- End the HTML document with a <footer> element that contains the text \"Footer: Library Info Complete\".",
            "task_id": "000434",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main page title displayed at the top?",
                "What element immediately follows the title?",
                "How many items are in the ordered list under 'Library Sections'?",
                "What text is used for the subheader that introduces the library sections?",
                "List the items that appear in the ordered list.",
                "What is the header text for the visit information section?",
                "What visiting hours are shown in the visit information paragraph?",
                "What is the small text label shown alongside the visiting hours?",
                "What content is included in the footer at the bottom of the page?"
            ],
            "VQA_answers": [
                "Mythical Library",
                "A paragraph containing the descriptive text of the mythical library",
                "4",
                "Library Sections",
                "Ancient Manuscripts, Enchanted Scrolls, Magical Artifacts, Scribe Studios",
                "Visit Information",
                "Open: 9 AM - 5 PM",
                "Public Access",
                "Footer: Library Info Complete"
            ],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000434_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a descriptive paragraph about a mythical library into a structured HTML document.\n\nFeature Requirements:\n- Begin with a title using an <h1> element containing the text \"Mythical Library\".\n- Immediately follow the title with a <p> element that contains the original descriptive paragraph.\n- Insert a horizontal rule using the <hr> element right after the paragraph.\n- Add a subsection header with an <h2> element that displays the text \"Library Sections\".\n- Create an ordered list using an <ol> element containing exactly 4 items: \"Ancient Manuscripts\", \"Enchanted Scrolls\", \"Magical Artifacts\", and \"Scribe Studios\", each within an <li> element.\n- After the ordered list, include an <h3> element with the text \"Visit Information\".\n- Provide a <p> element that specifies visiting hours in the format \"Open: 9 AM - 5 PM\".\n- Immediately after, add a <small> element containing the text \"Public Access\" within the same paragraph.\n- End the HTML document with a <footer> element that contains the text \"Footer: Library Info Complete\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000434_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000434_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000434_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main page title displayed at the top?",
                                "What element immediately follows the title?",
                                "How many items are in the ordered list under 'Library Sections'?",
                                "What text is used for the subheader that introduces the library sections?",
                                "List the items that appear in the ordered list.",
                                "What is the header text for the visit information section?",
                                "What visiting hours are shown in the visit information paragraph?",
                                "What is the small text label shown alongside the visiting hours?",
                                "What content is included in the footer at the bottom of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000434_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mythical Library",
                                "A paragraph containing the descriptive text of the mythical library",
                                "4",
                                "Library Sections",
                                "Ancient Manuscripts, Enchanted Scrolls, Magical Artifacts, Scribe Studios",
                                "Visit Information",
                                "Open: 9 AM - 5 PM",
                                "Public Access",
                                "Footer: Library Info Complete"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure for a short narrative describing an ancient medieval legend.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Medieval Legend\".\n- Present the provided narrative inside a <p> element immediately below the title.\n- Insert a horizontal divider using the <hr> element directly after the narrative.\n- Add a section heading using an <h2> element with the text \"Story Elements\".\n- Create an ordered list with an <ol> element containing exactly three items: \"Hero\", \"Quest\", \"Outcome\" in that order.\n- Wrap the narrative part within <body> tags.\n- End the HTML with a <footer> element containing the text \"Legend End\".",
            "task_id": "000435",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "Which element contains the narrative text just below the title?",
                "What element is used as a divider after the narrative?",
                "What is the text of the section heading following the narrative?",
                "How many items are in the ordered list under the Story Elements section?",
                "What are the three items listed in the ordered list?",
                "What text is shown in the footer at the end of the page?"
            ],
            "VQA_answers": [
                "Medieval Legend",
                "Paragraph element (p)",
                "hr element",
                "Story Elements",
                "3",
                "Hero, Quest, Outcome",
                "Legend End"
            ],
            "raw_output_metric": [
                "Medieval Legend",
                "Story Elements",
                "Hero",
                "Quest",
                "Outcome",
                "Legend End",
                "<body>",
                "</body>",
                "<h1>",
                "</h1>",
                "<p>",
                "</p>",
                "<hr>",
                "<h2>",
                "</h2>",
                "<ol>",
                "</ol>",
                "<li>Hero</li>",
                "<li>Quest</li>",
                "<li>Outcome</li>",
                "<footer>",
                "</footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000435_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate an HTML structure for a short narrative describing an ancient medieval legend.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Medieval Legend\".\n- Present the provided narrative inside a <p> element immediately below the title.\n- Insert a horizontal divider using the <hr> element directly after the narrative.\n- Add a section heading using an <h2> element with the text \"Story Elements\".\n- Create an ordered list with an <ol> element containing exactly three items: \"Hero\", \"Quest\", \"Outcome\" in that order.\n- Wrap the narrative part within <body> tags.\n- End the HTML with a <footer> element containing the text \"Legend End\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000435_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Medieval Legend",
                                "Story Elements",
                                "Hero",
                                "Quest",
                                "Outcome",
                                "Legend End",
                                "<body>",
                                "</body>",
                                "<h1>",
                                "</h1>",
                                "<p>",
                                "</p>",
                                "<hr>",
                                "<h2>",
                                "</h2>",
                                "<ol>",
                                "</ol>",
                                "<li>Hero</li>",
                                "<li>Quest</li>",
                                "<li>Outcome</li>",
                                "<footer>",
                                "</footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000435_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000435_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "Which element contains the narrative text just below the title?",
                                "What element is used as a divider after the narrative?",
                                "What is the text of the section heading following the narrative?",
                                "How many items are in the ordered list under the Story Elements section?",
                                "What are the three items listed in the ordered list?",
                                "What text is shown in the footer at the end of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000435_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Medieval Legend",
                                "Paragraph element (p)",
                                "hr element",
                                "Story Elements",
                                "3",
                                "Hero, Quest, Outcome",
                                "Legend End"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic building into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Historic Building Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph for separation.\n- Insert a subtitle using an <h2> element with the text \"Architectural Details\".\n- Create an unordered list with exactly 4 items in the following order: \"Roof\", \"Facade\", \"Interior\", \"Surroundings\". Each item should be wrapped in an <li> element.\n- End the HTML document with a <footer> element containing the text \"Information Complete\".\n- Ensure that every element is placed sequentially as specified to maintain a clear document structure.",
            "task_id": "000436",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text of the main title at the top of the page?",
                "What element contains the paragraph describing the historic building?",
                "Which element is placed immediately below the paragraph to separate content?",
                "What is the subtitle text displayed after the horizontal line?",
                "How many items are in the unordered list?",
                "What are the four list items in order?",
                "What text appears in the footer at the end of the document?"
            ],
            "VQA_answers": [
                "Historic Building Overview",
                "p element",
                "hr element",
                "Architectural Details",
                "4",
                "Roof, Facade, Interior, Surroundings",
                "Information Complete"
            ],
            "raw_output_metric": [
                "Historic Building Overview",
                "Architectural Details",
                "Roof",
                "Facade",
                "Interior",
                "Surroundings",
                "Information Complete",
                "<h1>",
                "<p>",
                "<hr>",
                "<h2>",
                "<ul>",
                "<li>",
                "</li>",
                "</ul>",
                "<footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000436_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic building into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Historic Building Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph for separation.\n- Insert a subtitle using an <h2> element with the text \"Architectural Details\".\n- Create an unordered list with exactly 4 items in the following order: \"Roof\", \"Facade\", \"Interior\", \"Surroundings\". Each item should be wrapped in an <li> element.\n- End the HTML document with a <footer> element containing the text \"Information Complete\".\n- Ensure that every element is placed sequentially as specified to maintain a clear document structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000436_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Historic Building Overview",
                                "Architectural Details",
                                "Roof",
                                "Facade",
                                "Interior",
                                "Surroundings",
                                "Information Complete",
                                "<h1>",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "<ul>",
                                "<li>",
                                "</li>",
                                "</ul>",
                                "<footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000436_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000436_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the main title at the top of the page?",
                                "What element contains the paragraph describing the historic building?",
                                "Which element is placed immediately below the paragraph to separate content?",
                                "What is the subtitle text displayed after the horizontal line?",
                                "How many items are in the unordered list?",
                                "What are the four list items in order?",
                                "What text appears in the footer at the end of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000436_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Historic Building Overview",
                                "p element",
                                "hr element",
                                "Architectural Details",
                                "4",
                                "Roof, Facade, Interior, Surroundings",
                                "Information Complete"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a vintage car into an HTML structure.\n\nFeature Requirements:\n- Start with a title using an <h1> element containing the text \"Vintage Car Overview\".\n- Immediately follow the title with a <p> element that includes the car description text.\n- Insert an <hr> element directly after the paragraph to serve as a visual divider.\n- Add a sub-section with a title using an <h2> element that reads \"Technical Specifications\".\n- Create an ordered list (<ol>) containing exactly 4 items: \"Engine Type\", \"Transmission\", \"Fuel Efficiency\", and \"Top Speed\", each enclosed in an <li> element.\n- Include a separate <div> element with an id attribute set to \"additional-info\" containing a brief statement about the car's historical significance.\n- End the HTML with a <footer> element that contains the text \"End of Overview\".",
            "task_id": "000437",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What element immediately follows the main title?",
                "Which visual separator is used after the paragraph?",
                "What sub-title introduces the technical specifications section?",
                "How many items are included in the technical specifications list?",
                "Name one item listed in the technical specifications?",
                "What id is assigned to the division containing additional information?",
                "What text is shown in the footer section at the end of the page?"
            ],
            "VQA_answers": [
                "Vintage Car Overview",
                "A paragraph with the car description",
                "A horizontal line",
                "Technical Specifications",
                "4",
                "Engine Type",
                "additional-info",
                "End of Overview"
            ],
            "raw_output_metric": [
                "Vintage Car Overview",
                "Technical Specifications",
                "Engine Type",
                "Transmission",
                "Fuel Efficiency",
                "Top Speed",
                "additional-info",
                "End of Overview"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000437_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a vintage car into an HTML structure.\n\nFeature Requirements:\n- Start with a title using an <h1> element containing the text \"Vintage Car Overview\".\n- Immediately follow the title with a <p> element that includes the car description text.\n- Insert an <hr> element directly after the paragraph to serve as a visual divider.\n- Add a sub-section with a title using an <h2> element that reads \"Technical Specifications\".\n- Create an ordered list (<ol>) containing exactly 4 items: \"Engine Type\", \"Transmission\", \"Fuel Efficiency\", and \"Top Speed\", each enclosed in an <li> element.\n- Include a separate <div> element with an id attribute set to \"additional-info\" containing a brief statement about the car's historical significance.\n- End the HTML with a <footer> element that contains the text \"End of Overview\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000437_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Vintage Car Overview",
                                "Technical Specifications",
                                "Engine Type",
                                "Transmission",
                                "Fuel Efficiency",
                                "Top Speed",
                                "additional-info",
                                "End of Overview"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000437_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000437_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What element immediately follows the main title?",
                                "Which visual separator is used after the paragraph?",
                                "What sub-title introduces the technical specifications section?",
                                "How many items are included in the technical specifications list?",
                                "Name one item listed in the technical specifications?",
                                "What id is assigned to the division containing additional information?",
                                "What text is shown in the footer section at the end of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000437_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Vintage Car Overview",
                                "A paragraph with the car description",
                                "A horizontal line",
                                "Technical Specifications",
                                "4",
                                "Engine Type",
                                "additional-info",
                                "End of Overview"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a brief descriptive text about a historic monument into a structured HTML document.\n\nFeature Requirements:\n- Begin with an <h1> element containing the text \"Monument Overview\".\n- Immediately follow with a <p> element that contains the original description of the monument.\n- Insert an <hr> element right after the paragraph to separate the content.\n- Add an <h2> element with the text \"Historical Facts\" immediately below the horizontal line.\n- Under \"Historical Facts\", include an ordered list (<ol>) with exactly 3 items in the following order: \"Year Built\", \"Architect\", \"Significance\".\n- Insert another <h2> element with the text \"Visitor Information\" immediately after the ordered list.\n- Below \"Visitor Information\", include an unordered list (<ul>) with exactly 3 items in this order: \"Opening Hours\", \"Ticket Price\", \"Guided Tours\".\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\".",
            "task_id": "000438",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text content of the main heading?",
                "What element appears immediately after the main heading?",
                "Which element separates the paragraph from the rest of the document?",
                "What is the text of the heading that immediately follows the horizontal rule?",
                "How many items are listed in the ordered list under 'Historical Facts'?",
                "What are the items included in that ordered list?",
                "What is the text in the second subheading after the ordered list?",
                "How many items are in the unordered list under 'Visitor Information'?",
                "What is the text content of the footer at the end of the document?"
            ],
            "VQA_answers": [
                "Monument Overview",
                "A paragraph containing the descriptive text",
                "A horizontal rule",
                "Historical Facts",
                "3",
                "Year Built, Architect, Significance",
                "Visitor Information",
                "3",
                "End of Overview"
            ],
            "raw_output_metric": [
                "<h1>Monument Overview</h1>",
                "<p>",
                "<hr>",
                "<h2>Historical Facts</h2>",
                "<ol>",
                "Year Built",
                "Architect",
                "Significance",
                "</ol>",
                "<h2>Visitor Information</h2>",
                "<ul>",
                "Opening Hours",
                "Ticket Price",
                "Guided Tours",
                "</ul>",
                "<footer>End of Overview</footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000438_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a brief descriptive text about a historic monument into a structured HTML document.\n\nFeature Requirements:\n- Begin with an <h1> element containing the text \"Monument Overview\".\n- Immediately follow with a <p> element that contains the original description of the monument.\n- Insert an <hr> element right after the paragraph to separate the content.\n- Add an <h2> element with the text \"Historical Facts\" immediately below the horizontal line.\n- Under \"Historical Facts\", include an ordered list (<ol>) with exactly 3 items in the following order: \"Year Built\", \"Architect\", \"Significance\".\n- Insert another <h2> element with the text \"Visitor Information\" immediately after the ordered list.\n- Below \"Visitor Information\", include an unordered list (<ul>) with exactly 3 items in this order: \"Opening Hours\", \"Ticket Price\", \"Guided Tours\".\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000438_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>Monument Overview</h1>",
                                "<p>",
                                "<hr>",
                                "<h2>Historical Facts</h2>",
                                "<ol>",
                                "Year Built",
                                "Architect",
                                "Significance",
                                "</ol>",
                                "<h2>Visitor Information</h2>",
                                "<ul>",
                                "Opening Hours",
                                "Ticket Price",
                                "Guided Tours",
                                "</ul>",
                                "<footer>End of Overview</footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000438_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000438_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text content of the main heading?",
                                "What element appears immediately after the main heading?",
                                "Which element separates the paragraph from the rest of the document?",
                                "What is the text of the heading that immediately follows the horizontal rule?",
                                "How many items are listed in the ordered list under 'Historical Facts'?",
                                "What are the items included in that ordered list?",
                                "What is the text in the second subheading after the ordered list?",
                                "How many items are in the unordered list under 'Visitor Information'?",
                                "What is the text content of the footer at the end of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000438_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Monument Overview",
                                "A paragraph containing the descriptive text",
                                "A horizontal rule",
                                "Historical Facts",
                                "3",
                                "Year Built, Architect, Significance",
                                "Visitor Information",
                                "3",
                                "End of Overview"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph about an urban park into an HTML structure.\n\nFeature Requirements:\n- Begin with a title using an <h1> element that displays the text \"Urban Park Overview\".\n- Immediately after the title, insert the original paragraph within a <p> element.\n- Add a horizontal line using the <hr> element right after the paragraph for separation.\n- Include a subtitle with an <h2> element set to \"Park Features\".\n- Create a bullet list using a <ul> element containing exactly 4 <li> elements, with the items in this order: \"Playground\", \"Walking Trails\", \"Picnic Area\", and \"Lake\".\n- Enclose the entire content inside a <section> element to organize the structure.\n- End the HTML output with a <div> element that has a class attribute of \"footer\" and contains the text \"Visit Us Soon\".",
            "task_id": "000439",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main heading displayed at the top of the page?",
                "What text appears immediately after the main title?",
                "What element visually separates the paragraph from the next section?",
                "What is the subtitle shown above the park features list?",
                "How many items are displayed in the bullet list of park features?",
                "What are the bullet list items in order?",
                "What text is visible at the bottom of the page?"
            ],
            "VQA_answers": [
                "Urban Park Overview",
                "The original paragraph about an urban park",
                "A horizontal line",
                "Park Features",
                "4",
                "Playground, Walking Trails, Picnic Area, Lake",
                "Visit Us Soon"
            ],
            "raw_output_metric": [
                "<section>",
                "<h1>Urban Park Overview</h1>",
                "<p>",
                "<hr>",
                "<h2>Park Features</h2>",
                "<ul>",
                "<li>Playground</li>",
                "<li>Walking Trails</li>",
                "<li>Picnic Area</li>",
                "<li>Lake</li>",
                "</ul>",
                "<div class=\"footer\">Visit Us Soon</div>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000439_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph about an urban park into an HTML structure.\n\nFeature Requirements:\n- Begin with a title using an <h1> element that displays the text \"Urban Park Overview\".\n- Immediately after the title, insert the original paragraph within a <p> element.\n- Add a horizontal line using the <hr> element right after the paragraph for separation.\n- Include a subtitle with an <h2> element set to \"Park Features\".\n- Create a bullet list using a <ul> element containing exactly 4 <li> elements, with the items in this order: \"Playground\", \"Walking Trails\", \"Picnic Area\", and \"Lake\".\n- Enclose the entire content inside a <section> element to organize the structure.\n- End the HTML output with a <div> element that has a class attribute of \"footer\" and contains the text \"Visit Us Soon\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000439_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<section>",
                                "<h1>Urban Park Overview</h1>",
                                "<p>",
                                "<hr>",
                                "<h2>Park Features</h2>",
                                "<ul>",
                                "<li>Playground</li>",
                                "<li>Walking Trails</li>",
                                "<li>Picnic Area</li>",
                                "<li>Lake</li>",
                                "</ul>",
                                "<div class=\"footer\">Visit Us Soon</div>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000439_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000439_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading displayed at the top of the page?",
                                "What text appears immediately after the main title?",
                                "What element visually separates the paragraph from the next section?",
                                "What is the subtitle shown above the park features list?",
                                "How many items are displayed in the bullet list of park features?",
                                "What are the bullet list items in order?",
                                "What text is visible at the bottom of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000439_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Urban Park Overview",
                                "The original paragraph about an urban park",
                                "A horizontal line",
                                "Park Features",
                                "4",
                                "Playground, Walking Trails, Picnic Area, Lake",
                                "Visit Us Soon"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate an HTML page that portrays a mystical castle through structured textual content.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mystical Castle\".\n- Immediately below the title, add a paragraph using a <p> element that provides a one-sentence overview of the castle.\n- Insert a horizontal rule using an <hr> element right after the introductory paragraph.\n- Add a section header using an <h2> element with the text \"Castle Details\".\n- Create an ordered list using an <ol> element that contains exactly three list items in this order: \"Ancient Walls\", \"Hidden Chambers\", \"Royal Guard\", with each item wrapped in an <li> element.\n- Immediately following the ordered list, include a section using a <section> element that contains a paragraph with the text \"Discover the secrets within\".\n- End the HTML document with a <footer> element containing the text \"Page End\".",
            "task_id": "000440",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text content of the main title at the top of the page?",
                "What appears immediately below the main title?",
                "Which element is used right after the introductory paragraph?",
                "What text is used as the section header after the horizontal rule?",
                "How many items are present in the ordered list?",
                "What are the texts contained in each ordered list item (in order)?",
                "What text is displayed within the section element?",
                "What is the content of the footer?"
            ],
            "VQA_answers": [
                "Mystical Castle",
                "A one-sentence overview of the castle in a paragraph.",
                "A horizontal rule.",
                "Castle Details",
                "3",
                "Ancient Walls, Hidden Chambers, Royal Guard",
                "Discover the secrets within",
                "Page End"
            ],
            "raw_output_metric": [
                "Mystical Castle",
                "Castle Details",
                "Ancient Walls",
                "Hidden Chambers",
                "Royal Guard",
                "Discover the secrets within",
                "Page End"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000440_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate an HTML page that portrays a mystical castle through structured textual content.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mystical Castle\".\n- Immediately below the title, add a paragraph using a <p> element that provides a one-sentence overview of the castle.\n- Insert a horizontal rule using an <hr> element right after the introductory paragraph.\n- Add a section header using an <h2> element with the text \"Castle Details\".\n- Create an ordered list using an <ol> element that contains exactly three list items in this order: \"Ancient Walls\", \"Hidden Chambers\", \"Royal Guard\", with each item wrapped in an <li> element.\n- Immediately following the ordered list, include a section using a <section> element that contains a paragraph with the text \"Discover the secrets within\".\n- End the HTML document with a <footer> element containing the text \"Page End\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000440_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mystical Castle",
                                "Castle Details",
                                "Ancient Walls",
                                "Hidden Chambers",
                                "Royal Guard",
                                "Discover the secrets within",
                                "Page End"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000440_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000440_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text content of the main title at the top of the page?",
                                "What appears immediately below the main title?",
                                "Which element is used right after the introductory paragraph?",
                                "What text is used as the section header after the horizontal rule?",
                                "How many items are present in the ordered list?",
                                "What are the texts contained in each ordered list item (in order)?",
                                "What text is displayed within the section element?",
                                "What is the content of the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000440_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mystical Castle",
                                "A one-sentence overview of the castle in a paragraph.",
                                "A horizontal rule.",
                                "Castle Details",
                                "3",
                                "Ancient Walls, Hidden Chambers, Royal Guard",
                                "Discover the secrets within",
                                "Page End"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that displays a brief narrative about a serene lakeside setting.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Lakeside Serenity\".\n- Display the provided narrative inside a <p> element right after the title.\n- Insert a horizontal line using the <hr> element immediately after the paragraph.\n- Include a secondary heading using an <h2> element with the text \"Location Details\".\n- Create an ordered list using an <ol> element that contains exactly 3 items: \"Water Clarity\", \"Surrounding Flora\", and \"Wildlife Presence\".\n- Each list item should be wrapped in an <li> element in the specified order.\n- End the HTML structure with a <footer> element containing the text \"End of Lakeside Overview\".",
            "task_id": "000441",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What text is used as the narrative immediately following the main title?",
                "What element visually divides the narrative from the subsequent content?",
                "What is the secondary heading text under the horizontal line?",
                "How many items are displayed within the ordered list?",
                "What are the three items listed in the ordered list and in what order?",
                "What text appears at the bottom of the page as a footer?"
            ],
            "VQA_answers": [
                "Lakeside Serenity",
                "A brief narrative about a serene lakeside setting",
                "A horizontal line",
                "Location Details",
                "3",
                "Water Clarity, Surrounding Flora, Wildlife Presence",
                "End of Lakeside Overview"
            ],
            "raw_output_metric": [
                "Lakeside Serenity",
                "Location Details",
                "Water Clarity",
                "Surrounding Flora",
                "Wildlife Presence",
                "End of Lakeside Overview"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000441_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate an HTML structure that displays a brief narrative about a serene lakeside setting.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Lakeside Serenity\".\n- Display the provided narrative inside a <p> element right after the title.\n- Insert a horizontal line using the <hr> element immediately after the paragraph.\n- Include a secondary heading using an <h2> element with the text \"Location Details\".\n- Create an ordered list using an <ol> element that contains exactly 3 items: \"Water Clarity\", \"Surrounding Flora\", and \"Wildlife Presence\".\n- Each list item should be wrapped in an <li> element in the specified order.\n- End the HTML structure with a <footer> element containing the text \"End of Lakeside Overview\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000441_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Lakeside Serenity",
                                "Location Details",
                                "Water Clarity",
                                "Surrounding Flora",
                                "Wildlife Presence",
                                "End of Lakeside Overview"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000441_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000441_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What text is used as the narrative immediately following the main title?",
                                "What element visually divides the narrative from the subsequent content?",
                                "What is the secondary heading text under the horizontal line?",
                                "How many items are displayed within the ordered list?",
                                "What are the three items listed in the ordered list and in what order?",
                                "What text appears at the bottom of the page as a footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000441_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Lakeside Serenity",
                                "A brief narrative about a serene lakeside setting",
                                "A horizontal line",
                                "Location Details",
                                "3",
                                "Water Clarity, Surrounding Flora, Wildlife Presence",
                                "End of Lakeside Overview"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that presents a brief description of a historical monument.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Historical Monument\".\n- Display the descriptive text inside a <p> element placed immediately after the main heading.\n- Insert a <blockquote> element right after the paragraph containing the phrase \"A window to the past\".\n- Add a subheading using an <h2> element with the text \"Visitor Details\" following the blockquote.\n- Create an ordered list using an <ol> element that includes exactly four items: \"Opening Hours\", \"Ticket Costs\", \"Guided Tours\", and \"Address\", in that specific order.\n- Conclude the HTML structure with a <footer> element that contains the text \"End of Historical Overview\".",
            "task_id": "000442",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main heading text at the top of the page?",
                "What type of text immediately follows the main heading?",
                "What phrase is displayed in the blockquote element?",
                "What is the text of the subheading after the blockquote?",
                "How many items are in the ordered list and what are they?",
                "What is the text shown in the footer at the bottom of the page?"
            ],
            "VQA_answers": [
                "Historical Monument",
                "A descriptive paragraph about the monument",
                "A window to the past",
                "Visitor Details",
                "Four items: Opening Hours, Ticket Costs, Guided Tours, Address",
                "End of Historical Overview"
            ],
            "raw_output_metric": [
                "Historical Monument",
                "A window to the past",
                "Visitor Details",
                "Opening Hours",
                "Ticket Costs",
                "Guided Tours",
                "Address",
                "End of Historical Overview"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000442_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nGenerate an HTML structure that presents a brief description of a historical monument.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Historical Monument\".\n- Display the descriptive text inside a <p> element placed immediately after the main heading.\n- Insert a <blockquote> element right after the paragraph containing the phrase \"A window to the past\".\n- Add a subheading using an <h2> element with the text \"Visitor Details\" following the blockquote.\n- Create an ordered list using an <ol> element that includes exactly four items: \"Opening Hours\", \"Ticket Costs\", \"Guided Tours\", and \"Address\", in that specific order.\n- Conclude the HTML structure with a <footer> element that contains the text \"End of Historical Overview\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000442_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Historical Monument",
                                "A window to the past",
                                "Visitor Details",
                                "Opening Hours",
                                "Ticket Costs",
                                "Guided Tours",
                                "Address",
                                "End of Historical Overview"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000442_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000442_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading text at the top of the page?",
                                "What type of text immediately follows the main heading?",
                                "What phrase is displayed in the blockquote element?",
                                "What is the text of the subheading after the blockquote?",
                                "How many items are in the ordered list and what are they?",
                                "What is the text shown in the footer at the bottom of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000442_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Historical Monument",
                                "A descriptive paragraph about the monument",
                                "A window to the past",
                                "Visitor Details",
                                "Four items: Opening Hours, Ticket Costs, Guided Tours, Address",
                                "End of Historical Overview"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic museum into a structured HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Museum Overview\".\n- Place the original paragraph inside a <p> element immediately following the title.\n- Add a horizontal line using the <hr> element under the paragraph to separate content.\n- Insert a section header using an <h2> element with the text \"Exhibit Highlights\" below the horizontal line.\n- Create an ordered list within an <ol> element containing exactly 4 items in the following order: \"Ancient Artifacts\", \"Sculpture Gallery\", \"Modern Exhibits\", \"Interactive Installations\".\n- Ensure each list item is wrapped in an <li> element.\n- Insert a subheader using an <h3> element with the text \"Visitor Information\" immediately after the ordered list.\n- Display another paragraph with placeholder text inside a <p> element below the subheader.\n- End the HTML document with a closing <footer> element that contains the text \"Visit us for an enriching experience\".",
            "task_id": "000443",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text in the main title at the top of the page?",
                "What follows immediately after the main title?",
                "What graphical element is used to separate the content under the paragraph?",
                "What is the text of the section header below the horizontal line?",
                "How many items are in the ordered list, and what are they?",
                "What is the text of the subheader immediately following the ordered list?",
                "What text is displayed in the footer at the bottom of the document?"
            ],
            "VQA_answers": [
                "Museum Overview",
                "A paragraph with a short description of a historic museum.",
                "A horizontal line.",
                "Exhibit Highlights",
                "4 items: Ancient Artifacts, Sculpture Gallery, Modern Exhibits, Interactive Installations",
                "Visitor Information",
                "Visit us for an enriching experience"
            ],
            "raw_output_metric": [
                "<h1>",
                "Museum Overview",
                "<p>",
                "<hr>",
                "<h2>",
                "Exhibit Highlights",
                "<ol>",
                "Ancient Artifacts",
                "Sculpture Gallery",
                "Modern Exhibits",
                "Interactive Installations",
                "<li>",
                "<h3>",
                "Visitor Information",
                "<footer>",
                "Visit us for an enriching experience"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000443_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic museum into a structured HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Museum Overview\".\n- Place the original paragraph inside a <p> element immediately following the title.\n- Add a horizontal line using the <hr> element under the paragraph to separate content.\n- Insert a section header using an <h2> element with the text \"Exhibit Highlights\" below the horizontal line.\n- Create an ordered list within an <ol> element containing exactly 4 items in the following order: \"Ancient Artifacts\", \"Sculpture Gallery\", \"Modern Exhibits\", \"Interactive Installations\".\n- Ensure each list item is wrapped in an <li> element.\n- Insert a subheader using an <h3> element with the text \"Visitor Information\" immediately after the ordered list.\n- Display another paragraph with placeholder text inside a <p> element below the subheader.\n- End the HTML document with a closing <footer> element that contains the text \"Visit us for an enriching experience\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000443_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>",
                                "Museum Overview",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "Exhibit Highlights",
                                "<ol>",
                                "Ancient Artifacts",
                                "Sculpture Gallery",
                                "Modern Exhibits",
                                "Interactive Installations",
                                "<li>",
                                "<h3>",
                                "Visitor Information",
                                "<footer>",
                                "Visit us for an enriching experience"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000443_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000443_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text in the main title at the top of the page?",
                                "What follows immediately after the main title?",
                                "What graphical element is used to separate the content under the paragraph?",
                                "What is the text of the section header below the horizontal line?",
                                "How many items are in the ordered list, and what are they?",
                                "What is the text of the subheader immediately following the ordered list?",
                                "What text is displayed in the footer at the bottom of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000443_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Museum Overview",
                                "A paragraph with a short description of a historic museum.",
                                "A horizontal line.",
                                "Exhibit Highlights",
                                "4 items: Ancient Artifacts, Sculpture Gallery, Modern Exhibits, Interactive Installations",
                                "Visitor Information",
                                "Visit us for an enriching experience"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a brief descriptive paragraph about a historical museum tour into an HTML layout.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Museum Journey\".\n- Present the original descriptive paragraph inside a <p> element immediately following the header.\n- Insert a horizontal divider using the <hr> element right after the paragraph.\n- Add a subheader using an <h2> element with the text \"Exhibit Highlights\".\n- Incorporate an unordered list (<ul>) that contains exactly 3 list items (\"Ancient Artifacts\", \"Sculpture Gallery\", \"Historical Documents\") in the specified order, with each item enclosed in an <li> element.\n- Follow the list with a <section> element that provides additional information, enclosed in a <p> element.\n- End the output with a closing <footer> element containing the text \"Tour Concluded\".",
            "task_id": "000444",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text displayed in the main header of the page?",
                "Which element immediately follows the main header?",
                "What element is used to visually separate the descriptive paragraph from the rest of the content?",
                "What is the text shown in the subheader after the divider?",
                "How many items are present in the unordered list?",
                "What are the texts of the items listed in the unordered list?",
                "What is the text contained in the footer at the bottom of the page?"
            ],
            "VQA_answers": [
                "Museum Journey",
                "A paragraph containing the descriptive text",
                "A horizontal divider",
                "Exhibit Highlights",
                "3",
                "Ancient Artifacts, Sculpture Gallery, Historical Documents",
                "Tour Concluded"
            ],
            "raw_output_metric": [
                "Museum Journey",
                "Exhibit Highlights",
                "Ancient Artifacts",
                "Sculpture Gallery",
                "Historical Documents",
                "Tour Concluded"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000444_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a brief descriptive paragraph about a historical museum tour into an HTML layout.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Museum Journey\".\n- Present the original descriptive paragraph inside a <p> element immediately following the header.\n- Insert a horizontal divider using the <hr> element right after the paragraph.\n- Add a subheader using an <h2> element with the text \"Exhibit Highlights\".\n- Incorporate an unordered list (<ul>) that contains exactly 3 list items (\"Ancient Artifacts\", \"Sculpture Gallery\", \"Historical Documents\") in the specified order, with each item enclosed in an <li> element.\n- Follow the list with a <section> element that provides additional information, enclosed in a <p> element.\n- End the output with a closing <footer> element containing the text \"Tour Concluded\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000444_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Museum Journey",
                                "Exhibit Highlights",
                                "Ancient Artifacts",
                                "Sculpture Gallery",
                                "Historical Documents",
                                "Tour Concluded"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000444_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000444_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main header of the page?",
                                "Which element immediately follows the main header?",
                                "What element is used to visually separate the descriptive paragraph from the rest of the content?",
                                "What is the text shown in the subheader after the divider?",
                                "How many items are present in the unordered list?",
                                "What are the texts of the items listed in the unordered list?",
                                "What is the text contained in the footer at the bottom of the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000444_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Museum Journey",
                                "A paragraph containing the descriptive text",
                                "A horizontal divider",
                                "Exhibit Highlights",
                                "3",
                                "Ancient Artifacts, Sculpture Gallery, Historical Documents",
                                "Tour Concluded"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a beachside retreat into an HTML structure.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Beach Retreat Overview\".\n- Display the original paragraph inside a <p> element immediately following the main header.\n- Add a subheader under the paragraph using an <h2> element with the text \"Scenic Details\".\n- Insert a horizontal line using the <hr> element after the subheader for visual separation.\n- Create an unordered list using a <ul> element that contains exactly 3 list items: \"Sunset Views\", \"Ocean Breezes\", and \"Sandy Shores\".\n- Each list item must be wrapped within an <li> element and appear in the order specified.\n- Conclude the HTML structure with a <footer> element containing the text \"End of Retreat Description\".",
            "task_id": "000445",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the text displayed in the main header?",
                "What element immediately follows the main header?",
                "What is the text of the subheader appearing under the paragraph?",
                "Which element is used to create a visual separation after the subheader?",
                "How many items are included in the unordered list?",
                "What are the list items in order?",
                "What text does the footer element display?"
            ],
            "VQA_answers": [
                "Beach Retreat Overview",
                "A paragraph containing the original beachside retreat description.",
                "Scenic Details",
                "A horizontal line",
                "3",
                "Sunset Views, Ocean Breezes, Sandy Shores",
                "End of Retreat Description"
            ],
            "raw_output_metric": [
                "Beach Retreat Overview",
                "Scenic Details",
                "Sunset Views",
                "Ocean Breezes",
                "Sandy Shores",
                "End of Retreat Description"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000445_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph describing a beachside retreat into an HTML structure.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Beach Retreat Overview\".\n- Display the original paragraph inside a <p> element immediately following the main header.\n- Add a subheader under the paragraph using an <h2> element with the text \"Scenic Details\".\n- Insert a horizontal line using the <hr> element after the subheader for visual separation.\n- Create an unordered list using a <ul> element that contains exactly 3 list items: \"Sunset Views\", \"Ocean Breezes\", and \"Sandy Shores\".\n- Each list item must be wrapped within an <li> element and appear in the order specified.\n- Conclude the HTML structure with a <footer> element containing the text \"End of Retreat Description\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000445_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Beach Retreat Overview",
                                "Scenic Details",
                                "Sunset Views",
                                "Ocean Breezes",
                                "Sandy Shores",
                                "End of Retreat Description"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000445_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000445_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main header?",
                                "What element immediately follows the main header?",
                                "What is the text of the subheader appearing under the paragraph?",
                                "Which element is used to create a visual separation after the subheader?",
                                "How many items are included in the unordered list?",
                                "What are the list items in order?",
                                "What text does the footer element display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000445_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Beach Retreat Overview",
                                "A paragraph containing the original beachside retreat description.",
                                "Scenic Details",
                                "A horizontal line",
                                "3",
                                "Sunset Views, Ocean Breezes, Sandy Shores",
                                "End of Retreat Description"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a mountain hiking adventure into an HTML structure.\n\nFeature Requirements:\n- Include an <h1> element with the text \"Mountain Hiking Adventure\" at the top of the document.\n- Display the original descriptive paragraph inside a <p> element immediately below the heading.\n- Insert a horizontal rule using the <hr> element directly after the paragraph to separate sections.\n- Add an <h2> element titled \"Trail Details\" below the horizontal line.\n- Create an ordered list using an <ol> element that contains exactly 4 items in the following order: \"Trail Length\", \"Difficulty Level\", \"Estimated Time\", and \"Scenic Viewpoints\".\n- End the HTML document with a <footer> element that contains the text \"End of Adventure\".",
            "task_id": "000446",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main heading text at the top of the page?",
                "What type of element is used to display the descriptive paragraph?",
                "What visual separator appears immediately after the paragraph?",
                "What is the title of the section below the horizontal rule?",
                "How many items are there in the ordered list?",
                "What are the items in the ordered list, listed in order?",
                "What text is displayed in the footer?"
            ],
            "VQA_answers": [
                "Mountain Hiking Adventure",
                "Paragraph",
                "Horizontal Rule",
                "Trail Details",
                "4",
                "Trail Length, Difficulty Level, Estimated Time, Scenic Viewpoints",
                "End of Adventure"
            ],
            "raw_output_metric": [
                "Mountain Hiking Adventure",
                "Trail Details",
                "Trail Length",
                "Difficulty Level",
                "Estimated Time",
                "Scenic Viewpoints",
                "End of Adventure"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000446_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a mountain hiking adventure into an HTML structure.\n\nFeature Requirements:\n- Include an <h1> element with the text \"Mountain Hiking Adventure\" at the top of the document.\n- Display the original descriptive paragraph inside a <p> element immediately below the heading.\n- Insert a horizontal rule using the <hr> element directly after the paragraph to separate sections.\n- Add an <h2> element titled \"Trail Details\" below the horizontal line.\n- Create an ordered list using an <ol> element that contains exactly 4 items in the following order: \"Trail Length\", \"Difficulty Level\", \"Estimated Time\", and \"Scenic Viewpoints\".\n- End the HTML document with a <footer> element that contains the text \"End of Adventure\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000446_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mountain Hiking Adventure",
                                "Trail Details",
                                "Trail Length",
                                "Difficulty Level",
                                "Estimated Time",
                                "Scenic Viewpoints",
                                "End of Adventure"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000446_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000446_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading text at the top of the page?",
                                "What type of element is used to display the descriptive paragraph?",
                                "What visual separator appears immediately after the paragraph?",
                                "What is the title of the section below the horizontal rule?",
                                "How many items are there in the ordered list?",
                                "What are the items in the ordered list, listed in order?",
                                "What text is displayed in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000446_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mountain Hiking Adventure",
                                "Paragraph",
                                "Horizontal Rule",
                                "Trail Details",
                                "4",
                                "Trail Length, Difficulty Level, Estimated Time, Scenic Viewpoints",
                                "End of Adventure"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a renowned library into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Library Profile\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Insert a horizontal line using the <hr> element directly below the paragraph for clear separation.\n- Add a section heading using an <h2> element with the text \"Library Details\" beneath the horizontal line.\n- Present a bullet point list within a <ul> element containing exactly 3 items in order: \"Established Date\", \"Collections\", \"Location\".\n- Wrap each item in the bullet list within an <li> element to maintain clear structure.\n- Conclude the HTML document with a closing <footer> element containing the text \"Profile End\".",
            "task_id": "000447",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main title visible at the top of the page?",
                "What content appears immediately after the title?",
                "What visual element separates the paragraph from the section heading?",
                "What is the text of the section heading below the horizontal line?",
                "How many items are there in the bullet point list?",
                "What are the bullet list items in order?",
                "What text is displayed in the footer at the bottom of the document?"
            ],
            "VQA_answers": [
                "Library Profile",
                "A paragraph with a description of a renowned library",
                "Horizontal line",
                "Library Details",
                "3",
                "Established Date, Collections, Location",
                "Profile End"
            ],
            "raw_output_metric": [
                "<h1>",
                "Library Profile",
                "<p>",
                "<hr>",
                "<h2>",
                "Library Details",
                "<ul>",
                "<li>Established Date</li>",
                "<li>Collections</li>",
                "<li>Location</li>",
                "<footer>",
                "Profile End"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000447_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a renowned library into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Library Profile\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Insert a horizontal line using the <hr> element directly below the paragraph for clear separation.\n- Add a section heading using an <h2> element with the text \"Library Details\" beneath the horizontal line.\n- Present a bullet point list within a <ul> element containing exactly 3 items in order: \"Established Date\", \"Collections\", \"Location\".\n- Wrap each item in the bullet list within an <li> element to maintain clear structure.\n- Conclude the HTML document with a closing <footer> element containing the text \"Profile End\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000447_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>",
                                "Library Profile",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "Library Details",
                                "<ul>",
                                "<li>Established Date</li>",
                                "<li>Collections</li>",
                                "<li>Location</li>",
                                "<footer>",
                                "Profile End"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000447_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000447_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title visible at the top of the page?",
                                "What content appears immediately after the title?",
                                "What visual element separates the paragraph from the section heading?",
                                "What is the text of the section heading below the horizontal line?",
                                "How many items are there in the bullet point list?",
                                "What are the bullet list items in order?",
                                "What text is displayed in the footer at the bottom of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000447_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Profile",
                                "A paragraph with a description of a renowned library",
                                "Horizontal line",
                                "Library Details",
                                "3",
                                "Established Date, Collections, Location",
                                "Profile End"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historical museum exhibit into an HTML structure.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Exhibit Overview\".\n- Display the original paragraph inside a <p> element immediately after the heading.\n- Insert a horizontal line using the <hr> element directly following the paragraph.\n- Add a subheading with an <h2> element that reads \"Historical Significance\".\n- Create an unordered list (<ul>) containing exactly 4 list items (<li>) in the following order: \"Origin\", \"Era\", \"Impact\", \"Legacy\".\n- Wrap the list in a <section> element with the class \"info-details\".\n- Include a secondary paragraph using a <p> element with the text \"Explore to learn more about the exhibit's background.\"\n- End the HTML document with a closing <footer> element containing the text \"Thank you for visiting\".",
            "task_id": "000448",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main heading text displayed at the top of the page?",
                "What type of element immediately follows the main heading?",
                "What visual separator is present after the initial paragraph?",
                "What text is shown in the subheading below the horizontal line?",
                "How many items are listed in the unordered list, and what are they?",
                "What message is displayed at the bottom of the document in the footer?"
            ],
            "VQA_answers": [
                "Exhibit Overview",
                "A paragraph containing the original exhibit description",
                "A horizontal line",
                "Historical Significance",
                "4 items: Origin, Era, Impact, Legacy",
                "Thank you for visiting"
            ],
            "raw_output_metric": [
                "Exhibit Overview",
                "Historical Significance",
                "Origin",
                "Era",
                "Impact",
                "Legacy",
                "info-details",
                "Explore to learn more about the exhibit's background.",
                "Thank you for visiting"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000448_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historical museum exhibit into an HTML structure.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Exhibit Overview\".\n- Display the original paragraph inside a <p> element immediately after the heading.\n- Insert a horizontal line using the <hr> element directly following the paragraph.\n- Add a subheading with an <h2> element that reads \"Historical Significance\".\n- Create an unordered list (<ul>) containing exactly 4 list items (<li>) in the following order: \"Origin\", \"Era\", \"Impact\", \"Legacy\".\n- Wrap the list in a <section> element with the class \"info-details\".\n- Include a secondary paragraph using a <p> element with the text \"Explore to learn more about the exhibit's background.\"\n- End the HTML document with a closing <footer> element containing the text \"Thank you for visiting\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000448_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Exhibit Overview",
                                "Historical Significance",
                                "Origin",
                                "Era",
                                "Impact",
                                "Legacy",
                                "info-details",
                                "Explore to learn more about the exhibit's background.",
                                "Thank you for visiting"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000448_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000448_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading text displayed at the top of the page?",
                                "What type of element immediately follows the main heading?",
                                "What visual separator is present after the initial paragraph?",
                                "What text is shown in the subheading below the horizontal line?",
                                "How many items are listed in the unordered list, and what are they?",
                                "What message is displayed at the bottom of the document in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000448_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Exhibit Overview",
                                "A paragraph containing the original exhibit description",
                                "A horizontal line",
                                "Historical Significance",
                                "4 items: Origin, Era, Impact, Legacy",
                                "Thank you for visiting"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a classic musical instrument into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Instrument Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph to separate content.\n- Insert a section title using an <h2> element with the text \"Sound Characteristics\".\n- Present a bullet point list in a <ul> element containing exactly 3 items: \"Tone\", \"Resonance\", and \"Dynamics\" in that specific order.\n- Ensure each list item is wrapped in its own <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\".",
            "task_id": "000449",
            "task_name": "Text to HTML",
            "input_type": "Text",
            "output_type": "HTML",
            "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
            "VQA_questions": [
                "What is the main heading text displayed at the top of the page?",
                "Which element immediately follows the main title?",
                "What visual element is used directly below the paragraph to separate content?",
                "What is the text of the section title that comes after the horizontal line?",
                "How many items are in the bullet point list under the Sound Characteristics section?",
                "What are the three items listed in the bullet point list?",
                "What text is shown in the footer at the end of the document?"
            ],
            "VQA_answers": [
                "Instrument Overview",
                "A paragraph with the original description",
                "A horizontal line",
                "Sound Characteristics",
                "3",
                "Tone, Resonance, Dynamics",
                "End of Overview"
            ],
            "raw_output_metric": [
                "<h1>",
                "Instrument Overview",
                "<p>",
                "<hr>",
                "<h2>",
                "Sound Characteristics",
                "<ul>",
                "<li>",
                "Tone",
                "Resonance",
                "Dynamics",
                "<footer>",
                "End of Overview"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000449_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output HTML:\n\nTask:\nConvert a short paragraph describing a classic musical instrument into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Instrument Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph to separate content.\n- Insert a section title using an <h2> element with the text \"Sound Characteristics\".\n- Present a bullet point list in a <ul> element containing exactly 3 items: \"Tone\", \"Resonance\", and \"Dynamics\" in that specific order.\n- Ensure each list item is wrapped in its own <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000449_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>",
                                "Instrument Overview",
                                "<p>",
                                "<hr>",
                                "<h2>",
                                "Sound Characteristics",
                                "<ul>",
                                "<li>",
                                "Tone",
                                "Resonance",
                                "Dynamics",
                                "<footer>",
                                "End of Overview"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "000449_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "000449_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading text displayed at the top of the page?",
                                "Which element immediately follows the main title?",
                                "What visual element is used directly below the paragraph to separate content?",
                                "What is the text of the section title that comes after the horizontal line?",
                                "How many items are in the bullet point list under the Sound Characteristics section?",
                                "What are the three items listed in the bullet point list?",
                                "What text is shown in the footer at the end of the document?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "000449_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Instrument Overview",
                                "A paragraph with the original description",
                                "A horizontal line",
                                "Sound Characteristics",
                                "3",
                                "Tone, Resonance, Dynamics",
                                "End of Overview"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract and structure specific details about a fictional business conference described in the input text.\n\nFeature Requirements:\n- Identify the conference title and include it under the \"conference_title\" key as a string.\n- Extract the conference location mentioned in the text (city and venue) and include it under the \"location\" key as a string.\n- Retrieve all dates related to the conference and list them under the \"conference_dates\" key as an array of strings formatted as \"DD-MM-YYYY\".\n- Extract the scheduled start time of the conference and include it under a \"start_time\" key as a string in \"HH:MM\" 24-hour format.\n- Determine the number of keynote speakers mentioned in the text and include it under a \"keynote_speakers_count\" key as an integer.\n- List any monetary amounts (e.g., \"USD 150\") mentioned in the text under a \"monetary_values\" key as an array of strings.\n- Include the overall summary of the conference details under a \"summary\" key as a string summarizing the main points in no more than 50 words.",
            "task_id": "000500",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_title",
                "location",
                "conference_dates",
                "start_time",
                "keynote_speakers_count",
                "monetary_values",
                "summary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000500_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract and structure specific details about a fictional business conference described in the input text.\n\nFeature Requirements:\n- Identify the conference title and include it under the \"conference_title\" key as a string.\n- Extract the conference location mentioned in the text (city and venue) and include it under the \"location\" key as a string.\n- Retrieve all dates related to the conference and list them under the \"conference_dates\" key as an array of strings formatted as \"DD-MM-YYYY\".\n- Extract the scheduled start time of the conference and include it under a \"start_time\" key as a string in \"HH:MM\" 24-hour format.\n- Determine the number of keynote speakers mentioned in the text and include it under a \"keynote_speakers_count\" key as an integer.\n- List any monetary amounts (e.g., \"USD 150\") mentioned in the text under a \"monetary_values\" key as an array of strings.\n- Include the overall summary of the conference details under a \"summary\" key as a string summarizing the main points in no more than 50 words."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000500_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_title",
                                "location",
                                "conference_dates",
                                "start_time",
                                "keynote_speakers_count",
                                "monetary_values",
                                "summary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract detailed meeting event information from the input text and present it as a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a concise string description (up to 50 words) summarizing the key topics and outcomes of the meeting.\n- Extract all numeric identifiers (such as reference numbers or phone numbers) mentioned in the text and list them under an \"identifiers\" key as an array of strings.\n- Identify and list every venue or physical location referenced (e.g., building names, street addresses) under a \"venues\" key as an array of strings.\n- Extract the names of all mentioned organizations and include them under an \"organizations\" key as an array of strings.\n- Capture the meeting's start time and end time, converting them to a 24-hour \"HH:MM\" format, and include these details under \"start_time\" and \"end_time\" keys respectively.\n- If available, extract the participant count from the text and present it as an integer under a \"participant_count\" key.\n- If any discount or statistical percentages are provided (e.g., \"20% discount\"), list them under a \"discounts\" key as an array of strings retaining the original percentage format.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list any email addresses mentioned, including them in an \"emails\" key as an array of strings.\n- Locate any specific meeting date mentioned and format it as \"YYYY-MM-DD\" under a \"meeting_date\" key.",
            "task_id": "000501",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "identifiers",
                "venues",
                "organizations",
                "start_time",
                "end_time",
                "participant_count",
                "discounts",
                "sentence_count",
                "emails",
                "meeting_date"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000501_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract detailed meeting event information from the input text and present it as a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a concise string description (up to 50 words) summarizing the key topics and outcomes of the meeting.\n- Extract all numeric identifiers (such as reference numbers or phone numbers) mentioned in the text and list them under an \"identifiers\" key as an array of strings.\n- Identify and list every venue or physical location referenced (e.g., building names, street addresses) under a \"venues\" key as an array of strings.\n- Extract the names of all mentioned organizations and include them under an \"organizations\" key as an array of strings.\n- Capture the meeting's start time and end time, converting them to a 24-hour \"HH:MM\" format, and include these details under \"start_time\" and \"end_time\" keys respectively.\n- If available, extract the participant count from the text and present it as an integer under a \"participant_count\" key.\n- If any discount or statistical percentages are provided (e.g., \"20% discount\"), list them under a \"discounts\" key as an array of strings retaining the original percentage format.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list any email addresses mentioned, including them in an \"emails\" key as an array of strings.\n- Locate any specific meeting date mentioned and format it as \"YYYY-MM-DD\" under a \"meeting_date\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000501_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "identifiers",
                                "venues",
                                "organizations",
                                "start_time",
                                "end_time",
                                "participant_count",
                                "discounts",
                                "sentence_count",
                                "emails",
                                "meeting_date"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the provided text into a structured JSON object that extracts key details from a corporate press release announcement.\n\nFeature Requirements:\n- Include a \"summary\" key with a concise string summary of the text's main announcement, limited to 50 words.\n- Identify and list all phone numbers mentioned in the text that follow the format \"+<country_code> <number>\" under a \"phone_numbers\" key as an array of strings.\n- Extract any monetary amounts (e.g., \"$5000\", \"€3000\") and store them in an \"amounts\" key as an array of strings.\n- Detect and list all email addresses found in the text under an \"emails\" key as an array of strings.\n- Count and include the total number of characters, including spaces, in the text under a \"character_count\" key as an integer.\n- Extract all dates formatted as \"MM/DD/YYYY\" and provide them in a \"dates\" key as an array of strings.",
            "task_id": "000502",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "summary",
                "phone_numbers",
                "amounts",
                "emails",
                "character_count",
                "dates"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000502_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the provided text into a structured JSON object that extracts key details from a corporate press release announcement.\n\nFeature Requirements:\n- Include a \"summary\" key with a concise string summary of the text's main announcement, limited to 50 words.\n- Identify and list all phone numbers mentioned in the text that follow the format \"+<country_code> <number>\" under a \"phone_numbers\" key as an array of strings.\n- Extract any monetary amounts (e.g., \"$5000\", \"€3000\") and store them in an \"amounts\" key as an array of strings.\n- Detect and list all email addresses found in the text under an \"emails\" key as an array of strings.\n- Count and include the total number of characters, including spaces, in the text under a \"character_count\" key as an integer.\n- Extract all dates formatted as \"MM/DD/YYYY\" and provide them in a \"dates\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000502_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "summary",
                                "phone_numbers",
                                "amounts",
                                "emails",
                                "character_count",
                                "dates"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input event announcement text into a structured JSON object that extracts key details about the event.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly encapsulates the core message of the event in no more than 40 words.\n- Extract the first occurrence of a date from the text and assign it to an \"event_date\" key as a string formatted as \"YYYY-MM-DD\".\n- Identify and extract the event's location from the text, storing it under a \"venue\" key as a string.\n- Search the input text for any numerical reference to the expected number of guests and include it under an \"attendee_count\" key as an integer.\n- Identify all numbers preceded by a currency symbol (e.g., \"$\") and list them under a \"budget\" key as an array of strings, preserving the currency symbol.\n- Extract any hashtags (words starting with \"#\") present in the text and include them in a \"hashtags\" key as an array of strings.\n- Identify all personal names mentioned as organizers and include them in an \"organizers\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.",
            "task_id": "000503",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "event_date",
                "venue",
                "attendee_count",
                "budget",
                "hashtags",
                "organizers",
                "word_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000503_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input event announcement text into a structured JSON object that extracts key details about the event.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly encapsulates the core message of the event in no more than 40 words.\n- Extract the first occurrence of a date from the text and assign it to an \"event_date\" key as a string formatted as \"YYYY-MM-DD\".\n- Identify and extract the event's location from the text, storing it under a \"venue\" key as a string.\n- Search the input text for any numerical reference to the expected number of guests and include it under an \"attendee_count\" key as an integer.\n- Identify all numbers preceded by a currency symbol (e.g., \"$\") and list them under a \"budget\" key as an array of strings, preserving the currency symbol.\n- Extract any hashtags (words starting with \"#\") present in the text and include them in a \"hashtags\" key as an array of strings.\n- Identify all personal names mentioned as organizers and include them in an \"organizers\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000503_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "event_date",
                                "venue",
                                "attendee_count",
                                "budget",
                                "hashtags",
                                "organizers",
                                "word_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract and organize detailed information from a scientific experiment report into a structured JSON object.\n\nFeature Requirements:\n- Include an \"experiment_title\" key with a string value that provides the official title of the experiment as mentioned in the text.\n- Extract the \"date_conducted\" from the input text, ensuring it is formatted as \"YYYY-MM-DD\", and store it in a \"dates\" key as an array of strings.\n- Identify and list all the instruments or equipment used in the experiment under an \"instruments\" key as an array of strings.\n- Summarize the experiment's objective in a \"purpose\" key with a string value containing no more than 40 words.\n- Include a \"measurements\" key with an object value, where each measurement (e.g., temperature, pressure) is a key paired with its numerical value extracted from the text.\n- Extract any percentage values mentioned in the text and include them in a \"reported_percentages\" key as an array of strings, preserving the percentage symbol.\n- Count the number of distinct scientific terms mentioned in the report and include this count as an integer under a \"scientific_terms_count\" key.\n- Identify all names of researchers mentioned and list them under a \"researchers\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"total_word_count\" key.\n- If any statistical results (such as p-values) are provided, extract them and include them in a \"statistics\" key as an array of strings with the original formatting.",
            "task_id": "000504",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "experiment_title",
                "dates",
                "instruments",
                "purpose",
                "measurements",
                "reported_percentages",
                "scientific_terms_count",
                "researchers",
                "total_word_count",
                "statistics"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000504_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract and organize detailed information from a scientific experiment report into a structured JSON object.\n\nFeature Requirements:\n- Include an \"experiment_title\" key with a string value that provides the official title of the experiment as mentioned in the text.\n- Extract the \"date_conducted\" from the input text, ensuring it is formatted as \"YYYY-MM-DD\", and store it in a \"dates\" key as an array of strings.\n- Identify and list all the instruments or equipment used in the experiment under an \"instruments\" key as an array of strings.\n- Summarize the experiment's objective in a \"purpose\" key with a string value containing no more than 40 words.\n- Include a \"measurements\" key with an object value, where each measurement (e.g., temperature, pressure) is a key paired with its numerical value extracted from the text.\n- Extract any percentage values mentioned in the text and include them in a \"reported_percentages\" key as an array of strings, preserving the percentage symbol.\n- Count the number of distinct scientific terms mentioned in the report and include this count as an integer under a \"scientific_terms_count\" key.\n- Identify all names of researchers mentioned and list them under a \"researchers\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"total_word_count\" key.\n- If any statistical results (such as p-values) are provided, extract them and include them in a \"statistics\" key as an array of strings with the original formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000504_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "experiment_title",
                                "dates",
                                "instruments",
                                "purpose",
                                "measurements",
                                "reported_percentages",
                                "scientific_terms_count",
                                "researchers",
                                "total_word_count",
                                "statistics"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text into a detailed JSON object that identifies specific types of information and computes basic text metrics.\n\nFeature Requirements:\n- Include a \"brief\" key with a one-sentence summary that encapsulates the primary topic of the input text.\n- Identify and list all email addresses found in the input text under an \"emails\" key as an array of strings.\n- Extract all monetary amounts prefixed by a currency symbol (such as \"$\", \"€\", or \"£\") under a \"monetary_values\" key as an array of strings.\n- Count the number of complete sentences in the text and include this count under a \"sentence_count\" key as an integer.\n- Identify all phone numbers formatted as \"XXX-XXX-XXXX\" and list them under a \"phone_numbers\" key as an array of strings.\n- Extract and include all hashtags (words beginning with \"#\") mentioned in the text under a \"hashtags\" key as an array of strings.\n- Determine the total character count of the input text and include this number under a \"character_count\" key as an integer.",
            "task_id": "000505",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief",
                "emails",
                "monetary_values",
                "sentence_count",
                "phone_numbers",
                "hashtags",
                "character_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000505_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text into a detailed JSON object that identifies specific types of information and computes basic text metrics.\n\nFeature Requirements:\n- Include a \"brief\" key with a one-sentence summary that encapsulates the primary topic of the input text.\n- Identify and list all email addresses found in the input text under an \"emails\" key as an array of strings.\n- Extract all monetary amounts prefixed by a currency symbol (such as \"$\", \"€\", or \"£\") under a \"monetary_values\" key as an array of strings.\n- Count the number of complete sentences in the text and include this count under a \"sentence_count\" key as an integer.\n- Identify all phone numbers formatted as \"XXX-XXX-XXXX\" and list them under a \"phone_numbers\" key as an array of strings.\n- Extract and include all hashtags (words beginning with \"#\") mentioned in the text under a \"hashtags\" key as an array of strings.\n- Determine the total character count of the input text and include this number under a \"character_count\" key as an integer."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000505_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief",
                                "emails",
                                "monetary_values",
                                "sentence_count",
                                "phone_numbers",
                                "hashtags",
                                "character_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract key travel itinerary details from the input text and represent them in a structured JSON object.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that briefly summarizes the main travel details in no more than 50 words.\n- Extract all departure and return dates from the text and list them under a \"travel_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all city names mentioned as destinations and include them in a \"destinations\" key as an array of strings.\n- Count the total number of travelers mentioned in the text and include this as an integer under a \"traveler_count\" key.\n- Extract any reservation codes or flight numbers mentioned in the text and list them under a \"reservation_ids\" key as an array of strings.\n- If currency amounts are present, extract and list them under a \"prices\" key as an array of strings in their original format.",
            "task_id": "000506",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "summary",
                "travel_dates",
                "destinations",
                "traveler_count",
                "reservation_ids",
                "prices"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000506_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract key travel itinerary details from the input text and represent them in a structured JSON object.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that briefly summarizes the main travel details in no more than 50 words.\n- Extract all departure and return dates from the text and list them under a \"travel_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all city names mentioned as destinations and include them in a \"destinations\" key as an array of strings.\n- Count the total number of travelers mentioned in the text and include this as an integer under a \"traveler_count\" key.\n- Extract any reservation codes or flight numbers mentioned in the text and list them under a \"reservation_ids\" key as an array of strings.\n- If currency amounts are present, extract and list them under a \"prices\" key as an array of strings in their original format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000506_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "summary",
                                "travel_dates",
                                "destinations",
                                "traveler_count",
                                "reservation_ids",
                                "prices"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text describing a coastal erosion impact report into a structured JSON object containing extracted environmental and geographical details.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value that briefly summarizes the main findings of the report in no more than 60 words.\n- Extract all dates mentioned in the text and list them under an \"erosion_dates\" key as an array of strings formatted as \"MM/DD/YYYY\".\n- Identify and include all coastline names and region identifiers mentioned in the text under a \"coastlines\" key as an array of strings.\n- Find every numerical measurement related to erosion rates (e.g., in meters per year) and list them under an \"erosion_rates\" key as an array of numbers.\n- Count the total number of sentences in the input text and provide this count as an integer value under a \"sentence_count\" key.\n- Extract any temperature readings (including their units, for example \"15°C\") mentioned in the text and list them under a \"temperatures\" key as an array of strings.\n- Identify any percentages that indicate risk levels or reduction estimates and include them under a \"risk_percentages\" key as an array of strings retaining the original percentage format.",
            "task_id": "000507",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "overview",
                "erosion_dates",
                "coastlines",
                "erosion_rates",
                "sentence_count",
                "temperatures",
                "risk_percentages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000507_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text describing a coastal erosion impact report into a structured JSON object containing extracted environmental and geographical details.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value that briefly summarizes the main findings of the report in no more than 60 words.\n- Extract all dates mentioned in the text and list them under an \"erosion_dates\" key as an array of strings formatted as \"MM/DD/YYYY\".\n- Identify and include all coastline names and region identifiers mentioned in the text under a \"coastlines\" key as an array of strings.\n- Find every numerical measurement related to erosion rates (e.g., in meters per year) and list them under an \"erosion_rates\" key as an array of numbers.\n- Count the total number of sentences in the input text and provide this count as an integer value under a \"sentence_count\" key.\n- Extract any temperature readings (including their units, for example \"15°C\") mentioned in the text and list them under a \"temperatures\" key as an array of strings.\n- Identify any percentages that indicate risk levels or reduction estimates and include them under a \"risk_percentages\" key as an array of strings retaining the original percentage format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000507_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "overview",
                                "erosion_dates",
                                "coastlines",
                                "erosion_rates",
                                "sentence_count",
                                "temperatures",
                                "risk_percentages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text, which details a travel itinerary, into a structured JSON object summarizing the trip highlights and logistics.\n\nFeature Requirements:\n- Include a \"destination\" key with a string value representing the primary travel destination mentioned.\n- Extract specific daily plans into an \"itinerary\" key as an array; each array element should be an object that contains a \"date\" key formatted as \"YYYY-MM-DD\" and an \"activities\" key as an array of strings listing activities planned for that day.\n- Count the total number of days mentioned in the travel plan and include this information as an integer under a \"total_days\" key.\n- Include a \"notes\" key with a string value summarizing any extra recommendations or travel tips mentioned, limited to 40 words.\n- If any flight numbers appear in the text (formatted as two uppercase letters followed by 3 to 4 digits, such as \"AB123\" or \"XY4567\"), list these under a \"flights\" key as an array of strings.",
            "task_id": "000508",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "destination",
                "itinerary",
                "itinerary[].date",
                "itinerary[].activities",
                "total_days",
                "notes",
                "flights"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000508_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text, which details a travel itinerary, into a structured JSON object summarizing the trip highlights and logistics.\n\nFeature Requirements:\n- Include a \"destination\" key with a string value representing the primary travel destination mentioned.\n- Extract specific daily plans into an \"itinerary\" key as an array; each array element should be an object that contains a \"date\" key formatted as \"YYYY-MM-DD\" and an \"activities\" key as an array of strings listing activities planned for that day.\n- Count the total number of days mentioned in the travel plan and include this information as an integer under a \"total_days\" key.\n- Include a \"notes\" key with a string value summarizing any extra recommendations or travel tips mentioned, limited to 40 words.\n- If any flight numbers appear in the text (formatted as two uppercase letters followed by 3 to 4 digits, such as \"AB123\" or \"XY4567\"), list these under a \"flights\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000508_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "destination",
                                "itinerary",
                                "itinerary[].date",
                                "itinerary[].activities",
                                "total_days",
                                "notes",
                                "flights"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input financial report text into a structured JSON object summarizing key numerical and organizational data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value that summarizes the overall conclusion of the financial report in exactly 40 to 50 words.\n- Extract all monetary amounts mentioned in the text and list them under a \"monetary_values\" key as an array of strings, preserving currency symbols (e.g., \"$1500\", \"€1200\").\n- Identify all business or organization names mentioned in the text and include them under an \"organizations\" key as an array of strings.\n- Locate and format all publication dates mentioned in the text, listing them under a \"publication_dates\" key as an array of strings in the \"MM/DD/YYYY\" format.\n- Count the total number of unique technical terms (distinct words not commonly used in everyday language) in the text and include this count under a \"tech_term_count\" key as an integer.\n- Extract any percentages related to profit or loss mentioned in the text and list them under a \"profit_changes\" key as an array of strings retaining the original format (e.g., \"20%\").\n- Extract any segmentation headings marked by a colon (\":\") in the text, trim any extra spaces, and list these under a \"report_sections\" key as an array of strings.\n- Include a \"total_character_count\" key with an integer value representing the total number of characters in the input text.\n- Identify all phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(xxx) xxx-xxxx\".",
            "task_id": "000509",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief",
                "monetary_values",
                "organizations",
                "publication_dates",
                "tech_term_count",
                "profit_changes",
                "report_sections",
                "total_character_count",
                "phone_numbers"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000509_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input financial report text into a structured JSON object summarizing key numerical and organizational data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value that summarizes the overall conclusion of the financial report in exactly 40 to 50 words.\n- Extract all monetary amounts mentioned in the text and list them under a \"monetary_values\" key as an array of strings, preserving currency symbols (e.g., \"$1500\", \"€1200\").\n- Identify all business or organization names mentioned in the text and include them under an \"organizations\" key as an array of strings.\n- Locate and format all publication dates mentioned in the text, listing them under a \"publication_dates\" key as an array of strings in the \"MM/DD/YYYY\" format.\n- Count the total number of unique technical terms (distinct words not commonly used in everyday language) in the text and include this count under a \"tech_term_count\" key as an integer.\n- Extract any percentages related to profit or loss mentioned in the text and list them under a \"profit_changes\" key as an array of strings retaining the original format (e.g., \"20%\").\n- Extract any segmentation headings marked by a colon (\":\") in the text, trim any extra spaces, and list these under a \"report_sections\" key as an array of strings.\n- Include a \"total_character_count\" key with an integer value representing the total number of characters in the input text.\n- Identify all phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(xxx) xxx-xxxx\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000509_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief",
                                "monetary_values",
                                "organizations",
                                "publication_dates",
                                "tech_term_count",
                                "profit_changes",
                                "report_sections",
                                "total_character_count",
                                "phone_numbers"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the input travel article into a structured JSON object that extracts destination details, scheduled events, and statistical figures.\n\nFeature Requirements:\n- Identify the first mentioned city or country in the text and include it as a string value under a \"destination\" key.\n- Extract all dates formatted as \"DD/MM/YYYY\" and list them under an \"event_dates\" key as an array of strings.\n- Calculate the sum of all durations mentioned (e.g., \"2 hours\", \"30 minutes\") in minutes and include this integer under a \"total_duration_minutes\" key.\n- Summarize mentions of popular tourist attractions in no more than 30 words and store this as a string under an \"attraction_summary\" key.\n- Identify numerical ratings (e.g., \"4.5 stars\") and list each occurrence in an array under a \"ratings\" key, preserving their original format.\n- Count the total number of sentences in the text and include this number as an integer under a \"sentence_count\" key.\n- Extract any monetary amounts mentioned in currency format (e.g., \"$100\", \"€50\") and include them in an array under a \"costs\" key.\n- Identify and list all transportation methods mentioned (e.g., \"bus\", \"train\", \"flight\") as an array of strings under a \"transport_methods\" key.\n- Capture and list any percentages mentioned (e.g., \"25% off\") in an array under a \"discounts\" key.\n- If weather conditions (e.g., \"sunny\", \"rainy\") are noted in the article, include them as an array under a \"weather_conditions\" key.",
            "task_id": "000510",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "destination",
                "event_dates",
                "total_duration_minutes",
                "attraction_summary",
                "ratings",
                "sentence_count",
                "costs",
                "transport_methods",
                "discounts",
                "weather_conditions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000510_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the input travel article into a structured JSON object that extracts destination details, scheduled events, and statistical figures.\n\nFeature Requirements:\n- Identify the first mentioned city or country in the text and include it as a string value under a \"destination\" key.\n- Extract all dates formatted as \"DD/MM/YYYY\" and list them under an \"event_dates\" key as an array of strings.\n- Calculate the sum of all durations mentioned (e.g., \"2 hours\", \"30 minutes\") in minutes and include this integer under a \"total_duration_minutes\" key.\n- Summarize mentions of popular tourist attractions in no more than 30 words and store this as a string under an \"attraction_summary\" key.\n- Identify numerical ratings (e.g., \"4.5 stars\") and list each occurrence in an array under a \"ratings\" key, preserving their original format.\n- Count the total number of sentences in the text and include this number as an integer under a \"sentence_count\" key.\n- Extract any monetary amounts mentioned in currency format (e.g., \"$100\", \"€50\") and include them in an array under a \"costs\" key.\n- Identify and list all transportation methods mentioned (e.g., \"bus\", \"train\", \"flight\") as an array of strings under a \"transport_methods\" key.\n- Capture and list any percentages mentioned (e.g., \"25% off\") in an array under a \"discounts\" key.\n- If weather conditions (e.g., \"sunny\", \"rainy\") are noted in the article, include them as an array under a \"weather_conditions\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000510_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "destination",
                                "event_dates",
                                "total_duration_minutes",
                                "attraction_summary",
                                "ratings",
                                "sentence_count",
                                "costs",
                                "transport_methods",
                                "discounts",
                                "weather_conditions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text describing a city-wide cultural fair into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that summarizes the main event in no more than 60 characters.\n- Extract the exact name of the fair from the input text and include it under an \"event_name\" key.\n- Identify and list all locations mentioned in the text under a \"locations\" key as an array of strings.\n- Extract any times provided (formatted as \"HH:MM\" or \"HH:MM AM/PM\") and list them under a \"times\" key as an array of strings.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract all monetary amounts (e.g., \"$20\" or \"$15.50\") from the text and include them under a \"prices\" key as an array of strings, preserving the original format.\n- Identify all hashtags (e.g., \"#CityFair\") mentioned in the text and list them under a \"hashtags\" key as an array of strings, sorted alphabetically.",
            "task_id": "000511",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "headline",
                "event_name",
                "locations",
                "times",
                "character_count",
                "prices",
                "hashtags"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000511_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text describing a city-wide cultural fair into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that summarizes the main event in no more than 60 characters.\n- Extract the exact name of the fair from the input text and include it under an \"event_name\" key.\n- Identify and list all locations mentioned in the text under a \"locations\" key as an array of strings.\n- Extract any times provided (formatted as \"HH:MM\" or \"HH:MM AM/PM\") and list them under a \"times\" key as an array of strings.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract all monetary amounts (e.g., \"$20\" or \"$15.50\") from the text and include them under a \"prices\" key as an array of strings, preserving the original format.\n- Identify all hashtags (e.g., \"#CityFair\") mentioned in the text and list them under a \"hashtags\" key as an array of strings, sorted alphabetically."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000511_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "headline",
                                "event_name",
                                "locations",
                                "times",
                                "character_count",
                                "prices",
                                "hashtags"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract structured information from a restaurant review text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the main points of the review in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"review_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all unique restaurant names mentioned in the text and include them in a \"restaurant_names\" key as an array of strings.\n- Extract all monetary amounts in US dollars (e.g., \"$20\") from the text and list them under a \"prices\" key as an array of strings.\n- Count the total number of characters in the input text and include this information as an integer value under a \"char_count\" key.\n- Detect and list any phone numbers in the text under a \"phone_numbers\" key as an array of strings using a consistent format.\n- If any percentages are mentioned in the text, list them under a \"discounts\" key as an array of strings, retaining the original format.\n- Include a \"word_frequency\" key that contains an object mapping each unique word longer than four characters to its occurrence count in the input text.",
            "task_id": "000512",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "review_summary",
                "review_dates",
                "restaurant_names",
                "prices",
                "char_count",
                "phone_numbers",
                "discounts",
                "word_frequency"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000512_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract structured information from a restaurant review text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the main points of the review in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"review_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all unique restaurant names mentioned in the text and include them in a \"restaurant_names\" key as an array of strings.\n- Extract all monetary amounts in US dollars (e.g., \"$20\") from the text and list them under a \"prices\" key as an array of strings.\n- Count the total number of characters in the input text and include this information as an integer value under a \"char_count\" key.\n- Detect and list any phone numbers in the text under a \"phone_numbers\" key as an array of strings using a consistent format.\n- If any percentages are mentioned in the text, list them under a \"discounts\" key as an array of strings, retaining the original format.\n- Include a \"word_frequency\" key that contains an object mapping each unique word longer than four characters to its occurrence count in the input text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000512_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "review_summary",
                                "review_dates",
                                "restaurant_names",
                                "prices",
                                "char_count",
                                "phone_numbers",
                                "discounts",
                                "word_frequency"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted details about a scientific expedition and its outcomes.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value summarizing the expedition details in no more than 50 words.\n- Extract all geographic coordinates mentioned in the text and list them under a \"coordinates\" key as an array of strings formatted as \"latitude, longitude\".\n- Identify all institutions or organizations referenced in the input and include them in an \"organizations\" key as an array of strings.\n- Extract any numerical measurements (such as distances, durations, or altitudes) from the text and include them under a \"measurements\" key as an object mapping measurement types to their numeric values.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- If any scientific terms ending with \"-ology\" are mentioned, list them under a \"special_terms\" key as an array of strings.\n- Extract the publication year from the text, if available, and include it as an integer value under a \"publication_year\" key.",
            "task_id": "000513",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "coordinates",
                "organizations",
                "measurements",
                "sentence_count",
                "special_terms",
                "publication_year"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000513_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted details about a scientific expedition and its outcomes.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value summarizing the expedition details in no more than 50 words.\n- Extract all geographic coordinates mentioned in the text and list them under a \"coordinates\" key as an array of strings formatted as \"latitude, longitude\".\n- Identify all institutions or organizations referenced in the input and include them in an \"organizations\" key as an array of strings.\n- Extract any numerical measurements (such as distances, durations, or altitudes) from the text and include them under a \"measurements\" key as an object mapping measurement types to their numeric values.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- If any scientific terms ending with \"-ology\" are mentioned, list them under a \"special_terms\" key as an array of strings.\n- Extract the publication year from the text, if available, and include it as an integer value under a \"publication_year\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000513_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "coordinates",
                                "organizations",
                                "measurements",
                                "sentence_count",
                                "special_terms",
                                "publication_year"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the provided business report text into a structured JSON object that extracts specific details and metrics.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value summarizing the main focus of the report in exactly one sentence.\n- Extract all valid email addresses from the text and list them in a \"contact_emails\" key as an array of strings.\n- Identify and list all dates formatted as \"DD/MM/YYYY\" found in the text under a \"report_dates\" key as an array of strings.\n- Extract every instance of a location prefixed with the word \"City:\" and include them as an array of strings under a \"cities\" key.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Identify all monetary values mentioned in the format \"$X,XXX\" and list them as an array of strings under an \"amounts\" key.",
            "task_id": "000514",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "headline",
                "contact_emails",
                "report_dates",
                "cities",
                "character_count",
                "amounts"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000514_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the provided business report text into a structured JSON object that extracts specific details and metrics.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value summarizing the main focus of the report in exactly one sentence.\n- Extract all valid email addresses from the text and list them in a \"contact_emails\" key as an array of strings.\n- Identify and list all dates formatted as \"DD/MM/YYYY\" found in the text under a \"report_dates\" key as an array of strings.\n- Extract every instance of a location prefixed with the word \"City:\" and include them as an array of strings under a \"cities\" key.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Identify all monetary values mentioned in the format \"$X,XXX\" and list them as an array of strings under an \"amounts\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000514_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "headline",
                                "contact_emails",
                                "report_dates",
                                "cities",
                                "character_count",
                                "amounts"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract and structure specific details from a narrative text about a historical expedition.\n\nFeature Requirements:\n- Include a \"brief_overview\" key with a string value summarizing the main idea of the text in no more than 40 words.\n- Identify and extract all historical time references mentioned in the text (e.g., eras, centuries) and list them under a \"time_periods\" key as an array of strings.\n- Extract all location names highlighted in the text and include them under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Identify all numeric values representing distances or measurements and list them under a \"measurements\" key as an array of strings in the format \"number unit\" (e.g., \"15 km\").\n- If any monetary amounts are present, list them under a \"monetary_values\" key as an array of strings retaining their original formatting (e.g., \"$500\").\n- Extract any proper names of historical figures mentioned in the text and include them under a \"figures\" key as an array of strings.\n- Identify any mentions of percentages and list them under a \"ratios\" key as an array of strings, exactly as they appear (e.g., \"20%\").",
            "task_id": "000515",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief_overview",
                "time_periods",
                "locations",
                "sentence_count",
                "measurements",
                "monetary_values",
                "figures",
                "ratios"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000515_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract and structure specific details from a narrative text about a historical expedition.\n\nFeature Requirements:\n- Include a \"brief_overview\" key with a string value summarizing the main idea of the text in no more than 40 words.\n- Identify and extract all historical time references mentioned in the text (e.g., eras, centuries) and list them under a \"time_periods\" key as an array of strings.\n- Extract all location names highlighted in the text and include them under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Identify all numeric values representing distances or measurements and list them under a \"measurements\" key as an array of strings in the format \"number unit\" (e.g., \"15 km\").\n- If any monetary amounts are present, list them under a \"monetary_values\" key as an array of strings retaining their original formatting (e.g., \"$500\").\n- Extract any proper names of historical figures mentioned in the text and include them under a \"figures\" key as an array of strings.\n- Identify any mentions of percentages and list them under a \"ratios\" key as an array of strings, exactly as they appear (e.g., \"20%\")."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000515_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief_overview",
                                "time_periods",
                                "locations",
                                "sentence_count",
                                "measurements",
                                "monetary_values",
                                "figures",
                                "ratios"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract detailed analytical information from the input text and present it in a structured JSON format.\n\nFeature Requirements:\n- Include an \"overview\" key with a concise, one-sentence summary of the input text, not exceeding 40 words.\n- Identify all time markers in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract and list all geographic locations mentioned in the input text under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Detect numeric values immediately followed by currency symbols and list them under a \"currencies\" key as an array of strings, retaining their original formatting.\n- Identify and record any email addresses mentioned in the text, listing them under an \"emails\" key as an array of strings.\n- Extract the five most frequently occurring topics or keywords from the input text and include them under a \"key_topics\" key as an array of strings.\n- Include a \"text_validation\" key which should state \"Valid\" if the input text is at least 100 words in length, or \"Insufficient text length\" if it is not.\n- Provide a \"metadata\" key that includes the character count of the entire input as an integer.\n- Include a \"punctuation_count\" key that records the total count of punctuation marks found in the input text as an integer.",
            "task_id": "000516",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "overview",
                "times",
                "locations",
                "sentence_count",
                "currencies",
                "emails",
                "key_topics",
                "text_validation",
                "metadata[character_count]",
                "punctuation_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000516_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract detailed analytical information from the input text and present it in a structured JSON format.\n\nFeature Requirements:\n- Include an \"overview\" key with a concise, one-sentence summary of the input text, not exceeding 40 words.\n- Identify all time markers in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract and list all geographic locations mentioned in the input text under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Detect numeric values immediately followed by currency symbols and list them under a \"currencies\" key as an array of strings, retaining their original formatting.\n- Identify and record any email addresses mentioned in the text, listing them under an \"emails\" key as an array of strings.\n- Extract the five most frequently occurring topics or keywords from the input text and include them under a \"key_topics\" key as an array of strings.\n- Include a \"text_validation\" key which should state \"Valid\" if the input text is at least 100 words in length, or \"Insufficient text length\" if it is not.\n- Provide a \"metadata\" key that includes the character count of the entire input as an integer.\n- Include a \"punctuation_count\" key that records the total count of punctuation marks found in the input text as an integer."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000516_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "overview",
                                "times",
                                "locations",
                                "sentence_count",
                                "currencies",
                                "emails",
                                "key_topics",
                                "text_validation",
                                "metadata[character_count]",
                                "punctuation_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the provided text into structured JSON containing organized details about an event report.\n\nFeature Requirements:\n- Provide an \"event_title\" key with a string value that captures the event's name, limited to 30 characters.\n- Extract a \"location\" key with the city and country from the text, formatted as \"City, Country\".\n- Identify all time details mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM AM/PM\".\n- Extract and list the top three adjectives describing the event under an \"adjectives\" key as an array of strings.\n- Include a \"participant_count\" key with an integer value representing the number of participants mentioned.\n- If monetary amounts are present, list them under an \"amounts\" key as an array of strings retaining the original currency symbols.\n- Provide a \"description\" key containing a summary of the event in no more than 70 words.\n- Include a \"keywords\" key listing unique recurring themes or key terms from the text as an array of strings.\n- Count the number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- Extract a date mentioned in the text and include it as a string under an \"event_date\" key formatted as \"YYYY-MM-DD\".",
            "task_id": "000517",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_title",
                "location",
                "times",
                "adjectives",
                "participant_count",
                "amounts",
                "description",
                "keywords",
                "sentence_count",
                "event_date"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000517_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the provided text into structured JSON containing organized details about an event report.\n\nFeature Requirements:\n- Provide an \"event_title\" key with a string value that captures the event's name, limited to 30 characters.\n- Extract a \"location\" key with the city and country from the text, formatted as \"City, Country\".\n- Identify all time details mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM AM/PM\".\n- Extract and list the top three adjectives describing the event under an \"adjectives\" key as an array of strings.\n- Include a \"participant_count\" key with an integer value representing the number of participants mentioned.\n- If monetary amounts are present, list them under an \"amounts\" key as an array of strings retaining the original currency symbols.\n- Provide a \"description\" key containing a summary of the event in no more than 70 words.\n- Include a \"keywords\" key listing unique recurring themes or key terms from the text as an array of strings.\n- Count the number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- Extract a date mentioned in the text and include it as a string under an \"event_date\" key formatted as \"YYYY-MM-DD\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000517_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_title",
                                "location",
                                "times",
                                "adjectives",
                                "participant_count",
                                "amounts",
                                "description",
                                "keywords",
                                "sentence_count",
                                "event_date"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the input text into a structured JSON object that organizes key information about a new product launch announcement.\n\nFeature Requirements:\n- Extract the \"product_name\" from the input text and include it as a string value.\n- Identify all launch dates mentioned in the text and list them under a \"launch_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Capture every instance of pricing information including currency symbols (e.g., \"$\", \"€\") and include them in a \"prices\" key as an array of strings.\n- Create a \"features\" key that holds an array of strings, each representing a distinct feature highlighted in the text.\n- Extract any technical specifications (such as \"RAM: 16GB\" or \"Storage: 512GB\") and list them under a \"specifications\" key in the format of an array of strings.\n- Identify and output any promotional codes mentioned in the text under a \"promo_codes\" key as an array of strings.\n- Include a \"word_count\" key that records the total number of words in the input text as an integer.\n- If a website URL is mentioned in the text, include it in a \"website\" key as a string, preserving the original format.",
            "task_id": "000518",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "product_name",
                "launch_dates",
                "prices",
                "features",
                "specifications",
                "promo_codes",
                "word_count",
                "website"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000518_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the input text into a structured JSON object that organizes key information about a new product launch announcement.\n\nFeature Requirements:\n- Extract the \"product_name\" from the input text and include it as a string value.\n- Identify all launch dates mentioned in the text and list them under a \"launch_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Capture every instance of pricing information including currency symbols (e.g., \"$\", \"€\") and include them in a \"prices\" key as an array of strings.\n- Create a \"features\" key that holds an array of strings, each representing a distinct feature highlighted in the text.\n- Extract any technical specifications (such as \"RAM: 16GB\" or \"Storage: 512GB\") and list them under a \"specifications\" key in the format of an array of strings.\n- Identify and output any promotional codes mentioned in the text under a \"promo_codes\" key as an array of strings.\n- Include a \"word_count\" key that records the total number of words in the input text as an integer.\n- If a website URL is mentioned in the text, include it in a \"website\" key as a string, preserving the original format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000518_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "product_name",
                                "launch_dates",
                                "prices",
                                "features",
                                "specifications",
                                "promo_codes",
                                "word_count",
                                "website"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the input text about a community festival into a structured JSON object containing detailed event and participant information.\n\nFeature Requirements:\n- Extract the festival's \"title\" as a string and store it under the key \"event_title\".\n- Identify the festival's \"date\" in the text, format it as \"YYYY-MM-DD\", and assign it to the key \"event_date\".\n- Locate the location where the event is held and include it as a string under the key \"venue\".\n- List all the names of performers and artists mentioned in the text as an array under the key \"performers\".\n- Detect any ticket prices or fees stated in the text and compile them as an array of strings under the key \"prices\", preserving the original formatting with currency symbols.\n- Provide a short summary of the festival's main activities in no more than 50 words under the key \"description\".\n- If mentioned, extract the total number of attendees as an integer and store it under the key \"attendee_count\".\n- Identify unique festival-related keywords (at least three) present in the text and list them in an array under the key \"keywords\".",
            "task_id": "000519",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_title",
                "event_date",
                "venue",
                "performers",
                "prices",
                "description",
                "attendee_count",
                "keywords"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000519_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the input text about a community festival into a structured JSON object containing detailed event and participant information.\n\nFeature Requirements:\n- Extract the festival's \"title\" as a string and store it under the key \"event_title\".\n- Identify the festival's \"date\" in the text, format it as \"YYYY-MM-DD\", and assign it to the key \"event_date\".\n- Locate the location where the event is held and include it as a string under the key \"venue\".\n- List all the names of performers and artists mentioned in the text as an array under the key \"performers\".\n- Detect any ticket prices or fees stated in the text and compile them as an array of strings under the key \"prices\", preserving the original formatting with currency symbols.\n- Provide a short summary of the festival's main activities in no more than 50 words under the key \"description\".\n- If mentioned, extract the total number of attendees as an integer and store it under the key \"attendee_count\".\n- Identify unique festival-related keywords (at least three) present in the text and list them in an array under the key \"keywords\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000519_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_title",
                                "event_date",
                                "venue",
                                "performers",
                                "prices",
                                "description",
                                "attendee_count",
                                "keywords"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text, which describes a community festival, into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly summarizes the theme of the festival in no more than 50 words.\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted in \"HH:MM\" (24-hour) format.\n- Identify all unique locations referenced in the text and include them in a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count under a \"sentence_count\" key as an integer.\n- Extract any monetary amounts mentioned in the text, listing them under a \"prices\" key as an array of strings preserving the original currency format (e.g., \"$15.00\").\n- Identify and list any social media handles mentioned, including them in a \"social_handles\" key as an array of strings.\n- Include a \"language\" key that identifies the language of the input text as a string (e.g., \"English\").",
            "task_id": "000520",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "times",
                "locations",
                "sentence_count",
                "prices",
                "social_handles",
                "language"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000520_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text, which describes a community festival, into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly summarizes the theme of the festival in no more than 50 words.\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted in \"HH:MM\" (24-hour) format.\n- Identify all unique locations referenced in the text and include them in a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count under a \"sentence_count\" key as an integer.\n- Extract any monetary amounts mentioned in the text, listing them under a \"prices\" key as an array of strings preserving the original currency format (e.g., \"$15.00\").\n- Identify and list any social media handles mentioned, including them in a \"social_handles\" key as an array of strings.\n- Include a \"language\" key that identifies the language of the input text as a string (e.g., \"English\")."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000520_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "times",
                                "locations",
                                "sentence_count",
                                "prices",
                                "social_handles",
                                "language"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract key weather forecast details from the input text and organize them in a structured JSON format.\n\nFeature Requirements:\n- Create an \"overview\" key that holds a brief summary of the weather forecast in no more than 50 words.\n- Extract all dates from the input text and list them under a \"forecast_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify and list all geographic locations mentioned in the text under a \"locations\" key as an array of strings.\n- If temperature values are provided, extract the highest and lowest temperatures and assign them to \"high_temperature\" and \"low_temperature\" keys as numeric values.\n- Extract any precipitation probability percentages presented in the text and include them in a \"rain_chance_percentages\" key as an array of strings, retaining the original formatting (e.g., \"30%\").\n- Count the total number of characters in the input text and store this number as an integer in a \"char_count\" key.\n- If wind speed information is mentioned, extract each numeric wind speed along with its unit and record them as objects in a \"wind_speeds\" array, where each object contains \"value\" and \"unit\" keys.",
            "task_id": "000521",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "overview",
                "forecast_dates",
                "locations",
                "high_temperature",
                "low_temperature",
                "rain_chance_percentages",
                "char_count",
                "wind_speeds[*][value]",
                "wind_speeds[*][unit]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000521_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract key weather forecast details from the input text and organize them in a structured JSON format.\n\nFeature Requirements:\n- Create an \"overview\" key that holds a brief summary of the weather forecast in no more than 50 words.\n- Extract all dates from the input text and list them under a \"forecast_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify and list all geographic locations mentioned in the text under a \"locations\" key as an array of strings.\n- If temperature values are provided, extract the highest and lowest temperatures and assign them to \"high_temperature\" and \"low_temperature\" keys as numeric values.\n- Extract any precipitation probability percentages presented in the text and include them in a \"rain_chance_percentages\" key as an array of strings, retaining the original formatting (e.g., \"30%\").\n- Count the total number of characters in the input text and store this number as an integer in a \"char_count\" key.\n- If wind speed information is mentioned, extract each numeric wind speed along with its unit and record them as objects in a \"wind_speeds\" array, where each object contains \"value\" and \"unit\" keys."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000521_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "overview",
                                "forecast_dates",
                                "locations",
                                "high_temperature",
                                "low_temperature",
                                "rain_chance_percentages",
                                "char_count",
                                "wind_speeds[*][value]",
                                "wind_speeds[*][unit]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract event details and related metrics from the input text.\n\nFeature Requirements:\n- Identify the \"event_title\" by extracting the capitalized phrase that appears at the beginning of the text.\n- Create an \"organizer\" key containing a string with the name of the organization or individual responsible for the event, if mentioned.\n- Detect all date ranges mentioned and output an \"event_period\" object with \"start_date\" and \"end_date\" formatted as \"YYYY-MM-DD\".\n- Calculate and include \"event_duration\" as the total number of days between \"start_date\" and \"end_date\".\n- Extract and list all locations mentioned under a \"venues\" key as an array of strings.\n- Identify any ticket pricing (e.g., \"$30\", \"€25\") and include them under a \"ticket_prices\" key as an array of strings.\n- Extract specific time information (e.g., \"09:00 AM\", \"17:30\") from the text and output it as an array of strings under a \"timings\" key.\n- Count the total number of words in the input and output that number under a \"total_words\" key.\n- Identify any percentage values mentioned (e.g., \"20%\") and include them under a \"discounts\" key as an array of strings.\n- If a specific event theme or special note is mentioned, include it as a string under a \"theme\" key.",
            "task_id": "000522",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_title",
                "organizer",
                "event_period[start_date]",
                "event_period[end_date]",
                "event_duration",
                "venues",
                "ticket_prices",
                "timings",
                "total_words",
                "discounts",
                "theme"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000522_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract event details and related metrics from the input text.\n\nFeature Requirements:\n- Identify the \"event_title\" by extracting the capitalized phrase that appears at the beginning of the text.\n- Create an \"organizer\" key containing a string with the name of the organization or individual responsible for the event, if mentioned.\n- Detect all date ranges mentioned and output an \"event_period\" object with \"start_date\" and \"end_date\" formatted as \"YYYY-MM-DD\".\n- Calculate and include \"event_duration\" as the total number of days between \"start_date\" and \"end_date\".\n- Extract and list all locations mentioned under a \"venues\" key as an array of strings.\n- Identify any ticket pricing (e.g., \"$30\", \"€25\") and include them under a \"ticket_prices\" key as an array of strings.\n- Extract specific time information (e.g., \"09:00 AM\", \"17:30\") from the text and output it as an array of strings under a \"timings\" key.\n- Count the total number of words in the input and output that number under a \"total_words\" key.\n- Identify any percentage values mentioned (e.g., \"20%\") and include them under a \"discounts\" key as an array of strings.\n- If a specific event theme or special note is mentioned, include it as a string under a \"theme\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000522_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_title",
                                "organizer",
                                "event_period[start_date]",
                                "event_period[end_date]",
                                "event_duration",
                                "venues",
                                "ticket_prices",
                                "timings",
                                "total_words",
                                "discounts",
                                "theme"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nAnalyze the given historical narrative and produce a structured JSON object that extracts detailed information and statistics from the text.\n\nFeature Requirements:\n- Include a \"historical_summary\" key with a string that summarizes the narrative in no more than 50 words.\n- Extract all occurrences of geographic locations mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all significant events described in the text and compile them under an \"events\" key as an array of objects, where each object contains \"description\" and \"date\" keys.\n- Count the occurrences of the words \"independence\", \"empire\", and \"colonial\" and include this data as an object under a \"keyword_counts\" key with each word as a key and its count as an integer.\n- Locate and list any monetary amounts found in the text under a \"money_values\" key as an array of strings, preserving the original formatting (e.g., \"$500\", \"€250\").\n- Add a \"line_count\" key with an integer representing the total number of lines in the input text.\n- Identify all fractions present in the text (such as \"1/3\", \"2/5\") and include them under a \"fractions\" key as an array of strings.\n- Provide a \"most_frequent_word\" key with the string that represents the word appearing most frequently in the text.\n- Extract any explicitly enumerated or bulleted lists in the text and include them under a \"lists_found\" key as an array of arrays, where each sub-array represents a separate list.\n- Include a \"reading_time_minutes\" key with an estimated reading time in minutes, calculated based on an average reading speed of 200 words per minute.",
            "task_id": "000523",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "historical_summary",
                "locations",
                "events",
                "events[].description",
                "events[].date",
                "keyword_counts",
                "keyword_counts[independence]",
                "keyword_counts[empire]",
                "keyword_counts[colonial]",
                "money_values",
                "line_count",
                "fractions",
                "most_frequent_word",
                "lists_found",
                "reading_time_minutes"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000523_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nAnalyze the given historical narrative and produce a structured JSON object that extracts detailed information and statistics from the text.\n\nFeature Requirements:\n- Include a \"historical_summary\" key with a string that summarizes the narrative in no more than 50 words.\n- Extract all occurrences of geographic locations mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all significant events described in the text and compile them under an \"events\" key as an array of objects, where each object contains \"description\" and \"date\" keys.\n- Count the occurrences of the words \"independence\", \"empire\", and \"colonial\" and include this data as an object under a \"keyword_counts\" key with each word as a key and its count as an integer.\n- Locate and list any monetary amounts found in the text under a \"money_values\" key as an array of strings, preserving the original formatting (e.g., \"$500\", \"€250\").\n- Add a \"line_count\" key with an integer representing the total number of lines in the input text.\n- Identify all fractions present in the text (such as \"1/3\", \"2/5\") and include them under a \"fractions\" key as an array of strings.\n- Provide a \"most_frequent_word\" key with the string that represents the word appearing most frequently in the text.\n- Extract any explicitly enumerated or bulleted lists in the text and include them under a \"lists_found\" key as an array of arrays, where each sub-array represents a separate list.\n- Include a \"reading_time_minutes\" key with an estimated reading time in minutes, calculated based on an average reading speed of 200 words per minute."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000523_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "historical_summary",
                                "locations",
                                "events",
                                "events[].description",
                                "events[].date",
                                "keyword_counts",
                                "keyword_counts[independence]",
                                "keyword_counts[empire]",
                                "keyword_counts[colonial]",
                                "money_values",
                                "line_count",
                                "fractions",
                                "most_frequent_word",
                                "lists_found",
                                "reading_time_minutes"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input narrative into a structured JSON object capturing specific details and analytics.\n\nFeature Requirements:\n- Include a \"description\" key with a string value that provides a concise summary of the narrative in no more than 60 words.\n- Extract all numerical values found within the text (including whole numbers and decimals) and list them under a \"numbers\" key as an array of strings.\n- Identify every unique geographical location mentioned and include them under a \"locations\" key as an array of strings.\n- Compute the total number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- If any time values are present, extract them and list these under a \"times\" key as an array of strings formatted in 24-hour \"HH:MM\" style.\n- Detect an explicit title if one exists at the beginning of the text and include it under a \"title\" key as a string.\n- Create a \"word_frequency\" key mapping each word (case-insensitive and appearing more than once) to its occurrence count as an object.",
            "task_id": "000524",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "description",
                "numbers",
                "locations",
                "sentence_count",
                "times",
                "title",
                "word_frequency"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000524_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input narrative into a structured JSON object capturing specific details and analytics.\n\nFeature Requirements:\n- Include a \"description\" key with a string value that provides a concise summary of the narrative in no more than 60 words.\n- Extract all numerical values found within the text (including whole numbers and decimals) and list them under a \"numbers\" key as an array of strings.\n- Identify every unique geographical location mentioned and include them under a \"locations\" key as an array of strings.\n- Compute the total number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- If any time values are present, extract them and list these under a \"times\" key as an array of strings formatted in 24-hour \"HH:MM\" style.\n- Detect an explicit title if one exists at the beginning of the text and include it under a \"title\" key as a string.\n- Create a \"word_frequency\" key mapping each word (case-insensitive and appearing more than once) to its occurrence count as an object."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000524_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "description",
                                "numbers",
                                "locations",
                                "sentence_count",
                                "times",
                                "title",
                                "word_frequency"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nAnalyze the input text about a weather research report and output a JSON summarizing the key findings.\n\nFeature Requirements:\n- Include a \"weather_summary\" key with a brief description of the main weather pattern discussed in the text, using no more than 40 words.\n- Extract all temperature values mentioned in the text and list them under a \"temperatures\" key as an array of strings, formatted with the degree symbol and units (e.g., \"23°C\").\n- Identify each meteorological phenomenon mentioned (such as \"rain\", \"snow\", \"wind\", \"fog\") and include them in a \"phenomena\" key as an array of strings.\n- Count the total number of sentences in the input text and provide this number as an integer under a \"sentence_count\" key.\n- Extract any specific location names referenced in the report and include them in a \"locations\" key as an array of strings.\n- If the text mentions any wind speeds, extract them and list the values under a \"wind_speeds\" key as an array of strings, maintaining the original format (e.g., \"15 km/h\").",
            "task_id": "000525",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "weather_summary",
                "temperatures",
                "phenomena",
                "sentence_count",
                "locations",
                "wind_speeds"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000525_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nAnalyze the input text about a weather research report and output a JSON summarizing the key findings.\n\nFeature Requirements:\n- Include a \"weather_summary\" key with a brief description of the main weather pattern discussed in the text, using no more than 40 words.\n- Extract all temperature values mentioned in the text and list them under a \"temperatures\" key as an array of strings, formatted with the degree symbol and units (e.g., \"23°C\").\n- Identify each meteorological phenomenon mentioned (such as \"rain\", \"snow\", \"wind\", \"fog\") and include them in a \"phenomena\" key as an array of strings.\n- Count the total number of sentences in the input text and provide this number as an integer under a \"sentence_count\" key.\n- Extract any specific location names referenced in the report and include them in a \"locations\" key as an array of strings.\n- If the text mentions any wind speeds, extract them and list the values under a \"wind_speeds\" key as an array of strings, maintaining the original format (e.g., \"15 km/h\")."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000525_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "weather_summary",
                                "temperatures",
                                "phenomena",
                                "sentence_count",
                                "locations",
                                "wind_speeds"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the provided project meeting summary into a structured JSON object detailing specific components mentioned in the text.\n\nFeature Requirements:\n- Include a \"meeting_topic\" key with a string value that summarizes the main subject of the meeting in no more than 50 words.\n- Extract all meeting dates from the input text and list them under a \"meeting_dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all project phase names mentioned (such as \"planning\", \"execution\", \"evaluation\") and include them in a \"phases\" key as an array of strings.\n- Extract any budget figures mentioned in the text (formatted like \"$1000\", \"$500K\") and include them under a \"budgets\" key as an array of strings retaining the original formatting.\n- Count the total number of characters in the input text and include this number under a \"character_count\" key as an integer.\n- Identify all team lead names mentioned in the input text and include them in a \"team_leads\" key as an array of strings.\n- Extract the names of all locations or venues referred to in the meeting and include them under a \"locations\" key as an array of strings.\n- Identify action items mentioned in the text and list them under a \"tasks\" key, where each task is an object with \"description\" and, if available, a \"responsible\" key representing the person assigned.\n- Ensure each key follows the structure provided and that all values are derived directly from the input text.",
            "task_id": "000526",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "meeting_topic",
                "meeting_dates",
                "phases",
                "budgets",
                "character_count",
                "team_leads",
                "locations",
                "tasks",
                "tasks[].description",
                "tasks[].responsible"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000526_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the provided project meeting summary into a structured JSON object detailing specific components mentioned in the text.\n\nFeature Requirements:\n- Include a \"meeting_topic\" key with a string value that summarizes the main subject of the meeting in no more than 50 words.\n- Extract all meeting dates from the input text and list them under a \"meeting_dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all project phase names mentioned (such as \"planning\", \"execution\", \"evaluation\") and include them in a \"phases\" key as an array of strings.\n- Extract any budget figures mentioned in the text (formatted like \"$1000\", \"$500K\") and include them under a \"budgets\" key as an array of strings retaining the original formatting.\n- Count the total number of characters in the input text and include this number under a \"character_count\" key as an integer.\n- Identify all team lead names mentioned in the input text and include them in a \"team_leads\" key as an array of strings.\n- Extract the names of all locations or venues referred to in the meeting and include them under a \"locations\" key as an array of strings.\n- Identify action items mentioned in the text and list them under a \"tasks\" key, where each task is an object with \"description\" and, if available, a \"responsible\" key representing the person assigned.\n- Ensure each key follows the structure provided and that all values are derived directly from the input text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000526_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "meeting_topic",
                                "meeting_dates",
                                "phases",
                                "budgets",
                                "character_count",
                                "team_leads",
                                "locations",
                                "tasks",
                                "tasks[].description",
                                "tasks[].responsible"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object that organizes key details and data points extracted from the text.\n\nFeature Requirements:\n- Include a \"topic\" key with a string value summarizing the main theme of the input text in no more than 30 words.\n- Extract all location names (such as cities and countries) mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all time stamps in the format \"HH:MM\" and list them under a \"times\" key as an array of strings sorted in ascending order.\n- Search the text for any percentages mentioned and list them under a \"percentages\" key as an array of strings, preserving the percent symbol.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- If measurement values with units such as \"km\" or \"lbs\" appear in the text, extract them and list under a \"measurements\" key as an array of strings.\n- Identify all unique acronyms (sequences of uppercase letters, at least two characters in length) mentioned in the text and include them under an \"acronyms\" key as an array of strings.",
            "task_id": "000527",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "topic",
                "locations",
                "times",
                "percentages",
                "sentence_count",
                "measurements",
                "acronyms"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000527_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object that organizes key details and data points extracted from the text.\n\nFeature Requirements:\n- Include a \"topic\" key with a string value summarizing the main theme of the input text in no more than 30 words.\n- Extract all location names (such as cities and countries) mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all time stamps in the format \"HH:MM\" and list them under a \"times\" key as an array of strings sorted in ascending order.\n- Search the text for any percentages mentioned and list them under a \"percentages\" key as an array of strings, preserving the percent symbol.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- If measurement values with units such as \"km\" or \"lbs\" appear in the text, extract them and list under a \"measurements\" key as an array of strings.\n- Identify all unique acronyms (sequences of uppercase letters, at least two characters in length) mentioned in the text and include them under an \"acronyms\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000527_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "topic",
                                "locations",
                                "times",
                                "percentages",
                                "sentence_count",
                                "measurements",
                                "acronyms"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nParse a blog post about environmental conservation and generate a structured summary with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that provides a concise summary of the blog post's main message in no more than 20 words.\n- Extract all numerical measurements (with accompanying units like liters, kilograms, meters) found in the text and list them under a \"measurements\" key as an array of strings, preserving the original format.\n- Identify all city names mentioned in the text and include them in a \"cities\" key as an array of strings.\n- Extract the publication date from the text, if available, and provide it under a \"publication_date\" key in \"YYYY-MM-DD\" format; if no date is found, set the value to null.\n- Count the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- List all highlighted scientific terms that begin with a capital letter and appear technical under a \"scientific_terms\" key as an array of strings.",
            "task_id": "000528",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "headline",
                "measurements",
                "cities",
                "publication_date",
                "sentence_count",
                "scientific_terms"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000528_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nParse a blog post about environmental conservation and generate a structured summary with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that provides a concise summary of the blog post's main message in no more than 20 words.\n- Extract all numerical measurements (with accompanying units like liters, kilograms, meters) found in the text and list them under a \"measurements\" key as an array of strings, preserving the original format.\n- Identify all city names mentioned in the text and include them in a \"cities\" key as an array of strings.\n- Extract the publication date from the text, if available, and provide it under a \"publication_date\" key in \"YYYY-MM-DD\" format; if no date is found, set the value to null.\n- Count the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- List all highlighted scientific terms that begin with a capital letter and appear technical under a \"scientific_terms\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000528_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "headline",
                                "measurements",
                                "cities",
                                "publication_date",
                                "sentence_count",
                                "scientific_terms"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract structured details from a customer feedback email message.\n\nFeature Requirements:\n- Include a key \"overview\" with a summary of the email content in 40 words or less.\n- Extract all product names mentioned in the email and list them under \"products\" as an array of strings, ensuring each name starts with an uppercase letter.\n- Identify and list all email addresses present in the text under \"contact_emails\" as an array of strings.\n- Extract any monetary amounts (e.g., \"$49.99\") from the email and include them under \"prices\" as an array of strings.\n- Count the total number of sentences in the email and provide this count as an integer under \"sentence_count\".\n- If any discount percentages are mentioned (e.g., \"20%\"), list them under \"discounts\" as an array of strings.",
            "task_id": "000529",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "overview",
                "products",
                "contact_emails",
                "prices",
                "sentence_count",
                "discounts"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000529_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract structured details from a customer feedback email message.\n\nFeature Requirements:\n- Include a key \"overview\" with a summary of the email content in 40 words or less.\n- Extract all product names mentioned in the email and list them under \"products\" as an array of strings, ensuring each name starts with an uppercase letter.\n- Identify and list all email addresses present in the text under \"contact_emails\" as an array of strings.\n- Extract any monetary amounts (e.g., \"$49.99\") from the email and include them under \"prices\" as an array of strings.\n- Count the total number of sentences in the email and provide this count as an integer under \"sentence_count\".\n- If any discount percentages are mentioned (e.g., \"20%\"), list them under \"discounts\" as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000529_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "overview",
                                "products",
                                "contact_emails",
                                "prices",
                                "sentence_count",
                                "discounts"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract detailed event information from the provided event description text.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value that represents the main title of the event.\n- Extract a \"venue\" key with a string value that identifies the location where the event is being held.\n- Identify all speakers mentioned in the text and list them under a \"speakers\" key as an array of strings.\n- Include a \"topics\" key with an array of strings extracted from the key topics discussed in the event.\n- Parse any time details from the text and list them under a \"times\" key as an array of strings in \"HH:MM\" 24-hour format.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Extract any provided contact emails and list them under a \"contact_emails\" key as an array of strings.\n- If any cost information is present in the text, list those values under a \"costs\" key as an array of strings that retain the original currency format (e.g., \"$50\").",
            "task_id": "000530",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_title",
                "venue",
                "speakers",
                "topics",
                "times",
                "sentence_count",
                "contact_emails",
                "costs"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000530_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract detailed event information from the provided event description text.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value that represents the main title of the event.\n- Extract a \"venue\" key with a string value that identifies the location where the event is being held.\n- Identify all speakers mentioned in the text and list them under a \"speakers\" key as an array of strings.\n- Include a \"topics\" key with an array of strings extracted from the key topics discussed in the event.\n- Parse any time details from the text and list them under a \"times\" key as an array of strings in \"HH:MM\" 24-hour format.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Extract any provided contact emails and list them under a \"contact_emails\" key as an array of strings.\n- If any cost information is present in the text, list those values under a \"costs\" key as an array of strings that retain the original currency format (e.g., \"$50\")."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000530_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_title",
                                "venue",
                                "speakers",
                                "topics",
                                "times",
                                "sentence_count",
                                "contact_emails",
                                "costs"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the input text about a market analysis report into a structured JSON object that extracts and organizes key details.\n\nFeature Requirements:\n- Include a \"report_summary\" key with a string that summarizes the main theme of the report in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"report_dates\" key as an array of strings, each formatted as \"YYYY-MM-DD\".\n- Identify all unique company names noted in the input text and include them in a \"company_names\" key as an array of strings.\n- Locate all currency values (denoted with a \"$\" sign) in the input text and list them under a \"financial_figures\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer value under a \"word_count\" key.\n- Identify any industry sectors mentioned in the input text and include them in an \"industry_sectors\" key as an array of strings.\n- If any percentages are present in the text, extract them and list them under a \"percentage_changes\" key as an array of strings, keeping the original format (e.g., \"25%\").\n- Extract any notable product releases mentioned, and include them in a \"product_releases\" key as an array of strings.",
            "task_id": "000531",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "report_summary",
                "report_dates",
                "company_names",
                "financial_figures",
                "word_count",
                "industry_sectors",
                "percentage_changes",
                "product_releases"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000531_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the input text about a market analysis report into a structured JSON object that extracts and organizes key details.\n\nFeature Requirements:\n- Include a \"report_summary\" key with a string that summarizes the main theme of the report in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"report_dates\" key as an array of strings, each formatted as \"YYYY-MM-DD\".\n- Identify all unique company names noted in the input text and include them in a \"company_names\" key as an array of strings.\n- Locate all currency values (denoted with a \"$\" sign) in the input text and list them under a \"financial_figures\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer value under a \"word_count\" key.\n- Identify any industry sectors mentioned in the input text and include them in an \"industry_sectors\" key as an array of strings.\n- If any percentages are present in the text, extract them and list them under a \"percentage_changes\" key as an array of strings, keeping the original format (e.g., \"25%\").\n- Extract any notable product releases mentioned, and include them in a \"product_releases\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000531_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "report_summary",
                                "report_dates",
                                "company_names",
                                "financial_figures",
                                "word_count",
                                "industry_sectors",
                                "percentage_changes",
                                "product_releases"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract detailed information regarding a restaurant review from the input text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the overall sentiment of the review in no more than 40 words.\n- Extract the restaurant’s name mentioned in the text and include it under a \"restaurant_name\" key as a string.\n- Identify all dishes mentioned in the text and include them in a \"dishes\" key as an array of strings.\n- Extract any phone numbers formatted as \"(XXX) XXX-XXXX\" found in the text and list them under a \"contact_numbers\" key as an array of strings.\n- Identify all dates representing dining events, convert them to the \"YYYY-MM-DD\" format, and list them under a \"visit_dates\" key as an array of strings.\n- Count the total number of sentences in the input text and include the count under a \"sentence_count\" key as an integer.\n- Extract all monetary amounts indicated with a dollar sign (e.g., \"$20\") and list them under a \"prices\" key as an array of strings.\n- Include a \"word_count\" key with an integer value representing the total number of words in the input text.",
            "task_id": "000532",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "review_summary",
                "restaurant_name",
                "dishes",
                "contact_numbers",
                "visit_dates",
                "sentence_count",
                "prices",
                "word_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000532_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract detailed information regarding a restaurant review from the input text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the overall sentiment of the review in no more than 40 words.\n- Extract the restaurant’s name mentioned in the text and include it under a \"restaurant_name\" key as a string.\n- Identify all dishes mentioned in the text and include them in a \"dishes\" key as an array of strings.\n- Extract any phone numbers formatted as \"(XXX) XXX-XXXX\" found in the text and list them under a \"contact_numbers\" key as an array of strings.\n- Identify all dates representing dining events, convert them to the \"YYYY-MM-DD\" format, and list them under a \"visit_dates\" key as an array of strings.\n- Count the total number of sentences in the input text and include the count under a \"sentence_count\" key as an integer.\n- Extract all monetary amounts indicated with a dollar sign (e.g., \"$20\") and list them under a \"prices\" key as an array of strings.\n- Include a \"word_count\" key with an integer value representing the total number of words in the input text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000532_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "review_summary",
                                "restaurant_name",
                                "dishes",
                                "contact_numbers",
                                "visit_dates",
                                "sentence_count",
                                "prices",
                                "word_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted insights and details about events described.\n\nFeature Requirements:\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\" in 24-hour notation.\n- Identify every geographical location mentioned and include them in a \"locations\" key as an array of strings.\n- Summarize the overall event described in the text in no more than 60 words and include it under a \"event_summary\" key.\n- Extract all email addresses found in the text and list them under an \"emails\" key as an array of strings, preserving their original format.\n- Count the total number of sentences within the input text and include the number as an integer value under a \"sentence_count\" key.\n- Identify all unique action verbs present in the text and list them under an \"action_verbs\" key as an array of strings.\n- Record the total number of characters in the input text and include this count as an integer under a \"character_count\" key.\n- If currency amounts are mentioned, extract them and list them under a \"currencies\" key as an array of strings in the original format.\n- Detect and list any phone numbers mentioned in the text under a \"phone_numbers\" key as an array of strings, ensuring they follow the \"XXX-XXX-XXXX\" format.",
            "task_id": "000533",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "times",
                "locations",
                "event_summary",
                "emails",
                "sentence_count",
                "action_verbs",
                "character_count",
                "currencies",
                "phone_numbers"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000533_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted insights and details about events described.\n\nFeature Requirements:\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\" in 24-hour notation.\n- Identify every geographical location mentioned and include them in a \"locations\" key as an array of strings.\n- Summarize the overall event described in the text in no more than 60 words and include it under a \"event_summary\" key.\n- Extract all email addresses found in the text and list them under an \"emails\" key as an array of strings, preserving their original format.\n- Count the total number of sentences within the input text and include the number as an integer value under a \"sentence_count\" key.\n- Identify all unique action verbs present in the text and list them under an \"action_verbs\" key as an array of strings.\n- Record the total number of characters in the input text and include this count as an integer under a \"character_count\" key.\n- If currency amounts are mentioned, extract them and list them under a \"currencies\" key as an array of strings in the original format.\n- Detect and list any phone numbers mentioned in the text under a \"phone_numbers\" key as an array of strings, ensuring they follow the \"XXX-XXX-XXXX\" format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000533_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "times",
                                "locations",
                                "event_summary",
                                "emails",
                                "sentence_count",
                                "action_verbs",
                                "character_count",
                                "currencies",
                                "phone_numbers"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract essential details from the input text and organize them into a structured JSON object.\n\nFeature Requirements:\n- Include a \"brief\" key with a concise summary of the main objective of the input text, limited to 50 words.\n- Identify and extract all geographical coordinates in the format \"lat: <value>, long: <value>\" and list them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys.\n- Locate every monetary value mentioned in the text (prefixed with a currency symbol) and list them under a \"monetary_values\" key as an array of strings formatted to two decimal places.\n- Detect all instances of measurement units (e.g., \"km\", \"miles\", \"lbs\") paired with numerical values and include them under a \"measurements\" key as an array of objects, each with \"value\" and \"unit\" keys.\n- Count the total number of sentences in the input text and include that number under a \"sentence_count\" key.\n- Extract any email addresses found in the text and list them under an \"emails\" key as an array of strings.\n- Identify all hashtags (words starting with \"#\") present in the text and list them under a \"hashtags\" key as an array of strings.",
            "task_id": "000534",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief",
                "coordinates",
                "coordinates[0][latitude]",
                "coordinates[0][longitude]",
                "monetary_values",
                "measurements",
                "measurements[0][value]",
                "measurements[0][unit]",
                "sentence_count",
                "emails",
                "hashtags"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000534_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract essential details from the input text and organize them into a structured JSON object.\n\nFeature Requirements:\n- Include a \"brief\" key with a concise summary of the main objective of the input text, limited to 50 words.\n- Identify and extract all geographical coordinates in the format \"lat: <value>, long: <value>\" and list them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys.\n- Locate every monetary value mentioned in the text (prefixed with a currency symbol) and list them under a \"monetary_values\" key as an array of strings formatted to two decimal places.\n- Detect all instances of measurement units (e.g., \"km\", \"miles\", \"lbs\") paired with numerical values and include them under a \"measurements\" key as an array of objects, each with \"value\" and \"unit\" keys.\n- Count the total number of sentences in the input text and include that number under a \"sentence_count\" key.\n- Extract any email addresses found in the text and list them under an \"emails\" key as an array of strings.\n- Identify all hashtags (words starting with \"#\") present in the text and list them under a \"hashtags\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000534_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief",
                                "coordinates",
                                "coordinates[0][latitude]",
                                "coordinates[0][longitude]",
                                "monetary_values",
                                "measurements",
                                "measurements[0][value]",
                                "measurements[0][unit]",
                                "sentence_count",
                                "emails",
                                "hashtags"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract specific event information from the input text and organize it into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that succinctly describes the event in no more than 60 words.\n- Extract the primary event date from the input text and include it under a \"date\" key formatted as \"DD-MM-YYYY\".\n- Identify the event location mentioned in the text and store it under a \"location\" key as a string.\n- Extract any ticket price information mentioned and list each price under a \"ticket_prices\" key as an array of strings.\n- Count the total number of unique event-related actions described and include this as an integer under an \"action_count\" key.\n- If available, extract an organizer's contact phone number and include it under a \"contact_phone\" key as a string.\n- Identify any time details (like start and end times) and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract all mentions of special guest names and include them under a \"guests\" key as an array of strings.",
            "task_id": "000535",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "date",
                "location",
                "ticket_prices",
                "action_count",
                "contact_phone",
                "times",
                "guests"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000535_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract specific event information from the input text and organize it into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that succinctly describes the event in no more than 60 words.\n- Extract the primary event date from the input text and include it under a \"date\" key formatted as \"DD-MM-YYYY\".\n- Identify the event location mentioned in the text and store it under a \"location\" key as a string.\n- Extract any ticket price information mentioned and list each price under a \"ticket_prices\" key as an array of strings.\n- Count the total number of unique event-related actions described and include this as an integer under an \"action_count\" key.\n- If available, extract an organizer's contact phone number and include it under a \"contact_phone\" key as a string.\n- Identify any time details (like start and end times) and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract all mentions of special guest names and include them under a \"guests\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000535_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "date",
                                "location",
                                "ticket_prices",
                                "action_count",
                                "contact_phone",
                                "times",
                                "guests"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract structured details from a crime narrative text into a JSON object.\n\nFeature Requirements:\n- Include an \"incident_report\" key with a string value summarizing the main event of the story in no more than 60 words.\n- Identify all locations mentioned in the text and list them under a \"locations\" key as an array of unique strings.\n- Extract names of individuals involved as suspects and provide them in a \"suspects\" key as an array of strings.\n- Identify all time references within the text and include them under a \"times\" key as an array of strings formatted in \"HH:MM\" using 24-hour notation.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Extract any phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(XXX) XXX-XXXX\".",
            "task_id": "000536",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "incident_report",
                "locations",
                "suspects",
                "times",
                "sentence_count",
                "phone_numbers"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000536_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract structured details from a crime narrative text into a JSON object.\n\nFeature Requirements:\n- Include an \"incident_report\" key with a string value summarizing the main event of the story in no more than 60 words.\n- Identify all locations mentioned in the text and list them under a \"locations\" key as an array of unique strings.\n- Extract names of individuals involved as suspects and provide them in a \"suspects\" key as an array of strings.\n- Identify all time references within the text and include them under a \"times\" key as an array of strings formatted in \"HH:MM\" using 24-hour notation.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Extract any phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(XXX) XXX-XXXX\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000536_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "incident_report",
                                "locations",
                                "suspects",
                                "times",
                                "sentence_count",
                                "phone_numbers"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nAnalyze the input text and organize extracted details into a structured JSON object with clearly defined keys.\n\nFeature Requirements:\n- Include a \"title\" key containing the first sentence of the text.\n- Extract all monetary amounts mentioned (formatted with a currency symbol, e.g., \"$150\") and list them in a \"monetary_values\" array.\n- Identify and list all country names mentioned in the text under a \"countries\" key as an array of strings.\n- Perform a basic sentiment analysis and output the result as a \"sentiment\" key with a value of \"positive\", \"neutral\", or \"negative\".\n- Count all numerical values in the text and include an object under the key \"numeric_summary\" that has two properties: \"number_count\" for the total count and \"average_value\" for their average.\n- Determine the total number of sentences and provide this count under a \"sentence_count\" key as an integer.\n- Extract time notations in the \"HH:MM\" 24-hour format and list them in a \"times\" array.\n- Identify and list unique keywords from the first paragraph in a \"keywords\" array.",
            "task_id": "000537",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "monetary_values",
                "countries",
                "sentiment",
                "numeric_summary[number_count]",
                "numeric_summary[average_value]",
                "sentence_count",
                "times",
                "keywords"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000537_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nAnalyze the input text and organize extracted details into a structured JSON object with clearly defined keys.\n\nFeature Requirements:\n- Include a \"title\" key containing the first sentence of the text.\n- Extract all monetary amounts mentioned (formatted with a currency symbol, e.g., \"$150\") and list them in a \"monetary_values\" array.\n- Identify and list all country names mentioned in the text under a \"countries\" key as an array of strings.\n- Perform a basic sentiment analysis and output the result as a \"sentiment\" key with a value of \"positive\", \"neutral\", or \"negative\".\n- Count all numerical values in the text and include an object under the key \"numeric_summary\" that has two properties: \"number_count\" for the total count and \"average_value\" for their average.\n- Determine the total number of sentences and provide this count under a \"sentence_count\" key as an integer.\n- Extract time notations in the \"HH:MM\" 24-hour format and list them in a \"times\" array.\n- Identify and list unique keywords from the first paragraph in a \"keywords\" array."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000537_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "monetary_values",
                                "countries",
                                "sentiment",
                                "numeric_summary[number_count]",
                                "numeric_summary[average_value]",
                                "sentence_count",
                                "times",
                                "keywords"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from a customer experience narrative related to a technology product.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string summarizing the overall sentiment and main points of the narrative in no more than 50 words.\n- Identify and list all product model names mentioned under a \"products\" key as an array of strings.\n- Extract all order numbers formatted as \"ORD\" followed by 7 digits and include them in an \"order_numbers\" key as an array of strings.\n- Locate and capture any time stamps formatted in 24-hour \"HH:MM\" format, placing them under a \"time_stamps\" key as an array of strings.\n- Count and include the total number of words in the input text as an integer value under a \"word_count\" key.\n- Identify and list all currency amounts present in the text (formatted as \"$\" followed by numeric values with two decimal places) under a \"prices\" key as an array of strings.\n- Extract any email addresses mentioned and include them in an \"emails\" key as an array of strings.\n- Count all numeric ratings mentioned (such as stars rated between 1 and 5) and include them as an array of integers under a \"ratings\" key.\n- Compute and include the total number of characters in the input text as an integer value under a \"char_count\" key.\n- If any warranty-related comments are made, trim each to 100 characters and list them under a \"warranty_comments\" key as an array of strings.",
            "task_id": "000538",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "review_summary",
                "products",
                "order_numbers",
                "time_stamps",
                "word_count",
                "prices",
                "emails",
                "ratings",
                "char_count",
                "warranty_comments"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000538_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from a customer experience narrative related to a technology product.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string summarizing the overall sentiment and main points of the narrative in no more than 50 words.\n- Identify and list all product model names mentioned under a \"products\" key as an array of strings.\n- Extract all order numbers formatted as \"ORD\" followed by 7 digits and include them in an \"order_numbers\" key as an array of strings.\n- Locate and capture any time stamps formatted in 24-hour \"HH:MM\" format, placing them under a \"time_stamps\" key as an array of strings.\n- Count and include the total number of words in the input text as an integer value under a \"word_count\" key.\n- Identify and list all currency amounts present in the text (formatted as \"$\" followed by numeric values with two decimal places) under a \"prices\" key as an array of strings.\n- Extract any email addresses mentioned and include them in an \"emails\" key as an array of strings.\n- Count all numeric ratings mentioned (such as stars rated between 1 and 5) and include them as an array of integers under a \"ratings\" key.\n- Compute and include the total number of characters in the input text as an integer value under a \"char_count\" key.\n- If any warranty-related comments are made, trim each to 100 characters and list them under a \"warranty_comments\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000538_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "review_summary",
                                "products",
                                "order_numbers",
                                "time_stamps",
                                "word_count",
                                "prices",
                                "emails",
                                "ratings",
                                "char_count",
                                "warranty_comments"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert a technical log entry input into a structured JSON object with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"brief_description\" key with a string value that summarizes the main log information in no more than 50 words.\n- Extract all IPv4 addresses mentioned in the input text and list them under the \"ip_addresses\" key as an array of strings.\n- Identify all log levels (e.g., INFO, WARN, ERROR) from the text and include them under a \"log_levels\" key as an array of unique strings.\n- Count the total number of error messages in the log and include this integer under an \"error_count\" key.\n- Extract any timestamps present in the text that follow the \"HH:MM:SS\" format and list them under a \"timestamps\" key as an array of strings.\n- If any URLs are mentioned, capture them under a \"urls\" key as an array of strings, retaining their original format.\n- Include a \"character_count\" key with an integer value representing the total number of characters in the input text.",
            "task_id": "000539",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief_description",
                "ip_addresses",
                "log_levels",
                "error_count",
                "timestamps",
                "urls",
                "character_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000539_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert a technical log entry input into a structured JSON object with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"brief_description\" key with a string value that summarizes the main log information in no more than 50 words.\n- Extract all IPv4 addresses mentioned in the input text and list them under the \"ip_addresses\" key as an array of strings.\n- Identify all log levels (e.g., INFO, WARN, ERROR) from the text and include them under a \"log_levels\" key as an array of unique strings.\n- Count the total number of error messages in the log and include this integer under an \"error_count\" key.\n- Extract any timestamps present in the text that follow the \"HH:MM:SS\" format and list them under a \"timestamps\" key as an array of strings.\n- If any URLs are mentioned, capture them under a \"urls\" key as an array of strings, retaining their original format.\n- Include a \"character_count\" key with an integer value representing the total number of characters in the input text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000539_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief_description",
                                "ip_addresses",
                                "log_levels",
                                "error_count",
                                "timestamps",
                                "urls",
                                "character_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract structured information about a fictional tech conference from the input text.\n\nFeature Requirements:\n- Include an \"event_name\" key with a string value representing the name of the conference.\n- Extract all monetary amounts mentioned in the text and list them under a \"prices\" key as an array of numbers.\n- Identify the venue location within the text and include it under a \"venue\" key as a string.\n- Capture all email addresses found in the text and include them under an \"emails\" key as an array of strings.\n- Compute the total number of sentences in the input text and include this as an integer value under a \"sentence_count\" key.\n- Record any hashtags mentioned in the text under a \"hashtags\" key as an array of strings.\n- If specific time slots are detailed, extract and list them under a \"time_slots\" key as an array of strings in \"HH:MM\" format.\n- Track the presence of any phone numbers and include them under a \"phone_numbers\" key as an array of formatted strings.\n- Identify all percentage values mentioned in the text and include them under a \"percentages\" key as an array of strings exactly as they appear.",
            "task_id": "000540",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_name",
                "prices",
                "venue",
                "emails",
                "sentence_count",
                "hashtags",
                "time_slots",
                "phone_numbers",
                "percentages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000540_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract structured information about a fictional tech conference from the input text.\n\nFeature Requirements:\n- Include an \"event_name\" key with a string value representing the name of the conference.\n- Extract all monetary amounts mentioned in the text and list them under a \"prices\" key as an array of numbers.\n- Identify the venue location within the text and include it under a \"venue\" key as a string.\n- Capture all email addresses found in the text and include them under an \"emails\" key as an array of strings.\n- Compute the total number of sentences in the input text and include this as an integer value under a \"sentence_count\" key.\n- Record any hashtags mentioned in the text under a \"hashtags\" key as an array of strings.\n- If specific time slots are detailed, extract and list them under a \"time_slots\" key as an array of strings in \"HH:MM\" format.\n- Track the presence of any phone numbers and include them under a \"phone_numbers\" key as an array of formatted strings.\n- Identify all percentage values mentioned in the text and include them under a \"percentages\" key as an array of strings exactly as they appear."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000540_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_name",
                                "prices",
                                "venue",
                                "emails",
                                "sentence_count",
                                "hashtags",
                                "time_slots",
                                "phone_numbers",
                                "percentages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract and structure detailed information about a local town festival from the input text.\n\nFeature Requirements:\n- Create a \"festival_summary\" key that contains a concise summary of the festival, limited to 40 words.\n- Extract and include the \"date\" key, formatted as \"MM/DD/YYYY\", representing the primary event date.\n- Identify and include a \"location\" key that captures the name of the town or city where the festival is held.\n- List all unique performer names mentioned in the text under a \"performers\" key as an array of strings.\n- Extract any mentioned ticket price and include it as a numerical value under a \"ticket_price\" key, formatted with two decimal places.\n- Identify and include an \"activities\" key that contains an array of strings listing all event activities described in the text.\n- Count the total number of sentences in the input text and provide this count under a \"sentence_count\" key as an integer.\n- If the text specifies an event duration, extract it and place it under an \"event_duration\" key, retaining the original format.",
            "task_id": "000541",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival_summary",
                "date",
                "location",
                "performers",
                "ticket_price",
                "activities",
                "sentence_count",
                "event_duration"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000541_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract and structure detailed information about a local town festival from the input text.\n\nFeature Requirements:\n- Create a \"festival_summary\" key that contains a concise summary of the festival, limited to 40 words.\n- Extract and include the \"date\" key, formatted as \"MM/DD/YYYY\", representing the primary event date.\n- Identify and include a \"location\" key that captures the name of the town or city where the festival is held.\n- List all unique performer names mentioned in the text under a \"performers\" key as an array of strings.\n- Extract any mentioned ticket price and include it as a numerical value under a \"ticket_price\" key, formatted with two decimal places.\n- Identify and include an \"activities\" key that contains an array of strings listing all event activities described in the text.\n- Count the total number of sentences in the input text and provide this count under a \"sentence_count\" key as an integer.\n- If the text specifies an event duration, extract it and place it under an \"event_duration\" key, retaining the original format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000541_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival_summary",
                                "date",
                                "location",
                                "performers",
                                "ticket_price",
                                "activities",
                                "sentence_count",
                                "event_duration"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the provided intergalactic conference report into a structured JSON object containing detailed event information and extracted metadata.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string that summarizes the key points of the conference in no more than 50 words.\n- Extract all time entries that match the 24-hour format \"HH:MM\" from the text and list them under a \"times\" key as an array of strings.\n- Identify every spaceship name mentioned in the report and include them in a \"spaceships\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract any website URLs appearing in the text and list them under a \"urls\" key as an array of strings.\n- Identify all monetary amounts (e.g., \"$1500\") mentioned in the text and include them in an \"amounts\" key as an array of strings.",
            "task_id": "000542",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_summary",
                "times",
                "spaceships",
                "character_count",
                "urls",
                "amounts"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000542_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the provided intergalactic conference report into a structured JSON object containing detailed event information and extracted metadata.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string that summarizes the key points of the conference in no more than 50 words.\n- Extract all time entries that match the 24-hour format \"HH:MM\" from the text and list them under a \"times\" key as an array of strings.\n- Identify every spaceship name mentioned in the report and include them in a \"spaceships\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract any website URLs appearing in the text and list them under a \"urls\" key as an array of strings.\n- Identify all monetary amounts (e.g., \"$1500\") mentioned in the text and include them in an \"amounts\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000542_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_summary",
                                "times",
                                "spaceships",
                                "character_count",
                                "urls",
                                "amounts"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract comprehensive public transport schedule details from the provided text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that provides a concise overview of the public transport information in no more than 50 words.\n- Identify all time entries mentioned in the text, format them in 24-hour style (e.g., \"14:30\") and list them under a \"times\" key as an array of strings.\n- Extract every bus route number mentioned and include them in a \"bus_routes\" key as an array of integers.\n- Detect any mentions of transportation modes such as \"bus\", \"tram\", or \"ferry\" and list them, without duplicates, under a \"modes\" key as an array of strings.\n- Extract all location addresses specified in the text and include them under an \"addresses\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer under a \"char_count\" key.\n- If the text contains any percentage figures related to service efficiency or delays, list them under a \"service_percentages\" key as an array of strings, preserving the original format (e.g., \"75%\").",
            "task_id": "000543",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "summary",
                "times",
                "bus_routes",
                "modes",
                "addresses",
                "char_count",
                "service_percentages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000543_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract comprehensive public transport schedule details from the provided text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that provides a concise overview of the public transport information in no more than 50 words.\n- Identify all time entries mentioned in the text, format them in 24-hour style (e.g., \"14:30\") and list them under a \"times\" key as an array of strings.\n- Extract every bus route number mentioned and include them in a \"bus_routes\" key as an array of integers.\n- Detect any mentions of transportation modes such as \"bus\", \"tram\", or \"ferry\" and list them, without duplicates, under a \"modes\" key as an array of strings.\n- Extract all location addresses specified in the text and include them under an \"addresses\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer under a \"char_count\" key.\n- If the text contains any percentage figures related to service efficiency or delays, list them under a \"service_percentages\" key as an array of strings, preserving the original format (e.g., \"75%\")."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000543_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "summary",
                                "times",
                                "bus_routes",
                                "modes",
                                "addresses",
                                "char_count",
                                "service_percentages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nParse an input narrative about a neighborhood fair and extract specific details into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_description\" key with a concise string summary of the narrative that does not exceed 60 words.\n- Extract all email addresses mentioned in the input text and list them under an \"emails\" key as an array of strings.\n- Identify all physical locations mentioned in the narrative and include them under a \"locations\" key as an array of strings.\n- Extract monetary values (formatted as currency amounts, e.g., \"$25.00\") and include them under a \"monetary_values\" key as an array of strings.\n- Count the total number of sentences in the input text and include this information as an integer value under a \"sentence_count\" key.\n- If any URLs are mentioned in the text, extract them and list them under a \"urls\" key as an array of strings.\n- Identify all organizations named in the text and include them under an \"organizations\" key as an array of strings.\n- If any phone numbers are present in the text (formatted as (XXX) XXX-XXXX), extract them and include them under a \"phone_numbers\" key as an array of strings.",
            "task_id": "000544",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_description",
                "emails",
                "locations",
                "monetary_values",
                "sentence_count",
                "urls",
                "organizations",
                "phone_numbers"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000544_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nParse an input narrative about a neighborhood fair and extract specific details into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_description\" key with a concise string summary of the narrative that does not exceed 60 words.\n- Extract all email addresses mentioned in the input text and list them under an \"emails\" key as an array of strings.\n- Identify all physical locations mentioned in the narrative and include them under a \"locations\" key as an array of strings.\n- Extract monetary values (formatted as currency amounts, e.g., \"$25.00\") and include them under a \"monetary_values\" key as an array of strings.\n- Count the total number of sentences in the input text and include this information as an integer value under a \"sentence_count\" key.\n- If any URLs are mentioned in the text, extract them and list them under a \"urls\" key as an array of strings.\n- Identify all organizations named in the text and include them under an \"organizations\" key as an array of strings.\n- If any phone numbers are present in the text (formatted as (XXX) XXX-XXXX), extract them and include them under a \"phone_numbers\" key as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000544_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_description",
                                "emails",
                                "locations",
                                "monetary_values",
                                "sentence_count",
                                "urls",
                                "organizations",
                                "phone_numbers"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the input horticulture guide text into a structured JSON object containing detailed botanical insights.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value summarizing the main content of the input text in no more than 60 words.\n- Extract all dates formatted as \"YYYY/MM/DD\" from the text and list them under a \"dates\" key as an array of strings.\n- Identify and extract all scientific botanical terms (words starting with an uppercase letter and following standard botanical naming conventions) into a \"botanical_terms\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"word_count\" key.\n- Extract any temperature readings mentioned in the text (values followed by \"°C\" or \"°F\") and list them under a \"temperature_readings\" key as an array of strings.\n- Identify all unique seasons mentioned (e.g., \"Spring\", \"Summer\", \"Fall\", \"Winter\") and include them in a \"seasons\" key as an array of strings.\n- If any percentages are referenced in the text (e.g., \"30%\"), list them under a \"percentages\" key as an array of strings, preserving the original format.",
            "task_id": "000545",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "overview",
                "dates",
                "botanical_terms",
                "word_count",
                "temperature_readings",
                "seasons",
                "percentages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000545_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the input horticulture guide text into a structured JSON object containing detailed botanical insights.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value summarizing the main content of the input text in no more than 60 words.\n- Extract all dates formatted as \"YYYY/MM/DD\" from the text and list them under a \"dates\" key as an array of strings.\n- Identify and extract all scientific botanical terms (words starting with an uppercase letter and following standard botanical naming conventions) into a \"botanical_terms\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"word_count\" key.\n- Extract any temperature readings mentioned in the text (values followed by \"°C\" or \"°F\") and list them under a \"temperature_readings\" key as an array of strings.\n- Identify all unique seasons mentioned (e.g., \"Spring\", \"Summer\", \"Fall\", \"Winter\") and include them in a \"seasons\" key as an array of strings.\n- If any percentages are referenced in the text (e.g., \"30%\"), list them under a \"percentages\" key as an array of strings, preserving the original format."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000545_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "overview",
                                "dates",
                                "botanical_terms",
                                "word_count",
                                "temperature_readings",
                                "seasons",
                                "percentages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform a promotional event announcement into a structured JSON object that captures essential details about the event.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value representing the title of the event.\n- Extract and include a \"venue\" key as an object with distinct \"name\", \"address\", and \"city\" keys, each containing string values.\n- Identify and include a \"date_time\" key as an object with \"start\" and \"end\" keys, each formatted as \"YYYY-MM-DD HH:MM\".\n- Create an \"agenda\" key containing an array of objects, each with \"session_name\" and \"speaker\" keys, where the values are strings.\n- Extract all unique speaker names mentioned and list them under a \"speaker_list\" key as an array of strings.\n- Summarize the event announcement in a \"description\" key with a string value not exceeding 60 words.\n- If present, extract a numeric attendee limit from the announcement and include it under an \"attendee_limit\" key as an integer.",
            "task_id": "000546",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_title",
                "venue[name]",
                "venue[address]",
                "venue[city]",
                "date_time[start]",
                "date_time[end]",
                "agenda[][session_name]",
                "agenda[][speaker]",
                "speaker_list[]",
                "description",
                "attendee_limit"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000546_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform a promotional event announcement into a structured JSON object that captures essential details about the event.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value representing the title of the event.\n- Extract and include a \"venue\" key as an object with distinct \"name\", \"address\", and \"city\" keys, each containing string values.\n- Identify and include a \"date_time\" key as an object with \"start\" and \"end\" keys, each formatted as \"YYYY-MM-DD HH:MM\".\n- Create an \"agenda\" key containing an array of objects, each with \"session_name\" and \"speaker\" keys, where the values are strings.\n- Extract all unique speaker names mentioned and list them under a \"speaker_list\" key as an array of strings.\n- Summarize the event announcement in a \"description\" key with a string value not exceeding 60 words.\n- If present, extract a numeric attendee limit from the announcement and include it under an \"attendee_limit\" key as an integer."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000546_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_title",
                                "venue[name]",
                                "venue[address]",
                                "venue[city]",
                                "date_time[start]",
                                "date_time[end]",
                                "agenda[][session_name]",
                                "agenda[][speaker]",
                                "speaker_list[]",
                                "description",
                                "attendee_limit"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract structured details from an incoming support email text for issue tracking and resolution analysis.\n\nFeature Requirements:\n- Provide an \"issue_summary\" key with a brief summary (no more than 40 words) capturing the main problem described in the email.\n- Extract all email addresses mentioned in the text and list them under an \"email_addresses\" key as an array of strings.\n- Identify and list all priority levels specified (e.g., \"high\", \"medium\", \"low\") under a \"priorities\" key as an array of strings.\n- Extract any ticket numbers formatted as \"TICK-1234\" and include them under a \"ticket_numbers\" key as an array of strings.\n- Count the total number of sentences in the email text and include this count as an integer value under a \"sentence_count\" key.\n- Identify if a due date is mentioned; if found, provide it under a \"due_date\" key in \"YYYY-MM-DD\" format, otherwise set its value to null.\n- Include a \"keywords\" key listing all unique technical terms present (if any) as an array of strings.",
            "task_id": "000547",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "issue_summary",
                "email_addresses",
                "priorities",
                "ticket_numbers",
                "sentence_count",
                "due_date",
                "keywords"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000547_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract structured details from an incoming support email text for issue tracking and resolution analysis.\n\nFeature Requirements:\n- Provide an \"issue_summary\" key with a brief summary (no more than 40 words) capturing the main problem described in the email.\n- Extract all email addresses mentioned in the text and list them under an \"email_addresses\" key as an array of strings.\n- Identify and list all priority levels specified (e.g., \"high\", \"medium\", \"low\") under a \"priorities\" key as an array of strings.\n- Extract any ticket numbers formatted as \"TICK-1234\" and include them under a \"ticket_numbers\" key as an array of strings.\n- Count the total number of sentences in the email text and include this count as an integer value under a \"sentence_count\" key.\n- Identify if a due date is mentioned; if found, provide it under a \"due_date\" key in \"YYYY-MM-DD\" format, otherwise set its value to null.\n- Include a \"keywords\" key listing all unique technical terms present (if any) as an array of strings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000547_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "issue_summary",
                                "email_addresses",
                                "priorities",
                                "ticket_numbers",
                                "sentence_count",
                                "due_date",
                                "keywords"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nExtract and structure specific details from a travel blog entry describing a vacation experience.\n\nFeature Requirements:\n- Include a \"summary\" key with a string summarizing the main experience of the blog in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any temperature readings (e.g., \"25°C\") mentioned in the text and include them under a \"temperatures\" key as an array of strings.\n- Extract and list all monetary values (e.g., \"$50\", \"100 USD\") found in the text under a \"costs\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list all country names mentioned in the input text under a \"countries\" key as an array of strings.\n- Compute and include the total number of words in the input text as an integer under a \"word_count\" key.",
            "task_id": "000548",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "summary",
                "cities",
                "temperatures",
                "costs",
                "sentence_count",
                "countries",
                "word_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000548_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nExtract and structure specific details from a travel blog entry describing a vacation experience.\n\nFeature Requirements:\n- Include a \"summary\" key with a string summarizing the main experience of the blog in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any temperature readings (e.g., \"25°C\") mentioned in the text and include them under a \"temperatures\" key as an array of strings.\n- Extract and list all monetary values (e.g., \"$50\", \"100 USD\") found in the text under a \"costs\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list all country names mentioned in the input text under a \"countries\" key as an array of strings.\n- Compute and include the total number of words in the input text as an integer under a \"word_count\" key."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000548_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "summary",
                                "cities",
                                "temperatures",
                                "costs",
                                "sentence_count",
                                "countries",
                                "word_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nTransform the given text into a structured JSON object that extracts and organizes detailed geographical and statistical data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value summarizing the core theme of the text in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any numerical coordinates present in the text and map them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys with decimal number values.\n- Locate all percentage figures in the text and include them in a \"percentages\" key as an array of strings, preserving their original format.\n- Determine the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- Detect any country names mentioned in the text and list them under a \"countries\" key as an array of strings.\n- Identify any data references or statistical figures, and list them as objects in a \"statistics\" array, each with \"label\" (string) and \"value\" (number) keys.",
            "task_id": "000549",
            "task_name": "Text to JSON",
            "input_type": "Text",
            "output_type": "JSON",
            "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "brief",
                "cities",
                "coordinates",
                "coordinates[i][latitude]",
                "coordinates[i][longitude]",
                "percentages",
                "sentence_count",
                "countries",
                "statistics",
                "statistics[i][label]",
                "statistics[i][value]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "000549_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nTransform the given text into a structured JSON object that extracts and organizes detailed geographical and statistical data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value summarizing the core theme of the text in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any numerical coordinates present in the text and map them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys with decimal number values.\n- Locate all percentage figures in the text and include them in a \"percentages\" key as an array of strings, preserving their original format.\n- Determine the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- Detect any country names mentioned in the text and list them under a \"countries\" key as an array of strings.\n- Identify any data references or statistical figures, and list them as objects in a \"statistics\" array, each with \"label\" (string) and \"value\" (number) keys."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "000549_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "brief",
                                "cities",
                                "coordinates",
                                "coordinates[i][latitude]",
                                "coordinates[i][longitude]",
                                "percentages",
                                "sentence_count",
                                "countries",
                                "statistics",
                                "statistics[i][label]",
                                "statistics[i][value]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the plain text representation of a differential geometry formula into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The expression must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use \\nabla to denote the gradient operator and \\Delta to indicate the Laplacian.\n- Represent all fractions using the \\frac{}{} command, ensuring that both numerator and denominator are provided.\n- Enclose function arguments within parentheses to accurately preserve the order of operations.\n- Format all mathematical variables in italics following standard LaTeX conventions.\n- Use the caret symbol (^) combined with curly braces to format all exponents.\n- Include clearly defined spacing commands (such as \\,, \\; or \\quad) between operators, variables, and other symbols.\n- Any summation must be represented with the \\sum command along with appropriate lower and upper limits.\n- Represent integral expressions using the \\int command with clearly specified limits if applicable.",
            "task_id": "00XX00",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered expression start and end with a distinct environment?",
                "Is the gradient operator clearly visible in the rendered output?",
                "Does the expression show the Laplacian operator as the appropriate symbol?",
                "Are fractions displayed with both a numerator and a denominator separated by a horizontal bar?",
                "Are function arguments enclosed within visible parentheses to indicate order of operations?",
                "Do the mathematical variables appear in italic style in the rendered output?",
                "Is there clearly defined spacing between operators and variables in the displayed expression?",
                "Are summation signs and integral symbols displayed with clearly specified limits when applicable?"
            ],
            "VQA_answers": [
                "Yes, it is wrapped in a specific environment.",
                "Yes, the output displays the gradient operator symbol.",
                "Yes, the Laplacian operator is shown correctly.",
                "Yes, fractions are formatted to show both parts distinctly.",
                "Yes, each function argument is enclosed in parentheses.",
                "Yes, all the variables are italicized.",
                "Yes, proper spacing is visibly applied between elements.",
                "Yes, summation and integral expressions include the proper limits."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\nabla",
                "\\Delta",
                "\\frac{",
                "(",
                ")",
                "^{",
                "\\,",
                "\\;",
                "\\quad",
                "\\sum",
                "\\int"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX00_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the plain text representation of a differential geometry formula into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The expression must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use \\nabla to denote the gradient operator and \\Delta to indicate the Laplacian.\n- Represent all fractions using the \\frac{}{} command, ensuring that both numerator and denominator are provided.\n- Enclose function arguments within parentheses to accurately preserve the order of operations.\n- Format all mathematical variables in italics following standard LaTeX conventions.\n- Use the caret symbol (^) combined with curly braces to format all exponents.\n- Include clearly defined spacing commands (such as \\,, \\; or \\quad) between operators, variables, and other symbols.\n- Any summation must be represented with the \\sum command along with appropriate lower and upper limits.\n- Represent integral expressions using the \\int command with clearly specified limits if applicable."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX00_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\nabla",
                                "\\Delta",
                                "\\frac{",
                                "(",
                                ")",
                                "^{",
                                "\\,",
                                "\\;",
                                "\\quad",
                                "\\sum",
                                "\\int"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX00_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX00_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered expression start and end with a distinct environment?",
                                "Is the gradient operator clearly visible in the rendered output?",
                                "Does the expression show the Laplacian operator as the appropriate symbol?",
                                "Are fractions displayed with both a numerator and a denominator separated by a horizontal bar?",
                                "Are function arguments enclosed within visible parentheses to indicate order of operations?",
                                "Do the mathematical variables appear in italic style in the rendered output?",
                                "Is there clearly defined spacing between operators and variables in the displayed expression?",
                                "Are summation signs and integral symbols displayed with clearly specified limits when applicable?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX00_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes, it is wrapped in a specific environment.",
                                "Yes, the output displays the gradient operator symbol.",
                                "Yes, the Laplacian operator is shown correctly.",
                                "Yes, fractions are formatted to show both parts distinctly.",
                                "Yes, each function argument is enclosed in parentheses.",
                                "Yes, all the variables are italicized.",
                                "Yes, proper spacing is visibly applied between elements.",
                                "Yes, summation and integral expressions include the proper limits."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a second-order linear differential equation into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation}.\n- Use the \\frac{}{} command to express both the first and second derivatives.\n- Format the second-order derivative specifically as \\frac{d^2y}{dx^2} and the first-order derivative as \\frac{dy}{dx}.\n- Include parentheses around summed or subtracted terms to preserve the correct order of operations.\n- Represent the constant coefficient multiplying the function using a \\cdot symbol between the coefficient and the variable.\n- Format any exponential terms with the base e using the caret (^) followed by curly braces.\n- Utilize the \\sqrt{} command to format any square root expressions if present.\n- Insert spacing commands (such as \\, or \\;) between different parts of the equation to enhance readability.",
            "task_id": "00XX01",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered equation appear within a clearly defined, centered block with a visible equation number?",
                "Is the second-order derivative shown as a fraction with 'd^2y' in the numerator and 'dx^2' in the denominator?",
                "Is the first-order derivative displayed as a fraction with 'dy' over 'dx'?",
                "Are parentheses visibly placed around any groups of summed or subtracted terms?",
                "Is a dot visibly used between a constant coefficient and the function to indicate multiplication?",
                "Are any exponential expressions formatted with the base e raised to a power clearly shown using a caret and curly braces?",
                "Is there a square root symbol present that indicates the use of a formatted square root expression?",
                "Are spacing elements visibly inserted between different parts of the equation to improve readability?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\frac{d^2y}{dx^2}",
                "\\frac{dy}{dx}",
                "(",
                ")",
                "\\cdot",
                "e^{",
                "\\sqrt{",
                "\\,",
                "\\;",
                "\\end{equation}"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX01_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the provided plain text description of a second-order linear differential equation into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation}.\n- Use the \\frac{}{} command to express both the first and second derivatives.\n- Format the second-order derivative specifically as \\frac{d^2y}{dx^2} and the first-order derivative as \\frac{dy}{dx}.\n- Include parentheses around summed or subtracted terms to preserve the correct order of operations.\n- Represent the constant coefficient multiplying the function using a \\cdot symbol between the coefficient and the variable.\n- Format any exponential terms with the base e using the caret (^) followed by curly braces.\n- Utilize the \\sqrt{} command to format any square root expressions if present.\n- Insert spacing commands (such as \\, or \\;) between different parts of the equation to enhance readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX01_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\frac{d^2y}{dx^2}",
                                "\\frac{dy}{dx}",
                                "(",
                                ")",
                                "\\cdot",
                                "e^{",
                                "\\sqrt{",
                                "\\,",
                                "\\;",
                                "\\end{equation}"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX01_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX01_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered equation appear within a clearly defined, centered block with a visible equation number?",
                                "Is the second-order derivative shown as a fraction with 'd^2y' in the numerator and 'dx^2' in the denominator?",
                                "Is the first-order derivative displayed as a fraction with 'dy' over 'dx'?",
                                "Are parentheses visibly placed around any groups of summed or subtracted terms?",
                                "Is a dot visibly used between a constant coefficient and the function to indicate multiplication?",
                                "Are any exponential expressions formatted with the base e raised to a power clearly shown using a caret and curly braces?",
                                "Is there a square root symbol present that indicates the use of a formatted square root expression?",
                                "Are spacing elements visibly inserted between different parts of the equation to improve readability?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX01_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a polynomial factorization problem into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The final output must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Represent multiplication using the \\times symbol between numbers and variables where appropriate.\n- Display all exponents using the caret (^) followed by curly braces to enclose the exponent value.\n- Group factors using parentheses to clarify the order of operations and maintain correct mathematical structure.\n- Use the \\frac{}{} command to represent any coefficients given as fractions, ensuring both numerator and denominator are specified.\n- Italicize all algebraic variables using standard mathematical formatting in LaTeX.\n- Include proper spacing commands (e.g., \\,, \\; or \\;) to separate terms and symbols for enhanced readability.\n- Clearly indicate the factoring process by aligning any multi-step equations if necessary.",
            "task_id": "00XX02",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the final output visibly enclosed within the equation environment tags?",
                "Is the multiplication between numbers and variables rendered using the × symbol?",
                "Are all exponents displayed with a caret (^) followed by curly braces for the exponent value?",
                "Are the factors properly grouped using parentheses to indicate the order of operations?",
                "If a coefficient is given as a fraction, is it represented using the fraction command with both numerator and denominator specified?",
                "Are all algebraic variables italicized as per standard mathematical formatting?",
                "Is proper spacing (such as \\, or \\;) used to separate terms and symbols for readability?",
                "Is the factoring process indicated clearly, for example through aligned multi-step equations if needed?"
            ],
            "VQA_answers": [
                "Yes, it is enclosed between \\begin{equation} and \\end{equation}.",
                "Yes, the × symbol is used for multiplication.",
                "Yes, every exponent is formatted as ^{...}.",
                "Yes, parentheses are used to group factors clearly.",
                "Yes, coefficients are shown with \\frac{}{}.",
                "Yes, all variables appear in italics.",
                "Yes, proper spacing commands are included.",
                "Yes, multi-step factoring is clearly aligned."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\times",
                "\\frac",
                "^{",
                "\\,",
                "\\;"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX02_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the provided plain text description of a polynomial factorization problem into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The final output must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Represent multiplication using the \\times symbol between numbers and variables where appropriate.\n- Display all exponents using the caret (^) followed by curly braces to enclose the exponent value.\n- Group factors using parentheses to clarify the order of operations and maintain correct mathematical structure.\n- Use the \\frac{}{} command to represent any coefficients given as fractions, ensuring both numerator and denominator are specified.\n- Italicize all algebraic variables using standard mathematical formatting in LaTeX.\n- Include proper spacing commands (e.g., \\,, \\; or \\;) to separate terms and symbols for enhanced readability.\n- Clearly indicate the factoring process by aligning any multi-step equations if necessary."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX02_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\times",
                                "\\frac",
                                "^{",
                                "\\,",
                                "\\;"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX02_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX02_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the final output visibly enclosed within the equation environment tags?",
                                "Is the multiplication between numbers and variables rendered using the × symbol?",
                                "Are all exponents displayed with a caret (^) followed by curly braces for the exponent value?",
                                "Are the factors properly grouped using parentheses to indicate the order of operations?",
                                "If a coefficient is given as a fraction, is it represented using the fraction command with both numerator and denominator specified?",
                                "Are all algebraic variables italicized as per standard mathematical formatting?",
                                "Is proper spacing (such as \\, or \\;) used to separate terms and symbols for readability?",
                                "Is the factoring process indicated clearly, for example through aligned multi-step equations if needed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX02_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes, it is enclosed between \\begin{equation} and \\end{equation}.",
                                "Yes, the × symbol is used for multiplication.",
                                "Yes, every exponent is formatted as ^{...}.",
                                "Yes, parentheses are used to group factors clearly.",
                                "Yes, coefficients are shown with \\frac{}{}.",
                                "Yes, all variables appear in italics.",
                                "Yes, proper spacing commands are included.",
                                "Yes, multi-step factoring is clearly aligned."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a definite integral involving trigonometric functions into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation} tags.\n- Represent the integral using the \\int command and include both lower and upper limits.\n- Format the trigonometric functions using \\sin and \\cos commands with proper LaTeX syntax.\n- Use the \\frac{}{} command to express any fractions, ensuring both numerator and denominator are correctly provided.\n- Place parentheses around function arguments where necessary to maintain the correct order of operations.\n- Italicize all variables according to standard LaTeX mathematical conventions.\n- Format exponents using the caret symbol (^) followed by curly braces to contain the exponent.\n- Insert appropriate spacing commands (such as \\,, \\; or \\;) between separate elements of the integral for clarity.\n- Use the \\cdot command for explicit multiplication when a coefficient precedes a variable, ensuring clarity in the expression.\n- Ensure that the limits of integration and other integral components are distinctly and clearly structured.",
            "task_id": "00XX03",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered output show an equation enclosed in a distinct environment (with a visible equation number)?",
                "Is the integral sign displayed with clearly visible lower and upper limits?",
                "Are the trigonometric functions 'sin' and 'cos' rendered in their correct format?",
                "Is the fraction presented with a clear horizontal division between its numerator and denominator?",
                "Are the variables displayed in italic, following standard mathematical conventions?",
                "Are exponents shown using a caret symbol with curly braces around the exponent?",
                "Is multiplication between coefficients and variables explicitly indicated using a dot?",
                "Are parentheses visibly placed around function arguments to ensure the correct order of operations?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\int",
                "_{",
                "}^{",
                "\\sin",
                "\\cos",
                "\\frac",
                "\\cdot",
                "^{",
                "\\,",
                "\\;"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX03_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the provided plain text description of a definite integral involving trigonometric functions into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation} tags.\n- Represent the integral using the \\int command and include both lower and upper limits.\n- Format the trigonometric functions using \\sin and \\cos commands with proper LaTeX syntax.\n- Use the \\frac{}{} command to express any fractions, ensuring both numerator and denominator are correctly provided.\n- Place parentheses around function arguments where necessary to maintain the correct order of operations.\n- Italicize all variables according to standard LaTeX mathematical conventions.\n- Format exponents using the caret symbol (^) followed by curly braces to contain the exponent.\n- Insert appropriate spacing commands (such as \\,, \\; or \\;) between separate elements of the integral for clarity.\n- Use the \\cdot command for explicit multiplication when a coefficient precedes a variable, ensuring clarity in the expression.\n- Ensure that the limits of integration and other integral components are distinctly and clearly structured."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX03_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\int",
                                "_{",
                                "}^{",
                                "\\sin",
                                "\\cos",
                                "\\frac",
                                "\\cdot",
                                "^{",
                                "\\,",
                                "\\;"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX03_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX03_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered output show an equation enclosed in a distinct environment (with a visible equation number)?",
                                "Is the integral sign displayed with clearly visible lower and upper limits?",
                                "Are the trigonometric functions 'sin' and 'cos' rendered in their correct format?",
                                "Is the fraction presented with a clear horizontal division between its numerator and denominator?",
                                "Are the variables displayed in italic, following standard mathematical conventions?",
                                "Are exponents shown using a caret symbol with curly braces around the exponent?",
                                "Is multiplication between coefficients and variables explicitly indicated using a dot?",
                                "Are parentheses visibly placed around function arguments to ensure the correct order of operations?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX03_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of a logistic growth model into a properly formatted LaTeX mathematical equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Represent any fraction in the model using the \\frac{}{} command, ensuring both a numerator and a denominator are provided.\n- Italicize all variables using standard LaTeX math formatting.\n- Use the caret (^) with curly braces to denote exponents for any exponential terms.\n- Include the \\ln command to represent any natural logarithm expressions where required.\n- Use parentheses to properly group terms and preserve the intended order of operations.\n- Insert multiplication symbols (\\cdot or \\times) explicitly when multiplying numeric coefficients with variables or when clarity is needed.\n- Ensure any limits or subscripts, such as in a summation or index notation, are clearly displayed using the underscore (_) notation.\n- Apply appropriate spacing commands (e.g., \\,, \\; or \\;) between different elements of the equation for enhanced readability.",
            "task_id": "00XX04",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered equation start with an equation environment opening tag and end with a closing tag?",
                "Are all fractions displayed using the \\frac{}{} command with both numerator and denominator provided?",
                "Are all the variables in the equation shown in italic format?",
                "Is the caret (^) with curly braces used to denote exponents for exponential terms?",
                "Is the natural logarithm represented using the \\ln command?",
                "Are explicit multiplication symbols (\\cdot or \\times) inserted when multiplying numeric coefficients with variables?",
                "Are proper spacing commands (e.g., \\, \\; or \\,) applied between different elements for readability?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\frac",
                "\\cdot",
                "^{",
                "\\ln",
                "_",
                "e^{-"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX04_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the following plain text description of a logistic growth model into a properly formatted LaTeX mathematical equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Represent any fraction in the model using the \\frac{}{} command, ensuring both a numerator and a denominator are provided.\n- Italicize all variables using standard LaTeX math formatting.\n- Use the caret (^) with curly braces to denote exponents for any exponential terms.\n- Include the \\ln command to represent any natural logarithm expressions where required.\n- Use parentheses to properly group terms and preserve the intended order of operations.\n- Insert multiplication symbols (\\cdot or \\times) explicitly when multiplying numeric coefficients with variables or when clarity is needed.\n- Ensure any limits or subscripts, such as in a summation or index notation, are clearly displayed using the underscore (_) notation.\n- Apply appropriate spacing commands (e.g., \\,, \\; or \\;) between different elements of the equation for enhanced readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX04_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\frac",
                                "\\cdot",
                                "^{",
                                "\\ln",
                                "_",
                                "e^{-"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX04_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX04_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered equation start with an equation environment opening tag and end with a closing tag?",
                                "Are all fractions displayed using the \\frac{}{} command with both numerator and denominator provided?",
                                "Are all the variables in the equation shown in italic format?",
                                "Is the caret (^) with curly braces used to denote exponents for exponential terms?",
                                "Is the natural logarithm represented using the \\ln command?",
                                "Are explicit multiplication symbols (\\cdot or \\times) inserted when multiplying numeric coefficients with variables?",
                                "Are proper spacing commands (e.g., \\, \\; or \\,) applied between different elements for readability?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX04_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a polynomial function's derivative and its integral into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The entire expression must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Use the \\frac{}{} command to represent any fractions, ensuring each fraction has a clearly defined numerator and denominator.\n- Represent derivatives using the \\frac{d}{dx} notation to clearly indicate differentiation with respect to x.\n- Format integrals with the \\int command and include the differential operator (dx) immediately following the integrand.\n- Enclose polynomial terms within parentheses when necessary to preserve the correct order of operations.\n- Italicize all variable names using standard LaTeX mathematical formatting.\n- Use curly braces to properly enclose exponents when representing power expressions with the caret (^) symbol.\n- Insert a spacing command (such as \\, or \\;) between operators and operands to improve readability.\n- Ensure that addition and subtraction operators are clearly visible and spaced out within the expression.",
            "task_id": "00XX05",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "What environment is used to enclose the entire expression?",
                "How are fractions displayed in the expression?",
                "Which notation is used to indicate the derivative with respect to italicized x?",
                "How is the integral formatted in the expression?",
                "What formatting ensures the correct order of operations for polynomial terms?",
                "How are exponents correctly formatted in the expression?",
                "How is spacing between operators and operands achieved?"
            ],
            "VQA_answers": [
                "The equation environment, using \\begin{equation} and \\end{equation}.",
                "They are represented using the \\frac{}{} command with clearly defined numerators and denominators.",
                "It uses \\frac{d}{dx}, with x italicized.",
                "It is formatted with the \\int command, and the integrand is immediately followed by \\textit{dx}.",
                "Polynomial terms are enclosed in parentheses when necessary.",
                "Exponents are represented using the caret (^) with curly braces to enclose the exponent.",
                "Spacing commands, such as \\, or \\;, are inserted between operators and operands for improved readability."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\frac{d}{dx}",
                "\\int",
                "dx",
                "\\frac{",
                "^{",
                "\\,",
                "(",
                ")",
                "+",
                "-"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX05_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a polynomial function's derivative and its integral into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The entire expression must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Use the \\frac{}{} command to represent any fractions, ensuring each fraction has a clearly defined numerator and denominator.\n- Represent derivatives using the \\frac{d}{dx} notation to clearly indicate differentiation with respect to x.\n- Format integrals with the \\int command and include the differential operator (dx) immediately following the integrand.\n- Enclose polynomial terms within parentheses when necessary to preserve the correct order of operations.\n- Italicize all variable names using standard LaTeX mathematical formatting.\n- Use curly braces to properly enclose exponents when representing power expressions with the caret (^) symbol.\n- Insert a spacing command (such as \\, or \\;) between operators and operands to improve readability.\n- Ensure that addition and subtraction operators are clearly visible and spaced out within the expression."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX05_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\frac{d}{dx}",
                                "\\int",
                                "dx",
                                "\\frac{",
                                "^{",
                                "\\,",
                                "(",
                                ")",
                                "+",
                                "-"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX05_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX05_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What environment is used to enclose the entire expression?",
                                "How are fractions displayed in the expression?",
                                "Which notation is used to indicate the derivative with respect to italicized x?",
                                "How is the integral formatted in the expression?",
                                "What formatting ensures the correct order of operations for polynomial terms?",
                                "How are exponents correctly formatted in the expression?",
                                "How is spacing between operators and operands achieved?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX05_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "The equation environment, using \\begin{equation} and \\end{equation}.",
                                "They are represented using the \\frac{}{} command with clearly defined numerators and denominators.",
                                "It uses \\frac{d}{dx}, with x italicized.",
                                "It is formatted with the \\int command, and the integrand is immediately followed by \\textit{dx}.",
                                "Polynomial terms are enclosed in parentheses when necessary.",
                                "Exponents are represented using the caret (^) with curly braces to enclose the exponent.",
                                "Spacing commands, such as \\, or \\;, are inserted between operators and operands for improved readability."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nGenerate a LaTeX formatted equation that expresses the probability mass function of a binomial distribution.\n\nFeature Requirements:\n- The equation must begin with \\[ and end with \\] to denote a display math environment.\n- Use \\binom{}{} to represent the binomial coefficient, ensuring the top number is the total number of trials and the bottom number is the number of successes.\n- Write the expression for the probability mass function using variables p for success probability and (1-p) for failure probability, with appropriate exponents for the number of successes and failures.\n- All variables must be italicized by default, using standard LaTeX mathematical formatting.\n- Represent exponents with the caret (^) followed by curly braces, for example, p^{k}.\n- Include a summation sign \\sum with specified lower and upper limits to denote the summing over all possible successful outcomes.\n- Use explicit multiplication symbols (\\cdot) wherever individual factors are multiplied, ensuring clarity in the multiplication of terms.\n- Insert spacing commands (such as \\, or \\;) between elements to enhance readability.\n- Align the fraction and combination commands clearly to emphasize the structure of the equation.",
            "task_id": "00XX06",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the equation start with \\[ and end with \\] to denote a display math environment?",
                "Which command is used to represent the binomial coefficient in the equation?",
                "Are the variables (such as p and 1-p) in the equation italicized by default using LaTeX math formatting?",
                "Is the exponent notation in the format p^{k} (using caret followed by curly braces) visible in the equation?",
                "Does the equation include explicit multiplication symbols (\\cdot) between the factors?",
                "Are spacing commands (like \\, or \\;) used to enhance the readability of the equation?",
                "Is there a summation sign (\\sum) displayed with specified lower and upper limits for the summing of outcomes?"
            ],
            "VQA_answers": [
                "Yes",
                "\\binom{}{}",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\[",
                "\\binom{n}{k}",
                "p^{k}",
                "(1-p)^{n-k}",
                "\\cdot",
                "\\sum_{k=0}^{n}",
                "\\,",
                "\\;",
                "\\]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX06_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nGenerate a LaTeX formatted equation that expresses the probability mass function of a binomial distribution.\n\nFeature Requirements:\n- The equation must begin with \\[ and end with \\] to denote a display math environment.\n- Use \\binom{}{} to represent the binomial coefficient, ensuring the top number is the total number of trials and the bottom number is the number of successes.\n- Write the expression for the probability mass function using variables p for success probability and (1-p) for failure probability, with appropriate exponents for the number of successes and failures.\n- All variables must be italicized by default, using standard LaTeX mathematical formatting.\n- Represent exponents with the caret (^) followed by curly braces, for example, p^{k}.\n- Include a summation sign \\sum with specified lower and upper limits to denote the summing over all possible successful outcomes.\n- Use explicit multiplication symbols (\\cdot) wherever individual factors are multiplied, ensuring clarity in the multiplication of terms.\n- Insert spacing commands (such as \\, or \\;) between elements to enhance readability.\n- Align the fraction and combination commands clearly to emphasize the structure of the equation."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX06_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\[",
                                "\\binom{n}{k}",
                                "p^{k}",
                                "(1-p)^{n-k}",
                                "\\cdot",
                                "\\sum_{k=0}^{n}",
                                "\\,",
                                "\\;",
                                "\\]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX06_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX06_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the equation start with \\[ and end with \\] to denote a display math environment?",
                                "Which command is used to represent the binomial coefficient in the equation?",
                                "Are the variables (such as p and 1-p) in the equation italicized by default using LaTeX math formatting?",
                                "Is the exponent notation in the format p^{k} (using caret followed by curly braces) visible in the equation?",
                                "Does the equation include explicit multiplication symbols (\\cdot) between the factors?",
                                "Are spacing commands (like \\, or \\;) used to enhance the readability of the equation?",
                                "Is there a summation sign (\\sum) displayed with specified lower and upper limits for the summing of outcomes?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX06_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "\\binom{}{}",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text optimization problem into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the objective using the \\max or \\min command, depending on the context, with the variable being optimized properly italicized.\n- Use \\sum with explicit lower and upper limits to depict the summation over the defined index variable.\n- Include inequality symbols (\\leq or \\geq) to show constraints, ensuring that each inequality is clearly separated by proper spacing commands like \\, or \\;.\n- Format any fractions using the \\frac{}{} command, making sure both the numerator and the denominator are enclosed in curly braces.\n- Utilize superscripts and subscripts by applying the caret (^) and underscore (_) operators, with curly braces to enclose multi-character exponents or indices.\n- Enclose terms that require grouping with \\left( and \\right) to maintain the correct order of operations.",
            "task_id": "00XX07",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "What tags must the equation start and end with?",
                "How is the objective function represented?",
                "How are summations depicted in the equation?",
                "What notation is used for displaying fractions?",
                "How are exponents and indices formatted?",
                "How are inequality constraints shown?",
                "How are groupings for order of operations handled?"
            ],
            "VQA_answers": [
                "It starts with \\begin{equation} and ends with \\end{equation}.",
                "It uses \\max or \\min with the optimized variable in italics.",
                "Using \\sum with explicit lower and upper limits for the index variable.",
                "Fractions are formatted with \\frac{}{} where numerator and denominator are enclosed in curly braces.",
                "They are formatted using the caret (^) and underscore (_) operators with curly braces.",
                "Using inequality symbols \\leq or \\geq combined with spacing commands like \\, or \\;.",
                "Grouped terms are enclosed with \\left( and \\right)."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\max",
                "\\min",
                "\\sum",
                "\\leq",
                "\\geq",
                "\\frac{",
                "^{",
                "_{",
                "\\left(",
                "\\right)"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX07_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text optimization problem into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the objective using the \\max or \\min command, depending on the context, with the variable being optimized properly italicized.\n- Use \\sum with explicit lower and upper limits to depict the summation over the defined index variable.\n- Include inequality symbols (\\leq or \\geq) to show constraints, ensuring that each inequality is clearly separated by proper spacing commands like \\, or \\;.\n- Format any fractions using the \\frac{}{} command, making sure both the numerator and the denominator are enclosed in curly braces.\n- Utilize superscripts and subscripts by applying the caret (^) and underscore (_) operators, with curly braces to enclose multi-character exponents or indices.\n- Enclose terms that require grouping with \\left( and \\right) to maintain the correct order of operations."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX07_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\max",
                                "\\min",
                                "\\sum",
                                "\\leq",
                                "\\geq",
                                "\\frac{",
                                "^{",
                                "_{",
                                "\\left(",
                                "\\right)"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX07_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX07_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What tags must the equation start and end with?",
                                "How is the objective function represented?",
                                "How are summations depicted in the equation?",
                                "What notation is used for displaying fractions?",
                                "How are exponents and indices formatted?",
                                "How are inequality constraints shown?",
                                "How are groupings for order of operations handled?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX07_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "It starts with \\begin{equation} and ends with \\end{equation}.",
                                "It uses \\max or \\min with the optimized variable in italics.",
                                "Using \\sum with explicit lower and upper limits for the index variable.",
                                "Fractions are formatted with \\frac{}{} where numerator and denominator are enclosed in curly braces.",
                                "They are formatted using the caret (^) and underscore (_) operators with curly braces.",
                                "Using inequality symbols \\leq or \\geq combined with spacing commands like \\, or \\;.",
                                "Grouped terms are enclosed with \\left( and \\right)."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of an exponential decay process into a properly formatted LaTeX equation modeling population decline.\n\nFeature Requirements:\n- Enclose the entire equation within the \\begin{equation} and \\end{equation} environment.\n- Represent the exponential decay function using the \\exp command with its argument enclosed in parentheses.\n- Format the decay constant and time variable as italicized symbols using standard LaTeX math formatting.\n- Use the caret symbol (^) with curly braces to correctly format any exponents in the equation.\n- Include a fraction formatted with the \\frac{}{} command to represent any ratios, ensuring both numerator and denominator are provided.\n- Implement the \\cdot command to clearly denote multiplication between coefficients and variables.\n- Apply appropriate spacing commands (such as \\, or \\;) between elements to improve the readability of the equation.\n- Group terms within parentheses where necessary to maintain the proper order of operations.",
            "task_id": "00XX08",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the final equation shown inside a clearly defined equation box (indicating an equation environment)?",
                "Does the rendered equation display the exponential decay function using an exp notation?",
                "Are the decay constant and time variable visibly styled in italics?",
                "Is the exponent presented with a caret followed by curly braces to denote the power?",
                "Does the equation include a fraction that visibly shows both a numerator and a denominator?",
                "Can a centered multiplication dot be seen, clearly indicating multiplication between components?",
                "Is there evidence of spacing adjustments between components to enhance readability?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\exp",
                "^{",
                "\\frac",
                "\\cdot",
                "\\,",
                "\\;"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX08_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the provided plain text description of an exponential decay process into a properly formatted LaTeX equation modeling population decline.\n\nFeature Requirements:\n- Enclose the entire equation within the \\begin{equation} and \\end{equation} environment.\n- Represent the exponential decay function using the \\exp command with its argument enclosed in parentheses.\n- Format the decay constant and time variable as italicized symbols using standard LaTeX math formatting.\n- Use the caret symbol (^) with curly braces to correctly format any exponents in the equation.\n- Include a fraction formatted with the \\frac{}{} command to represent any ratios, ensuring both numerator and denominator are provided.\n- Implement the \\cdot command to clearly denote multiplication between coefficients and variables.\n- Apply appropriate spacing commands (such as \\, or \\;) between elements to improve the readability of the equation.\n- Group terms within parentheses where necessary to maintain the proper order of operations."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX08_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\exp",
                                "^{",
                                "\\frac",
                                "\\cdot",
                                "\\,",
                                "\\;"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX08_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX08_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the final equation shown inside a clearly defined equation box (indicating an equation environment)?",
                                "Does the rendered equation display the exponential decay function using an exp notation?",
                                "Are the decay constant and time variable visibly styled in italics?",
                                "Is the exponent presented with a caret followed by curly braces to denote the power?",
                                "Does the equation include a fraction that visibly shows both a numerator and a denominator?",
                                "Can a centered multiplication dot be seen, clearly indicating multiplication between components?",
                                "Is there evidence of spacing adjustments between components to enhance readability?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX08_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a geometric progression summing the first n terms into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation} tag.\n- Include the summation symbol \\sum with explicit lower and upper bounds (e.g., i=1 to n) to denote the series.\n- Use the \\frac{}{} command to represent any fraction, ensuring both numerator and denominator are clearly defined.\n- Variables and parameters must be italicized using standard LaTeX math formatting.\n- Represent the common ratio and term calculations using the caret (^) notation with curly braces enclosing any exponent.\n- Incorporate a square root operation formatted with the \\sqrt{} command where necessary.\n- Include spacing commands such as \\, or \\; between different components of the equation to enhance readability.",
            "task_id": "00XX09",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the equation displayed in a centered, numbered format (i.e., within a display environment)?",
                "Does the equation include a summation symbol with lower bound i=1 and upper bound n?",
                "Is there a fraction clearly rendered with a numerator over a denominator using a distinct fraction bar?",
                "Are all variables and parameters shown in italic style?",
                "Is the exponent notation implemented using caret (^) with the exponent enclosed in curly braces?",
                "Does the equation display a square root symbol formatted with a square root operation?",
                "Are spacing commands (such as small spaces) visibly placed between different components to improve clarity?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\sum_{i=1}^{n}",
                "\\frac",
                "\\sqrt",
                "\\,",
                "r^{i-1}"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX09_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a geometric progression summing the first n terms into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation} tag.\n- Include the summation symbol \\sum with explicit lower and upper bounds (e.g., i=1 to n) to denote the series.\n- Use the \\frac{}{} command to represent any fraction, ensuring both numerator and denominator are clearly defined.\n- Variables and parameters must be italicized using standard LaTeX math formatting.\n- Represent the common ratio and term calculations using the caret (^) notation with curly braces enclosing any exponent.\n- Incorporate a square root operation formatted with the \\sqrt{} command where necessary.\n- Include spacing commands such as \\, or \\; between different components of the equation to enhance readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX09_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\sum_{i=1}^{n}",
                                "\\frac",
                                "\\sqrt",
                                "\\,",
                                "r^{i-1}"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX09_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX09_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the equation displayed in a centered, numbered format (i.e., within a display environment)?",
                                "Does the equation include a summation symbol with lower bound i=1 and upper bound n?",
                                "Is there a fraction clearly rendered with a numerator over a denominator using a distinct fraction bar?",
                                "Are all variables and parameters shown in italic style?",
                                "Is the exponent notation implemented using caret (^) with the exponent enclosed in curly braces?",
                                "Does the equation display a square root symbol formatted with a square root operation?",
                                "Are spacing commands (such as small spaces) visibly placed between different components to improve clarity?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX09_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nTransform the given plain text physics formula into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} command and end with an \\end{equation} command.\n- Use the \\vec{} command to indicate vector quantities, ensuring each vector variable is enclosed within the command.\n- Format any fractions appearing in the expression using the \\frac{}{} command, with clearly defined numerators and denominators.\n- Represent any square root operations using the \\sqrt{} command, placing the radicand inside curly braces.\n- Denote acceleration due to gravity with a subscript g, formatted as g with an underscore and curly braces (g_{ }).\n- Include integration symbols using the \\int command with proper limit notation if limits are specified.\n- Apply the caret (^) notation for any exponent, enclosing the exponent in curly braces.\n- Separate multiplication operations with the \\cdot command when they are between a number and a non-adjacent variable, and ensure correct spacing using commands such as \\, or \\; where needed.",
            "task_id": "00XX10",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the equation displayed in a centered math block (display mode)?",
                "Do vector variables in the equation show an arrow symbol above them?",
                "Are fractions rendered with the numerator directly above the denominator?",
                "Is there a visible square root symbol with its radicand clearly enclosed?",
                "Is acceleration due to gravity indicated with a subscript 'g'?",
                "Does the equation include an integral symbol with proper limit notation when applicable?",
                "Are exponents displayed as superscripts in the rendered output?",
                "Is multiplication between numbers and variables shown using a centered dot with appropriate spacing?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\vec{",
                "\\frac{",
                "\\sqrt{",
                "g_{",
                "\\int",
                "^{",
                "\\cdot"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX10_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nTransform the given plain text physics formula into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} command and end with an \\end{equation} command.\n- Use the \\vec{} command to indicate vector quantities, ensuring each vector variable is enclosed within the command.\n- Format any fractions appearing in the expression using the \\frac{}{} command, with clearly defined numerators and denominators.\n- Represent any square root operations using the \\sqrt{} command, placing the radicand inside curly braces.\n- Denote acceleration due to gravity with a subscript g, formatted as g with an underscore and curly braces (g_{ }).\n- Include integration symbols using the \\int command with proper limit notation if limits are specified.\n- Apply the caret (^) notation for any exponent, enclosing the exponent in curly braces.\n- Separate multiplication operations with the \\cdot command when they are between a number and a non-adjacent variable, and ensure correct spacing using commands such as \\, or \\; where needed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX10_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\vec{",
                                "\\frac{",
                                "\\sqrt{",
                                "g_{",
                                "\\int",
                                "^{",
                                "\\cdot"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX10_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX10_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the equation displayed in a centered math block (display mode)?",
                                "Do vector variables in the equation show an arrow symbol above them?",
                                "Are fractions rendered with the numerator directly above the denominator?",
                                "Is there a visible square root symbol with its radicand clearly enclosed?",
                                "Is acceleration due to gravity indicated with a subscript 'g'?",
                                "Does the equation include an integral symbol with proper limit notation when applicable?",
                                "Are exponents displayed as superscripts in the rendered output?",
                                "Is multiplication between numbers and variables shown using a centered dot with appropriate spacing?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX10_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a combinatorial summation that includes factorial and binomial coefficients into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and conclude with \\end{equation}.\n- Enclose the entire summation expression within a \\sum command, specifying distinct lower and upper limits.\n- Use the \\binom{}{} command to represent any binomial coefficients in the expression.\n- Represent factorial terms by appending an exclamation mark directly after the numeral (e.g., n!).\n- Format any fractional components with the \\frac{}{} command, ensuring each fraction has both a numerator and a denominator.\n- Italicize all variables using standard LaTeX mathematical formatting.\n- Use the caret symbol (^) with curly braces for any exponentiation present in the expression.\n- Include explicit multiplication symbols (e.g., \\cdot) between numeric coefficients and variables to avoid ambiguity.\n- Insert appropriate spacing commands (such as \\, or \\;) between elements for improved readability.\n- Enclose any complex expressions within parentheses to clearly indicate the order of operations.",
            "task_id": "00XX11",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the equation start and end with the appropriate environment commands?",
                "Is the summation symbol shown with both distinct lower and upper limits?",
                "Are binomial coefficients displayed using the \\binom{}{} command?",
                "Are factorial expressions formatted with an exclamation mark immediately after the numeral?",
                "Are fractions formatted with the \\frac{}{} command, including both numerator and denominator?",
                "Are all variables rendered in italic style as per standard LaTeX math formatting?",
                "Are multiplication symbols and additional spacing commands (like \\cdot, \\, or \\;) clearly visible between numeric coefficients and variables?"
            ],
            "VQA_answers": [
                "Yes, it begins with \\begin{equation} and ends with \\end{equation}.",
                "Yes, the summation is enclosed within a \\sum command with clearly specified lower and upper limits.",
                "Yes, any binomial coefficients are represented with the \\binom{}{} command.",
                "Yes, factorial terms appear with a ! directly after the number (e.g., n!).",
                "Yes, all fractional components use the \\frac{}{} command with explicit numerators and denominators.",
                "Yes, every variable is italicized.",
                "Yes, multiplication symbols and appropriate spacing commands are included for clarity."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\sum",
                "_{",
                "^{",
                "\\binom",
                "\\frac",
                "!",
                "\\cdot",
                "\\,",
                "\\;",
                "(",
                ")"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX11_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a combinatorial summation that includes factorial and binomial coefficients into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and conclude with \\end{equation}.\n- Enclose the entire summation expression within a \\sum command, specifying distinct lower and upper limits.\n- Use the \\binom{}{} command to represent any binomial coefficients in the expression.\n- Represent factorial terms by appending an exclamation mark directly after the numeral (e.g., n!).\n- Format any fractional components with the \\frac{}{} command, ensuring each fraction has both a numerator and a denominator.\n- Italicize all variables using standard LaTeX mathematical formatting.\n- Use the caret symbol (^) with curly braces for any exponentiation present in the expression.\n- Include explicit multiplication symbols (e.g., \\cdot) between numeric coefficients and variables to avoid ambiguity.\n- Insert appropriate spacing commands (such as \\, or \\;) between elements for improved readability.\n- Enclose any complex expressions within parentheses to clearly indicate the order of operations."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX11_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\sum",
                                "_{",
                                "^{",
                                "\\binom",
                                "\\frac",
                                "!",
                                "\\cdot",
                                "\\,",
                                "\\;",
                                "(",
                                ")"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX11_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX11_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the equation start and end with the appropriate environment commands?",
                                "Is the summation symbol shown with both distinct lower and upper limits?",
                                "Are binomial coefficients displayed using the \\binom{}{} command?",
                                "Are factorial expressions formatted with an exclamation mark immediately after the numeral?",
                                "Are fractions formatted with the \\frac{}{} command, including both numerator and denominator?",
                                "Are all variables rendered in italic style as per standard LaTeX math formatting?",
                                "Are multiplication symbols and additional spacing commands (like \\cdot, \\, or \\;) clearly visible between numeric coefficients and variables?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX11_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes, it begins with \\begin{equation} and ends with \\end{equation}.",
                                "Yes, the summation is enclosed within a \\sum command with clearly specified lower and upper limits.",
                                "Yes, any binomial coefficients are represented with the \\binom{}{} command.",
                                "Yes, factorial terms appear with a ! directly after the number (e.g., n!).",
                                "Yes, all fractional components use the \\frac{}{} command with explicit numerators and denominators.",
                                "Yes, every variable is italicized.",
                                "Yes, multiplication symbols and appropriate spacing commands are included for clarity."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the provided plain text geometric formula into a properly formatted LaTeX diagram representing the area of a circle using standard mathematical notation.\n\nFeature Requirements:\n- The result must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the area of a circle using the formula A = πr^2, ensuring the π symbol is formatted using \\pi.\n- Use the ^ command with curly braces to denote the square of the radius.\n- The radius variable must be italicized using standard LaTeX math formatting.\n- Include a descriptive comment at the end of the equation using a LaTeX comment line (%) to specify that the equation computes the circle's area.\n- Ensure there is proper spacing using commands like \\, between the π symbol and the variable.\n- All symbols and constants, such as r and A, must be formatted using math mode indicators.",
            "task_id": "00XX12",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered equation start and end with math environment tags?",
                "What formula for the area of a circle is displayed?",
                "How is the π symbol formatted in the equation?",
                "How is the exponentiation of the radius indicated?",
                "Is there additional spacing between the π symbol and the radius variable?",
                "How is the radius variable formatted?",
                "Does the equation include a comment describing its purpose?"
            ],
            "VQA_answers": [
                "Yes, it starts with \\begin{equation} and ends with \\end{equation}.",
                "A = \\pi\\,{r}^{2}",
                "It is formatted using \\pi.",
                "It uses the ^ command with curly braces.",
                "Yes, a spacing command (\\,) is used.",
                "It is italicized, following standard LaTeX math mode formatting.",
                "Yes, a LaTeX comment at the end specifies that the equation computes the circle's area."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "A = \\pi \\, r^{2}",
                "% computes the circle's area",
                "\\end{equation}"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX12_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the provided plain text geometric formula into a properly formatted LaTeX diagram representing the area of a circle using standard mathematical notation.\n\nFeature Requirements:\n- The result must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the area of a circle using the formula A = πr^2, ensuring the π symbol is formatted using \\pi.\n- Use the ^ command with curly braces to denote the square of the radius.\n- The radius variable must be italicized using standard LaTeX math formatting.\n- Include a descriptive comment at the end of the equation using a LaTeX comment line (%) to specify that the equation computes the circle's area.\n- Ensure there is proper spacing using commands like \\, between the π symbol and the variable.\n- All symbols and constants, such as r and A, must be formatted using math mode indicators."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX12_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "A = \\pi \\, r^{2}",
                                "% computes the circle's area",
                                "\\end{equation}"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX12_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX12_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered equation start and end with math environment tags?",
                                "What formula for the area of a circle is displayed?",
                                "How is the π symbol formatted in the equation?",
                                "How is the exponentiation of the radius indicated?",
                                "Is there additional spacing between the π symbol and the radius variable?",
                                "How is the radius variable formatted?",
                                "Does the equation include a comment describing its purpose?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX12_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes, it starts with \\begin{equation} and ends with \\end{equation}.",
                                "A = \\pi\\,{r}^{2}",
                                "It is formatted using \\pi.",
                                "It uses the ^ command with curly braces.",
                                "Yes, a spacing command (\\,) is used.",
                                "It is italicized, following standard LaTeX math mode formatting.",
                                "Yes, a LaTeX comment at the end specifies that the equation computes the circle's area."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a projectile motion formula into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Any fractions within the formula should be represented using the \\frac{}{} command with both numerator and denominator explicitly provided.\n- Enclose any square root expressions using the \\sqrt{} command.\n- All variable symbols (for example, v₀, g, t, and θ) must be italicized using standard LaTeX math formatting.\n- Use parentheses around composite expressions to clearly establish the correct order of operations.\n- Denote multiplication between numbers and variables with either \\cdot or \\times, but omit the symbol between adjacent variables.\n- Include the \\int command with specified lower and upper limits if any integration is present in the description.\n- Insert proper spacing commands (such as \\,, \\; or \\;) between different elements of the equation to improve readability.",
            "task_id": "00XX13",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\frac",
                "\\sqrt",
                "\\int",
                "\\cdot",
                "\\times",
                "v_{0}",
                "g",
                "t",
                "\\theta",
                "\\,",
                "\\;"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX13_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a projectile motion formula into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Any fractions within the formula should be represented using the \\frac{}{} command with both numerator and denominator explicitly provided.\n- Enclose any square root expressions using the \\sqrt{} command.\n- All variable symbols (for example, v₀, g, t, and θ) must be italicized using standard LaTeX math formatting.\n- Use parentheses around composite expressions to clearly establish the correct order of operations.\n- Denote multiplication between numbers and variables with either \\cdot or \\times, but omit the symbol between adjacent variables.\n- Include the \\int command with specified lower and upper limits if any integration is present in the description.\n- Insert proper spacing commands (such as \\,, \\; or \\;) between different elements of the equation to improve readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX13_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\frac",
                                "\\sqrt",
                                "\\int",
                                "\\cdot",
                                "\\times",
                                "v_{0}",
                                "g",
                                "t",
                                "\\theta",
                                "\\,",
                                "\\;"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX13_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert a given plain text algebraic expression featuring radicals, summations, and fractions into an accurate LaTeX formatted mathematical equation.\n\nFeature Requirements:\n- The final output must start with \\begin{equation} and conclude with \\end{equation}.\n- Every instance of a fraction must be written using the \\frac{}{} command with clearly defined numerator and denominator.\n- Any radical expressions present must be formatted using the \\sqrt{} command.\n- A summation must be represented with the \\sum notation, and if limits are specified in the input, they must be included with subscript and superscript.\n- Exponents have to be formatted using the caret (^) followed by curly braces {} enclosing the exponent, even for multi-digit or composite exponents.\n- Multiplication between coefficients and variables must use \\times when indicated in the text, ensuring no multiplication symbol appears between standalone adjacent variables.\n- Parentheses should be explicitly provided around any terms that could be misinterpreted without them, in order to preserve the intended order of operations.",
            "task_id": "00XX14",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered equation start with \\begin{equation}?",
                "Does the rendered equation end with \\end{equation}?",
                "Are all fractions visibly formatted using the \\frac{}{} command with both numerator and denominator clearly defined?",
                "Are radical expressions displayed using the \\sqrt{} command?",
                "Is a summation symbol shown as \\sum with limits included as subscripts and superscripts when specified?",
                "Are exponents formatted with a caret (^) and curly braces ({}), even for multi-digit exponents?",
                "Is multiplication between coefficients and variables indicated by a \\times symbol when specified?",
                "Are parentheses correctly placed around terms to preserve the intended order of operations?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\frac",
                "\\sqrt",
                "\\sum",
                "\\times",
                "^{"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX14_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert a given plain text algebraic expression featuring radicals, summations, and fractions into an accurate LaTeX formatted mathematical equation.\n\nFeature Requirements:\n- The final output must start with \\begin{equation} and conclude with \\end{equation}.\n- Every instance of a fraction must be written using the \\frac{}{} command with clearly defined numerator and denominator.\n- Any radical expressions present must be formatted using the \\sqrt{} command.\n- A summation must be represented with the \\sum notation, and if limits are specified in the input, they must be included with subscript and superscript.\n- Exponents have to be formatted using the caret (^) followed by curly braces {} enclosing the exponent, even for multi-digit or composite exponents.\n- Multiplication between coefficients and variables must use \\times when indicated in the text, ensuring no multiplication symbol appears between standalone adjacent variables.\n- Parentheses should be explicitly provided around any terms that could be misinterpreted without them, in order to preserve the intended order of operations."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX14_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\frac",
                                "\\sqrt",
                                "\\sum",
                                "\\times",
                                "^{"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX14_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX14_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered equation start with \\begin{equation}?",
                                "Does the rendered equation end with \\end{equation}?",
                                "Are all fractions visibly formatted using the \\frac{}{} command with both numerator and denominator clearly defined?",
                                "Are radical expressions displayed using the \\sqrt{} command?",
                                "Is a summation symbol shown as \\sum with limits included as subscripts and superscripts when specified?",
                                "Are exponents formatted with a caret (^) and curly braces ({}), even for multi-digit exponents?",
                                "Is multiplication between coefficients and variables indicated by a \\times symbol when specified?",
                                "Are parentheses correctly placed around terms to preserve the intended order of operations?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX14_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of an integral equation into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\int command for the integral, specifying both the lower and upper limits explicitly.\n- Apply the \\frac{}{} command to represent any fractions, ensuring that each has both a numerator and a denominator.\n- Format the derivative notation using d/dx properly, including any necessary spacing.\n- Italicize all variable names using standard LaTeX math formatting, while functions should be formatted with \\mathrm{}.\n- Include parentheses where needed to clearly delineate function arguments or group expressions.\n- If a summation is present, represent it using the \\sum command with explicit limits.",
            "task_id": "00XX15",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the equation displayed in its own centered block with clear delimiters separating it from the surrounding text?",
                "Does the integral symbol show both a lower and an upper limit visibly?",
                "Are fractions rendered with a clearly separated numerator and denominator, indicated by a distinct horizontal division?",
                "How is the derivative notation presented in the equation?",
                "Are all variable names displayed in italic type?",
                "Is the formatting of functions distinguishable by using a roman (upright) style instead of italics?",
                "Are parentheses included where necessary to clarify function arguments or grouped expressions?",
                "If a summation is present, does it visibly include explicit lower and upper limit information with a summation symbol?"
            ],
            "VQA_answers": [
                "Yes, it appears as a distinct centered block.",
                "Yes, both limits are clearly displayed next to the integral symbol.",
                "Yes, every fraction displays a defined numerator and denominator.",
                "It is shown as d/dx with proper spacing between the 'd' and 'x'.",
                "Yes, all variable names are italicized.",
                "Yes, functions are formatted in roman style.",
                "Yes, parentheses are used appropriately for clarity.",
                "Yes, the summation symbol shows both limits explicitly."
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\int",
                "\\frac",
                "\\frac{d}{dx}",
                "\\mathrm",
                "\\sum"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX15_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the following plain text description of an integral equation into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\int command for the integral, specifying both the lower and upper limits explicitly.\n- Apply the \\frac{}{} command to represent any fractions, ensuring that each has both a numerator and a denominator.\n- Format the derivative notation using d/dx properly, including any necessary spacing.\n- Italicize all variable names using standard LaTeX math formatting, while functions should be formatted with \\mathrm{}.\n- Include parentheses where needed to clearly delineate function arguments or group expressions.\n- If a summation is present, represent it using the \\sum command with explicit limits."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX15_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\int",
                                "\\frac",
                                "\\frac{d}{dx}",
                                "\\mathrm",
                                "\\sum"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX15_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX15_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the equation displayed in its own centered block with clear delimiters separating it from the surrounding text?",
                                "Does the integral symbol show both a lower and an upper limit visibly?",
                                "Are fractions rendered with a clearly separated numerator and denominator, indicated by a distinct horizontal division?",
                                "How is the derivative notation presented in the equation?",
                                "Are all variable names displayed in italic type?",
                                "Is the formatting of functions distinguishable by using a roman (upright) style instead of italics?",
                                "Are parentheses included where necessary to clarify function arguments or grouped expressions?",
                                "If a summation is present, does it visibly include explicit lower and upper limit information with a summation symbol?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX15_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes, it appears as a distinct centered block.",
                                "Yes, both limits are clearly displayed next to the integral symbol.",
                                "Yes, every fraction displays a defined numerator and denominator.",
                                "It is shown as d/dx with proper spacing between the 'd' and 'x'.",
                                "Yes, all variable names are italicized.",
                                "Yes, functions are formatted in roman style.",
                                "Yes, parentheses are used appropriately for clarity.",
                                "Yes, the summation symbol shows both limits explicitly."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a piecewise function defining a mathematical scenario into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\begin{cases} and \\end{cases} environment to implement the piecewise format.\n- Clearly indicate the condition for each case using proper inequality symbols (e.g., <, \\leq, >, \\geq).\n- Format each case so that the mathematical expression appears to the left and the condition to the right, separated by a comma.\n- Encapsulate any textual explanation within math mode using the \\text{} command where necessary.\n- Ensure every variable is represented in italics and constants are shown in their standard mathematical form.\n- Include spacing commands (e.g., \\, or \\;) between operators and operands to enhance readability.\n- Use absolute value notation with \\lvert and \\rvert if any case involves modulus expressions.",
            "task_id": "00XX16",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Is the equation wrapped within a dedicated equation environment?",
                "Does the rendered output display a piecewise function using a cases structure?",
                "Are the inequality symbols (e.g., '<', '\\leq', '>', '\\geq') clearly visible in the conditions?",
                "Is there a visible comma separating the mathematical expression from its condition in each case?",
                "Are any textual explanations enclosed within a text mode command?",
                "Do the variables appear in italics while constants are in standard mathematical styling?",
                "Is there clear spacing between operators and operands as indicated by visible spacing commands?",
                "If any modulus expressions are present, are they shown with absolute value notation using specific delimiters?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\begin{cases}",
                "\\end{cases}",
                "<",
                "\\leq",
                ">",
                "\\geq",
                "\\text{",
                "\\lvert",
                "\\rvert",
                "\\,",
                "\\;"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX16_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a piecewise function defining a mathematical scenario into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\begin{cases} and \\end{cases} environment to implement the piecewise format.\n- Clearly indicate the condition for each case using proper inequality symbols (e.g., <, \\leq, >, \\geq).\n- Format each case so that the mathematical expression appears to the left and the condition to the right, separated by a comma.\n- Encapsulate any textual explanation within math mode using the \\text{} command where necessary.\n- Ensure every variable is represented in italics and constants are shown in their standard mathematical form.\n- Include spacing commands (e.g., \\, or \\;) between operators and operands to enhance readability.\n- Use absolute value notation with \\lvert and \\rvert if any case involves modulus expressions."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX16_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\begin{cases}",
                                "\\end{cases}",
                                "<",
                                "\\leq",
                                ">",
                                "\\geq",
                                "\\text{",
                                "\\lvert",
                                "\\rvert",
                                "\\,",
                                "\\;"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX16_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX16_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Is the equation wrapped within a dedicated equation environment?",
                                "Does the rendered output display a piecewise function using a cases structure?",
                                "Are the inequality symbols (e.g., '<', '\\leq', '>', '\\geq') clearly visible in the conditions?",
                                "Is there a visible comma separating the mathematical expression from its condition in each case?",
                                "Are any textual explanations enclosed within a text mode command?",
                                "Do the variables appear in italics while constants are in standard mathematical styling?",
                                "Is there clear spacing between operators and operands as indicated by visible spacing commands?",
                                "If any modulus expressions are present, are they shown with absolute value notation using specific delimiters?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX16_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nTransform the given plain text description of a matrix multiplication operation into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Use the \\begin{bmatrix} and \\end{bmatrix} environments to represent each matrix.\n- Represent the multiplication operation with a centered \\times symbol.\n- Format each matrix entry using subscript notation (e.g., a_{ij}) where appropriate.\n- Italicize all single-letter variable names within the matrices.\n- Include \\, spacing commands between different elements to ensure clear separation.\n- Use proper alignment commands if necessary to display the product of matrices in a single equation.\n- Ensure that when matrices require the use of parentheses for clarity, \\left( and \\right) are used.\n- Maintain consistency in the size and style of brackets across the entire equation.\n- Clearly denote any scalar multiplication by placing the scalar adjacent to the matrix with no additional multiplication symbol.",
            "task_id": "00XX17",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "What type of brackets are used to enclose each matrix?",
                "What symbol is used to indicate multiplication between matrices?",
                "How are individual matrix entries labeled?",
                "Are single-letter variable names in the matrices italicized?",
                "How is scalar multiplication denoted in the equation?",
                "Is extra spacing provided between different parts of the equation?",
                "Are parentheses used for clarity when required in the equation?",
                "In the rendered equation, how many main matrices are displayed?"
            ],
            "VQA_answers": [
                "Square brackets",
                "A centered × symbol",
                "Using subscript notation (e.g., a₍ᵢⱼ₎) with italicized letters",
                "Yes",
                "By placing the scalar adjacent to the matrix with no extra multiplication symbol",
                "Yes, with explicit spacing commands",
                "Yes, with matching left and right parentheses",
                "Two"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\begin{bmatrix}",
                "\\end{bmatrix}",
                "\\times",
                "a_{ij}",
                "\\,",
                "\\left(",
                "\\right)"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX17_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nTransform the given plain text description of a matrix multiplication operation into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Use the \\begin{bmatrix} and \\end{bmatrix} environments to represent each matrix.\n- Represent the multiplication operation with a centered \\times symbol.\n- Format each matrix entry using subscript notation (e.g., a_{ij}) where appropriate.\n- Italicize all single-letter variable names within the matrices.\n- Include \\, spacing commands between different elements to ensure clear separation.\n- Use proper alignment commands if necessary to display the product of matrices in a single equation.\n- Ensure that when matrices require the use of parentheses for clarity, \\left( and \\right) are used.\n- Maintain consistency in the size and style of brackets across the entire equation.\n- Clearly denote any scalar multiplication by placing the scalar adjacent to the matrix with no additional multiplication symbol."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX17_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\begin{bmatrix}",
                                "\\end{bmatrix}",
                                "\\times",
                                "a_{ij}",
                                "\\,",
                                "\\left(",
                                "\\right)"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX17_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX17_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What type of brackets are used to enclose each matrix?",
                                "What symbol is used to indicate multiplication between matrices?",
                                "How are individual matrix entries labeled?",
                                "Are single-letter variable names in the matrices italicized?",
                                "How is scalar multiplication denoted in the equation?",
                                "Is extra spacing provided between different parts of the equation?",
                                "Are parentheses used for clarity when required in the equation?",
                                "In the rendered equation, how many main matrices are displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX17_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Square brackets",
                                "A centered × symbol",
                                "Using subscript notation (e.g., a₍ᵢⱼ₎) with italicized letters",
                                "Yes",
                                "By placing the scalar adjacent to the matrix with no extra multiplication symbol",
                                "Yes, with explicit spacing commands",
                                "Yes, with matching left and right parentheses",
                                "Two"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a probability density function for a normal distribution into a fully formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to clearly display the fraction that represents the normalization constant.\n- Represent the exponential term using the caret (^) symbol, enclosing its power in curly braces.\n- Format the square root portion with the \\sqrt{} command to indicate the standard deviation factor.\n- Ensure that the constant π is formatted as \\pi and is not italicized.\n- Italicize all variables, such as x and σ, using standard LaTeX mathematical formatting.\n- Insert appropriate spacing commands (e.g., \\, or \\;) between different elements of the equation for clarity.\n- Make sure any subscripts, such as those in μ and σ, use the underscore notation with curly braces.\n- Use parentheses around the expression inside the exponent to maintain the correct order of operations.",
            "task_id": "00XX18",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered output clearly show an equation environment with a distinct beginning and ending?",
                "Is the normalization constant displayed as a fraction with a numerator and denominator?",
                "Is the exponential term rendered with its power enclosed in curly braces following a caret?",
                "Is there a formatted square root symbol that indicates the standard deviation factor?",
                "Is the constant π correctly formatted as \\pi and not italicized?",
                "Are all variables such as x and \\sigma displayed in italic style?",
                "Is appropriate spacing visible between elements in the equation?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\frac",
                "\\sqrt",
                "e^{",
                "\\pi",
                "\\,",
                "\\;",
                "_{"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX18_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nConvert the given plain text description of a probability density function for a normal distribution into a fully formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to clearly display the fraction that represents the normalization constant.\n- Represent the exponential term using the caret (^) symbol, enclosing its power in curly braces.\n- Format the square root portion with the \\sqrt{} command to indicate the standard deviation factor.\n- Ensure that the constant π is formatted as \\pi and is not italicized.\n- Italicize all variables, such as x and σ, using standard LaTeX mathematical formatting.\n- Insert appropriate spacing commands (e.g., \\, or \\;) between different elements of the equation for clarity.\n- Make sure any subscripts, such as those in μ and σ, use the underscore notation with curly braces.\n- Use parentheses around the expression inside the exponent to maintain the correct order of operations."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX18_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\frac",
                                "\\sqrt",
                                "e^{",
                                "\\pi",
                                "\\,",
                                "\\;",
                                "_{"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX18_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX18_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered output clearly show an equation environment with a distinct beginning and ending?",
                                "Is the normalization constant displayed as a fraction with a numerator and denominator?",
                                "Is the exponential term rendered with its power enclosed in curly braces following a caret?",
                                "Is there a formatted square root symbol that indicates the standard deviation factor?",
                                "Is the constant π correctly formatted as \\pi and not italicized?",
                                "Are all variables such as x and \\sigma displayed in italic style?",
                                "Is appropriate spacing visible between elements in the equation?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX18_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Latex:\n\nTask:\nTransform the following plain text description of a calculus expression into a correctly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and conclude with \\end{equation}.\n- Include a definite integral sign with specified lower and upper bounds using the appropriate LaTeX syntax.\n- Use the \\, command to insert a small space between the integral sign and the integrand.\n- Implement \\left( and \\right) for properly paired and scaled parentheses around the integrand.\n- Present any exponential function using the format e^{\\text{...}} where the exponent is enclosed in curly braces.\n- Utilize the \\frac{}{} command to display any fractional parts of the integrand, ensuring both numerator and denominator are provided.\n- Italicize variable names and use \\mathrm{} for standard mathematical functions if needed.\n- Ensure differential elements (such as dx) are written with a small space before them using the \\, command.\n- If any logarithmic functions appear, format them using \\ln with the argument enclosed in parentheses.",
            "task_id": "00XX19",
            "task_name": "Text to Latex",
            "input_type": "Text",
            "output_type": "Latex",
            "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
            "VQA_questions": [
                "Does the rendered equation start with a visible begin tag for the equation environment?",
                "Does the equation end with an end tag for the equation environment?",
                "Is there a definite integral shown with both lower and upper bounds?",
                "Is a small space visibly inserted between the integral symbol and the integrand?",
                "Are the parentheses around the integrand scaled using paired left and right commands?",
                "Are exponential functions formatted with the text mode inside the exponent (e.g., e^{text...})?",
                "Is any fractional part of the integrand displayed using a fraction layout with both numerator and denominator?",
                "Are variable names italicized and differential elements preceded by a small space?"
            ],
            "VQA_answers": [
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "\\begin{equation}",
                "\\end{equation}",
                "\\int",
                "_{",
                "}^{",
                "\\,",
                "\\left(",
                "\\right)",
                "e^{\\text{",
                "\\frac{",
                "}{",
                "\\mathrm{",
                "\\, dx",
                "\\ln("
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "00XX19_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Latex:\n\nTask:\nTransform the following plain text description of a calculus expression into a correctly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and conclude with \\end{equation}.\n- Include a definite integral sign with specified lower and upper bounds using the appropriate LaTeX syntax.\n- Use the \\, command to insert a small space between the integral sign and the integrand.\n- Implement \\left( and \\right) for properly paired and scaled parentheses around the integrand.\n- Present any exponential function using the format e^{\\text{...}} where the exponent is enclosed in curly braces.\n- Utilize the \\frac{}{} command to display any fractional parts of the integrand, ensuring both numerator and denominator are provided.\n- Italicize variable names and use \\mathrm{} for standard mathematical functions if needed.\n- Ensure differential elements (such as dx) are written with a small space before them using the \\, command.\n- If any logarithmic functions appear, format them using \\ln with the argument enclosed in parentheses."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "00XX19_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "\\begin{equation}",
                                "\\end{equation}",
                                "\\int",
                                "_{",
                                "}^{",
                                "\\,",
                                "\\left(",
                                "\\right)",
                                "e^{\\text{",
                                "\\frac{",
                                "}{",
                                "\\mathrm{",
                                "\\, dx",
                                "\\ln("
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "00XX19_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "00XX19_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Does the rendered equation start with a visible begin tag for the equation environment?",
                                "Does the equation end with an end tag for the equation environment?",
                                "Is there a definite integral shown with both lower and upper bounds?",
                                "Is a small space visibly inserted between the integral symbol and the integrand?",
                                "Are the parentheses around the integrand scaled using paired left and right commands?",
                                "Are exponential functions formatted with the text mode inside the exponent (e.g., e^{text...})?",
                                "Is any fractional part of the integrand displayed using a fraction layout with both numerator and denominator?",
                                "Are variable names italicized and differential elements preceded by a small space?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "00XX19_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    }
]