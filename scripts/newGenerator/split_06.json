[
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a well-structured TOML configuration that organizes the content into clearly defined sections.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# System Generated Configuration File\" at the top.\n- Create a [header] section that includes the key \"title\" with a string value, and the key \"date\" with a string value formatted as \"YYYY-MM-DD\".\n- Define a [authors] section containing exactly two keys: \"primary\" and \"secondary\", each associated with a string representing a name.\n- Include a [preferences] section that features four numeric keys: \"threshold\", \"min\", \"max\", and \"median\", with integer values.\n- Establish a [controls] section that specifies exactly three keys: \"start\", \"stop\", and \"reset\", each with boolean values set to either true or false.\n- Add a [statistics] section that includes one key \"values\" which is an array containing exactly four floating point numbers.\n- Conclude with a [logs] section where three keys \"debug\", \"trace\", and \"error\" are provided, each formatted as a non-empty string enclosed in double quotes.",
            "task_id": "001000",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.title",
                "header.date",
                "authors.primary",
                "authors.secondary",
                "preferences.threshold",
                "preferences.min",
                "preferences.max",
                "preferences.median",
                "controls.start",
                "controls.stop",
                "controls.reset",
                "statistics.values",
                "logs.debug",
                "logs.trace",
                "logs.error"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001000_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided narrative into a well-structured TOML configuration that organizes the content into clearly defined sections.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# System Generated Configuration File\" at the top.\n- Create a [header] section that includes the key \"title\" with a string value, and the key \"date\" with a string value formatted as \"YYYY-MM-DD\".\n- Define a [authors] section containing exactly two keys: \"primary\" and \"secondary\", each associated with a string representing a name.\n- Include a [preferences] section that features four numeric keys: \"threshold\", \"min\", \"max\", and \"median\", with integer values.\n- Establish a [controls] section that specifies exactly three keys: \"start\", \"stop\", and \"reset\", each with boolean values set to either true or false.\n- Add a [statistics] section that includes one key \"values\" which is an array containing exactly four floating point numbers.\n- Conclude with a [logs] section where three keys \"debug\", \"trace\", and \"error\" are provided, each formatted as a non-empty string enclosed in double quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001000_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.title",
                                "header.date",
                                "authors.primary",
                                "authors.secondary",
                                "preferences.threshold",
                                "preferences.min",
                                "preferences.max",
                                "preferences.median",
                                "controls.start",
                                "controls.stop",
                                "controls.reset",
                                "statistics.values",
                                "logs.debug",
                                "logs.trace",
                                "logs.error"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the description of a scientific experiment setup into a structured TOML configuration file.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Scientific Configuration\".\n- Create an [experiment] section that includes two keys: \"title\" and \"objective\", each associated with a non-empty string value enclosed in double quotes.\n- Include a [metadata] section with exactly two keys: \"researcher\" and \"date\", each storing a string value, where \"date\" follows the \"YYYY-MM-DD\" format.\n- Add a [parameters] section containing three numeric keys: \"temperature\", \"pressure\", and \"duration\", where each value is either an integer or a float.\n- Introduce a [results] section that features an array key \"values\" holding exactly four integer values.\n- Provide a [notes] section with exactly three keys: \"initial\", \"midpoint\", and \"final\", each paired with a non-empty string value enclosed in double quotes.\n- Include a [flags] section that specifies two boolean keys: \"approved\" and \"verified\", each set to either true or false.",
            "task_id": "001001",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "experiment.title",
                "experiment.objective",
                "metadata.researcher",
                "metadata.date",
                "parameters.temperature",
                "parameters.pressure",
                "parameters.duration",
                "results.values",
                "notes.initial",
                "notes.midpoint",
                "notes.final",
                "flags.approved",
                "flags.verified"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001001_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the description of a scientific experiment setup into a structured TOML configuration file.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Scientific Configuration\".\n- Create an [experiment] section that includes two keys: \"title\" and \"objective\", each associated with a non-empty string value enclosed in double quotes.\n- Include a [metadata] section with exactly two keys: \"researcher\" and \"date\", each storing a string value, where \"date\" follows the \"YYYY-MM-DD\" format.\n- Add a [parameters] section containing three numeric keys: \"temperature\", \"pressure\", and \"duration\", where each value is either an integer or a float.\n- Introduce a [results] section that features an array key \"values\" holding exactly four integer values.\n- Provide a [notes] section with exactly three keys: \"initial\", \"midpoint\", and \"final\", each paired with a non-empty string value enclosed in double quotes.\n- Include a [flags] section that specifies two boolean keys: \"approved\" and \"verified\", each set to either true or false."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001001_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "experiment.title",
                                "experiment.objective",
                                "metadata.researcher",
                                "metadata.date",
                                "parameters.temperature",
                                "parameters.pressure",
                                "parameters.duration",
                                "results.values",
                                "notes.initial",
                                "notes.midpoint",
                                "notes.final",
                                "flags.approved",
                                "flags.verified"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration representing a simulation setup with structured sections and key-value pairs.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by the text \"Generated Simulation Configuration\".\n- Include a section labeled [configuration] that contains a key \"title\" with a string value enclosed in double quotes.\n- Under a section [info], specify exactly three keys: \"creator\", \"date\", and \"type\", each assigned a string value enclosed in double quotes.\n- Create a section [parameters] that includes exactly four keys: \"iterations\", \"timeout\", \"threshold\", and \"rate\", each set to an integer numeric value.\n- Under a section [flags], include exactly three boolean keys: \"active\", \"test_mode\", and \"log_enabled\", each set either to true or false.\n- Add a section [values] containing exactly two arrays: \"scores\" and \"indexes\", with each array holding exactly five decimal number values.\n- Include a section [notes] that has exactly two keys: \"remark\" and \"summary\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure that all string values in the TOML file are encapsulated in double quotes.",
            "task_id": "001002",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "configuration.title",
                "info.creator",
                "info.date",
                "info.type",
                "parameters.iterations",
                "parameters.timeout",
                "parameters.threshold",
                "parameters.rate",
                "flags.active",
                "flags.test_mode",
                "flags.log_enabled",
                "values.scores",
                "values.indexes",
                "notes.remark",
                "notes.summary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001002_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration representing a simulation setup with structured sections and key-value pairs.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by the text \"Generated Simulation Configuration\".\n- Include a section labeled [configuration] that contains a key \"title\" with a string value enclosed in double quotes.\n- Under a section [info], specify exactly three keys: \"creator\", \"date\", and \"type\", each assigned a string value enclosed in double quotes.\n- Create a section [parameters] that includes exactly four keys: \"iterations\", \"timeout\", \"threshold\", and \"rate\", each set to an integer numeric value.\n- Under a section [flags], include exactly three boolean keys: \"active\", \"test_mode\", and \"log_enabled\", each set either to true or false.\n- Add a section [values] containing exactly two arrays: \"scores\" and \"indexes\", with each array holding exactly five decimal number values.\n- Include a section [notes] that has exactly two keys: \"remark\" and \"summary\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure that all string values in the TOML file are encapsulated in double quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001002_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "configuration.title",
                                "info.creator",
                                "info.date",
                                "info.type",
                                "parameters.iterations",
                                "parameters.timeout",
                                "parameters.threshold",
                                "parameters.rate",
                                "flags.active",
                                "flags.test_mode",
                                "flags.log_enabled",
                                "values.scores",
                                "values.indexes",
                                "notes.remark",
                                "notes.summary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nCreate a TOML configuration file for a simulated application environment with specific sections and defined values.\n\nFeature Requirements:\n- Begin with a single-line comment starting with # followed by the text \"Auto-generated TOML Config\".\n- Include a [project] section with two keys: \"title\" for the project name and \"id\" for the project identifier, each value must be enclosed in double quotes.\n- Within a [config] section, include two numeric keys: \"max_users\" and \"timeout\" with integer values, and one floating-point key \"threshold\" with a value formatted to two decimal places.\n- Add a [permissions] section that lists four boolean keys: \"read\", \"write\", \"execute\", and \"delete\", each set explicitly to true or false.\n- Create a [data] section containing two arrays: \"scores\" and \"values\", each array must hold exactly four integers.\n- Under a [notifications] section, provide exactly three keys: \"success\", \"failure\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that every string value is enclosed in double quotes and that consistent indentation of two spaces is used for any nested elements in sections.\n- The TOML file must follow proper TOML syntax without any extra spacing or additional sections.",
            "task_id": "001003",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project.title",
                "project.id",
                "config.max_users",
                "config.timeout",
                "config.threshold",
                "permissions.read",
                "permissions.write",
                "permissions.execute",
                "permissions.delete",
                "data.scores",
                "data.values",
                "notifications.success",
                "notifications.failure",
                "notifications.alert"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001003_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nCreate a TOML configuration file for a simulated application environment with specific sections and defined values.\n\nFeature Requirements:\n- Begin with a single-line comment starting with # followed by the text \"Auto-generated TOML Config\".\n- Include a [project] section with two keys: \"title\" for the project name and \"id\" for the project identifier, each value must be enclosed in double quotes.\n- Within a [config] section, include two numeric keys: \"max_users\" and \"timeout\" with integer values, and one floating-point key \"threshold\" with a value formatted to two decimal places.\n- Add a [permissions] section that lists four boolean keys: \"read\", \"write\", \"execute\", and \"delete\", each set explicitly to true or false.\n- Create a [data] section containing two arrays: \"scores\" and \"values\", each array must hold exactly four integers.\n- Under a [notifications] section, provide exactly three keys: \"success\", \"failure\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that every string value is enclosed in double quotes and that consistent indentation of two spaces is used for any nested elements in sections.\n- The TOML file must follow proper TOML syntax without any extra spacing or additional sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001003_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project.title",
                                "project.id",
                                "config.max_users",
                                "config.timeout",
                                "config.threshold",
                                "permissions.read",
                                "permissions.write",
                                "permissions.execute",
                                "permissions.delete",
                                "data.scores",
                                "data.values",
                                "notifications.success",
                                "notifications.failure",
                                "notifications.alert"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a clearly defined TOML configuration structure.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Customized TOML Setup\".\n- Create a section labeled [header] containing a key \"description\" with a string value enclosed in double quotes.\n- Under the [config] section, include exactly three boolean keys: \"active\", \"enabled\", and \"locked\", each assigned either true or false.\n- Add a [metrics] section with exactly three keys: \"rating\", \"level\", and \"count\", each holding a numeric value.\n- Construct a [synchronization] section that contains exactly two arrays: \"timestamps\" and \"delays\", each with three numeric elements.\n- Define a [notes] section with exactly three keys: \"update\", \"review\", and \"deploy\", each associated with a non-empty string value in double quotes.\n- Ensure all string values in the TOML format are enclosed in double quotes.\n- Use exactly two spaces of indentation for nested elements within each section.",
            "task_id": "001004",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.description",
                "config.active",
                "config.enabled",
                "config.locked",
                "metrics.rating",
                "metrics.level",
                "metrics.count",
                "synchronization.timestamps",
                "synchronization.delays",
                "notes.update",
                "notes.review",
                "notes.deploy"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001004_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided narrative into a clearly defined TOML configuration structure.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Customized TOML Setup\".\n- Create a section labeled [header] containing a key \"description\" with a string value enclosed in double quotes.\n- Under the [config] section, include exactly three boolean keys: \"active\", \"enabled\", and \"locked\", each assigned either true or false.\n- Add a [metrics] section with exactly three keys: \"rating\", \"level\", and \"count\", each holding a numeric value.\n- Construct a [synchronization] section that contains exactly two arrays: \"timestamps\" and \"delays\", each with three numeric elements.\n- Define a [notes] section with exactly three keys: \"update\", \"review\", and \"deploy\", each associated with a non-empty string value in double quotes.\n- Ensure all string values in the TOML format are enclosed in double quotes.\n- Use exactly two spaces of indentation for nested elements within each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001004_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.description",
                                "config.active",
                                "config.enabled",
                                "config.locked",
                                "metrics.rating",
                                "metrics.level",
                                "metrics.count",
                                "synchronization.timestamps",
                                "synchronization.delays",
                                "notes.update",
                                "notes.review",
                                "notes.deploy"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided game level narrative into a structured TOML configuration for a video game.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Auto-generated Game Level Configuration\".\n- Include a [level] section with the keys \"name\" and \"difficulty\", where \"name\" is a string and \"difficulty\" is one of \"easy\", \"medium\", or \"hard\", both enclosed in double quotes.\n- Under the [config] section, specify exactly two numeric keys: \"max_players\" and \"time_limit\", with \"time_limit\" representing the duration in seconds.\n- Create a [spawn] section containing three keys: \"start\", \"checkpoint\", and \"finish\". Each of these keys should be associated with a nested table that holds numeric coordinates \"x\" and \"y\".\n- Provide a [rules] section that includes exactly three boolean keys: \"jump\", \"run\", and \"crouch\", with their values set to true or false.\n- Ensure all string values appear within double quotes and maintain consistent two-space indentation for nested elements.",
            "task_id": "001005",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "level.name",
                "level.difficulty",
                "config.max_players",
                "config.time_limit",
                "spawn.start.x",
                "spawn.start.y",
                "spawn.checkpoint.x",
                "spawn.checkpoint.y",
                "spawn.finish.x",
                "spawn.finish.y",
                "rules.jump",
                "rules.run",
                "rules.crouch"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001005_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided game level narrative into a structured TOML configuration for a video game.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Auto-generated Game Level Configuration\".\n- Include a [level] section with the keys \"name\" and \"difficulty\", where \"name\" is a string and \"difficulty\" is one of \"easy\", \"medium\", or \"hard\", both enclosed in double quotes.\n- Under the [config] section, specify exactly two numeric keys: \"max_players\" and \"time_limit\", with \"time_limit\" representing the duration in seconds.\n- Create a [spawn] section containing three keys: \"start\", \"checkpoint\", and \"finish\". Each of these keys should be associated with a nested table that holds numeric coordinates \"x\" and \"y\".\n- Provide a [rules] section that includes exactly three boolean keys: \"jump\", \"run\", and \"crouch\", with their values set to true or false.\n- Ensure all string values appear within double quotes and maintain consistent two-space indentation for nested elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001005_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "level.name",
                                "level.difficulty",
                                "config.max_players",
                                "config.time_limit",
                                "spawn.start.x",
                                "spawn.start.y",
                                "spawn.checkpoint.x",
                                "spawn.checkpoint.y",
                                "spawn.finish.x",
                                "spawn.finish.y",
                                "rules.jump",
                                "rules.run",
                                "rules.crouch"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration for a simulation scenario.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Simulation TOML File\".\n- Include a [config] section with keys \"simulationName\" and \"scenario\", both set to a string value enclosed in double quotes.\n- Under a [versionInfo] section, include exactly two keys: \"release\" and \"build\", each with a corresponding string value enclosed in double quotes.\n- Create a [flags] section containing three boolean keys: \"active\", \"interactive\", and \"monitor\", each set to either true or false.\n- Under a [parameters] section, provide exactly two arrays: \"thresholds\" and \"limits\", each holding exactly three numeric values.\n- Establish an [alerts] section with exactly three keys: \"notice\", \"caution\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "task_id": "001006",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "config.simulationName",
                "config.scenario",
                "versionInfo.release",
                "versionInfo.build",
                "flags.active",
                "flags.interactive",
                "flags.monitor",
                "parameters.thresholds",
                "parameters.limits",
                "alerts.notice",
                "alerts.caution",
                "alerts.alert"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001006_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration for a simulation scenario.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Simulation TOML File\".\n- Include a [config] section with keys \"simulationName\" and \"scenario\", both set to a string value enclosed in double quotes.\n- Under a [versionInfo] section, include exactly two keys: \"release\" and \"build\", each with a corresponding string value enclosed in double quotes.\n- Create a [flags] section containing three boolean keys: \"active\", \"interactive\", and \"monitor\", each set to either true or false.\n- Under a [parameters] section, provide exactly two arrays: \"thresholds\" and \"limits\", each holding exactly three numeric values.\n- Establish an [alerts] section with exactly three keys: \"notice\", \"caution\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001006_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "config.simulationName",
                                "config.scenario",
                                "versionInfo.release",
                                "versionInfo.build",
                                "flags.active",
                                "flags.interactive",
                                "flags.monitor",
                                "parameters.thresholds",
                                "parameters.limits",
                                "alerts.notice",
                                "alerts.caution",
                                "alerts.alert"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a sensor monitoring system that processes temperature data.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with # followed by the text \"Sensor Data TOML Configuration Generated\".\n- Create a [project] section with a key \"name\" set to a string that represents the project title.\n- Add a [contact] section containing exactly two keys: \"support_email\" and \"maintainer\", each assigned a valid email address string.\n- Include a [flags] section with three boolean keys: \"active\", \"record\", and \"debug\", each set to either true or false.\n- Define a [measurements] section that holds exactly one array named \"values\" with three integer numeric figures.\n- Insert an [info] section with exactly three keys: \"description\", \"location\", and \"notes\", each having a non-empty string value.\n- Ensure every string value is enclosed within double quotes.\n- Apply consistent indentation of two spaces for any nested elements within each section.",
            "task_id": "001007",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project.name",
                "contact.support_email",
                "contact.maintainer",
                "flags.active",
                "flags.record",
                "flags.debug",
                "measurements.values",
                "info.description",
                "info.location",
                "info.notes"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001007_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a sensor monitoring system that processes temperature data.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with # followed by the text \"Sensor Data TOML Configuration Generated\".\n- Create a [project] section with a key \"name\" set to a string that represents the project title.\n- Add a [contact] section containing exactly two keys: \"support_email\" and \"maintainer\", each assigned a valid email address string.\n- Include a [flags] section with three boolean keys: \"active\", \"record\", and \"debug\", each set to either true or false.\n- Define a [measurements] section that holds exactly one array named \"values\" with three integer numeric figures.\n- Insert an [info] section with exactly three keys: \"description\", \"location\", and \"notes\", each having a non-empty string value.\n- Ensure every string value is enclosed within double quotes.\n- Apply consistent indentation of two spaces for any nested elements within each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001007_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project.name",
                                "contact.support_email",
                                "contact.maintainer",
                                "flags.active",
                                "flags.record",
                                "flags.debug",
                                "measurements.values",
                                "info.description",
                                "info.location",
                                "info.notes"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration file that accurately reflects the settings and parameters for a fictional desktop application.\n\nFeature Requirements:\n- Start the output with a single-line comment that reads \"# Configurable TOML Setup\".\n- Include a [profile] section with the key \"username\" that holds a string value enclosed in double quotes.\n- Under the [version_info] section, include exactly two keys: \"release\" with a value in the format \"vX.Y.Z\" and \"build\" with a numeric value.\n- Create a [preferences] section containing three boolean keys: \"dark_mode\", \"notifications\", and \"auto_update\", each set to either true or false.\n- Provide a [numbers] section with two arrays: \"primes\" and \"fibonacci\", each array containing exactly four integer values.\n- Under the [logs] section, ensure there are exactly three keys: \"start\", \"stop\", and \"error_log\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within any sections.",
            "task_id": "001008",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Configurable TOML Setup",
                "profile.username",
                "version_info.release",
                "version_info.build",
                "preferences.dark_mode",
                "preferences.notifications",
                "preferences.auto_update",
                "numbers.primes",
                "numbers.fibonacci",
                "logs.start",
                "logs.stop",
                "logs.error_log"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001008_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration file that accurately reflects the settings and parameters for a fictional desktop application.\n\nFeature Requirements:\n- Start the output with a single-line comment that reads \"# Configurable TOML Setup\".\n- Include a [profile] section with the key \"username\" that holds a string value enclosed in double quotes.\n- Under the [version_info] section, include exactly two keys: \"release\" with a value in the format \"vX.Y.Z\" and \"build\" with a numeric value.\n- Create a [preferences] section containing three boolean keys: \"dark_mode\", \"notifications\", and \"auto_update\", each set to either true or false.\n- Provide a [numbers] section with two arrays: \"primes\" and \"fibonacci\", each array containing exactly four integer values.\n- Under the [logs] section, ensure there are exactly three keys: \"start\", \"stop\", and \"error_log\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within any sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001008_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Configurable TOML Setup",
                                "profile.username",
                                "version_info.release",
                                "version_info.build",
                                "preferences.dark_mode",
                                "preferences.notifications",
                                "preferences.auto_update",
                                "numbers.primes",
                                "numbers.fibonacci",
                                "logs.start",
                                "logs.stop",
                                "logs.error_log"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided passage into a TOML configuration that organizes predetermined fields and values.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Custom TOML Layout\".\n- Create a [header] section that includes two keys: \"project\" and \"date\", where \"project\" is a string and \"date\" is a string in \"YYYY-MM-DD\" format.\n- Include an [authors] section containing exactly two keys: \"primary\" and \"secondary\", each assigned a string value.\n- Add a [flags] section with three boolean keys: \"active\", \"deprecated\", and \"beta\", each set to either true or false.\n- Define a [metrics] section that includes exactly two arrays: \"values\" and \"points\", with each array containing exactly four integer values.\n- Under a [logs] section, include three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string message.\n- Introduce a [config] section with one key \"retry_count\" assigned an integer value.\n- Ensure every string value in the TOML file is enclosed in double quotes and maintain consistent two-space indentations where applicable.",
            "task_id": "001009",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.project",
                "header.date",
                "authors.primary",
                "authors.secondary",
                "flags.active",
                "flags.deprecated",
                "flags.beta",
                "metrics.values",
                "metrics.points",
                "logs.start",
                "logs.process",
                "logs.finish",
                "config.retry_count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001009_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided passage into a TOML configuration that organizes predetermined fields and values.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Custom TOML Layout\".\n- Create a [header] section that includes two keys: \"project\" and \"date\", where \"project\" is a string and \"date\" is a string in \"YYYY-MM-DD\" format.\n- Include an [authors] section containing exactly two keys: \"primary\" and \"secondary\", each assigned a string value.\n- Add a [flags] section with three boolean keys: \"active\", \"deprecated\", and \"beta\", each set to either true or false.\n- Define a [metrics] section that includes exactly two arrays: \"values\" and \"points\", with each array containing exactly four integer values.\n- Under a [logs] section, include three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string message.\n- Introduce a [config] section with one key \"retry_count\" assigned an integer value.\n- Ensure every string value in the TOML file is enclosed in double quotes and maintain consistent two-space indentations where applicable."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001009_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.project",
                                "header.date",
                                "authors.primary",
                                "authors.secondary",
                                "flags.active",
                                "flags.deprecated",
                                "flags.beta",
                                "metrics.values",
                                "metrics.points",
                                "logs.start",
                                "logs.process",
                                "logs.finish",
                                "config.retry_count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided instructions into a TOML configuration for a hypothetical web server setup.\n\nFeature Requirements:\n- Include a [header] section with a key service assigned a double-quoted string representing the web service name.\n- Under the [information] section, list exactly two keys: maintainer and date, each paired with a double-quoted string.\n- Include a [server] section containing exactly three keys: host (a double-quoted string), port (an integer), and protocol (a double-quoted string).\n- Provide a [limits] section with exactly two arrays: connections and bandwidth, each containing four numeric values.\n- Under the [flags] section, include three boolean keys: active, secure, and logging, each set to either true or false.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Web Server Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent two-space indentation for any nested elements within sections.",
            "task_id": "001010",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.service",
                "information.maintainer",
                "information.date",
                "server.host",
                "server.port",
                "server.protocol",
                "limits.connections",
                "limits.bandwidth",
                "flags.active",
                "flags.secure",
                "flags.logging"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001010_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided instructions into a TOML configuration for a hypothetical web server setup.\n\nFeature Requirements:\n- Include a [header] section with a key service assigned a double-quoted string representing the web service name.\n- Under the [information] section, list exactly two keys: maintainer and date, each paired with a double-quoted string.\n- Include a [server] section containing exactly three keys: host (a double-quoted string), port (an integer), and protocol (a double-quoted string).\n- Provide a [limits] section with exactly two arrays: connections and bandwidth, each containing four numeric values.\n- Under the [flags] section, include three boolean keys: active, secure, and logging, each set to either true or false.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Web Server Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent two-space indentation for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001010_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.service",
                                "information.maintainer",
                                "information.date",
                                "server.host",
                                "server.port",
                                "server.protocol",
                                "limits.connections",
                                "limits.bandwidth",
                                "flags.active",
                                "flags.secure",
                                "flags.logging"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration that represents a fictional space station control module setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Space Station Config\".\n- Create a [module] section containing a key \"identifier\" whose value is a string starting with \"SS-\" followed by digits.\n- Include a [control] section with two keys: \"active\" (a boolean value) and \"priority\" (an integer value).\n- Add an [environment] section that contains an array key \"sensors\" with exactly four string elements, each enclosed in double quotes.\n- Provide an [alarms] section with exactly two keys: \"low\" and \"high\", each assigned a numerical value.\n- Set up a [communications] section with two keys: \"frequency\" assigned a float value and \"channel\" assigned an integer value.\n- Ensure that all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements or complex structures.\n- Guarantee that all key names are in lower-case and use underscores to separate words.\n- Conclude with exactly one single-line comment at the end of the file starting with \"# Configuration Complete\".",
            "task_id": "001011",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "module.identifier",
                "control.active",
                "control.priority",
                "environment.sensors",
                "alarms.low",
                "alarms.high",
                "communications.frequency",
                "communications.channel"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001011_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration that represents a fictional space station control module setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Space Station Config\".\n- Create a [module] section containing a key \"identifier\" whose value is a string starting with \"SS-\" followed by digits.\n- Include a [control] section with two keys: \"active\" (a boolean value) and \"priority\" (an integer value).\n- Add an [environment] section that contains an array key \"sensors\" with exactly four string elements, each enclosed in double quotes.\n- Provide an [alarms] section with exactly two keys: \"low\" and \"high\", each assigned a numerical value.\n- Set up a [communications] section with two keys: \"frequency\" assigned a float value and \"channel\" assigned an integer value.\n- Ensure that all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements or complex structures.\n- Guarantee that all key names are in lower-case and use underscores to separate words.\n- Conclude with exactly one single-line comment at the end of the file starting with \"# Configuration Complete\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001011_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "module.identifier",
                                "control.active",
                                "control.priority",
                                "environment.sensors",
                                "alarms.low",
                                "alarms.high",
                                "communications.frequency",
                                "communications.channel"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration that outlines the details of a mythical creature registry.\n\nFeature Requirements:\n- Include a section labeled [registry] with the key \"theme\" set to a string value indicating \"Mythical Creatures\".\n- Under the [details] section, list exactly two keys: \"keeper\" and \"location\", each assigned a string value enclosed in double quotes.\n- Create a section [permissions] containing two keys \"searchable\" and \"editable\", each set to either true or false.\n- Provide a section [creatures] that includes exactly two arrays: \"names\" (holding three distinct strings for creature names) and \"ages\" (holding three corresponding integer values).\n- Insert a single-line comment at the top of the TOML file beginning with '#' followed by the text \"Mythical Creature Registry Configuration\".\n- Ensure all string values across the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within each section.",
            "task_id": "001012",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "registry.theme",
                "details.keeper",
                "details.location",
                "permissions.searchable",
                "permissions.editable",
                "creatures.names",
                "creatures.ages"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001012_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration that outlines the details of a mythical creature registry.\n\nFeature Requirements:\n- Include a section labeled [registry] with the key \"theme\" set to a string value indicating \"Mythical Creatures\".\n- Under the [details] section, list exactly two keys: \"keeper\" and \"location\", each assigned a string value enclosed in double quotes.\n- Create a section [permissions] containing two keys \"searchable\" and \"editable\", each set to either true or false.\n- Provide a section [creatures] that includes exactly two arrays: \"names\" (holding three distinct strings for creature names) and \"ages\" (holding three corresponding integer values).\n- Insert a single-line comment at the top of the TOML file beginning with '#' followed by the text \"Mythical Creature Registry Configuration\".\n- Ensure all string values across the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001012_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "registry.theme",
                                "details.keeper",
                                "details.location",
                                "permissions.searchable",
                                "permissions.editable",
                                "creatures.names",
                                "creatures.ages"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a well-structured TOML configuration that organizes project details, options, parameters, and logs.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment that starts with \"#\" followed by the text \"Automated TOML Setup\".\n- Create a [header] section that includes the key \"project\" with a corresponding string value enclosed in double quotes.\n- Under an [info] section, include exactly three keys: \"creator\", \"release\", and \"license\", each paired with a specific string value enclosed in double quotes.\n- Add an [options] section that contains two keys: \"max_connections\" and \"timeout\", each assigned a numeric (integer) value.\n- Insert a [parameters] section that includes exactly two arrays: \"values\" and \"thresholds\", each containing four precise floating-point numbers separated only by commas.\n- Create a [logs] section with exactly two keys: \"start\" and \"stop\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that if any nested elements are present, they use a consistent indentation of two spaces.",
            "task_id": "001013",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.project",
                "info.creator",
                "info.release",
                "info.license",
                "options.max_connections",
                "options.timeout",
                "parameters.values",
                "parameters.thresholds",
                "logs.start",
                "logs.stop"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001013_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided narrative into a well-structured TOML configuration that organizes project details, options, parameters, and logs.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment that starts with \"#\" followed by the text \"Automated TOML Setup\".\n- Create a [header] section that includes the key \"project\" with a corresponding string value enclosed in double quotes.\n- Under an [info] section, include exactly three keys: \"creator\", \"release\", and \"license\", each paired with a specific string value enclosed in double quotes.\n- Add an [options] section that contains two keys: \"max_connections\" and \"timeout\", each assigned a numeric (integer) value.\n- Insert a [parameters] section that includes exactly two arrays: \"values\" and \"thresholds\", each containing four precise floating-point numbers separated only by commas.\n- Create a [logs] section with exactly two keys: \"start\" and \"stop\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that if any nested elements are present, they use a consistent indentation of two spaces."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001013_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.project",
                                "info.creator",
                                "info.release",
                                "info.license",
                                "options.max_connections",
                                "options.timeout",
                                "parameters.values",
                                "parameters.thresholds",
                                "logs.start",
                                "logs.stop"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration file following the specific structure described below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" and the exact text \"New TOML Config File\".\n- Create a [header] section containing a key \"title\" with a string value in double quotes.\n- Include a [config] section with exactly two keys: \"creator\" and \"release\", each assigned a string value enclosed in double quotes.\n- Add a [flags] section that consists of three keys: \"active\", \"visible\", and \"modifiable\", each assigned either true or false.\n- Provide a [values] section with exactly two arrays: \"numbers\" and \"indexes\", where each array contains four integer values.\n- Create a [logs] section that has exactly three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string value in double quotes.\n- Ensure all sections and keys follow consistent two-space indentation for any nested content.",
            "task_id": "001014",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.title",
                "config.creator",
                "config.release",
                "flags.active",
                "flags.visible",
                "flags.modifiable",
                "values.numbers",
                "values.indexes",
                "logs.start",
                "logs.process",
                "logs.finish"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001014_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration file following the specific structure described below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" and the exact text \"New TOML Config File\".\n- Create a [header] section containing a key \"title\" with a string value in double quotes.\n- Include a [config] section with exactly two keys: \"creator\" and \"release\", each assigned a string value enclosed in double quotes.\n- Add a [flags] section that consists of three keys: \"active\", \"visible\", and \"modifiable\", each assigned either true or false.\n- Provide a [values] section with exactly two arrays: \"numbers\" and \"indexes\", where each array contains four integer values.\n- Create a [logs] section that has exactly three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string value in double quotes.\n- Ensure all sections and keys follow consistent two-space indentation for any nested content."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001014_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.title",
                                "config.creator",
                                "config.release",
                                "flags.active",
                                "flags.visible",
                                "flags.modifiable",
                                "values.numbers",
                                "values.indexes",
                                "logs.start",
                                "logs.process",
                                "logs.finish"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a custom project management system.\n\nFeature Requirements:\n- Include a single-line comment at the beginning of the TOML file starting with \"#\" followed by \"Project Configurations\" in plain text.\n- Create a [project] section containing two keys: \"name\" with a string value and \"id\" with a numeric value.\n- Under a [contacts] section, list exactly two entries: \"email\" and \"phone\", each set to a string representing valid contact information.\n- Include a [preferences] section with three boolean keys: \"notifications\", \"auto_save\", and \"dark_mode\", each independently set to either true or false.\n- Provide a [schedule] section that includes an array key \"deadlines\" containing exactly three date strings in the format \"YYYY-MM-DD\".\n- Create a [logs] section with exactly three keys: \"success\", \"failure\", and \"pending\", each assigned a non-empty string message.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure the TOML file follows precise structure as defined with no additional sections or keys.",
            "task_id": "001015",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project.name",
                "project.id",
                "contacts.email",
                "contacts.phone",
                "preferences.notifications",
                "preferences.auto_save",
                "preferences.dark_mode",
                "schedule.deadlines",
                "logs.success",
                "logs.failure",
                "logs.pending"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001015_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a custom project management system.\n\nFeature Requirements:\n- Include a single-line comment at the beginning of the TOML file starting with \"#\" followed by \"Project Configurations\" in plain text.\n- Create a [project] section containing two keys: \"name\" with a string value and \"id\" with a numeric value.\n- Under a [contacts] section, list exactly two entries: \"email\" and \"phone\", each set to a string representing valid contact information.\n- Include a [preferences] section with three boolean keys: \"notifications\", \"auto_save\", and \"dark_mode\", each independently set to either true or false.\n- Provide a [schedule] section that includes an array key \"deadlines\" containing exactly three date strings in the format \"YYYY-MM-DD\".\n- Create a [logs] section with exactly three keys: \"success\", \"failure\", and \"pending\", each assigned a non-empty string message.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure the TOML file follows precise structure as defined with no additional sections or keys."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001015_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project.name",
                                "project.id",
                                "contacts.email",
                                "contacts.phone",
                                "preferences.notifications",
                                "preferences.auto_save",
                                "preferences.dark_mode",
                                "schedule.deadlines",
                                "logs.success",
                                "logs.failure",
                                "logs.pending"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML blueprint for a simulation configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" that reads \"Simulation Configuration File\".\n- Create a [system] section containing a key \"name\" with a string value representing the simulation name.\n- Under a [configuration] section, include exactly three keys: \"iterations\" (an integer), \"threshold\" (a floating-point number), and \"speed\" (an integer).\n- Provide an [options] section with two boolean keys: \"debug_mode\" and \"logging_enabled\", each set to either true or false.\n- Create a [parameters] section that contains exactly two arrays: \"values\" and \"limits\", each with four numeric entries.\n- Include a [feedback] section comprising exactly three keys: \"status\", \"alert\", and \"note\", each associated with a non-empty string value.\n- Ensure all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections.",
            "task_id": "001016",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "system.name",
                "configuration.iterations",
                "configuration.threshold",
                "configuration.speed",
                "options.debug_mode",
                "options.logging_enabled",
                "parameters.values",
                "parameters.limits",
                "feedback.status",
                "feedback.alert",
                "feedback.note"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001016_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML blueprint for a simulation configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" that reads \"Simulation Configuration File\".\n- Create a [system] section containing a key \"name\" with a string value representing the simulation name.\n- Under a [configuration] section, include exactly three keys: \"iterations\" (an integer), \"threshold\" (a floating-point number), and \"speed\" (an integer).\n- Provide an [options] section with two boolean keys: \"debug_mode\" and \"logging_enabled\", each set to either true or false.\n- Create a [parameters] section that contains exactly two arrays: \"values\" and \"limits\", each with four numeric entries.\n- Include a [feedback] section comprising exactly three keys: \"status\", \"alert\", and \"note\", each associated with a non-empty string value.\n- Ensure all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001016_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "system.name",
                                "configuration.iterations",
                                "configuration.threshold",
                                "configuration.speed",
                                "options.debug_mode",
                                "options.logging_enabled",
                                "parameters.values",
                                "parameters.limits",
                                "feedback.status",
                                "feedback.alert",
                                "feedback.note"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration for a fantasy role-playing game.\n\nFeature Requirements:\n- Add a [campaign] section with the key \"title\" assigned to a descriptive string enclosed in double quotes.\n- Include a [lore] section containing exactly two keys: \"background\" and \"myth\", each assigned a non-empty string.\n- Create a [npcs] section with three boolean flags: \"friendly\", \"neutral\", and \"hostile\", each set to either true or false.\n- Provide a [statistics] section that contains exactly two arrays: \"attributes\" and \"skills\", each including four integer numbers.\n- Under the [quests] section, list exactly three keys: \"main\", \"side\", and \"daily\", each paired with a succinct narrative string.\n- Incorporate a [rules] section featuring a single key \"combat_mode\" set to either \"turn_based\" or \"real_time\" as a string.\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Fantasy LLM Configuration\".\n- Ensure all keys and string values are enclosed in double quotes and nested elements use two spaces for indentation.\n- Include a [metadata] section with exactly two keys: \"creator\" and \"release\", each with a corresponding string value.",
            "task_id": "001017",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "campaign.title",
                "lore.background",
                "lore.myth",
                "npcs.friendly",
                "npcs.neutral",
                "npcs.hostile",
                "statistics.attributes",
                "statistics.skills",
                "quests.main",
                "quests.side",
                "quests.daily",
                "rules.combat_mode",
                "metadata.creator",
                "metadata.release"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001017_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration for a fantasy role-playing game.\n\nFeature Requirements:\n- Add a [campaign] section with the key \"title\" assigned to a descriptive string enclosed in double quotes.\n- Include a [lore] section containing exactly two keys: \"background\" and \"myth\", each assigned a non-empty string.\n- Create a [npcs] section with three boolean flags: \"friendly\", \"neutral\", and \"hostile\", each set to either true or false.\n- Provide a [statistics] section that contains exactly two arrays: \"attributes\" and \"skills\", each including four integer numbers.\n- Under the [quests] section, list exactly three keys: \"main\", \"side\", and \"daily\", each paired with a succinct narrative string.\n- Incorporate a [rules] section featuring a single key \"combat_mode\" set to either \"turn_based\" or \"real_time\" as a string.\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Fantasy LLM Configuration\".\n- Ensure all keys and string values are enclosed in double quotes and nested elements use two spaces for indentation.\n- Include a [metadata] section with exactly two keys: \"creator\" and \"release\", each with a corresponding string value."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001017_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "campaign.title",
                                "lore.background",
                                "lore.myth",
                                "npcs.friendly",
                                "npcs.neutral",
                                "npcs.hostile",
                                "statistics.attributes",
                                "statistics.skills",
                                "quests.main",
                                "quests.side",
                                "quests.daily",
                                "rules.combat_mode",
                                "metadata.creator",
                                "metadata.release"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided event description into a precisely structured TOML configuration file.\n\nFeature Requirements:\n- Include an event title under an [event] section with the key \"name\" and assign it a string value.\n- Under a [details] section, list exactly three entries: \"date\", \"location\", and \"duration\", each paired with a string value.\n- Create a [config] section containing two integer keys: \"max_participants\" and \"min_age\", both set to specific numeric values.\n- Add a [flags] section featuring exactly four boolean keys: \"registration_open\", \"requires_ticket\", \"vip_access\", and \"catering_available\", each set to either true or false.\n- Provide an [agenda] section that includes an array named \"sessions\" with exactly four string values representing session start times.\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the text \"Event TOML Configuration generated\".\n- Ensure every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
            "task_id": "001018",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event.name",
                "details.date",
                "details.location",
                "details.duration",
                "config.max_participants",
                "config.min_age",
                "flags.registration_open",
                "flags.requires_ticket",
                "flags.vip_access",
                "flags.catering_available",
                "agenda.sessions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001018_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided event description into a precisely structured TOML configuration file.\n\nFeature Requirements:\n- Include an event title under an [event] section with the key \"name\" and assign it a string value.\n- Under a [details] section, list exactly three entries: \"date\", \"location\", and \"duration\", each paired with a string value.\n- Create a [config] section containing two integer keys: \"max_participants\" and \"min_age\", both set to specific numeric values.\n- Add a [flags] section featuring exactly four boolean keys: \"registration_open\", \"requires_ticket\", \"vip_access\", and \"catering_available\", each set to either true or false.\n- Provide an [agenda] section that includes an array named \"sessions\" with exactly four string values representing session start times.\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the text \"Event TOML Configuration generated\".\n- Ensure every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001018_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event.name",
                                "details.date",
                                "details.location",
                                "details.duration",
                                "config.max_participants",
                                "config.min_age",
                                "flags.registration_open",
                                "flags.requires_ticket",
                                "flags.vip_access",
                                "flags.catering_available",
                                "agenda.sessions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided text into a structured TOML configuration for an industrial monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" that reads \"Generated TOML Configuration for Industrial Monitor\".\n- Create a [system] section that includes exactly two keys: \"name\" with a string value and \"status\" with a string value that is either \"active\" or \"inactive\".\n- Under a [versionInfo] section, define exactly two keys: \"build\" and \"release\", each associated with a string value.\n- Include a [network] section containing two boolean keys: \"connected\" and \"secured\", each set explicitly to either true or false.\n- Add a [performance] section with exactly two numeric keys: \"latency\" and \"throughput\", both formatted as integers.\n- Create a [logs] section that includes exactly three keys: \"info\", \"debug\", and \"critical\", each associated with a non-empty string value.\n- Ensure every string value is enclosed in double quotes, while numeric and boolean values are provided without quotes.",
            "task_id": "001019",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "system.name",
                "system.status",
                "versionInfo.build",
                "versionInfo.release",
                "network.connected",
                "network.secured",
                "performance.latency",
                "performance.throughput",
                "logs.info",
                "logs.debug",
                "logs.critical"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001019_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided text into a structured TOML configuration for an industrial monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" that reads \"Generated TOML Configuration for Industrial Monitor\".\n- Create a [system] section that includes exactly two keys: \"name\" with a string value and \"status\" with a string value that is either \"active\" or \"inactive\".\n- Under a [versionInfo] section, define exactly two keys: \"build\" and \"release\", each associated with a string value.\n- Include a [network] section containing two boolean keys: \"connected\" and \"secured\", each set explicitly to either true or false.\n- Add a [performance] section with exactly two numeric keys: \"latency\" and \"throughput\", both formatted as integers.\n- Create a [logs] section that includes exactly three keys: \"info\", \"debug\", and \"critical\", each associated with a non-empty string value.\n- Ensure every string value is enclosed in double quotes, while numeric and boolean values are provided without quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001019_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "system.name",
                                "system.status",
                                "versionInfo.build",
                                "versionInfo.release",
                                "network.connected",
                                "network.secured",
                                "performance.latency",
                                "performance.throughput",
                                "logs.info",
                                "logs.debug",
                                "logs.critical"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration from the provided text describing a simulation setup.\n\nFeature Requirements:\n- Include a [header] section with exactly two keys: \"project\" and \"token\", each set to a string value.\n- Under the [simulation] section, include exactly two keys: \"duration\" and \"iterations\", each assigned a numeric value.\n- Include a [features] section containing three boolean keys: \"active\", \"monitored\", and \"recorded\", each with either true or false as the value.\n- Provide a [parameters] section that contains exactly two arrays: \"values\" with three floating-point numbers and \"weights\" with three integer numbers.\n- Under the [logs] section, ensure there are exactly three keys: \"info\", \"alert\", and \"crit\", each associated with a non-empty string value.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Simulation Configuration File\".\n- All string values in the TOML file must be enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "task_id": "001020",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.project",
                "header.token",
                "simulation.duration",
                "simulation.iterations",
                "features.active",
                "features.monitored",
                "features.recorded",
                "parameters.values",
                "parameters.weights",
                "logs.info",
                "logs.alert",
                "logs.crit"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001020_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration from the provided text describing a simulation setup.\n\nFeature Requirements:\n- Include a [header] section with exactly two keys: \"project\" and \"token\", each set to a string value.\n- Under the [simulation] section, include exactly two keys: \"duration\" and \"iterations\", each assigned a numeric value.\n- Include a [features] section containing three boolean keys: \"active\", \"monitored\", and \"recorded\", each with either true or false as the value.\n- Provide a [parameters] section that contains exactly two arrays: \"values\" with three floating-point numbers and \"weights\" with three integer numbers.\n- Under the [logs] section, ensure there are exactly three keys: \"info\", \"alert\", and \"crit\", each associated with a non-empty string value.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Simulation Configuration File\".\n- All string values in the TOML file must be enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001020_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.project",
                                "header.token",
                                "simulation.duration",
                                "simulation.iterations",
                                "features.active",
                                "features.monitored",
                                "features.recorded",
                                "parameters.values",
                                "parameters.weights",
                                "logs.info",
                                "logs.alert",
                                "logs.crit"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration file for an online digital artwork exhibit with detailed metadata, options, collections, and notes.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Generated TOML Configuration\".\n- Include a [gallery] section with a key \"exhibit\" whose value is a non-empty string enclosed in double quotes.\n- Under a [credentials] section, list exactly two items: \"curator\" and \"year\", both as strings, each enclosed in double quotes.\n- Provide an [options] section containing three boolean keys: \"open\", \"public\", and \"highlight\", each set to either true or false.\n- Add a [collections] section that contains exactly two arrays: \"paintings\" and \"sculptures\", each holding four integer values.\n- In a [notes] section, include exactly three keys: \"review\", \"comment\", and \"summary\", each mapped to a non-empty string enclosed in double quotes.\n- Ensure all string values are enclosed in double quotes and maintain a consistent two-space indentation for nested elements.\n- Do not include any additional keys, sections, or extraneous text beyond the specified requirements.",
            "task_id": "001021",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "gallery.exhibit",
                "credentials.curator",
                "credentials.year",
                "options.open",
                "options.public",
                "options.highlight",
                "collections.paintings",
                "collections.sculptures",
                "notes.review",
                "notes.comment",
                "notes.summary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001021_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration file for an online digital artwork exhibit with detailed metadata, options, collections, and notes.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Generated TOML Configuration\".\n- Include a [gallery] section with a key \"exhibit\" whose value is a non-empty string enclosed in double quotes.\n- Under a [credentials] section, list exactly two items: \"curator\" and \"year\", both as strings, each enclosed in double quotes.\n- Provide an [options] section containing three boolean keys: \"open\", \"public\", and \"highlight\", each set to either true or false.\n- Add a [collections] section that contains exactly two arrays: \"paintings\" and \"sculptures\", each holding four integer values.\n- In a [notes] section, include exactly three keys: \"review\", \"comment\", and \"summary\", each mapped to a non-empty string enclosed in double quotes.\n- Ensure all string values are enclosed in double quotes and maintain a consistent two-space indentation for nested elements.\n- Do not include any additional keys, sections, or extraneous text beyond the specified requirements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001021_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "gallery.exhibit",
                                "credentials.curator",
                                "credentials.year",
                                "options.open",
                                "options.public",
                                "options.highlight",
                                "collections.paintings",
                                "collections.sculptures",
                                "notes.review",
                                "notes.comment",
                                "notes.summary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided configuration narrative into a TOML file following the detailed structure below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" that exactly reads \"Auto-generated TOML Setup\".\n- Create a [project] section with exactly two keys: \"name\" and \"date\", both assigned a string value.\n- Add a [contributors] section containing exactly three keys: \"lead\", \"assistant\", and \"reviewer\", each with a corresponding string value.\n- Define a [parameters] section with two keys: \"threshold\" and \"max_limit\", both assigned numeric values.\n- Create a [flags] section including exactly four keys: \"debug\", \"maintenance\", \"logging\", and \"backup\", each set to either true or false.\n- Include a [results] section that contains one array key \"scores\" with exactly five integer values.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of 2 spaces in the TOML file for elements within any sections.\n- The output should strictly follow the TOML structure as outlined without any extra keys or sections.",
            "task_id": "001022",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project.name",
                "project.date",
                "contributors.lead",
                "contributors.assistant",
                "contributors.reviewer",
                "parameters.threshold",
                "parameters.max_limit",
                "flags.debug",
                "flags.maintenance",
                "flags.logging",
                "flags.backup",
                "results.scores"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001022_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided configuration narrative into a TOML file following the detailed structure below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" that exactly reads \"Auto-generated TOML Setup\".\n- Create a [project] section with exactly two keys: \"name\" and \"date\", both assigned a string value.\n- Add a [contributors] section containing exactly three keys: \"lead\", \"assistant\", and \"reviewer\", each with a corresponding string value.\n- Define a [parameters] section with two keys: \"threshold\" and \"max_limit\", both assigned numeric values.\n- Create a [flags] section including exactly four keys: \"debug\", \"maintenance\", \"logging\", and \"backup\", each set to either true or false.\n- Include a [results] section that contains one array key \"scores\" with exactly five integer values.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of 2 spaces in the TOML file for elements within any sections.\n- The output should strictly follow the TOML structure as outlined without any extra keys or sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001022_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project.name",
                                "project.date",
                                "contributors.lead",
                                "contributors.assistant",
                                "contributors.reviewer",
                                "parameters.threshold",
                                "parameters.max_limit",
                                "flags.debug",
                                "flags.maintenance",
                                "flags.logging",
                                "flags.backup",
                                "results.scores"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration for a network service setup.\n\nFeature Requirements:\n- The first line must be a comment starting with \"#\" followed by \"Generated Network Service Configuration\".\n- Include a [server] section with keys \"host\" (a string), \"port\" (an integer), and \"max_connections\" (an integer).\n- Under the [strategies] section, include exactly two arrays: \"destinations\" and \"weights\", each containing four numeric values.\n- Add a [logging] section with keys \"level\" and \"file\", both set as strings enclosed in double quotes.\n- Insert a [security] section containing two boolean keys: \"firewall_enabled\" and \"ssl_supported\", each set to either true or false.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "task_id": "001023",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "server.host",
                "server.port",
                "server.max_connections",
                "strategies.destinations",
                "strategies.weights",
                "logging.level",
                "logging.file",
                "security.firewall_enabled",
                "security.ssl_supported"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001023_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration for a network service setup.\n\nFeature Requirements:\n- The first line must be a comment starting with \"#\" followed by \"Generated Network Service Configuration\".\n- Include a [server] section with keys \"host\" (a string), \"port\" (an integer), and \"max_connections\" (an integer).\n- Under the [strategies] section, include exactly two arrays: \"destinations\" and \"weights\", each containing four numeric values.\n- Add a [logging] section with keys \"level\" and \"file\", both set as strings enclosed in double quotes.\n- Insert a [security] section containing two boolean keys: \"firewall_enabled\" and \"ssl_supported\", each set to either true or false.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001023_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "server.host",
                                "server.port",
                                "server.max_connections",
                                "strategies.destinations",
                                "strategies.weights",
                                "logging.level",
                                "logging.file",
                                "security.firewall_enabled",
                                "security.ssl_supported"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration representing a custom server setup.\n\nFeature Requirements:\n- Start the file with a single-line comment that begins with \"#\" followed by the text \"Custom Server Configuration\".\n- Include a [configuration] section with a key \"name\" that holds a string describing the server name.\n- Under the [info] section, list exactly two keys: \"owner\" and \"date\", each assigned a string value.\n- Provide a [features] section containing exactly three boolean keys: \"active\", \"monitoring\", and \"logging\", each set to either true or false.\n- Create a [metrics] section with exactly two arrays: \"cpu_usage\" and \"memory_usage\", each containing three numeric values.\n- Include a [alerts] section that consists of exactly three keys: \"critical\", \"moderate\", and \"normal\", each associated with a non-empty string message.\n- Ensure every string value is enclosed in double quotes.\n- Use uniform indentation of two spaces for items that are nested within each section.",
            "task_id": "001024",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "configuration.name",
                "info.owner",
                "info.date",
                "features.active",
                "features.monitoring",
                "features.logging",
                "metrics.cpu_usage",
                "metrics.memory_usage",
                "alerts.critical",
                "alerts.moderate",
                "alerts.normal"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001024_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration representing a custom server setup.\n\nFeature Requirements:\n- Start the file with a single-line comment that begins with \"#\" followed by the text \"Custom Server Configuration\".\n- Include a [configuration] section with a key \"name\" that holds a string describing the server name.\n- Under the [info] section, list exactly two keys: \"owner\" and \"date\", each assigned a string value.\n- Provide a [features] section containing exactly three boolean keys: \"active\", \"monitoring\", and \"logging\", each set to either true or false.\n- Create a [metrics] section with exactly two arrays: \"cpu_usage\" and \"memory_usage\", each containing three numeric values.\n- Include a [alerts] section that consists of exactly three keys: \"critical\", \"moderate\", and \"normal\", each associated with a non-empty string message.\n- Ensure every string value is enclosed in double quotes.\n- Use uniform indentation of two spaces for items that are nested within each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001024_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "configuration.name",
                                "info.owner",
                                "info.date",
                                "features.active",
                                "features.monitoring",
                                "features.logging",
                                "metrics.cpu_usage",
                                "metrics.memory_usage",
                                "alerts.critical",
                                "alerts.moderate",
                                "alerts.normal"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML structure that represents an event management schedule with clearly defined sections and values.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by \"Generated Event Schedule\".\n- There must be an [event] section containing exactly one key: \"name\", with its value enclosed in double quotes.\n- Include a [details] section with exactly three keys: \"location\", \"date\", and \"time\", each assigned a string value enclosed in double quotes.\n- Create a [participants] section that defines two arrays: \"speakers\" and \"attendees\", each array containing exactly four string elements.\n- Add a [schedule] section that contains exactly three keys: \"opening\", \"break\", and \"closing\", each assigned a numeric value representing time in a 24-hour format.\n- Conclude with a [feedback] section that includes exactly two keys: \"positive\" and \"negative\", each associated with a non-empty string value enclosed in double quotes.\n- All string values in the TOML file must be enclosed in double quotes, and consistent indentation with two spaces must be used for nested elements.",
            "task_id": "001025",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event.name",
                "details.location",
                "details.date",
                "details.time",
                "participants.speakers",
                "participants.attendees",
                "schedule.opening",
                "schedule.break",
                "schedule.closing",
                "feedback.positive",
                "feedback.negative"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001025_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML structure that represents an event management schedule with clearly defined sections and values.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by \"Generated Event Schedule\".\n- There must be an [event] section containing exactly one key: \"name\", with its value enclosed in double quotes.\n- Include a [details] section with exactly three keys: \"location\", \"date\", and \"time\", each assigned a string value enclosed in double quotes.\n- Create a [participants] section that defines two arrays: \"speakers\" and \"attendees\", each array containing exactly four string elements.\n- Add a [schedule] section that contains exactly three keys: \"opening\", \"break\", and \"closing\", each assigned a numeric value representing time in a 24-hour format.\n- Conclude with a [feedback] section that includes exactly two keys: \"positive\" and \"negative\", each associated with a non-empty string value enclosed in double quotes.\n- All string values in the TOML file must be enclosed in double quotes, and consistent indentation with two spaces must be used for nested elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001025_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event.name",
                                "details.location",
                                "details.date",
                                "details.time",
                                "participants.speakers",
                                "participants.attendees",
                                "schedule.opening",
                                "schedule.break",
                                "schedule.closing",
                                "feedback.positive",
                                "feedback.negative"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the input text into a TOML configuration file for setting up a fictional game environment.\n\nFeature Requirements:\n- The output must start with a single-line comment beginning with \"#\" followed by the text \"Generated Game Configuration\".\n- Include a [game] section that contains the key \"title\" with a string value representing the name of the game.\n- Under a [profile] section, include two string keys: \"username\" and \"rank\", each displaying relevant game character details.\n- Create an [options] section with three boolean keys: \"sound\", \"multiplayer\", and \"debug\", each assigned either true or false.\n- Introduce a [stats] section containing one array \"scores\" that consists of exactly three integer values.\n- Add a [feedback] section where exactly two keys, \"positive\" and \"negative\", are defined with non-empty string values.\n- Ensure there is a [checkpoints] section with two arrays: \"sections\" and \"levels\", each containing exactly three numeric values.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
            "task_id": "001026",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "game.title",
                "profile.username",
                "profile.rank",
                "options.sound",
                "options.multiplayer",
                "options.debug",
                "stats.scores",
                "feedback.positive",
                "feedback.negative",
                "checkpoints.sections",
                "checkpoints.levels"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001026_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the input text into a TOML configuration file for setting up a fictional game environment.\n\nFeature Requirements:\n- The output must start with a single-line comment beginning with \"#\" followed by the text \"Generated Game Configuration\".\n- Include a [game] section that contains the key \"title\" with a string value representing the name of the game.\n- Under a [profile] section, include two string keys: \"username\" and \"rank\", each displaying relevant game character details.\n- Create an [options] section with three boolean keys: \"sound\", \"multiplayer\", and \"debug\", each assigned either true or false.\n- Introduce a [stats] section containing one array \"scores\" that consists of exactly three integer values.\n- Add a [feedback] section where exactly two keys, \"positive\" and \"negative\", are defined with non-empty string values.\n- Ensure there is a [checkpoints] section with two arrays: \"sections\" and \"levels\", each containing exactly three numeric values.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001026_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "game.title",
                                "profile.username",
                                "profile.rank",
                                "options.sound",
                                "options.multiplayer",
                                "options.debug",
                                "stats.scores",
                                "feedback.positive",
                                "feedback.negative",
                                "checkpoints.sections",
                                "checkpoints.levels"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided meeting summary text into a structured TOML configuration.\n\nFeature Requirements:\n- The TOML file must begin with a single-line comment starting with \"#\" followed by the text \"Meeting TOML Configuration\".\n- Include a [header] section with exactly two keys: \"meeting_topic\" and \"date\", each assigned a string value enclosed in double quotes.\n- Provide a [participants] section containing exactly two keys: \"present\" and \"absent\". The \"present\" key should be assigned an array of exactly three string values representing participant names, and \"absent\" should be assigned an array of exactly two string values.\n- Create an [agenda] section that includes exactly three numeric keys: \"item1\", \"item2\", and \"item3\", each holding an integer value specifying minutes.\n- Add an [action_items] section with exactly three keys: \"todo\", \"in_progress\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent two-space indentation for any nested elements within sections.",
            "task_id": "001027",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.meeting_topic",
                "header.date",
                "participants.present",
                "participants.absent",
                "agenda.item1",
                "agenda.item2",
                "agenda.item3",
                "action_items.todo",
                "action_items.in_progress",
                "action_items.completed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001027_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided meeting summary text into a structured TOML configuration.\n\nFeature Requirements:\n- The TOML file must begin with a single-line comment starting with \"#\" followed by the text \"Meeting TOML Configuration\".\n- Include a [header] section with exactly two keys: \"meeting_topic\" and \"date\", each assigned a string value enclosed in double quotes.\n- Provide a [participants] section containing exactly two keys: \"present\" and \"absent\". The \"present\" key should be assigned an array of exactly three string values representing participant names, and \"absent\" should be assigned an array of exactly two string values.\n- Create an [agenda] section that includes exactly three numeric keys: \"item1\", \"item2\", and \"item3\", each holding an integer value specifying minutes.\n- Add an [action_items] section with exactly three keys: \"todo\", \"in_progress\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent two-space indentation for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001027_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.meeting_topic",
                                "header.date",
                                "participants.present",
                                "participants.absent",
                                "agenda.item1",
                                "agenda.item2",
                                "agenda.item3",
                                "action_items.todo",
                                "action_items.in_progress",
                                "action_items.completed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for a warehouse management system.\n\nFeature Requirements:\n- Create a [warehouse] section that contains exactly three keys: \"name\" (string), \"capacity\" (integer), and \"location\" (string).\n- Under a [system] section, include two keys: \"version\" (string) and \"uptime_hours\" (integer) with non-empty values.\n- Develop a [configuration] section featuring four boolean keys: \"maintenance_mode\", \"auto_restock\", \"inventory_tracking\", and \"notifications_enabled\", each set to either true or false.\n- Insert a [statistics] section containing two arrays: \"incoming_shipments\" and \"outgoing_shipments\", with each array holding exactly three numeric values.\n- Include a [remarks] section with three keys: \"startup\", \"operation\", and \"shutdown\", each associated with a non-empty string.\n- At the very beginning of the TOML file, add a single-line comment starting with \"#\" followed by \"Generated Warehouse Configuration\".",
            "task_id": "001028",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "warehouse.name",
                "warehouse.capacity",
                "warehouse.location",
                "system.version",
                "system.uptime_hours",
                "configuration.maintenance_mode",
                "configuration.auto_restock",
                "configuration.inventory_tracking",
                "configuration.notifications_enabled",
                "statistics.incoming_shipments",
                "statistics.outgoing_shipments",
                "remarks.startup",
                "remarks.operation",
                "remarks.shutdown"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001028_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for a warehouse management system.\n\nFeature Requirements:\n- Create a [warehouse] section that contains exactly three keys: \"name\" (string), \"capacity\" (integer), and \"location\" (string).\n- Under a [system] section, include two keys: \"version\" (string) and \"uptime_hours\" (integer) with non-empty values.\n- Develop a [configuration] section featuring four boolean keys: \"maintenance_mode\", \"auto_restock\", \"inventory_tracking\", and \"notifications_enabled\", each set to either true or false.\n- Insert a [statistics] section containing two arrays: \"incoming_shipments\" and \"outgoing_shipments\", with each array holding exactly three numeric values.\n- Include a [remarks] section with three keys: \"startup\", \"operation\", and \"shutdown\", each associated with a non-empty string.\n- At the very beginning of the TOML file, add a single-line comment starting with \"#\" followed by \"Generated Warehouse Configuration\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001028_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "warehouse.name",
                                "warehouse.capacity",
                                "warehouse.location",
                                "system.version",
                                "system.uptime_hours",
                                "configuration.maintenance_mode",
                                "configuration.auto_restock",
                                "configuration.inventory_tracking",
                                "configuration.notifications_enabled",
                                "statistics.incoming_shipments",
                                "statistics.outgoing_shipments",
                                "remarks.startup",
                                "remarks.operation",
                                "remarks.shutdown"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a configuration file for a fictional online bookstore management system.\n\nFeature Requirements:\n- Include a [store] section containing a key \"name\" with a string value representing the bookstore's name.\n- Under a [config] section, specify exactly two keys: \"currency\" and \"locale\", both with string values enclosed in double quotes.\n- Create a [security] section that includes three boolean keys: \"ssl\", \"encryption\", and \"backup\", each set to either true or false.\n- Provide a [products] section with two arrays: \"isbn_list\" containing exactly three integer-like values and \"prices\" containing exactly three floating-point numbers.\n- Include an [alerts] section that has exactly three keys: \"success\", \"info\", and \"error\", each paired with a descriptive string message that is at least ten characters long.\n- The file must begin with a single-line comment reading \"# Generated TOML for Online Bookstore\" at the very top.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use a consistent indentation of two spaces for nested elements within sections.",
            "task_id": "001029",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "store.name",
                "config.currency",
                "config.locale",
                "security.ssl",
                "security.encryption",
                "security.backup",
                "products.isbn_list",
                "products.prices",
                "alerts.success",
                "alerts.info",
                "alerts.error"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001029_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a configuration file for a fictional online bookstore management system.\n\nFeature Requirements:\n- Include a [store] section containing a key \"name\" with a string value representing the bookstore's name.\n- Under a [config] section, specify exactly two keys: \"currency\" and \"locale\", both with string values enclosed in double quotes.\n- Create a [security] section that includes three boolean keys: \"ssl\", \"encryption\", and \"backup\", each set to either true or false.\n- Provide a [products] section with two arrays: \"isbn_list\" containing exactly three integer-like values and \"prices\" containing exactly three floating-point numbers.\n- Include an [alerts] section that has exactly three keys: \"success\", \"info\", and \"error\", each paired with a descriptive string message that is at least ten characters long.\n- The file must begin with a single-line comment reading \"# Generated TOML for Online Bookstore\" at the very top.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use a consistent indentation of two spaces for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001029_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "store.name",
                                "config.currency",
                                "config.locale",
                                "security.ssl",
                                "security.encryption",
                                "security.backup",
                                "products.isbn_list",
                                "products.prices",
                                "alerts.success",
                                "alerts.info",
                                "alerts.error"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration for a software deployment setup.\n\nFeature Requirements:\n- Include a [header] section with a key \"label\" that holds a unique string value.\n- Under the [config] section, list exactly three keys: \"maintainer\", \"release\", and \"patch\", each associated with a string value.\n- Provide a [features] section containing two boolean keys: \"active\" and \"beta\", each set to either true or false.\n- Under the [parameters] section, create one array \"values\" that contains exactly four integer numbers.\n- Include a [logs] section that defines exactly three keys: \"start\", \"process\", and \"finish\", each with a non-empty string representing a timestamp.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Awaiting TOML System Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "task_id": "001030",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.label",
                "config.maintainer",
                "config.release",
                "config.patch",
                "features.active",
                "features.beta",
                "parameters.values",
                "logs.start",
                "logs.process",
                "logs.finish"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001030_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration for a software deployment setup.\n\nFeature Requirements:\n- Include a [header] section with a key \"label\" that holds a unique string value.\n- Under the [config] section, list exactly three keys: \"maintainer\", \"release\", and \"patch\", each associated with a string value.\n- Provide a [features] section containing two boolean keys: \"active\" and \"beta\", each set to either true or false.\n- Under the [parameters] section, create one array \"values\" that contains exactly four integer numbers.\n- Include a [logs] section that defines exactly three keys: \"start\", \"process\", and \"finish\", each with a non-empty string representing a timestamp.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Awaiting TOML System Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001030_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.label",
                                "config.maintainer",
                                "config.release",
                                "config.patch",
                                "features.active",
                                "features.beta",
                                "parameters.values",
                                "logs.start",
                                "logs.process",
                                "logs.finish"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a simulated monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Auto-generated monitoring configuration\".\n- Include a [header] section with a key \"description\" that holds a brief summary of the system, with its value enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"name\" and \"email\", both assigned string values in double quotes.\n- Provide a [permissions] section containing three boolean keys: \"read\", \"write\", and \"execute\", each set to either true or false.\n- Include a [performance] section that contains exactly two arrays: \"latencies\" and \"throughputs\", each holding four numeric values.\n- Under the [alerts] section, ensure there are exactly three keys: \"critical\", \"warning\", and \"info\", each associated with a non-empty string value in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
            "task_id": "001031",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.description",
                "creator.name",
                "creator.email",
                "permissions.read",
                "permissions.write",
                "permissions.execute",
                "performance.latencies",
                "performance.throughputs",
                "alerts.critical",
                "alerts.warning",
                "alerts.info"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001031_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a simulated monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Auto-generated monitoring configuration\".\n- Include a [header] section with a key \"description\" that holds a brief summary of the system, with its value enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"name\" and \"email\", both assigned string values in double quotes.\n- Provide a [permissions] section containing three boolean keys: \"read\", \"write\", and \"execute\", each set to either true or false.\n- Include a [performance] section that contains exactly two arrays: \"latencies\" and \"throughputs\", each holding four numeric values.\n- Under the [alerts] section, ensure there are exactly three keys: \"critical\", \"warning\", and \"info\", each associated with a non-empty string value in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001031_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.description",
                                "creator.name",
                                "creator.email",
                                "permissions.read",
                                "permissions.write",
                                "permissions.execute",
                                "performance.latencies",
                                "performance.throughputs",
                                "alerts.critical",
                                "alerts.warning",
                                "alerts.info"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML configuration for a virtual event management system.\n\nFeature Requirements:\n- Insert a single-line comment at the top starting with \"#\" followed by \"LLM Generated Config for Virtual Events\".\n- Create a [project] section with the key \"name\" set to a string value enclosed in double quotes.\n- Add a [details] section that includes exactly two keys: \"description\" and \"date\", each assigned a string value enclosed in double quotes.\n- Include a [config] section that contains exactly four numeric keys: \"maxParticipants\", \"minParticipants\", \"ticketPrice\", and \"duration\", each set to a numeric value.\n- Provide a [preferences] section holding three arrays: \"themes\", \"venues\", and \"formats\", each containing exactly four string elements enclosed in double quotes.\n- Create a [status] section with exactly three keys: \"upcoming\", \"ongoing\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure the [config] and [preferences] sections use consistent indentation of three spaces for any nested elements.\n- Output the sections in the following order: comment first, then [project], followed by [details], [config], [preferences], and finally [status].",
            "task_id": "001032",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "project.name",
                "details.description",
                "details.date",
                "config.maxParticipants",
                "config.minParticipants",
                "config.ticketPrice",
                "config.duration",
                "preferences.themes",
                "preferences.venues",
                "preferences.formats",
                "status.upcoming",
                "status.ongoing",
                "status.completed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001032_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML configuration for a virtual event management system.\n\nFeature Requirements:\n- Insert a single-line comment at the top starting with \"#\" followed by \"LLM Generated Config for Virtual Events\".\n- Create a [project] section with the key \"name\" set to a string value enclosed in double quotes.\n- Add a [details] section that includes exactly two keys: \"description\" and \"date\", each assigned a string value enclosed in double quotes.\n- Include a [config] section that contains exactly four numeric keys: \"maxParticipants\", \"minParticipants\", \"ticketPrice\", and \"duration\", each set to a numeric value.\n- Provide a [preferences] section holding three arrays: \"themes\", \"venues\", and \"formats\", each containing exactly four string elements enclosed in double quotes.\n- Create a [status] section with exactly three keys: \"upcoming\", \"ongoing\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure the [config] and [preferences] sections use consistent indentation of three spaces for any nested elements.\n- Output the sections in the following order: comment first, then [project], followed by [details], [config], [preferences], and finally [status]."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001032_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "project.name",
                                "details.description",
                                "details.date",
                                "config.maxParticipants",
                                "config.minParticipants",
                                "config.ticketPrice",
                                "config.duration",
                                "preferences.themes",
                                "preferences.venues",
                                "preferences.formats",
                                "status.upcoming",
                                "status.ongoing",
                                "status.completed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided meteorological sensor description into a structured TOML configuration.\n\nFeature Requirements:\n- Include a single-line comment at the top starting with \"#\" followed by the text \"Generated Meteorological Configuration\".\n- Under the [header] section, include a key \"system\" with the string value \"Weather Station\" enclosed in double quotes.\n- Under the [parameters] section, list exactly three keys: \"temperature\", \"humidity\", and \"pressure\", each assigned a numeric value with at least one decimal point.\n- Under the [alerts] section, specify exactly three keys: \"critical\", \"warning\", and \"normal\", each mapped to a descriptive message as a non-empty string enclosed in double quotes.\n- Under the [operational] section, include exactly two boolean keys: \"active\" and \"standby\", each set to either true or false.\n- Under the [schedules] section, provide a key \"times\" that holds an array of exactly three ISO 8601 formatted date-time strings.\n- Use consistent indentation of two spaces for nested elements within each section and ensure all string values are wrapped in double quotes.",
            "task_id": "001033",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "header.system",
                "parameters.temperature",
                "parameters.humidity",
                "parameters.pressure",
                "alerts.critical",
                "alerts.warning",
                "alerts.normal",
                "operational.active",
                "operational.standby",
                "schedules.times"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001033_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided meteorological sensor description into a structured TOML configuration.\n\nFeature Requirements:\n- Include a single-line comment at the top starting with \"#\" followed by the text \"Generated Meteorological Configuration\".\n- Under the [header] section, include a key \"system\" with the string value \"Weather Station\" enclosed in double quotes.\n- Under the [parameters] section, list exactly three keys: \"temperature\", \"humidity\", and \"pressure\", each assigned a numeric value with at least one decimal point.\n- Under the [alerts] section, specify exactly three keys: \"critical\", \"warning\", and \"normal\", each mapped to a descriptive message as a non-empty string enclosed in double quotes.\n- Under the [operational] section, include exactly two boolean keys: \"active\" and \"standby\", each set to either true or false.\n- Under the [schedules] section, provide a key \"times\" that holds an array of exactly three ISO 8601 formatted date-time strings.\n- Use consistent indentation of two spaces for nested elements within each section and ensure all string values are wrapped in double quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001033_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "header.system",
                                "parameters.temperature",
                                "parameters.humidity",
                                "parameters.pressure",
                                "alerts.critical",
                                "alerts.warning",
                                "alerts.normal",
                                "operational.active",
                                "operational.standby",
                                "schedules.times"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the given text into a detailed TOML file representing a robotics control system configuration.\n\nFeature Requirements:\n- Begin with a single-line comment that reads \"# Config generated for robotics control system\" at the very start of the file.\n- Include a [robot] section that contains exactly two keys: name and id, both holding string values enclosed in double quotes.\n- Create a [mechanics] section with exactly three keys: joints, sensors, and motors, each assigned an array of exactly four integer values.\n- Define a [system] section with two keys: uptime, which must be an integer, and status, which must be a non-empty string enclosed in double quotes.\n- Add a [parameters] section that includes three keys: threshold (assigned a float with one decimal point), ratio (assigned a float with one decimal point), and scale (assigned an integer).\n- Provide a [logs] section containing exactly three keys: daily, error, and debug, with each key holding an array of exactly three log messages as strings.\n- Use consistent indentation of two spaces for any nested elements within sections.",
            "task_id": "001034",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "robot.name",
                "robot.id",
                "mechanics.joints",
                "mechanics.sensors",
                "mechanics.motors",
                "system.uptime",
                "system.status",
                "parameters.threshold",
                "parameters.ratio",
                "parameters.scale",
                "logs.daily",
                "logs.error",
                "logs.debug"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001034_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the given text into a detailed TOML file representing a robotics control system configuration.\n\nFeature Requirements:\n- Begin with a single-line comment that reads \"# Config generated for robotics control system\" at the very start of the file.\n- Include a [robot] section that contains exactly two keys: name and id, both holding string values enclosed in double quotes.\n- Create a [mechanics] section with exactly three keys: joints, sensors, and motors, each assigned an array of exactly four integer values.\n- Define a [system] section with two keys: uptime, which must be an integer, and status, which must be a non-empty string enclosed in double quotes.\n- Add a [parameters] section that includes three keys: threshold (assigned a float with one decimal point), ratio (assigned a float with one decimal point), and scale (assigned an integer).\n- Provide a [logs] section containing exactly three keys: daily, error, and debug, with each key holding an array of exactly three log messages as strings.\n- Use consistent indentation of two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001034_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "robot.name",
                                "robot.id",
                                "mechanics.joints",
                                "mechanics.sensors",
                                "mechanics.motors",
                                "system.uptime",
                                "system.status",
                                "parameters.threshold",
                                "parameters.ratio",
                                "parameters.scale",
                                "logs.daily",
                                "logs.error",
                                "logs.debug"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConstruct a TOML configuration for a virtual pet simulation game.\n\nFeature Requirements:\n- Include an introductory section [configuration] with a key \"app\" that is exactly \"Virtual Pet Simulator\".\n- Under the [details] section, include exactly three key-value pairs: \"creator\" (a string), \"release_date\" (a string in the format \"YYYY-MM-DD\"), and \"version\" (a string).\n- Add a [functions] section containing two arrays: \"actions\" and \"responses\", each with exactly four string elements.\n- Create a [parameters] section that holds three numeric keys: \"speed\", \"hunger_rate\", and \"happiness\", each assigned an integer value.\n- Under the [flags] section, include exactly four boolean keys: \"active\", \"logging\", \"debug\", and \"maintenance\", each set to either true or false.\n- Begin the file with a single-line comment starting with # and the text \"Virtual Pet Simulator TOML Configuration\".\n- Ensure every string value is enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within sections.",
            "task_id": "001035",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "configuration.app",
                "details.creator",
                "details.release_date",
                "details.version",
                "functions.actions",
                "functions.responses",
                "parameters.speed",
                "parameters.hunger_rate",
                "parameters.happiness",
                "flags.active",
                "flags.logging",
                "flags.debug",
                "flags.maintenance"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001035_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConstruct a TOML configuration for a virtual pet simulation game.\n\nFeature Requirements:\n- Include an introductory section [configuration] with a key \"app\" that is exactly \"Virtual Pet Simulator\".\n- Under the [details] section, include exactly three key-value pairs: \"creator\" (a string), \"release_date\" (a string in the format \"YYYY-MM-DD\"), and \"version\" (a string).\n- Add a [functions] section containing two arrays: \"actions\" and \"responses\", each with exactly four string elements.\n- Create a [parameters] section that holds three numeric keys: \"speed\", \"hunger_rate\", and \"happiness\", each assigned an integer value.\n- Under the [flags] section, include exactly four boolean keys: \"active\", \"logging\", \"debug\", and \"maintenance\", each set to either true or false.\n- Begin the file with a single-line comment starting with # and the text \"Virtual Pet Simulator TOML Configuration\".\n- Ensure every string value is enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001035_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "configuration.app",
                                "details.creator",
                                "details.release_date",
                                "details.version",
                                "functions.actions",
                                "functions.responses",
                                "parameters.speed",
                                "parameters.hunger_rate",
                                "parameters.happiness",
                                "flags.active",
                                "flags.logging",
                                "flags.debug",
                                "flags.maintenance"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided customer record details into a structured TOML format.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Generated Customer Record TOML\".\n- Include a [record] section with exactly two keys: \"customer\" and \"id\", both assigned string values enclosed in double quotes.\n- Under a [profile] section, include exactly two keys: \"age\" set as an integer and \"active\" set as a boolean.\n- Create a [subscriptions] section that contains one array key \"plans\", which holds exactly four numeric values.\n- Provide a [logs] section with exactly three keys: \"last_login\", \"signup_date\", and \"expiration\", each associated with a valid ISO8601 date string enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent indentation of two spaces for all nested elements.",
            "task_id": "001036",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "record.customer",
                "record.id",
                "profile.age",
                "profile.active",
                "subscriptions.plans",
                "logs.last_login",
                "logs.signup_date",
                "logs.expiration"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001036_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided customer record details into a structured TOML format.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Generated Customer Record TOML\".\n- Include a [record] section with exactly two keys: \"customer\" and \"id\", both assigned string values enclosed in double quotes.\n- Under a [profile] section, include exactly two keys: \"age\" set as an integer and \"active\" set as a boolean.\n- Create a [subscriptions] section that contains one array key \"plans\", which holds exactly four numeric values.\n- Provide a [logs] section with exactly three keys: \"last_login\", \"signup_date\", and \"expiration\", each associated with a valid ISO8601 date string enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent indentation of two spaces for all nested elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001036_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "record.customer",
                                "record.id",
                                "profile.age",
                                "profile.active",
                                "subscriptions.plans",
                                "logs.last_login",
                                "logs.signup_date",
                                "logs.expiration"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fictional event management system.\n\nFeature Requirements:\n- Include a header comment at the beginning of the TOML file that starts with # followed by the text \"Event Management Configuration\".\n- Under the [event] section, include a key name with a quoted string value representing the event title.\n- Under the [details] section, add exactly two keys: location (a quoted string) and date (a quoted string in the format \"YYYY-MM-DD\").\n- Under the [options] section, include three boolean keys: registration_open, ticketed, and live_stream, each set to either true or false.\n- Under the [stats] section, define two arrays: attendees and speakers, each containing exactly three positive integers.\n- Under the [notifications] section, include exactly three keys: announcement, reminder, and emergency, each associated with a non-empty quoted string message.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
            "task_id": "001037",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event.name",
                "details.location",
                "details.date",
                "options.registration_open",
                "options.ticketed",
                "options.live_stream",
                "stats.attendees",
                "stats.speakers",
                "notifications.announcement",
                "notifications.reminder",
                "notifications.emergency"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001037_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fictional event management system.\n\nFeature Requirements:\n- Include a header comment at the beginning of the TOML file that starts with # followed by the text \"Event Management Configuration\".\n- Under the [event] section, include a key name with a quoted string value representing the event title.\n- Under the [details] section, add exactly two keys: location (a quoted string) and date (a quoted string in the format \"YYYY-MM-DD\").\n- Under the [options] section, include three boolean keys: registration_open, ticketed, and live_stream, each set to either true or false.\n- Under the [stats] section, define two arrays: attendees and speakers, each containing exactly three positive integers.\n- Under the [notifications] section, include exactly three keys: announcement, reminder, and emergency, each associated with a non-empty quoted string message.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001037_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event.name",
                                "details.location",
                                "details.date",
                                "options.registration_open",
                                "options.ticketed",
                                "options.live_stream",
                                "stats.attendees",
                                "stats.speakers",
                                "notifications.announcement",
                                "notifications.reminder",
                                "notifications.emergency"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the textual system configuration details into a neatly organized TOML file.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" followed by the text \"TOML Configuration File Loaded\".\n- Create a top-level [config] section that includes a key named \"name\" with its value as a string.\n- Under a [properties] section, list exactly two keys: \"creator\" and \"build\", each assigned a double-quoted string.\n- Include a [flags] section with three boolean keys: \"active\", \"beta\", and \"deployed\", each set to either true or false.\n- Provide a [parameters] section that includes exactly two arrays: \"thresholds\" and \"limits\", each array containing three integer values.\n- Under an [alerts] section, add exactly three keys: \"notice\", \"alert\", and \"critical\", each associated with a non-empty, double-quoted string.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within each section.",
            "task_id": "001038",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "config.name",
                "properties.creator",
                "properties.build",
                "flags.active",
                "flags.beta",
                "flags.deployed",
                "parameters.thresholds",
                "parameters.limits",
                "alerts.notice",
                "alerts.alert",
                "alerts.critical"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001038_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the textual system configuration details into a neatly organized TOML file.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" followed by the text \"TOML Configuration File Loaded\".\n- Create a top-level [config] section that includes a key named \"name\" with its value as a string.\n- Under a [properties] section, list exactly two keys: \"creator\" and \"build\", each assigned a double-quoted string.\n- Include a [flags] section with three boolean keys: \"active\", \"beta\", and \"deployed\", each set to either true or false.\n- Provide a [parameters] section that includes exactly two arrays: \"thresholds\" and \"limits\", each array containing three integer values.\n- Under an [alerts] section, add exactly three keys: \"notice\", \"alert\", and \"critical\", each associated with a non-empty, double-quoted string.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001038_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "config.name",
                                "properties.creator",
                                "properties.build",
                                "flags.active",
                                "flags.beta",
                                "flags.deployed",
                                "parameters.thresholds",
                                "parameters.limits",
                                "alerts.notice",
                                "alerts.alert",
                                "alerts.critical"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the exact phrase \"Auto-generated Config Data\".\n- Create a [document] section that includes a key \"headline\" with a string value enclosed in double quotes.\n- Add an [info] section containing exactly two keys: \"creator\" and \"date\", each assigned a string value in double quotes.\n- Construct an [options] section that lists four boolean keys: \"debug\", \"cache\", \"sync\", and \"backup\", each set to either true or false.\n- Include a [values] section with two arrays: \"samples\" containing exactly five integers and \"thresholds\" containing exactly three floating-point numbers.\n- Create a [comments] section with exactly two keys: \"note\" and \"remark\", each associated with a non-empty string value in double quotes.\n- Ensure all array elements and string values are enclosed appropriately within the TOML file using double quotes.\n- Apply consistent indentation with two spaces for any nested items within sections.",
            "task_id": "001039",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "document.headline",
                "info.creator",
                "info.date",
                "options.debug",
                "options.cache",
                "options.sync",
                "options.backup",
                "values.samples",
                "values.thresholds",
                "comments.note",
                "comments.remark"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001039_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the exact phrase \"Auto-generated Config Data\".\n- Create a [document] section that includes a key \"headline\" with a string value enclosed in double quotes.\n- Add an [info] section containing exactly two keys: \"creator\" and \"date\", each assigned a string value in double quotes.\n- Construct an [options] section that lists four boolean keys: \"debug\", \"cache\", \"sync\", and \"backup\", each set to either true or false.\n- Include a [values] section with two arrays: \"samples\" containing exactly five integers and \"thresholds\" containing exactly three floating-point numbers.\n- Create a [comments] section with exactly two keys: \"note\" and \"remark\", each associated with a non-empty string value in double quotes.\n- Ensure all array elements and string values are enclosed appropriately within the TOML file using double quotes.\n- Apply consistent indentation with two spaces for any nested items within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001039_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "document.headline",
                                "info.creator",
                                "info.date",
                                "options.debug",
                                "options.cache",
                                "options.sync",
                                "options.backup",
                                "values.samples",
                                "values.thresholds",
                                "comments.note",
                                "comments.remark"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fantasy game level setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Fantasy Game Level Configuration\".\n- Include a \"[level]\" section with a key \"name\" that holds a string value enclosed in double quotes representing the level name.\n- Under the \"[settings]\" section, include exactly two keys: \"difficulty\" with a string value and \"max_players\" with an integer value.\n- Create an \"[environment]\" section that contains exactly four keys: \"gravity\" (a numeric value), \"atmosphere\" (a string value), \"temperature\" (an integer value), and \"time_of_day\" (a string value), each properly formatted.\n- Provide a \"[score]\" section that includes exactly two keys: \"high\" and \"low\". Each key must be associated with an array of three integers.\n- Under the \"[rules]\" section, ensure there are exactly two keys: \"allowed_spells\" and \"forbidden_moves\", each assigned an array of non-empty strings containing at least two elements.\n- All string values must be enclosed in double quotes, and nested elements should use two spaces for indentation wherever applicable.",
            "task_id": "001040",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "level.name",
                "settings.difficulty",
                "settings.max_players",
                "environment.gravity",
                "environment.atmosphere",
                "environment.temperature",
                "environment.time_of_day",
                "score.high",
                "score.low",
                "rules.allowed_spells",
                "rules.forbidden_moves"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001040_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fantasy game level setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Fantasy Game Level Configuration\".\n- Include a \"[level]\" section with a key \"name\" that holds a string value enclosed in double quotes representing the level name.\n- Under the \"[settings]\" section, include exactly two keys: \"difficulty\" with a string value and \"max_players\" with an integer value.\n- Create an \"[environment]\" section that contains exactly four keys: \"gravity\" (a numeric value), \"atmosphere\" (a string value), \"temperature\" (an integer value), and \"time_of_day\" (a string value), each properly formatted.\n- Provide a \"[score]\" section that includes exactly two keys: \"high\" and \"low\". Each key must be associated with an array of three integers.\n- Under the \"[rules]\" section, ensure there are exactly two keys: \"allowed_spells\" and \"forbidden_moves\", each assigned an array of non-empty strings containing at least two elements.\n- All string values must be enclosed in double quotes, and nested elements should use two spaces for indentation wherever applicable."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001040_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "level.name",
                                "settings.difficulty",
                                "settings.max_players",
                                "environment.gravity",
                                "environment.atmosphere",
                                "environment.temperature",
                                "environment.time_of_day",
                                "score.high",
                                "score.low",
                                "rules.allowed_spells",
                                "rules.forbidden_moves"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided description of a game competition event into a structured TOML configuration for event management.\n\nFeature Requirements:\n- Include an [event] section with the key name; its value must be a string enclosed in double quotes.\n- Under the [organizer] section, include exactly two keys: lead and email, each assigned a string value within double quotes.\n- Create a [timing] section containing two keys: start_date and end_date, both formatted as ISO date strings enclosed in double quotes.\n- Provide a [rules] section with exactly three keys: registration_open and scoring_enabled as boolean values, and max_participants as an integer.\n- Add a [venues] section that includes one key: locations, which must be an array of exactly four string values, each string enclosed in double quotes.\n- Under the [notes] section, ensure there are exactly three keys: reminder, instructions, and contact, each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the top of the TOML file starting with # followed by the text \"Generated Event Configuration\".\n- All string values in the TOML file must be enclosed in double quotes.",
            "task_id": "001041",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event.name",
                "organizer.lead",
                "organizer.email",
                "timing.start_date",
                "timing.end_date",
                "rules.registration_open",
                "rules.scoring_enabled",
                "rules.max_participants",
                "venues.locations",
                "notes.reminder",
                "notes.instructions",
                "notes.contact"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001041_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided description of a game competition event into a structured TOML configuration for event management.\n\nFeature Requirements:\n- Include an [event] section with the key name; its value must be a string enclosed in double quotes.\n- Under the [organizer] section, include exactly two keys: lead and email, each assigned a string value within double quotes.\n- Create a [timing] section containing two keys: start_date and end_date, both formatted as ISO date strings enclosed in double quotes.\n- Provide a [rules] section with exactly three keys: registration_open and scoring_enabled as boolean values, and max_participants as an integer.\n- Add a [venues] section that includes one key: locations, which must be an array of exactly four string values, each string enclosed in double quotes.\n- Under the [notes] section, ensure there are exactly three keys: reminder, instructions, and contact, each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the top of the TOML file starting with # followed by the text \"Generated Event Configuration\".\n- All string values in the TOML file must be enclosed in double quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001041_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event.name",
                                "organizer.lead",
                                "organizer.email",
                                "timing.start_date",
                                "timing.end_date",
                                "rules.registration_open",
                                "rules.scoring_enabled",
                                "rules.max_participants",
                                "venues.locations",
                                "notes.reminder",
                                "notes.instructions",
                                "notes.contact"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided product description text into a structured TOML configuration.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" and followed by the text \"Custom Product TOML Configuration\".\n- Create a [product] section that includes a key \"name\" set to a non-empty string enclosed in double quotes.\n- Under a [specifications] section, include exactly three keys: \"color\", \"material\", and \"origin\", each assigned a non-empty string value in double quotes.\n- Add an [inventory] section that specifies two keys: \"quantity\" as an integer and \"in_stock\" as a boolean value (true or false).\n- Introduce a [pricing] section that contains three keys: \"base_price\", \"tax_rate\", and \"discount\", each associated with a numeric value (integer or float).\n- Create a [features] section that comprises exactly two arrays: \"highlights\" and \"accessories\", where \"highlights\" holds three descriptive strings and \"accessories\" holds three numeric product IDs.\n- Ensure all nested elements within sections are indented consistently with two spaces.\n- All string values in the TOML file must be enclosed in double quotes.",
            "task_id": "001042",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "product.name",
                "specifications.color",
                "specifications.material",
                "specifications.origin",
                "inventory.quantity",
                "inventory.in_stock",
                "pricing.base_price",
                "pricing.tax_rate",
                "pricing.discount",
                "features.highlights",
                "features.accessories"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001042_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided product description text into a structured TOML configuration.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" and followed by the text \"Custom Product TOML Configuration\".\n- Create a [product] section that includes a key \"name\" set to a non-empty string enclosed in double quotes.\n- Under a [specifications] section, include exactly three keys: \"color\", \"material\", and \"origin\", each assigned a non-empty string value in double quotes.\n- Add an [inventory] section that specifies two keys: \"quantity\" as an integer and \"in_stock\" as a boolean value (true or false).\n- Introduce a [pricing] section that contains three keys: \"base_price\", \"tax_rate\", and \"discount\", each associated with a numeric value (integer or float).\n- Create a [features] section that comprises exactly two arrays: \"highlights\" and \"accessories\", where \"highlights\" holds three descriptive strings and \"accessories\" holds three numeric product IDs.\n- Ensure all nested elements within sections are indented consistently with two spaces.\n- All string values in the TOML file must be enclosed in double quotes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001042_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "product.name",
                                "specifications.color",
                                "specifications.material",
                                "specifications.origin",
                                "inventory.quantity",
                                "inventory.in_stock",
                                "pricing.base_price",
                                "pricing.tax_rate",
                                "pricing.discount",
                                "features.highlights",
                                "features.accessories"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for an application setup.\n\nFeature Requirements:\n- Add a [config] section with a key named application that holds a string value representing the application name.\n- Under the [system] section, include exactly two keys: os and architecture, each with a corresponding string value.\n- Create a [parameters] section containing three integer keys: max_users, timeout, and retry_count, each assigned a numeric value.\n- Include a [flags] section with exactly four boolean keys: debug, maintenance, logging, and backup, each set to either true or false.\n- Create a [paths] section that contains exactly two arrays: directories and files, each with exactly three string paths.\n- Under the [alerts] section, define exactly three keys: critical, moderate, and info, each linked to a non-empty string message.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Generated Application Config\".\n- Ensure that every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation with two spaces for any nested elements within sections.",
            "task_id": "001043",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "config.application",
                "system.os",
                "system.architecture",
                "parameters.max_users",
                "parameters.timeout",
                "parameters.retry_count",
                "flags.debug",
                "flags.maintenance",
                "flags.logging",
                "flags.backup",
                "paths.directories",
                "paths.files",
                "alerts.critical",
                "alerts.moderate",
                "alerts.info"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001043_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for an application setup.\n\nFeature Requirements:\n- Add a [config] section with a key named application that holds a string value representing the application name.\n- Under the [system] section, include exactly two keys: os and architecture, each with a corresponding string value.\n- Create a [parameters] section containing three integer keys: max_users, timeout, and retry_count, each assigned a numeric value.\n- Include a [flags] section with exactly four boolean keys: debug, maintenance, logging, and backup, each set to either true or false.\n- Create a [paths] section that contains exactly two arrays: directories and files, each with exactly three string paths.\n- Under the [alerts] section, define exactly three keys: critical, moderate, and info, each linked to a non-empty string message.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Generated Application Config\".\n- Ensure that every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation with two spaces for any nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001043_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "config.application",
                                "system.os",
                                "system.architecture",
                                "parameters.max_users",
                                "parameters.timeout",
                                "parameters.retry_count",
                                "flags.debug",
                                "flags.maintenance",
                                "flags.logging",
                                "flags.backup",
                                "paths.directories",
                                "paths.files",
                                "alerts.critical",
                                "alerts.moderate",
                                "alerts.info"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the given description into a structured TOML configuration for a fictional network node.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" that reads \"Generated TOML Network Node Config\".\n- Under the [basic] section, include a key \"node_id\" with a corresponding string value enclosed in double quotes.\n- Under the [specs] section, include two integer keys: \"bandwidth\" and \"latency\", each representing a numeric value.\n- Under the [flags] section, include exactly three boolean keys: \"is_active\", \"supports_ipv6\", and \"fault_tolerant\", each set to either true or false.\n- Under the [connections] section, include exactly two arrays: \"connected_nodes\" holding three string values (each enclosed in double quotes), and \"signal_strength\" containing three numeric values.\n- Under the [logs] section, include exactly three keys: \"startup\", \"shutdown\", and \"error_allocation\", each associated with a timestamp string value enclosed in double quotes.\n- Ensure that all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections.",
            "task_id": "001044",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "basic.node_id",
                "specs.bandwidth",
                "specs.latency",
                "flags.is_active",
                "flags.supports_ipv6",
                "flags.fault_tolerant",
                "connections.connected_nodes",
                "connections.signal_strength",
                "logs.startup",
                "logs.shutdown",
                "logs.error_allocation"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001044_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the given description into a structured TOML configuration for a fictional network node.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" that reads \"Generated TOML Network Node Config\".\n- Under the [basic] section, include a key \"node_id\" with a corresponding string value enclosed in double quotes.\n- Under the [specs] section, include two integer keys: \"bandwidth\" and \"latency\", each representing a numeric value.\n- Under the [flags] section, include exactly three boolean keys: \"is_active\", \"supports_ipv6\", and \"fault_tolerant\", each set to either true or false.\n- Under the [connections] section, include exactly two arrays: \"connected_nodes\" holding three string values (each enclosed in double quotes), and \"signal_strength\" containing three numeric values.\n- Under the [logs] section, include exactly three keys: \"startup\", \"shutdown\", and \"error_allocation\", each associated with a timestamp string value enclosed in double quotes.\n- Ensure that all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001044_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "basic.node_id",
                                "specs.bandwidth",
                                "specs.latency",
                                "flags.is_active",
                                "flags.supports_ipv6",
                                "flags.fault_tolerant",
                                "connections.connected_nodes",
                                "connections.signal_strength",
                                "logs.startup",
                                "logs.shutdown",
                                "logs.error_allocation"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration representing a server deployment setup.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by \"Server Deployment Configuration\".\n- Create a [server] section containing two keys: \"name\" with a unique string value and \"ip\" with a valid IP address as a string.\n- Add a [deployment] section that includes three keys: \"environment\", \"region\", and \"instance_type\", each with a distinct string value enclosed in double quotes.\n- Include a [monitoring] section with two numerical keys: \"uptime_threshold\" with an integer value and \"response_time\" with a float value.\n- Generate a [users] section that contains an array named \"admins\" holding exactly three username strings.\n- Add a [security] section containing two boolean keys: \"firewall_enabled\" and \"intrusion_detection\", each set to true or false.\n- Create a [logging] section that defines exactly three keys: \"level\", \"destination\", and \"format\", each paired with a non-empty string value enclosed in double quotes.\n- Use uniform indentation of two spaces for all nested elements in each section.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Maintain the structure so that each section and its keys follow a clear and consistent order without any additional or missing fields.",
            "task_id": "001045",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "server.name",
                "server.ip",
                "deployment.environment",
                "deployment.region",
                "deployment.instance_type",
                "monitoring.uptime_threshold",
                "monitoring.response_time",
                "users.admins",
                "security.firewall_enabled",
                "security.intrusion_detection",
                "logging.level",
                "logging.destination",
                "logging.format"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001045_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration representing a server deployment setup.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by \"Server Deployment Configuration\".\n- Create a [server] section containing two keys: \"name\" with a unique string value and \"ip\" with a valid IP address as a string.\n- Add a [deployment] section that includes three keys: \"environment\", \"region\", and \"instance_type\", each with a distinct string value enclosed in double quotes.\n- Include a [monitoring] section with two numerical keys: \"uptime_threshold\" with an integer value and \"response_time\" with a float value.\n- Generate a [users] section that contains an array named \"admins\" holding exactly three username strings.\n- Add a [security] section containing two boolean keys: \"firewall_enabled\" and \"intrusion_detection\", each set to true or false.\n- Create a [logging] section that defines exactly three keys: \"level\", \"destination\", and \"format\", each paired with a non-empty string value enclosed in double quotes.\n- Use uniform indentation of two spaces for all nested elements in each section.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Maintain the structure so that each section and its keys follow a clear and consistent order without any additional or missing fields."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001045_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "server.name",
                                "server.ip",
                                "deployment.environment",
                                "deployment.region",
                                "deployment.instance_type",
                                "monitoring.uptime_threshold",
                                "monitoring.response_time",
                                "users.admins",
                                "security.firewall_enabled",
                                "security.intrusion_detection",
                                "logging.level",
                                "logging.destination",
                                "logging.format"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided text into an inventory configuration represented in TOML.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with '#' followed by the text \"Auto-generated Inventory Configuration\".\n- Create an [inventory] section containing a key \"category\" with a string value, and a key \"location\" with another string value.\n- Under a [details] section, include exactly two keys: \"capacity\" and \"restock_interval\", each assigned an integer value.\n- Add a [references] section with two arrays: \"suppliers\" and \"destinations\", where each array holds exactly three string values.\n- Define a [flags] section with three boolean keys: \"isActive\", \"isClosed\", and \"needsReview\", each set to either true or false.\n- Ensure that all string values are enclosed in double quotes.\n- Use an indentation of two spaces within nested elements inside each section.",
            "task_id": "001046",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "inventory.category",
                "inventory.location",
                "details.capacity",
                "details.restock_interval",
                "references.suppliers",
                "references.destinations",
                "flags.isActive",
                "flags.isClosed",
                "flags.needsReview"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001046_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided text into an inventory configuration represented in TOML.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with '#' followed by the text \"Auto-generated Inventory Configuration\".\n- Create an [inventory] section containing a key \"category\" with a string value, and a key \"location\" with another string value.\n- Under a [details] section, include exactly two keys: \"capacity\" and \"restock_interval\", each assigned an integer value.\n- Add a [references] section with two arrays: \"suppliers\" and \"destinations\", where each array holds exactly three string values.\n- Define a [flags] section with three boolean keys: \"isActive\", \"isClosed\", and \"needsReview\", each set to either true or false.\n- Ensure that all string values are enclosed in double quotes.\n- Use an indentation of two spaces within nested elements inside each section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001046_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "inventory.category",
                                "inventory.location",
                                "details.capacity",
                                "details.restock_interval",
                                "references.suppliers",
                                "references.destinations",
                                "flags.isActive",
                                "flags.isClosed",
                                "flags.needsReview"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a structured TOML configuration representing a course schedule.\n\nFeature Requirements:\n- Include a [course] section with the key \"name\" holding the course title as a string enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"instructor\" and \"department\", each paired with a string value in double quotes.\n- Create a [schedule] section containing three keys: \"start\", \"end\", and \"break\", each set to a string representing a time (e.g., \"08:30\") in double quotes.\n- Provide a [content] section that holds exactly two arrays: \"chapters\" and \"references\", each containing three numeric values.\n- Define a [alerts] section with exactly three keys: \"reminder\", \"deadline\", and \"update\", each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the very beginning starting with \"#\" followed by the text \"Course Configuration Generated\".\n- Include a [features] section with two boolean keys: \"elective\" and \"mandatory\", each assigned either true or false.\n- Ensure all string values are enclosed in double quotes and all arrays use consistent four-space indentation for nested elements.\n- Use precise keys and structure as specified to guarantee the output meets the requirements exactly.",
            "task_id": "001047",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "course.name",
                "creator.instructor",
                "creator.department",
                "schedule.start",
                "schedule.end",
                "schedule.break",
                "content.chapters",
                "content.references",
                "alerts.reminder",
                "alerts.deadline",
                "alerts.update",
                "features.elective",
                "features.mandatory"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001047_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided narrative into a structured TOML configuration representing a course schedule.\n\nFeature Requirements:\n- Include a [course] section with the key \"name\" holding the course title as a string enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"instructor\" and \"department\", each paired with a string value in double quotes.\n- Create a [schedule] section containing three keys: \"start\", \"end\", and \"break\", each set to a string representing a time (e.g., \"08:30\") in double quotes.\n- Provide a [content] section that holds exactly two arrays: \"chapters\" and \"references\", each containing three numeric values.\n- Define a [alerts] section with exactly three keys: \"reminder\", \"deadline\", and \"update\", each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the very beginning starting with \"#\" followed by the text \"Course Configuration Generated\".\n- Include a [features] section with two boolean keys: \"elective\" and \"mandatory\", each assigned either true or false.\n- Ensure all string values are enclosed in double quotes and all arrays use consistent four-space indentation for nested elements.\n- Use precise keys and structure as specified to guarantee the output meets the requirements exactly."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001047_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "course.name",
                                "creator.instructor",
                                "creator.department",
                                "schedule.start",
                                "schedule.end",
                                "schedule.break",
                                "content.chapters",
                                "content.references",
                                "alerts.reminder",
                                "alerts.deadline",
                                "alerts.update",
                                "features.elective",
                                "features.mandatory"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nConvert the provided description into a structured TOML configuration for a game settings file.\n\nFeature Requirements:\n- Include a [game] section with exactly two keys: \"name\" and \"genre\", each assigned a non-empty string value enclosed in double quotes.\n- Under a [developer] section, provide exactly two keys: \"studio\" and \"release_date\", both holding string values in double quotes.\n- Create an [options] section that contains exactly three boolean keys: \"sound\", \"fullscreen\", and \"multiplayer\", each explicitly set to either true or false.\n- Add a [levels] section that includes exactly two arrays: \"stage_scores\" with four numeric values and \"thresholds\" with three numeric values.\n- Include a [notifications] section with exactly three keys: \"start\", \"pause\", and \"exit\", each associated with a non-empty string value enclosed in double quotes.\n- Place a single-line comment at the beginning of the file starting with # followed by the text \"Generated Game Config\".",
            "task_id": "001048",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "game.name",
                "game.genre",
                "developer.studio",
                "developer.release_date",
                "options.sound",
                "options.fullscreen",
                "options.multiplayer",
                "levels.stage_scores",
                "levels.thresholds",
                "notifications.start",
                "notifications.pause",
                "notifications.exit"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001048_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nConvert the provided description into a structured TOML configuration for a game settings file.\n\nFeature Requirements:\n- Include a [game] section with exactly two keys: \"name\" and \"genre\", each assigned a non-empty string value enclosed in double quotes.\n- Under a [developer] section, provide exactly two keys: \"studio\" and \"release_date\", both holding string values in double quotes.\n- Create an [options] section that contains exactly three boolean keys: \"sound\", \"fullscreen\", and \"multiplayer\", each explicitly set to either true or false.\n- Add a [levels] section that includes exactly two arrays: \"stage_scores\" with four numeric values and \"thresholds\" with three numeric values.\n- Include a [notifications] section with exactly three keys: \"start\", \"pause\", and \"exit\", each associated with a non-empty string value enclosed in double quotes.\n- Place a single-line comment at the beginning of the file starting with # followed by the text \"Generated Game Config\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001048_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "game.name",
                                "game.genre",
                                "developer.studio",
                                "developer.release_date",
                                "options.sound",
                                "options.fullscreen",
                                "options.multiplayer",
                                "levels.stage_scores",
                                "levels.thresholds",
                                "notifications.start",
                                "notifications.pause",
                                "notifications.exit"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output TOML:\n\nTask:\nTransform the provided description into a structured TOML configuration that represents an environment setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Configuration for Environment Setup\".\n- Create a top-level section named [info] that contains exactly two keys: project and maintainer, both assigned non-empty string values enclosed in double quotes.\n- Include a [details] section with exactly four keys: id, stage, release, and patch, where each key is associated with an integer value.\n- Add a [features] section that defines exactly three arrays: alpha, beta, and gamma, each composed of exactly four boolean values (either true or false).\n- Establish a [notes] section with exactly three keys: summary, explanation, and remarks, each holding a non-empty string value enclosed in double quotes.\n- Provide a [settings] section containing two boolean keys: debug_mode and safe_mode, with each value set as either true or false.\n- Use consistent indentation of two spaces for all key-value pairs within each section.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Do not include any extra sections, keys, or nested structures outside of what is specified above.\n- All values and arrays must match the exact count and types described in each requirement.",
            "task_id": "001049",
            "task_name": "Text to TOML",
            "input_type": "Text",
            "output_type": "TOML",
            "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "info.project",
                "info.maintainer",
                "details.id",
                "details.stage",
                "details.release",
                "details.patch",
                "features.alpha",
                "features.beta",
                "features.gamma",
                "notes.summary",
                "notes.explanation",
                "notes.remarks",
                "settings.debug_mode",
                "settings.safe_mode"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001049_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output TOML:\n\nTask:\nTransform the provided description into a structured TOML configuration that represents an environment setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Configuration for Environment Setup\".\n- Create a top-level section named [info] that contains exactly two keys: project and maintainer, both assigned non-empty string values enclosed in double quotes.\n- Include a [details] section with exactly four keys: id, stage, release, and patch, where each key is associated with an integer value.\n- Add a [features] section that defines exactly three arrays: alpha, beta, and gamma, each composed of exactly four boolean values (either true or false).\n- Establish a [notes] section with exactly three keys: summary, explanation, and remarks, each holding a non-empty string value enclosed in double quotes.\n- Provide a [settings] section containing two boolean keys: debug_mode and safe_mode, with each value set as either true or false.\n- Use consistent indentation of two spaces for all key-value pairs within each section.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Do not include any extra sections, keys, or nested structures outside of what is specified above.\n- All values and arrays must match the exact count and types described in each requirement."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001049_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "info.project",
                                "info.maintainer",
                                "details.id",
                                "details.stage",
                                "details.release",
                                "details.patch",
                                "features.alpha",
                                "features.beta",
                                "features.gamma",
                                "notes.summary",
                                "notes.explanation",
                                "notes.remarks",
                                "settings.debug_mode",
                                "settings.safe_mode"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered <h2> element at the top of the component with the text \"Reservation Form\".\n- Display a text input field with a placeholder \"Full Name\" for the user's name entry.\n- Provide a text input field with a placeholder \"Enter Phone Number\" for contact information.\n- Incorporate an input field of type \"date\" to allow users to select their reservation date.\n- Include a dropdown select element labeled \"Number of Guests\" with options ranging from 1 to 6.\n- Arrange all input elements in a vertical flex container that justifies content to the center.\n- Add exactly two buttons at the bottom of the form labeled \"Confirm\" and \"Clear\", where the \"Confirm\" button is styled with a green background.\n- When the \"Confirm\" button is clicked, validate that all fields are filled in and display a <p> element with the message \"Reservation Confirmed\" directly below the form.\n- Ensure the entire form is visually centered on the page using flexbox styling.",
            "task_id": "001100",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the centered title at the top of the component?",
                "What placeholder text is used for the user’s full name input field?",
                "What placeholder text is shown for the phone number input field?",
                "Is there an input field that allows the user to select a reservation date?",
                "What is the label for the dropdown select element?",
                "How many guest options are available in the dropdown?",
                "What are the labels of the two buttons present at the bottom of the form?",
                "Which button is styled with a green background?",
                "Is the entire form visually centered on the page using flexbox styling?"
            ],
            "VQA_answers": [
                "Reservation Form",
                "Full Name",
                "Enter Phone Number",
                "Yes",
                "Number of Guests",
                "6",
                "Confirm and Clear",
                "Confirm",
                "Yes"
            ],
            "raw_output_metric": [
                "Reservation Form",
                "Full Name",
                "Enter Phone Number",
                "type=\"date\"",
                "Number of Guests",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "Confirm",
                "Clear",
                "Reservation Confirmed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001100_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered <h2> element at the top of the component with the text \"Reservation Form\".\n- Display a text input field with a placeholder \"Full Name\" for the user's name entry.\n- Provide a text input field with a placeholder \"Enter Phone Number\" for contact information.\n- Incorporate an input field of type \"date\" to allow users to select their reservation date.\n- Include a dropdown select element labeled \"Number of Guests\" with options ranging from 1 to 6.\n- Arrange all input elements in a vertical flex container that justifies content to the center.\n- Add exactly two buttons at the bottom of the form labeled \"Confirm\" and \"Clear\", where the \"Confirm\" button is styled with a green background.\n- When the \"Confirm\" button is clicked, validate that all fields are filled in and display a <p> element with the message \"Reservation Confirmed\" directly below the form.\n- Ensure the entire form is visually centered on the page using flexbox styling."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001100_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Reservation Form",
                                "Full Name",
                                "Enter Phone Number",
                                "type=\"date\"",
                                "Number of Guests",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "Confirm",
                                "Clear",
                                "Reservation Confirmed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001100_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001100_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered title at the top of the component?",
                                "What placeholder text is used for the user’s full name input field?",
                                "What placeholder text is shown for the phone number input field?",
                                "Is there an input field that allows the user to select a reservation date?",
                                "What is the label for the dropdown select element?",
                                "How many guest options are available in the dropdown?",
                                "What are the labels of the two buttons present at the bottom of the form?",
                                "Which button is styled with a green background?",
                                "Is the entire form visually centered on the page using flexbox styling?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001100_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Reservation Form",
                                "Full Name",
                                "Enter Phone Number",
                                "Yes",
                                "Number of Guests",
                                "6",
                                "Confirm and Clear",
                                "Confirm",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays an event registration form.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"Event Registration\" and center it horizontally.\n- Provide a text input field for \"Username\" with a placeholder \"Enter your username\" positioned at the top of the form.\n- Insert a text input for \"Email\" below the username field with a placeholder \"Enter your email address\" and enforce a proper email format.\n- Add a <select> dropdown for \"Event Type\" with fixed options \"Workshop\", \"Seminar\", and \"Meetup\" placed in the middle section of the form.\n- Display a numeric input for \"Number of Guests\" with a minimum value of 1 and a placeholder \"Guests\" immediately after the event type dropdown.\n- Include a button labeled \"Register\" at the end of the form styled with a green background color and white text.\n- Use a grid layout to organize the input fields and dropdown into two columns with an even gap between them.\n- Implement a <div> element below the form to display a confirmation message when the \"Register\" button is clicked.\n- Validate that \"Username\" and \"Email\" are not empty and that the \"Email\" field contains a valid email format before submission.\n- Add a footer at the very bottom of the component using a <footer> element containing the text \"2023 Event Registration\" centered horizontally.",
            "task_id": "001101",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header at the top of the component?",
                "What placeholder text is shown in the Username input field?",
                "What placeholder text appears in the Email input field?",
                "Which options are available in the dropdown for Event Type?",
                "What placeholder text is provided in the Number of Guests input field?",
                "How is the Register button styled?",
                "How are the input fields and dropdown arranged in the form layout?",
                "What confirmation element is displayed when the Register button is clicked?",
                "What is the text content of the footer at the bottom of the component?"
            ],
            "VQA_answers": [
                "Event Registration",
                "Enter your username",
                "Enter your email address",
                "Workshop, Seminar, Meetup",
                "Guests",
                "Green background with white text",
                "Grid layout with two columns",
                "A confirmation message div",
                "2023 Event Registration"
            ],
            "raw_output_metric": [
                "Event Registration",
                "Username",
                "Enter your username",
                "Email",
                "Enter your email address",
                "Event Type",
                "Workshop",
                "Seminar",
                "Meetup",
                "Number of Guests",
                "Guests",
                "Register",
                "2023 Event Registration"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001101_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays an event registration form.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"Event Registration\" and center it horizontally.\n- Provide a text input field for \"Username\" with a placeholder \"Enter your username\" positioned at the top of the form.\n- Insert a text input for \"Email\" below the username field with a placeholder \"Enter your email address\" and enforce a proper email format.\n- Add a <select> dropdown for \"Event Type\" with fixed options \"Workshop\", \"Seminar\", and \"Meetup\" placed in the middle section of the form.\n- Display a numeric input for \"Number of Guests\" with a minimum value of 1 and a placeholder \"Guests\" immediately after the event type dropdown.\n- Include a button labeled \"Register\" at the end of the form styled with a green background color and white text.\n- Use a grid layout to organize the input fields and dropdown into two columns with an even gap between them.\n- Implement a <div> element below the form to display a confirmation message when the \"Register\" button is clicked.\n- Validate that \"Username\" and \"Email\" are not empty and that the \"Email\" field contains a valid email format before submission.\n- Add a footer at the very bottom of the component using a <footer> element containing the text \"2023 Event Registration\" centered horizontally."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001101_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Registration",
                                "Username",
                                "Enter your username",
                                "Email",
                                "Enter your email address",
                                "Event Type",
                                "Workshop",
                                "Seminar",
                                "Meetup",
                                "Number of Guests",
                                "Guests",
                                "Register",
                                "2023 Event Registration"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001101_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001101_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header at the top of the component?",
                                "What placeholder text is shown in the Username input field?",
                                "What placeholder text appears in the Email input field?",
                                "Which options are available in the dropdown for Event Type?",
                                "What placeholder text is provided in the Number of Guests input field?",
                                "How is the Register button styled?",
                                "How are the input fields and dropdown arranged in the form layout?",
                                "What confirmation element is displayed when the Register button is clicked?",
                                "What is the text content of the footer at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001101_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Registration",
                                "Enter your username",
                                "Enter your email address",
                                "Workshop, Seminar, Meetup",
                                "Guests",
                                "Green background with white text",
                                "Grid layout with two columns",
                                "A confirmation message div",
                                "2023 Event Registration"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays an interactive event registration form.\n\nFeature Requirements:\n- Include a centered <h1> header with the text \"Event Registration\".\n- Display a text input field with a placeholder \"Full Name\".\n- Display an email input field with a placeholder \"Email Address\".\n- Incorporate a dropdown selector with three options labeled \"Workshop\", \"Seminar\", and \"Webinar\" for event type selection.\n- Include a date input field labeled \"Event Date\" that allows the user to pick a date.\n- Provide exactly two buttons at the bottom of the form, one labeled \"Register\" and the other labeled \"Clear Form\".\n- Style the \"Register\" button with a background color of green.\n- Use a flexbox layout to arrange form elements vertically with even spacing.\n- Implement form validation to ensure that all fields are filled before the \"Register\" button becomes active.\n- After the \"Register\" button is clicked, display a <p> element with a confirmation message indicating successful registration.",
            "task_id": "001102",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the main header text displayed on the page?",
                "What is the placeholder text for the name input field?",
                "What is the placeholder text for the email input field?",
                "How many options are visible in the event type dropdown?",
                "What are the labels available in the event type dropdown?",
                "What label is shown for the date input field?",
                "How many buttons are displayed at the bottom of the form?",
                "What are the labels of the buttons at the bottom of the form?",
                "What is the background color of the Register button?",
                "How are the form elements arranged on the page?"
            ],
            "VQA_answers": [
                "Event Registration",
                "Full Name",
                "Email Address",
                "3",
                "Workshop, Seminar, Webinar",
                "Event Date",
                "2",
                "Register and Clear Form",
                "Green",
                "Vertically with even spacing"
            ],
            "raw_output_metric": [
                "Event Registration",
                "Full Name",
                "Email Address",
                "Workshop",
                "Seminar",
                "Webinar",
                "Event Date",
                "Register",
                "Clear Form",
                "green",
                "<p>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001102_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays an interactive event registration form.\n\nFeature Requirements:\n- Include a centered <h1> header with the text \"Event Registration\".\n- Display a text input field with a placeholder \"Full Name\".\n- Display an email input field with a placeholder \"Email Address\".\n- Incorporate a dropdown selector with three options labeled \"Workshop\", \"Seminar\", and \"Webinar\" for event type selection.\n- Include a date input field labeled \"Event Date\" that allows the user to pick a date.\n- Provide exactly two buttons at the bottom of the form, one labeled \"Register\" and the other labeled \"Clear Form\".\n- Style the \"Register\" button with a background color of green.\n- Use a flexbox layout to arrange form elements vertically with even spacing.\n- Implement form validation to ensure that all fields are filled before the \"Register\" button becomes active.\n- After the \"Register\" button is clicked, display a <p> element with a confirmation message indicating successful registration."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001102_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Registration",
                                "Full Name",
                                "Email Address",
                                "Workshop",
                                "Seminar",
                                "Webinar",
                                "Event Date",
                                "Register",
                                "Clear Form",
                                "green",
                                "<p>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001102_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001102_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed on the page?",
                                "What is the placeholder text for the name input field?",
                                "What is the placeholder text for the email input field?",
                                "How many options are visible in the event type dropdown?",
                                "What are the labels available in the event type dropdown?",
                                "What label is shown for the date input field?",
                                "How many buttons are displayed at the bottom of the form?",
                                "What are the labels of the buttons at the bottom of the form?",
                                "What is the background color of the Register button?",
                                "How are the form elements arranged on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001102_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Registration",
                                "Full Name",
                                "Email Address",
                                "3",
                                "Workshop, Seminar, Webinar",
                                "Event Date",
                                "2",
                                "Register and Clear Form",
                                "Green",
                                "Vertically with even spacing"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a book search interface for a library website.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Library Book Search\" at the top.\n- Include a text input field with a placeholder \"Type book title here\" for entering search queries.\n- Provide a \"Search\" button next to the input field that is styled with a solid green background color.\n- Add an unordered list below the search area to show up to five search result items, each within its own <li> element.\n- Implement a \"Clear\" button adjacent to the \"Search\" button that resets both the input field and the search results.\n- Use a CSS grid layout to arrange the input field and buttons in a single row.\n- Create a <div> element below the search results to display an error message in red text if the user attempts to search with an empty input field.",
            "task_id": "001103",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the interface?",
                "How is the header positioned on the page?",
                "What placeholder text is shown in the search input field?",
                "What text is displayed on the primary action button next to the input field?",
                "What is the background color of the Search button?",
                "How many search result items are displayed at most?",
                "What element is used to list the search results?",
                "What is the text displayed on the button used to clear the search?",
                "Which CSS layout method is used to arrange the input field and buttons?",
                "How is the error message styled when an empty search is attempted?"
            ],
            "VQA_answers": [
                "Library Book Search",
                "Centered",
                "Type book title here",
                "Search",
                "Solid green",
                "Up to five",
                "Unordered list with list items",
                "Clear",
                "CSS grid layout",
                "Displayed in red text"
            ],
            "raw_output_metric": [
                "Library Book Search",
                "Type book title here",
                "Search",
                "Clear",
                "grid",
                "red"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001103_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a book search interface for a library website.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Library Book Search\" at the top.\n- Include a text input field with a placeholder \"Type book title here\" for entering search queries.\n- Provide a \"Search\" button next to the input field that is styled with a solid green background color.\n- Add an unordered list below the search area to show up to five search result items, each within its own <li> element.\n- Implement a \"Clear\" button adjacent to the \"Search\" button that resets both the input field and the search results.\n- Use a CSS grid layout to arrange the input field and buttons in a single row.\n- Create a <div> element below the search results to display an error message in red text if the user attempts to search with an empty input field."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001103_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Book Search",
                                "Type book title here",
                                "Search",
                                "Clear",
                                "grid",
                                "red"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001103_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001103_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the interface?",
                                "How is the header positioned on the page?",
                                "What placeholder text is shown in the search input field?",
                                "What text is displayed on the primary action button next to the input field?",
                                "What is the background color of the Search button?",
                                "How many search result items are displayed at most?",
                                "What element is used to list the search results?",
                                "What is the text displayed on the button used to clear the search?",
                                "Which CSS layout method is used to arrange the input field and buttons?",
                                "How is the error message styled when an empty search is attempted?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001103_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Book Search",
                                "Centered",
                                "Type book title here",
                                "Search",
                                "Solid green",
                                "Up to five",
                                "Unordered list with list items",
                                "Clear",
                                "CSS grid layout",
                                "Displayed in red text"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that allows a user to create and display a personal note.\n\nFeature Requirements:\n- Include an <h1> element at the top with the exact text \"Note Taker\".\n- Render a text input field with a placeholder \"Enter note title\" and a fixed width of 300px.\n- Provide a textarea element with a placeholder \"Enter your note\" that spans exactly 4 rows.\n- Add a checkbox input immediately below the textarea with an accompanying label \"Mark as Important\".\n- Ensure exactly two buttons are present below the input fields, labeled \"Save Note\" and \"Clear\".\n- Style the \"Save Note\" button with a background color of green and the \"Clear\" button with a background color of red.\n- Use a CSS grid layout to align the input elements in a single centered column within the browser window.\n- Upon clicking the \"Save Note\" button, display a new <div> element directly beneath the form that shows the note title and content.\n- Implement basic form validation that prevents submission if the note title or textarea is empty before displaying the note.",
            "task_id": "001104",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the top heading text displayed on the page?",
                "What placeholder text appears in the note title input field?",
                "What is the fixed width of the note title input field?",
                "What placeholder text is shown in the note textarea?",
                "How many rows are set for the note textarea?",
                "What label is associated with the checkbox below the textarea?",
                "What are the labels of the two buttons displayed below the input fields?",
                "What are the background colors of the Save Note and Clear buttons?",
                "How are the input elements arranged within the browser window?",
                "What happens when the Save Note button is clicked?"
            ],
            "VQA_answers": [
                "Note Taker",
                "Enter note title",
                "300px",
                "Enter your note",
                "4",
                "Mark as Important",
                "Save Note and Clear",
                "Green and Red",
                "In a single centered column using a CSS grid layout",
                "A new div appears displaying the note title and content"
            ],
            "raw_output_metric": [
                "Note Taker",
                "Enter note title",
                "Enter your note",
                "Mark as Important",
                "Save Note",
                "Clear",
                "300px",
                "4",
                "grid",
                "green",
                "red"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001104_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that allows a user to create and display a personal note.\n\nFeature Requirements:\n- Include an <h1> element at the top with the exact text \"Note Taker\".\n- Render a text input field with a placeholder \"Enter note title\" and a fixed width of 300px.\n- Provide a textarea element with a placeholder \"Enter your note\" that spans exactly 4 rows.\n- Add a checkbox input immediately below the textarea with an accompanying label \"Mark as Important\".\n- Ensure exactly two buttons are present below the input fields, labeled \"Save Note\" and \"Clear\".\n- Style the \"Save Note\" button with a background color of green and the \"Clear\" button with a background color of red.\n- Use a CSS grid layout to align the input elements in a single centered column within the browser window.\n- Upon clicking the \"Save Note\" button, display a new <div> element directly beneath the form that shows the note title and content.\n- Implement basic form validation that prevents submission if the note title or textarea is empty before displaying the note."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001104_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Note Taker",
                                "Enter note title",
                                "Enter your note",
                                "Mark as Important",
                                "Save Note",
                                "Clear",
                                "300px",
                                "4",
                                "grid",
                                "green",
                                "red"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001104_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001104_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the top heading text displayed on the page?",
                                "What placeholder text appears in the note title input field?",
                                "What is the fixed width of the note title input field?",
                                "What placeholder text is shown in the note textarea?",
                                "How many rows are set for the note textarea?",
                                "What label is associated with the checkbox below the textarea?",
                                "What are the labels of the two buttons displayed below the input fields?",
                                "What are the background colors of the Save Note and Clear buttons?",
                                "How are the input elements arranged within the browser window?",
                                "What happens when the Save Note button is clicked?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001104_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Note Taker",
                                "Enter note title",
                                "300px",
                                "Enter your note",
                                "4",
                                "Mark as Important",
                                "Save Note and Clear",
                                "Green and Red",
                                "In a single centered column using a CSS grid layout",
                                "A new div appears displaying the note title and content"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a contact enquiry form.\n\nFeature Requirements:\n- Render a centered header using an <h2> element with the text \"Contact Us\" at the top of the page.\n- Place a text input field with a placeholder \"Your Email\" immediately below the header.\n- Include another text input field for \"Subject\" right underneath the email input.\n- Provide a textarea element with a placeholder \"Write your message here\" that spans exactly 3 rows.\n- Display exactly two buttons at the bottom of the form labeled \"Send\" and \"Clear\".\n- Style the \"Send\" button with a background color of dark green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the email, subject, and message fields are not empty before enabling the \"Send\" button.",
            "task_id": "001105",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "How many text input fields are visible below the header?",
                "What placeholder text is visible in the first text input field?",
                "What placeholder text is visible in the second text input field?",
                "What placeholder text is shown in the textarea?",
                "How many rows does the textarea span?",
                "How many buttons are displayed at the bottom of the form?",
                "What are the labels on the two buttons?",
                "What background color is applied to the 'Send' button?",
                "How is the form positioned on the page?"
            ],
            "VQA_answers": [
                "Contact Us",
                "2",
                "Your Email",
                "Subject",
                "Write your message here",
                "3",
                "2",
                "Send and Clear",
                "Dark green",
                "Centered both vertically and horizontally"
            ],
            "raw_output_metric": [
                "Contact Us",
                "Your Email",
                "Subject",
                "Write your message here",
                "Send",
                "Clear",
                "dark green",
                "3"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001105_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a contact enquiry form.\n\nFeature Requirements:\n- Render a centered header using an <h2> element with the text \"Contact Us\" at the top of the page.\n- Place a text input field with a placeholder \"Your Email\" immediately below the header.\n- Include another text input field for \"Subject\" right underneath the email input.\n- Provide a textarea element with a placeholder \"Write your message here\" that spans exactly 3 rows.\n- Display exactly two buttons at the bottom of the form labeled \"Send\" and \"Clear\".\n- Style the \"Send\" button with a background color of dark green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the email, subject, and message fields are not empty before enabling the \"Send\" button."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001105_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Contact Us",
                                "Your Email",
                                "Subject",
                                "Write your message here",
                                "Send",
                                "Clear",
                                "dark green",
                                "3"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001105_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001105_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "How many text input fields are visible below the header?",
                                "What placeholder text is visible in the first text input field?",
                                "What placeholder text is visible in the second text input field?",
                                "What placeholder text is shown in the textarea?",
                                "How many rows does the textarea span?",
                                "How many buttons are displayed at the bottom of the form?",
                                "What are the labels on the two buttons?",
                                "What background color is applied to the 'Send' button?",
                                "How is the form positioned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001105_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Contact Us",
                                "2",
                                "Your Email",
                                "Subject",
                                "Write your message here",
                                "3",
                                "2",
                                "Send and Clear",
                                "Dark green",
                                "Centered both vertically and horizontally"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a blog comment submission form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Leave a Comment\".\n- Render a text input field for the full name with a placeholder \"Your Name\".\n- Include a textarea for the comment content with a placeholder \"Enter your comment\" that spans exactly 4 rows.\n- Provide exactly two buttons at the bottom labeled \"Post Comment\" and \"Clear Form\".\n- Style the \"Post Comment\" button with a background color of dark green.\n- Use a CSS grid layout to center and align the form's elements horizontally.\n- Ensure the form width is capped at 500px and is centered on the page.\n- When the \"Post Comment\" button is clicked successfully, display a <p> element below the form with the message \"Comment submitted!\".\n- Implement basic validation to confirm that both the name input and comment textarea are not empty before enabling the \"Post Comment\" button.",
            "task_id": "001106",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header at the top of the form?",
                "What is the placeholder text in the full name input field?",
                "What is the placeholder text shown in the comment textarea?",
                "How many rows does the comment textarea span?",
                "What are the labels on the two buttons at the bottom of the form?",
                "Which button is styled with a dark green background?",
                "What message appears below the form after successfully posting a comment?",
                "What is the maximum width of the form?",
                "How is the form's layout structured to center its elements?",
                "How many primary input elements (text input and textarea) are displayed in the form?"
            ],
            "VQA_answers": [
                "Leave a Comment",
                "Your Name",
                "Enter your comment",
                "4",
                "Post Comment and Clear Form",
                "Post Comment",
                "Comment submitted!",
                "500px",
                "Using a CSS grid layout",
                "2"
            ],
            "raw_output_metric": [
                "Leave a Comment",
                "Your Name",
                "Enter your comment",
                "rows={4}",
                "Post Comment",
                "Clear Form",
                "darkgreen",
                "500px",
                "grid",
                "Comment submitted!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001106_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a blog comment submission form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Leave a Comment\".\n- Render a text input field for the full name with a placeholder \"Your Name\".\n- Include a textarea for the comment content with a placeholder \"Enter your comment\" that spans exactly 4 rows.\n- Provide exactly two buttons at the bottom labeled \"Post Comment\" and \"Clear Form\".\n- Style the \"Post Comment\" button with a background color of dark green.\n- Use a CSS grid layout to center and align the form's elements horizontally.\n- Ensure the form width is capped at 500px and is centered on the page.\n- When the \"Post Comment\" button is clicked successfully, display a <p> element below the form with the message \"Comment submitted!\".\n- Implement basic validation to confirm that both the name input and comment textarea are not empty before enabling the \"Post Comment\" button."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001106_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Leave a Comment",
                                "Your Name",
                                "Enter your comment",
                                "rows={4}",
                                "Post Comment",
                                "Clear Form",
                                "darkgreen",
                                "500px",
                                "grid",
                                "Comment submitted!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001106_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001106_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header at the top of the form?",
                                "What is the placeholder text in the full name input field?",
                                "What is the placeholder text shown in the comment textarea?",
                                "How many rows does the comment textarea span?",
                                "What are the labels on the two buttons at the bottom of the form?",
                                "Which button is styled with a dark green background?",
                                "What message appears below the form after successfully posting a comment?",
                                "What is the maximum width of the form?",
                                "How is the form's layout structured to center its elements?",
                                "How many primary input elements (text input and textarea) are displayed in the form?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001106_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Leave a Comment",
                                "Your Name",
                                "Enter your comment",
                                "4",
                                "Post Comment and Clear Form",
                                "Post Comment",
                                "Comment submitted!",
                                "500px",
                                "Using a CSS grid layout",
                                "2"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with multiple input fields and validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"User Registration\".\n- Include three text input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\", arranged vertically.\n- Add a pair of radio buttons labeled \"Male\" and \"Female\" for gender selection positioned immediately below the input fields.\n- Implement a <select> dropdown for country selection with exactly three options: \"USA\", \"Canada\", and \"Mexico\", located directly under the radio buttons.\n- Provide exactly two buttons at the bottom of the form labeled \"Register\" and \"Clear\", ensuring the \"Register\" button is styled with a background color of green.\n- Use a grid layout with a fixed gap of 15 pixels to organize the form elements within a centered container.\n- Include inline validation by displaying a <span> element with red text next to any field that is left empty upon submission.\n- Render a <p> element below the form to display the message \"Registration Successful\" when all fields pass validation upon clicking the \"Register\" button.",
            "task_id": "001107",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header of the form?",
                "How many text input fields are present in the registration form?",
                "What are the placeholders used for the text input fields?",
                "Which gender options are available as radio buttons?",
                "What options are listed in the country selection dropdown?",
                "How many buttons are visible at the bottom of the form?",
                "Which button is styled with a green background?",
                "What message is displayed in the paragraph below the form upon successful registration?",
                "What is the fixed gap between the grid layout elements in the form?"
            ],
            "VQA_answers": [
                "User Registration",
                "3",
                "Enter Username, Enter Email, Enter Password",
                "Male and Female",
                "USA, Canada, Mexico",
                "2",
                "Register",
                "Registration Successful",
                "15 pixels"
            ],
            "raw_output_metric": [
                "User Registration",
                "Enter Username",
                "Enter Email",
                "Enter Password",
                "Male",
                "Female",
                "USA",
                "Canada",
                "Mexico",
                "Register",
                "Clear",
                "15px",
                "Registration Successful",
                "<h1>",
                "<input>",
                "<select>",
                "<span>",
                "<p>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001107_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with multiple input fields and validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"User Registration\".\n- Include three text input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\", arranged vertically.\n- Add a pair of radio buttons labeled \"Male\" and \"Female\" for gender selection positioned immediately below the input fields.\n- Implement a <select> dropdown for country selection with exactly three options: \"USA\", \"Canada\", and \"Mexico\", located directly under the radio buttons.\n- Provide exactly two buttons at the bottom of the form labeled \"Register\" and \"Clear\", ensuring the \"Register\" button is styled with a background color of green.\n- Use a grid layout with a fixed gap of 15 pixels to organize the form elements within a centered container.\n- Include inline validation by displaying a <span> element with red text next to any field that is left empty upon submission.\n- Render a <p> element below the form to display the message \"Registration Successful\" when all fields pass validation upon clicking the \"Register\" button."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001107_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "Enter Username",
                                "Enter Email",
                                "Enter Password",
                                "Male",
                                "Female",
                                "USA",
                                "Canada",
                                "Mexico",
                                "Register",
                                "Clear",
                                "15px",
                                "Registration Successful",
                                "<h1>",
                                "<input>",
                                "<select>",
                                "<span>",
                                "<p>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001107_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001107_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header of the form?",
                                "How many text input fields are present in the registration form?",
                                "What are the placeholders used for the text input fields?",
                                "Which gender options are available as radio buttons?",
                                "What options are listed in the country selection dropdown?",
                                "How many buttons are visible at the bottom of the form?",
                                "Which button is styled with a green background?",
                                "What message is displayed in the paragraph below the form upon successful registration?",
                                "What is the fixed gap between the grid layout elements in the form?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001107_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "3",
                                "Enter Username, Enter Email, Enter Password",
                                "Male and Female",
                                "USA, Canada, Mexico",
                                "2",
                                "Register",
                                "Registration Successful",
                                "15 pixels"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a simple newsletter subscription widget.\n\nFeature Requirements:\n- Render a centered <h3> element with the text \"Subscribe to Our Newsletter\" at the top.\n- Display an email input field with the placeholder \"Enter your email address\".\n- Place a checkbox below the email field with a label \"I agree to the terms and conditions\".\n- Include a button labeled \"Subscribe\" that features a green background.\n- Utilize CSS grid to position the email input and checkbox side by side in two distinct columns.\n- Implement a state variable to store and show an error message beneath the form when the email field is empty or contains an invalid email format.\n- Add a <span> element adjacent to the email input that updates in real-time to reflect the current number of characters being typed.\n- Display a confirmation <div> containing the message \"Subscription successful\" after the \"Subscribe\" button is clicked and all validations pass.\n- Apply inline styling to add a visible border and padding around the entire form.",
            "task_id": "001108",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the widget?",
                "What placeholder text appears in the email input field?",
                "What label is shown for the checkbox below the email field?",
                "What text is displayed on the subscription button?",
                "What is the background color of the subscribe button?",
                "How are the email input field and checkbox arranged within the form layout?",
                "What additional element is placed next to the email input field?",
                "What confirmation message is displayed after a successful subscription submission?"
            ],
            "VQA_answers": [
                "Subscribe to Our Newsletter",
                "Enter your email address",
                "I agree to the terms and conditions",
                "Subscribe",
                "Green",
                "They are positioned side by side in two columns using CSS grid",
                "A span that shows a real-time character count",
                "Subscription successful"
            ],
            "raw_output_metric": [
                "Subscribe to Our Newsletter",
                "Enter your email address",
                "I agree to the terms and conditions",
                "Subscribe",
                "Subscription successful"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001108_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a simple newsletter subscription widget.\n\nFeature Requirements:\n- Render a centered <h3> element with the text \"Subscribe to Our Newsletter\" at the top.\n- Display an email input field with the placeholder \"Enter your email address\".\n- Place a checkbox below the email field with a label \"I agree to the terms and conditions\".\n- Include a button labeled \"Subscribe\" that features a green background.\n- Utilize CSS grid to position the email input and checkbox side by side in two distinct columns.\n- Implement a state variable to store and show an error message beneath the form when the email field is empty or contains an invalid email format.\n- Add a <span> element adjacent to the email input that updates in real-time to reflect the current number of characters being typed.\n- Display a confirmation <div> containing the message \"Subscription successful\" after the \"Subscribe\" button is clicked and all validations pass.\n- Apply inline styling to add a visible border and padding around the entire form."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001108_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "Enter your email address",
                                "I agree to the terms and conditions",
                                "Subscribe",
                                "Subscription successful"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001108_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001108_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the widget?",
                                "What placeholder text appears in the email input field?",
                                "What label is shown for the checkbox below the email field?",
                                "What text is displayed on the subscription button?",
                                "What is the background color of the subscribe button?",
                                "How are the email input field and checkbox arranged within the form layout?",
                                "What additional element is placed next to the email input field?",
                                "What confirmation message is displayed after a successful subscription submission?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001108_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "Enter your email address",
                                "I agree to the terms and conditions",
                                "Subscribe",
                                "Green",
                                "They are positioned side by side in two columns using CSS grid",
                                "A span that shows a real-time character count",
                                "Subscription successful"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that implements a user registration form with multiple input fields and basic validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Registration\".\n- Include three text input fields for \"Username\", \"Email\", and \"Password\", each with a corresponding placeholder text.\n- Implement basic validation to ensure that no input field is left empty before form submission.\n- Add a checkbox input with a label \"I agree to the Terms\" positioned below the password field.\n- Provide exactly one button at the bottom of the form labeled \"Register\" and style it with a green background and white text.\n- Use a grid layout to arrange the input fields into two columns, with the checkbox and the button spanning both columns.\n- Implement a <p> element that displays a success message below the form when the \"Register\" button is clicked and the validation passes.",
            "task_id": "001109",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text content of the centered header?",
                "How many text input fields are displayed in the form?",
                "What are the placeholder texts for the text inputs?",
                "What label is associated with the checkbox input?",
                "What text is shown on the button at the bottom of the form?",
                "How are the input fields arranged in the layout?",
                "Which element displays a success message below the form upon successful registration?"
            ],
            "VQA_answers": [
                "Registration",
                "Three",
                "Username, Email, Password",
                "I agree to the Terms",
                "Register",
                "They are arranged in a grid with two columns, while the checkbox and button span both columns",
                "A paragraph element"
            ],
            "raw_output_metric": [
                "Registration",
                "Username",
                "Email",
                "Password",
                "I agree to the Terms",
                "Register",
                "<h1>",
                "<p>",
                "display: grid",
                "green",
                "white"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001109_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that implements a user registration form with multiple input fields and basic validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Registration\".\n- Include three text input fields for \"Username\", \"Email\", and \"Password\", each with a corresponding placeholder text.\n- Implement basic validation to ensure that no input field is left empty before form submission.\n- Add a checkbox input with a label \"I agree to the Terms\" positioned below the password field.\n- Provide exactly one button at the bottom of the form labeled \"Register\" and style it with a green background and white text.\n- Use a grid layout to arrange the input fields into two columns, with the checkbox and the button spanning both columns.\n- Implement a <p> element that displays a success message below the form when the \"Register\" button is clicked and the validation passes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001109_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Registration",
                                "Username",
                                "Email",
                                "Password",
                                "I agree to the Terms",
                                "Register",
                                "<h1>",
                                "<p>",
                                "display: grid",
                                "green",
                                "white"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001109_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001109_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text content of the centered header?",
                                "How many text input fields are displayed in the form?",
                                "What are the placeholder texts for the text inputs?",
                                "What label is associated with the checkbox input?",
                                "What text is shown on the button at the bottom of the form?",
                                "How are the input fields arranged in the layout?",
                                "Which element displays a success message below the form upon successful registration?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001109_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Registration",
                                "Three",
                                "Username, Email, Password",
                                "I agree to the Terms",
                                "Register",
                                "They are arranged in a grid with two columns, while the checkbox and button span both columns",
                                "A paragraph element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Create an Account\" at the top of the form.\n- Display three input fields for \"Username\", \"Email\", and \"Password\", each with their appropriate placeholder text.\n- Use a flexbox layout to center the form on the page with a column arrangement.\n- Include exactly one button labeled \"Register\" that is styled with a background color of green.\n- Add a paragraph element below the button that dynamically displays an error message if any input is left empty upon clicking \"Register\".\n- Implement a checkbox with a label \"I agree to the Terms and Conditions\" below the input fields.\n- Ensure each input field and the checkbox are enclosed in their own <div> container with a bottom margin of 10px.",
            "task_id": "001110",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the centered header at the top of the form?",
                "How many input fields are visibly provided for user registration?",
                "What are the placeholder texts for the input fields?",
                "What label is displayed next to the checkbox?",
                "How many separate containers are used for the input fields and the checkbox?",
                "What is the text on the visible button in the form?",
                "What background color is used for the Register button?",
                "Where is the error message paragraph positioned in relation to the button?",
                "What layout style is used to center the form on the page?"
            ],
            "VQA_answers": [
                "Create an Account",
                "3",
                "Username, Email, and Password",
                "I agree to the Terms and Conditions",
                "4",
                "Register",
                "Green",
                "Below the button",
                "Flexbox with a column arrangement"
            ],
            "raw_output_metric": [
                "Create an Account",
                "Username",
                "Email",
                "Password",
                "Register",
                "green",
                "I agree to the Terms and Conditions",
                "10px",
                "flex",
                "column"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001110_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Create an Account\" at the top of the form.\n- Display three input fields for \"Username\", \"Email\", and \"Password\", each with their appropriate placeholder text.\n- Use a flexbox layout to center the form on the page with a column arrangement.\n- Include exactly one button labeled \"Register\" that is styled with a background color of green.\n- Add a paragraph element below the button that dynamically displays an error message if any input is left empty upon clicking \"Register\".\n- Implement a checkbox with a label \"I agree to the Terms and Conditions\" below the input fields.\n- Ensure each input field and the checkbox are enclosed in their own <div> container with a bottom margin of 10px."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001110_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Create an Account",
                                "Username",
                                "Email",
                                "Password",
                                "Register",
                                "green",
                                "I agree to the Terms and Conditions",
                                "10px",
                                "flex",
                                "column"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001110_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001110_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the centered header at the top of the form?",
                                "How many input fields are visibly provided for user registration?",
                                "What are the placeholder texts for the input fields?",
                                "What label is displayed next to the checkbox?",
                                "How many separate containers are used for the input fields and the checkbox?",
                                "What is the text on the visible button in the form?",
                                "What background color is used for the Register button?",
                                "Where is the error message paragraph positioned in relation to the button?",
                                "What layout style is used to center the form on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001110_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Create an Account",
                                "3",
                                "Username, Email, and Password",
                                "I agree to the Terms and Conditions",
                                "4",
                                "Register",
                                "Green",
                                "Below the button",
                                "Flexbox with a column arrangement"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user sign-up form for a community website.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Join Our Community\".\n- Display two input fields side by side: one with a placeholder \"Username\" and the other with \"Email\".\n- Provide a third input field of type password with a placeholder \"Enter Password\" placed below the two side by side fields.\n- Add exactly three buttons at the bottom of the form labeled \"Register\", \"Clear\", and \"Cancel\", ensuring the \"Register\" button is styled with a background color of green.\n- Utilize a grid layout to arrange the two side-by-side input fields and one full-width input field for the password.\n- Implement basic validation to check that all fields are filled before allowing a registration attempt, showing a red-bordered <div> with an error message if any field is empty.\n- Include a <p> element below the form that displays the message \"Registration Complete\" when the registration is successful.\n- Style the form container with a box shadow and a padding of 20px to ensure a distinct, card-like appearance.",
            "task_id": "001111",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top and how is it aligned?",
                "How many input fields are present and what are their placeholder texts?",
                "How many buttons appear at the bottom of the form and what are their labels?",
                "What specific styling is applied to the 'Register' button?",
                "What layout is used to arrange the username, email, and password inputs?",
                "What visual cue is provided when not all form fields are filled out?",
                "What message is displayed beneath the form upon successful registration?",
                "How is the form container styled to achieve a card-like appearance?"
            ],
            "VQA_answers": [
                "Join Our Community, centered in an h1 element",
                "Three input fields: the first has 'Username', the second has 'Email' (both side by side), and the third has 'Enter Password' below",
                "Three buttons: 'Register', 'Clear', and 'Cancel'",
                "It is styled with a green background color",
                "A grid layout with the first two inputs side by side and the password field full-width below",
                "A red-bordered error message div appears",
                "Registration Complete",
                "It uses a box shadow and has a padding of 20px"
            ],
            "raw_output_metric": [
                "Join Our Community",
                "Username",
                "Email",
                "Enter Password",
                "Register",
                "Clear",
                "Cancel",
                "Registration Complete",
                "box shadow",
                "20px",
                "green",
                "grid"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001111_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user sign-up form for a community website.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Join Our Community\".\n- Display two input fields side by side: one with a placeholder \"Username\" and the other with \"Email\".\n- Provide a third input field of type password with a placeholder \"Enter Password\" placed below the two side by side fields.\n- Add exactly three buttons at the bottom of the form labeled \"Register\", \"Clear\", and \"Cancel\", ensuring the \"Register\" button is styled with a background color of green.\n- Utilize a grid layout to arrange the two side-by-side input fields and one full-width input field for the password.\n- Implement basic validation to check that all fields are filled before allowing a registration attempt, showing a red-bordered <div> with an error message if any field is empty.\n- Include a <p> element below the form that displays the message \"Registration Complete\" when the registration is successful.\n- Style the form container with a box shadow and a padding of 20px to ensure a distinct, card-like appearance."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001111_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Join Our Community",
                                "Username",
                                "Email",
                                "Enter Password",
                                "Register",
                                "Clear",
                                "Cancel",
                                "Registration Complete",
                                "box shadow",
                                "20px",
                                "green",
                                "grid"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001111_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001111_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top and how is it aligned?",
                                "How many input fields are present and what are their placeholder texts?",
                                "How many buttons appear at the bottom of the form and what are their labels?",
                                "What specific styling is applied to the 'Register' button?",
                                "What layout is used to arrange the username, email, and password inputs?",
                                "What visual cue is provided when not all form fields are filled out?",
                                "What message is displayed beneath the form upon successful registration?",
                                "How is the form container styled to achieve a card-like appearance?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001111_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Join Our Community, centered in an h1 element",
                                "Three input fields: the first has 'Username', the second has 'Email' (both side by side), and the third has 'Enter Password' below",
                                "Three buttons: 'Register', 'Clear', and 'Cancel'",
                                "It is styled with a green background color",
                                "A grid layout with the first two inputs side by side and the password field full-width below",
                                "A red-bordered error message div appears",
                                "Registration Complete",
                                "It uses a box shadow and has a padding of 20px"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a user registration form with validation.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" at the top of the form.\n- Display three input fields: one for username with a placeholder \"Username\", one for email with a placeholder \"Email Address\", and one for password with a placeholder \"Password\" that uses input type \"password\".\n- Provide a radio button group labeled \"Gender\" with exactly two options: \"Male\" and \"Female\", arranged horizontally.\n- Include a dropdown selection labeled \"Country\" with three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add a checkbox labeled \"Accept Terms and Conditions\" that must be checked before submission.\n- Place two buttons at the bottom of the form labeled \"Register\" and \"Cancel\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the username, email, and password fields are not empty, verify that the email contains an \"@\" character, and confirm that the terms checkbox is checked.\n- When the \"Register\" button is clicked and all validations pass, display a new <div> element below the form with the text \"Registration Successful\".",
            "task_id": "001112",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the form?",
                "How many input fields are shown for text entries?",
                "What placeholders are used for the text input fields?",
                "What label is displayed for the radio button group?",
                "Which options are provided for the gender selection?",
                "How many options are available in the country dropdown?",
                "What options can be selected from the country dropdown?",
                "What is the label next to the checkbox that appears in the form?",
                "What labels are given to the buttons at the bottom of the form?",
                "What text is shown after a successful registration?"
            ],
            "VQA_answers": [
                "Register Now",
                "3",
                "Username, Email Address, and Password",
                "Gender",
                "Male and Female",
                "3",
                "USA, Canada, and Mexico",
                "Accept Terms and Conditions",
                "Register and Cancel",
                "Registration Successful"
            ],
            "raw_output_metric": [
                "Register Now",
                "Username",
                "Email Address",
                "Password",
                "Gender",
                "Male",
                "Female",
                "Country",
                "USA",
                "Canada",
                "Mexico",
                "Accept Terms and Conditions",
                "Register",
                "Cancel",
                "green",
                "Registration Successful"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001112_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a user registration form with validation.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" at the top of the form.\n- Display three input fields: one for username with a placeholder \"Username\", one for email with a placeholder \"Email Address\", and one for password with a placeholder \"Password\" that uses input type \"password\".\n- Provide a radio button group labeled \"Gender\" with exactly two options: \"Male\" and \"Female\", arranged horizontally.\n- Include a dropdown selection labeled \"Country\" with three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add a checkbox labeled \"Accept Terms and Conditions\" that must be checked before submission.\n- Place two buttons at the bottom of the form labeled \"Register\" and \"Cancel\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the username, email, and password fields are not empty, verify that the email contains an \"@\" character, and confirm that the terms checkbox is checked.\n- When the \"Register\" button is clicked and all validations pass, display a new <div> element below the form with the text \"Registration Successful\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001112_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Register Now",
                                "Username",
                                "Email Address",
                                "Password",
                                "Gender",
                                "Male",
                                "Female",
                                "Country",
                                "USA",
                                "Canada",
                                "Mexico",
                                "Accept Terms and Conditions",
                                "Register",
                                "Cancel",
                                "green",
                                "Registration Successful"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001112_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001112_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the form?",
                                "How many input fields are shown for text entries?",
                                "What placeholders are used for the text input fields?",
                                "What label is displayed for the radio button group?",
                                "Which options are provided for the gender selection?",
                                "How many options are available in the country dropdown?",
                                "What options can be selected from the country dropdown?",
                                "What is the label next to the checkbox that appears in the form?",
                                "What labels are given to the buttons at the bottom of the form?",
                                "What text is shown after a successful registration?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001112_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Register Now",
                                "3",
                                "Username, Email Address, and Password",
                                "Gender",
                                "Male and Female",
                                "3",
                                "USA, Canada, and Mexico",
                                "Accept Terms and Conditions",
                                "Register and Cancel",
                                "Registration Successful"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Create a parent div with a flexbox layout that centers all content both vertically and horizontally on the page.\n- Include a header using an <h1> element at the top with the text \"Subscribe Now\".\n- Add a text input field for email with the placeholder \"Enter your email\".\n- Insert a checkbox input paired with a label displaying \"Agree to terms & conditions\".\n- Provide exactly two buttons: one labeled \"Subscribe\" styled with a background color of green and another labeled \"Clear\" with a background color of grey.\n- Embed a <p> element below the form to show an error message \"Invalid email.\" when the email input is empty or does not include an \"@\" symbol during form submission.\n- Apply inline styling to the subscription form container to create a solid black border of 2px.\n- Implement basic client-side validation ensuring the email field is not empty and contains an \"@\" before allowing submission.",
            "task_id": "001113",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header of the form?",
                "Does the parent container center the form vertically and horizontally?",
                "What placeholder text is visible in the email input field?",
                "What label is displayed next to the checkbox?",
                "How many buttons are shown in the form?",
                "What is the background color of the 'Subscribe' button?",
                "What is the background color of the 'Clear' button?",
                "What error message appears below the form when the email input is invalid?",
                "How is the border of the subscription form container styled?"
            ],
            "VQA_answers": [
                "Subscribe Now",
                "Yes",
                "Enter your email",
                "Agree to terms & conditions",
                "Two",
                "Green",
                "Grey",
                "Invalid email.",
                "2px solid black"
            ],
            "raw_output_metric": [
                "Subscribe Now",
                "Enter your email",
                "Agree to terms & conditions",
                "Subscribe",
                "Clear",
                "Invalid email.",
                "2px",
                "black",
                "green",
                "grey"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001113_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Create a parent div with a flexbox layout that centers all content both vertically and horizontally on the page.\n- Include a header using an <h1> element at the top with the text \"Subscribe Now\".\n- Add a text input field for email with the placeholder \"Enter your email\".\n- Insert a checkbox input paired with a label displaying \"Agree to terms & conditions\".\n- Provide exactly two buttons: one labeled \"Subscribe\" styled with a background color of green and another labeled \"Clear\" with a background color of grey.\n- Embed a <p> element below the form to show an error message \"Invalid email.\" when the email input is empty or does not include an \"@\" symbol during form submission.\n- Apply inline styling to the subscription form container to create a solid black border of 2px.\n- Implement basic client-side validation ensuring the email field is not empty and contains an \"@\" before allowing submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001113_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now",
                                "Enter your email",
                                "Agree to terms & conditions",
                                "Subscribe",
                                "Clear",
                                "Invalid email.",
                                "2px",
                                "black",
                                "green",
                                "grey"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001113_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001113_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header of the form?",
                                "Does the parent container center the form vertically and horizontally?",
                                "What placeholder text is visible in the email input field?",
                                "What label is displayed next to the checkbox?",
                                "How many buttons are shown in the form?",
                                "What is the background color of the 'Subscribe' button?",
                                "What is the background color of the 'Clear' button?",
                                "What error message appears below the form when the email input is invalid?",
                                "How is the border of the subscription form container styled?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001113_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now",
                                "Yes",
                                "Enter your email",
                                "Agree to terms & conditions",
                                "Two",
                                "Green",
                                "Grey",
                                "Invalid email.",
                                "2px solid black"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays an event RSVP form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Event RSVP\" at the top of the page.\n- Include a text input field with a placeholder \"Full Name\" for users to enter their name.\n- Provide an email input field with a placeholder \"Email Address\" and ensure the input type is set to email.\n- Add a dropdown select element for ticket options with a default disabled option \"Select Ticket Type\" and additional options \"General Admission\", \"VIP\", and \"Student\".\n- Incorporate a set of radio buttons labeled \"In-Person\" and \"Virtual\" for choosing the mode of attendance, placed directly below the select element.\n- Create a button labeled \"Confirm RSVP\" styled with a background color of green.\n- Implement an onClick event for the confirmation button that, upon successful validation of non-empty fields, displays a <div> element containing the message \"RSVP Received\" with a top margin of 20px.\n- Use a flexbox layout to ensure the entire form is centered both horizontally and vertically on the page.",
            "task_id": "001114",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header at the top of the page?",
                "What placeholder text is shown in the text input field?",
                "What is the placeholder text for the email input field?",
                "What options are available in the dropdown for ticket selection?",
                "What are the labels for the radio buttons indicating the mode of attendance?",
                "What label is displayed on the confirmation button?",
                "What is the background color of the confirmation button?",
                "What message is shown after a successful RSVP submission?",
                "How is the form positioned on the page?"
            ],
            "VQA_answers": [
                "Event RSVP",
                "Full Name",
                "Email Address",
                "Select Ticket Type (default), General Admission, VIP, Student",
                "In-Person and Virtual",
                "Confirm RSVP",
                "Green",
                "RSVP Received",
                "Centered both horizontally and vertically using a flexbox layout"
            ],
            "raw_output_metric": [
                "Event RSVP",
                "Full Name",
                "Email Address",
                "Select Ticket Type",
                "General Admission",
                "VIP",
                "Student",
                "In-Person",
                "Virtual",
                "Confirm RSVP",
                "RSVP Received"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001114_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays an event RSVP form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Event RSVP\" at the top of the page.\n- Include a text input field with a placeholder \"Full Name\" for users to enter their name.\n- Provide an email input field with a placeholder \"Email Address\" and ensure the input type is set to email.\n- Add a dropdown select element for ticket options with a default disabled option \"Select Ticket Type\" and additional options \"General Admission\", \"VIP\", and \"Student\".\n- Incorporate a set of radio buttons labeled \"In-Person\" and \"Virtual\" for choosing the mode of attendance, placed directly below the select element.\n- Create a button labeled \"Confirm RSVP\" styled with a background color of green.\n- Implement an onClick event for the confirmation button that, upon successful validation of non-empty fields, displays a <div> element containing the message \"RSVP Received\" with a top margin of 20px.\n- Use a flexbox layout to ensure the entire form is centered both horizontally and vertically on the page."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001114_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event RSVP",
                                "Full Name",
                                "Email Address",
                                "Select Ticket Type",
                                "General Admission",
                                "VIP",
                                "Student",
                                "In-Person",
                                "Virtual",
                                "Confirm RSVP",
                                "RSVP Received"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001114_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001114_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header at the top of the page?",
                                "What placeholder text is shown in the text input field?",
                                "What is the placeholder text for the email input field?",
                                "What options are available in the dropdown for ticket selection?",
                                "What are the labels for the radio buttons indicating the mode of attendance?",
                                "What label is displayed on the confirmation button?",
                                "What is the background color of the confirmation button?",
                                "What message is shown after a successful RSVP submission?",
                                "How is the form positioned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001114_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event RSVP",
                                "Full Name",
                                "Email Address",
                                "Select Ticket Type (default), General Admission, VIP, Student",
                                "In-Person and Virtual",
                                "Confirm RSVP",
                                "Green",
                                "RSVP Received",
                                "Centered both horizontally and vertically using a flexbox layout"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a secure login form for a fictional banking application.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Banking Login\".\n- Render a text input field with a placeholder text of \"Enter your email address\" and validate that it contains an \"@\" symbol.\n- Render a password input field with a placeholder text of \"Enter your password\".\n- Provide exactly two buttons labeled \"Login\" and \"Clear\", ensuring the \"Login\" button is styled with a green background color.\n- Use a flexbox container to center the form horizontally and vertically on the page, with a maximum width of 400px.\n- Implement basic validation that displays a <p> element with an error message if either the email or password fields are empty upon submission.\n- Automatically clear any error messages when the \"Clear\" button is clicked.",
            "task_id": "001115",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed on the login form?",
                "How many input fields can be found on the form?",
                "What placeholder text is shown for the email field?",
                "What placeholder text is shown for the password field?",
                "How many buttons are rendered on the form?",
                "Which button has a green background color?",
                "What labels are assigned to the two buttons?",
                "What layout technique is used to center the form horizontally and vertically?",
                "What is the maximum width specified for the form container?",
                "Which element is used to display an error message if the input fields are empty?"
            ],
            "VQA_answers": [
                "Banking Login",
                "2",
                "Enter your email address",
                "Enter your password",
                "2",
                "Login",
                "Login and Clear",
                "Flexbox",
                "400px",
                "Paragraph (<p>)"
            ],
            "raw_output_metric": [
                "Banking Login",
                "Enter your email address",
                "Enter your password",
                "Login",
                "Clear",
                "@",
                "green",
                "maxWidth: 400px"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001115_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a secure login form for a fictional banking application.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Banking Login\".\n- Render a text input field with a placeholder text of \"Enter your email address\" and validate that it contains an \"@\" symbol.\n- Render a password input field with a placeholder text of \"Enter your password\".\n- Provide exactly two buttons labeled \"Login\" and \"Clear\", ensuring the \"Login\" button is styled with a green background color.\n- Use a flexbox container to center the form horizontally and vertically on the page, with a maximum width of 400px.\n- Implement basic validation that displays a <p> element with an error message if either the email or password fields are empty upon submission.\n- Automatically clear any error messages when the \"Clear\" button is clicked."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001115_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Banking Login",
                                "Enter your email address",
                                "Enter your password",
                                "Login",
                                "Clear",
                                "@",
                                "green",
                                "maxWidth: 400px"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001115_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001115_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed on the login form?",
                                "How many input fields can be found on the form?",
                                "What placeholder text is shown for the email field?",
                                "What placeholder text is shown for the password field?",
                                "How many buttons are rendered on the form?",
                                "Which button has a green background color?",
                                "What labels are assigned to the two buttons?",
                                "What layout technique is used to center the form horizontally and vertically?",
                                "What is the maximum width specified for the form container?",
                                "Which element is used to display an error message if the input fields are empty?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001115_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Banking Login",
                                "2",
                                "Enter your email address",
                                "Enter your password",
                                "2",
                                "Login",
                                "Login and Clear",
                                "Flexbox",
                                "400px",
                                "Paragraph (<p>)"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a simple newsletter signup form.\n\nFeature Requirements:\n- Create a header centered using an <h1> element with the text \"Subscribe Now!\".\n- Display a single text input field with a placeholder text of \"Enter your email address\".\n- Include a button labeled \"Sign Up\" that is styled with a background color of green.\n- Arrange all elements within a container that uses CSS grid to center the form horizontally on the page.\n- Implement basic validation to ensure the email input contains the \"@\" symbol before allowing submission.\n- Render a <p> element below the form that displays \"Subscription successful!\" in green text after a valid submission.",
            "task_id": "001116",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed in the form?",
                "How many input fields are visible in the form?",
                "What placeholder text is shown in the email input field?",
                "What is the text displayed on the button?",
                "What is the background color of the button?",
                "Through which layout method is the form centered on the page?",
                "What message appears below the form after a valid submission?",
                "What text color is used for the success message?"
            ],
            "VQA_answers": [
                "Subscribe Now!",
                "1",
                "Enter your email address",
                "Sign Up",
                "Green",
                "CSS Grid",
                "Subscription successful!",
                "Green"
            ],
            "raw_output_metric": [
                "Subscribe Now!",
                "Enter your email address",
                "Sign Up",
                "Subscription successful!",
                "@",
                "green",
                "grid"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001116_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a simple newsletter signup form.\n\nFeature Requirements:\n- Create a header centered using an <h1> element with the text \"Subscribe Now!\".\n- Display a single text input field with a placeholder text of \"Enter your email address\".\n- Include a button labeled \"Sign Up\" that is styled with a background color of green.\n- Arrange all elements within a container that uses CSS grid to center the form horizontally on the page.\n- Implement basic validation to ensure the email input contains the \"@\" symbol before allowing submission.\n- Render a <p> element below the form that displays \"Subscription successful!\" in green text after a valid submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001116_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now!",
                                "Enter your email address",
                                "Sign Up",
                                "Subscription successful!",
                                "@",
                                "green",
                                "grid"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001116_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001116_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed in the form?",
                                "How many input fields are visible in the form?",
                                "What placeholder text is shown in the email input field?",
                                "What is the text displayed on the button?",
                                "What is the background color of the button?",
                                "Through which layout method is the form centered on the page?",
                                "What message appears below the form after a valid submission?",
                                "What text color is used for the success message?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001116_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now!",
                                "1",
                                "Enter your email address",
                                "Sign Up",
                                "Green",
                                "CSS Grid",
                                "Subscription successful!",
                                "Green"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays an online quiz submission form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Quiz Submission\".\n- Display an input field with a placeholder text of \"Enter your email\" positioned at the top of the form.\n- Implement three radio buttons arranged horizontally for quiz difficulty levels labeled \"Easy\", \"Medium\", and \"Hard\".\n- Provide a multi-line textarea with a placeholder text of \"Your Comments\" that spans exactly 4 rows.\n- Add exactly two buttons at the bottom of the form: one labeled \"Submit Quiz\" with an orange background and one labeled \"Clear\" with a default background.\n- Use a flexbox layout to align the form centrally in both vertical and horizontal directions within the container.\n- Display a <p> element at the bottom of the component that shows a congratulatory message when the \"Submit Quiz\" button is clicked, ensuring it is only visible after successful validation of the email input and selection of a difficulty level.",
            "task_id": "001117",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text in the centered header?",
                "What placeholder text should appear in the email input field?",
                "How many radio buttons for quiz difficulty are displayed?",
                "What are the labels of the quiz difficulty radio buttons?",
                "What placeholder text and row count is set for the comments textarea?",
                "What are the labels of the two buttons shown at the bottom of the form and which one has an orange background?",
                "Where is the congratulatory message displayed after a successful form submission?"
            ],
            "VQA_answers": [
                "Quiz Submission",
                "Enter your email",
                "3",
                "Easy, Medium, Hard",
                "Your Comments and 4 rows",
                "Submit Quiz (orange) and Clear (default)",
                "In a paragraph element at the bottom of the component"
            ],
            "raw_output_metric": [
                "Quiz Submission",
                "Enter your email",
                "Easy",
                "Medium",
                "Hard",
                "Your Comments",
                "Submit Quiz",
                "Clear"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001117_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays an online quiz submission form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Quiz Submission\".\n- Display an input field with a placeholder text of \"Enter your email\" positioned at the top of the form.\n- Implement three radio buttons arranged horizontally for quiz difficulty levels labeled \"Easy\", \"Medium\", and \"Hard\".\n- Provide a multi-line textarea with a placeholder text of \"Your Comments\" that spans exactly 4 rows.\n- Add exactly two buttons at the bottom of the form: one labeled \"Submit Quiz\" with an orange background and one labeled \"Clear\" with a default background.\n- Use a flexbox layout to align the form centrally in both vertical and horizontal directions within the container.\n- Display a <p> element at the bottom of the component that shows a congratulatory message when the \"Submit Quiz\" button is clicked, ensuring it is only visible after successful validation of the email input and selection of a difficulty level."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001117_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Quiz Submission",
                                "Enter your email",
                                "Easy",
                                "Medium",
                                "Hard",
                                "Your Comments",
                                "Submit Quiz",
                                "Clear"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001117_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001117_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text in the centered header?",
                                "What placeholder text should appear in the email input field?",
                                "How many radio buttons for quiz difficulty are displayed?",
                                "What are the labels of the quiz difficulty radio buttons?",
                                "What placeholder text and row count is set for the comments textarea?",
                                "What are the labels of the two buttons shown at the bottom of the form and which one has an orange background?",
                                "Where is the congratulatory message displayed after a successful form submission?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001117_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Quiz Submission",
                                "Enter your email",
                                "3",
                                "Easy, Medium, Hard",
                                "Your Comments and 4 rows",
                                "Submit Quiz (orange) and Clear (default)",
                                "In a paragraph element at the bottom of the component"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with three input fields and two action buttons.\n\nFeature Requirements:\n- Include an <h2> element at the top of the form with the text \"User Registration\".\n- Create three input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\" that masks the input.\n- Position a checkbox labeled \"Accept Terms and Conditions\" immediately below the password field.\n- Place exactly two buttons at the bottom of the form labeled \"Register\" and \"Cancel\".\n- Use a CSS grid layout to align labels on the left and corresponding input fields on the right.\n- Style the \"Register\" button with a green background and white text.\n- Implement basic form validation that triggers a <p> element displaying an error message if any input is empty or if the email does not follow a valid format upon clicking \"Register\".\n- Ensure the \"Cancel\" button clears all current input values when clicked.",
            "task_id": "001118",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the heading text displayed at the top of the registration form?",
                "How many input fields are visible in the form?",
                "What placeholder text is used for the username input field?",
                "What placeholder text is shown in the password input field, and how is the input presented?",
                "Which label appears immediately below the password field?",
                "How many action buttons are present at the bottom of the form?",
                "What are the labels of the action buttons shown in the form?",
                "What styling is applied to the Register button in terms of background and text color?",
                "What layout method is used to align the labels and input fields?",
                "What element appears to display an error message when form validation fails?"
            ],
            "VQA_answers": [
                "User Registration",
                "3",
                "Enter Username",
                "Enter Password; the input is masked",
                "Accept Terms and Conditions",
                "2",
                "Register and Cancel",
                "Green background with white text",
                "CSS grid layout",
                "<p> element"
            ],
            "raw_output_metric": [
                "User Registration",
                "Enter Username",
                "Enter Email",
                "Enter Password",
                "Accept Terms and Conditions",
                "Register",
                "Cancel"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001118_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with three input fields and two action buttons.\n\nFeature Requirements:\n- Include an <h2> element at the top of the form with the text \"User Registration\".\n- Create three input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\" that masks the input.\n- Position a checkbox labeled \"Accept Terms and Conditions\" immediately below the password field.\n- Place exactly two buttons at the bottom of the form labeled \"Register\" and \"Cancel\".\n- Use a CSS grid layout to align labels on the left and corresponding input fields on the right.\n- Style the \"Register\" button with a green background and white text.\n- Implement basic form validation that triggers a <p> element displaying an error message if any input is empty or if the email does not follow a valid format upon clicking \"Register\".\n- Ensure the \"Cancel\" button clears all current input values when clicked."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001118_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "Enter Username",
                                "Enter Email",
                                "Enter Password",
                                "Accept Terms and Conditions",
                                "Register",
                                "Cancel"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001118_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001118_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the heading text displayed at the top of the registration form?",
                                "How many input fields are visible in the form?",
                                "What placeholder text is used for the username input field?",
                                "What placeholder text is shown in the password input field, and how is the input presented?",
                                "Which label appears immediately below the password field?",
                                "How many action buttons are present at the bottom of the form?",
                                "What are the labels of the action buttons shown in the form?",
                                "What styling is applied to the Register button in terms of background and text color?",
                                "What layout method is used to align the labels and input fields?",
                                "What element appears to display an error message when form validation fails?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001118_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "3",
                                "Enter Username",
                                "Enter Password; the input is masked",
                                "Accept Terms and Conditions",
                                "2",
                                "Register and Cancel",
                                "Green background with white text",
                                "CSS grid layout",
                                "<p> element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"User Registration\".\n- Display an input field for the email address with a placeholder \"Enter Email\" and position it at the top of the form.\n- Provide a password input field with a placeholder \"Enter Password\" followed immediately by a confirmation password field with a placeholder \"Confirm Password\".\n- Include a dropdown select element labeled \"Country\" that contains exactly three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add exactly two buttons at the bottom of the form with the labels \"Register\" and \"Clear\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the form on the page both vertically and horizontally.\n- Implement basic validation to ensure that the email and both password fields are filled and that the password and confirmation match before submission.\n- Include a <p> element below the form that displays a success message once the registration is completed.",
            "task_id": "001119",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the form?",
                "What placeholder text appears in the email input field?",
                "What are the placeholder texts for the password fields?",
                "How many options are available in the country dropdown menu?",
                "What are the country options listed in the dropdown?",
                "Which two buttons are displayed at the bottom of the form?",
                "What background color is applied to the Register button?",
                "Where is the success message displayed once the registration is completed?"
            ],
            "VQA_answers": [
                "User Registration",
                "Enter Email",
                "Enter Password and Confirm Password",
                "3",
                "USA, Canada, Mexico",
                "Register and Clear",
                "Green",
                "Below the form in a paragraph element"
            ],
            "raw_output_metric": [
                "User Registration",
                "Enter Email",
                "Enter Password",
                "Confirm Password",
                "Country",
                "USA",
                "Canada",
                "Mexico",
                "Register",
                "Clear"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001119_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"User Registration\".\n- Display an input field for the email address with a placeholder \"Enter Email\" and position it at the top of the form.\n- Provide a password input field with a placeholder \"Enter Password\" followed immediately by a confirmation password field with a placeholder \"Confirm Password\".\n- Include a dropdown select element labeled \"Country\" that contains exactly three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add exactly two buttons at the bottom of the form with the labels \"Register\" and \"Clear\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the form on the page both vertically and horizontally.\n- Implement basic validation to ensure that the email and both password fields are filled and that the password and confirmation match before submission.\n- Include a <p> element below the form that displays a success message once the registration is completed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001119_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "Enter Email",
                                "Enter Password",
                                "Confirm Password",
                                "Country",
                                "USA",
                                "Canada",
                                "Mexico",
                                "Register",
                                "Clear"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001119_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001119_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the form?",
                                "What placeholder text appears in the email input field?",
                                "What are the placeholder texts for the password fields?",
                                "How many options are available in the country dropdown menu?",
                                "What are the country options listed in the dropdown?",
                                "Which two buttons are displayed at the bottom of the form?",
                                "What background color is applied to the Register button?",
                                "Where is the success message displayed once the registration is completed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001119_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Registration",
                                "Enter Email",
                                "Enter Password and Confirm Password",
                                "3",
                                "USA, Canada, Mexico",
                                "Register and Clear",
                                "Green",
                                "Below the form in a paragraph element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a to-do list interface with task addition and removal functionality.\n\nFeature Requirements:\n- Include a centered header using an <h3> element with the text \"Task Manager\".\n- Display a text input field with a placeholder \"Enter new task\" for users to add a task.\n- Place an \"Add Task\" button immediately next to the input field that appends the entered task to the list.\n- Render the tasks as <li> elements within an unordered list, each paired with a checkbox that, when toggled, applies a line-through style to the task's text.\n- Provide exactly one \"Clear All\" button positioned at the bottom of the component that removes all tasks upon clicking.\n- Ensure the component uses a flexbox layout to center all elements both vertically and horizontally within the page.\n- Implement a <p> element that displays the message \"No tasks available\" when the unordered list is empty.\n- Apply inline CSS styling such that the \"Add Task\" button has a green background and the \"Clear All\" button has a red background.\n- Validate that the text input field is not empty before adding a new task to the list.\n- Structure the component so that the header, input area, task list, and clear button are clearly separated and visually distinct.",
            "task_id": "001120",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "What placeholder is shown in the task input field?",
                "What label is visible on the button next to the input field?",
                "What background color is applied to the Add Task button?",
                "What background color is applied to the Clear All button?",
                "What message is displayed when there are no tasks in the list?",
                "How many Clear All buttons are visible?",
                "Where is the Clear All button positioned within the component?",
                "What is paired with each task in the list to show its completion state?"
            ],
            "VQA_answers": [
                "Task Manager",
                "Enter new task",
                "Add Task",
                "Green",
                "Red",
                "No tasks available",
                "One",
                "At the bottom",
                "A checkbox"
            ],
            "raw_output_metric": [
                "Task Manager",
                "Enter new task",
                "Add Task",
                "Clear All",
                "No tasks available",
                "<li>",
                "line-through",
                "green",
                "red"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001120_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a to-do list interface with task addition and removal functionality.\n\nFeature Requirements:\n- Include a centered header using an <h3> element with the text \"Task Manager\".\n- Display a text input field with a placeholder \"Enter new task\" for users to add a task.\n- Place an \"Add Task\" button immediately next to the input field that appends the entered task to the list.\n- Render the tasks as <li> elements within an unordered list, each paired with a checkbox that, when toggled, applies a line-through style to the task's text.\n- Provide exactly one \"Clear All\" button positioned at the bottom of the component that removes all tasks upon clicking.\n- Ensure the component uses a flexbox layout to center all elements both vertically and horizontally within the page.\n- Implement a <p> element that displays the message \"No tasks available\" when the unordered list is empty.\n- Apply inline CSS styling such that the \"Add Task\" button has a green background and the \"Clear All\" button has a red background.\n- Validate that the text input field is not empty before adding a new task to the list.\n- Structure the component so that the header, input area, task list, and clear button are clearly separated and visually distinct."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001120_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "Enter new task",
                                "Add Task",
                                "Clear All",
                                "No tasks available",
                                "<li>",
                                "line-through",
                                "green",
                                "red"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001120_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001120_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "What placeholder is shown in the task input field?",
                                "What label is visible on the button next to the input field?",
                                "What background color is applied to the Add Task button?",
                                "What background color is applied to the Clear All button?",
                                "What message is displayed when there are no tasks in the list?",
                                "How many Clear All buttons are visible?",
                                "Where is the Clear All button positioned within the component?",
                                "What is paired with each task in the list to show its completion state?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001120_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "Enter new task",
                                "Add Task",
                                "Green",
                                "Red",
                                "No tasks available",
                                "One",
                                "At the bottom",
                                "A checkbox"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nDevelop a React component that presents a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text \"Enter your email address\".\n- Include a checkbox element below the email input with a label \"Agree to receive updates\".\n- Provide exactly two buttons at the bottom of the form labeled \"Subscribe\" and \"Clear\", styled with background colors green and gray respectively.\n- Use a grid layout to center the form both vertically and horizontally on the page.\n- Implement basic validation to check that the email input is in a valid email format before allowing submission.\n- Render a <p> element containing the text \"Subscription successful\" after a successful form submission.\n- Automatically focus on the email input field when the component renders.\n- Display an inline error message below the email input if the entered email is not valid upon submission.",
            "task_id": "001121",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text of the centered header?",
                "What placeholder text is shown in the email input field?",
                "What is the label next to the checkbox appearing below the email input?",
                "How many buttons are visible at the bottom of the form?",
                "What are the labels of the two buttons?",
                "What background color is used for the Subscribe button?",
                "What background color is used for the Clear button?",
                "What message is displayed in a paragraph element upon successful form submission?"
            ],
            "VQA_answers": [
                "Newsletter Signup",
                "Enter your email address",
                "Agree to receive updates",
                "2",
                "Subscribe and Clear",
                "Green",
                "Gray",
                "Subscription successful"
            ],
            "raw_output_metric": [
                "Newsletter Signup",
                "Enter your email address",
                "Agree to receive updates",
                "Subscribe",
                "Clear",
                "Subscription successful"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001121_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nDevelop a React component that presents a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text \"Enter your email address\".\n- Include a checkbox element below the email input with a label \"Agree to receive updates\".\n- Provide exactly two buttons at the bottom of the form labeled \"Subscribe\" and \"Clear\", styled with background colors green and gray respectively.\n- Use a grid layout to center the form both vertically and horizontally on the page.\n- Implement basic validation to check that the email input is in a valid email format before allowing submission.\n- Render a <p> element containing the text \"Subscription successful\" after a successful form submission.\n- Automatically focus on the email input field when the component renders.\n- Display an inline error message below the email input if the entered email is not valid upon submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001121_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email address",
                                "Agree to receive updates",
                                "Subscribe",
                                "Clear",
                                "Subscription successful"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001121_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001121_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered header?",
                                "What placeholder text is shown in the email input field?",
                                "What is the label next to the checkbox appearing below the email input?",
                                "How many buttons are visible at the bottom of the form?",
                                "What are the labels of the two buttons?",
                                "What background color is used for the Subscribe button?",
                                "What background color is used for the Clear button?",
                                "What message is displayed in a paragraph element upon successful form submission?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001121_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email address",
                                "Agree to receive updates",
                                "2",
                                "Subscribe and Clear",
                                "Green",
                                "Gray",
                                "Subscription successful"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription widget.\n\nFeature Requirements:\n- Include an <h1> element at the top of the component with the text \"Join Our Newsletter\".\n- Display a single-line input field for the email address with a placeholder \"Enter your email address\" that spans the full width of its container.\n- Add a button labeled \"Subscribe\" immediately next to the email input, and style it with a green background and white text.\n- Use a CSS grid layout to place the email input and button side-by-side within a container.\n- Wrap the entire component in a <div> that has a fixed width of 400px and apply a 1px solid gray border around it.\n- Implement an onSubmit event handler for the form that validates the email using a basic regular expression.\n- Below the form, include a <p> element that initially displays the message \"Please enter a valid email\".\n- Once a correct email is submitted, replace the <p> content with \"Thank you for subscribing!\".\n- Ensure that the component is centered horizontally on the page using appropriate CSS styling.",
            "task_id": "001122",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the main heading text displayed at the top of the widget?",
                "What placeholder text is shown in the email input field?",
                "What text is displayed on the button next to the email input?",
                "What are the button's visible background and text colors?",
                "How are the email input field and subscribe button arranged?",
                "What fixed width and border styling is applied to the component container?",
                "What message is initially displayed below the form?",
                "What message appears after a correct email is submitted?",
                "How is the component positioned on the page?"
            ],
            "VQA_answers": [
                "Join Our Newsletter",
                "Enter your email address",
                "Subscribe",
                "Green background and white text",
                "Side by side using a CSS grid layout",
                "400px width and 1px solid gray border",
                "Please enter a valid email",
                "Thank you for subscribing!",
                "Centered horizontally"
            ],
            "raw_output_metric": [
                "Join Our Newsletter",
                "Enter your email address",
                "Subscribe",
                "Please enter a valid email",
                "Thank you for subscribing!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001122_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription widget.\n\nFeature Requirements:\n- Include an <h1> element at the top of the component with the text \"Join Our Newsletter\".\n- Display a single-line input field for the email address with a placeholder \"Enter your email address\" that spans the full width of its container.\n- Add a button labeled \"Subscribe\" immediately next to the email input, and style it with a green background and white text.\n- Use a CSS grid layout to place the email input and button side-by-side within a container.\n- Wrap the entire component in a <div> that has a fixed width of 400px and apply a 1px solid gray border around it.\n- Implement an onSubmit event handler for the form that validates the email using a basic regular expression.\n- Below the form, include a <p> element that initially displays the message \"Please enter a valid email\".\n- Once a correct email is submitted, replace the <p> content with \"Thank you for subscribing!\".\n- Ensure that the component is centered horizontally on the page using appropriate CSS styling."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001122_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Join Our Newsletter",
                                "Enter your email address",
                                "Subscribe",
                                "Please enter a valid email",
                                "Thank you for subscribing!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001122_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001122_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading text displayed at the top of the widget?",
                                "What placeholder text is shown in the email input field?",
                                "What text is displayed on the button next to the email input?",
                                "What are the button's visible background and text colors?",
                                "How are the email input field and subscribe button arranged?",
                                "What fixed width and border styling is applied to the component container?",
                                "What message is initially displayed below the form?",
                                "What message appears after a correct email is submitted?",
                                "How is the component positioned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001122_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Join Our Newsletter",
                                "Enter your email address",
                                "Subscribe",
                                "Green background and white text",
                                "Side by side using a CSS grid layout",
                                "400px width and 1px solid gray border",
                                "Please enter a valid email",
                                "Thank you for subscribing!",
                                "Centered horizontally"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nCreate a React component that renders a newsletter subscription form with input validation and dynamic messaging.\n\nFeature Requirements:\n- Display a centered <h2> element with the text \"Newsletter Signup\" at the top of the component.\n- Render a text input field for the email address with a placeholder \"Enter your email address\" directly below the header.\n- Include a dropdown <select> element with options \"Daily\", \"Weekly\", and \"Monthly\" for choosing newsletter frequency.\n- Provide exactly two buttons at the bottom: one labeled \"Subscribe\" with a green background color and another labeled \"Clear Form\" with a red border.\n- Use a flexbox layout on a container <div> to center the form both horizontally and vertically within the viewport.\n- Implement a <p> element below the buttons to display a confirmation message when the \"Subscribe\" button is clicked.\n- Add client-side validation to verify the email input contains an \"@\" character and that a frequency option is selected before allowing submission.\n- Ensure that clicking the \"Clear Form\" button resets all input fields and the dropdown selection to their default states.",
            "task_id": "001123",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "How is the header positioned within the component?",
                "What placeholder text is shown in the email input field?",
                "What options are available in the newsletter frequency dropdown?",
                "How many buttons are present and what are their labels?",
                "What style is applied to the Subscribe button?",
                "What style is applied to the Clear Form button?",
                "Where is the confirmation message displayed after subscribing?",
                "What symbol must the email input contain to pass validation?",
                "What occurs when the Clear Form button is clicked?"
            ],
            "VQA_answers": [
                "Newsletter Signup",
                "Centered horizontally",
                "Enter your email address",
                "Daily, Weekly, Monthly",
                "Two buttons: Subscribe and Clear Form",
                "Green background",
                "Red border",
                "Below the buttons",
                "@",
                "All fields reset to their default states"
            ],
            "raw_output_metric": [
                "Newsletter Signup",
                "Enter your email address",
                "Daily",
                "Weekly",
                "Monthly",
                "Subscribe",
                "Clear Form",
                "@"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001123_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nCreate a React component that renders a newsletter subscription form with input validation and dynamic messaging.\n\nFeature Requirements:\n- Display a centered <h2> element with the text \"Newsletter Signup\" at the top of the component.\n- Render a text input field for the email address with a placeholder \"Enter your email address\" directly below the header.\n- Include a dropdown <select> element with options \"Daily\", \"Weekly\", and \"Monthly\" for choosing newsletter frequency.\n- Provide exactly two buttons at the bottom: one labeled \"Subscribe\" with a green background color and another labeled \"Clear Form\" with a red border.\n- Use a flexbox layout on a container <div> to center the form both horizontally and vertically within the viewport.\n- Implement a <p> element below the buttons to display a confirmation message when the \"Subscribe\" button is clicked.\n- Add client-side validation to verify the email input contains an \"@\" character and that a frequency option is selected before allowing submission.\n- Ensure that clicking the \"Clear Form\" button resets all input fields and the dropdown selection to their default states."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001123_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email address",
                                "Daily",
                                "Weekly",
                                "Monthly",
                                "Subscribe",
                                "Clear Form",
                                "@"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001123_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001123_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "How is the header positioned within the component?",
                                "What placeholder text is shown in the email input field?",
                                "What options are available in the newsletter frequency dropdown?",
                                "How many buttons are present and what are their labels?",
                                "What style is applied to the Subscribe button?",
                                "What style is applied to the Clear Form button?",
                                "Where is the confirmation message displayed after subscribing?",
                                "What symbol must the email input contain to pass validation?",
                                "What occurs when the Clear Form button is clicked?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001123_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Centered horizontally",
                                "Enter your email address",
                                "Daily, Weekly, Monthly",
                                "Two buttons: Subscribe and Clear Form",
                                "Green background",
                                "Red border",
                                "Below the buttons",
                                "@",
                                "All fields reset to their default states"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Subscribe to our Newsletter\".\n- Render two input fields: one text input for the user's full name with a placeholder \"Full Name\" and one email input with a placeholder \"Email Address\".\n- Place exactly one button below the input fields, labeled \"Subscribe\", and style it with red text on a white background.\n- Utilize a flexbox layout to center the complete form both vertically and horizontally within the viewport.\n- On clicking the \"Subscribe\" button, display a <div> element beneath the form containing the message \"Subscription Successful!\" in bold text, but only if both input fields contain non-empty values.",
            "task_id": "001124",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed in the form?",
                "How many input fields are visible in the form?",
                "What placeholder text is shown in the first input field?",
                "What placeholder text is shown in the second input field?",
                "What label is displayed on the button below the input fields?",
                "What are the button's text and background colors?",
                "What message appears after clicking the button if both fields are filled?",
                "How is the 'Subscription Successful!' message styled?",
                "How is the form positioned on the viewport?"
            ],
            "VQA_answers": [
                "Subscribe to our Newsletter",
                "2",
                "Full Name",
                "Email Address",
                "Subscribe",
                "Red text on a white background",
                "Subscription Successful!",
                "Bold text",
                "Centered vertically and horizontally using flexbox"
            ],
            "raw_output_metric": [
                "Subscribe to our Newsletter",
                "Full Name",
                "Email Address",
                "Subscribe",
                "Subscription Successful!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001124_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Subscribe to our Newsletter\".\n- Render two input fields: one text input for the user's full name with a placeholder \"Full Name\" and one email input with a placeholder \"Email Address\".\n- Place exactly one button below the input fields, labeled \"Subscribe\", and style it with red text on a white background.\n- Utilize a flexbox layout to center the complete form both vertically and horizontally within the viewport.\n- On clicking the \"Subscribe\" button, display a <div> element beneath the form containing the message \"Subscription Successful!\" in bold text, but only if both input fields contain non-empty values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001124_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to our Newsletter",
                                "Full Name",
                                "Email Address",
                                "Subscribe",
                                "Subscription Successful!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001124_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001124_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed in the form?",
                                "How many input fields are visible in the form?",
                                "What placeholder text is shown in the first input field?",
                                "What placeholder text is shown in the second input field?",
                                "What label is displayed on the button below the input fields?",
                                "What are the button's text and background colors?",
                                "What message appears after clicking the button if both fields are filled?",
                                "How is the 'Subscription Successful!' message styled?",
                                "How is the form positioned on the viewport?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001124_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to our Newsletter",
                                "2",
                                "Full Name",
                                "Email Address",
                                "Subscribe",
                                "Red text on a white background",
                                "Subscription Successful!",
                                "Bold text",
                                "Centered vertically and horizontally using flexbox"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a hotel booking form for making reservations.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Hotel Booking Form\".\n- Display two date input fields with placeholders \"Check-in Date\" and \"Check-out Date\".\n- Render a number input field for the guest count with a placeholder \"Number of Guests\".\n- Include a <select> dropdown menu with options \"Single\", \"Double\", and \"Suite\" for room type selection.\n- Provide exactly two buttons labeled \"Reserve\" and \"Clear\" positioned at the bottom of the form.\n- Style the \"Reserve\" button with a green background color and the \"Clear\" button with a red background color.\n- Use a CSS flexbox layout to center the form both vertically and horizontally on the page.\n- Implement an onClick event for the \"Reserve\" button that triggers an alert with the message \"Reservation Successful\".\n- Ensure basic validation so that all input fields contain data before allowing a reservation.",
            "task_id": "001125",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "How many date input fields are visible?",
                "What placeholders are used for the date input fields?",
                "What placeholder text is used for the guest count input field?",
                "How many room type options are available in the dropdown?",
                "What are the room type options listed in the dropdown?",
                "What are the labels on the two buttons at the bottom of the form?",
                "Which button is styled with a green background?",
                "Which button is styled with a red background?",
                "How is the form positioned on the page?"
            ],
            "VQA_answers": [
                "Hotel Booking Form",
                "2",
                "Check-in Date and Check-out Date",
                "Number of Guests",
                "3",
                "Single, Double, and Suite",
                "Reserve and Clear",
                "Reserve",
                "Clear",
                "Centered using CSS flexbox"
            ],
            "raw_output_metric": [
                "Hotel Booking Form",
                "Check-in Date",
                "Check-out Date",
                "Number of Guests",
                "Single",
                "Double",
                "Suite",
                "Reserve",
                "Clear",
                "Reservation Successful"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001125_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a hotel booking form for making reservations.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Hotel Booking Form\".\n- Display two date input fields with placeholders \"Check-in Date\" and \"Check-out Date\".\n- Render a number input field for the guest count with a placeholder \"Number of Guests\".\n- Include a <select> dropdown menu with options \"Single\", \"Double\", and \"Suite\" for room type selection.\n- Provide exactly two buttons labeled \"Reserve\" and \"Clear\" positioned at the bottom of the form.\n- Style the \"Reserve\" button with a green background color and the \"Clear\" button with a red background color.\n- Use a CSS flexbox layout to center the form both vertically and horizontally on the page.\n- Implement an onClick event for the \"Reserve\" button that triggers an alert with the message \"Reservation Successful\".\n- Ensure basic validation so that all input fields contain data before allowing a reservation."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001125_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Hotel Booking Form",
                                "Check-in Date",
                                "Check-out Date",
                                "Number of Guests",
                                "Single",
                                "Double",
                                "Suite",
                                "Reserve",
                                "Clear",
                                "Reservation Successful"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001125_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001125_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "How many date input fields are visible?",
                                "What placeholders are used for the date input fields?",
                                "What placeholder text is used for the guest count input field?",
                                "How many room type options are available in the dropdown?",
                                "What are the room type options listed in the dropdown?",
                                "What are the labels on the two buttons at the bottom of the form?",
                                "Which button is styled with a green background?",
                                "Which button is styled with a red background?",
                                "How is the form positioned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001125_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Hotel Booking Form",
                                "2",
                                "Check-in Date and Check-out Date",
                                "Number of Guests",
                                "3",
                                "Single, Double, and Suite",
                                "Reserve and Clear",
                                "Reserve",
                                "Clear",
                                "Centered using CSS flexbox"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nCreate a React component that renders a simple newsletter subscription form.\n\nFeature Requirements:\n- Include a centered page title using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text of \"Enter your email\" and mark it as a required field.\n- Place a checkbox labeled \"I agree to receive weekly updates\" directly below the email input field.\n- Provide exactly one submission button at the bottom of the form labeled \"Subscribe\" and style it with a background color of green.\n- Use a grid layout to arrange the form elements with a 10px gap between each element.\n- Implement an <h3> element below the form that displays the message \"Subscription successful!\" upon form submission.\n- Validate that the email field is not empty and matches a standard email format before allowing submission.\n- Disable the \"Subscribe\" button until the checkbox is selected.",
            "task_id": "001126",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the page title?",
                "What placeholder text is shown in the email input field?",
                "Is the email input field marked as required?",
                "What label is displayed next to the checkbox?",
                "What is the text on the submission button at the bottom of the form?",
                "What is the background color of the subscription button?",
                "What is the gap between the grid layout items in the form?",
                "What message appears below the form when the submission is successful?"
            ],
            "VQA_answers": [
                "Newsletter Signup",
                "Enter your email",
                "Yes",
                "I agree to receive weekly updates",
                "Subscribe",
                "Green",
                "10px",
                "Subscription successful!"
            ],
            "raw_output_metric": [
                "Newsletter Signup",
                "Enter your email",
                "I agree to receive weekly updates",
                "Subscribe",
                "green",
                "10px",
                "Subscription successful!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001126_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nCreate a React component that renders a simple newsletter subscription form.\n\nFeature Requirements:\n- Include a centered page title using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text of \"Enter your email\" and mark it as a required field.\n- Place a checkbox labeled \"I agree to receive weekly updates\" directly below the email input field.\n- Provide exactly one submission button at the bottom of the form labeled \"Subscribe\" and style it with a background color of green.\n- Use a grid layout to arrange the form elements with a 10px gap between each element.\n- Implement an <h3> element below the form that displays the message \"Subscription successful!\" upon form submission.\n- Validate that the email field is not empty and matches a standard email format before allowing submission.\n- Disable the \"Subscribe\" button until the checkbox is selected."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001126_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email",
                                "I agree to receive weekly updates",
                                "Subscribe",
                                "green",
                                "10px",
                                "Subscription successful!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001126_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001126_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the page title?",
                                "What placeholder text is shown in the email input field?",
                                "Is the email input field marked as required?",
                                "What label is displayed next to the checkbox?",
                                "What is the text on the submission button at the bottom of the form?",
                                "What is the background color of the subscription button?",
                                "What is the gap between the grid layout items in the form?",
                                "What message appears below the form when the submission is successful?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001126_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email",
                                "Yes",
                                "I agree to receive weekly updates",
                                "Subscribe",
                                "Green",
                                "10px",
                                "Subscription successful!"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Subscribe Now\" using a flex container.\n- Display a single text input field with a placeholder text of \"Enter your email address\" positioned below the header.\n- Place an explanatory <p> element beneath the input field with the exact text \"Join our monthly newsletter for updates\" in a smaller font.\n- Add a button labeled \"Sign Up\" directly under the paragraph and ensure it has a background color of green.\n- Include a <div> container that wraps the entire form and applies a flexbox layout to center the form vertically and horizontally within the page.\n- Implement a <span> element to display an error message below the button if the email input is empty upon clicking \"Sign Up\".\n- Ensure the component maintains a maximum width of 400px and uses padding of 20px around the form for clear spacing.",
            "task_id": "001127",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text content of the page header?",
                "Is the header centered horizontally using a flex container?",
                "What placeholder text appears in the email input field?",
                "What explanation is provided underneath the input field?",
                "What label is displayed on the button below the explanation text?",
                "What is the background color of the sign-up button?",
                "Is there an area to display an error message under the button if the email input is empty?",
                "What are the layout constraints of the form container?"
            ],
            "VQA_answers": [
                "Subscribe Now",
                "Yes",
                "Enter your email address",
                "Join our monthly newsletter for updates",
                "Sign Up",
                "Green",
                "Yes",
                "Maximum width of 400px with 20px padding"
            ],
            "raw_output_metric": [
                "Subscribe Now",
                "Enter your email address",
                "Join our monthly newsletter for updates",
                "Sign Up",
                "400px",
                "20px",
                "green",
                "flex"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001127_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Subscribe Now\" using a flex container.\n- Display a single text input field with a placeholder text of \"Enter your email address\" positioned below the header.\n- Place an explanatory <p> element beneath the input field with the exact text \"Join our monthly newsletter for updates\" in a smaller font.\n- Add a button labeled \"Sign Up\" directly under the paragraph and ensure it has a background color of green.\n- Include a <div> container that wraps the entire form and applies a flexbox layout to center the form vertically and horizontally within the page.\n- Implement a <span> element to display an error message below the button if the email input is empty upon clicking \"Sign Up\".\n- Ensure the component maintains a maximum width of 400px and uses padding of 20px around the form for clear spacing."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001127_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now",
                                "Enter your email address",
                                "Join our monthly newsletter for updates",
                                "Sign Up",
                                "400px",
                                "20px",
                                "green",
                                "flex"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001127_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001127_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text content of the page header?",
                                "Is the header centered horizontally using a flex container?",
                                "What placeholder text appears in the email input field?",
                                "What explanation is provided underneath the input field?",
                                "What label is displayed on the button below the explanation text?",
                                "What is the background color of the sign-up button?",
                                "Is there an area to display an error message under the button if the email input is empty?",
                                "What are the layout constraints of the form container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001127_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe Now",
                                "Yes",
                                "Enter your email address",
                                "Join our monthly newsletter for updates",
                                "Sign Up",
                                "Green",
                                "Yes",
                                "Maximum width of 400px with 20px padding"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nDevelop a React component that implements a to-do list interface.\n\nFeature Requirements:\n- Create a centered <h2> element with the text \"To-Do List\" at the top of the component.\n- Include a text input field with a placeholder \"New Task\" for entering tasks.\n- Provide an \"Add Task\" button that, when clicked, appends the input text as a new task to the list.\n- Display the tasks in an unordered list (<ul>) where each task is wrapped in a <li> element.\n- Each <li> element must also include a \"Delete\" button that removes the respective task.\n- Use a flexbox layout to center the entire to-do list container both vertically and horizontally on the page.\n- Style the most recently added <li> element with a distinct background color to highlight it.\n- Implement a <p> element that briefly shows the message \"Task added!\" each time a new task is successfully added.\n- Validate that the text input is not empty before allowing a task to be added.\n- Enclose the to-do list and input area within a <div> element that features a visible border.",
            "task_id": "001128",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text of the heading displayed at the top of the component?",
                "What placeholder text appears in the task input field?",
                "What label is shown on the button used to add new tasks?",
                "In which type of list are the tasks displayed?",
                "What extra button is provided alongside each task in the list?",
                "Is the to-do list container centered on the page?",
                "How is the most recently added task visually distinguished from the others?",
                "What message is briefly displayed after a new task is added?",
                "Does the container have a visible border?"
            ],
            "VQA_answers": [
                "To-Do List",
                "New Task",
                "Add Task",
                "Unordered list",
                "Delete",
                "Yes, using a flexbox layout",
                "It has a distinct background color",
                "Task added!",
                "Yes"
            ],
            "raw_output_metric": [
                "To-Do List",
                "New Task",
                "Add Task",
                "Delete",
                "Task added!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001128_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nDevelop a React component that implements a to-do list interface.\n\nFeature Requirements:\n- Create a centered <h2> element with the text \"To-Do List\" at the top of the component.\n- Include a text input field with a placeholder \"New Task\" for entering tasks.\n- Provide an \"Add Task\" button that, when clicked, appends the input text as a new task to the list.\n- Display the tasks in an unordered list (<ul>) where each task is wrapped in a <li> element.\n- Each <li> element must also include a \"Delete\" button that removes the respective task.\n- Use a flexbox layout to center the entire to-do list container both vertically and horizontally on the page.\n- Style the most recently added <li> element with a distinct background color to highlight it.\n- Implement a <p> element that briefly shows the message \"Task added!\" each time a new task is successfully added.\n- Validate that the text input is not empty before allowing a task to be added.\n- Enclose the to-do list and input area within a <div> element that features a visible border."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001128_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "To-Do List",
                                "New Task",
                                "Add Task",
                                "Delete",
                                "Task added!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001128_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001128_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the heading displayed at the top of the component?",
                                "What placeholder text appears in the task input field?",
                                "What label is shown on the button used to add new tasks?",
                                "In which type of list are the tasks displayed?",
                                "What extra button is provided alongside each task in the list?",
                                "Is the to-do list container centered on the page?",
                                "How is the most recently added task visually distinguished from the others?",
                                "What message is briefly displayed after a new task is added?",
                                "Does the container have a visible border?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001128_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "To-Do List",
                                "New Task",
                                "Add Task",
                                "Unordered list",
                                "Delete",
                                "Yes, using a flexbox layout",
                                "It has a distinct background color",
                                "Task added!",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" positioned at the top of the form.\n- Display an input field for the username with a placeholder \"Username\" and an input field for the email with a placeholder \"Email Address\".\n- Include a password input field with a placeholder \"Password\" that masks user input.\n- Provide a radio button group with two options labeled \"Male\" and \"Female\" positioned immediately below the input fields.\n- Implement a single submit button at the bottom of the form labeled \"Create Account\" and styled with a background color of green.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Add a <p> element below the form that displays the message \"Registration Successful\" when the form is submitted with all fields filled.\n- Ensure basic front-end validation such that none of the input fields (username, email, and password) are empty upon submission.",
            "task_id": "001129",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the form?",
                "Which placeholders are shown in the input fields?",
                "How many gender options are provided in the radio button group?",
                "What are the labels for the radio button options?",
                "What is the text on the submit button at the bottom of the form?",
                "What background color is applied to the submit button?",
                "Where is the 'Registration Successful' message displayed upon submission?",
                "How is the form positioned on the page?"
            ],
            "VQA_answers": [
                "Register Now",
                "Username, Email Address, and Password",
                "2",
                "Male and Female",
                "Create Account",
                "Green",
                "Below the form",
                "It is centered vertically and horizontally using Flexbox"
            ],
            "raw_output_metric": [
                "Register Now",
                "Username",
                "Email Address",
                "Password",
                "Male",
                "Female",
                "Create Account",
                "Registration Successful",
                "display: 'flex'"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001129_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" positioned at the top of the form.\n- Display an input field for the username with a placeholder \"Username\" and an input field for the email with a placeholder \"Email Address\".\n- Include a password input field with a placeholder \"Password\" that masks user input.\n- Provide a radio button group with two options labeled \"Male\" and \"Female\" positioned immediately below the input fields.\n- Implement a single submit button at the bottom of the form labeled \"Create Account\" and styled with a background color of green.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Add a <p> element below the form that displays the message \"Registration Successful\" when the form is submitted with all fields filled.\n- Ensure basic front-end validation such that none of the input fields (username, email, and password) are empty upon submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001129_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Register Now",
                                "Username",
                                "Email Address",
                                "Password",
                                "Male",
                                "Female",
                                "Create Account",
                                "Registration Successful",
                                "display: 'flex'"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001129_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001129_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the form?",
                                "Which placeholders are shown in the input fields?",
                                "How many gender options are provided in the radio button group?",
                                "What are the labels for the radio button options?",
                                "What is the text on the submit button at the bottom of the form?",
                                "What background color is applied to the submit button?",
                                "Where is the 'Registration Successful' message displayed upon submission?",
                                "How is the form positioned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001129_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Register Now",
                                "Username, Email Address, and Password",
                                "2",
                                "Male and Female",
                                "Create Account",
                                "Green",
                                "Below the form",
                                "It is centered vertically and horizontally using Flexbox"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Reserve Your Table\" at the top of the form.\n- Display a text input field with a placeholder stating \"Enter your full name\" for the user's name.\n- Provide a phone number input field with a placeholder \"Enter your phone number\".\n- Incorporate a date input element with a label \"Reservation Date\" and a time input element with a label \"Reservation Time\".\n- Add a select dropdown for party size with a default option \"Select number of guests\" and options ranging from 1 to 10.\n- Use a flexbox layout to center the form vertically and horizontally on the page.\n- Include exactly two buttons at the bottom of the form labeled \"Book Now\" and \"Cancel\", ensuring the \"Book Now\" button has a background color of green.\n- Implement a <p> element to display the message \"Reservation confirmed!\" below the form when the \"Book Now\" button is clicked, and include simple validation to ensure all input fields are filled before submission.",
            "task_id": "001130",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the form?",
                "What placeholder text is shown in the user's name input field?",
                "What placeholder text is shown in the phone number input field?",
                "What label appears above the date input element?",
                "What label appears above the time input element?",
                "What is the default option text in the party size dropdown?",
                "How many options are provided in the party size dropdown?",
                "How many buttons are located at the bottom of the form?",
                "What are the labels on the two buttons?",
                "What message is displayed below the form upon clicking the Book Now button when the submission is successful?"
            ],
            "VQA_answers": [
                "Reserve Your Table",
                "Enter your full name",
                "Enter your phone number",
                "Reservation Date",
                "Reservation Time",
                "Select number of guests",
                "10",
                "2",
                "Book Now and Cancel",
                "Reservation confirmed!"
            ],
            "raw_output_metric": [
                "Reserve Your Table",
                "Enter your full name",
                "Enter your phone number",
                "Reservation Date",
                "Reservation Time",
                "Select number of guests",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "Book Now",
                "Cancel",
                "Reservation confirmed!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001130_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Reserve Your Table\" at the top of the form.\n- Display a text input field with a placeholder stating \"Enter your full name\" for the user's name.\n- Provide a phone number input field with a placeholder \"Enter your phone number\".\n- Incorporate a date input element with a label \"Reservation Date\" and a time input element with a label \"Reservation Time\".\n- Add a select dropdown for party size with a default option \"Select number of guests\" and options ranging from 1 to 10.\n- Use a flexbox layout to center the form vertically and horizontally on the page.\n- Include exactly two buttons at the bottom of the form labeled \"Book Now\" and \"Cancel\", ensuring the \"Book Now\" button has a background color of green.\n- Implement a <p> element to display the message \"Reservation confirmed!\" below the form when the \"Book Now\" button is clicked, and include simple validation to ensure all input fields are filled before submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001130_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Reserve Your Table",
                                "Enter your full name",
                                "Enter your phone number",
                                "Reservation Date",
                                "Reservation Time",
                                "Select number of guests",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9",
                                "10",
                                "Book Now",
                                "Cancel",
                                "Reservation confirmed!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001130_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001130_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the form?",
                                "What placeholder text is shown in the user's name input field?",
                                "What placeholder text is shown in the phone number input field?",
                                "What label appears above the date input element?",
                                "What label appears above the time input element?",
                                "What is the default option text in the party size dropdown?",
                                "How many options are provided in the party size dropdown?",
                                "How many buttons are located at the bottom of the form?",
                                "What are the labels on the two buttons?",
                                "What message is displayed below the form upon clicking the Book Now button when the submission is successful?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001130_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Reserve Your Table",
                                "Enter your full name",
                                "Enter your phone number",
                                "Reservation Date",
                                "Reservation Time",
                                "Select number of guests",
                                "10",
                                "2",
                                "Book Now and Cancel",
                                "Reservation confirmed!"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a product survey form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Product Survey\".\n- Display a form that is centered both vertically and horizontally on the page using a flexbox layout.\n- Implement a radio button group for rating the product with exactly 5 options labeled from 1 to 5.\n- Include a text input field with a placeholder \"Your Email\" to collect the user's contact.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Clear\".\n- Ensure the \"Submit\" button is styled with a background color of green.\n- Add a <div> element below the form that displays a message \"Thank you for your feedback!\" when the \"Submit\" button is clicked.\n- Implement basic validation to ensure that a rating is selected and the email field is not empty before submission.\n- Use inline style objects within the React component to style all elements explicitly.\n- Include a <p> element adjacent to the email input to display an error message in red if validation fails.",
            "task_id": "001131",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text of the centered header?",
                "How is the form positioned on the page?",
                "How many rating options are available for the product rating?",
                "What labels are used for the product rating options?",
                "What placeholder is shown in the email input field?",
                "What buttons appear at the bottom of the form?",
                "What is the background color of the 'Submit' button?",
                "What message is displayed below the form upon submission?",
                "How is the validation error message displayed next to the email input?"
            ],
            "VQA_answers": [
                "Product Survey",
                "Centered vertically and horizontally using a flexbox layout",
                "5",
                "1, 2, 3, 4, 5",
                "Your Email",
                "Submit and Clear",
                "Green",
                "Thank you for your feedback!",
                "In red"
            ],
            "raw_output_metric": [
                "Product Survey",
                "Your Email",
                "1",
                "2",
                "3",
                "4",
                "5",
                "Submit",
                "Clear",
                "Thank you for your feedback!",
                "green",
                "red"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001131_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a product survey form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Product Survey\".\n- Display a form that is centered both vertically and horizontally on the page using a flexbox layout.\n- Implement a radio button group for rating the product with exactly 5 options labeled from 1 to 5.\n- Include a text input field with a placeholder \"Your Email\" to collect the user's contact.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Clear\".\n- Ensure the \"Submit\" button is styled with a background color of green.\n- Add a <div> element below the form that displays a message \"Thank you for your feedback!\" when the \"Submit\" button is clicked.\n- Implement basic validation to ensure that a rating is selected and the email field is not empty before submission.\n- Use inline style objects within the React component to style all elements explicitly.\n- Include a <p> element adjacent to the email input to display an error message in red if validation fails."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001131_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Survey",
                                "Your Email",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "Submit",
                                "Clear",
                                "Thank you for your feedback!",
                                "green",
                                "red"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001131_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001131_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the centered header?",
                                "How is the form positioned on the page?",
                                "How many rating options are available for the product rating?",
                                "What labels are used for the product rating options?",
                                "What placeholder is shown in the email input field?",
                                "What buttons appear at the bottom of the form?",
                                "What is the background color of the 'Submit' button?",
                                "What message is displayed below the form upon submission?",
                                "How is the validation error message displayed next to the email input?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001131_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Product Survey",
                                "Centered vertically and horizontally using a flexbox layout",
                                "5",
                                "1, 2, 3, 4, 5",
                                "Your Email",
                                "Submit and Clear",
                                "Green",
                                "Thank you for your feedback!",
                                "In red"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a daily planner interface.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Daily Planner\".\n- Include a text input field with the placeholder \"Task Title\" above the task list.\n- Create an unordered list element that dynamically displays added tasks, each with a bold title and regular description.\n- Add a textarea element below the list with a placeholder \"Task Details\" that spans exactly 4 rows.\n- Provide exactly three buttons beneath the textarea labeled \"Add Task\", \"Clear All\", and \"Mark Completed\".\n- Ensure the \"Add Task\" button has a green background color.\n- Use a flexbox layout to center the component horizontally and vertically on the page.\n- Implement validation to prevent adding tasks when the task title input is empty.\n- When the \"Mark Completed\" button is clicked, apply a strike-through style to all the task items.\n- Position the input field and buttons in a vertical stack to clearly separate each section of the planner.",
            "task_id": "001132",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What text is displayed in the header at the top of the planner?",
                "What is the placeholder text in the text input field above the task list?",
                "How are the task items visually displayed in terms of styling for the title and description?",
                "What type of list is used to display the added tasks?",
                "What is the placeholder text in the textarea located below the task list?",
                "How many rows does the textarea span?",
                "How many buttons are displayed beneath the textarea?",
                "What labels appear on the buttons beneath the textarea?",
                "What is the background color of the Add Task button?",
                "How is the overall component aligned on the page?"
            ],
            "VQA_answers": [
                "Daily Planner",
                "Task Title",
                "Each task shows a bold title and a regular description",
                "An unordered list",
                "Task Details",
                "4",
                "Three",
                "Add Task, Clear All, Mark Completed",
                "Green",
                "Centered horizontally and vertically using a flexbox layout"
            ],
            "raw_output_metric": [
                "Daily Planner",
                "Task Title",
                "Task Details",
                "Add Task",
                "Clear All",
                "Mark Completed",
                "rows",
                "4",
                "backgroundColor",
                "green",
                "textDecoration",
                "line-through",
                "display",
                "flex"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001132_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a daily planner interface.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Daily Planner\".\n- Include a text input field with the placeholder \"Task Title\" above the task list.\n- Create an unordered list element that dynamically displays added tasks, each with a bold title and regular description.\n- Add a textarea element below the list with a placeholder \"Task Details\" that spans exactly 4 rows.\n- Provide exactly three buttons beneath the textarea labeled \"Add Task\", \"Clear All\", and \"Mark Completed\".\n- Ensure the \"Add Task\" button has a green background color.\n- Use a flexbox layout to center the component horizontally and vertically on the page.\n- Implement validation to prevent adding tasks when the task title input is empty.\n- When the \"Mark Completed\" button is clicked, apply a strike-through style to all the task items.\n- Position the input field and buttons in a vertical stack to clearly separate each section of the planner."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001132_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Planner",
                                "Task Title",
                                "Task Details",
                                "Add Task",
                                "Clear All",
                                "Mark Completed",
                                "rows",
                                "4",
                                "backgroundColor",
                                "green",
                                "textDecoration",
                                "line-through",
                                "display",
                                "flex"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001132_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001132_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the header at the top of the planner?",
                                "What is the placeholder text in the text input field above the task list?",
                                "How are the task items visually displayed in terms of styling for the title and description?",
                                "What type of list is used to display the added tasks?",
                                "What is the placeholder text in the textarea located below the task list?",
                                "How many rows does the textarea span?",
                                "How many buttons are displayed beneath the textarea?",
                                "What labels appear on the buttons beneath the textarea?",
                                "What is the background color of the Add Task button?",
                                "How is the overall component aligned on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001132_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Planner",
                                "Task Title",
                                "Each task shows a bold title and a regular description",
                                "An unordered list",
                                "Task Details",
                                "4",
                                "Three",
                                "Add Task, Clear All, Mark Completed",
                                "Green",
                                "Centered horizontally and vertically using a flexbox layout"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a travel booking form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Flight Booking\".\n- Render a labeled text input field for \"Departure City\" with a placeholder \"Enter departure city\".\n- Render a labeled text input field for \"Arrival City\" with a placeholder \"Enter destination city\".\n- Include a date input element labeled \"Travel Date\" that accepts valid future dates only.\n- Position two checkboxes side-by-side labeled \"Direct Flight\" and \"Economy Class\" within the form.\n- Provide a button at the bottom labeled \"Book Now\" styled with a green background and white text.\n- Use a flexbox layout to center the form both vertically and horizontally within a fixed-width card container.",
            "task_id": "001133",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed at the top of the form?",
                "Which label is associated with the first text input field?",
                "What placeholder is shown for the Departure City input?",
                "Which label is associated with the second text input field?",
                "What placeholder is shown for the Arrival City input?",
                "What label appears next to the date input element?",
                "What are the labels of the two checkboxes positioned side-by-side?",
                "What text is displayed on the booking button?",
                "What are the visual styling details of the booking button?",
                "How is the form positioned within the container?"
            ],
            "VQA_answers": [
                "Flight Booking",
                "Departure City",
                "Enter departure city",
                "Arrival City",
                "Enter destination city",
                "Travel Date",
                "Direct Flight and Economy Class",
                "Book Now",
                "Green background with white text",
                "Centered both vertically and horizontally using flexbox in a fixed-width card container"
            ],
            "raw_output_metric": [
                "Flight Booking",
                "Departure City",
                "Enter departure city",
                "Arrival City",
                "Enter destination city",
                "Travel Date",
                "Direct Flight",
                "Economy Class",
                "Book Now",
                "green",
                "white",
                "flexbox",
                "card"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001133_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a travel booking form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Flight Booking\".\n- Render a labeled text input field for \"Departure City\" with a placeholder \"Enter departure city\".\n- Render a labeled text input field for \"Arrival City\" with a placeholder \"Enter destination city\".\n- Include a date input element labeled \"Travel Date\" that accepts valid future dates only.\n- Position two checkboxes side-by-side labeled \"Direct Flight\" and \"Economy Class\" within the form.\n- Provide a button at the bottom labeled \"Book Now\" styled with a green background and white text.\n- Use a flexbox layout to center the form both vertically and horizontally within a fixed-width card container."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001133_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Flight Booking",
                                "Departure City",
                                "Enter departure city",
                                "Arrival City",
                                "Enter destination city",
                                "Travel Date",
                                "Direct Flight",
                                "Economy Class",
                                "Book Now",
                                "green",
                                "white",
                                "flexbox",
                                "card"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001133_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001133_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the form?",
                                "Which label is associated with the first text input field?",
                                "What placeholder is shown for the Departure City input?",
                                "Which label is associated with the second text input field?",
                                "What placeholder is shown for the Arrival City input?",
                                "What label appears next to the date input element?",
                                "What are the labels of the two checkboxes positioned side-by-side?",
                                "What text is displayed on the booking button?",
                                "What are the visual styling details of the booking button?",
                                "How is the form positioned within the container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001133_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Flight Booking",
                                "Departure City",
                                "Enter departure city",
                                "Arrival City",
                                "Enter destination city",
                                "Travel Date",
                                "Direct Flight and Economy Class",
                                "Book Now",
                                "Green background with white text",
                                "Centered both vertically and horizontally using flexbox in a fixed-width card container"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription module.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Newsletter Subscription\".\n- Display an email input field with a placeholder of \"Enter your email address\".\n- Provide a button labeled \"Subscribe\" styled with a background color of green.\n- Use a flexbox layout to center the subscription module both vertically and horizontally on the page.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" immediately after the button is clicked.\n- Add basic validation to ensure the email input is not empty and contains an \"@\" symbol before allowing submission.\n- Wrap the entire component in a <div> with a fixed width of 400px and a light gray border.",
            "task_id": "001134",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What text is displayed in the centered main header?",
                "What is the placeholder text in the email input field?",
                "What text appears on the subscription button?",
                "What is the background color of the subscription button?",
                "What message is shown immediately after the button is clicked?",
                "What is the fixed width of the outer container?",
                "What style is used for the border of the container?"
            ],
            "VQA_answers": [
                "Newsletter Subscription",
                "Enter your email address",
                "Subscribe",
                "Green",
                "Thank you for subscribing!",
                "400px",
                "Light gray"
            ],
            "raw_output_metric": [
                "Newsletter Subscription",
                "Enter your email address",
                "Subscribe",
                "Thank you for subscribing!",
                "400px",
                "green",
                "lightgray"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001134_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription module.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Newsletter Subscription\".\n- Display an email input field with a placeholder of \"Enter your email address\".\n- Provide a button labeled \"Subscribe\" styled with a background color of green.\n- Use a flexbox layout to center the subscription module both vertically and horizontally on the page.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" immediately after the button is clicked.\n- Add basic validation to ensure the email input is not empty and contains an \"@\" symbol before allowing submission.\n- Wrap the entire component in a <div> with a fixed width of 400px and a light gray border."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001134_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Subscription",
                                "Enter your email address",
                                "Subscribe",
                                "Thank you for subscribing!",
                                "400px",
                                "green",
                                "lightgray"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001134_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001134_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the centered main header?",
                                "What is the placeholder text in the email input field?",
                                "What text appears on the subscription button?",
                                "What is the background color of the subscription button?",
                                "What message is shown immediately after the button is clicked?",
                                "What is the fixed width of the outer container?",
                                "What style is used for the border of the container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001134_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Subscription",
                                "Enter your email address",
                                "Subscribe",
                                "Green",
                                "Thank you for subscribing!",
                                "400px",
                                "Light gray"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header with an <h1> element displaying \"Subscribe to Our Newsletter\".\n- Create an input field for an email address with a placeholder \"Enter your email\", styled with a solid border and padding.\n- Add a checkbox labeled \"I agree to the terms and conditions\" positioned just below the email input.\n- Provide a centered button labeled \"Subscribe\" that has a green background color.\n- Use a flexbox layout to arrange the form vertically and ensure it is centered both horizontally and vertically on the page.\n- Display a <div> element beneath the button to show an error message in red if the email is invalid or the checkbox is unchecked when the \"Subscribe\" button is clicked.\n- Include simple validation that checks the email input follows a standard email format and that the checkbox is ticked before submission.",
            "task_id": "001135",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "What placeholder text is shown in the email input?",
                "What styling is applied to the email input field?",
                "What label is displayed under the email input?",
                "What is the background color of the subscribe button?",
                "How is the form layout arranged?",
                "What visual indicator appears when validation fails?"
            ],
            "VQA_answers": [
                "Subscribe to Our Newsletter",
                "Enter your email",
                "Solid border with padding",
                "I agree to the terms and conditions",
                "Green",
                "Vertically centered using a flexbox layout",
                "An error message in red is displayed below the button"
            ],
            "raw_output_metric": [
                "Subscribe to Our Newsletter",
                "Enter your email",
                "I agree to the terms and conditions",
                "Subscribe"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001135_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header with an <h1> element displaying \"Subscribe to Our Newsletter\".\n- Create an input field for an email address with a placeholder \"Enter your email\", styled with a solid border and padding.\n- Add a checkbox labeled \"I agree to the terms and conditions\" positioned just below the email input.\n- Provide a centered button labeled \"Subscribe\" that has a green background color.\n- Use a flexbox layout to arrange the form vertically and ensure it is centered both horizontally and vertically on the page.\n- Display a <div> element beneath the button to show an error message in red if the email is invalid or the checkbox is unchecked when the \"Subscribe\" button is clicked.\n- Include simple validation that checks the email input follows a standard email format and that the checkbox is ticked before submission."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001135_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "Enter your email",
                                "I agree to the terms and conditions",
                                "Subscribe"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001135_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001135_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "What placeholder text is shown in the email input?",
                                "What styling is applied to the email input field?",
                                "What label is displayed under the email input?",
                                "What is the background color of the subscribe button?",
                                "How is the form layout arranged?",
                                "What visual indicator appears when validation fails?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001135_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "Enter your email",
                                "Solid border with padding",
                                "I agree to the terms and conditions",
                                "Green",
                                "Vertically centered using a flexbox layout",
                                "An error message in red is displayed below the button"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Display a centered header using an <h3> element with the text \"Subscribe to Our Newsletter\".\n- Include an input field of type \"email\" with a placeholder \"Enter your email\" positioned above the form.\n- Render a submit button labeled \"Subscribe Now\" styled with a white background and red text.\n- Arrange the input field and submit button next to each other using a flexbox layout.\n- Apply a container with a maximum width and centered horizontally on the page using margin auto.\n- Implement a <p> element that appears below the form showing the message \"Thank you for subscribing!\" after the form is successfully submitted.\n- Validate the form so that submission only occurs if the email input is not empty and contains an \"@\" symbol.",
            "task_id": "001136",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the header text displayed on the page?",
                "Which HTML element is used to present the header text?",
                "What placeholder text is shown in the email input field?",
                "How are the email input field and submit button arranged?",
                "What label is displayed on the submit button?",
                "What are the background and text colors of the submit button?",
                "How is the container styled in terms of alignment?",
                "What message appears below the form after a successful submission?"
            ],
            "VQA_answers": [
                "Subscribe to Our Newsletter",
                "h3",
                "Enter your email",
                "They are placed next to each other using a flexbox layout",
                "Subscribe Now",
                "White background and red text",
                "It has a maximum width and is centered horizontally using margin auto",
                "Thank you for subscribing!"
            ],
            "raw_output_metric": [
                "Subscribe to Our Newsletter",
                "Enter your email",
                "Subscribe Now",
                "Thank you for subscribing!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001136_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Display a centered header using an <h3> element with the text \"Subscribe to Our Newsletter\".\n- Include an input field of type \"email\" with a placeholder \"Enter your email\" positioned above the form.\n- Render a submit button labeled \"Subscribe Now\" styled with a white background and red text.\n- Arrange the input field and submit button next to each other using a flexbox layout.\n- Apply a container with a maximum width and centered horizontally on the page using margin auto.\n- Implement a <p> element that appears below the form showing the message \"Thank you for subscribing!\" after the form is successfully submitted.\n- Validate the form so that submission only occurs if the email input is not empty and contains an \"@\" symbol."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001136_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "Enter your email",
                                "Subscribe Now",
                                "Thank you for subscribing!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001136_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001136_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed on the page?",
                                "Which HTML element is used to present the header text?",
                                "What placeholder text is shown in the email input field?",
                                "How are the email input field and submit button arranged?",
                                "What label is displayed on the submit button?",
                                "What are the background and text colors of the submit button?",
                                "How is the container styled in terms of alignment?",
                                "What message appears below the form after a successful submission?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001136_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Subscribe to Our Newsletter",
                                "h3",
                                "Enter your email",
                                "They are placed next to each other using a flexbox layout",
                                "Subscribe Now",
                                "White background and red text",
                                "It has a maximum width and is centered horizontally using margin auto",
                                "Thank you for subscribing!"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display a required email input field with a placeholder \"Enter your email address\".\n- Provide a required text input field for the user's first name with a placeholder \"Your First Name\".\n- Wrap the form elements inside a <section> element with a background color of #f7f7f7.\n- Arrange the form using a flex container that centers the content vertically and horizontally on the page.\n- Include a button labeled \"Subscribe\" placed directly below the input fields.\n- Style the \"Subscribe\" button with a background color of green and white text.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" after the button is clicked.\n- Validate that neither the email input field nor the first name input field is empty before displaying the message.",
            "task_id": "001137",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "What placeholder text is shown in the email input field?",
                "What placeholder text is shown in the first name input field?",
                "What is the background color of the section containing the form?",
                "How are the form elements arranged on the page?",
                "What text is displayed on the subscription button?",
                "What are the visual styles applied to the Subscribe button?",
                "What message appears after clicking the Subscribe button?"
            ],
            "VQA_answers": [
                "Newsletter Signup",
                "Enter your email address",
                "Your First Name",
                "#f7f7f7",
                "Centered both vertically and horizontally using a flex container",
                "Subscribe",
                "Green background with white text",
                "Thank you for subscribing!"
            ],
            "raw_output_metric": [
                "Newsletter Signup",
                "Enter your email address",
                "Your First Name",
                "#f7f7f7",
                "Subscribe",
                "green",
                "white",
                "Thank you for subscribing!"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001137_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display a required email input field with a placeholder \"Enter your email address\".\n- Provide a required text input field for the user's first name with a placeholder \"Your First Name\".\n- Wrap the form elements inside a <section> element with a background color of #f7f7f7.\n- Arrange the form using a flex container that centers the content vertically and horizontally on the page.\n- Include a button labeled \"Subscribe\" placed directly below the input fields.\n- Style the \"Subscribe\" button with a background color of green and white text.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" after the button is clicked.\n- Validate that neither the email input field nor the first name input field is empty before displaying the message."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001137_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email address",
                                "Your First Name",
                                "#f7f7f7",
                                "Subscribe",
                                "green",
                                "white",
                                "Thank you for subscribing!"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001137_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001137_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "What placeholder text is shown in the email input field?",
                                "What placeholder text is shown in the first name input field?",
                                "What is the background color of the section containing the form?",
                                "How are the form elements arranged on the page?",
                                "What text is displayed on the subscription button?",
                                "What are the visual styles applied to the Subscribe button?",
                                "What message appears after clicking the Subscribe button?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001137_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Newsletter Signup",
                                "Enter your email address",
                                "Your First Name",
                                "#f7f7f7",
                                "Centered both vertically and horizontally using a flex container",
                                "Subscribe",
                                "Green background with white text",
                                "Thank you for subscribing!"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a job application form.\n\nFeature Requirements:\n- Include a header using an <h1> element with the text \"Job Application\".\n- Create text input fields for \"Full Name\", \"Email\", and \"Phone Number\", each with an appropriate placeholder.\n- Add a dropdown menu labeled \"Position Applied For\" that includes three specific job title options.\n- Provide a textarea element titled \"Cover Letter\" that spans exactly 4 rows.\n- Include a submit button labeled \"Apply\" with a dark green background color.\n- Insert a reset button labeled \"Clear\" positioned to the right of the submit button.\n- Arrange all form elements within a div that utilizes a grid layout with two columns.\n- Implement validation to ensure all fields are filled in and that the email input contains an \"@\" symbol.\n- Add a <div> element at the bottom to display a confirmation message once the form is successfully submitted.",
            "task_id": "001138",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What text is displayed in the header at the top of the form?",
                "Which text input fields are visible in the form?",
                "What placeholder texts appear in the text input fields?",
                "How many options are provided in the dropdown menu for the job position?",
                "What label is associated with the dropdown menu?",
                "What is the visible label and size detail of the cover letter field?",
                "What labels are shown on the form action buttons?",
                "What distinctive styling detail is applied to the 'Apply' button?",
                "How are the form elements visually arranged on the page?",
                "Where is the confirmation message displayed upon successful submission?"
            ],
            "VQA_answers": [
                "Job Application",
                "Full Name, Email, Phone Number",
                "Full Name, Email, Phone Number",
                "3",
                "Position Applied For",
                "Cover Letter (textarea with 4 rows)",
                "Apply and Clear",
                "Dark green background",
                "In a grid layout with two columns",
                "At the bottom of the form"
            ],
            "raw_output_metric": [
                "Job Application",
                "Full Name",
                "Email",
                "Phone Number",
                "Position Applied For",
                "Cover Letter",
                "Apply",
                "Clear",
                "rows=\"4\"",
                "dark green",
                "grid",
                "confirmation message",
                "@"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001138_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a job application form.\n\nFeature Requirements:\n- Include a header using an <h1> element with the text \"Job Application\".\n- Create text input fields for \"Full Name\", \"Email\", and \"Phone Number\", each with an appropriate placeholder.\n- Add a dropdown menu labeled \"Position Applied For\" that includes three specific job title options.\n- Provide a textarea element titled \"Cover Letter\" that spans exactly 4 rows.\n- Include a submit button labeled \"Apply\" with a dark green background color.\n- Insert a reset button labeled \"Clear\" positioned to the right of the submit button.\n- Arrange all form elements within a div that utilizes a grid layout with two columns.\n- Implement validation to ensure all fields are filled in and that the email input contains an \"@\" symbol.\n- Add a <div> element at the bottom to display a confirmation message once the form is successfully submitted."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001138_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Job Application",
                                "Full Name",
                                "Email",
                                "Phone Number",
                                "Position Applied For",
                                "Cover Letter",
                                "Apply",
                                "Clear",
                                "rows=\"4\"",
                                "dark green",
                                "grid",
                                "confirmation message",
                                "@"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001138_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001138_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the header at the top of the form?",
                                "Which text input fields are visible in the form?",
                                "What placeholder texts appear in the text input fields?",
                                "How many options are provided in the dropdown menu for the job position?",
                                "What label is associated with the dropdown menu?",
                                "What is the visible label and size detail of the cover letter field?",
                                "What labels are shown on the form action buttons?",
                                "What distinctive styling detail is applied to the 'Apply' button?",
                                "How are the form elements visually arranged on the page?",
                                "Where is the confirmation message displayed upon successful submission?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001138_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Job Application",
                                "Full Name, Email, Phone Number",
                                "Full Name, Email, Phone Number",
                                "3",
                                "Position Applied For",
                                "Cover Letter (textarea with 4 rows)",
                                "Apply and Clear",
                                "Dark green background",
                                "In a grid layout with two columns",
                                "At the bottom of the form"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user login form with email and password input fields.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"User Login\".\n- Display an email input field with a placeholder \"Enter Email\" positioned at the beginning of the form.\n- Create a password input field with a placeholder \"Enter Password\" and ensure its type is set to \"password\".\n- Use a flexbox layout to arrange the form elements in a vertical column and center them horizontally on the page.\n- Add exactly two buttons below the input fields labeled \"Login\" and \"Clear\".\n- Style the \"Login\" button with a green background color and a 4-pixel border radius.\n- Implement a <div> element below the form that conditionally displays an error message when login validation fails.\n- Validate that both the email and password fields are not empty and that the email field contains an \"@\" symbol before enabling the \"Login\" button.",
            "task_id": "001139",
            "task_name": "Text to React",
            "input_type": "Text",
            "output_type": "React",
            "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
            "VQA_questions": [
                "What is the text shown in the main header?",
                "What placeholder text is displayed in the first input field?",
                "What placeholder text is given for the password input?",
                "What is the input type of the password field?",
                "How many buttons are displayed below the input fields?",
                "What labels are seen on the two buttons?",
                "What background color is applied to the Login button?",
                "What is the border radius of the Login button?",
                "How are the form elements arranged on the page?",
                "Where is the error message container located on the page?"
            ],
            "VQA_answers": [
                "User Login",
                "Enter Email",
                "Enter Password",
                "password",
                "2",
                "Login and Clear",
                "Green",
                "4 pixels",
                "Vertical column centered horizontally",
                "Below the form"
            ],
            "raw_output_metric": [
                "User Login",
                "Enter Email",
                "Enter Password",
                "Login",
                "Clear",
                "password",
                "flex",
                "column",
                "center",
                "green",
                "4px"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001139_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output React:\n\nTask:\nGenerate a React component that displays a user login form with email and password input fields.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"User Login\".\n- Display an email input field with a placeholder \"Enter Email\" positioned at the beginning of the form.\n- Create a password input field with a placeholder \"Enter Password\" and ensure its type is set to \"password\".\n- Use a flexbox layout to arrange the form elements in a vertical column and center them horizontally on the page.\n- Add exactly two buttons below the input fields labeled \"Login\" and \"Clear\".\n- Style the \"Login\" button with a green background color and a 4-pixel border radius.\n- Implement a <div> element below the form that conditionally displays an error message when login validation fails.\n- Validate that both the email and password fields are not empty and that the email field contains an \"@\" symbol before enabling the \"Login\" button."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001139_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Login",
                                "Enter Email",
                                "Enter Password",
                                "Login",
                                "Clear",
                                "password",
                                "flex",
                                "column",
                                "center",
                                "green",
                                "4px"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001139_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001139_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text shown in the main header?",
                                "What placeholder text is displayed in the first input field?",
                                "What placeholder text is given for the password input?",
                                "What is the input type of the password field?",
                                "How many buttons are displayed below the input fields?",
                                "What labels are seen on the two buttons?",
                                "What background color is applied to the Login button?",
                                "What is the border radius of the Login button?",
                                "How are the form elements arranged on the page?",
                                "Where is the error message container located on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001139_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "User Login",
                                "Enter Email",
                                "Enter Password",
                                "password",
                                "2",
                                "Login and Clear",
                                "Green",
                                "4 pixels",
                                "Vertical column centered horizontally",
                                "Below the form"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    }
]