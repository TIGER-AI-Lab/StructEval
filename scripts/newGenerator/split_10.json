[
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a festive recipe collection based on the given text description of seasonal dishes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <chef> element with the chef's name in text.\n- Each <dish> element must have a <prepTime> element with a positive integer representing preparation time in minutes.\n- Each <dish> element should include an <ingredients> element with a comma-separated list of ingredients.\n- Each <dish> element should contain a <cuisine> element with the cuisine type in text.\n- Ensure that the XML is properly structured with every opening tag having a corresponding closing tag",
            "task_id": "001710",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipes",
                "recipes[dish][name]",
                "recipes[dish][chef]",
                "recipes[dish][prepTime]",
                "recipes[dish][ingredients]",
                "recipes[dish][cuisine]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001710_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a festive recipe collection based on the given text description of seasonal dishes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <chef> element with the chef's name in text.\n- Each <dish> element must have a <prepTime> element with a positive integer representing preparation time in minutes.\n- Each <dish> element should include an <ingredients> element with a comma-separated list of ingredients.\n- Each <dish> element should contain a <cuisine> element with the cuisine type in text.\n- Ensure that the XML is properly structured with every opening tag having a corresponding closing tag"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001710_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipes",
                                "recipes[dish][name]",
                                "recipes[dish][chef]",
                                "recipes[dish][prepTime]",
                                "recipes[dish][ingredients]",
                                "recipes[dish][cuisine]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie repository based on a description of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, include at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in plain text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element should include a <releaseYear> element containing exactly four numeric characters representing the year of release.\n- Each <movie> element must have a <duration> element with an integer value denoting the movie's length in minutes.\n- Each <movie> element should also contain a <genre> element with the genre name in text.\n- Ensure that the <archive> element is properly closed after all <movie> elements.",
            "task_id": "001711",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "archive",
                "archive[movie]",
                "archive[movie][title]",
                "archive[movie][director]",
                "archive[movie][releaseYear]",
                "archive[movie][duration]",
                "archive[movie][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001711_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie repository based on a description of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, include at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in plain text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element should include a <releaseYear> element containing exactly four numeric characters representing the year of release.\n- Each <movie> element must have a <duration> element with an integer value denoting the movie's length in minutes.\n- Each <movie> element should also contain a <genre> element with the genre name in text.\n- Ensure that the <archive> element is properly closed after all <movie> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001711_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "archive",
                                "archive[movie]",
                                "archive[movie][title]",
                                "archive[movie][director]",
                                "archive[movie][releaseYear]",
                                "archive[movie][duration]",
                                "archive[movie][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a car dealership inventory based on the given input text description of various cars.\n\nFeature Requirements:\n- Include a root element named <inventory>.\n- Within the <inventory>, create at least 3 <car> elements.\n- Each <car> element should contain a <make> element with the manufacturer's name in text.\n- Each <car> element must include a <model> element with the model name in text.\n- Each <car> element should have a <year> element with exactly four numeric characters representing the manufacturing year.\n- Each <car> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <car> element should also include a <color> element with the color description in text.\n- Ensure that all elements are properly nested and closed within the XML structure.",
            "task_id": "001712",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "inventory",
                "inventory[car]",
                "inventory[car][make]",
                "inventory[car][model]",
                "inventory[car][year]",
                "inventory[car][price]",
                "inventory[car][color]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001712_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a car dealership inventory based on the given input text description of various cars.\n\nFeature Requirements:\n- Include a root element named <inventory>.\n- Within the <inventory>, create at least 3 <car> elements.\n- Each <car> element should contain a <make> element with the manufacturer's name in text.\n- Each <car> element must include a <model> element with the model name in text.\n- Each <car> element should have a <year> element with exactly four numeric characters representing the manufacturing year.\n- Each <car> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <car> element should also include a <color> element with the color description in text.\n- Ensure that all elements are properly nested and closed within the XML structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001712_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "inventory",
                                "inventory[car]",
                                "inventory[car][make]",
                                "inventory[car][model]",
                                "inventory[car][year]",
                                "inventory[car][price]",
                                "inventory[car][color]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on a text description of film showtimes and details.\n\nFeature Requirements:\n- The root element must be named <schedule>.\n- Include at least 3 <movie> elements as children of the <schedule>.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the movie's length in minutes.\n- Each <movie> element should have a <date> element with the release or screening date formatted as YYYY-MM-DD.\n- Every <movie> element must include a <rating> element with a numeric value formatted to one decimal place.\n- Ensure that the <schedule> root element is properly closed after all <movie> elements.",
            "task_id": "001713",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "schedule",
                "schedule[movie]",
                "schedule[movie][title]",
                "schedule[movie][director]",
                "schedule[movie][duration]",
                "schedule[movie][date]",
                "schedule[movie][rating]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001713_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on a text description of film showtimes and details.\n\nFeature Requirements:\n- The root element must be named <schedule>.\n- Include at least 3 <movie> elements as children of the <schedule>.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the movie's length in minutes.\n- Each <movie> element should have a <date> element with the release or screening date formatted as YYYY-MM-DD.\n- Every <movie> element must include a <rating> element with a numeric value formatted to one decimal place.\n- Ensure that the <schedule> root element is properly closed after all <movie> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001713_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "schedule",
                                "schedule[movie]",
                                "schedule[movie][title]",
                                "schedule[movie][director]",
                                "schedule[movie][duration]",
                                "schedule[movie][date]",
                                "schedule[movie][rating]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a summer music festival schedule with detailed information about each performance.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element must contain a <band> element with the name of the performing group.\n- Each <performance> element must include a <time> element formatted as HH:MM to represent the start time.\n- Each <performance> element should have a <stage> element indicating the stage name where the performance occurs.\n- Each <performance> element must contain a <duration> element with a numeric value representing the performance length in minutes.\n- Each <performance> element should include a <genre> element with the music genre of the performance.\n- Ensure the <festival> element is properly closed after listing all <performance> elements.",
            "task_id": "001714",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[performance]",
                "festival[performance][band]",
                "festival[performance][time]",
                "festival[performance][stage]",
                "festival[performance][duration]",
                "festival[performance][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001714_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a summer music festival schedule with detailed information about each performance.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element must contain a <band> element with the name of the performing group.\n- Each <performance> element must include a <time> element formatted as HH:MM to represent the start time.\n- Each <performance> element should have a <stage> element indicating the stage name where the performance occurs.\n- Each <performance> element must contain a <duration> element with a numeric value representing the performance length in minutes.\n- Each <performance> element should include a <genre> element with the music genre of the performance.\n- Ensure the <festival> element is properly closed after listing all <performance> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001714_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[performance]",
                                "festival[performance][band]",
                                "festival[performance][time]",
                                "festival[performance][stage]",
                                "festival[performance][duration]",
                                "festival[performance][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional restaurant guide based on a provided text description of various dining establishments.\n\nFeature Requirements:\n- Include a root element named <restaurants>.\n- Within the <restaurants>, have at least 3 <restaurant> elements.\n- Each <restaurant> element must contain a <name> element with the restaurant's name in text.\n- Each <restaurant> element should include a <cuisine> element specifying the type of food served.\n- Each <restaurant> element must have a <location> element that encloses two child elements: <city> and <state>, both containing text.\n- Each <restaurant> element must include a <rating> element with a numerical value formatted to one decimal place.\n- Each <restaurant> element should have a <priceRange> element containing a string of dollar signs (e.g., $, $$, $$$) indicating the price level.\n- The <restaurants> element should be properly closed after all <restaurant> elements.",
            "task_id": "001715",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "restaurants",
                "restaurants[restaurant]",
                "restaurants[restaurant][name]",
                "restaurants[restaurant][cuisine]",
                "restaurants[restaurant][location]",
                "restaurants[restaurant][location][city]",
                "restaurants[restaurant][location][state]",
                "restaurants[restaurant][rating]",
                "restaurants[restaurant][priceRange]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001715_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional restaurant guide based on a provided text description of various dining establishments.\n\nFeature Requirements:\n- Include a root element named <restaurants>.\n- Within the <restaurants>, have at least 3 <restaurant> elements.\n- Each <restaurant> element must contain a <name> element with the restaurant's name in text.\n- Each <restaurant> element should include a <cuisine> element specifying the type of food served.\n- Each <restaurant> element must have a <location> element that encloses two child elements: <city> and <state>, both containing text.\n- Each <restaurant> element must include a <rating> element with a numerical value formatted to one decimal place.\n- Each <restaurant> element should have a <priceRange> element containing a string of dollar signs (e.g., $, $$, $$$) indicating the price level.\n- The <restaurants> element should be properly closed after all <restaurant> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001715_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "restaurants",
                                "restaurants[restaurant]",
                                "restaurants[restaurant][name]",
                                "restaurants[restaurant][cuisine]",
                                "restaurants[restaurant][location]",
                                "restaurants[restaurant][location][city]",
                                "restaurants[restaurant][location][state]",
                                "restaurants[restaurant][rating]",
                                "restaurants[restaurant][priceRange]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on the given description of songs.\n\nFeature Requirements:\n- Include a root element named <playlist>.\n- Within <playlist>, create at least three <song> elements.\n- Each <song> element must have a <title> element containing the song title in plain text.\n- Each <song> element must contain an <artist> element with the artist's full name.\n- Each <song> element should include a <duration> element displaying the song length in the mm:ss format.\n- Each <song> element must include a <genre> element reflecting the music genre in text.\n- Optionally, each <song> element may include a <releaseYear> element with a four-digit numerical year.\n- Ensure that the XML structure is well-formed with all elements properly opened and closed.\n- Do not include any extra elements or attributes beyond those specified.",
            "task_id": "001716",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "playlist",
                "playlist[song]",
                "playlist[song][title]",
                "playlist[song][artist]",
                "playlist[song][duration]",
                "playlist[song][genre]",
                "playlist[song][releaseYear]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001716_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on the given description of songs.\n\nFeature Requirements:\n- Include a root element named <playlist>.\n- Within <playlist>, create at least three <song> elements.\n- Each <song> element must have a <title> element containing the song title in plain text.\n- Each <song> element must contain an <artist> element with the artist's full name.\n- Each <song> element should include a <duration> element displaying the song length in the mm:ss format.\n- Each <song> element must include a <genre> element reflecting the music genre in text.\n- Optionally, each <song> element may include a <releaseYear> element with a four-digit numerical year.\n- Ensure that the XML structure is well-formed with all elements properly opened and closed.\n- Do not include any extra elements or attributes beyond those specified."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001716_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "playlist",
                                "playlist[song]",
                                "playlist[song][title]",
                                "playlist[song][artist]",
                                "playlist[song][duration]",
                                "playlist[song][genre]",
                                "playlist[song][releaseYear]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of an animal shelter listing available pets for adoption based on the provided text description.\n\nFeature Requirements:\n- The root element must be <shelter>.\n- Within the <shelter>, include at least 3 <pet> elements.\n- Each <pet> element must have a <name> element containing the pet’s name in text.\n- Each <pet> element must include a <species> element indicating the type of animal (e.g., dog, cat, rabbit) in text.\n- Each <pet> element should contain a <breed> element specifying the pet's breed in text.\n- Each <pet> element must have an <age> element with an integer value representing the pet's age in years.\n- Each <pet> element must include an <adoptionFee> element with a numerical value formatted to two decimal places.\n- The XML structure must include proper opening and closing tags for every element.",
            "task_id": "001717",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "shelter",
                "shelter[pet]",
                "shelter[pet][name]",
                "shelter[pet][species]",
                "shelter[pet][breed]",
                "shelter[pet][age]",
                "shelter[pet][adoptionFee]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001717_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of an animal shelter listing available pets for adoption based on the provided text description.\n\nFeature Requirements:\n- The root element must be <shelter>.\n- Within the <shelter>, include at least 3 <pet> elements.\n- Each <pet> element must have a <name> element containing the pet’s name in text.\n- Each <pet> element must include a <species> element indicating the type of animal (e.g., dog, cat, rabbit) in text.\n- Each <pet> element should contain a <breed> element specifying the pet's breed in text.\n- Each <pet> element must have an <age> element with an integer value representing the pet's age in years.\n- Each <pet> element must include an <adoptionFee> element with a numerical value formatted to two decimal places.\n- The XML structure must include proper opening and closing tags for every element."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001717_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "shelter",
                                "shelter[pet]",
                                "shelter[pet][name]",
                                "shelter[pet][species]",
                                "shelter[pet][breed]",
                                "shelter[pet][age]",
                                "shelter[pet][adoptionFee]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a brief text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish's title.\n- Each <dish> element must include a <description> element with a brief textual description.\n- Each <dish> element must have a <price> element displaying a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element that specifies if the dish is an appetizer, main course, or dessert.\n- Include a <lastUpdated> element within the <menu> that contains a date in YYYY-MM-DD format.\n- Ensure all XML elements are properly opened and closed.",
            "task_id": "001718",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][description]",
                "menu[dish][price]",
                "menu[dish][category]",
                "menu[lastUpdated]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001718_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a brief text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish's title.\n- Each <dish> element must include a <description> element with a brief textual description.\n- Each <dish> element must have a <price> element displaying a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element that specifies if the dish is an appetizer, main course, or dessert.\n- Include a <lastUpdated> element within the <menu> that contains a date in YYYY-MM-DD format.\n- Ensure all XML elements are properly opened and closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001718_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][description]",
                                "menu[dish][price]",
                                "menu[dish][category]",
                                "menu[lastUpdated]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie archive based on the provided text synopsis of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, have at least 3 <film> elements.\n- Each <film> element should contain a <name> element with the film's title in text.\n- Each <film> element should include a <director> element with the director's full name in text.\n- Each <film> element must have a <year> element with a four-digit numerical value representing the release year.\n- Ensure each <film> element includes a <duration> element displaying the film's length in minutes as an integer.\n- Each <film> element should feature a <rating> element with a numerical value formatted to one decimal place.\n- The <archive> element should be properly closed after all <film> elements.",
            "task_id": "001719",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "archive",
                "archive[film]",
                "archive[film][name]",
                "archive[film][director]",
                "archive[film][year]",
                "archive[film][duration]",
                "archive[film][rating]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001719_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie archive based on the provided text synopsis of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, have at least 3 <film> elements.\n- Each <film> element should contain a <name> element with the film's title in text.\n- Each <film> element should include a <director> element with the director's full name in text.\n- Each <film> element must have a <year> element with a four-digit numerical value representing the release year.\n- Ensure each <film> element includes a <duration> element displaying the film's length in minutes as an integer.\n- Each <film> element should feature a <rating> element with a numerical value formatted to one decimal place.\n- The <archive> element should be properly closed after all <film> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001719_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "archive",
                                "archive[film]",
                                "archive[film][name]",
                                "archive[film][director]",
                                "archive[film][year]",
                                "archive[film][duration]",
                                "archive[film][rating]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a zoo animal exhibit guide based on the given input text description of animals.\n\nFeature Requirements:\n- Include a root element named <zoo>.\n- Within the <zoo>, have exactly 3 <exhibit> elements.\n- Each <exhibit> element should include an <animalName> element containing the animal's name in text.\n- Each <exhibit> element must include a <species> element with the species name in text.\n- Each <exhibit> element should have an <age> element with the animal's age as a whole number.\n- Ensure each <exhibit> element includes a <dateAcquired> element formatted as YYYY-MM-DD.\n- Each <exhibit> element must include a <habitat> element with text describing the animal's living environment.\n- The <zoo> element must be properly closed after all the <exhibit> elements.",
            "task_id": "001720",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "zoo",
                "zoo[exhibit]",
                "zoo[exhibit][animalName]",
                "zoo[exhibit][species]",
                "zoo[exhibit][age]",
                "zoo[exhibit][dateAcquired]",
                "zoo[exhibit][habitat]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001720_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a zoo animal exhibit guide based on the given input text description of animals.\n\nFeature Requirements:\n- Include a root element named <zoo>.\n- Within the <zoo>, have exactly 3 <exhibit> elements.\n- Each <exhibit> element should include an <animalName> element containing the animal's name in text.\n- Each <exhibit> element must include a <species> element with the species name in text.\n- Each <exhibit> element should have an <age> element with the animal's age as a whole number.\n- Ensure each <exhibit> element includes a <dateAcquired> element formatted as YYYY-MM-DD.\n- Each <exhibit> element must include a <habitat> element with text describing the animal's living environment.\n- The <zoo> element must be properly closed after all the <exhibit> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001720_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "zoo",
                                "zoo[exhibit]",
                                "zoo[exhibit][animalName]",
                                "zoo[exhibit][species]",
                                "zoo[exhibit][age]",
                                "zoo[exhibit][dateAcquired]",
                                "zoo[exhibit][habitat]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital museum tour guide for an art exhibition.\n\nFeature Requirements:\n- The XML must have a root element named <tourGuide> with an attribute \"city\" set to a textual value.\n- Within the <tourGuide>, include at least 3 <exhibit> elements.\n- Each <exhibit> element must have a <title> element containing the name of the exhibit.\n- Each <exhibit> element must include a <location> element with an attribute \"roomNumber\" which is a numeric value.\n- Each <exhibit> element should contain a <description> element with a brief textual description of the exhibit.\n- Each <exhibit> element must include a <yearCreated> element with exactly four numeric characters representing the creation year.\n- Each <exhibit> element should include a <ticketPrice> element with a numerical value formatted to two decimal places.",
            "task_id": "001721",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "tourGuide[@city]",
                "tourGuide[exhibit]",
                "tourGuide[exhibit][title]",
                "tourGuide[exhibit][location][@roomNumber]",
                "tourGuide[exhibit][description]",
                "tourGuide[exhibit][yearCreated]",
                "tourGuide[exhibit][ticketPrice]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001721_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital museum tour guide for an art exhibition.\n\nFeature Requirements:\n- The XML must have a root element named <tourGuide> with an attribute \"city\" set to a textual value.\n- Within the <tourGuide>, include at least 3 <exhibit> elements.\n- Each <exhibit> element must have a <title> element containing the name of the exhibit.\n- Each <exhibit> element must include a <location> element with an attribute \"roomNumber\" which is a numeric value.\n- Each <exhibit> element should contain a <description> element with a brief textual description of the exhibit.\n- Each <exhibit> element must include a <yearCreated> element with exactly four numeric characters representing the creation year.\n- Each <exhibit> element should include a <ticketPrice> element with a numerical value formatted to two decimal places."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001721_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "tourGuide[@city]",
                                "tourGuide[exhibit]",
                                "tourGuide[exhibit][title]",
                                "tourGuide[exhibit][location][@roomNumber]",
                                "tourGuide[exhibit][description]",
                                "tourGuide[exhibit][yearCreated]",
                                "tourGuide[exhibit][ticketPrice]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a recipe collection based on the provided text description of various recipes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the root, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include an <ingredients> element that contains one or more <ingredient> sub-elements, each with a name attribute and text content representing the ingredient.\n- Each <recipe> element must have a <cookTime> element with the cooking duration expressed as a number followed by \"min\" (e.g., 30min).\n- Each <recipe> element should include a <difficulty> element with a value of \"easy\", \"moderate\", or \"hard\".\n- Every <recipe> element must include a <servings> element with a numerical value indicating the number of servings.",
            "task_id": "001722",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipes",
                "recipes[recipe]",
                "recipes[recipe][name]",
                "recipes[recipe][ingredients]",
                "recipes[recipe][ingredients][ingredient(@name)]",
                "recipes[recipe][cookTime]",
                "recipes[recipe][difficulty]",
                "recipes[recipe][servings]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001722_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a recipe collection based on the provided text description of various recipes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the root, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include an <ingredients> element that contains one or more <ingredient> sub-elements, each with a name attribute and text content representing the ingredient.\n- Each <recipe> element must have a <cookTime> element with the cooking duration expressed as a number followed by \"min\" (e.g., 30min).\n- Each <recipe> element should include a <difficulty> element with a value of \"easy\", \"moderate\", or \"hard\".\n- Every <recipe> element must include a <servings> element with a numerical value indicating the number of servings."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001722_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipes",
                                "recipes[recipe]",
                                "recipes[recipe][name]",
                                "recipes[recipe][ingredients]",
                                "recipes[recipe][ingredients][ingredient(@name)]",
                                "recipes[recipe][cookTime]",
                                "recipes[recipe][difficulty]",
                                "recipes[recipe][servings]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on the given input text description.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, there should be at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element that provides the movie's title as text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <screening> element which itself contains a <date> element (formatted as YYYY-MM-DD) and a <time> element (in 24-hour format, HH:MM).\n- Each <movie> element should contain a <duration> element with an integer representing the movie's duration in minutes.\n- Ensure that the <festival> element is properly closed after listing all <movie> elements.",
            "task_id": "001723",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[movie]",
                "festival[movie][title]",
                "festival[movie][director]",
                "festival[movie][screening]",
                "festival[movie][screening][date]",
                "festival[movie][screening][time]",
                "festival[movie][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001723_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on the given input text description.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, there should be at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element that provides the movie's title as text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <screening> element which itself contains a <date> element (formatted as YYYY-MM-DD) and a <time> element (in 24-hour format, HH:MM).\n- Each <movie> element should contain a <duration> element with an integer representing the movie's duration in minutes.\n- Ensure that the <festival> element is properly closed after listing all <movie> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001723_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[movie]",
                                "festival[movie][title]",
                                "festival[movie][director]",
                                "festival[movie][screening]",
                                "festival[movie][screening][date]",
                                "festival[movie][screening][time]",
                                "festival[movie][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary for a vacation trip based on the provided text description.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <day> elements, each representing a day of the trip.\n- Each <day> element must contain a <date> element with a date formatted as YYYY-MM-DD.\n- Each <day> element should include a <destination> element with the name of the travel location.\n- Each <day> element must have an <activity> element describing the planned main activity for the day.\n- Every <day> element should include a <budget> element with a numerical value formatted to two decimal places.\n- Each <day> element must also include a <notes> element containing additional text details about that day.\n- Ensure that all elements are properly nested and that the XML is well-formed.",
            "task_id": "001724",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[day]",
                "itinerary[day][date]",
                "itinerary[day][destination]",
                "itinerary[day][activity]",
                "itinerary[day][budget]",
                "itinerary[day][notes]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001724_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary for a vacation trip based on the provided text description.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <day> elements, each representing a day of the trip.\n- Each <day> element must contain a <date> element with a date formatted as YYYY-MM-DD.\n- Each <day> element should include a <destination> element with the name of the travel location.\n- Each <day> element must have an <activity> element describing the planned main activity for the day.\n- Every <day> element should include a <budget> element with a numerical value formatted to two decimal places.\n- Each <day> element must also include a <notes> element containing additional text details about that day.\n- Ensure that all elements are properly nested and that the XML is well-formed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001724_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[day]",
                                "itinerary[day][date]",
                                "itinerary[day][destination]",
                                "itinerary[day][activity]",
                                "itinerary[day][budget]",
                                "itinerary[day][notes]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music library based on the given input text description of albums and their tracks.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within <library>, include at least 3 <album> elements.\n- Each <album> element should contain a <title> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name in text.\n- Each <album> element should include a <releaseYear> element with four numeric characters representing the publication year.\n- Each <album> element must include at least 2 <track> elements.\n- Every <track> element should contain a <name> element with the track's name in text.\n- Every <track> element must include a <duration> element displaying the track length in mm:ss format.\n- Ensure all elements are properly nested and the <library> element is correctly closed.",
            "task_id": "001725",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[album]",
                "library[album][title]",
                "library[album][artist]",
                "library[album][releaseYear]",
                "library[album][track]",
                "library[album][track][name]",
                "library[album][track][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001725_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music library based on the given input text description of albums and their tracks.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within <library>, include at least 3 <album> elements.\n- Each <album> element should contain a <title> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name in text.\n- Each <album> element should include a <releaseYear> element with four numeric characters representing the publication year.\n- Each <album> element must include at least 2 <track> elements.\n- Every <track> element should contain a <name> element with the track's name in text.\n- Every <track> element must include a <duration> element displaying the track length in mm:ss format.\n- Ensure all elements are properly nested and the <library> element is correctly closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001725_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[album]",
                                "library[album][title]",
                                "library[album][artist]",
                                "library[album][releaseYear]",
                                "library[album][track]",
                                "library[album][track][name]",
                                "library[album][track][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on a given list of songs.\n\nFeature Requirements:\n- Create a root element named <playlist> that contains all song entries.\n- Within the <playlist>, include at least 3 <song> elements.\n- Each <song> element must include a <title> element containing the song's title in plain text.\n- Each <song> element should include an <artist> element containing the artist's full name in plain text.\n- Each <song> element must have a <duration> element representing the song's length in the mm:ss format.\n- Each <song> element must include a <release> element with a four-digit year indicating the song's release year.\n- Each <song> element should also contain a <genre> element with the genre name in plain text (e.g., Pop, Rock, Jazz).\n- Ensure that the XML structure is well-formed with all elements properly closed.\n- Do not include any attributes; all information must be within the element text content.\n- The order of the elements inside each <song> should be: <title>, <artist>, <duration>, <release>, then <genre>.",
            "task_id": "001726",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "playlist",
                "playlist[song]",
                "playlist[song][title]",
                "playlist[song][artist]",
                "playlist[song][duration]",
                "playlist[song][release]",
                "playlist[song][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001726_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on a given list of songs.\n\nFeature Requirements:\n- Create a root element named <playlist> that contains all song entries.\n- Within the <playlist>, include at least 3 <song> elements.\n- Each <song> element must include a <title> element containing the song's title in plain text.\n- Each <song> element should include an <artist> element containing the artist's full name in plain text.\n- Each <song> element must have a <duration> element representing the song's length in the mm:ss format.\n- Each <song> element must include a <release> element with a four-digit year indicating the song's release year.\n- Each <song> element should also contain a <genre> element with the genre name in plain text (e.g., Pop, Rock, Jazz).\n- Ensure that the XML structure is well-formed with all elements properly closed.\n- Do not include any attributes; all information must be within the element text content.\n- The order of the elements inside each <song> should be: <title>, <artist>, <duration>, <release>, then <genre>."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001726_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "playlist",
                                "playlist[song]",
                                "playlist[song][title]",
                                "playlist[song][artist]",
                                "playlist[song][duration]",
                                "playlist[song][release]",
                                "playlist[song][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie schedule based on the provided text description of films.\n\nFeature Requirements:\n- Include a root element named <movieschedule>.\n- Within the <movieschedule>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with exactly four numeric characters representing the release year.\n- Each <movie> element should include a <rating> element with a numerical value formatted to two decimal places.\n- Each <movie> element should also contain a <genre> element with the movie genre in text.\n- The XML should be properly structured and closed with matching opening and closing tags.",
            "task_id": "001727",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "movieschedule",
                "movieschedule[movie]",
                "movieschedule[movie][title]",
                "movieschedule[movie][director]",
                "movieschedule[movie][year]",
                "movieschedule[movie][rating]",
                "movieschedule[movie][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001727_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie schedule based on the provided text description of films.\n\nFeature Requirements:\n- Include a root element named <movieschedule>.\n- Within the <movieschedule>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with exactly four numeric characters representing the release year.\n- Each <movie> element should include a <rating> element with a numerical value formatted to two decimal places.\n- Each <movie> element should also contain a <genre> element with the movie genre in text.\n- The XML should be properly structured and closed with matching opening and closing tags."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001727_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "movieschedule",
                                "movieschedule[movie]",
                                "movieschedule[movie][title]",
                                "movieschedule[movie][director]",
                                "movieschedule[movie][year]",
                                "movieschedule[movie][rating]",
                                "movieschedule[movie][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a film festival schedule based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <filmFestival>.\n- Within the <filmFestival>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <name> element with the movie title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <releaseYear> element with four numeric characters representing the production year.\n- Each <movie> element should include a <screeningTime> element showing the time in 24-hour format (e.g., \"20:15\").\n- Each <movie> element must have a <duration> element indicating the film's running time in minutes as an integer.\n- Each <movie> element should also include a <genre> element with the movie genre in text.\n- Ensure the <filmFestival> element is properly closed after listing all <movie> elements.",
            "task_id": "001728",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "filmFestival",
                "filmFestival[movie]",
                "filmFestival[movie][name]",
                "filmFestival[movie][director]",
                "filmFestival[movie][releaseYear]",
                "filmFestival[movie][screeningTime]",
                "filmFestival[movie][duration]",
                "filmFestival[movie][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001728_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a film festival schedule based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <filmFestival>.\n- Within the <filmFestival>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <name> element with the movie title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <releaseYear> element with four numeric characters representing the production year.\n- Each <movie> element should include a <screeningTime> element showing the time in 24-hour format (e.g., \"20:15\").\n- Each <movie> element must have a <duration> element indicating the film's running time in minutes as an integer.\n- Each <movie> element should also include a <genre> element with the movie genre in text.\n- Ensure the <filmFestival> element is properly closed after listing all <movie> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001728_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "filmFestival",
                                "filmFestival[movie]",
                                "filmFestival[movie][name]",
                                "filmFestival[movie][director]",
                                "filmFestival[movie][releaseYear]",
                                "filmFestival[movie][screeningTime]",
                                "filmFestival[movie][duration]",
                                "filmFestival[movie][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a textual description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that wraps the entire structure.\n- Within the <menu>, include at least 3 distinct <dish> elements representing individual menu items.\n- Each <dish> element must have a <name> element containing the dish’s name as plain text.\n- Each <dish> element must include a <description> element detailing the ingredients and preparation in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must have a <category> element specifying the dish type (such as \"appetizer\", \"entree\", or \"dessert\") in text.\n- Each <dish> element should include an attribute named \"spicy\" with a value of either \"true\" or \"false\" to indicate its spiciness level.\n- Ensure that all opened elements have appropriate closing tags, properly nesting the XML structure.",
            "task_id": "001729",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][@spicy]",
                "menu[dish][name]",
                "menu[dish][description]",
                "menu[dish][price]",
                "menu[dish][category]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001729_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a textual description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that wraps the entire structure.\n- Within the <menu>, include at least 3 distinct <dish> elements representing individual menu items.\n- Each <dish> element must have a <name> element containing the dish’s name as plain text.\n- Each <dish> element must include a <description> element detailing the ingredients and preparation in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must have a <category> element specifying the dish type (such as \"appetizer\", \"entree\", or \"dessert\") in text.\n- Each <dish> element should include an attribute named \"spicy\" with a value of either \"true\" or \"false\" to indicate its spiciness level.\n- Ensure that all opened elements have appropriate closing tags, properly nesting the XML structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001729_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][@spicy]",
                                "menu[dish][name]",
                                "menu[dish][description]",
                                "menu[dish][price]",
                                "menu[dish][category]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <category> element specifying the dish type (e.g., appetizer, main course, dessert).\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <calories> element with a numeric value representing the calorie count.\n- Each <dish> element should also have a <description> element listing its ingredients, separated by commas.\n- The <menu> root element must be properly closed after all <dish> elements.",
            "task_id": "001730",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][category]",
                "menu[dish][price]",
                "menu[dish][calories]",
                "menu[dish][description]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001730_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <category> element specifying the dish type (e.g., appetizer, main course, dessert).\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <calories> element with a numeric value representing the calorie count.\n- Each <dish> element should also have a <description> element listing its ingredients, separated by commas.\n- The <menu> root element must be properly closed after all <dish> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001730_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][category]",
                                "menu[dish][price]",
                                "menu[dish][calories]",
                                "menu[dish][description]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie collection based on given text descriptions of films.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element displaying the film's title.\n- Each <movie> element should include a <director> element showing the director's name.\n- Each <movie> element must also include a <year> element with exactly four numeric characters representing the release year.\n- Every <movie> element should have a <rating> element containing a numerical value formatted with one decimal place.\n- Each <movie> element must include a <duration> element indicating the runtime in minutes as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
            "task_id": "001731",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "collection",
                "collection[movie]",
                "collection[movie][title]",
                "collection[movie][director]",
                "collection[movie][year]",
                "collection[movie][rating]",
                "collection[movie][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001731_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie collection based on given text descriptions of films.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element displaying the film's title.\n- Each <movie> element should include a <director> element showing the director's name.\n- Each <movie> element must also include a <year> element with exactly four numeric characters representing the release year.\n- Every <movie> element should have a <rating> element containing a numerical value formatted with one decimal place.\n- Each <movie> element must include a <duration> element indicating the runtime in minutes as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001731_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "collection",
                                "collection[movie]",
                                "collection[movie][title]",
                                "collection[movie][director]",
                                "collection[movie][year]",
                                "collection[movie][rating]",
                                "collection[movie][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on a given text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 3 <performance> elements.\n- Each <performance> element should contain a <band> element with the band's name in text.\n- Each <performance> element must include a <stage> element with the stage location in text.\n- Each <performance> element should have a <time> element with the performance start time in HH:MM 24-hour format.\n- Each <performance> element must include a <date> element with the performance date in YYYY-MM-DD format.\n- Each <performance> element should provide a <ticketPrice> element with a numerical value formatted to two decimal places.\n- Optionally, include a <genre> element inside each <performance> that specifies the music genre in text.\n- Ensure all XML elements are properly opened and closed without any extra attributes.",
            "task_id": "001732",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[performance]",
                "festival[performance][band]",
                "festival[performance][stage]",
                "festival[performance][time]",
                "festival[performance][date]",
                "festival[performance][ticketPrice]",
                "festival[performance][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001732_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on a given text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 3 <performance> elements.\n- Each <performance> element should contain a <band> element with the band's name in text.\n- Each <performance> element must include a <stage> element with the stage location in text.\n- Each <performance> element should have a <time> element with the performance start time in HH:MM 24-hour format.\n- Each <performance> element must include a <date> element with the performance date in YYYY-MM-DD format.\n- Each <performance> element should provide a <ticketPrice> element with a numerical value formatted to two decimal places.\n- Optionally, include a <genre> element inside each <performance> that specifies the music genre in text.\n- Ensure all XML elements are properly opened and closed without any extra attributes."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001732_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[performance]",
                                "festival[performance][band]",
                                "festival[performance][stage]",
                                "festival[performance][time]",
                                "festival[performance][date]",
                                "festival[performance][ticketPrice]",
                                "festival[performance][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a unique music album collection based on an input text description of various music albums.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within the <library>, have at least 3 <album> elements.\n- Each <album> element must contain a <title> element with the album's title in text.\n- Each <album> element should include an <artist> element with the performing artist's name in text.\n- Each <album> element must have a <release_year> element with exactly four numeric characters representing the release year.\n- Each <album> element should include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element must contain a <tracks> element that lists the album's tracks.\n- Within each <tracks> element, include at least two <track> elements, each having:\n  - a <track_title> element with the name of the track in text, and\n  - a <duration> element with the track's duration in the \"MM:SS\" format.\n- Ensure that the XML structure is properly closed after all elements.",
            "task_id": "001733",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[album]",
                "library[album][title]",
                "library[album][artist]",
                "library[album][release_year]",
                "library[album][price]",
                "library[album][genre]",
                "library[album][tracks]",
                "library[album][tracks][track]",
                "library[album][tracks][track][track_title]",
                "library[album][tracks][track][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001733_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a unique music album collection based on an input text description of various music albums.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within the <library>, have at least 3 <album> elements.\n- Each <album> element must contain a <title> element with the album's title in text.\n- Each <album> element should include an <artist> element with the performing artist's name in text.\n- Each <album> element must have a <release_year> element with exactly four numeric characters representing the release year.\n- Each <album> element should include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element must contain a <tracks> element that lists the album's tracks.\n- Within each <tracks> element, include at least two <track> elements, each having:\n  - a <track_title> element with the name of the track in text, and\n  - a <duration> element with the track's duration in the \"MM:SS\" format.\n- Ensure that the XML structure is properly closed after all elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001733_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[album]",
                                "library[album][title]",
                                "library[album][artist]",
                                "library[album][release_year]",
                                "library[album][price]",
                                "library[album][genre]",
                                "library[album][tracks]",
                                "library[album][tracks][track]",
                                "library[album][tracks][track][track_title]",
                                "library[album][tracks][track][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element specifying the dish's name in text.\n- Each <dish> element must have a <description> element providing a brief text description of the dish.\n- Each <dish> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element with the type of dish (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element should contain a <spiceLevel> element with a numerical value between 1 and 5, represented by digits.\n- The XML output must be well-formed with all elements properly opened and closed.",
            "task_id": "001734",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][description]",
                "menu[dish][price]",
                "menu[dish][category]",
                "menu[dish][spiceLevel]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001734_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element specifying the dish's name in text.\n- Each <dish> element must have a <description> element providing a brief text description of the dish.\n- Each <dish> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element with the type of dish (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element should contain a <spiceLevel> element with a numerical value between 1 and 5, represented by digits.\n- The XML output must be well-formed with all elements properly opened and closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001734_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][description]",
                                "menu[dish][price]",
                                "menu[dish][category]",
                                "menu[dish][spiceLevel]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music album collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 3 <album> elements.\n- Each <album> element should contain an <albumTitle> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name articulated in text.\n- Each <album> element must have a <releaseYear> element containing exactly four numeric digits to represent the year of release.\n- Each <album> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element should include a <trackCount> element with an integer value representing the number of tracks.\n- The <collection> must be properly closed after all <album> elements.",
            "task_id": "001735",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "collection",
                "collection[album]",
                "collection[album][albumTitle]",
                "collection[album][artist]",
                "collection[album][releaseYear]",
                "collection[album][price]",
                "collection[album][genre]",
                "collection[album][trackCount]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001735_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a music album collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 3 <album> elements.\n- Each <album> element should contain an <albumTitle> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name articulated in text.\n- Each <album> element must have a <releaseYear> element containing exactly four numeric digits to represent the year of release.\n- Each <album> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element should include a <trackCount> element with an integer value representing the number of tracks.\n- The <collection> must be properly closed after all <album> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001735_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "collection",
                                "collection[album]",
                                "collection[album][albumTitle]",
                                "collection[album][artist]",
                                "collection[album][releaseYear]",
                                "collection[album][price]",
                                "collection[album][genre]",
                                "collection[album][trackCount]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a multi-city travel itinerary based on a given descriptive text about planned visits and activities.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <city> elements representing different travel destinations.\n- Each <city> element must contain a <name> element with the city's name as text.\n- Each <city> element should include a <visitDate> element with a date formatted as YYYY-MM-DD.\n- Each <city> element must contain one or more <activity> sub-elements describing planned activities.\n- Every <activity> element must include a <description> element with text detailing the activity.\n- Each <activity> element requires a <cost> element with a numerical value formatted to two decimal places.\n- Ensure that the XML structure is properly nested and that every opening tag has a corresponding closing tag.",
            "task_id": "001736",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[city]",
                "itinerary[city][name]",
                "itinerary[city][visitDate]",
                "itinerary[city][activity]",
                "itinerary[city][activity][description]",
                "itinerary[city][activity][cost]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001736_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a multi-city travel itinerary based on a given descriptive text about planned visits and activities.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <city> elements representing different travel destinations.\n- Each <city> element must contain a <name> element with the city's name as text.\n- Each <city> element should include a <visitDate> element with a date formatted as YYYY-MM-DD.\n- Each <city> element must contain one or more <activity> sub-elements describing planned activities.\n- Every <activity> element must include a <description> element with text detailing the activity.\n- Each <activity> element requires a <cost> element with a numerical value formatted to two decimal places.\n- Ensure that the XML structure is properly nested and that every opening tag has a corresponding closing tag."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001736_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[city]",
                                "itinerary[city][name]",
                                "itinerary[city][visitDate]",
                                "itinerary[city][activity]",
                                "itinerary[city][activity][description]",
                                "itinerary[city][activity][cost]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of cooking recipes based on a given text description.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes> element, have at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include a <time> element with the cooking time expressed in minutes as a numeric value.\n- Each <recipe> element must have a <servings> element containing the number of servings as a numeric value.\n- Each <recipe> element must include an <ingredients> element that contains several <ingredient> elements, each with a \"quantity\" attribute and plain text for the ingredient name.\n- Each <recipe> element should include an <instructions> element with the step-by-step cooking instructions in plain text.\n- The <recipes> element must be properly closed after all <recipe> elements.",
            "task_id": "001737",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipes",
                "recipes[recipe]",
                "recipes[recipe][name]",
                "recipes[recipe][time]",
                "recipes[recipe][servings]",
                "recipes[recipe][ingredients]",
                "recipes[recipe][ingredients][ingredient]@quantity",
                "recipes[recipe][ingredients][ingredient]",
                "recipes[recipe][instructions]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001737_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of cooking recipes based on a given text description.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes> element, have at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include a <time> element with the cooking time expressed in minutes as a numeric value.\n- Each <recipe> element must have a <servings> element containing the number of servings as a numeric value.\n- Each <recipe> element must include an <ingredients> element that contains several <ingredient> elements, each with a \"quantity\" attribute and plain text for the ingredient name.\n- Each <recipe> element should include an <instructions> element with the step-by-step cooking instructions in plain text.\n- The <recipes> element must be properly closed after all <recipe> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001737_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipes",
                                "recipes[recipe]",
                                "recipes[recipe][name]",
                                "recipes[recipe][time]",
                                "recipes[recipe][servings]",
                                "recipes[recipe][ingredients]",
                                "recipes[recipe][ingredients][ingredient]@quantity",
                                "recipes[recipe][ingredients][ingredient]",
                                "recipes[recipe][instructions]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <album> elements.\n- Each <album> element must contain a <name> element with the album's title in text.\n- Each <album> element should include an <artist> element with the artist's name in text.\n- Each <album> element must have a <releaseYear> element with exactly four numeric characters representing the year.\n- Each <album> element must include a <trackCount> element with an integer value indicating the number of tracks.\n- Each <album> element should include a <genre> element with the music genre in text.\n- Ensure that all numerical elements are represented without any additional symbols beside the numbers.\n- The <collection> root element must be properly closed after all <album> elements.",
            "task_id": "001738",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "collection",
                "collection[album]",
                "collection[album][name]",
                "collection[album][artist]",
                "collection[album][releaseYear]",
                "collection[album][trackCount]",
                "collection[album][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001738_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a music collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <album> elements.\n- Each <album> element must contain a <name> element with the album's title in text.\n- Each <album> element should include an <artist> element with the artist's name in text.\n- Each <album> element must have a <releaseYear> element with exactly four numeric characters representing the year.\n- Each <album> element must include a <trackCount> element with an integer value indicating the number of tracks.\n- Each <album> element should include a <genre> element with the music genre in text.\n- Ensure that all numerical elements are represented without any additional symbols beside the numbers.\n- The <collection> root element must be properly closed after all <album> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001738_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "collection",
                                "collection[album]",
                                "collection[album][name]",
                                "collection[album][artist]",
                                "collection[album][releaseYear]",
                                "collection[album][trackCount]",
                                "collection[album][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include a <category> element with the dish type (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <description> element with a brief text summary of the dish.\n- Each <dish> element must include a <calories> element with an integer representing the estimated calorie count.\n- Include an optional <spicy> element in each <dish> with the text \"yes\" or \"no\" to indicate if the dish is spicy.\n- Ensure the <menu> element is properly closed after all <dish> elements.",
            "task_id": "001739",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][category]",
                "menu[dish][price]",
                "menu[dish][description]",
                "menu[dish][calories]",
                "menu[dish][spicy]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001739_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include a <category> element with the dish type (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <description> element with a brief text summary of the dish.\n- Each <dish> element must include a <calories> element with an integer representing the estimated calorie count.\n- Include an optional <spicy> element in each <dish> with the text \"yes\" or \"no\" to indicate if the dish is spicy.\n- Ensure the <menu> element is properly closed after all <dish> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001739_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][category]",
                                "menu[dish][price]",
                                "menu[dish][description]",
                                "menu[dish][calories]",
                                "menu[dish][spicy]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a bustling neighborhood café menu based on provided input text descriptions of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least three <dish> elements representing different menu items.\n- Each <dish> element must contain a <name> element with the dish's name as text.\n- Each <dish> element must include a <description> element with a brief text description of the dish.\n- Each <dish> element must have a <price> element displaying the cost as a numerical value with exactly two decimal places.\n- Each <dish> element must include a <category> element indicating the type of dish such as appetizer, main course, or dessert.\n- Include an optional <spiceLevel> element within each <dish> that specifies the spice intensity (e.g., mild, medium, hot).\n- Ensure that all elements are properly nested and closed within the XML structure.\n- Order the <dish> elements according to the sequence provided in the input text description.",
            "task_id": "001740",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][description]",
                "menu[dish][price]",
                "menu[dish][category]",
                "menu[dish][spiceLevel]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001740_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a bustling neighborhood café menu based on provided input text descriptions of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least three <dish> elements representing different menu items.\n- Each <dish> element must contain a <name> element with the dish's name as text.\n- Each <dish> element must include a <description> element with a brief text description of the dish.\n- Each <dish> element must have a <price> element displaying the cost as a numerical value with exactly two decimal places.\n- Each <dish> element must include a <category> element indicating the type of dish such as appetizer, main course, or dessert.\n- Include an optional <spiceLevel> element within each <dish> that specifies the spice intensity (e.g., mild, medium, hot).\n- Ensure that all elements are properly nested and closed within the XML structure.\n- Order the <dish> elements according to the sequence provided in the input text description."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001740_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][description]",
                                "menu[dish][price]",
                                "menu[dish][category]",
                                "menu[dish][spiceLevel]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local farmers market schedule based on a given text description of vendor stalls and their operating times.\n\nFeature Requirements:\n- Include a single root element named <market>.\n- Within the <market> element, include at least 3 <stall> elements.\n- Each <stall> must contain a <vendor> element providing the vendor's name as plain text.\n- Each <stall> must include an <item> element indicating the primary product sold by the vendor.\n- Each <stall> must have an <openTime> element with the time formatted in 24-hour notation (HH:MM).\n- Each <stall> must include a <duration> element that indicates the operating duration in minutes as a numeric value.\n- Each <stall> element must include a <priceRange> element specifying a price range in the format \"min-max\" where both min and max are numeric values formatted with two decimal places.\n- Ensure that the <market> element is properly closed after all <stall> elements.",
            "task_id": "001741",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "market",
                "market[stall]",
                "market[stall][vendor]",
                "market[stall][item]",
                "market[stall][openTime]",
                "market[stall][duration]",
                "market[stall][priceRange]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001741_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a local farmers market schedule based on a given text description of vendor stalls and their operating times.\n\nFeature Requirements:\n- Include a single root element named <market>.\n- Within the <market> element, include at least 3 <stall> elements.\n- Each <stall> must contain a <vendor> element providing the vendor's name as plain text.\n- Each <stall> must include an <item> element indicating the primary product sold by the vendor.\n- Each <stall> must have an <openTime> element with the time formatted in 24-hour notation (HH:MM).\n- Each <stall> must include a <duration> element that indicates the operating duration in minutes as a numeric value.\n- Each <stall> element must include a <priceRange> element specifying a price range in the format \"min-max\" where both min and max are numeric values formatted with two decimal places.\n- Ensure that the <market> element is properly closed after all <stall> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001741_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "market",
                                "market[stall]",
                                "market[stall][vendor]",
                                "market[stall][item]",
                                "market[stall][openTime]",
                                "market[stall][duration]",
                                "market[stall][priceRange]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a train timetable based on the given input text description of train schedules.\n\nFeature Requirements:\n- The XML must have a root element named <timetable>.\n- Inside the <timetable>, include at least 3 <train> elements.\n- Each <train> element must contain an <id> element that holds the train's unique identifier as text.\n- Within each <train> element, include a <departureTime> element with the time in a HH:MM format.\n- Within each <train> element, include an <arrivalTime> element with the time in a HH:MM format.\n- Each <train> element must also have an <origin> element with the departure station name as text.\n- Each <train> element must include a <destination> element with the arrival station name as text.",
            "task_id": "001742",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "timetable",
                "timetable[train]",
                "timetable[train][id]",
                "timetable[train][departureTime]",
                "timetable[train][arrivalTime]",
                "timetable[train][origin]",
                "timetable[train][destination]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001742_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a train timetable based on the given input text description of train schedules.\n\nFeature Requirements:\n- The XML must have a root element named <timetable>.\n- Inside the <timetable>, include at least 3 <train> elements.\n- Each <train> element must contain an <id> element that holds the train's unique identifier as text.\n- Within each <train> element, include a <departureTime> element with the time in a HH:MM format.\n- Within each <train> element, include an <arrivalTime> element with the time in a HH:MM format.\n- Each <train> element must also have an <origin> element with the departure station name as text.\n- Each <train> element must include a <destination> element with the arrival station name as text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001742_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "timetable",
                                "timetable[train]",
                                "timetable[train][id]",
                                "timetable[train][departureTime]",
                                "timetable[train][arrivalTime]",
                                "timetable[train][origin]",
                                "timetable[train][destination]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on the given text description of performances.\n\nFeature Requirements:\n- The XML must have a root element called <schedule>.\n- Within the <schedule>, include at least 3 <performance> elements.\n- Each <performance> element must contain an <artist> element with the performance artist's name in text.\n- Each <performance> element must include a <stage> element with the stage's name in text.\n- Each <performance> element must have a <time> element showing the performance time in a 24-hour format (HH:MM).\n- Each <performance> element must include a <day> element with the specific day of the festival written in full.\n- The <schedule> element should be properly closed after all <performance> elements.",
            "task_id": "001743",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "schedule",
                "schedule[performance]",
                "schedule[performance][artist]",
                "schedule[performance][stage]",
                "schedule[performance][time]",
                "schedule[performance][day]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001743_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on the given text description of performances.\n\nFeature Requirements:\n- The XML must have a root element called <schedule>.\n- Within the <schedule>, include at least 3 <performance> elements.\n- Each <performance> element must contain an <artist> element with the performance artist's name in text.\n- Each <performance> element must include a <stage> element with the stage's name in text.\n- Each <performance> element must have a <time> element showing the performance time in a 24-hour format (HH:MM).\n- Each <performance> element must include a <day> element with the specific day of the festival written in full.\n- The <schedule> element should be properly closed after all <performance> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001743_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "schedule",
                                "schedule[performance]",
                                "schedule[performance][artist]",
                                "schedule[performance][stage]",
                                "schedule[performance][time]",
                                "schedule[performance][day]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary catalog based on the given input description of vacation packages.\n\nFeature Requirements:\n- Include a root element named <itineraries>.\n- Within <itineraries>, include at least 3 <package> elements.\n- Each <package> element should contain a <destination> element with the name of the city or location.\n- Each <package> element must include a <departureDate> element with the date formatted as YYYY-MM-DD.\n- Each <package> element should include a <duration> element representing the number of days as an integer.\n- Each <package> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <package> element should include a <description> element with a brief summary of the vacation.\n- Ensure all elements are properly nested and the root element is correctly closed after all <package> elements.",
            "task_id": "001744",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itineraries",
                "itineraries[package]",
                "itineraries[package][destination]",
                "itineraries[package][departureDate]",
                "itineraries[package][duration]",
                "itineraries[package][price]",
                "itineraries[package][description]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001744_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary catalog based on the given input description of vacation packages.\n\nFeature Requirements:\n- Include a root element named <itineraries>.\n- Within <itineraries>, include at least 3 <package> elements.\n- Each <package> element should contain a <destination> element with the name of the city or location.\n- Each <package> element must include a <departureDate> element with the date formatted as YYYY-MM-DD.\n- Each <package> element should include a <duration> element representing the number of days as an integer.\n- Each <package> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <package> element should include a <description> element with a brief summary of the vacation.\n- Ensure all elements are properly nested and the root element is correctly closed after all <package> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001744_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itineraries",
                                "itineraries[package]",
                                "itineraries[package][destination]",
                                "itineraries[package][departureDate]",
                                "itineraries[package][duration]",
                                "itineraries[package][price]",
                                "itineraries[package][description]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on an overview of various film screenings.\n\nFeature Requirements:\n- The XML must contain a root element named <festival>.\n- Within the <festival> element, include at least 3 <movie> elements.\n- Each <movie> element must have a <title> element with the name of the film in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the runtime in minutes.\n- Each <movie> element should include a <genre> element with the film genre in text.\n- Each <movie> element must have a <time> element with the screening start time formatted as HH:MM.\n- The XML structure must close the <festival> element properly after listing all <movie> entries.",
            "task_id": "001745",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[movie]",
                "festival[movie][title]",
                "festival[movie][director]",
                "festival[movie][duration]",
                "festival[movie][genre]",
                "festival[movie][time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001745_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on an overview of various film screenings.\n\nFeature Requirements:\n- The XML must contain a root element named <festival>.\n- Within the <festival> element, include at least 3 <movie> elements.\n- Each <movie> element must have a <title> element with the name of the film in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the runtime in minutes.\n- Each <movie> element should include a <genre> element with the film genre in text.\n- Each <movie> element must have a <time> element with the screening start time formatted as HH:MM.\n- The XML structure must close the <festival> element properly after listing all <movie> entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001745_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[movie]",
                                "festival[movie][title]",
                                "festival[movie][director]",
                                "festival[movie][duration]",
                                "festival[movie][genre]",
                                "festival[movie][time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a diverse collection of cooking recipes based on a descriptive text input.\n\nFeature Requirements:\n- Include a root element named <recipes> that encloses all recipe entries.\n- Each recipe must be represented by a <recipe> element appearing as a direct child of the root.\n- Every <recipe> element should contain a <name> element with the recipe title in plain text.\n- Include a <prepTime> element for each recipe with the preparation time specified as an integer followed by the unit \"min\".\n- Include a <cookTime> element for each recipe with the cooking time specified as an integer followed by the unit \"min\".\n- Ensure each recipe includes an <ingredients> element that contains at least three <ingredient> sub-elements, each with the ingredient name as text.\n- Every recipe must conclude with an <instructions> element that provides detailed step-by-step directions in plain text.",
            "task_id": "001746",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipes",
                "recipes[recipe]",
                "recipes[recipe][name]",
                "recipes[recipe][prepTime]",
                "recipes[recipe][cookTime]",
                "recipes[recipe][ingredients]",
                "recipes[recipe][ingredients][ingredient]",
                "recipes[recipe][instructions]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001746_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a diverse collection of cooking recipes based on a descriptive text input.\n\nFeature Requirements:\n- Include a root element named <recipes> that encloses all recipe entries.\n- Each recipe must be represented by a <recipe> element appearing as a direct child of the root.\n- Every <recipe> element should contain a <name> element with the recipe title in plain text.\n- Include a <prepTime> element for each recipe with the preparation time specified as an integer followed by the unit \"min\".\n- Include a <cookTime> element for each recipe with the cooking time specified as an integer followed by the unit \"min\".\n- Ensure each recipe includes an <ingredients> element that contains at least three <ingredient> sub-elements, each with the ingredient name as text.\n- Every recipe must conclude with an <instructions> element that provides detailed step-by-step directions in plain text."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001746_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipes",
                                "recipes[recipe]",
                                "recipes[recipe][name]",
                                "recipes[recipe][prepTime]",
                                "recipes[recipe][cookTime]",
                                "recipes[recipe][ingredients]",
                                "recipes[recipe][ingredients][ingredient]",
                                "recipes[recipe][instructions]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a theater festival schedule based on the given input text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element should have a <name> element containing the title of the performance.\n- Each <performance> element must have a <director> element with the director's name.\n- Each <performance> element should contain a <date> element with the date in YYYY-MM-DD format.\n- Provide a <time> element in each <performance> element with the performance's start time in HH:MM format using a 24-hour clock.\n- Each <performance> element must include a <duration> element specifying the length in minutes as a whole number.\n- Within each <performance> element, include a <venue> element with text describing the location of the performance.\n- Ensure the XML structure is complete and that all elements are properly opened and closed.",
            "task_id": "001747",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[performance]",
                "festival[performance][name]",
                "festival[performance][director]",
                "festival[performance][date]",
                "festival[performance][time]",
                "festival[performance][duration]",
                "festival[performance][venue]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001747_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a theater festival schedule based on the given input text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element should have a <name> element containing the title of the performance.\n- Each <performance> element must have a <director> element with the director's name.\n- Each <performance> element should contain a <date> element with the date in YYYY-MM-DD format.\n- Provide a <time> element in each <performance> element with the performance's start time in HH:MM format using a 24-hour clock.\n- Each <performance> element must include a <duration> element specifying the length in minutes as a whole number.\n- Within each <performance> element, include a <venue> element with text describing the location of the performance.\n- Ensure the XML structure is complete and that all elements are properly opened and closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001747_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[performance]",
                                "festival[performance][name]",
                                "festival[performance][director]",
                                "festival[performance][date]",
                                "festival[performance][time]",
                                "festival[performance][duration]",
                                "festival[performance][venue]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of recipes based on the given input text description of various dishes.\n\nFeature Requirements:\n- Create a root element named <recipeCollection> that encloses all recipe entries.\n- Within <recipeCollection>, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the dish's name in plain text.\n- Each <recipe> element must include a <chef> element with the name of the chef in plain text.\n- Each <recipe> element must have a <duration> element displaying the preparation time in minutes as a numerical value.\n- Each <recipe> element must include a <servings> element with a numeric value representing the number of servings.\n- Within each <recipe> element, include an <ingredients> element that contains one or more <ingredient> child elements with the ingredient names in plain text.\n- Ensure all XML elements are properly opened and closed.",
            "task_id": "001748",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipeCollection",
                "recipeCollection[recipe]",
                "recipeCollection[recipe][name]",
                "recipeCollection[recipe][chef]",
                "recipeCollection[recipe][duration]",
                "recipeCollection[recipe][servings]",
                "recipeCollection[recipe][ingredients]",
                "recipeCollection[recipe][ingredients][ingredient]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001748_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of recipes based on the given input text description of various dishes.\n\nFeature Requirements:\n- Create a root element named <recipeCollection> that encloses all recipe entries.\n- Within <recipeCollection>, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the dish's name in plain text.\n- Each <recipe> element must include a <chef> element with the name of the chef in plain text.\n- Each <recipe> element must have a <duration> element displaying the preparation time in minutes as a numerical value.\n- Each <recipe> element must include a <servings> element with a numeric value representing the number of servings.\n- Within each <recipe> element, include an <ingredients> element that contains one or more <ingredient> child elements with the ingredient names in plain text.\n- Ensure all XML elements are properly opened and closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001748_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipeCollection",
                                "recipeCollection[recipe]",
                                "recipeCollection[recipe][name]",
                                "recipeCollection[recipe][chef]",
                                "recipeCollection[recipe][duration]",
                                "recipeCollection[recipe][servings]",
                                "recipeCollection[recipe][ingredients]",
                                "recipeCollection[recipe][ingredients][ingredient]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on an input text description of various dishes offered.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, create at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish’s name as text.\n- Each <dish> element should include a <category> element indicating the dish category (e.g., appetizer, main course, or dessert).\n- Each <dish> element must have a <price> element that holds a numerical value formatted to two decimal places.\n- Include a <description> element within every <dish> element to provide a brief text detail about the dish.\n- Each <dish> element must feature a <calories> element displaying the calorie count as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
            "task_id": "001749",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][name]",
                "menu[dish][category]",
                "menu[dish][price]",
                "menu[dish][description]",
                "menu[dish][calories]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001749_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on an input text description of various dishes offered.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, create at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish’s name as text.\n- Each <dish> element should include a <category> element indicating the dish category (e.g., appetizer, main course, or dessert).\n- Each <dish> element must have a <price> element that holds a numerical value formatted to two decimal places.\n- Include a <description> element within every <dish> element to provide a brief text detail about the dish.\n- Each <dish> element must feature a <calories> element displaying the calorie count as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001749_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][name]",
                                "menu[dish][category]",
                                "menu[dish][price]",
                                "menu[dish][description]",
                                "menu[dish][calories]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted travel itinerary.\n\nFeature Requirements:\n- The YAML output must contain a top-level key named itinerary.\n- Under itinerary, include exactly three destination entries.\n- Each destination entry should be a mapping with three keys: city, stay_duration, and notes.\n- The city key must have a non-empty string value representing the destination city.\n- The stay_duration key must have an integer value greater than zero representing the number of days.\n- The notes key must have a non-empty string that describes a unique aspect of the destination.\n- Include a top-level comment that reads \"Generated Travel Itinerary\".\n- Use exactly two spaces for indentation of nested elements.\n- Ensure there are no extra newline characters or additional whitespace between items.",
            "task_id": "001800",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[0][city]",
                "itinerary[0][stay_duration]",
                "itinerary[0][notes]",
                "itinerary[1][city]",
                "itinerary[1][stay_duration]",
                "itinerary[1][notes]",
                "itinerary[2][city]",
                "itinerary[2][stay_duration]",
                "itinerary[2][notes]",
                "comment: Generated Travel Itinerary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001800_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted travel itinerary.\n\nFeature Requirements:\n- The YAML output must contain a top-level key named itinerary.\n- Under itinerary, include exactly three destination entries.\n- Each destination entry should be a mapping with three keys: city, stay_duration, and notes.\n- The city key must have a non-empty string value representing the destination city.\n- The stay_duration key must have an integer value greater than zero representing the number of days.\n- The notes key must have a non-empty string that describes a unique aspect of the destination.\n- Include a top-level comment that reads \"Generated Travel Itinerary\".\n- Use exactly two spaces for indentation of nested elements.\n- Ensure there are no extra newline characters or additional whitespace between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001800_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[0][city]",
                                "itinerary[0][stay_duration]",
                                "itinerary[0][notes]",
                                "itinerary[1][city]",
                                "itinerary[1][stay_duration]",
                                "itinerary[1][notes]",
                                "itinerary[2][city]",
                                "itinerary[2][stay_duration]",
                                "itinerary[2][notes]",
                                "comment: Generated Travel Itinerary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided travel itinerary details into a YAML format representing a multi-destination journey.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 destinations as children under itinerary.\n- Each destination must have four keys: destination, arrival_date, departure_date, and activities.\n- The destination key should hold a non-empty string value.\n- The arrival_date and departure_date keys should have string values formatted as \"YYYY-MM-DD\".\n- The activities key should contain an array of exactly 3 non-empty string values describing planned activities.\n- Ensure that the YAML output is properly indented with two spaces per nested level.\n- Provide a top-level comment at the beginning stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between elements.\n- Do not include any references to images, icons, or external links.",
            "task_id": "001801",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[0][destination]",
                "itinerary[0][arrival_date]",
                "itinerary[0][departure_date]",
                "itinerary[0][activities]",
                "itinerary[1][destination]",
                "itinerary[1][arrival_date]",
                "itinerary[1][departure_date]",
                "itinerary[1][activities]",
                "itinerary[2][destination]",
                "itinerary[2][arrival_date]",
                "itinerary[2][departure_date]",
                "itinerary[2][activities]",
                "itinerary[3][destination]",
                "itinerary[3][arrival_date]",
                "itinerary[3][departure_date]",
                "itinerary[3][activities]",
                "itinerary[4][destination]",
                "itinerary[4][arrival_date]",
                "itinerary[4][departure_date]",
                "itinerary[4][activities]",
                "itinerary[5][destination]",
                "itinerary[5][arrival_date]",
                "itinerary[5][departure_date]",
                "itinerary[5][activities]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001801_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided travel itinerary details into a YAML format representing a multi-destination journey.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 destinations as children under itinerary.\n- Each destination must have four keys: destination, arrival_date, departure_date, and activities.\n- The destination key should hold a non-empty string value.\n- The arrival_date and departure_date keys should have string values formatted as \"YYYY-MM-DD\".\n- The activities key should contain an array of exactly 3 non-empty string values describing planned activities.\n- Ensure that the YAML output is properly indented with two spaces per nested level.\n- Provide a top-level comment at the beginning stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between elements.\n- Do not include any references to images, icons, or external links."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001801_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[0][destination]",
                                "itinerary[0][arrival_date]",
                                "itinerary[0][departure_date]",
                                "itinerary[0][activities]",
                                "itinerary[1][destination]",
                                "itinerary[1][arrival_date]",
                                "itinerary[1][departure_date]",
                                "itinerary[1][activities]",
                                "itinerary[2][destination]",
                                "itinerary[2][arrival_date]",
                                "itinerary[2][departure_date]",
                                "itinerary[2][activities]",
                                "itinerary[3][destination]",
                                "itinerary[3][arrival_date]",
                                "itinerary[3][departure_date]",
                                "itinerary[3][activities]",
                                "itinerary[4][destination]",
                                "itinerary[4][arrival_date]",
                                "itinerary[4][departure_date]",
                                "itinerary[4][activities]",
                                "itinerary[5][destination]",
                                "itinerary[5][arrival_date]",
                                "itinerary[5][departure_date]",
                                "itinerary[5][activities]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- List exactly 6 meetings as children under \"daily_schedule\", each using a unique numeric key starting from 1.\n- Each meeting entry must include three keys: \"time\", \"topic\", and \"leader\".\n- The \"time\" values must be strings in HH:MM 24-hour format representing valid times.\n- Every \"topic\" value must be a unique, non-empty string describing the meeting subject.\n- Each \"leader\" value must be a non-empty string containing a full name (first and last name).\n- Use exactly two spaces for indentation for all nested structures.\n- Begin the YAML output with a top-level comment stating \"Generated Daily Meeting Schedule\".\n- Include no additional keys, comments, or blank lines beyond what is specified.",
            "task_id": "001802",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "daily_schedule",
                "daily_schedule[1]",
                "daily_schedule[1][time]",
                "daily_schedule[1][topic]",
                "daily_schedule[1][leader]",
                "daily_schedule[2]",
                "daily_schedule[2][time]",
                "daily_schedule[2][topic]",
                "daily_schedule[2][leader]",
                "daily_schedule[3]",
                "daily_schedule[3][time]",
                "daily_schedule[3][topic]",
                "daily_schedule[3][leader]",
                "daily_schedule[4]",
                "daily_schedule[4][time]",
                "daily_schedule[4][topic]",
                "daily_schedule[4][leader]",
                "daily_schedule[5]",
                "daily_schedule[5][time]",
                "daily_schedule[5][topic]",
                "daily_schedule[5][leader]",
                "daily_schedule[6]",
                "daily_schedule[6][time]",
                "daily_schedule[6][topic]",
                "daily_schedule[6][leader]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001802_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- List exactly 6 meetings as children under \"daily_schedule\", each using a unique numeric key starting from 1.\n- Each meeting entry must include three keys: \"time\", \"topic\", and \"leader\".\n- The \"time\" values must be strings in HH:MM 24-hour format representing valid times.\n- Every \"topic\" value must be a unique, non-empty string describing the meeting subject.\n- Each \"leader\" value must be a non-empty string containing a full name (first and last name).\n- Use exactly two spaces for indentation for all nested structures.\n- Begin the YAML output with a top-level comment stating \"Generated Daily Meeting Schedule\".\n- Include no additional keys, comments, or blank lines beyond what is specified."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001802_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "daily_schedule",
                                "daily_schedule[1]",
                                "daily_schedule[1][time]",
                                "daily_schedule[1][topic]",
                                "daily_schedule[1][leader]",
                                "daily_schedule[2]",
                                "daily_schedule[2][time]",
                                "daily_schedule[2][topic]",
                                "daily_schedule[2][leader]",
                                "daily_schedule[3]",
                                "daily_schedule[3][time]",
                                "daily_schedule[3][topic]",
                                "daily_schedule[3][leader]",
                                "daily_schedule[4]",
                                "daily_schedule[4][time]",
                                "daily_schedule[4][topic]",
                                "daily_schedule[4][leader]",
                                "daily_schedule[5]",
                                "daily_schedule[5][time]",
                                "daily_schedule[5][topic]",
                                "daily_schedule[5][leader]",
                                "daily_schedule[6]",
                                "daily_schedule[6][time]",
                                "daily_schedule[6][topic]",
                                "daily_schedule[6][leader]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key called \"conference\".\n- Include exactly 3 main keys under \"conference\": \"title\", \"date\", and \"sessions\".\n- The value for \"title\" must be a non-empty string.\n- The value for \"date\" must strictly follow the \"YYYY-MM-DD\" format.\n- \"Sessions\" must be a list containing exactly 3 session items.\n- Each session item must be a mapping with exactly 3 keys: \"topic\", \"speaker\", and \"time\".\n- The \"time\" key in each session must be formatted in a 24-hour \"HH:MM\" style.\n- Provide a top-level comment at the beginning indicating \"Auto-generated Conference Schedule\".",
            "task_id": "001803",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference",
                "conference[title]",
                "conference[date]",
                "conference[sessions]",
                "conference[sessions][0][topic]",
                "conference[sessions][0][speaker]",
                "conference[sessions][0][time]",
                "conference[sessions][1][topic]",
                "conference[sessions][1][speaker]",
                "conference[sessions][1][time]",
                "conference[sessions][2][topic]",
                "conference[sessions][2][speaker]",
                "conference[sessions][2][time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001803_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key called \"conference\".\n- Include exactly 3 main keys under \"conference\": \"title\", \"date\", and \"sessions\".\n- The value for \"title\" must be a non-empty string.\n- The value for \"date\" must strictly follow the \"YYYY-MM-DD\" format.\n- \"Sessions\" must be a list containing exactly 3 session items.\n- Each session item must be a mapping with exactly 3 keys: \"topic\", \"speaker\", and \"time\".\n- The \"time\" key in each session must be formatted in a 24-hour \"HH:MM\" style.\n- Provide a top-level comment at the beginning indicating \"Auto-generated Conference Schedule\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001803_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference",
                                "conference[title]",
                                "conference[date]",
                                "conference[sessions]",
                                "conference[sessions][0][topic]",
                                "conference[sessions][0][speaker]",
                                "conference[sessions][0][time]",
                                "conference[sessions][1][topic]",
                                "conference[sessions][1][speaker]",
                                "conference[sessions][1][time]",
                                "conference[sessions][2][topic]",
                                "conference[sessions][2][speaker]",
                                "conference[sessions][2][time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a top-level comment that says \"Generated Weekly Meal Plan\".\n- Use a single root key named meal_plan.\n- Include exactly 7 keys under meal_plan, each representing a day of the week (e.g., Monday, Tuesday, etc.).\n- Under each day, include exactly 3 keys: breakfast, lunch, and dinner.\n- Each meal (breakfast, lunch, dinner) must be a mapping with two keys: dish and calories.\n- The dish key must have a non-empty string value, and the calories key must have an integer value greater than zero.\n- Ensure all nested structures are indented with two spaces per level.\n- Do not include any extra whitespace or empty lines between entries.",
            "task_id": "001804",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "meal_plan",
                "meal_plan[Monday]",
                "meal_plan[Monday][breakfast]",
                "meal_plan[Monday][breakfast][dish]",
                "meal_plan[Monday][breakfast][calories]",
                "meal_plan[Monday][lunch]",
                "meal_plan[Monday][lunch][dish]",
                "meal_plan[Monday][lunch][calories]",
                "meal_plan[Monday][dinner]",
                "meal_plan[Monday][dinner][dish]",
                "meal_plan[Monday][dinner][calories]",
                "meal_plan[Tuesday]",
                "meal_plan[Tuesday][breakfast]",
                "meal_plan[Tuesday][breakfast][dish]",
                "meal_plan[Tuesday][breakfast][calories]",
                "meal_plan[Tuesday][lunch]",
                "meal_plan[Tuesday][lunch][dish]",
                "meal_plan[Tuesday][lunch][calories]",
                "meal_plan[Tuesday][dinner]",
                "meal_plan[Tuesday][dinner][dish]",
                "meal_plan[Tuesday][dinner][calories]",
                "meal_plan[Wednesday]",
                "meal_plan[Wednesday][breakfast]",
                "meal_plan[Wednesday][breakfast][dish]",
                "meal_plan[Wednesday][breakfast][calories]",
                "meal_plan[Wednesday][lunch]",
                "meal_plan[Wednesday][lunch][dish]",
                "meal_plan[Wednesday][lunch][calories]",
                "meal_plan[Wednesday][dinner]",
                "meal_plan[Wednesday][dinner][dish]",
                "meal_plan[Wednesday][dinner][calories]",
                "meal_plan[Thursday]",
                "meal_plan[Thursday][breakfast]",
                "meal_plan[Thursday][breakfast][dish]",
                "meal_plan[Thursday][breakfast][calories]",
                "meal_plan[Thursday][lunch]",
                "meal_plan[Thursday][lunch][dish]",
                "meal_plan[Thursday][lunch][calories]",
                "meal_plan[Thursday][dinner]",
                "meal_plan[Thursday][dinner][dish]",
                "meal_plan[Thursday][dinner][calories]",
                "meal_plan[Friday]",
                "meal_plan[Friday][breakfast]",
                "meal_plan[Friday][breakfast][dish]",
                "meal_plan[Friday][breakfast][calories]",
                "meal_plan[Friday][lunch]",
                "meal_plan[Friday][lunch][dish]",
                "meal_plan[Friday][lunch][calories]",
                "meal_plan[Friday][dinner]",
                "meal_plan[Friday][dinner][dish]",
                "meal_plan[Friday][dinner][calories]",
                "meal_plan[Saturday]",
                "meal_plan[Saturday][breakfast]",
                "meal_plan[Saturday][breakfast][dish]",
                "meal_plan[Saturday][breakfast][calories]",
                "meal_plan[Saturday][lunch]",
                "meal_plan[Saturday][lunch][dish]",
                "meal_plan[Saturday][lunch][calories]",
                "meal_plan[Saturday][dinner]",
                "meal_plan[Saturday][dinner][dish]",
                "meal_plan[Saturday][dinner][calories]",
                "meal_plan[Sunday]",
                "meal_plan[Sunday][breakfast]",
                "meal_plan[Sunday][breakfast][dish]",
                "meal_plan[Sunday][breakfast][calories]",
                "meal_plan[Sunday][lunch]",
                "meal_plan[Sunday][lunch][dish]",
                "meal_plan[Sunday][lunch][calories]",
                "meal_plan[Sunday][dinner]",
                "meal_plan[Sunday][dinner][dish]",
                "meal_plan[Sunday][dinner][calories]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001804_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a top-level comment that says \"Generated Weekly Meal Plan\".\n- Use a single root key named meal_plan.\n- Include exactly 7 keys under meal_plan, each representing a day of the week (e.g., Monday, Tuesday, etc.).\n- Under each day, include exactly 3 keys: breakfast, lunch, and dinner.\n- Each meal (breakfast, lunch, dinner) must be a mapping with two keys: dish and calories.\n- The dish key must have a non-empty string value, and the calories key must have an integer value greater than zero.\n- Ensure all nested structures are indented with two spaces per level.\n- Do not include any extra whitespace or empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001804_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "meal_plan",
                                "meal_plan[Monday]",
                                "meal_plan[Monday][breakfast]",
                                "meal_plan[Monday][breakfast][dish]",
                                "meal_plan[Monday][breakfast][calories]",
                                "meal_plan[Monday][lunch]",
                                "meal_plan[Monday][lunch][dish]",
                                "meal_plan[Monday][lunch][calories]",
                                "meal_plan[Monday][dinner]",
                                "meal_plan[Monday][dinner][dish]",
                                "meal_plan[Monday][dinner][calories]",
                                "meal_plan[Tuesday]",
                                "meal_plan[Tuesday][breakfast]",
                                "meal_plan[Tuesday][breakfast][dish]",
                                "meal_plan[Tuesday][breakfast][calories]",
                                "meal_plan[Tuesday][lunch]",
                                "meal_plan[Tuesday][lunch][dish]",
                                "meal_plan[Tuesday][lunch][calories]",
                                "meal_plan[Tuesday][dinner]",
                                "meal_plan[Tuesday][dinner][dish]",
                                "meal_plan[Tuesday][dinner][calories]",
                                "meal_plan[Wednesday]",
                                "meal_plan[Wednesday][breakfast]",
                                "meal_plan[Wednesday][breakfast][dish]",
                                "meal_plan[Wednesday][breakfast][calories]",
                                "meal_plan[Wednesday][lunch]",
                                "meal_plan[Wednesday][lunch][dish]",
                                "meal_plan[Wednesday][lunch][calories]",
                                "meal_plan[Wednesday][dinner]",
                                "meal_plan[Wednesday][dinner][dish]",
                                "meal_plan[Wednesday][dinner][calories]",
                                "meal_plan[Thursday]",
                                "meal_plan[Thursday][breakfast]",
                                "meal_plan[Thursday][breakfast][dish]",
                                "meal_plan[Thursday][breakfast][calories]",
                                "meal_plan[Thursday][lunch]",
                                "meal_plan[Thursday][lunch][dish]",
                                "meal_plan[Thursday][lunch][calories]",
                                "meal_plan[Thursday][dinner]",
                                "meal_plan[Thursday][dinner][dish]",
                                "meal_plan[Thursday][dinner][calories]",
                                "meal_plan[Friday]",
                                "meal_plan[Friday][breakfast]",
                                "meal_plan[Friday][breakfast][dish]",
                                "meal_plan[Friday][breakfast][calories]",
                                "meal_plan[Friday][lunch]",
                                "meal_plan[Friday][lunch][dish]",
                                "meal_plan[Friday][lunch][calories]",
                                "meal_plan[Friday][dinner]",
                                "meal_plan[Friday][dinner][dish]",
                                "meal_plan[Friday][dinner][calories]",
                                "meal_plan[Saturday]",
                                "meal_plan[Saturday][breakfast]",
                                "meal_plan[Saturday][breakfast][dish]",
                                "meal_plan[Saturday][breakfast][calories]",
                                "meal_plan[Saturday][lunch]",
                                "meal_plan[Saturday][lunch][dish]",
                                "meal_plan[Saturday][lunch][calories]",
                                "meal_plan[Saturday][dinner]",
                                "meal_plan[Saturday][dinner][dish]",
                                "meal_plan[Saturday][dinner][calories]",
                                "meal_plan[Sunday]",
                                "meal_plan[Sunday][breakfast]",
                                "meal_plan[Sunday][breakfast][dish]",
                                "meal_plan[Sunday][breakfast][calories]",
                                "meal_plan[Sunday][lunch]",
                                "meal_plan[Sunday][lunch][dish]",
                                "meal_plan[Sunday][lunch][calories]",
                                "meal_plan[Sunday][dinner]",
                                "meal_plan[Sunday][dinner][dish]",
                                "meal_plan[Sunday][dinner][calories]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meal_plan\".\n- Include exactly 4 meals: breakfast, lunch, snack, and dinner.\n- Each meal must be a mapping with the keys \"meal_name\", \"time\", and \"menu\".\n- The \"meal_name\" value must be a non-empty string.\n- The \"time\" value must follow the HH:MM 24-hour format.\n- The \"menu\" must be a list containing exactly 3 food items.\n- Each food item in \"menu\" should include two keys: \"dish\" and \"calories\", where \"calories\" is an integer greater than zero.\n- The YAML must be indented with two spaces per nested level.\n- Provide a top-level comment stating \"Generated Daily Meal Plan\".\n- Avoid any extraneous whitespace or blank lines between items.",
            "task_id": "001805",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "meal_plan",
                "meal_plan[breakfast]",
                "meal_plan[breakfast][meal_name]",
                "meal_plan[breakfast][time]",
                "meal_plan[breakfast][menu]",
                "meal_plan[breakfast][menu][][dish]",
                "meal_plan[breakfast][menu][][calories]",
                "meal_plan[lunch]",
                "meal_plan[lunch][meal_name]",
                "meal_plan[lunch][time]",
                "meal_plan[lunch][menu]",
                "meal_plan[lunch][menu][][dish]",
                "meal_plan[lunch][menu][][calories]",
                "meal_plan[snack]",
                "meal_plan[snack][meal_name]",
                "meal_plan[snack][time]",
                "meal_plan[snack][menu]",
                "meal_plan[snack][menu][][dish]",
                "meal_plan[snack][menu][][calories]",
                "meal_plan[dinner]",
                "meal_plan[dinner][meal_name]",
                "meal_plan[dinner][time]",
                "meal_plan[dinner][menu]",
                "meal_plan[dinner][menu][][dish]",
                "meal_plan[dinner][menu][][calories]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001805_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meal_plan\".\n- Include exactly 4 meals: breakfast, lunch, snack, and dinner.\n- Each meal must be a mapping with the keys \"meal_name\", \"time\", and \"menu\".\n- The \"meal_name\" value must be a non-empty string.\n- The \"time\" value must follow the HH:MM 24-hour format.\n- The \"menu\" must be a list containing exactly 3 food items.\n- Each food item in \"menu\" should include two keys: \"dish\" and \"calories\", where \"calories\" is an integer greater than zero.\n- The YAML must be indented with two spaces per nested level.\n- Provide a top-level comment stating \"Generated Daily Meal Plan\".\n- Avoid any extraneous whitespace or blank lines between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001805_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "meal_plan",
                                "meal_plan[breakfast]",
                                "meal_plan[breakfast][meal_name]",
                                "meal_plan[breakfast][time]",
                                "meal_plan[breakfast][menu]",
                                "meal_plan[breakfast][menu][][dish]",
                                "meal_plan[breakfast][menu][][calories]",
                                "meal_plan[lunch]",
                                "meal_plan[lunch][meal_name]",
                                "meal_plan[lunch][time]",
                                "meal_plan[lunch][menu]",
                                "meal_plan[lunch][menu][][dish]",
                                "meal_plan[lunch][menu][][calories]",
                                "meal_plan[snack]",
                                "meal_plan[snack][meal_name]",
                                "meal_plan[snack][time]",
                                "meal_plan[snack][menu]",
                                "meal_plan[snack][menu][][dish]",
                                "meal_plan[snack][menu][][calories]",
                                "meal_plan[dinner]",
                                "meal_plan[dinner][meal_name]",
                                "meal_plan[dinner][time]",
                                "meal_plan[dinner][menu]",
                                "meal_plan[dinner][menu][][dish]",
                                "meal_plan[dinner][menu][][calories]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the provided narrative into a YAML format representing a roster of fantasy tournament competitors.\n\nFeature Requirements:\n- Begin with a top-level key named \"tournament_roster\".\n- Under \"tournament_roster\", include exactly 8 competitor entries.\n- Each competitor entry must have three keys: \"name\", \"rank\", and \"weapon\".\n- The \"name\" key must contain a non-empty string representing the competitor’s name.\n- The \"rank\" key must contain an integer between 1 and 100.\n- The \"weapon\" key must contain a non-empty string describing the competitor’s chosen weapon.\n- The YAML output must use exactly two spaces for each level of indentation.\n- Include a top-level comment stating \"Fantasy Tournament Roster\".\n- Ensure there is no extra whitespace or empty lines between entries.",
            "task_id": "001806",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "tournament_roster",
                "tournament_roster[*][name]",
                "tournament_roster[*][rank]",
                "tournament_roster[*][weapon]",
                "top-level comment: Fantasy Tournament Roster"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001806_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the provided narrative into a YAML format representing a roster of fantasy tournament competitors.\n\nFeature Requirements:\n- Begin with a top-level key named \"tournament_roster\".\n- Under \"tournament_roster\", include exactly 8 competitor entries.\n- Each competitor entry must have three keys: \"name\", \"rank\", and \"weapon\".\n- The \"name\" key must contain a non-empty string representing the competitor’s name.\n- The \"rank\" key must contain an integer between 1 and 100.\n- The \"weapon\" key must contain a non-empty string describing the competitor’s chosen weapon.\n- The YAML output must use exactly two spaces for each level of indentation.\n- Include a top-level comment stating \"Fantasy Tournament Roster\".\n- Ensure there is no extra whitespace or empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001806_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "tournament_roster",
                                "tournament_roster[*][name]",
                                "tournament_roster[*][rank]",
                                "tournament_roster[*][weapon]",
                                "top-level comment: Fantasy Tournament Roster"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a film schedule for a cinema program.\n\nFeature Requirements:\n- Begin with a top-level key named \"schedule\".\n- Include exactly 6 films under the \"schedule\" key.\n- Each film must be represented as a mapping with three keys: \"title\", \"director\", and \"duration\".\n- The \"title\" and \"director\" keys should have non-empty string values.\n- The \"duration\" key must hold an integer value that is between 60 and 240, inclusive.\n- Use exactly two spaces for each indentation level in the YAML.\n- Include a top-level YAML comment at the very beginning stating \"Generated Film Schedule\".",
            "task_id": "001807",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "schedule",
                "schedule[0][title]",
                "schedule[0][director]",
                "schedule[0][duration]",
                "schedule[1][title]",
                "schedule[1][director]",
                "schedule[1][duration]",
                "schedule[2][title]",
                "schedule[2][director]",
                "schedule[2][duration]",
                "schedule[3][title]",
                "schedule[3][director]",
                "schedule[3][duration]",
                "schedule[4][title]",
                "schedule[4][director]",
                "schedule[4][duration]",
                "schedule[5][title]",
                "schedule[5][director]",
                "schedule[5][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001807_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a film schedule for a cinema program.\n\nFeature Requirements:\n- Begin with a top-level key named \"schedule\".\n- Include exactly 6 films under the \"schedule\" key.\n- Each film must be represented as a mapping with three keys: \"title\", \"director\", and \"duration\".\n- The \"title\" and \"director\" keys should have non-empty string values.\n- The \"duration\" key must hold an integer value that is between 60 and 240, inclusive.\n- Use exactly two spaces for each indentation level in the YAML.\n- Include a top-level YAML comment at the very beginning stating \"Generated Film Schedule\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001807_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "schedule",
                                "schedule[0][title]",
                                "schedule[0][director]",
                                "schedule[0][duration]",
                                "schedule[1][title]",
                                "schedule[1][director]",
                                "schedule[1][duration]",
                                "schedule[2][title]",
                                "schedule[2][director]",
                                "schedule[2][duration]",
                                "schedule[3][title]",
                                "schedule[3][director]",
                                "schedule[3][duration]",
                                "schedule[4][title]",
                                "schedule[4][director]",
                                "schedule[4][duration]",
                                "schedule[5][title]",
                                "schedule[5][director]",
                                "schedule[5][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nGenerate a YAML file representing a fictional event schedule for a community day festival.\n\nFeature Requirements:\n- The top-level key must be named \"community_festival\".\n- Include exactly three session keys: \"morning_session\", \"afternoon_session\", and \"evening_session\".\n- Each session must be a list containing exactly 3 event objects.\n- Every event object must include two keys: \"title\" and \"time\".\n- The \"title\" key must have a non-empty string value, and the \"time\" key must have a value in the \"HH:MM\" 24-hour format.\n- Include a top-level comment stating \"Generated Community Festival Schedule\".\n- Ensure each event within a session has a unique \"time\" value.\n- Use exactly two spaces for indentation for all nested structures.\n- Avoid any extra whitespace or blank lines between items.",
            "task_id": "001808",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "community_festival",
                "community_festival[morning_session]",
                "community_festival[morning_session][0][title]",
                "community_festival[morning_session][0][time]",
                "community_festival[morning_session][1][title]",
                "community_festival[morning_session][1][time]",
                "community_festival[morning_session][2][title]",
                "community_festival[morning_session][2][time]",
                "community_festival[afternoon_session]",
                "community_festival[afternoon_session][0][title]",
                "community_festival[afternoon_session][0][time]",
                "community_festival[afternoon_session][1][title]",
                "community_festival[afternoon_session][1][time]",
                "community_festival[afternoon_session][2][title]",
                "community_festival[afternoon_session][2][time]",
                "community_festival[evening_session]",
                "community_festival[evening_session][0][title]",
                "community_festival[evening_session][0][time]",
                "community_festival[evening_session][1][title]",
                "community_festival[evening_session][1][time]",
                "community_festival[evening_session][2][title]",
                "community_festival[evening_session][2][time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001808_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nGenerate a YAML file representing a fictional event schedule for a community day festival.\n\nFeature Requirements:\n- The top-level key must be named \"community_festival\".\n- Include exactly three session keys: \"morning_session\", \"afternoon_session\", and \"evening_session\".\n- Each session must be a list containing exactly 3 event objects.\n- Every event object must include two keys: \"title\" and \"time\".\n- The \"title\" key must have a non-empty string value, and the \"time\" key must have a value in the \"HH:MM\" 24-hour format.\n- Include a top-level comment stating \"Generated Community Festival Schedule\".\n- Ensure each event within a session has a unique \"time\" value.\n- Use exactly two spaces for indentation for all nested structures.\n- Avoid any extra whitespace or blank lines between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001808_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "community_festival",
                                "community_festival[morning_session]",
                                "community_festival[morning_session][0][title]",
                                "community_festival[morning_session][0][time]",
                                "community_festival[morning_session][1][title]",
                                "community_festival[morning_session][1][time]",
                                "community_festival[morning_session][2][title]",
                                "community_festival[morning_session][2][time]",
                                "community_festival[afternoon_session]",
                                "community_festival[afternoon_session][0][title]",
                                "community_festival[afternoon_session][0][time]",
                                "community_festival[afternoon_session][1][title]",
                                "community_festival[afternoon_session][1][time]",
                                "community_festival[afternoon_session][2][title]",
                                "community_festival[afternoon_session][2][time]",
                                "community_festival[evening_session]",
                                "community_festival[evening_session][0][title]",
                                "community_festival[evening_session][0][time]",
                                "community_festival[evening_session][1][title]",
                                "community_festival[evening_session][1][time]",
                                "community_festival[evening_session][2][title]",
                                "community_festival[evening_session][2][time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a top-level key named \"library_catalog\".\n- Include exactly 8 book entries as children under \"library_catalog\".\n- Each book entry must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" and \"author\" keys must contain non-empty string values.\n- All \"year\" values must be integers ranging from 1900 to 2023.\n- List the book entries as a numbered sequence, starting from 1.\n- Provide a top-level comment stating \"Generated Book Catalog\".\n- Ensure all nested structures are indented with exactly two spaces.\n- Do not include any extraneous whitespace or additional comments beyond the top-level comment.",
            "task_id": "001809",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Generated Book Catalog",
                "library_catalog",
                "library_catalog[1][title]",
                "library_catalog[1][author]",
                "library_catalog[1][year]",
                "library_catalog[2][title]",
                "library_catalog[2][author]",
                "library_catalog[2][year]",
                "library_catalog[3][title]",
                "library_catalog[3][author]",
                "library_catalog[3][year]",
                "library_catalog[4][title]",
                "library_catalog[4][author]",
                "library_catalog[4][year]",
                "library_catalog[5][title]",
                "library_catalog[5][author]",
                "library_catalog[5][year]",
                "library_catalog[6][title]",
                "library_catalog[6][author]",
                "library_catalog[6][year]",
                "library_catalog[7][title]",
                "library_catalog[7][author]",
                "library_catalog[7][year]",
                "library_catalog[8][title]",
                "library_catalog[8][author]",
                "library_catalog[8][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001809_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a top-level key named \"library_catalog\".\n- Include exactly 8 book entries as children under \"library_catalog\".\n- Each book entry must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" and \"author\" keys must contain non-empty string values.\n- All \"year\" values must be integers ranging from 1900 to 2023.\n- List the book entries as a numbered sequence, starting from 1.\n- Provide a top-level comment stating \"Generated Book Catalog\".\n- Ensure all nested structures are indented with exactly two spaces.\n- Do not include any extraneous whitespace or additional comments beyond the top-level comment."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001809_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Generated Book Catalog",
                                "library_catalog",
                                "library_catalog[1][title]",
                                "library_catalog[1][author]",
                                "library_catalog[1][year]",
                                "library_catalog[2][title]",
                                "library_catalog[2][author]",
                                "library_catalog[2][year]",
                                "library_catalog[3][title]",
                                "library_catalog[3][author]",
                                "library_catalog[3][year]",
                                "library_catalog[4][title]",
                                "library_catalog[4][author]",
                                "library_catalog[4][year]",
                                "library_catalog[5][title]",
                                "library_catalog[5][author]",
                                "library_catalog[5][year]",
                                "library_catalog[6][title]",
                                "library_catalog[6][author]",
                                "library_catalog[6][year]",
                                "library_catalog[7][title]",
                                "library_catalog[7][author]",
                                "library_catalog[7][year]",
                                "library_catalog[8][title]",
                                "library_catalog[8][author]",
                                "library_catalog[8][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meditation schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meditation_schedule\".\n- Include exactly 7 entries under \"meditation_schedule\", each corresponding to a day of the week starting from Monday.\n- Each day's entry must be an object with two keys: \"duration\" and \"technique\".\n- The \"duration\" key must have an integer value representing minutes, and this value must be at least 10.\n- The \"technique\" key must contain a non-empty string describing the meditation method for that day.\n- Each day's entry should be ordered sequentially from Monday to Sunday, with proper indentation using two spaces.\n- Include a top-level comment at the beginning of the YAML output stating \"Generated Weekly Meditation Schedule\".",
            "task_id": "001810",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "meditation_schedule",
                "meditation_schedule[Monday]",
                "meditation_schedule[Monday][duration]",
                "meditation_schedule[Monday][technique]",
                "meditation_schedule[Tuesday]",
                "meditation_schedule[Tuesday][duration]",
                "meditation_schedule[Tuesday][technique]",
                "meditation_schedule[Wednesday]",
                "meditation_schedule[Wednesday][duration]",
                "meditation_schedule[Wednesday][technique]",
                "meditation_schedule[Thursday]",
                "meditation_schedule[Thursday][duration]",
                "meditation_schedule[Thursday][technique]",
                "meditation_schedule[Friday]",
                "meditation_schedule[Friday][duration]",
                "meditation_schedule[Friday][technique]",
                "meditation_schedule[Saturday]",
                "meditation_schedule[Saturday][duration]",
                "meditation_schedule[Saturday][technique]",
                "meditation_schedule[Sunday]",
                "meditation_schedule[Sunday][duration]",
                "meditation_schedule[Sunday][technique]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001810_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meditation schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meditation_schedule\".\n- Include exactly 7 entries under \"meditation_schedule\", each corresponding to a day of the week starting from Monday.\n- Each day's entry must be an object with two keys: \"duration\" and \"technique\".\n- The \"duration\" key must have an integer value representing minutes, and this value must be at least 10.\n- The \"technique\" key must contain a non-empty string describing the meditation method for that day.\n- Each day's entry should be ordered sequentially from Monday to Sunday, with proper indentation using two spaces.\n- Include a top-level comment at the beginning of the YAML output stating \"Generated Weekly Meditation Schedule\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001810_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "meditation_schedule",
                                "meditation_schedule[Monday]",
                                "meditation_schedule[Monday][duration]",
                                "meditation_schedule[Monday][technique]",
                                "meditation_schedule[Tuesday]",
                                "meditation_schedule[Tuesday][duration]",
                                "meditation_schedule[Tuesday][technique]",
                                "meditation_schedule[Wednesday]",
                                "meditation_schedule[Wednesday][duration]",
                                "meditation_schedule[Wednesday][technique]",
                                "meditation_schedule[Thursday]",
                                "meditation_schedule[Thursday][duration]",
                                "meditation_schedule[Thursday][technique]",
                                "meditation_schedule[Friday]",
                                "meditation_schedule[Friday][duration]",
                                "meditation_schedule[Friday][technique]",
                                "meditation_schedule[Saturday]",
                                "meditation_schedule[Saturday][duration]",
                                "meditation_schedule[Saturday][technique]",
                                "meditation_schedule[Sunday]",
                                "meditation_schedule[Sunday][duration]",
                                "meditation_schedule[Sunday][technique]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily weather report.\n\nFeature Requirements:\n- Begin with a top-level key named \"weather_report\".\n- Under \"weather_report\", include subkeys \"location\", \"date\", \"forecast\", and \"alerts\".\n- The \"location\" key must have two keys: \"city\" and \"country\", each with non-empty string values.\n- The \"date\" key must contain a string following the ISO 8601 date format (YYYY-MM-DD).\n- The \"forecast\" key must be a list containing exactly 3 items, where each item includes the keys \"time\" (formatted as HH:MM) and \"temperature\" (an integer representing degrees).\n- The \"alerts\" key must be a list with at least one element, where each element is a non-empty string describing a specific weather condition.\n- Ensure all YAML nested blocks are indented with two spaces.\n- Include a top-level comment at the very beginning of the YAML output stating \"Daily Weather Report\".\n- Do not include any additional keys, extra lines, or content beyond what is specified.",
            "task_id": "001811",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "weather_report",
                "weather_report[location]",
                "weather_report[location][city]",
                "weather_report[location][country]",
                "weather_report[date]",
                "weather_report[forecast]",
                "weather_report[forecast][0][time]",
                "weather_report[forecast][0][temperature]",
                "weather_report[forecast][1][time]",
                "weather_report[forecast][1][temperature]",
                "weather_report[forecast][2][time]",
                "weather_report[forecast][2][temperature]",
                "weather_report[alerts]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001811_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily weather report.\n\nFeature Requirements:\n- Begin with a top-level key named \"weather_report\".\n- Under \"weather_report\", include subkeys \"location\", \"date\", \"forecast\", and \"alerts\".\n- The \"location\" key must have two keys: \"city\" and \"country\", each with non-empty string values.\n- The \"date\" key must contain a string following the ISO 8601 date format (YYYY-MM-DD).\n- The \"forecast\" key must be a list containing exactly 3 items, where each item includes the keys \"time\" (formatted as HH:MM) and \"temperature\" (an integer representing degrees).\n- The \"alerts\" key must be a list with at least one element, where each element is a non-empty string describing a specific weather condition.\n- Ensure all YAML nested blocks are indented with two spaces.\n- Include a top-level comment at the very beginning of the YAML output stating \"Daily Weather Report\".\n- Do not include any additional keys, extra lines, or content beyond what is specified."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001811_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "weather_report",
                                "weather_report[location]",
                                "weather_report[location][city]",
                                "weather_report[location][country]",
                                "weather_report[date]",
                                "weather_report[forecast]",
                                "weather_report[forecast][0][time]",
                                "weather_report[forecast][0][temperature]",
                                "weather_report[forecast][1][time]",
                                "weather_report[forecast][1][temperature]",
                                "weather_report[forecast][2][time]",
                                "weather_report[forecast][2][temperature]",
                                "weather_report[alerts]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary for a multi-day adventure.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 days as children under itinerary.\n- Each day must have a key named day_number with an integer value from 1 to 4.\n- Under each day, include a list named activities with exactly 3 items.\n- Each activity must contain two keys: activity_name (a non-empty string) and time (a string in HH:MM 24-hour format).\n- Ensure the YAML uses two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between defined items.\n- Do not include any elements beyond the specified keys and structure.",
            "task_id": "001812",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[*][day_number]",
                "itinerary[*][activities]",
                "itinerary[*][activities][*][activity_name]",
                "itinerary[*][activities][*][time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001812_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary for a multi-day adventure.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 days as children under itinerary.\n- Each day must have a key named day_number with an integer value from 1 to 4.\n- Under each day, include a list named activities with exactly 3 items.\n- Each activity must contain two keys: activity_name (a non-empty string) and time (a string in HH:MM 24-hour format).\n- Ensure the YAML uses two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between defined items.\n- Do not include any elements beyond the specified keys and structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001812_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[*][day_number]",
                                "itinerary[*][activities]",
                                "itinerary[*][activities][*][activity_name]",
                                "itinerary[*][activities][*][time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a company meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named conference_schedule.\n- Include exactly 6 meeting entries as children under conference_schedule.\n- Each meeting must have three keys: title, time, and room.\n- Each title key must be a non-empty string clearly describing the meeting topic.\n- Each time key must be formatted as HH:MM using 24-hour time notation.\n- Each room key must be a non-empty string indicating a specific meeting room.\n- Ensure that nested keys are indented with exactly two spaces per level.\n- Provide a top-level comment line that reads \"Generated Company Meeting Schedule\".\n- Do not include any extra keys or unnecessary whitespace in the output.\n- Output the YAML strictly as specified without using triple backticks or additional formatting.",
            "task_id": "001813",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_schedule",
                "conference_schedule[*][title]",
                "conference_schedule[*][time]",
                "conference_schedule[*][room]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001813_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a company meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named conference_schedule.\n- Include exactly 6 meeting entries as children under conference_schedule.\n- Each meeting must have three keys: title, time, and room.\n- Each title key must be a non-empty string clearly describing the meeting topic.\n- Each time key must be formatted as HH:MM using 24-hour time notation.\n- Each room key must be a non-empty string indicating a specific meeting room.\n- Ensure that nested keys are indented with exactly two spaces per level.\n- Provide a top-level comment line that reads \"Generated Company Meeting Schedule\".\n- Do not include any extra keys or unnecessary whitespace in the output.\n- Output the YAML strictly as specified without using triple backticks or additional formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001813_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_schedule",
                                "conference_schedule[*][title]",
                                "conference_schedule[*][time]",
                                "conference_schedule[*][room]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing an inventory of musical instruments for a band.\n\nFeature Requirements:\n- Begin with a single key named \"band_inventory\".\n- Include exactly 7 instruments as children under \"band_inventory\".\n- Each instrument entry must have three keys: \"instrument\", \"brand\", and \"year\".\n- The \"instrument\" key must contain a non-empty string value describing the type of instrument.\n- The \"brand\" key must contain a non-empty string value with a minimum of three characters.\n- The \"year\" key must contain an integer value between 1900 and 2023, inclusive.\n- Ensure the YAML is properly indented using two spaces for nested structures.\n- Provide a top-level comment stating \"Band Inventory Data\".\n- Avoid any extra keys, whitespace, or additional empty lines between entries.",
            "task_id": "001814",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "band_inventory",
                "band_inventory[0][instrument]",
                "band_inventory[0][brand]",
                "band_inventory[0][year]",
                "band_inventory[1][instrument]",
                "band_inventory[1][brand]",
                "band_inventory[1][year]",
                "band_inventory[2][instrument]",
                "band_inventory[2][brand]",
                "band_inventory[2][year]",
                "band_inventory[3][instrument]",
                "band_inventory[3][brand]",
                "band_inventory[3][year]",
                "band_inventory[4][instrument]",
                "band_inventory[4][brand]",
                "band_inventory[4][year]",
                "band_inventory[5][instrument]",
                "band_inventory[5][brand]",
                "band_inventory[5][year]",
                "band_inventory[6][instrument]",
                "band_inventory[6][brand]",
                "band_inventory[6][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001814_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing an inventory of musical instruments for a band.\n\nFeature Requirements:\n- Begin with a single key named \"band_inventory\".\n- Include exactly 7 instruments as children under \"band_inventory\".\n- Each instrument entry must have three keys: \"instrument\", \"brand\", and \"year\".\n- The \"instrument\" key must contain a non-empty string value describing the type of instrument.\n- The \"brand\" key must contain a non-empty string value with a minimum of three characters.\n- The \"year\" key must contain an integer value between 1900 and 2023, inclusive.\n- Ensure the YAML is properly indented using two spaces for nested structures.\n- Provide a top-level comment stating \"Band Inventory Data\".\n- Avoid any extra keys, whitespace, or additional empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001814_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "band_inventory",
                                "band_inventory[0][instrument]",
                                "band_inventory[0][brand]",
                                "band_inventory[0][year]",
                                "band_inventory[1][instrument]",
                                "band_inventory[1][brand]",
                                "band_inventory[1][year]",
                                "band_inventory[2][instrument]",
                                "band_inventory[2][brand]",
                                "band_inventory[2][year]",
                                "band_inventory[3][instrument]",
                                "band_inventory[3][brand]",
                                "band_inventory[3][year]",
                                "band_inventory[4][instrument]",
                                "band_inventory[4][brand]",
                                "band_inventory[4][year]",
                                "band_inventory[5][instrument]",
                                "band_inventory[5][brand]",
                                "band_inventory[5][year]",
                                "band_inventory[6][instrument]",
                                "band_inventory[6][brand]",
                                "band_inventory[6][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a mini conference schedule.\n\nFeature Requirements:\n- Begin with a single key named conference_schedule.\n- Include exactly 3 sessions as children under conference_schedule.\n- Each session must have four keys: session_title, start_time, duration_minutes, and presenter.\n- The session_title and presenter keys must have non-empty string values.\n- The start_time key must follow a 24-hour time format (HH:MM).\n- The duration_minutes key must contain an integer value greater than zero.\n- Provide a top-level comment indicating \"Generated Conference Schedule\" at the very beginning of the output.\n- Ensure the output is properly indented using exactly two spaces for nested structures.\n- Avoid any extra whitespace or empty lines between the sessions.",
            "task_id": "001815",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_schedule",
                "conference_schedule[0][session_title]",
                "conference_schedule[0][start_time]",
                "conference_schedule[0][duration_minutes]",
                "conference_schedule[0][presenter]",
                "conference_schedule[1][session_title]",
                "conference_schedule[1][start_time]",
                "conference_schedule[1][duration_minutes]",
                "conference_schedule[1][presenter]",
                "conference_schedule[2][session_title]",
                "conference_schedule[2][start_time]",
                "conference_schedule[2][duration_minutes]",
                "conference_schedule[2][presenter]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001815_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a mini conference schedule.\n\nFeature Requirements:\n- Begin with a single key named conference_schedule.\n- Include exactly 3 sessions as children under conference_schedule.\n- Each session must have four keys: session_title, start_time, duration_minutes, and presenter.\n- The session_title and presenter keys must have non-empty string values.\n- The start_time key must follow a 24-hour time format (HH:MM).\n- The duration_minutes key must contain an integer value greater than zero.\n- Provide a top-level comment indicating \"Generated Conference Schedule\" at the very beginning of the output.\n- Ensure the output is properly indented using exactly two spaces for nested structures.\n- Avoid any extra whitespace or empty lines between the sessions."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001815_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_schedule",
                                "conference_schedule[0][session_title]",
                                "conference_schedule[0][start_time]",
                                "conference_schedule[0][duration_minutes]",
                                "conference_schedule[0][presenter]",
                                "conference_schedule[1][session_title]",
                                "conference_schedule[1][start_time]",
                                "conference_schedule[1][duration_minutes]",
                                "conference_schedule[1][presenter]",
                                "conference_schedule[2][session_title]",
                                "conference_schedule[2][start_time]",
                                "conference_schedule[2][duration_minutes]",
                                "conference_schedule[2][presenter]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital recipe collection.\n\nFeature Requirements:\n- Begin with a single key named \"recipe_collection\".\n- Include exactly 7 recipes as items under \"recipe_collection\".\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"prep_time\".\n- \"title\" must have a unique non-empty string value for each recipe.\n- \"ingredients\" must be a list containing at least 3 non-empty string values per recipe.\n- \"prep_time\" must be a positive integer indicating preparation time in minutes.\n- Ensure that the YAML structure uses two spaces for each level of indentation.\n- Include a top-level comment stating \"Digital Recipe Collection\".\n- Do not include any extra keys or unnecessary whitespace in the output.",
            "task_id": "001816",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "top-level comment (\"Digital Recipe Collection\")",
                "recipe_collection",
                "recipe_collection[*][title]",
                "recipe_collection[*][ingredients]",
                "recipe_collection[*][prep_time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001816_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital recipe collection.\n\nFeature Requirements:\n- Begin with a single key named \"recipe_collection\".\n- Include exactly 7 recipes as items under \"recipe_collection\".\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"prep_time\".\n- \"title\" must have a unique non-empty string value for each recipe.\n- \"ingredients\" must be a list containing at least 3 non-empty string values per recipe.\n- \"prep_time\" must be a positive integer indicating preparation time in minutes.\n- Ensure that the YAML structure uses two spaces for each level of indentation.\n- Include a top-level comment stating \"Digital Recipe Collection\".\n- Do not include any extra keys or unnecessary whitespace in the output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001816_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "top-level comment (\"Digital Recipe Collection\")",
                                "recipe_collection",
                                "recipe_collection[*][title]",
                                "recipe_collection[*][ingredients]",
                                "recipe_collection[*][prep_time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the provided travel plan details into a YAML formatted daily itinerary.\n\nFeature Requirements:\n- Begin with a single key named travel_itinerary.\n- Include exactly 3 entries under travel_itinerary representing individual travel days.\n- Each entry must have two keys: destination and activities.\n- The destination key should have a non-empty string value describing the location.\n- The activities key should contain a list of exactly 2 non-empty string values detailing planned activities for the day.\n- The YAML output must be indented with exactly two spaces per level.\n- Include a top-level comment that reads \"Itinerary for Vacation\".\n- Ensure there is no extra whitespace or empty lines between the entries.\n- All values must be clearly structured as described and conform to valid YAML syntax.",
            "task_id": "001817",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "travel_itinerary",
                "travel_itinerary[0].destination",
                "travel_itinerary[0].activities",
                "travel_itinerary[0].activities[0]",
                "travel_itinerary[0].activities[1]",
                "travel_itinerary[1].destination",
                "travel_itinerary[1].activities",
                "travel_itinerary[1].activities[0]",
                "travel_itinerary[1].activities[1]",
                "travel_itinerary[2].destination",
                "travel_itinerary[2].activities",
                "travel_itinerary[2].activities[0]",
                "travel_itinerary[2].activities[1]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001817_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the provided travel plan details into a YAML formatted daily itinerary.\n\nFeature Requirements:\n- Begin with a single key named travel_itinerary.\n- Include exactly 3 entries under travel_itinerary representing individual travel days.\n- Each entry must have two keys: destination and activities.\n- The destination key should have a non-empty string value describing the location.\n- The activities key should contain a list of exactly 2 non-empty string values detailing planned activities for the day.\n- The YAML output must be indented with exactly two spaces per level.\n- Include a top-level comment that reads \"Itinerary for Vacation\".\n- Ensure there is no extra whitespace or empty lines between the entries.\n- All values must be clearly structured as described and conform to valid YAML syntax."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001817_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "travel_itinerary",
                                "travel_itinerary[0].destination",
                                "travel_itinerary[0].activities",
                                "travel_itinerary[0].activities[0]",
                                "travel_itinerary[0].activities[1]",
                                "travel_itinerary[1].destination",
                                "travel_itinerary[1].activities",
                                "travel_itinerary[1].activities[0]",
                                "travel_itinerary[1].activities[1]",
                                "travel_itinerary[2].destination",
                                "travel_itinerary[2].activities",
                                "travel_itinerary[2].activities[0]",
                                "travel_itinerary[2].activities[1]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly conference schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"conference_schedule\".\n- Include exactly 7 child keys under \"conference_schedule\", each representing a day of the week.\n- Under each day, include a list key named \"sessions\".\n- Each session must be an object with two keys: \"topic\" and \"time\".\n- The \"topic\" key should hold a non-empty string describing the session.\n- The \"time\" key should hold a string indicating the starting time in 24-hour format (HH:MM).\n- Ensure that each day's schedule includes at least one session.\n- Format the YAML using exactly 2 spaces for each level of indentation.\n- Precede the YAML content with a top-level comment stating \"Generated Conference Itinerary\".\n- Avoid any extra whitespace or blank lines between items.",
            "task_id": "001818",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_schedule",
                "conference_schedule[Monday]",
                "conference_schedule[Monday][sessions]",
                "conference_schedule[Monday][sessions][*][topic]",
                "conference_schedule[Monday][sessions][*][time]",
                "conference_schedule[Tuesday]",
                "conference_schedule[Tuesday][sessions]",
                "conference_schedule[Tuesday][sessions][*][topic]",
                "conference_schedule[Tuesday][sessions][*][time]",
                "conference_schedule[Wednesday]",
                "conference_schedule[Wednesday][sessions]",
                "conference_schedule[Wednesday][sessions][*][topic]",
                "conference_schedule[Wednesday][sessions][*][time]",
                "conference_schedule[Thursday]",
                "conference_schedule[Thursday][sessions]",
                "conference_schedule[Thursday][sessions][*][topic]",
                "conference_schedule[Thursday][sessions][*][time]",
                "conference_schedule[Friday]",
                "conference_schedule[Friday][sessions]",
                "conference_schedule[Friday][sessions][*][topic]",
                "conference_schedule[Friday][sessions][*][time]",
                "conference_schedule[Saturday]",
                "conference_schedule[Saturday][sessions]",
                "conference_schedule[Saturday][sessions][*][topic]",
                "conference_schedule[Saturday][sessions][*][time]",
                "conference_schedule[Sunday]",
                "conference_schedule[Sunday][sessions]",
                "conference_schedule[Sunday][sessions][*][topic]",
                "conference_schedule[Sunday][sessions][*][time]",
                "# Generated Conference Itinerary"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001818_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly conference schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"conference_schedule\".\n- Include exactly 7 child keys under \"conference_schedule\", each representing a day of the week.\n- Under each day, include a list key named \"sessions\".\n- Each session must be an object with two keys: \"topic\" and \"time\".\n- The \"topic\" key should hold a non-empty string describing the session.\n- The \"time\" key should hold a string indicating the starting time in 24-hour format (HH:MM).\n- Ensure that each day's schedule includes at least one session.\n- Format the YAML using exactly 2 spaces for each level of indentation.\n- Precede the YAML content with a top-level comment stating \"Generated Conference Itinerary\".\n- Avoid any extra whitespace or blank lines between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001818_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_schedule",
                                "conference_schedule[Monday]",
                                "conference_schedule[Monday][sessions]",
                                "conference_schedule[Monday][sessions][*][topic]",
                                "conference_schedule[Monday][sessions][*][time]",
                                "conference_schedule[Tuesday]",
                                "conference_schedule[Tuesday][sessions]",
                                "conference_schedule[Tuesday][sessions][*][topic]",
                                "conference_schedule[Tuesday][sessions][*][time]",
                                "conference_schedule[Wednesday]",
                                "conference_schedule[Wednesday][sessions]",
                                "conference_schedule[Wednesday][sessions][*][topic]",
                                "conference_schedule[Wednesday][sessions][*][time]",
                                "conference_schedule[Thursday]",
                                "conference_schedule[Thursday][sessions]",
                                "conference_schedule[Thursday][sessions][*][topic]",
                                "conference_schedule[Thursday][sessions][*][time]",
                                "conference_schedule[Friday]",
                                "conference_schedule[Friday][sessions]",
                                "conference_schedule[Friday][sessions][*][topic]",
                                "conference_schedule[Friday][sessions][*][time]",
                                "conference_schedule[Saturday]",
                                "conference_schedule[Saturday][sessions]",
                                "conference_schedule[Saturday][sessions][*][topic]",
                                "conference_schedule[Saturday][sessions][*][time]",
                                "conference_schedule[Sunday]",
                                "conference_schedule[Sunday][sessions]",
                                "conference_schedule[Sunday][sessions][*][topic]",
                                "conference_schedule[Sunday][sessions][*][time]",
                                "# Generated Conference Itinerary"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal reading log.\n\nFeature Requirements:\n- The output must begin with a top-level key named \"reading_log\".\n- Include exactly 7 entries as children under \"reading_log\".\n- Each entry must have three keys: \"book_title\", \"author\", and \"pages_read\".\n- All \"book_title\" keys must contain non-empty string values.\n- All \"author\" keys must contain non-empty string values.\n- All \"pages_read\" keys must include integer values strictly greater than zero.\n- Use two spaces for indentation at every nested level.\n- Include a top-level comment that reads \"Generated Reading Log\".\n- Avoid any additional whitespace or empty lines between entries.\n- Do NOT wrap any content in triple backticks or any other code block formatting.",
            "task_id": "001819",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "reading_log",
                "reading_log[0][book_title]",
                "reading_log[0][author]",
                "reading_log[0][pages_read]",
                "reading_log[1][book_title]",
                "reading_log[1][author]",
                "reading_log[1][pages_read]",
                "reading_log[2][book_title]",
                "reading_log[2][author]",
                "reading_log[2][pages_read]",
                "reading_log[3][book_title]",
                "reading_log[3][author]",
                "reading_log[3][pages_read]",
                "reading_log[4][book_title]",
                "reading_log[4][author]",
                "reading_log[4][pages_read]",
                "reading_log[5][book_title]",
                "reading_log[5][author]",
                "reading_log[5][pages_read]",
                "reading_log[6][book_title]",
                "reading_log[6][author]",
                "reading_log[6][pages_read]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001819_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal reading log.\n\nFeature Requirements:\n- The output must begin with a top-level key named \"reading_log\".\n- Include exactly 7 entries as children under \"reading_log\".\n- Each entry must have three keys: \"book_title\", \"author\", and \"pages_read\".\n- All \"book_title\" keys must contain non-empty string values.\n- All \"author\" keys must contain non-empty string values.\n- All \"pages_read\" keys must include integer values strictly greater than zero.\n- Use two spaces for indentation at every nested level.\n- Include a top-level comment that reads \"Generated Reading Log\".\n- Avoid any additional whitespace or empty lines between entries.\n- Do NOT wrap any content in triple backticks or any other code block formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001819_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "reading_log",
                                "reading_log[0][book_title]",
                                "reading_log[0][author]",
                                "reading_log[0][pages_read]",
                                "reading_log[1][book_title]",
                                "reading_log[1][author]",
                                "reading_log[1][pages_read]",
                                "reading_log[2][book_title]",
                                "reading_log[2][author]",
                                "reading_log[2][pages_read]",
                                "reading_log[3][book_title]",
                                "reading_log[3][author]",
                                "reading_log[3][pages_read]",
                                "reading_log[4][book_title]",
                                "reading_log[4][author]",
                                "reading_log[4][pages_read]",
                                "reading_log[5][book_title]",
                                "reading_log[5][author]",
                                "reading_log[5][pages_read]",
                                "reading_log[6][book_title]",
                                "reading_log[6][author]",
                                "reading_log[6][pages_read]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a road trip itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment indicating \"Road Trip Itinerary\".\n- Use a single top-level key named itinerary.\n- Include exactly 7 stops as children under itinerary.\n- Each stop must have three keys: location, arrival_time, and departure_time.\n- The location key must have a non-empty string value representing the city or landmark.\n- Both arrival_time and departure_time keys must have string values formatted as HH:MM using a 24-hour clock.\n- Arrange the stops in the order of travel from the first to the last destination.\n- Ensure all nested structures use exactly two spaces for indentation.\n- Do not include any additional whitespace or empty lines between stops.",
            "task_id": "001820",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[0][location]",
                "itinerary[0][arrival_time]",
                "itinerary[0][departure_time]",
                "itinerary[1][location]",
                "itinerary[1][arrival_time]",
                "itinerary[1][departure_time]",
                "itinerary[2][location]",
                "itinerary[2][arrival_time]",
                "itinerary[2][departure_time]",
                "itinerary[3][location]",
                "itinerary[3][arrival_time]",
                "itinerary[3][departure_time]",
                "itinerary[4][location]",
                "itinerary[4][arrival_time]",
                "itinerary[4][departure_time]",
                "itinerary[5][location]",
                "itinerary[5][arrival_time]",
                "itinerary[5][departure_time]",
                "itinerary[6][location]",
                "itinerary[6][arrival_time]",
                "itinerary[6][departure_time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001820_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a road trip itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment indicating \"Road Trip Itinerary\".\n- Use a single top-level key named itinerary.\n- Include exactly 7 stops as children under itinerary.\n- Each stop must have three keys: location, arrival_time, and departure_time.\n- The location key must have a non-empty string value representing the city or landmark.\n- Both arrival_time and departure_time keys must have string values formatted as HH:MM using a 24-hour clock.\n- Arrange the stops in the order of travel from the first to the last destination.\n- Ensure all nested structures use exactly two spaces for indentation.\n- Do not include any additional whitespace or empty lines between stops."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001820_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[0][location]",
                                "itinerary[0][arrival_time]",
                                "itinerary[0][departure_time]",
                                "itinerary[1][location]",
                                "itinerary[1][arrival_time]",
                                "itinerary[1][departure_time]",
                                "itinerary[2][location]",
                                "itinerary[2][arrival_time]",
                                "itinerary[2][departure_time]",
                                "itinerary[3][location]",
                                "itinerary[3][arrival_time]",
                                "itinerary[3][departure_time]",
                                "itinerary[4][location]",
                                "itinerary[4][arrival_time]",
                                "itinerary[4][departure_time]",
                                "itinerary[5][location]",
                                "itinerary[5][arrival_time]",
                                "itinerary[5][departure_time]",
                                "itinerary[6][location]",
                                "itinerary[6][arrival_time]",
                                "itinerary[6][departure_time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly gardening task schedule.\n\nFeature Requirements:\n- Begin with a single key named gardening_schedule.\n- Include exactly 7 tasks as children under gardening_schedule.\n- Each task must have three keys: activity, day, and duration.\n- The activity key must contain a non-empty string describing the gardening task.\n- The day key must be one of the following exact values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday.\n- The duration key must be a positive integer representing the time in minutes.\n- Include a top-level comment at the very beginning that reads \"Generated Weekly Gardening Tasks\".\n- Format the YAML with two spaces per level of indentation and no additional whitespace between tasks.",
            "task_id": "001821",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "gardening_schedule",
                "gardening_schedule[0][activity]",
                "gardening_schedule[0][day]",
                "gardening_schedule[0][duration]",
                "gardening_schedule[1][activity]",
                "gardening_schedule[1][day]",
                "gardening_schedule[1][duration]",
                "gardening_schedule[2][activity]",
                "gardening_schedule[2][day]",
                "gardening_schedule[2][duration]",
                "gardening_schedule[3][activity]",
                "gardening_schedule[3][day]",
                "gardening_schedule[3][duration]",
                "gardening_schedule[4][activity]",
                "gardening_schedule[4][day]",
                "gardening_schedule[4][duration]",
                "gardening_schedule[5][activity]",
                "gardening_schedule[5][day]",
                "gardening_schedule[5][duration]",
                "gardening_schedule[6][activity]",
                "gardening_schedule[6][day]",
                "gardening_schedule[6][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001821_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly gardening task schedule.\n\nFeature Requirements:\n- Begin with a single key named gardening_schedule.\n- Include exactly 7 tasks as children under gardening_schedule.\n- Each task must have three keys: activity, day, and duration.\n- The activity key must contain a non-empty string describing the gardening task.\n- The day key must be one of the following exact values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday.\n- The duration key must be a positive integer representing the time in minutes.\n- Include a top-level comment at the very beginning that reads \"Generated Weekly Gardening Tasks\".\n- Format the YAML with two spaces per level of indentation and no additional whitespace between tasks."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001821_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "gardening_schedule",
                                "gardening_schedule[0][activity]",
                                "gardening_schedule[0][day]",
                                "gardening_schedule[0][duration]",
                                "gardening_schedule[1][activity]",
                                "gardening_schedule[1][day]",
                                "gardening_schedule[1][duration]",
                                "gardening_schedule[2][activity]",
                                "gardening_schedule[2][day]",
                                "gardening_schedule[2][duration]",
                                "gardening_schedule[3][activity]",
                                "gardening_schedule[3][day]",
                                "gardening_schedule[3][duration]",
                                "gardening_schedule[4][activity]",
                                "gardening_schedule[4][day]",
                                "gardening_schedule[4][duration]",
                                "gardening_schedule[5][activity]",
                                "gardening_schedule[5][day]",
                                "gardening_schedule[5][duration]",
                                "gardening_schedule[6][activity]",
                                "gardening_schedule[6][day]",
                                "gardening_schedule[6][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML document representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library_catalog\".\n- Under \"library_catalog\", include exactly 6 book entries.\n- Each book entry must be a mapping with three keys: \"title\", \"author\", and \"year\".\n- The \"title\" and \"author\" keys should have non-empty string values.\n- The \"year\" key should have an integer value between 1900 and the current year.\n- Indent all nested structures with exactly two spaces per level.\n- Include a top-level comment that reads \"Library Catalog Data\".\n- Do not include any additional keys or extra whitespace between entries.",
            "task_id": "001822",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library_catalog",
                "library_catalog[0]",
                "library_catalog[0][title]",
                "library_catalog[0][author]",
                "library_catalog[0][year]",
                "library_catalog[1]",
                "library_catalog[1][title]",
                "library_catalog[1][author]",
                "library_catalog[1][year]",
                "library_catalog[2]",
                "library_catalog[2][title]",
                "library_catalog[2][author]",
                "library_catalog[2][year]",
                "library_catalog[3]",
                "library_catalog[3][title]",
                "library_catalog[3][author]",
                "library_catalog[3][year]",
                "library_catalog[4]",
                "library_catalog[4][title]",
                "library_catalog[4][author]",
                "library_catalog[4][year]",
                "library_catalog[5]",
                "library_catalog[5][title]",
                "library_catalog[5][author]",
                "library_catalog[5][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001822_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML document representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library_catalog\".\n- Under \"library_catalog\", include exactly 6 book entries.\n- Each book entry must be a mapping with three keys: \"title\", \"author\", and \"year\".\n- The \"title\" and \"author\" keys should have non-empty string values.\n- The \"year\" key should have an integer value between 1900 and the current year.\n- Indent all nested structures with exactly two spaces per level.\n- Include a top-level comment that reads \"Library Catalog Data\".\n- Do not include any additional keys or extra whitespace between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001822_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library_catalog",
                                "library_catalog[0]",
                                "library_catalog[0][title]",
                                "library_catalog[0][author]",
                                "library_catalog[0][year]",
                                "library_catalog[1]",
                                "library_catalog[1][title]",
                                "library_catalog[1][author]",
                                "library_catalog[1][year]",
                                "library_catalog[2]",
                                "library_catalog[2][title]",
                                "library_catalog[2][author]",
                                "library_catalog[2][year]",
                                "library_catalog[3]",
                                "library_catalog[3][title]",
                                "library_catalog[3][author]",
                                "library_catalog[3][year]",
                                "library_catalog[4]",
                                "library_catalog[4][title]",
                                "library_catalog[4][author]",
                                "library_catalog[4][year]",
                                "library_catalog[5]",
                                "library_catalog[5][title]",
                                "library_catalog[5][author]",
                                "library_catalog[5][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie screening schedule.\n\nFeature Requirements:\n- The YAML output must begin with a single top-level key named \"film_schedule\".\n- Under \"film_schedule\", include exactly 6 film entries.\n- Each film entry must include exactly three keys: \"title\", \"duration\", and \"director\".\n- All \"title\" values must be non-empty strings.\n- All \"duration\" values must be integer numbers greater than zero, representing the film length in minutes.\n- All \"director\" values must be non-empty strings.\n- The output must use two spaces for indentation at each nested level.\n- Provide a top-level comment that reads \"Movie Screening Schedule\".\n- Do not include any extra keys, additional whitespace, or empty lines between film entries.",
            "task_id": "001823",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "film_schedule",
                "film_schedule[0][title]",
                "film_schedule[0][duration]",
                "film_schedule[0][director]",
                "film_schedule[1][title]",
                "film_schedule[1][duration]",
                "film_schedule[1][director]",
                "film_schedule[2][title]",
                "film_schedule[2][duration]",
                "film_schedule[2][director]",
                "film_schedule[3][title]",
                "film_schedule[3][duration]",
                "film_schedule[3][director]",
                "film_schedule[4][title]",
                "film_schedule[4][duration]",
                "film_schedule[4][director]",
                "film_schedule[5][title]",
                "film_schedule[5][duration]",
                "film_schedule[5][director]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001823_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie screening schedule.\n\nFeature Requirements:\n- The YAML output must begin with a single top-level key named \"film_schedule\".\n- Under \"film_schedule\", include exactly 6 film entries.\n- Each film entry must include exactly three keys: \"title\", \"duration\", and \"director\".\n- All \"title\" values must be non-empty strings.\n- All \"duration\" values must be integer numbers greater than zero, representing the film length in minutes.\n- All \"director\" values must be non-empty strings.\n- The output must use two spaces for indentation at each nested level.\n- Provide a top-level comment that reads \"Movie Screening Schedule\".\n- Do not include any extra keys, additional whitespace, or empty lines between film entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001823_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "film_schedule",
                                "film_schedule[0][title]",
                                "film_schedule[0][duration]",
                                "film_schedule[0][director]",
                                "film_schedule[1][title]",
                                "film_schedule[1][duration]",
                                "film_schedule[1][director]",
                                "film_schedule[2][title]",
                                "film_schedule[2][duration]",
                                "film_schedule[2][director]",
                                "film_schedule[3][title]",
                                "film_schedule[3][duration]",
                                "film_schedule[3][director]",
                                "film_schedule[4][title]",
                                "film_schedule[4][duration]",
                                "film_schedule[4][director]",
                                "film_schedule[5][title]",
                                "film_schedule[5][duration]",
                                "film_schedule[5][director]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_catalog.\n- Include exactly 6 movies as children under movie_catalog.\n- Each movie must have three keys: title, director, and year.\n- All title and director values must be non-empty strings.\n- All year values must be four-digit integers between 1900 and 2099.\n- Ensure the movies are listed in the order they appear in the text.\n- Use exactly two spaces for indentation at each level of nesting.\n- Include a top-level comment stating \"Generated Movie Collection\" before any data.\n- Do not include any extra whitespace or empty lines between entries.",
            "task_id": "001824",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "movie_catalog",
                "movie_catalog[0][title]",
                "movie_catalog[0][director]",
                "movie_catalog[0][year]",
                "movie_catalog[1][title]",
                "movie_catalog[1][director]",
                "movie_catalog[1][year]",
                "movie_catalog[2][title]",
                "movie_catalog[2][director]",
                "movie_catalog[2][year]",
                "movie_catalog[3][title]",
                "movie_catalog[3][director]",
                "movie_catalog[3][year]",
                "movie_catalog[4][title]",
                "movie_catalog[4][director]",
                "movie_catalog[4][year]",
                "movie_catalog[5][title]",
                "movie_catalog[5][director]",
                "movie_catalog[5][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001824_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_catalog.\n- Include exactly 6 movies as children under movie_catalog.\n- Each movie must have three keys: title, director, and year.\n- All title and director values must be non-empty strings.\n- All year values must be four-digit integers between 1900 and 2099.\n- Ensure the movies are listed in the order they appear in the text.\n- Use exactly two spaces for indentation at each level of nesting.\n- Include a top-level comment stating \"Generated Movie Collection\" before any data.\n- Do not include any extra whitespace or empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001824_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "movie_catalog",
                                "movie_catalog[0][title]",
                                "movie_catalog[0][director]",
                                "movie_catalog[0][year]",
                                "movie_catalog[1][title]",
                                "movie_catalog[1][director]",
                                "movie_catalog[1][year]",
                                "movie_catalog[2][title]",
                                "movie_catalog[2][director]",
                                "movie_catalog[2][year]",
                                "movie_catalog[3][title]",
                                "movie_catalog[3][director]",
                                "movie_catalog[3][year]",
                                "movie_catalog[4][title]",
                                "movie_catalog[4][director]",
                                "movie_catalog[4][year]",
                                "movie_catalog[5][title]",
                                "movie_catalog[5][director]",
                                "movie_catalog[5][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a detailed conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named conference_schedule.\n- Include exactly 6 event entries as children under conference_schedule.\n- Each event entry must contain three keys: title, time, and room.\n- The title must be a non-empty string describing the event name.\n- The time must be a string formatted in 24-hour notation (HH:MM) indicating when the event starts.\n- The room must be a string containing an alphanumeric room identifier.\n- Ensure proper indentation using exactly two spaces for nested structures.\n- Place a top-level comment at the beginning of the YAML output stating \"Generated Conference Schedule\".\n- Do not add any extra keys, comments, or blank lines between events.\n- All keys and values should strictly adhere to the described format without any additional formatting.",
            "task_id": "001825",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_schedule",
                "conference_schedule[0][title]",
                "conference_schedule[0][time]",
                "conference_schedule[0][room]",
                "conference_schedule[1][title]",
                "conference_schedule[1][time]",
                "conference_schedule[1][room]",
                "conference_schedule[2][title]",
                "conference_schedule[2][time]",
                "conference_schedule[2][room]",
                "conference_schedule[3][title]",
                "conference_schedule[3][time]",
                "conference_schedule[3][room]",
                "conference_schedule[4][title]",
                "conference_schedule[4][time]",
                "conference_schedule[4][room]",
                "conference_schedule[5][title]",
                "conference_schedule[5][time]",
                "conference_schedule[5][room]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001825_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a detailed conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named conference_schedule.\n- Include exactly 6 event entries as children under conference_schedule.\n- Each event entry must contain three keys: title, time, and room.\n- The title must be a non-empty string describing the event name.\n- The time must be a string formatted in 24-hour notation (HH:MM) indicating when the event starts.\n- The room must be a string containing an alphanumeric room identifier.\n- Ensure proper indentation using exactly two spaces for nested structures.\n- Place a top-level comment at the beginning of the YAML output stating \"Generated Conference Schedule\".\n- Do not add any extra keys, comments, or blank lines between events.\n- All keys and values should strictly adhere to the described format without any additional formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001825_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_schedule",
                                "conference_schedule[0][title]",
                                "conference_schedule[0][time]",
                                "conference_schedule[0][room]",
                                "conference_schedule[1][title]",
                                "conference_schedule[1][time]",
                                "conference_schedule[1][room]",
                                "conference_schedule[2][title]",
                                "conference_schedule[2][time]",
                                "conference_schedule[2][room]",
                                "conference_schedule[3][title]",
                                "conference_schedule[3][time]",
                                "conference_schedule[3][room]",
                                "conference_schedule[4][title]",
                                "conference_schedule[4][time]",
                                "conference_schedule[4][room]",
                                "conference_schedule[5][title]",
                                "conference_schedule[5][time]",
                                "conference_schedule[5][room]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily schedule for a conference.\n\nFeature Requirements:\n- Use a top-level key named \"conference_schedule\".\n- Include exactly 6 entries as children under \"conference_schedule\".\n- Each entry must include three keys: \"time\", \"topic\", and \"speaker\".\n- The \"time\" key should hold a string formatted as \"HH:MM AM/PM\".\n- The \"topic\" key must hold a non-empty string describing the subject.\n- The \"speaker\" key must hold a non-empty string identifying the presenter.\n- Sort all entries in chronological order based on the \"time\" values.\n- Structure the YAML with an indentation of two spaces for nested elements.\n- Provide a top-level comment stating \"Plan for Daily Conference Agenda\".\n- Ensure there is no additional whitespace or empty lines between entries.",
            "task_id": "001826",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "conference_schedule",
                "conference_schedule[].time",
                "conference_schedule[].topic",
                "conference_schedule[].speaker"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001826_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily schedule for a conference.\n\nFeature Requirements:\n- Use a top-level key named \"conference_schedule\".\n- Include exactly 6 entries as children under \"conference_schedule\".\n- Each entry must include three keys: \"time\", \"topic\", and \"speaker\".\n- The \"time\" key should hold a string formatted as \"HH:MM AM/PM\".\n- The \"topic\" key must hold a non-empty string describing the subject.\n- The \"speaker\" key must hold a non-empty string identifying the presenter.\n- Sort all entries in chronological order based on the \"time\" values.\n- Structure the YAML with an indentation of two spaces for nested elements.\n- Provide a top-level comment stating \"Plan for Daily Conference Agenda\".\n- Ensure there is no additional whitespace or empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001826_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "conference_schedule",
                                "conference_schedule[].time",
                                "conference_schedule[].topic",
                                "conference_schedule[].speaker"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily sightseeing itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 3 sightseeing locations as children under itinerary.\n- Each location must have exactly three keys: location, visit_time, and duration.\n- All location keys should have non-empty string values representing the destination names.\n- All visit_time keys should follow the 24-hour format (HH:MM) and be valid times.\n- All duration keys must contain integer values greater than zero to represent minutes.\n- Ensure the output is properly indented with two spaces for all nested structures, without extra lines.\n- Provide a top-level comment indicating \"Daily Sightseeing Itinerary\".",
            "task_id": "001827",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Daily Sightseeing Itinerary",
                "itinerary",
                "itinerary[0][location]",
                "itinerary[0][visit_time]",
                "itinerary[0][duration]",
                "itinerary[1][location]",
                "itinerary[1][visit_time]",
                "itinerary[1][duration]",
                "itinerary[2][location]",
                "itinerary[2][visit_time]",
                "itinerary[2][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001827_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily sightseeing itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 3 sightseeing locations as children under itinerary.\n- Each location must have exactly three keys: location, visit_time, and duration.\n- All location keys should have non-empty string values representing the destination names.\n- All visit_time keys should follow the 24-hour format (HH:MM) and be valid times.\n- All duration keys must contain integer values greater than zero to represent minutes.\n- Ensure the output is properly indented with two spaces for all nested structures, without extra lines.\n- Provide a top-level comment indicating \"Daily Sightseeing Itinerary\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001827_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Daily Sightseeing Itinerary",
                                "itinerary",
                                "itinerary[0][location]",
                                "itinerary[0][visit_time]",
                                "itinerary[0][duration]",
                                "itinerary[1][location]",
                                "itinerary[1][visit_time]",
                                "itinerary[1][duration]",
                                "itinerary[2][location]",
                                "itinerary[2][visit_time]",
                                "itinerary[2][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a garden maintenance schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"garden_schedule\".\n- Include exactly three subsections under \"garden_schedule\": \"morning\", \"afternoon\", and \"evening\".\n- Each subsection must contain exactly two tasks listed as nested items.\n- Each task must have two keys: \"description\" (a non-empty string) and \"duration\" (an integer greater than zero representing minutes).\n- Order the tasks within each subsection exactly as described (first task followed by second task).\n- Use exactly two spaces for each level of indentation to structure the nested lists.\n- Start the YAML output with a top-level comment stating \"Automated Garden Schedule\".\n- Ensure there is no extra whitespace or blank lines between tasks and sections.\n- All keys and values must be correctly formatted according to valid YAML syntax.",
            "task_id": "001828",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "garden_schedule",
                "garden_schedule[morning]",
                "garden_schedule[morning][0][description]",
                "garden_schedule[morning][0][duration]",
                "garden_schedule[morning][1][description]",
                "garden_schedule[morning][1][duration]",
                "garden_schedule[afternoon]",
                "garden_schedule[afternoon][0][description]",
                "garden_schedule[afternoon][0][duration]",
                "garden_schedule[afternoon][1][description]",
                "garden_schedule[afternoon][1][duration]",
                "garden_schedule[evening]",
                "garden_schedule[evening][0][description]",
                "garden_schedule[evening][0][duration]",
                "garden_schedule[evening][1][description]",
                "garden_schedule[evening][1][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001828_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a garden maintenance schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"garden_schedule\".\n- Include exactly three subsections under \"garden_schedule\": \"morning\", \"afternoon\", and \"evening\".\n- Each subsection must contain exactly two tasks listed as nested items.\n- Each task must have two keys: \"description\" (a non-empty string) and \"duration\" (an integer greater than zero representing minutes).\n- Order the tasks within each subsection exactly as described (first task followed by second task).\n- Use exactly two spaces for each level of indentation to structure the nested lists.\n- Start the YAML output with a top-level comment stating \"Automated Garden Schedule\".\n- Ensure there is no extra whitespace or blank lines between tasks and sections.\n- All keys and values must be correctly formatted according to valid YAML syntax."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001828_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "garden_schedule",
                                "garden_schedule[morning]",
                                "garden_schedule[morning][0][description]",
                                "garden_schedule[morning][0][duration]",
                                "garden_schedule[morning][1][description]",
                                "garden_schedule[morning][1][duration]",
                                "garden_schedule[afternoon]",
                                "garden_schedule[afternoon][0][description]",
                                "garden_schedule[afternoon][0][duration]",
                                "garden_schedule[afternoon][1][description]",
                                "garden_schedule[afternoon][1][duration]",
                                "garden_schedule[evening]",
                                "garden_schedule[evening][0][description]",
                                "garden_schedule[evening][0][duration]",
                                "garden_schedule[evening][1][description]",
                                "garden_schedule[evening][1][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a collection of cooking recipes.\n\nFeature Requirements:\n- Start with a top-level key named \"recipes\".\n- Include exactly 3 recipe entries under \"recipes\", each represented as a mapping.\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"steps\".\n- The \"title\" must be a non-empty string specifying the recipe name.\n- \"ingredients\" must be a list containing at least 3 non-empty string items.\n- \"steps\" must be a list of instructions with at least 3 items, each represented as a non-empty string.\n- Use exactly two spaces for indentation at every nested level.\n- Include a top-level comment saying \"Generated Recipe Collection\" at the beginning of the document.\n- Avoid any extra blank lines or trailing whitespace in the output.",
            "task_id": "001829",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Generated Recipe Collection",
                "recipes",
                "recipes[0][title]",
                "recipes[0][ingredients]",
                "recipes[0][steps]",
                "recipes[1][title]",
                "recipes[1][ingredients]",
                "recipes[1][steps]",
                "recipes[2][title]",
                "recipes[2][ingredients]",
                "recipes[2][steps]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001829_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a collection of cooking recipes.\n\nFeature Requirements:\n- Start with a top-level key named \"recipes\".\n- Include exactly 3 recipe entries under \"recipes\", each represented as a mapping.\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"steps\".\n- The \"title\" must be a non-empty string specifying the recipe name.\n- \"ingredients\" must be a list containing at least 3 non-empty string items.\n- \"steps\" must be a list of instructions with at least 3 items, each represented as a non-empty string.\n- Use exactly two spaces for indentation at every nested level.\n- Include a top-level comment saying \"Generated Recipe Collection\" at the beginning of the document.\n- Avoid any extra blank lines or trailing whitespace in the output."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001829_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Generated Recipe Collection",
                                "recipes",
                                "recipes[0][title]",
                                "recipes[0][ingredients]",
                                "recipes[0][steps]",
                                "recipes[1][title]",
                                "recipes[1][ingredients]",
                                "recipes[1][steps]",
                                "recipes[2][title]",
                                "recipes[2][ingredients]",
                                "recipes[2][steps]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted guide for a fictional art gallery tour.\n\nFeature Requirements:\n- Begin with a single top-level key named art_gallery.\n- Include exactly 6 exhibits as items under art_gallery.\n- Each exhibit must have three keys: title, artist, and year.\n- All title and artist keys must include non-empty string values.\n- The year key must contain an integer value between 1500 and 2020.\n- Ensure that the exhibits are ordered alphabetically based on the artist field.\n- Use exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Art Gallery Guide\".\n- Do not include any additional whitespace or empty lines in the YAML output.\n- Avoid any extraneous keys beyond the specified structure.",
            "task_id": "001830",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "art_gallery",
                "art_gallery[0][title]",
                "art_gallery[0][artist]",
                "art_gallery[0][year]",
                "art_gallery[1][title]",
                "art_gallery[1][artist]",
                "art_gallery[1][year]",
                "art_gallery[2][title]",
                "art_gallery[2][artist]",
                "art_gallery[2][year]",
                "art_gallery[3][title]",
                "art_gallery[3][artist]",
                "art_gallery[3][year]",
                "art_gallery[4][title]",
                "art_gallery[4][artist]",
                "art_gallery[4][year]",
                "art_gallery[5][title]",
                "art_gallery[5][artist]",
                "art_gallery[5][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001830_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted guide for a fictional art gallery tour.\n\nFeature Requirements:\n- Begin with a single top-level key named art_gallery.\n- Include exactly 6 exhibits as items under art_gallery.\n- Each exhibit must have three keys: title, artist, and year.\n- All title and artist keys must include non-empty string values.\n- The year key must contain an integer value between 1500 and 2020.\n- Ensure that the exhibits are ordered alphabetically based on the artist field.\n- Use exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Art Gallery Guide\".\n- Do not include any additional whitespace or empty lines in the YAML output.\n- Avoid any extraneous keys beyond the specified structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001830_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "art_gallery",
                                "art_gallery[0][title]",
                                "art_gallery[0][artist]",
                                "art_gallery[0][year]",
                                "art_gallery[1][title]",
                                "art_gallery[1][artist]",
                                "art_gallery[1][year]",
                                "art_gallery[2][title]",
                                "art_gallery[2][artist]",
                                "art_gallery[2][year]",
                                "art_gallery[3][title]",
                                "art_gallery[3][artist]",
                                "art_gallery[3][year]",
                                "art_gallery[4][title]",
                                "art_gallery[4][artist]",
                                "art_gallery[4][year]",
                                "art_gallery[5][title]",
                                "art_gallery[5][artist]",
                                "art_gallery[5][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named meal_plan.\n- Include exactly 7 entries under meal_plan, each corresponding to a day of the week.\n- Each day entry must have exactly three keys: breakfast, lunch, and dinner.\n- All meal keys must have non-empty string values describing the meal.\n- Use two spaces for indentation for nested structures.\n- Provide a top-level comment indicating \"Generated Weekly Meal Plan\".\n- Ensure there is no extra whitespace or empty lines between entries.\n- The days must be in the order: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- All keys and values must be in lowercase letters where applicable.",
            "task_id": "001831",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "meal_plan",
                "meal_plan[monday]",
                "meal_plan[monday][breakfast]",
                "meal_plan[monday][lunch]",
                "meal_plan[monday][dinner]",
                "meal_plan[tuesday]",
                "meal_plan[tuesday][breakfast]",
                "meal_plan[tuesday][lunch]",
                "meal_plan[tuesday][dinner]",
                "meal_plan[wednesday]",
                "meal_plan[wednesday][breakfast]",
                "meal_plan[wednesday][lunch]",
                "meal_plan[wednesday][dinner]",
                "meal_plan[thursday]",
                "meal_plan[thursday][breakfast]",
                "meal_plan[thursday][lunch]",
                "meal_plan[thursday][dinner]",
                "meal_plan[friday]",
                "meal_plan[friday][breakfast]",
                "meal_plan[friday][lunch]",
                "meal_plan[friday][dinner]",
                "meal_plan[saturday]",
                "meal_plan[saturday][breakfast]",
                "meal_plan[saturday][lunch]",
                "meal_plan[saturday][dinner]",
                "meal_plan[sunday]",
                "meal_plan[sunday][breakfast]",
                "meal_plan[sunday][lunch]",
                "meal_plan[sunday][dinner]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001831_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named meal_plan.\n- Include exactly 7 entries under meal_plan, each corresponding to a day of the week.\n- Each day entry must have exactly three keys: breakfast, lunch, and dinner.\n- All meal keys must have non-empty string values describing the meal.\n- Use two spaces for indentation for nested structures.\n- Provide a top-level comment indicating \"Generated Weekly Meal Plan\".\n- Ensure there is no extra whitespace or empty lines between entries.\n- The days must be in the order: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- All keys and values must be in lowercase letters where applicable."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001831_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "meal_plan",
                                "meal_plan[monday]",
                                "meal_plan[monday][breakfast]",
                                "meal_plan[monday][lunch]",
                                "meal_plan[monday][dinner]",
                                "meal_plan[tuesday]",
                                "meal_plan[tuesday][breakfast]",
                                "meal_plan[tuesday][lunch]",
                                "meal_plan[tuesday][dinner]",
                                "meal_plan[wednesday]",
                                "meal_plan[wednesday][breakfast]",
                                "meal_plan[wednesday][lunch]",
                                "meal_plan[wednesday][dinner]",
                                "meal_plan[thursday]",
                                "meal_plan[thursday][breakfast]",
                                "meal_plan[thursday][lunch]",
                                "meal_plan[thursday][dinner]",
                                "meal_plan[friday]",
                                "meal_plan[friday][breakfast]",
                                "meal_plan[friday][lunch]",
                                "meal_plan[friday][dinner]",
                                "meal_plan[saturday]",
                                "meal_plan[saturday][breakfast]",
                                "meal_plan[saturday][lunch]",
                                "meal_plan[saturday][dinner]",
                                "meal_plan[sunday]",
                                "meal_plan[sunday][breakfast]",
                                "meal_plan[sunday][lunch]",
                                "meal_plan[sunday][dinner]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the described underwater expedition event into a YAML format representing the event itinerary and clues.\n\nFeature Requirements:\n- Begin with a single top-level key named \"expedition\".\n- Under \"expedition\", include exactly two keys: \"routes\" and \"clues\".\n- The \"routes\" key must contain a list of exactly three items; each item should be a map with keys \"location\" and \"depth\", where \"location\" is a non-empty string and \"depth\" is an integer indicating meters below sea level.\n- The \"clues\" key must contain a list of exactly four string elements providing hints for the expedition.\n- Each string in the \"clues\" list must be non-empty and descriptive.\n- Indent all nested structures with exactly two spaces per level.\n- Start the YAML output with a top-level comment reading \"Generated Underwater Expedition Itinerary\".\n- Do not include any keys or data beyond what is specified.\n- Ensure there is no extra whitespace or empty lines between the keys and list items.",
            "task_id": "001832",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "expedition",
                "expedition[routes]",
                "expedition[routes][*][location]",
                "expedition[routes][*][depth]",
                "expedition[clues]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001832_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the described underwater expedition event into a YAML format representing the event itinerary and clues.\n\nFeature Requirements:\n- Begin with a single top-level key named \"expedition\".\n- Under \"expedition\", include exactly two keys: \"routes\" and \"clues\".\n- The \"routes\" key must contain a list of exactly three items; each item should be a map with keys \"location\" and \"depth\", where \"location\" is a non-empty string and \"depth\" is an integer indicating meters below sea level.\n- The \"clues\" key must contain a list of exactly four string elements providing hints for the expedition.\n- Each string in the \"clues\" list must be non-empty and descriptive.\n- Indent all nested structures with exactly two spaces per level.\n- Start the YAML output with a top-level comment reading \"Generated Underwater Expedition Itinerary\".\n- Do not include any keys or data beyond what is specified.\n- Ensure there is no extra whitespace or empty lines between the keys and list items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001832_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "expedition",
                                "expedition[routes]",
                                "expedition[routes][*][location]",
                                "expedition[routes][*][depth]",
                                "expedition[clues]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level key named \"travel_itinerary\".\n- Include exactly 4 entries under \"travel_itinerary\", each representing a planned trip segment.\n- Each entry must include three keys: \"destination\", \"departure_time\", and \"arrival_time\".\n- The \"destination\" key must have a non-empty string value representing a city name.\n- Both \"departure_time\" and \"arrival_time\" keys must contain string values in a 24-hour \"HH:MM\" format.\n- Ensure that for every entry, the \"departure_time\" is earlier than the \"arrival_time\".\n- The YAML must be indented with exactly two spaces per level.\n- Provide a top-level comment stating \"Auto-generated Travel Itinerary\".\n- Do not include any additional keys or empty lines between entries.\n- All values must strictly adhere to the specified formats and structure.",
            "task_id": "001833",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Auto-generated Travel Itinerary",
                "travel_itinerary",
                "travel_itinerary[0][destination]",
                "travel_itinerary[0][departure_time]",
                "travel_itinerary[0][arrival_time]",
                "travel_itinerary[1][destination]",
                "travel_itinerary[1][departure_time]",
                "travel_itinerary[1][arrival_time]",
                "travel_itinerary[2][destination]",
                "travel_itinerary[2][departure_time]",
                "travel_itinerary[2][arrival_time]",
                "travel_itinerary[3][destination]",
                "travel_itinerary[3][departure_time]",
                "travel_itinerary[3][arrival_time]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001833_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level key named \"travel_itinerary\".\n- Include exactly 4 entries under \"travel_itinerary\", each representing a planned trip segment.\n- Each entry must include three keys: \"destination\", \"departure_time\", and \"arrival_time\".\n- The \"destination\" key must have a non-empty string value representing a city name.\n- Both \"departure_time\" and \"arrival_time\" keys must contain string values in a 24-hour \"HH:MM\" format.\n- Ensure that for every entry, the \"departure_time\" is earlier than the \"arrival_time\".\n- The YAML must be indented with exactly two spaces per level.\n- Provide a top-level comment stating \"Auto-generated Travel Itinerary\".\n- Do not include any additional keys or empty lines between entries.\n- All values must strictly adhere to the specified formats and structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001833_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Auto-generated Travel Itinerary",
                                "travel_itinerary",
                                "travel_itinerary[0][destination]",
                                "travel_itinerary[0][departure_time]",
                                "travel_itinerary[0][arrival_time]",
                                "travel_itinerary[1][destination]",
                                "travel_itinerary[1][departure_time]",
                                "travel_itinerary[1][arrival_time]",
                                "travel_itinerary[2][destination]",
                                "travel_itinerary[2][departure_time]",
                                "travel_itinerary[2][arrival_time]",
                                "travel_itinerary[3][destination]",
                                "travel_itinerary[3][departure_time]",
                                "travel_itinerary[3][arrival_time]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a local music festival event schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named event_schedule.\n- Include exactly 6 events listed as children under event_schedule.\n- Each event must contain three keys: title, time, and venue.\n- All title and venue values must be non-empty strings.\n- Each time value must follow the 24-hour HH:MM format.\n- Ensure nested structures are indented with exactly two spaces per level.\n- Include a top-level comment at the beginning stating \"Festival Schedule\".",
            "task_id": "001834",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "event_schedule",
                "event_schedule[0][title]",
                "event_schedule[0][time]",
                "event_schedule[0][venue]",
                "event_schedule[1][title]",
                "event_schedule[1][time]",
                "event_schedule[1][venue]",
                "event_schedule[2][title]",
                "event_schedule[2][time]",
                "event_schedule[2][venue]",
                "event_schedule[3][title]",
                "event_schedule[3][time]",
                "event_schedule[3][venue]",
                "event_schedule[4][title]",
                "event_schedule[4][time]",
                "event_schedule[4][venue]",
                "event_schedule[5][title]",
                "event_schedule[5][time]",
                "event_schedule[5][venue]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001834_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a local music festival event schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named event_schedule.\n- Include exactly 6 events listed as children under event_schedule.\n- Each event must contain three keys: title, time, and venue.\n- All title and venue values must be non-empty strings.\n- Each time value must follow the 24-hour HH:MM format.\n- Ensure nested structures are indented with exactly two spaces per level.\n- Include a top-level comment at the beginning stating \"Festival Schedule\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001834_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "event_schedule",
                                "event_schedule[0][title]",
                                "event_schedule[0][time]",
                                "event_schedule[0][venue]",
                                "event_schedule[1][title]",
                                "event_schedule[1][time]",
                                "event_schedule[1][venue]",
                                "event_schedule[2][title]",
                                "event_schedule[2][time]",
                                "event_schedule[2][venue]",
                                "event_schedule[3][title]",
                                "event_schedule[3][time]",
                                "event_schedule[3][venue]",
                                "event_schedule[4][title]",
                                "event_schedule[4][time]",
                                "event_schedule[4][venue]",
                                "event_schedule[5][title]",
                                "event_schedule[5][time]",
                                "event_schedule[5][venue]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an event itinerary for a city tour.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 events as children under the itinerary key.\n- Each event must contain exactly four keys: event_title, start_time, end_time, and location.\n- All event_title values must be non-empty strings describing the event.\n- Both start_time and end_time must be formatted as HH:MM in 24-hour time, with end_time occurring later than start_time.\n- Each location value must be a non-empty string indicating the venue of the event.\n- Indent nested structures using exactly two spaces.\n- Include a top-level comment reading \"City Tour Itinerary\" at the very beginning, with no extra whitespace or blank lines.",
            "task_id": "001835",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[0][event_title]",
                "itinerary[0][start_time]",
                "itinerary[0][end_time]",
                "itinerary[0][location]",
                "itinerary[1][event_title]",
                "itinerary[1][start_time]",
                "itinerary[1][end_time]",
                "itinerary[1][location]",
                "itinerary[2][event_title]",
                "itinerary[2][start_time]",
                "itinerary[2][end_time]",
                "itinerary[2][location]",
                "itinerary[3][event_title]",
                "itinerary[3][start_time]",
                "itinerary[3][end_time]",
                "itinerary[3][location]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001835_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an event itinerary for a city tour.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 events as children under the itinerary key.\n- Each event must contain exactly four keys: event_title, start_time, end_time, and location.\n- All event_title values must be non-empty strings describing the event.\n- Both start_time and end_time must be formatted as HH:MM in 24-hour time, with end_time occurring later than start_time.\n- Each location value must be a non-empty string indicating the venue of the event.\n- Indent nested structures using exactly two spaces.\n- Include a top-level comment reading \"City Tour Itinerary\" at the very beginning, with no extra whitespace or blank lines."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001835_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[0][event_title]",
                                "itinerary[0][start_time]",
                                "itinerary[0][end_time]",
                                "itinerary[0][location]",
                                "itinerary[1][event_title]",
                                "itinerary[1][start_time]",
                                "itinerary[1][end_time]",
                                "itinerary[1][location]",
                                "itinerary[2][event_title]",
                                "itinerary[2][start_time]",
                                "itinerary[2][end_time]",
                                "itinerary[2][location]",
                                "itinerary[3][event_title]",
                                "itinerary[3][start_time]",
                                "itinerary[3][end_time]",
                                "itinerary[3][location]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_collection.\n- Under movie_collection, include exactly 7 movie items as children.\n- Each movie item must contain three keys: title, director, and year.\n- The title and director keys should each have non-empty string values.\n- The year key must have an integer value representing a release year between 1900 and the current year.\n- Include a top-level YAML comment stating \"Generated Movie Catalog\" at the very beginning.\n- Ensure the YAML output is properly indented using two spaces for nested elements and contains no extra blank lines.",
            "task_id": "001836",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "movie_collection",
                "movie_collection[0][title]",
                "movie_collection[0][director]",
                "movie_collection[0][year]",
                "movie_collection[1][title]",
                "movie_collection[1][director]",
                "movie_collection[1][year]",
                "movie_collection[2][title]",
                "movie_collection[2][director]",
                "movie_collection[2][year]",
                "movie_collection[3][title]",
                "movie_collection[3][director]",
                "movie_collection[3][year]",
                "movie_collection[4][title]",
                "movie_collection[4][director]",
                "movie_collection[4][year]",
                "movie_collection[5][title]",
                "movie_collection[5][director]",
                "movie_collection[5][year]",
                "movie_collection[6][title]",
                "movie_collection[6][director]",
                "movie_collection[6][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001836_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_collection.\n- Under movie_collection, include exactly 7 movie items as children.\n- Each movie item must contain three keys: title, director, and year.\n- The title and director keys should each have non-empty string values.\n- The year key must have an integer value representing a release year between 1900 and the current year.\n- Include a top-level YAML comment stating \"Generated Movie Catalog\" at the very beginning.\n- Ensure the YAML output is properly indented using two spaces for nested elements and contains no extra blank lines."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001836_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "movie_collection",
                                "movie_collection[0][title]",
                                "movie_collection[0][director]",
                                "movie_collection[0][year]",
                                "movie_collection[1][title]",
                                "movie_collection[1][director]",
                                "movie_collection[1][year]",
                                "movie_collection[2][title]",
                                "movie_collection[2][director]",
                                "movie_collection[2][year]",
                                "movie_collection[3][title]",
                                "movie_collection[3][director]",
                                "movie_collection[3][year]",
                                "movie_collection[4][title]",
                                "movie_collection[4][director]",
                                "movie_collection[4][year]",
                                "movie_collection[5][title]",
                                "movie_collection[5][director]",
                                "movie_collection[5][year]",
                                "movie_collection[6][title]",
                                "movie_collection[6][director]",
                                "movie_collection[6][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a detailed daily schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- Include exactly 6 schedule entries under \"daily_schedule\".\n- Each entry must have the keys \"time\", \"activity\", and \"duration\".\n- The \"time\" key should have a string value formatted as \"HH:MM\" in 24-hour notation.\n- The \"activity\" key should hold a non-empty string describing the task.\n- The \"duration\" key must have an integer value representing the length of the activity in minutes.\n- Ensure the output is indented with two spaces per nested level.\n- Include a top-level YAML comment stating \"Generated Daily Schedule\".\n- Do not include any extra keys, comments, or formatting outside the defined structure.\n- Arrange the schedule entries sequentially in the order of occurrence throughout the day.",
            "task_id": "001837",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "daily_schedule",
                "daily_schedule[0][time]",
                "daily_schedule[0][activity]",
                "daily_schedule[0][duration]",
                "daily_schedule[1][time]",
                "daily_schedule[1][activity]",
                "daily_schedule[1][duration]",
                "daily_schedule[2][time]",
                "daily_schedule[2][activity]",
                "daily_schedule[2][duration]",
                "daily_schedule[3][time]",
                "daily_schedule[3][activity]",
                "daily_schedule[3][duration]",
                "daily_schedule[4][time]",
                "daily_schedule[4][activity]",
                "daily_schedule[4][duration]",
                "daily_schedule[5][time]",
                "daily_schedule[5][activity]",
                "daily_schedule[5][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001837_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a detailed daily schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- Include exactly 6 schedule entries under \"daily_schedule\".\n- Each entry must have the keys \"time\", \"activity\", and \"duration\".\n- The \"time\" key should have a string value formatted as \"HH:MM\" in 24-hour notation.\n- The \"activity\" key should hold a non-empty string describing the task.\n- The \"duration\" key must have an integer value representing the length of the activity in minutes.\n- Ensure the output is indented with two spaces per nested level.\n- Include a top-level YAML comment stating \"Generated Daily Schedule\".\n- Do not include any extra keys, comments, or formatting outside the defined structure.\n- Arrange the schedule entries sequentially in the order of occurrence throughout the day."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001837_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "daily_schedule",
                                "daily_schedule[0][time]",
                                "daily_schedule[0][activity]",
                                "daily_schedule[0][duration]",
                                "daily_schedule[1][time]",
                                "daily_schedule[1][activity]",
                                "daily_schedule[1][duration]",
                                "daily_schedule[2][time]",
                                "daily_schedule[2][activity]",
                                "daily_schedule[2][duration]",
                                "daily_schedule[3][time]",
                                "daily_schedule[3][activity]",
                                "daily_schedule[3][duration]",
                                "daily_schedule[4][time]",
                                "daily_schedule[4][activity]",
                                "daily_schedule[4][duration]",
                                "daily_schedule[5][time]",
                                "daily_schedule[5][activity]",
                                "daily_schedule[5][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a restaurant menu.\n\nFeature Requirements:\n- Begin with a single top-level key named \"menu\".\n- Include exactly 6 dishes as children under \"menu\".\n- Each dish must have three keys: \"dish\", \"price\", and \"description\".\n- The \"dish\" key should have a non-empty string as its value.\n- The \"price\" key should have an integer value greater than zero.\n- The \"description\" key should have a non-empty string value.\n- Use two spaces for each level of indentation in the YAML structure.\n- Provide a top-level comment indicating \"Generated Restaurant Menu\".\n- Do not insert any extra whitespace or blank lines between items.\n- Ensure the YAML output does not include any additional keys or data.",
            "task_id": "001838",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[0][dish]",
                "menu[0][price]",
                "menu[0][description]",
                "menu[1][dish]",
                "menu[1][price]",
                "menu[1][description]",
                "menu[2][dish]",
                "menu[2][price]",
                "menu[2][description]",
                "menu[3][dish]",
                "menu[3][price]",
                "menu[3][description]",
                "menu[4][dish]",
                "menu[4][price]",
                "menu[4][description]",
                "menu[5][dish]",
                "menu[5][price]",
                "menu[5][description]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001838_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a restaurant menu.\n\nFeature Requirements:\n- Begin with a single top-level key named \"menu\".\n- Include exactly 6 dishes as children under \"menu\".\n- Each dish must have three keys: \"dish\", \"price\", and \"description\".\n- The \"dish\" key should have a non-empty string as its value.\n- The \"price\" key should have an integer value greater than zero.\n- The \"description\" key should have a non-empty string value.\n- Use two spaces for each level of indentation in the YAML structure.\n- Provide a top-level comment indicating \"Generated Restaurant Menu\".\n- Do not insert any extra whitespace or blank lines between items.\n- Ensure the YAML output does not include any additional keys or data."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001838_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[0][dish]",
                                "menu[0][price]",
                                "menu[0][description]",
                                "menu[1][dish]",
                                "menu[1][price]",
                                "menu[1][description]",
                                "menu[2][dish]",
                                "menu[2][price]",
                                "menu[2][description]",
                                "menu[3][dish]",
                                "menu[3][price]",
                                "menu[3][description]",
                                "menu[4][dish]",
                                "menu[4][price]",
                                "menu[4][description]",
                                "menu[5][dish]",
                                "menu[5][price]",
                                "menu[5][description]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal book library.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library\".\n- Include exactly 6 items under \"library\", each representing an individual book.\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- The values for \"title\" and \"author\" must be non-empty strings.\n- The value for \"year\" must be an integer between 1900 and 2023.\n- Ensure the YAML output uses two spaces for indentation at every level.\n- Provide a top-level comment stating \"Library Books Collection\".\n- Do not include any additional keys or whitespace outside the defined structure.\n- All items must be listed consecutively without any blank lines between them.",
            "task_id": "001839",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[0][title]",
                "library[0][author]",
                "library[0][year]",
                "library[1][title]",
                "library[1][author]",
                "library[1][year]",
                "library[2][title]",
                "library[2][author]",
                "library[2][year]",
                "library[3][title]",
                "library[3][author]",
                "library[3][year]",
                "library[4][title]",
                "library[4][author]",
                "library[4][year]",
                "library[5][title]",
                "library[5][author]",
                "library[5][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001839_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal book library.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library\".\n- Include exactly 6 items under \"library\", each representing an individual book.\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- The values for \"title\" and \"author\" must be non-empty strings.\n- The value for \"year\" must be an integer between 1900 and 2023.\n- Ensure the YAML output uses two spaces for indentation at every level.\n- Provide a top-level comment stating \"Library Books Collection\".\n- Do not include any additional keys or whitespace outside the defined structure.\n- All items must be listed consecutively without any blank lines between them."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001839_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[0][title]",
                                "library[0][author]",
                                "library[0][year]",
                                "library[1][title]",
                                "library[1][author]",
                                "library[1][year]",
                                "library[2][title]",
                                "library[2][author]",
                                "library[2][year]",
                                "library[3][title]",
                                "library[3][author]",
                                "library[3][year]",
                                "library[4][title]",
                                "library[4][author]",
                                "library[4][year]",
                                "library[5][title]",
                                "library[5][author]",
                                "library[5][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a book reading list.\n\nFeature Requirements:\n- Begin with a single key named \"reading_list\".\n- Include exactly 6 books as entries under \"reading_list\".\n- Each book entry must contain three keys: \"title\", \"author\", and \"pages\".\n- All \"title\" and \"author\" values must be non-empty strings.\n- Each \"pages\" value must be an integer greater than 50.\n- Use a list format with a dash (-) for each book entry, indented with two spaces.\n- Include a top-level comment stating \"Generated Book Reading List\" at the very beginning.\n- Do not add any keys or values other than those specified.\n- Ensure there is no extra whitespace or blank lines between book entries.\n- Write all YAML content exactly as outlined without any additional formatting.",
            "task_id": "001840",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "reading_list",
                "reading_list[0][title]",
                "reading_list[0][author]",
                "reading_list[0][pages]",
                "reading_list[1][title]",
                "reading_list[1][author]",
                "reading_list[1][pages]",
                "reading_list[2][title]",
                "reading_list[2][author]",
                "reading_list[2][pages]",
                "reading_list[3][title]",
                "reading_list[3][author]",
                "reading_list[3][pages]",
                "reading_list[4][title]",
                "reading_list[4][author]",
                "reading_list[4][pages]",
                "reading_list[5][title]",
                "reading_list[5][author]",
                "reading_list[5][pages]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001840_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a book reading list.\n\nFeature Requirements:\n- Begin with a single key named \"reading_list\".\n- Include exactly 6 books as entries under \"reading_list\".\n- Each book entry must contain three keys: \"title\", \"author\", and \"pages\".\n- All \"title\" and \"author\" values must be non-empty strings.\n- Each \"pages\" value must be an integer greater than 50.\n- Use a list format with a dash (-) for each book entry, indented with two spaces.\n- Include a top-level comment stating \"Generated Book Reading List\" at the very beginning.\n- Do not add any keys or values other than those specified.\n- Ensure there is no extra whitespace or blank lines between book entries.\n- Write all YAML content exactly as outlined without any additional formatting."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001840_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "reading_list",
                                "reading_list[0][title]",
                                "reading_list[0][author]",
                                "reading_list[0][pages]",
                                "reading_list[1][title]",
                                "reading_list[1][author]",
                                "reading_list[1][pages]",
                                "reading_list[2][title]",
                                "reading_list[2][author]",
                                "reading_list[2][pages]",
                                "reading_list[3][title]",
                                "reading_list[3][author]",
                                "reading_list[3][pages]",
                                "reading_list[4][title]",
                                "reading_list[4][author]",
                                "reading_list[4][pages]",
                                "reading_list[5][title]",
                                "reading_list[5][author]",
                                "reading_list[5][pages]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a library's book catalog.\n\nFeature Requirements:\n- Begin with a single key named \"library_catalog\".\n- Include exactly 7 books as children under \"library_catalog\".\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" values must be non-empty strings.\n- All \"author\" values must be non-empty strings.\n- All \"year\" values must be integers between 1900 and 2023.\n- Ensure the output is properly indented with two spaces per nested level.\n- Provide a top-level comment indicating \"Generated Library Catalog\".\n- Avoid any additional whitespace or empty lines between items.",
            "task_id": "001841",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# comment: Generated Library Catalog",
                "library_catalog",
                "library_catalog[0].title",
                "library_catalog[0].author",
                "library_catalog[0].year",
                "library_catalog[1].title",
                "library_catalog[1].author",
                "library_catalog[1].year",
                "library_catalog[2].title",
                "library_catalog[2].author",
                "library_catalog[2].year",
                "library_catalog[3].title",
                "library_catalog[3].author",
                "library_catalog[3].year",
                "library_catalog[4].title",
                "library_catalog[4].author",
                "library_catalog[4].year",
                "library_catalog[5].title",
                "library_catalog[5].author",
                "library_catalog[5].year",
                "library_catalog[6].title",
                "library_catalog[6].author",
                "library_catalog[6].year"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001841_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a library's book catalog.\n\nFeature Requirements:\n- Begin with a single key named \"library_catalog\".\n- Include exactly 7 books as children under \"library_catalog\".\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" values must be non-empty strings.\n- All \"author\" values must be non-empty strings.\n- All \"year\" values must be integers between 1900 and 2023.\n- Ensure the output is properly indented with two spaces per nested level.\n- Provide a top-level comment indicating \"Generated Library Catalog\".\n- Avoid any additional whitespace or empty lines between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001841_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# comment: Generated Library Catalog",
                                "library_catalog",
                                "library_catalog[0].title",
                                "library_catalog[0].author",
                                "library_catalog[0].year",
                                "library_catalog[1].title",
                                "library_catalog[1].author",
                                "library_catalog[1].year",
                                "library_catalog[2].title",
                                "library_catalog[2].author",
                                "library_catalog[2].year",
                                "library_catalog[3].title",
                                "library_catalog[3].author",
                                "library_catalog[3].year",
                                "library_catalog[4].title",
                                "library_catalog[4].author",
                                "library_catalog[4].year",
                                "library_catalog[5].title",
                                "library_catalog[5].author",
                                "library_catalog[5].year",
                                "library_catalog[6].title",
                                "library_catalog[6].author",
                                "library_catalog[6].year"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly exercise plan.\n\nFeature Requirements:\n- Begin with a top-level key named exercise_plan.\n- Include exactly 7 entries under exercise_plan corresponding to each day of the week.\n- Each entry must contain 3 keys: day, activity, and duration_minutes.\n- The day value must be a non-empty string and one of the following unique options: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- The activity value must be a non-empty string describing a physical exercise.\n- The duration_minutes value must be an integer between 15 and 120.\n- Ensure that all nested structures are indented with exactly two spaces.\n- Provide a top-level comment stating \"Weekly Exercise Plan\".\n- The entries must be ordered sequentially starting from Monday.\n- Avoid any additional keys, comments, or extra whitespace between entries.",
            "task_id": "001842",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "exercise_plan",
                "exercise_plan[0][day]",
                "exercise_plan[0][activity]",
                "exercise_plan[0][duration_minutes]",
                "exercise_plan[1][day]",
                "exercise_plan[1][activity]",
                "exercise_plan[1][duration_minutes]",
                "exercise_plan[2][day]",
                "exercise_plan[2][activity]",
                "exercise_plan[2][duration_minutes]",
                "exercise_plan[3][day]",
                "exercise_plan[3][activity]",
                "exercise_plan[3][duration_minutes]",
                "exercise_plan[4][day]",
                "exercise_plan[4][activity]",
                "exercise_plan[4][duration_minutes]",
                "exercise_plan[5][day]",
                "exercise_plan[5][activity]",
                "exercise_plan[5][duration_minutes]",
                "exercise_plan[6][day]",
                "exercise_plan[6][activity]",
                "exercise_plan[6][duration_minutes]",
                "# Weekly Exercise Plan"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001842_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly exercise plan.\n\nFeature Requirements:\n- Begin with a top-level key named exercise_plan.\n- Include exactly 7 entries under exercise_plan corresponding to each day of the week.\n- Each entry must contain 3 keys: day, activity, and duration_minutes.\n- The day value must be a non-empty string and one of the following unique options: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- The activity value must be a non-empty string describing a physical exercise.\n- The duration_minutes value must be an integer between 15 and 120.\n- Ensure that all nested structures are indented with exactly two spaces.\n- Provide a top-level comment stating \"Weekly Exercise Plan\".\n- The entries must be ordered sequentially starting from Monday.\n- Avoid any additional keys, comments, or extra whitespace between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001842_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "exercise_plan",
                                "exercise_plan[0][day]",
                                "exercise_plan[0][activity]",
                                "exercise_plan[0][duration_minutes]",
                                "exercise_plan[1][day]",
                                "exercise_plan[1][activity]",
                                "exercise_plan[1][duration_minutes]",
                                "exercise_plan[2][day]",
                                "exercise_plan[2][activity]",
                                "exercise_plan[2][duration_minutes]",
                                "exercise_plan[3][day]",
                                "exercise_plan[3][activity]",
                                "exercise_plan[3][duration_minutes]",
                                "exercise_plan[4][day]",
                                "exercise_plan[4][activity]",
                                "exercise_plan[4][duration_minutes]",
                                "exercise_plan[5][day]",
                                "exercise_plan[5][activity]",
                                "exercise_plan[5][duration_minutes]",
                                "exercise_plan[6][day]",
                                "exercise_plan[6][activity]",
                                "exercise_plan[6][duration_minutes]",
                                "# Weekly Exercise Plan"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nTransform the given text into a YAML formatted fantasy character roster for a role-playing game.\n\nFeature Requirements:\n- Begin with a single key named character_roster.\n- Include exactly 3 character entries as children under character_roster.\n- Each character entry must have four keys: name, class, level, and weapon.\n- All name keys should include non-empty strings without any whitespace.\n- The level key must include an integer value between 1 and 100.\n- The class key should be one of the following fixed values: Warrior, Mage, or Rogue.\n- The weapon key must contain a non-empty string starting with a capital letter.\n- Include a top-level comment stating \"Fantasy RPG Character Roster\".\n- Ensure the YAML output is properly indented with two spaces for each level of nesting.\n- Do not include extra whitespace or empty lines between entries.",
            "task_id": "001843",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "character_roster",
                "character_roster[].name",
                "character_roster[].class",
                "character_roster[].level",
                "character_roster[].weapon"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001843_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nTransform the given text into a YAML formatted fantasy character roster for a role-playing game.\n\nFeature Requirements:\n- Begin with a single key named character_roster.\n- Include exactly 3 character entries as children under character_roster.\n- Each character entry must have four keys: name, class, level, and weapon.\n- All name keys should include non-empty strings without any whitespace.\n- The level key must include an integer value between 1 and 100.\n- The class key should be one of the following fixed values: Warrior, Mage, or Rogue.\n- The weapon key must contain a non-empty string starting with a capital letter.\n- Include a top-level comment stating \"Fantasy RPG Character Roster\".\n- Ensure the YAML output is properly indented with two spaces for each level of nesting.\n- Do not include extra whitespace or empty lines between entries."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001843_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "character_roster",
                                "character_roster[].name",
                                "character_roster[].class",
                                "character_roster[].level",
                                "character_roster[].weapon"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given narrative into a YAML format representing a fictional detective report.\n\nFeature Requirements:\n- Begin with a single top-level key named \"detective_report\".\n- Under \"detective_report\", include exactly three keys: \"case_id\", \"description\", and \"evidence\".\n- The \"case_id\" value must be a string following the pattern \"CASE-####\" where \"####\" are digits.\n- The \"description\" must be a non-empty string summarizing the case details.\n- The \"evidence\" must be a list containing exactly 4 items, with each item including two keys: \"item_name\" (non-empty string) and \"verified\" (boolean).\n- Ensure the output is indented with exactly two spaces per level and contains no extra blank lines between items.",
            "task_id": "001844",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "detective_report",
                "detective_report[case_id]",
                "detective_report[description]",
                "detective_report[evidence]",
                "detective_report[evidence][0][item_name]",
                "detective_report[evidence][0][verified]",
                "detective_report[evidence][1][item_name]",
                "detective_report[evidence][1][verified]",
                "detective_report[evidence][2][item_name]",
                "detective_report[evidence][2][verified]",
                "detective_report[evidence][3][item_name]",
                "detective_report[evidence][3][verified]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001844_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given narrative into a YAML format representing a fictional detective report.\n\nFeature Requirements:\n- Begin with a single top-level key named \"detective_report\".\n- Under \"detective_report\", include exactly three keys: \"case_id\", \"description\", and \"evidence\".\n- The \"case_id\" value must be a string following the pattern \"CASE-####\" where \"####\" are digits.\n- The \"description\" must be a non-empty string summarizing the case details.\n- The \"evidence\" must be a list containing exactly 4 items, with each item including two keys: \"item_name\" (non-empty string) and \"verified\" (boolean).\n- Ensure the output is indented with exactly two spaces per level and contains no extra blank lines between items."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001844_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "detective_report",
                                "detective_report[case_id]",
                                "detective_report[description]",
                                "detective_report[evidence]",
                                "detective_report[evidence][0][item_name]",
                                "detective_report[evidence][0][verified]",
                                "detective_report[evidence][1][item_name]",
                                "detective_report[evidence][1][verified]",
                                "detective_report[evidence][2][item_name]",
                                "detective_report[evidence][2][verified]",
                                "detective_report[evidence][3][item_name]",
                                "detective_report[evidence][3][verified]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nGenerate a YAML document that represents a detailed itinerary for a weekend camping trip.\n\nFeature Requirements:\n- Begin with a single top-level key named \"camping_itinerary\".\n- The itinerary must include exactly three days: Day1, Day2, and Day3.\n- Each day should have two sub-keys: \"location\" and \"activities\".\n- The \"location\" value must be a non-empty string indicating the campsite.\n- The \"activities\" value must be an array containing exactly three non-empty string entries detailing planned activities.\n- Ensure the document uses two spaces for indentation in nested structures.\n- Add a top-level comment at the beginning saying \"Generated Camping Itinerary\".\n- Do not include any additional keys or extra whitespace beyond the specified structure.",
            "task_id": "001845",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "camping_itinerary",
                "camping_itinerary[Day1]",
                "camping_itinerary[Day1][location]",
                "camping_itinerary[Day1][activities]",
                "camping_itinerary[Day2]",
                "camping_itinerary[Day2][location]",
                "camping_itinerary[Day2][activities]",
                "camping_itinerary[Day3]",
                "camping_itinerary[Day3][location]",
                "camping_itinerary[Day3][activities]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001845_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nGenerate a YAML document that represents a detailed itinerary for a weekend camping trip.\n\nFeature Requirements:\n- Begin with a single top-level key named \"camping_itinerary\".\n- The itinerary must include exactly three days: Day1, Day2, and Day3.\n- Each day should have two sub-keys: \"location\" and \"activities\".\n- The \"location\" value must be a non-empty string indicating the campsite.\n- The \"activities\" value must be an array containing exactly three non-empty string entries detailing planned activities.\n- Ensure the document uses two spaces for indentation in nested structures.\n- Add a top-level comment at the beginning saying \"Generated Camping Itinerary\".\n- Do not include any additional keys or extra whitespace beyond the specified structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001845_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "camping_itinerary",
                                "camping_itinerary[Day1]",
                                "camping_itinerary[Day1][location]",
                                "camping_itinerary[Day1][activities]",
                                "camping_itinerary[Day2]",
                                "camping_itinerary[Day2][location]",
                                "camping_itinerary[Day2][activities]",
                                "camping_itinerary[Day3]",
                                "camping_itinerary[Day3][location]",
                                "camping_itinerary[Day3][activities]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily agenda.\n\nFeature Requirements:\n- Begin with a single key named \"agenda\".\n- Under \"agenda\", include exactly 3 event entries.\n- Each event entry must include three keys: \"title\", \"time\", and \"duration\".\n- The \"title\" key must hold a non-empty string describing the event.\n- The \"time\" key must hold a string in 24-hour HH:MM format.\n- The \"duration\" key must hold a positive integer representing the event's duration in minutes.\n- All nested structures must be indented with two spaces.\n- Include a top-level comment stating \"Generated Daily Agenda\" without any additional whitespace or blank lines.",
            "task_id": "001846",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Generated Daily Agenda",
                "agenda",
                "agenda[0]",
                "agenda[0][title]",
                "agenda[0][time]",
                "agenda[0][duration]",
                "agenda[1]",
                "agenda[1][title]",
                "agenda[1][time]",
                "agenda[1][duration]",
                "agenda[2]",
                "agenda[2][title]",
                "agenda[2][time]",
                "agenda[2][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001846_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily agenda.\n\nFeature Requirements:\n- Begin with a single key named \"agenda\".\n- Under \"agenda\", include exactly 3 event entries.\n- Each event entry must include three keys: \"title\", \"time\", and \"duration\".\n- The \"title\" key must hold a non-empty string describing the event.\n- The \"time\" key must hold a string in 24-hour HH:MM format.\n- The \"duration\" key must hold a positive integer representing the event's duration in minutes.\n- All nested structures must be indented with two spaces.\n- Include a top-level comment stating \"Generated Daily Agenda\" without any additional whitespace or blank lines."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001846_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Generated Daily Agenda",
                                "agenda",
                                "agenda[0]",
                                "agenda[0][title]",
                                "agenda[0][time]",
                                "agenda[0][duration]",
                                "agenda[1]",
                                "agenda[1][title]",
                                "agenda[1][time]",
                                "agenda[1][duration]",
                                "agenda[2]",
                                "agenda[2][title]",
                                "agenda[2][time]",
                                "agenda[2][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment stating \"Travel Itinerary Details\".\n- Start with a single key named \"destinations\".\n- Ensure the \"destinations\" key contains exactly 6 entries.\n- Each entry must include three keys: \"city\", \"country\", and \"days\".\n- The \"city\" and \"country\" keys must have non-empty string values.\n- The \"days\" key must have an integer value greater than zero.\n- All nested structures must be indented using exactly two spaces.\n- Do not include any extra keys, comments, or blank lines beyond what is specified.\n- Ensure there is no additional whitespace other than required for proper indentation.",
            "task_id": "001847",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "destinations",
                "destinations[0][city]",
                "destinations[0][country]",
                "destinations[0][days]",
                "destinations[1][city]",
                "destinations[1][country]",
                "destinations[1][days]",
                "destinations[2][city]",
                "destinations[2][country]",
                "destinations[2][days]",
                "destinations[3][city]",
                "destinations[3][country]",
                "destinations[3][days]",
                "destinations[4][city]",
                "destinations[4][country]",
                "destinations[4][days]",
                "destinations[5][city]",
                "destinations[5][country]",
                "destinations[5][days]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001847_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment stating \"Travel Itinerary Details\".\n- Start with a single key named \"destinations\".\n- Ensure the \"destinations\" key contains exactly 6 entries.\n- Each entry must include three keys: \"city\", \"country\", and \"days\".\n- The \"city\" and \"country\" keys must have non-empty string values.\n- The \"days\" key must have an integer value greater than zero.\n- All nested structures must be indented using exactly two spaces.\n- Do not include any extra keys, comments, or blank lines beyond what is specified.\n- Ensure there is no additional whitespace other than required for proper indentation."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001847_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "destinations",
                                "destinations[0][city]",
                                "destinations[0][country]",
                                "destinations[0][days]",
                                "destinations[1][city]",
                                "destinations[1][country]",
                                "destinations[1][days]",
                                "destinations[2][city]",
                                "destinations[2][country]",
                                "destinations[2][days]",
                                "destinations[3][city]",
                                "destinations[3][country]",
                                "destinations[3][days]",
                                "destinations[4][city]",
                                "destinations[4][country]",
                                "destinations[4][days]",
                                "destinations[5][city]",
                                "destinations[5][country]",
                                "destinations[5][days]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 stops as children under itinerary.\n- Each stop must have three keys: location, date, and activities.\n- The location key must have a non-empty string value.\n- The date key must contain a valid ISO 8601 date in the format YYYY-MM-DD.\n- The activities key must be a list containing at least one non-empty string.\n- Each activity list must have unique values—no duplicates are allowed.\n- Ensure the output is properly indented with exactly two spaces for each nested level.\n- Provide a top-level comment indicating \"Generated Vacation Itinerary\".\n- Avoid any additional whitespace or empty lines between stops.",
            "task_id": "001848",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "# Generated Vacation Itinerary",
                "itinerary",
                "itinerary[0][location]",
                "itinerary[0][date]",
                "itinerary[0][activities]",
                "itinerary[1][location]",
                "itinerary[1][date]",
                "itinerary[1][activities]",
                "itinerary[2][location]",
                "itinerary[2][date]",
                "itinerary[2][activities]",
                "itinerary[3][location]",
                "itinerary[3][date]",
                "itinerary[3][activities]",
                "itinerary[4][location]",
                "itinerary[4][date]",
                "itinerary[4][activities]",
                "itinerary[5][location]",
                "itinerary[5][date]",
                "itinerary[5][activities]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001848_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 stops as children under itinerary.\n- Each stop must have three keys: location, date, and activities.\n- The location key must have a non-empty string value.\n- The date key must contain a valid ISO 8601 date in the format YYYY-MM-DD.\n- The activities key must be a list containing at least one non-empty string.\n- Each activity list must have unique values—no duplicates are allowed.\n- Ensure the output is properly indented with exactly two spaces for each nested level.\n- Provide a top-level comment indicating \"Generated Vacation Itinerary\".\n- Avoid any additional whitespace or empty lines between stops."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001848_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "# Generated Vacation Itinerary",
                                "itinerary",
                                "itinerary[0][location]",
                                "itinerary[0][date]",
                                "itinerary[0][activities]",
                                "itinerary[1][location]",
                                "itinerary[1][date]",
                                "itinerary[1][activities]",
                                "itinerary[2][location]",
                                "itinerary[2][date]",
                                "itinerary[2][activities]",
                                "itinerary[3][location]",
                                "itinerary[3][date]",
                                "itinerary[3][activities]",
                                "itinerary[4][location]",
                                "itinerary[4][date]",
                                "itinerary[4][activities]",
                                "itinerary[5][location]",
                                "itinerary[5][date]",
                                "itinerary[5][activities]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an outdoor adventure itinerary.\n\nFeature Requirements:\n- Begin with a single top-level key named \"adventure_itinerary\".\n- Include exactly 4 planned stops as children under \"adventure_itinerary\".\n- Each stop must have three keys: \"location\", \"activity\", and \"duration\".\n- All \"location\" keys must contain non-empty string values indicating a scenic spot.\n- All \"activity\" keys must contain non-empty string values describing an adventure activity.\n- All \"duration\" keys must contain integer values greater than 30, representing minutes.\n- Ensure the YAML output uses exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Adventure Itinerary\".\n- Do not include any extra whitespace or empty lines between items.\n- Ensure the sequence of stops is preserved in their original order.",
            "task_id": "001849",
            "task_name": "Text to YAML",
            "input_type": "Text",
            "output_type": "YAML",
            "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "adventure_itinerary",
                "adventure_itinerary[0][location]",
                "adventure_itinerary[0][activity]",
                "adventure_itinerary[0][duration]",
                "adventure_itinerary[1][location]",
                "adventure_itinerary[1][activity]",
                "adventure_itinerary[1][duration]",
                "adventure_itinerary[2][location]",
                "adventure_itinerary[2][activity]",
                "adventure_itinerary[2][duration]",
                "adventure_itinerary[3][location]",
                "adventure_itinerary[3][activity]",
                "adventure_itinerary[3][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001849_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an outdoor adventure itinerary.\n\nFeature Requirements:\n- Begin with a single top-level key named \"adventure_itinerary\".\n- Include exactly 4 planned stops as children under \"adventure_itinerary\".\n- Each stop must have three keys: \"location\", \"activity\", and \"duration\".\n- All \"location\" keys must contain non-empty string values indicating a scenic spot.\n- All \"activity\" keys must contain non-empty string values describing an adventure activity.\n- All \"duration\" keys must contain integer values greater than 30, representing minutes.\n- Ensure the YAML output uses exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Adventure Itinerary\".\n- Do not include any extra whitespace or empty lines between items.\n- Ensure the sequence of stops is preserved in their original order."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001849_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "adventure_itinerary",
                                "adventure_itinerary[0][location]",
                                "adventure_itinerary[0][activity]",
                                "adventure_itinerary[0][duration]",
                                "adventure_itinerary[1][location]",
                                "adventure_itinerary[1][activity]",
                                "adventure_itinerary[1][duration]",
                                "adventure_itinerary[2][location]",
                                "adventure_itinerary[2][activity]",
                                "adventure_itinerary[2][duration]",
                                "adventure_itinerary[3][location]",
                                "adventure_itinerary[3][activity]",
                                "adventure_itinerary[3][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]