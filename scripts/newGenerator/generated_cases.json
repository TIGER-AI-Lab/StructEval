[
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000100",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the given text input into an Angular component that presents a detailed user report view.\n\nFeature Requirements:\n- Include a centered header using an <h1> element displaying the text \"User Report Dashboard\".\n- Create a <div> container with a class name of 'report-wrapper' to encapsulate all component content.\n- Construct exactly 2 distinct sections: the first for user statistics and the second for activity logs.\n- The first section must render a table (<table>) element featuring exactly 2 rows and 3 columns; ensure the header row uses <th> elements to label each column.\n- Within the table, assign a CSS class named 'status-critical' to one specific cell to highlight an important statistic in bold text.\n- The second section should display a paragraph (<p>) with an inline style that sets the text color to green and the font style to italic.\n- Position a button labeled \"Update Report\" at the bottom using a <div> with a class 'button-area' for alignment.\n- Use Angular-specific directives to bind each data element appropriately to the text input.",
        "raw_output_metric": [
            "User Report Dashboard",
            "report-wrapper",
            "status-critical",
            "Update Report",
            "button-area",
            "<h1>",
            "<div class=\"report-wrapper\">",
            "<table>",
            "<th>",
            "<p",
            "color: green",
            "font-style: italic",
            "{{"
        ],
        "VQA": {
            "What is the text displayed in the centered header?": "User Report Dashboard",
            "How many main sections are present in the layout?": "2",
            "What does the first section display?": "A table containing user statistics with 2 rows and 3 columns",
            "How many columns are used in the header row of the table?": "3",
            "Which cell within the table is highlighted with a special style?": "One cell marked with the 'status-critical' class and rendered in bold",
            "What are the styling details of the paragraph in the second section?": "The text is green and italicized",
            "What is the label on the button located at the bottom of the layout?": "Update Report"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000101",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the given text input into an Angular component that renders an order summary display.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Order Summary'.\n- Create a <div> element serving as the main container with the class name 'order-container'.\n- Divide the component into exactly 3 distinct sections, each wrapped in its own <section> element.\n- The first section must render a table with a header row containing two columns labeled 'Item' and 'Quantity', followed by exactly 2 data rows populated with unique order details from the input.\n- The second section must display an <h3> element with the text 'Total Cost', followed by a paragraph (<p>) showing a calculated total; style this paragraph with an inline style that sets the text color to blue.\n- The third section must contain a <div> element with the class 'button-section' that holds a button element labeled 'Submit Order'.\n- Each table data cell in the first section should include text formatted as a label and a corresponding value separated by a hyphen (-).\n- Ensure that one of the table data cells in the first section includes a CSS class called 'highlight-item' which visually emphasizes its text with a bold font style.\n- Place all elements properly nested and ordered to reflect a clear structural hierarchy.\n- Do not include any external assets or images in the component.",
        "raw_output_metric": [
            "Order Summary",
            "order-container",
            "section",
            "table",
            "Item",
            "Quantity",
            "highlight-item",
            "Total Cost",
            "color: blue;",
            "button-section",
            "Submit Order"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the component?": "Order Summary",
            "What is the class name of the main container that wraps the content?": "order-container",
            "How many distinct sections are rendered in the component?": "3",
            "What header labels are displayed in the table within the first section?": "Item and Quantity",
            "How many data rows are shown in the table below the headers?": "2",
            "Which table cell is visually emphasized with bold styling?": "The cell with the 'highlight-item' class",
            "What is the text displayed in the heading immediately above the total cost display?": "Total Cost",
            "What inline style is applied to the paragraph showing the total cost?": "Text color is set to blue",
            "What label is shown on the button within the third section?": "Submit Order"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000102",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a bookstore inventory summary.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Bookstore Inventory\" at the top of the component.\n- Use a <div> element with a class name of 'inventory-wrapper' to contain all the component elements.\n- Create exactly 3 sections, each wrapped in a <section> element, to organize distinct data groups.\n- In the first section, include a <table> element displaying exactly 4 rows and 2 columns; the first column for book titles and the second column for their prices.\n- In the second section, display a paragraph (<p>) that shows the input text content; apply an inline style to set the font-style as oblique.\n- In the third section, include an ordered list (<ol>) containing exactly 3 list items (<li>), each detailing a unique bookstore feature.\n- In the table from the first section, ensure that one of the price values is rendered in green by applying a CSS class called 'price-highlight' to that cell.\n- Place a button element labeled \"Update Inventory\" at the bottom of the component inside a <div> with the class 'update-wrapper' for proper alignment.",
        "raw_output_metric": [
            "Bookstore Inventory",
            "inventory-wrapper",
            "<section>",
            "<table>",
            "<tr>",
            "<td>",
            "price-highlight",
            "font-style: oblique;",
            "<p>",
            "<ol>",
            "<li>",
            "Update Inventory",
            "update-wrapper"
        ],
        "VQA": {
            "What is the text displayed in the centered heading at the top?": "Bookstore Inventory",
            "How many sections are present in the component?": "3",
            "How many rows does the table in the first section display?": "4",
            "How many columns does the table in the first section have?": "2",
            "What unique styling is applied to one of the price cells in the table?": "Displayed in green",
            "How is the text content in the second section styled?": "Oblique font style",
            "How many items are listed in the ordered list in the third section?": "3",
            "What label does the button at the bottom of the component display?": "Update Inventory"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000103",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a transaction summary with detailed order information.\n\nFeature Requirements:\n- Include a centered <h2> element with the text \"Transaction Summary\" at the top.\n- Use a main <div> container with a class name of \"transaction-container\" to wrap the component.\n- Display exactly 2 sections, each wrapped in a <section> element with distinct content.\n- In the first section, create an unordered list (<ul>) with exactly 3 list items (<li>), where each item contains a label and a value separated by a colon.\n- Ensure one list item’s value is styled with a CSS class \"highlight-red\" so that its text appears in red.\n- In the second section, include a paragraph (<p>) with an inline style that sets the font-style to italic.\n- Add a button element labeled \"Submit Report\" at the bottom, placed inside a <div> with the class \"button-wrapper\" for proper alignment.\n- Organize the structure so that each element is clearly visible and follows the hierarchy as described without any extra or missing parts.",
        "raw_output_metric": [
            "Transaction Summary",
            "transaction-container",
            "<section>",
            "<ul>",
            "<li>",
            ":",
            "highlight-red",
            "<p",
            "font-style: italic;",
            "Submit Report",
            "button-wrapper"
        ],
        "VQA": {
            "What is the centered header text at the top of the component?": "Transaction Summary",
            "How many sections are visible in the layout?": "2",
            "How many items are listed in the unordered list in the first section?": "3",
            "Does one of the list items feature a red highlighted value?": "Yes, through the 'highlight-red' class",
            "Is the paragraph in the second section styled with italics?": "Yes, it uses an inline style for italic font",
            "What label is shown on the button at the bottom of the component?": "Submit Report",
            "Which CSS class is applied to the main container wrapping the component?": "transaction-container",
            "In the list items, how is the information structured between the label and its value?": "They are separated by a colon"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000104",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text into an Angular component that displays a store inventory dashboard.\n\nFeature Requirements:\n- Render a centered page header using an <h1> element with the text 'Inventory Dashboard'.\n- Wrap the main content in a <section> element with the class name 'inventory-section'.\n- Within the section, create exactly 3 distinct <div> elements, each representing a different inventory category.\n- Each inventory category <div> must include a title in an <h3> element with a unique category name and a table that lists items.\n- Each table should have exactly 2 columns labeled 'Item' and 'Stock Count', respectively.\n- Populate every table with exactly 4 rows, where each row displays an item's name and its corresponding stock count derived from the input text.\n- Ensure one of the stock count values in any table is styled using an inline style attribute that sets the color to blue.\n- Include a footer using a <footer> element that holds a button labeled 'Update Inventory', which is positioned inside a <div> with the class 'footer-button'.",
        "raw_output_metric": [
            "Inventory Dashboard",
            "inventory-section",
            "<h1>",
            "<section",
            "<div",
            "<h3>",
            "Item",
            "Stock Count",
            "color: blue",
            "<table",
            "<footer",
            "footer-button",
            "Update Inventory"
        ],
        "VQA": {
            "What is the text displayed in the centered page header?": "Inventory Dashboard",
            "How many inventory category blocks are present on the page?": "3",
            "How is the main content of the inventory dashboard wrapped?": "Inside a section element with the class 'inventory-section'",
            "What are the column headers in each inventory table?": "Item and Stock Count",
            "How many rows of inventory items are shown in each table?": "4",
            "Is any stock count styled differently, and if so, what color is used?": "Yes, one stock count value is styled with the color blue",
            "Where is the 'Update Inventory' button located?": "Inside a footer element within a div of class 'footer-button'"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000105",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that presents a user profile overview with distinct sections for contact details, hobbies, and biography.\n\nFeature Requirements:\n- Create an <h1> element at the top with the text \"User Profile Overview\", and apply a CSS class 'header-center' to center the title.\n- Wrap all content in a <div> element with the class 'profile-container' for structural layout.\n- Include exactly 3 sections using <section> tags: the first for contact details, the second for hobbies, and the third for a biography.\n- The first section must contain an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a contact label and a phone number separated by a dash (-).\n- The second section should feature an unordered list (<ul>) with precisely 4 list items (<li>), each detailing a hobby and a brief description; ensure one of the hobby descriptions is styled with an inline style to set the text color to blue.\n- The third section must include a paragraph (<p>) that holds a biography text, with an inline style to justify the text alignment.\n- Position a button labeled \"Edit Profile\" at the bottom of the component within a <div> that has the class 'action-button' for precise placement.\n- Ensure that each section is visually separated by a horizontal rule (<hr>) placed between consecutive sections.",
        "raw_output_metric": [
            "User Profile Overview",
            "header-center",
            "profile-container",
            "<section>",
            "<ul>",
            "<li>",
            "-",
            "<hr>",
            "Edit Profile",
            "color: blue",
            "text-align: justify"
        ],
        "VQA": {
            "What is the page title displayed at the top?": "User Profile Overview",
            "Is the title centered?": "Yes, it has a centered styling.",
            "How many sections are present in the profile?": "3",
            "What does the first section show?": "An unordered list with 2 contact details (label and phone number).",
            "How many hobby items are listed in the second section?": "4",
            "Is any hobby description styled differently?": "Yes, one hobby description is styled with blue text.",
            "How is the biography text styled?": "It is justified using inline styling.",
            "What element separates the sections?": "A horizontal rule is placed between each section.",
            "Where is the 'Edit Profile' button located?": "At the bottom inside a container designated for actions."
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000106",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an organized list of recent book releases.\n\nFeature Requirements:\n- Create a centered <h1> element with the text 'Latest Books' at the top of the component.\n- Use a <div> element with a class name of 'books-wrapper' to act as the main container for all content.\n- Divide the component into exactly 3 sections, each wrapped in a <section> element.\n- In the first section, include a <table> element that lists exactly 2 book entries; each entry should be represented by a row containing two cells for the book title and author.\n- In the second section, add a <blockquote> element that displays a review excerpt; apply an inline style to the blockquote to set the text color to blue.\n- In the third section, create an unordered list (<ul>) that contains exactly 4 list items (<li>), where each item must show a label and a value separated by a dash (-); ensure one list item's value uses a CSS class named 'emphasis-green' to change its appearance.\n- Add a <footer> element at the bottom of the component containing a centered paragraph (<p>) with the text 'End of List'.",
        "raw_output_metric": [
            "Latest Books",
            "books-wrapper",
            "<section>",
            "<table>",
            "<tr>",
            "<td>",
            "<blockquote style=\"color: blue;\">",
            "<ul>",
            "<li>",
            "emphasis-green",
            "<footer>",
            "<p>",
            "End of List"
        ],
        "VQA": {
            "What is the centered heading text at the top of the component?": "Latest Books",
            "How many main sections are present in the component?": "3",
            "How many book entries are displayed in the table within the first section?": "2",
            "What style is applied to the review excerpt in the blockquote?": "The text color is set to blue",
            "How many list items are shown in the unordered list in the third section?": "4",
            "Which list item uses the 'emphasis-green' CSS class for its value?": "One of the list items",
            "What text is displayed in the footer's centered paragraph?": "End of List"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000107",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a detailed project summary with structured schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Project Snapshot'.\n- Wrap all content within a <div> element that has the class name 'project-summary' for overall layout.\n- Create exactly 3 sections using <section> elements, each representing Overview, Timeline, and Notes.\n- In the Overview section, display a table (<table>) with exactly 3 rows (<tr>), each row containing 2 cells (<td>) that show a key and its corresponding value from the input.\n- In the Timeline section, include an unordered list (<ul>) with exactly 4 list items (<li>), each representing a milestone with a date and description.\n- In the Notes section, add a blockquote (<blockquote>) that presents text with emphasized styling.\n- Add a footer at the bottom using a <div> with the class 'action-footer' that contains a button labeled 'Update Schedule'.\n- Ensure that in the table, the value in the second row is styled with an inline style to set the text color to blue.",
        "raw_output_metric": [
            "Project Snapshot",
            "project-summary",
            "<section>",
            "Overview",
            "Timeline",
            "Notes",
            "<table>",
            "<tr>",
            "<td>",
            "style=\"color: blue;\"",
            "<ul>",
            "<li>",
            "<blockquote>",
            "action-footer",
            "Update Schedule"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the page?": "Project Snapshot",
            "How many sections are present in the project summary?": "3",
            "What are the names of the three sections?": "Overview, Timeline, and Notes",
            "How many rows does the Overview table have?": "3",
            "How many cells are in each row of the Overview table?": "2",
            "What unique style is applied to the value in the second row of the table?": "Text color set to blue",
            "How many milestones are listed in the Timeline section?": "4",
            "What is the label on the button in the footer area?": "Update Schedule"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000108",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that organizes user-specific information into a dashboard view.\n\nFeature Requirements:\n- Create a main container using a <div> element with the class name 'dashboard-container' to encapsulate all component content.\n- Place a centered <h1> element at the top of the component displaying the text 'User Dashboard Snapshot'.\n- Include exactly 2 distinct sections, each enclosed in a <section> element.\n- In the first section, create a table with exactly 3 rows and 2 columns; each row should display a label in the first column (using bold formatting) and a corresponding value in the second column.\n- Assign one table cell in the first section a CSS class 'critical' to ensure its text appears in red.\n- In the second section, add a paragraph (<p>) element with inline styling that sets the background color to 'lightblue' and displays a summary description.\n- At the bottom of the component, include a <div> element with the class 'button-wrapper' that contains a button labeled 'Update Dashboard'.",
        "raw_output_metric": [
            "dashboard-container",
            "User Dashboard Snapshot",
            "<section>",
            "<table>",
            "critical",
            "lightblue",
            "button-wrapper",
            "Update Dashboard"
        ],
        "VQA": {
            "What is the main header text that appears at the top of the dashboard?": "User Dashboard Snapshot",
            "How many sections are organized in this dashboard view?": "2",
            "How many rows are shown in the table within the first section?": "3",
            "What visual formatting is applied to the labels in the table's first column?": "They are displayed in bold text",
            "How is critical information highlighted within the table?": "One table cell uses the 'critical' CSS class to render its text in red",
            "What background color is applied to the paragraph in the second section?": "Lightblue",
            "What text is visible on the button at the bottom of the component?": "Update Dashboard"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000109",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that displays a product catalog with a structured layout and interactive elements.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Product Catalog'.\n- Create a <div> element serving as a grid container with a class name of 'catalog-grid' for layout organization.\n- Incorporate exactly 3 sections: a header, a content area, and a footer, each wrapped in a <section> element.\n- In the header section, include an <h3> element with the text 'Explore Our Best Sellers' aligned to the left, and apply an inline style setting its background to a linear gradient.\n- Within the content section, implement an Angular table that lists exactly 4 products, where each row displays a product name and its price separated by a hyphen (-).\n- Ensure one product row has its product name styled in blue using a CSS class called 'blue-text'.\n- In the footer section, add a <div> with class 'footer-button' containing a button labeled 'Load More'.\n- Introduce a <p> element adjacent to the table that displays the current date in italic text through inline styling.\n- All elements must use clearly defined class names (such as 'header-section', 'table-row', 'footer-section') for consistent styling.",
        "raw_output_metric": [
            "Product Catalog",
            "catalog-grid",
            "Explore Our Best Sellers",
            "linear-gradient",
            "blue-text",
            "footer-button",
            "Load More",
            "header-section",
            "table-row",
            "footer-section",
            "font-style: italic",
            "-"
        ],
        "VQA": {
            "What is the text of the centered title at the top?": "Product Catalog",
            "How many sections are present in the component layout?": "3",
            "What text is displayed in the header section's h3 element?": "Explore Our Best Sellers",
            "What inline style is applied to the header text?": "A linear gradient background",
            "How many products are listed in the Angular table?": "4",
            "What information is shown in each table row?": "A product name and its price separated by a hyphen",
            "How is one of the product names distinctively styled in the table?": "It is styled in blue via the 'blue-text' CSS class",
            "What label is visible on the button located in the footer section?": "Load More"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000110",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that organizes dynamic city information and events details.\n\nFeature Requirements:\n- Use an <h1> element at the top of the component with the text \"City Events\".\n- Include a <div> element with the class name \"city-container\" to serve as the primary layout wrapper.\n- Create exactly 3 sections, each wrapped in a <section> element to separate different content areas.\n- The first section must contain 2 paragraphs (<p>): the first describing a city overview and the second summarizing current events.\n- The second section should include an ordered list (<ol>) with precisely 4 list items (<li>), each formatted as \"Event: Details\".\n- Ensure that one of the list items in the ordered list has its text styled with a CSS class called \"highlight-event\", which applies blue coloring.\n- The third section must display a paragraph (<p>) with inline styles that set the font size to 18px and the text color to green, offering a closing remark.\n- Separate each section with a horizontal line (<hr>) element for clear visual division.\n- Add a button labeled \"Load More\" within a <div> element with the class name \"button-wrapper\", positioned at the bottom of the component.",
        "raw_output_metric": [
            "City Events",
            "city-container",
            "<section>",
            "<p>",
            "<ol>",
            "<li>",
            "Event: Details",
            "highlight-event",
            "<hr>",
            "button-wrapper",
            "Load More",
            "font-size: 18px",
            "color: green"
        ],
        "VQA": {
            "What is the top title displayed on the component?": "City Events",
            "How many content sections are clearly divided by horizontal lines?": "3",
            "How many descriptive paragraphs are visible in the first section?": "2",
            "How many event entries are listed in the second section?": "4",
            "Is one of the event entries visually distinguished with blue text?": "Yes",
            "What styling is applied to the closing remark in the third section?": "It has an inline font size of 18px and green text color",
            "What label is shown on the button at the bottom of the component?": "Load More"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000111",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of recent financial transactions with detailed breakdowns.\n\nFeature Requirements:\n- Include a left-aligned title using an <h2> element with the text ‘Transaction Summary’.\n- Wrap the entire layout in a <section> element with a class name of 'transaction-section'.\n- Display exactly 3 distinct cards, each contained within a <div> element with a class ‘transaction-card’, arranged vertically.\n- The first card should include an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a transaction ID and amount separated by a dash (-); ensure one of these transaction amounts is styled with a CSS class called 'highlight' to show green text.\n- The second card must contain a table (<table>) with one header row (<tr>) of two cells (<th>), labeled ‘Date’ and ‘Details’, where each header cell has a bottom border styled as \"2px solid blue\".\n- The third card should feature a paragraph (<p>) with inline styling that sets the font size to 14px and a button (<button>) labeled ‘Load More’ positioned at the bottom using a container <div> with class 'button-wrapper'.\n- At the end of the component, include a footer section with a <small> element that displays the text ‘End of Transactions’.",
        "raw_output_metric": [
            "Transaction Summary",
            "transaction-section",
            "transaction-card",
            "highlight",
            "Date",
            "Details",
            "2px solid blue",
            "14px",
            "Load More",
            "button-wrapper",
            "End of Transactions"
        ],
        "VQA": {
            "What is the title text displayed at the top of the component?": "Transaction Summary",
            "How many distinct cards are shown in the layout?": "3",
            "How many list items are present in the first card's unordered list?": "2",
            "Which class is used to style one of the transaction amounts for green text in the first card?": "highlight",
            "What are the labels for the header cells in the second card's table?": "Date and Details",
            "What bottom border style is applied to each header cell in the table?": "2px solid blue",
            "What inline style is applied to the paragraph in the third card?": "font size of 14px",
            "What button is displayed in the third card and where is it positioned?": "Load More button positioned at the bottom within a container with class 'button-wrapper'",
            "What text is visible in the footer section at the end of the component?": "End of Transactions"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000112",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nDevelop an Angular component that presents detailed sales analytics data for a fictional product line.\n\nFeature Requirements:\n- Create a centered title using an <h2> element with the text \"Sales Analytics Summary\".\n- Wrap the content in a <div> element with a class name of \"analytics-container\" to structure the layout.\n- Divide the component into exactly 2 distinct sections using <section> elements.\n- In the first section, insert a table (<table>) that contains a header row with two <th> cells labeled \"Metric\" and \"Value\", and exactly 3 data rows (<tr>) each with 2 <td> cells displaying a sales metric and its corresponding value.\n- Ensure that one of the <td> elements in the table includes a CSS class called \"highlight\" to mark an important data point.\n- In the second section, include a paragraph (<p>) that displays a brief summary of the analytics, applying an inline style to set the font style to italic.\n- Add a button element labeled \"Load More Data\", positioned at the bottom of the component within a <div> element that has a class name of \"button-wrapper\".\n- Incorporate an inline style on the table to apply a border (e.g., \"border: 1px solid black;\") to all table cells.",
        "raw_output_metric": [
            "Sales Analytics Summary",
            "analytics-container",
            "<section>",
            "<table>",
            "border: 1px solid black;",
            "<th>Metric</th>",
            "<th>Value</th>",
            "highlight",
            "<p>",
            "font-style: italic;",
            "Load More Data",
            "button-wrapper",
            "<h2>"
        ],
        "VQA": {
            "What is the text of the centered title at the top of the component?": "Sales Analytics Summary",
            "What is the class name of the container wrapping all the component content?": "analytics-container",
            "How many sections is the component divided into?": "2",
            "What are the labels in the header row of the table?": "Metric and Value",
            "How many data rows are displayed in the table?": "3",
            "Is any cell in the table marked with a special highlight, and if so, how is it indicated?": "Yes, one cell has the 'highlight' class",
            "What inline border style is applied to the table cells?": "1px solid black",
            "Where is the 'Load More Data' button located and what is its label?": "At the bottom of the component within a div having the class 'button-wrapper', and the button is labeled 'Load More Data'"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000113",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that displays an event schedule with detailed information from the provided text input.\n\nFeature Requirements:\n- Create an Angular component that includes a prominent <h2> element with the text \"Event Schedule\" centered at the top.\n- Add a container <div> with a class name of \"event-container\" to wrap all the event content.\n- Include exactly 3 event sections, each within a separate <section> element with unique id attributes (e.g., event-1, event-2, event-3).\n- In the first event section, include a <p> element that displays event details with bold text styling.\n- In the first event section, also add an unordered list (<ul>) containing exactly 2 list items (<li>); each list item should show a label and a value separated by a dash (-) representing the event time and location.\n- In the second event section, display a paragraph (<p>) where the text is styled using an inline style to have its color set to blue.\n- In the third event section, include a <div> that shows an emphasized note (<em>) followed by a link (<a>) with the visible text \"More Info\" immediately below it.\n- Conclude the component with a button labeled \"Update Events\" placed within a <div> that has a class \"update-button\" at the bottom.",
        "raw_output_metric": [
            "Event Schedule",
            "event-container",
            "event-1",
            "event-2",
            "event-3",
            "<p>",
            "<ul>",
            "<li>",
            "-",
            "color: blue",
            "<div>",
            "<em>",
            "<a>",
            "More Info",
            "Update Events",
            "update-button"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the component?": "Event Schedule",
            "Where is the main header positioned?": "Centered at the top",
            "How many event sections are visible in the schedule?": "3",
            "How is the event details text in the first event section styled?": "Bold",
            "How many list items are displayed in the first event section's list?": "2",
            "What color is used for the text in the second event section's paragraph?": "Blue",
            "What is immediately below the emphasized note in the third event section?": "A link labeled 'More Info'",
            "What is the label on the button at the bottom of the component?": "Update Events"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000114",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a project's performance metrics.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Project Metrics\".\n- Wrap all content in a main container <div> with the class name 'metrics-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element with unique IDs: 'overview', 'chart', and 'details'.\n- In the 'overview' section, include an unordered list (<ul>) that contains exactly 4 list items (<li>), each displaying a metric name and its value separated by a dash (-).\n- Within the 'overview' section, ensure that one of the list items applies a CSS class called 'critical' to its metric value, which should be styled with red text.\n- In the 'chart' section, add a paragraph (<p>) that mentions the chart is dynamically generated, and apply an inline style to make the text bold.\n- In the 'details' section, include two distinct paragraphs (<p>) that provide additional information based on the input data.\n- At the bottom of the component, insert a <div> with the class name 'action-btn-container' that holds a button labeled \"Update Metrics\".",
        "raw_output_metric": [
            "Project Metrics",
            "metrics-wrapper",
            "<section id=\"overview\">",
            "<section id=\"chart\">",
            "<section id=\"details\">",
            "<ul>",
            "<li>",
            "class=\"critical\"",
            "-",
            "dynamically generated",
            "font-weight: bold",
            "action-btn-container",
            "Update Metrics"
        ],
        "VQA": {
            "What is the title text displayed at the top of the component?": "Project Metrics",
            "What is the class name of the main container that wraps all content?": "metrics-wrapper",
            "How many sections are displayed in the component?": "3",
            "What unique IDs are assigned to the sections?": "overview, chart, and details",
            "How many list items appear in the unordered list within the overview section?": "4",
            "Does one of the list items have special styling for its metric value? If so, what is applied?": "Yes, a 'critical' CSS class with red text",
            "What does the paragraph in the chart section convey and how is its text styled?": "It mentions the chart is dynamically generated and the text is bold",
            "How many paragraphs are shown in the details section?": "2",
            "What element is located at the bottom of the component and what does its button display?": "A div containing a button labeled 'Update Metrics'"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000115",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents an interactive product summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Product Summary\" at the top of the component.\n- Use a <div> container with a class name of \"product-wrapper\" to encapsulate the component content.\n- Create exactly 2 distinct sections: the first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a product attribute in a \"label: value\" format.\n- In the first section's list, assign a unique CSS class \"alert-blue\" to one of the <li> elements to display its value text in blue.\n- The second section should contain a paragraph (<p>) with a brief description, styled with an inline style that sets the text color to green.\n- Position a button labeled \"Update Summary\" at the bottom of the component inside a <div> with the class \"action-button-box\".",
        "raw_output_metric": [
            "Product Summary",
            "product-wrapper",
            "<ul>",
            "<li>",
            "alert-blue",
            "<p>",
            "color: green",
            "Update Summary",
            "action-button-box"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Product Summary",
            "How many distinct sections are visible in the component?": "2",
            "How many bullet points are shown in the first section?": "4",
            "Which list item is uniquely styled?": "One list item has its value text displayed in blue",
            "What is the text color of the paragraph in the second section?": "Green",
            "What brief content is provided in the second section?": "A brief description",
            "What label does the button at the bottom display?": "Update Summary"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000116",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that renders a dashboard with two distinct sections showcasing structured data.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Dashboard Overview\" via an inline style for text-align.\n- Use a <div> element as a container with a class name of \"main-dashboard\" to wrap the entire component.\n- Create exactly 2 sections using the <section> element; the first section must include a table representing key-value pairs.\n- Within the first section, add a table with a header (<thead>) containing exactly 2 columns labeled \"Parameter\" and \"Value\", and a body (<tbody>) with exactly 3 rows, where each row contains 2 cells; ensure that one of the value cells in the table uses a CSS class \"alert-blue\" to style its text color.\n- In the second section, display a blockquote (<blockquote>) that presents processed input text and apply an inline style to set the font style to italic.\n- Add a paragraph (<p>) element below the sections with the text \"End of Dashboard\" and an inline style that aligns the text to the right.\n- Include a button with the label \"Submit Report\", placed at the bottom inside a <div> element with a class name of \"btn-wrapper\" for proper alignment.",
        "raw_output_metric": [
            "Dashboard Overview",
            "main-dashboard",
            "Parameter",
            "Value",
            "alert-blue",
            "End of Dashboard",
            "btn-wrapper",
            "Submit Report"
        ],
        "VQA": {
            "What is the main title displayed on the dashboard?": "Dashboard Overview",
            "How is the main title aligned?": "Centered",
            "How many sections are present in the dashboard layout?": "2",
            "What are the table header labels in the first section?": "Parameter and Value",
            "How many rows of key-value pairs are visible in the table?": "3",
            "Which cell is uniquely styled with the alert-blue class?": "One of the value cells",
            "Which element displays processed input text in an italic style?": "Blockquote",
            "What text is shown in the right-aligned paragraph below the sections?": "End of Dashboard",
            "What label is on the button at the bottom of the dashboard?": "Submit Report"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000117",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a structured weekly weather report.\n\nFeature Requirements:\n- Create an outer container using a <div> element with the class name 'weather-card' to encapsulate all the content.\n- Place a centered title using an <h1> element with the text 'Weekly Weather' at the top of the component.\n- Include exactly 2 sections: the first <section> should be labeled 'Forecast Details' and the second <section> should be labeled 'Weather Insights'.\n- In the first section, use an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a distinct weather attribute in the format \"Attribute - Value\".\n- Apply a CSS class named 'highlight-blue' to one of the list items in the forecast, ensuring that the value text is colored blue.\n- In the second section, include a paragraph (<p>) element that provides a summary of the weekly forecast, and set an inline style on the paragraph to apply a background color of light yellow.\n- At the bottom of the component, add a button element labeled 'Update Forecast', which should be wrapped inside a <div> element with the class 'footer'.",
        "raw_output_metric": [
            "weather-card",
            "Weekly Weather",
            "Forecast Details",
            "Weather Insights",
            "highlight-blue",
            "Attribute - Value",
            "Update Forecast",
            "footer",
            "background-color: lightyellow"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Weekly Weather",
            "How many sections are present in the component?": "2",
            "What is the label of the first section?": "Forecast Details",
            "How many list items are shown in the Forecast Details section?": "4",
            "What visual feature distinguishes one of the list items in the forecast?": "Its value text is styled in blue",
            "What is the label of the second section?": "Weather Insights",
            "What background color is applied to the summary paragraph in the Weather Insights section?": "Light yellow",
            "What is the text on the button found at the bottom of the component?": "Update Forecast",
            "In which container is the 'Update Forecast' button wrapped?": "A div with the class 'footer'"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000118",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component designed to display a task tracker interface.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'tracker-container'.\n- Insert a prominent header using an <h1> element with the text 'Task Tracker Dashboard', ensuring it is centered on the page.\n- Divide the component into exactly three sections, each wrapped in a <section> element and containing unique content.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a task title followed by a dash and its assigned priority.\n- In the second section, display a paragraph (<p>) that contains a span element with inline styling to set the font weight to bold.\n- In the third section, construct a table (<table>) with 2 columns labeled 'Task' and 'Status', and populate it with exactly 2 rows of data.\n- Position a button labeled 'Update Tracker' at the bottom of the component within a <div> element having the class 'feedback-container'.",
        "raw_output_metric": [
            "tracker-container",
            "Task Tracker Dashboard",
            "<section>",
            "<ol>",
            "<li>",
            "-",
            "<p>",
            "font-weight: bold",
            "<table>",
            "Task",
            "Status",
            "feedback-container",
            "Update Tracker"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Task Tracker Dashboard",
            "How many sections are visible in the interface?": "3",
            "How many tasks are listed in the ordered list in the first section?": "4",
            "What symbol is used to separate the task title and its priority in the first section’s list items?": "Dash",
            "What styling is applied to the text inside the span element in the second section?": "Bold",
            "What are the two column labels displayed in the table?": "Task and Status",
            "How many rows of data can be seen in the table?": "2",
            "What text is shown on the button at the bottom of the component?": "Update Tracker"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000119",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a dashboard summary of recent activities.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Dashboard'.\n- Use a container <div> element with a class name 'dashboard-main' to wrap the entire component.\n- Render exactly 3 modules, each enclosed within a <section> element with unique content.\n- The first module should display a table with precisely 2 rows and 3 columns, each cell showing different parts of the input.\n- The second module must include an ordered list (<ol>) with exactly 4 list items, each beginning with a distinct number followed by information from the input.\n- The third module should contain a blockquote (<blockquote>) that presents a motivational quote, applying a CSS class named 'quote-style' for styling.\n- Add a footer <footer> element containing a centered <p> element with the text 'Last updated: Today', styled with an inline background color set to lightgrey.\n- Place a button labeled 'Update Dashboard' at the bottom of the component inside a <div> element with the class 'update-btn'.",
        "raw_output_metric": [
            "Activity Dashboard",
            "dashboard-main",
            "<section>",
            "<table>",
            "<tr>",
            "<td>",
            "<ol>",
            "<li>",
            "<blockquote>",
            "quote-style",
            "<footer>",
            "Last updated: Today",
            "background-color: lightgrey",
            "Update Dashboard",
            "update-btn"
        ],
        "VQA": {
            "What is the text displayed in the centered main header?": "Activity Dashboard",
            "How many modules are displayed in the dashboard summary?": "3",
            "How many rows and columns does the table in the first module have?": "2 rows and 3 columns",
            "How many items are shown in the ordered list of the second module?": "4",
            "Does each item in the ordered list start with a distinct number?": "Yes",
            "What element is used in the third module to display the motivational quote?": "A blockquote with 'quote-style' styling",
            "What text is visible in the footer and what is its background highlight?": "Last updated: Today with an inline lightgrey background",
            "What label is displayed on the update button at the bottom of the component?": "Update Dashboard"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000120",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that structures distinct sections of a user report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"User Report\" displayed at the top.\n- Wrap the entire content within a <div> element that has a class name of \"report-wrapper\" for layout.\n- Create exactly three <section> elements, each representing a unique part of the report: \"Summary\", \"Details\", and \"Notes\".\n- In the \"Summary\" section, include an unordered list (<ul>) with exactly three list items (<li>), each displaying a label and its corresponding value separated by a colon (:); ensure one list item's value text is styled with a CSS class called \"important\" to apply a blue color.\n- In the \"Details\" section, include a paragraph (<p>) element with the text styled in bold using an inline style (e.g., style=\"font-weight: bold;\").\n- In the \"Notes\" section, construct a simple form containing exactly two input fields (one for a user's name and one for their comment) and a submit button labeled \"Send\".\n- Add a footer at the bottom of the component by including a <div> with the class \"footer-area\" that contains centered text reading \"Report Generated\".",
        "raw_output_metric": [
            "User Report",
            "report-wrapper",
            "Summary",
            "Details",
            "Notes",
            "important",
            "font-weight: bold;",
            "Send",
            "footer-area",
            "Report Generated"
        ],
        "VQA": {
            "What is the title text displayed at the top of the report?": "User Report",
            "How many distinct sections are present in the report?": "3",
            "Which section names are used to label the report sections?": "Summary, Details, Notes",
            "How many list items are visible in the Summary section?": "3",
            "Is one of the list item values in the Summary section styled uniquely, and if so, with which class?": "Yes, with the 'important' class",
            "How is the text in the Details section formatted?": "It is displayed in bold using an inline style",
            "How many input fields are included in the Notes section form and what are they for?": "2; one for a user's name and one for a comment",
            "What is the label on the submit button in the Notes section and what text is shown in the footer at the bottom?": "The button is labeled 'Send' and the footer shows 'Report Generated'"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000121",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays organized library event details as structured data.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Library Events'.\n- Use a <div> element to create a container with a class name of 'events-container' for layout purposes.\n- Display exactly 3 sections, each wrapped in a <section> element and containing unique content.\n- The first section should include an ordered list (<ol>) with exactly 4 list items (<li>), each formatted as 'Event: Date' extracted from the input.\n- The second section must contain a paragraph (<p>) with styled text using an inline style that sets the font-weight to bold and the text color to dark green, summarizing the event highlights.\n- The third section should include a table (<table>) with the class 'attendees-table' that consists of a header row (<thead>) defining exactly 3 column titles and a single data row (<tr>) with 3 cells (<td>) for attendee metrics.\n- Add a button labeled 'Register Now' positioned at the bottom of the component inside a <div> element with the class 'action-container' as a clear call-to-action.",
        "raw_output_metric": [
            "h1",
            "Library Events",
            "events-container",
            "section",
            "ol",
            "li",
            "Event: Date",
            "p",
            "font-weight: bold",
            "color: dark green",
            "table",
            "attendees-table",
            "thead",
            "tr",
            "td",
            "action-container",
            "button",
            "Register Now"
        ],
        "VQA": {
            "What is the text of the centered header at the top of the page?": "Library Events",
            "How many sections are displayed in the component?": "3",
            "In the first section, how many items are listed in the ordered list?": "4",
            "What format is used to display each event in the first section's list?": "Event: Date",
            "How is the event highlight text styled in the second section?": "Bold and dark green",
            "Which element is used in the second section to summarize event highlights?": "Paragraph",
            "How many column titles are defined in the table header in the third section?": "3",
            "How many cells are present in the data row of the table in the third section?": "3",
            "What is the label of the button located at the bottom of the component?": "Register Now",
            "What is the class name of the container holding all the event sections?": "events-container"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000122",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a user profile dashboard with organized data sections.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘User Profile Dashboard’.\n- Use a <div> element to create a container with a class name of 'profile-container' for layout organization.\n- Create exactly 2 main sections using <section> elements, each presenting different data formats.\n- In the first section, implement a table (<table>) that contains exactly 3 rows (<tr>), with each row having 2 cells (<td>) where the first cell is a label and the second cell is a value.\n- Ensure that one row in the table has its value cell styled by including a CSS class called 'alert-yellow' to change its background color.\n- In the second section, display a paragraph (<p>) element that shows descriptive text with an inline style setting its color to blue.\n- Add a form (<form>) element below the sections that includes an input field and a submit button labeled ‘Update Profile’.\n- Wrap the form element inside a <div> with a class name 'form-container' to control its positioning.\n- Conclude the component with a footer (<footer>) element that contains the text ‘Last updated: today’ positioned at the bottom of the view.\n- Arrange all elements in a clear and hierarchical structure to ensure the data is visibly separated and organized.",
        "raw_output_metric": [
            "User Profile Dashboard",
            "profile-container",
            "section",
            "table",
            "tr",
            "td",
            "alert-yellow",
            "color: blue",
            "Update Profile",
            "form-container",
            "footer",
            "Last updated: today"
        ],
        "VQA": {
            "What is the text displayed at the top center of the dashboard?": "User Profile Dashboard",
            "How many main data sections are visible in the interface?": "2",
            "How many table rows are presented in the first section?": "3",
            "In the table, how many cells are there per row and what distinguishes one of the value cells?": "2 cells per row, with one value cell having a yellow background styling",
            "What styling is applied to the descriptive text in the second section?": "It is colored blue",
            "What is the label on the submit button in the form area?": "Update Profile",
            "What text is shown in the footer at the bottom of the view?": "Last updated: today"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000123",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the text input into an Angular component that displays various metric categories in a structured layout.\n\nFeature Requirements:\n- Add a centered <h1> element at the top with the text \"User Metrics Dashboard\".\n- Enclose all component content within a <div> element having the class name \"dashboard-container\".\n- Create exactly 3 <article> sections, each representing a distinct metric category with its own header.\n- Within each <article>, include a <h3> element that displays the category name and an unordered list (<ul>) that contains exactly 2 list items (<li>), each showing a metric label and its numeric value separated by a dash (-).\n- In the first <article>, wrap the numeric value in each list item inside a <strong> tag for emphasis.\n- Ensure that in one of the unordered lists, one <li> element uses a CSS class \"highlight\" to alter the text color.\n- For the third <article>, add an inline style to the <h3> element that underlines the text.\n- Insert a <footer> element with the class \"details-footer\" at the bottom, inside which a clickable <a> element is present with the text \"View Details\" and an href attribute set to \"#\".",
        "raw_output_metric": [
            "User Metrics Dashboard",
            "dashboard-container",
            "article",
            "h3",
            "ul",
            "li",
            "strong",
            "highlight",
            "text-decoration: underline;",
            "details-footer",
            "View Details",
            "href=\"#\"",
            "-"
        ],
        "VQA": {
            "What is the text displayed in the centered header at the top of the component?": "User Metrics Dashboard",
            "How many article sections are present in the component?": "3",
            "How many list items are contained within each article's unordered list?": "2",
            "Which article wraps the numeric values in a bold style?": "The first article",
            "Which article's header is styled to be underlined?": "The third article",
            "Is there a list item with a specific CSS class to alter text color, and if so, what is the class?": "Yes, highlight",
            "What is the text and hyperlink reference for the link inside the footer?": "View Details, href: #"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000124",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the given narrative into an Angular component that renders an interactive analytics panel.\n\nFeature Requirements:\n- Begin with an <h1> element centered on the page displaying the text \"Analytics Panel\".\n- Wrap all content inside a <div> element with a class name \"analytics-wrapper\".\n- Create exactly 3 sections using <section> elements, each showing a distinct aspect of the narrative.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents a key statistic in the format \"Label: Value\".\n- In one of the list items in the ordered list, apply a CSS class \"emphasis-blue\" so that its text appears in blue.\n- In the second section, display a paragraph (<p>) that uses an inline style to set the text color to green and the font style to italic.\n- In the third section, construct a table consisting of one header row and one data row; the header row must have 2 header cells (<th>) labeled \"Parameter\" and \"Value\", with the data row showcasing corresponding content.\n- At the bottom of the component, include a <div> element with the class \"action-panel\" containing a button labeled \"Reload Metrics\".",
        "raw_output_metric": [
            "Analytics Panel",
            "analytics-wrapper",
            "<section>",
            "<ol>",
            "<li>",
            "Label: Value",
            "emphasis-blue",
            "<p>",
            "color: green",
            "font-style: italic",
            "<table>",
            "<th>",
            "Parameter",
            "Value",
            "action-panel",
            "Reload Metrics"
        ],
        "VQA": {
            "What is the main title displayed at the top of the panel?": "Analytics Panel",
            "How many sections are present in the analytics panel?": "3",
            "How many list items are shown in the first section's ordered list?": "4",
            "Which list item is visually highlighted with a blue effect?": "One statistic item has the emphasis-blue class",
            "What unique styling is applied to the paragraph in the second section?": "Green text color and italic font style",
            "What are the header labels displayed in the table?": "Parameter and Value",
            "What label is shown on the button at the bottom of the component?": "Reload Metrics",
            "What is the class name of the content wrapper surrounding the entire component?": "analytics-wrapper",
            "What is the class name of the div containing the button?": "action-panel"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000125",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays organized user information in a dashboard format.\n\nFeature Requirements:\n- Include a top header using an <h1> element with the text \"User Statistics Dashboard\".\n- Wrap all elements inside a <div> with the class name 'dashboard-container'.\n- Create exactly 3 sections, each enclosed in a <section> element containing distinct content.\n- In the first section, display a table (<table>) with exactly 2 rows (<tr>) and 2 cells (<td>) per row, using data from the input.\n- In the second section, implement an ordered list (<ol>) with exactly 4 list items (<li>), each presenting a unique detail from the input.\n- In the third section, include a paragraph (<p>) with inline styling that transforms the text to uppercase.\n- Apply a CSS class 'row-highlight' to every even-numbered table row within the table in the first section.\n- At the bottom of the component, add a footer <div> with the class 'footer-section' that contains a button labeled \"Update Info\".",
        "raw_output_metric": [
            "User Statistics Dashboard",
            "dashboard-container",
            "<section>",
            "<table>",
            "<tr>",
            "<td>",
            "row-highlight",
            "<ol>",
            "<li>",
            "<p",
            "text-transform: uppercase;",
            "footer-section",
            "Update Info"
        ],
        "VQA": {
            "What is the page title displayed at the top?": "User Statistics Dashboard",
            "What class name is applied to the main container wrapping all elements?": "dashboard-container",
            "How many sections are present in the dashboard?": "3",
            "How many rows and cells does the table in the first section contain?": "2 rows and 2 cells per row",
            "Which table rows are specially styled?": "Every even-numbered row has the 'row-highlight' class",
            "How many items are listed in the ordered list of the second section?": "4",
            "How is the text in the paragraph of the third section displayed?": "In uppercase",
            "What does the button in the footer section display?": "Update Info"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000126",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a weather forecast report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report' at the top of the component.\n- Use a <div> element with a class name of 'weather-body' to contain all the component content.\n- Create exactly 2 sections, each wrapped in a <section> element with distinct weather-related content.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a weather parameter (e.g., Temperature, Humidity, Wind Speed, Pressure) from the input, with each item formatted as a label and a value separated by a colon (:).\n- Ensure that one of the list items has its value text colored blue by using a CSS class called 'highlight-blue'.\n- The second section should contain a paragraph (<p>) that displays a brief weather description, with inline style applied to make the text bold.\n- At the bottom of the component, add a button element labeled 'Update Forecast', enclosed within a <div> element with a class name of 'action-container'.",
        "raw_output_metric": [
            "Weather Report",
            "weather-body",
            "Temperature",
            "Humidity",
            "Wind Speed",
            "Pressure",
            "highlight-blue",
            "font-weight: bold",
            "action-container",
            "Update Forecast"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Weather Report",
            "How many sections are visible in the component?": "2",
            "What is the class name of the container that wraps all component content?": "weather-body",
            "How many list items are displayed in the first weather section?": "4",
            "What CSS class is used to render one of the weather parameter values in blue?": "highlight-blue",
            "How is the brief weather description styled in the second section?": "It is displayed in bold text",
            "What text appears on the button at the bottom of the component?": "Update Forecast"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000127",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nGenerate an Angular component that transforms a text description of a travel itinerary into a structured, interactive itinerary layout.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Trip Itinerary\".\n- Create a main container using a <div> element with a class name \"itinerary-container\".\n- Include exactly 3 sections, each enclosed in a <section> element, to organize different parts of the itinerary.\n- In the first section, render an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents an activity time and description separated by a dash (-).\n- In the second section, display a paragraph (<p>) with the text \"Plan your journey!\" and apply an inline style to set the text color to blue.\n- In the third section, include a footer-like block by using a <div> with the class \"action-buttons\" that contains two buttons labeled \"Start Trip\" and \"Cancel\".\n- Each list item in the ordered list must also contain a span element with the class \"activity-id\" that shows a unique sequential identifier.\n- Ensure that all HTML elements are arranged with clear nesting so that the structure and layout are easily verifiable.",
        "raw_output_metric": [
            "Trip Itinerary",
            "itinerary-container",
            "<section>",
            "<ol>",
            "<li>",
            "activity-id",
            "-",
            "Plan your journey!",
            "color: blue",
            "action-buttons",
            "Start Trip",
            "Cancel"
        ],
        "VQA": {
            "What is the text displayed in the main centered title?": "Trip Itinerary",
            "How many main sections are displayed in the layout?": "3",
            "How many items are in the ordered list in the first section?": "4",
            "What symbol separates the activity time and description in each list item?": "-",
            "Does each list item display a unique sequential identifier?": "Yes",
            "What text is shown in the paragraph of the second section?": "Plan your journey!",
            "What color is applied to the text in the second section's paragraph?": "Blue",
            "How many buttons are visible in the action button block of the third section?": "2",
            "What are the labels on the two buttons in the third section?": "Start Trip and Cancel"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000128",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays structured event schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Event Schedule'.\n- Enclose all component content within a <div> element with a class name of 'schedule-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element that presents different aspects of the event details.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Day: Event\" based on the input.\n- In the second section, insert a paragraph (<p>) that displays additional event notes, applying an inline style to underline the text.\n- The third section should contain a <div> element wrapping a numbered list (<ol>) with precisely 2 items, each item representing a venue detail.\n- Within the unordered list of the first section, ensure one list item has its event title styled using a CSS class named 'alert'.\n- Add a button element labeled 'Load More Events', positioned at the bottom of the component using a <div> with the class 'action-container'.",
        "raw_output_metric": [],
        "VQA": {
            "What is the centered title at the top of the component?": "Event Schedule",
            "How many sections are present in the component?": "3",
            "How many bullet points appear in the first section's list?": "4",
            "Is one of the event names in the first section styled differently using a special class?": "Yes",
            "What descriptive text is underlined in the second section?": "Additional event notes",
            "How many venue details are listed in the numbered list of the third section?": "2",
            "What label is visible on the button at the bottom of the component?": "Load More Events",
            "Are all the component contents enclosed within a main wrapper?": "Yes"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000129",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that displays categorized, data-driven content.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Report'.\n- Create a container <div> with the class 'activity-container' that wraps the entire component.\n- Add exactly 3 sections, each enclosed in a <section> element, with each section designated for a different category of information.\n- In the first section, render an ordered list (<ol>) containing exactly 4 list items (<li>), where each item shows a label and a corresponding value separated by a hyphen (-); ensure one of the list items has its text underlined via an inline CSS style.\n- In the second section, construct a table with 2 rows: the first row for column headers and the second row displaying data extracted from the input.\n- In the third section, display a paragraph (<p>) styled with an inline style that sets the text color to blue and the font weight to bold.\n- Place a button labeled 'Update Report' inside a <div> with the class 'action-container', ensuring it is positioned at the bottom of the component.\n- Embed an Angular data binding expression within the list items to allow dynamic content population.",
        "raw_output_metric": [
            "Activity Report",
            "activity-container",
            "<h1>",
            "<div class=\"activity-container\">",
            "<section>",
            "<ol>",
            "<li>",
            "-",
            "text-decoration: underline;",
            "<table>",
            "<tr>",
            "<th>",
            "<td>",
            "<p style=\"color: blue; font-weight: bold;\">",
            "action-container",
            "<button>",
            "Update Report",
            "{{"
        ],
        "VQA": {
            "What is displayed in the centered header?": "Activity Report",
            "How many sections are visible in the component?": "3",
            "How many list items are in the ordered list of the first section?": "4",
            "What special style is applied to one of the list items in the first section?": "Its text is underlined",
            "How many rows does the table in the second section have?": "2",
            "What inline styles are applied to the paragraph in the third section?": "Blue text color and bold font",
            "What text is shown on the button at the bottom of the component?": "Update Report"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000130",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed book review layout.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Book Review'.\n- Use a <div> element with a class name of 'book-container' to wrap the entire component.\n- Create exactly 3 sections, each enclosed in a <section> element and containing distinct content.\n- The first section must display a paragraph (<p>) with the input summary text and use an inline style to set the font size to 16px and the font family to Arial.\n- The second section must contain an ordered list (<ol>) with exactly 4 list items (<li>), each representing a chapter with its title and page range, where each list item shows the chapter name and page range separated by a dash (-).\n- The third section must include a table (<table>) with one header row and exactly 2 data rows; the header row should have two columns labeled 'Character' and 'Role'.\n- Inside the second section, include a hyperlink (<a>) with the text 'Read More' that has an href attribute set to '#' and is aligned to the right using a wrapping <div> with a class 'link-container'.\n- At the bottom of the component, add a <div> with a class 'footer-section' that displays the static text 'End of Review'.",
        "raw_output_metric": [
            "Book Review",
            "book-container",
            "section",
            "p",
            "16px",
            "Arial",
            "ol",
            "li",
            "-",
            "a",
            "Read More",
            "link-container",
            "href=\"#\"",
            "table",
            "Character",
            "Role",
            "footer-section",
            "End of Review"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Book Review",
            "How many sections are visible in the layout?": "3",
            "What font size and family is applied to the summary text in the first section?": "16px, Arial",
            "How many list items are shown in the ordered list within the second section?": "4",
            "What is the text displayed on the hyperlink in the second section?": "Read More",
            "What column labels are shown in the table header in the third section?": "Character and Role",
            "What static text is found at the bottom of the component in the footer?": "End of Review"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000131",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of a user feedback survey.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Survey Summary'.\n- Wrap all content in a <div> element with a class name of 'survey-container' to structure the layout.\n- Create exactly 3 distinct sections, each enclosed in a <section> element.\n- The first section must include a table that has a header row and exactly 2 data rows; each row should have 3 cells representing different feedback metrics.\n- The second section should display a paragraph (<p>) with inline styling that sets the font size to 16px and the text color to teal.\n- The third section must include a <span> element that shows a status message, using a CSS class called 'status-blue' to render the text in blue.\n- At the bottom of the component, include a button labeled 'Submit Feedback', positioned within a <div> element with class 'action-container'.",
        "raw_output_metric": [
            "Survey Summary",
            "survey-container",
            "<section>",
            "<table>",
            "<tr>",
            "<th>",
            "<td>",
            "font-size: 16px; color: teal;",
            "status-blue",
            "Submit Feedback",
            "action-container"
        ],
        "VQA": {
            "What is the centered title displayed at the top?": "Survey Summary",
            "What container class wraps all the content in the layout?": "survey-container",
            "How many distinct sections are present in the component?": "3",
            "In the first section, what element is used to present feedback metrics?": "Table",
            "How many data rows does the table include?": "2",
            "How many cells are present in each row of the table?": "3",
            "What are the inline style attributes applied to the paragraph in the second section?": "Font size 16px and text color teal",
            "What CSS class is used for the status message displayed in the third section?": "status-blue",
            "What is the label on the button at the bottom of the component?": "Submit Feedback"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000132",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a weekly weather forecast overview.\n\nFeature Requirements:\n- Create a centered header using an <h1> element with the text \"Weekly Weather Forecast\" at the top of the component.\n- Wrap all content in a <div> element with a class name of 'weather-wrapper' for layout purposes.\n- Include exactly 3 sections, each enclosed within a <section> element and containing uniquely labeled content.\n- The first section must display a table with a header row and exactly 4 data rows; the table should have 2 columns labeled \"Time\" and \"Temperature\".\n- The second section should contain an ordered list (<ol>) with exactly 5 list items, each representing a specific weather tip.\n- The third section must include a paragraph (<p>) that provides a brief summary of the weekly forecast and apply an inline style to change the text color to green.\n- At the bottom of the component, add a button labeled \"Update Forecast\" placed within a <div> with the class 'update-button' to ensure proper positioning.",
        "raw_output_metric": [
            "Weekly Weather Forecast",
            "weather-wrapper",
            "<h1>",
            "<div class=\"weather-wrapper\">",
            "<section>",
            "<table>",
            "<th>",
            "Time",
            "Temperature",
            "<tr>",
            "<ol>",
            "<li>",
            "<p>",
            "color: green;",
            "Update Forecast",
            "update-button"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the component?": "Weekly Weather Forecast",
            "How many sections are visible in the component?": "3",
            "What are the names of the two columns in the table?": "Time and Temperature",
            "How many rows of weather data (excluding the header) are in the table?": "4",
            "How many weather tips are listed in the ordered list?": "5",
            "What element contains the summary of the weekly forecast and what is its text color?": "A paragraph with green text",
            "What label does the button at the bottom display?": "Update Forecast",
            "What class is assigned to the wrapper that contains all the content?": "weather-wrapper"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000133",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured employee performance reviews.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Performance Reviews\" and an inline style that sets the background color to lightblue.\n- Use a <div> element with a class name \"review-wrapper\" to serve as the main container for the component.\n- Create exactly 3 sections, each wrapped in a <section> element: the first section displays employee names, the second shows performance scores, and the third provides review comments.\n- In the first section, include an unordered list (<ul>) containing exactly 4 list items (<li>), each displaying an employee's name prefaced by a label \"Name:\".\n- In the second section, add a <table> element with exactly 2 rows and 2 columns; one column shows metric labels (like \"Q1 Score\" and \"Q2 Score\") and the other shows their corresponding numeric values.\n- In the third section, include a paragraph (<p>) with an inline style to italicize the text, containing a note such as \"Overall feedback for the review period.\"\n- Ensure at least one list item in the first section applies a CSS class called \"highlight-green\" to color its text green.\n- Add a button labeled \"Submit Reviews\" inside a <div> with the class \"button-group\" placed at the bottom of the component.",
        "raw_output_metric": [
            "Performance Reviews",
            "background-color: lightblue",
            "review-wrapper",
            "<section>",
            "<ul>",
            "<li>",
            "Name:",
            "highlight-green",
            "<table>",
            "Q1 Score",
            "Q2 Score",
            "<p>",
            "Overall feedback for the review period.",
            "button-group",
            "Submit Reviews"
        ],
        "VQA": {
            "What is the title text displayed at the top of the component?": "Performance Reviews",
            "What is the background color of the title?": "lightblue",
            "How many sections are visible in the component?": "3",
            "How many employee names are listed in the first section?": "4",
            "Is any employee name highlighted in green?": "Yes",
            "What metric labels are shown in the table?": "Q1 Score and Q2 Score",
            "What note is provided in the review comments section?": "Overall feedback for the review period",
            "What is the label on the button at the bottom of the component?": "Submit Reviews"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000134",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents detailed event information in a structured layout.\n\nFeature Requirements:\n- Include a centered header element (<h1>) at the top containing the text \"Event Details\".\n- Use a <div> element with a class name of 'event-container' to wrap the entire component content.\n- Display exactly 3 sections, each wrapped inside a <section> element.\n- The first section must feature an unordered list (<ul>) with exactly 3 list items (<li>), where each item displays a label and a value separated by a colon; one of these list items should apply a CSS class \"highlight-blue\" to its value text.\n- The second section should include a paragraph (<p>) that shows additional event descriptions and uses an inline style to set the font color to green.\n- The third section must contain a table (<table>) with a header row and exactly 2 data rows summarizing key event metrics.\n- At the bottom of the component, add a <div> with a class name of 'footer-container' that contains a button labeled \"Submit Feedback\".\n- Ensure each structured element is clearly organized to match the designated Angular component layout.",
        "raw_output_metric": [
            "Event Details",
            "event-container",
            "<section>",
            "<ul>",
            "<li>",
            "highlight-blue",
            "<p>",
            "color: green;",
            "<table>",
            "footer-container",
            "Submit Feedback"
        ],
        "VQA": {
            "What text is displayed in the centered header at the top?": "Event Details",
            "How many sections are present in the component layout?": "3",
            "How many list items appear in the first section's unordered list?": "3",
            "Which list item is styled differently and how?": "The value of one list item is styled with the 'highlight-blue' class",
            "What font color is applied to the paragraph in the second section?": "Green",
            "How many data rows are shown in the table's body in the third section?": "2",
            "What label is visible on the button at the bottom of the component?": "Submit Feedback"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000135",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text into an Angular component that displays structured product inventory details.\n\nFeature Requirements:\n- Include an <h3> element centered at the top with the text 'Product Inventory Report'.\n- Use a <div> element with a class name of 'inventory-container' to serve as the main layout container.\n- Create exactly 3 <section> elements, each dedicated to a different aspect: product details, pricing information, and stock availability.\n- In the first section, display a table (<table>) with a header (<thead>) and a body (<tbody>) that contains exactly 2 data rows and 3 columns; apply inline styles to the table borders for clarity.\n- Ensure that the first column in the table has bold text by using a CSS class named 'bold-cell'.\n- In the second section, include a paragraph (<p>) that provides summary pricing details and apply an inline style to set the background color to light yellow.\n- In the third section, present a nested unordered list (<ul>) with exactly 2 list items; each list item should consist of a bold label followed by a hyphen and descriptive text.\n- At the bottom of the component, add a <div> element with the class 'footer-container' that contains a button labeled 'Update Inventory', and center this button within the container.\n- Ensure all elements are structured clearly and are directly visible in the output.",
        "raw_output_metric": [
            "Product Inventory Report",
            "inventory-container",
            "<section>",
            "<table>",
            "<thead>",
            "<tbody>",
            "bold-cell",
            "<p>",
            "background-color: lightyellow",
            "<ul>",
            "<li>",
            "footer-container",
            "Update Inventory"
        ],
        "VQA": {
            "What is the centered header text displayed at the top?": "Product Inventory Report",
            "How many distinct sections are visible in the layout?": "3",
            "How many rows and columns are in the product details table in the first section?": "2 rows and 3 columns",
            "What style is applied to the first column of the table?": "Bold text",
            "What background color is applied to the summary pricing paragraph in the second section?": "Light yellow",
            "How many list items are presented in the stock availability section?": "2",
            "What label is shown on the button within the footer area?": "Update Inventory"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000136",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that constructs a structured user registration form.\n\nFeature Requirements:\n- Create a top-level <h1> element displaying the text 'User Registration' aligned to the center.\n- Include a <div> element with the class name 'form-wrapper' to group all form-related elements.\n- Design exactly 3 input fields within separate <label> elements: one for a user’s name (Text), one for the email (Email), and one for the password (Password).\n- Wrap the email input field inside a <div> with a class of 'email-container' and apply an attribute to enforce proper email format.\n- Place a <button> element labeled 'Submit' immediately after the input fields to trigger form submission.\n- Insert a <section> element beneath the form containing an unordered list (<ul>) with exactly 2 list items (<li>), each showing a specific guideline for filling out the form.\n- Add a <footer> element with an inline style that sets the background color to lightgray, containing a paragraph with the text 'All data is confidential'.",
        "raw_output_metric": [
            "User Registration",
            "form-wrapper",
            "email-container",
            "name",
            "text",
            "email",
            "password",
            "type=\"text\"",
            "type=\"email\"",
            "type=\"password\"",
            "Submit",
            "<section>",
            "<ul>",
            "<li>",
            "<footer>",
            "background-color: lightgray",
            "All data is confidential"
        ],
        "VQA": {
            "What is the text displayed in the main header?": "User Registration",
            "How many input fields are present in the form?": "3",
            "Which input field is wrapped inside a container for email formatting?": "Email",
            "What is the input type for entering the user's name?": "Text",
            "Is there a button for form submission and what is its label?": "Yes, 'Submit'",
            "How many guidelines are listed under the form in the unordered list?": "2",
            "What text is shown in the footer regarding data privacy?": "All data is confidential",
            "What is the background color style set for the footer?": "Lightgray"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000137",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the given survey summary input into an Angular component that organizes detailed survey metrics and user interaction elements.\n\nFeature Requirements:\n- Add a header using an <h1> element with the text \"Survey Results Summary\" centered at the top of the component.\n- Wrap the entire layout in a <div> container with the class name 'survey-container' to manage the overall spacing and alignment.\n- Create exactly 3 distinct <section> elements arranged sequentially within the container, each serving a different purpose.\n- In the first section, display a table (<table>) with 2 columns and 3 rows; the first column should list survey questions, and the second column should show the corresponding answer counts.\n- In the second section, include a paragraph (<p>) that provides an overall analysis, using an inline style to set the text color to blue for emphasis.\n- In the third section, create a simple form (<form>) that contains one text <input> field for additional feedback and one <button> element labeled \"Submit Comment\" for user submissions.\n- Ensure that one specific table row in the first section is styled with an inline style setting its background-color to lightgray.\n- Place an extra button with the class name 'refresh-btn' at the top of the survey container and label it \"Reload Survey\" to indicate reloading of data.\n- Finally, include a footer area using a <div> element with the class 'footer-area' that displays static text \"Data Verified\" at the very bottom.",
        "raw_output_metric": [
            "Survey Results Summary",
            "survey-container",
            "<h1>",
            "<div>",
            "<section>",
            "table",
            "lightgray",
            "color: blue",
            "form",
            "input",
            "Submit Comment",
            "Reload Survey",
            "refresh-btn",
            "footer-area",
            "Data Verified"
        ],
        "VQA": {
            "What is the header text displayed at the top of the component?": "Survey Results Summary",
            "What class name is assigned to the container wrapping the entire layout?": "survey-container",
            "How many section elements are arranged within the layout?": "3",
            "What are the dimensions of the table in the first section?": "2 columns and 3 rows",
            "What inline style is applied to one specific row in the table?": "background-color: lightgray",
            "What inline style is used for the paragraph in the second section?": "text color set to blue",
            "What elements are present in the form in the third section?": "one text input and one button labeled 'Submit Comment'",
            "What is the label and class of the extra button at the top of the container?": "Label is 'Reload Survey' and class is 'refresh-btn'",
            "What text is displayed in the footer area?": "Data Verified"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000138",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided text input into an Angular component that showcases detailed movie information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Movie Insights'.\n- Wrap all content within a <div> element assigned with the class name 'movie-container' for layout.\n- Feature exactly 3 sections, each enclosed in a <section> element containing distinct movie-related content.\n- The first section must display an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as a label and value separated by a colon, and one list item’s value must be colored blue using a CSS class 'highlight-blue'.\n- The second section should contain a paragraph (<p>) with inline styling that sets the text to bold and green.\n- The third section must include a table element with exactly 2 columns (\"Attribute\" and \"Value\") and exactly 3 rows of movie statistics.\n- Place a button labeled 'Reload Movies' at the bottom of the component inside a <div> element with the class 'action-container'.",
        "raw_output_metric": [
            "Movie Insights",
            "movie-container",
            "<section>",
            "<ul>",
            "<li>",
            "highlight-blue",
            "<p style=\"font-weight: bold; color: green;\">",
            "<table>",
            "Attribute",
            "Value",
            "Reload Movies",
            "action-container"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the component?": "Movie Insights",
            "How many sections are visible in the component?": "3",
            "How many items are present in the unordered list of the first section?": "4",
            "Is any list item’s value highlighted in blue?": "Yes",
            "How is the paragraph in the second section styled?": "Bold and green",
            "What are the headers of the table in the third section?": "Attribute and Value",
            "How many rows of movie statistics are shown in the table?": "3",
            "What label is on the button at the bottom of the component?": "Reload Movies"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000139",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays dynamic product details in a structured layout.\n\nFeature Requirements:\n- Display a centered main header using an <h1> element with the text 'Product Information'.\n- Include a sidebar within a <nav> element that has a class named 'sidebar-info' positioned on the left.\n- Create exactly 3 separate sections, each wrapped in a <section> element, with each section dedicated to a specific category of product details.\n- The first section should render a table with exactly 3 rows and 2 columns, where each row presents a feature name and its corresponding value.\n- The second section must include an ordered list (<ol>) with exactly 4 items showing sequential product usage steps.\n- The third section should display a paragraph (<p>) with inline styling that sets the text color to blue and the font weight to bold.\n- Add a footer area using a <div> element with the class 'footer-container' that contains a button labeled 'Update Info', aligned to the right within this container.",
        "raw_output_metric": [
            "Product Information",
            "sidebar-info",
            "<section>",
            "<table>",
            "<tr>",
            "<td>",
            "<ol>",
            "<li>",
            "<p",
            "color: blue;",
            "font-weight: bold;",
            "footer-container",
            "<button>",
            "Update Info"
        ],
        "VQA": {
            "What is the text displayed in the main header?": "Product Information",
            "How many sections are visible on the page?": "3",
            "How many rows and columns are shown in the product details table?": "3 rows and 2 columns",
            "How many items are featured in the ordered list for product usage?": "4",
            "What are the color and font style of the paragraph in the third section?": "Blue and bold",
            "Where is the sidebar positioned on the page?": "Left",
            "What label is written on the footer button?": "Update Info",
            "How is the footer button aligned within its container?": "Right"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000140",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a concise weather update interface.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Weather Update' at the top.\n- Use a <div> element to create a container with a class name of 'weather-container' for layout structure.\n- Display exactly 3 sections, each wrapped in a <section> element with distinct content.\n- The first section should contain an unordered list (<ul>) with exactly 4 list items (<li>), each showing a different weather metric in the format of \"Metric: value\".\n- The second section must display a paragraph (<p>) with inline styling to set the text color to blue.\n- The third section should feature a table with 2 columns and exactly 2 rows (excluding headers) to show forecast details.\n- One of the list items in the first section must have its value text colored by applying a CSS class called 'alert-yellow'.\n- Add a button element labeled 'Update Forecast', positioned at the bottom of the component within a <div> with the class 'update-button-container'.\n- Ensure all HTML elements are organized logically to form a cohesive Angular component.",
        "raw_output_metric": [
            "<h2>Weather Update</h2>",
            "weather-container",
            "<section>",
            "<ul>",
            "<li>",
            "Metric:",
            "alert-yellow",
            "<p",
            "style=\"color:blue\"",
            "<table>",
            "<tr>",
            "<td>",
            "Update Forecast",
            "update-button-container"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Weather Update",
            "How many sections are visible in the layout?": "3",
            "In the first section, how many weather metrics are listed?": "4",
            "Does one of the metrics in the first section display its value with a yellow highlight?": "Yes, via 'alert-yellow' class",
            "What is the text color of the paragraph in the second section?": "Blue",
            "How many columns are in the forecast table shown in the third section?": "2",
            "How many rows (excluding headers) does the forecast table contain?": "2",
            "What label is shown on the button at the bottom of the component?": "Update Forecast",
            "What is the class name of the container wrapping the overall layout?": "weather-container"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000141",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays detailed system status information using a card layout.\n\nFeature Requirements:\n- Include a header with an <h1> element containing the text 'System Status' and align it to the left.\n- Create a primary container using a <div> element with the class name 'status-card'.\n- Render exactly 3 sections, each enclosed in a <section> element: one for system configuration, one for error logs, and one for performance metrics.\n- In the system configuration section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a label and value pair separated by a colon.\n- In the error logs section, display a paragraph (<p>) that shows a warning message; apply a CSS class named 'warning' to change the text color to orange.\n- In the performance metrics section, incorporate a table containing a single row and 2 columns that present a metric name and its corresponding value.\n- Add a footer element that includes a button labeled 'Update Status', positioned within a <div> element with the class 'footer-btn'.",
        "raw_output_metric": [
            "System Status",
            "status-card",
            "system configuration",
            "error logs",
            "performance metrics",
            "<ol>",
            "<li>",
            ":",
            "warning",
            "<p class=\"warning\">",
            "<table>",
            "<tr>",
            "<td>",
            "footer-btn",
            "Update Status"
        ],
        "VQA": {
            "What is the header text displayed at the top of the component?": "System Status",
            "How many sections are rendered in the component?": "3",
            "How many list items are shown in the system configuration section?": "4",
            "What type of list is used in the system configuration section?": "Ordered list",
            "What color is the warning message displayed in the error logs section?": "Orange",
            "How many rows and columns does the table in the performance metrics section have?": "1 row and 2 columns",
            "What is the label on the button found in the footer?": "Update Status"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000142",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a collection of blog post summaries.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'blog-wrapper'.\n- Add a centered title using an <h1> element with the text 'Blog Highlights'.\n- Include exactly 3 sections, each wrapped in a <section> element representing an individual blog post summary.\n- Inside each section, add a <header> element that contains the post date and author name separated by a vertical bar (|).\n- In every section, include an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a key and a value separated by a dash (-); for one specific key in each list, the value text must be styled with the CSS class 'info-blue'.\n- Immediately following each section, insert an <hr> element to separate the blog posts visually.\n- At the bottom of the component, add a button labeled 'Load More Posts' that is wrapped in a <div> element with a class name of 'action-container'.",
        "raw_output_metric": [
            "blog-wrapper",
            "Blog Highlights",
            "section",
            "header",
            "|",
            "ul",
            "li",
            "info-blue",
            "hr",
            "action-container",
            "Load More Posts"
        ],
        "VQA": {
            "What is the title of the blog component?": "Blog Highlights",
            "How many blog post summaries are displayed?": "3",
            "How are individual blog post summaries visually separated?": "An hr element is used after each section",
            "What element displays the post date and author name?": "A header element showing the date and author separated by a vertical bar",
            "How many list items are present in each blog post summary?": "4",
            "How is the key-value pair displayed in each list item?": "They are separated by a dash",
            "Which CSS class is used to style a specific value in one of the list items?": "info-blue",
            "Where is the 'Load More Posts' button located?": "At the bottom inside a container with the class action-container"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000143",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a gadget showcase with distinct sections and interactive elements.\n\nFeature Requirements:\n- Create a top-level <div> container with a class name of 'showcase-box' to wrap all component elements.\n- Insert a centered <h1> element at the top with the exact text 'Gadget Showcase'.\n- Include exactly 3 distinct <section> elements arranged sequentially in the component.\n- In the first section, add an ordered list (<ol>) containing exactly 4 list items (<li>), where each item displays a label and a corresponding value separated by a colon.\n- In the second section, include a paragraph (<p>) that contains a <span> element; apply an inline style to the <span> to set its background color to lightblue.\n- In the third section, insert a table with a single row (<tr>) and two cells (<td>), labeling the cells 'Feature' and 'Description' respectively.\n- Ensure that the 'Description' cell text uses a CSS class named 'detail-blue' to apply blue text.\n- Add a clickable button element labeled 'More Details' at the bottom of the component inside a <div> with a class name 'footer-button'.",
        "raw_output_metric": [
            "showcase-box",
            "Gadget Showcase",
            "<section>",
            "<ol>",
            "<li>",
            "<p>",
            "<span>",
            "background-color: lightblue",
            "<table>",
            "<tr>",
            "<td>",
            "Feature",
            "Description",
            "detail-blue",
            "footer-button",
            "More Details"
        ],
        "VQA": {
            "What is the main header text displayed at the top?": "Gadget Showcase",
            "How many distinct sections are present in the component?": "3",
            "How many items are in the ordered list within the first section?": "4",
            "Which punctuation mark separates each label from its value in the list items?": "Colon",
            "What is the background color applied to the span element in the paragraph of the second section?": "Lightblue",
            "What are the labels used in the two cells of the table in the third section?": "Feature and Description",
            "Which CSS class is applied to the 'Description' text in the table?": "detail-blue",
            "What is the text displayed on the clickable button at the bottom of the component?": "More Details"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000144",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nTransform the provided weather forecast text into an Angular component that organizes and displays forecast information in clearly defined sections.\n\nFeature Requirements:\n- Create a primary container using a <div> element with a class name 'forecast-wrapper' that encapsulates all component content.\n- Add a header section containing an <h1> element, centered horizontally, with the text 'Weather Update'.\n- Incorporate a section for detailed forecasts using a <section> element that includes exactly 3 <p> elements, each representing distinct forecast details extracted from the input.\n- Include another section with an unordered list (<ul>) that holds exactly 4 <li> elements, each displaying a specific temperature reading preceded by a label and separated by a colon (:).\n- Within the unordered list, assign a CSS class 'temp-warning' to one list item to uniquely style a temperature value that exceeds a particular threshold.\n- Append a footer section using a <div> element with the class 'timestamp-section' that contains a <span> element showing the timestamp of the forecast update.\n- Ensure the header is centered, the detailed paragraphs are left-aligned, and the footer timestamp is right-aligned.\n- Use an inline style in the temperature list item with the 'temp-warning' class to set its text color to blue.",
        "raw_output_metric": [
            "forecast-wrapper",
            "Weather Update",
            "<h1>",
            "<section>",
            "<p>",
            "<ul>",
            "<li>",
            "temp-warning",
            "color: blue",
            "timestamp-section",
            "<span>",
            ":"
        ],
        "VQA": {
            "What text is displayed in the header at the top of the component?": "Weather Update",
            "How many paragraphs are used to show detailed forecast information?": "3",
            "How many temperature values are listed in the temperature section?": "4",
            "What inline style is applied to highlight a specific temperature reading?": "text color blue",
            "What is the CSS class name of the main container wrapping all component content?": "forecast-wrapper",
            "How is the header text aligned?": "Centered",
            "How are the detailed forecast paragraphs aligned?": "Left-aligned",
            "How is the forecast update timestamp aligned in the footer?": "Right-aligned"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000145",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents a clear user data dashboard with three distinct information sections.\n\nFeature Requirements:\n- Use an <h1> element with the text 'User Dashboard' and center it using an inline CSS style.\n- Create a container using a <div> element with a class name of 'dashboard-container' to wrap the entire component.\n- Include exactly 3 sections, each wrapped in a <section> element, where each section displays unique content.\n- The first section must include an ordered list (<ol>) containing exactly 4 list items (<li>), with each list item displaying a label and value separated by a hyphen (-).\n- The second section should have an <h3> element with inline styling to set the text color to blue and display the title 'Status Information'.\n- The third section must contain a paragraph (<p>) with inline styling that applies bold font weight and integrates dynamic text from the input.\n- At the bottom of the component, include a <footer> element containing a button labeled 'Update Info', which is inside a <div> with the class 'footer-button'.",
        "raw_output_metric": [
            "User Dashboard",
            "text-align: center",
            "dashboard-container",
            "<section>",
            "<ol>",
            "<li>",
            "-",
            "color: blue",
            "Status Information",
            "<h3>",
            "<p>",
            "font-weight: bold",
            "footer",
            "footer-button",
            "Update Info"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "User Dashboard",
            "How is the main title visually styled?": "It is centered using inline CSS.",
            "How many sections are present on the dashboard?": "3",
            "How many list items does the first section contain in its ordered list?": "4",
            "What content is shown in the second section's heading?": "Status Information",
            "How is the dynamic text in the third section styled?": "It is bold, as the paragraph has inline styling for bold font weight.",
            "What interactive element is visible at the bottom of the component?": "A button labeled 'Update Info' inside a footer element"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000146",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed event schedule.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Event Schedule\", ensuring it is prominent at the top of the component.\n- Wrap all content in a <div> with the class name \"event-wrapper\" to serve as the main container.\n- Structure the output into exactly 3 sections, each enclosed in a <section> element and containing unique event-related content.\n- In the first section, include a table (<table>) with exactly 2 rows; the first row should list \"Start Time: [value]\" and the second row \"End Time: [value]\", with each row split into two <td> elements.\n- In the second section, add an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Activity: Time\". One of these list items must have its time value wrapped with a CSS class called \"highlight\" to indicate emphasis.\n- In the third section, display a blockquote (<blockquote>) containing an inspirational quote about events, using an inline style to set the font style to italic.\n- At the bottom of the component, include a button (<button>) labeled \"Confirm Attendance\", positioned within a <div> with a class \"action-button\" for clear alignment.",
        "raw_output_metric": [
            "Event Schedule",
            "event-wrapper",
            "<section>",
            "<table>",
            "Start Time: [value]",
            "End Time: [value]",
            "<tr>",
            "<td>",
            "<ul>",
            "<li>",
            "Activity: Time",
            "highlight",
            "<blockquote>",
            "font-style: italic",
            "Confirm Attendance",
            "action-button"
        ],
        "VQA": {
            "What is the text of the centered title at the top of the component?": "Event Schedule",
            "How many sections are present in the component layout?": "3",
            "How many rows are displayed in the table of the first section?": "2",
            "What are the labels shown in the table rows of the first section?": "Start Time: [value] and End Time: [value]",
            "How many list items are in the unordered list of the second section?": "4",
            "Is any time value in the list items emphasized with a special style?": "Yes, one time value is wrapped with the 'highlight' class",
            "What style is applied to the text within the blockquote in the third section?": "Italic",
            "What label is on the button at the bottom of the component?": "Confirm Attendance",
            "Which class name is used for the main container wrapping the entire content?": "event-wrapper",
            "Which class is used to position the action button at the bottom?": "action-button"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000147",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that presents system metrics in a structured and interactive format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'System Metrics'.\n- Wrap the entire content in a <div> container with a class name of 'metrics-wrapper'.\n- Display exactly 3 sections, each enclosed in a <section> element with distinct content.\n- The first section must contain a table (<table>) with exactly 3 rows and 2 columns; each row should display a label and a corresponding numeric value from the input, with one of the numeric values styled using a CSS class called 'highlight-blue'.\n- The second section must include a paragraph (<p>) that shows summary text derived from the input, and the text within this paragraph must have an inline style setting its text-decoration property to underline.\n- The third section must present exactly two anchor (<a>) elements, each displaying different textual information and defaulting their href attribute to '#' to act as placeholders.\n- At the bottom of the component, add a footer using a <div> with the class 'action-footer' containing a button element labeled 'Update Metrics'.",
        "raw_output_metric": [
            "System Metrics",
            "metrics-wrapper",
            "<h1>",
            "<section>",
            "<table>",
            "highlight-blue",
            "<p",
            "text-decoration: underline",
            "<a href=\"#\">",
            "action-footer",
            "Update Metrics"
        ],
        "VQA": {
            "What is the title text displayed at the top of the component?": "System Metrics",
            "How many sections are present in the component?": "3",
            "How many rows and columns does the table in the first section have?": "3 rows and 2 columns",
            "What CSS class is applied to one of the numeric values in the table?": "highlight-blue",
            "What text decoration style is applied to the summary paragraph in the second section?": "underline",
            "How many link elements are visible in the third section?": "2",
            "What is the label on the button in the action footer?": "Update Metrics"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000148",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed weather forecast summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report'.\n- Wrap all content in a <div> element with a class name of 'weather-info' for layout purposes.\n- Display exactly 3 sections, each contained within an <article> element representing different types of weather data.\n- The first section must include a header (<h3>) with the text 'Current Conditions' and a table with 2 rows and 3 columns showing temperature, humidity, and wind speed data.\n- The second section should incorporate an ordered list (<ol>) with exactly 4 list items, each representing forecast details, where each item displays a label and corresponding value separated by a dash (-).\n- The third section must contain a paragraph (<p>) with an alert message that is styled with an inline style to have a yellow background and bold font-weight.\n- Ensure that the table in the first section has a CSS class 'data-table' and that one specific cell in the table is highlighted by applying a CSS class 'temp-alert'.\n- Add a button labeled 'Update Forecast' positioned at the bottom within a <div> element with a class name 'action-panel'.",
        "raw_output_metric": [
            "Weather Report",
            "weather-info",
            "Current Conditions",
            "data-table",
            "temp-alert",
            "Update Forecast",
            "action-panel"
        ],
        "VQA": {
            "What is the text displayed in the centered title at the top?": "Weather Report",
            "How many article sections are shown on the page?": "3",
            "What header text is included in the first article section?": "Current Conditions",
            "How many rows and columns does the table in the first section have?": "2 rows and 3 columns",
            "Which CSS class is applied to the table displaying weather data?": "data-table",
            "Is there any table cell visually highlighted with a distinctive style?": "Yes, one cell is highlighted with the 'temp-alert' class",
            "How many list items are contained in the ordered list of the second section?": "4",
            "What character is used to separate the label and value in each list item?": "a dash (-)",
            "What inline styles are applied to the alert message in the third section?": "a yellow background and bold font",
            "What is the label of the button located at the bottom of the page?": "Update Forecast"
        }
    },
    {
        "task_name": "Text to Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "task_id": "000149",
        "input_type": "Text",
        "output_type": "Angular",
        "rendering": true,
        "query": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays an interactive dashboard with structured statistical data.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Dashboard Summary’ at the top of the component.\n- Create a main container using a <div> element with a class name of 'dashboard-wrapper' to house all other elements.\n- Display exactly 3 cards, each contained within its own <section> element and showing distinct parts of the dashboard information.\n- The first card must feature an unordered list (<ul>) with exactly 4 list items (<li>), where each item shows a data point from the input in the format \"Label: Value\".\n- The second card should include a table element (<table>) with a header (<thead>) and one row (<tr>) inside a <tbody>, containing exactly 3 cells (<td>) representing individual metrics.\n- The third card must display a paragraph (<p>) with inline styling that sets the background color to yellow and includes bold text.\n- At least one of the list items in the first card must apply a CSS class named 'warning-text' to its value to highlight critical information.\n- Add a button element labeled ‘Update View’ at the bottom of the component, wrapped in a <div> element with a class 'toggle-container' for proper alignment.\n- Ensure that all elements are directly structured within the main container without additional nesting beyond what is described above.",
        "raw_output_metric": [
            "Dashboard Summary",
            "dashboard-wrapper",
            "section",
            "ul",
            "li",
            "Label: Value",
            "warning-text",
            "table",
            "thead",
            "tbody",
            "tr",
            "td",
            "p",
            "background-color: yellow",
            "Update View",
            "toggle-container"
        ],
        "VQA": {
            "What is the main title displayed at the top of the dashboard?": "Dashboard Summary",
            "How many cards are visible in the dashboard layout?": "3",
            "How many list items are shown in the first card?": "4",
            "How is critical information indicated in the first card?": "A list item uses the 'warning-text' class on its value",
            "How many table cells are present in the single row of the table in the second card?": "3",
            "What inline style is applied to the paragraph in the third card?": "Yellow background with bold text",
            "What label does the button at the bottom display?": "Update View",
            "What is the class name of the main container wrapping all elements?": "dashboard-wrapper"
        }
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000200",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional intergalactic expedition schedule.\n\nFeature Requirements:\n- Include a first row with column headers: \"Expedition Name\", \"Launch Year\", \"Destination Planet\", \"Lead Explorer\".\n- All expedition names must be unique and listed in the first column under \"Expedition Name\".\n- Each \"Launch Year\" entry must be an integer representing a year within the range 2100 to 2200.\n- The \"Destination Planet\" column should include unique fictional planet names and always appear in the third column.\n- The \"Lead Explorer\" column must consist of names formatted as a first name followed by a last name.\n- The CSV should contain exactly 8 rows of expedition data, not counting the header row.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][0]",
            "rows[0][1]",
            "rows[0][2]",
            "rows[0][3]",
            "rows[1][0]",
            "rows[1][1]",
            "rows[1][2]",
            "rows[1][3]",
            "rows[2][0]",
            "rows[2][1]",
            "rows[2][2]",
            "rows[2][3]",
            "rows[3][0]",
            "rows[3][1]",
            "rows[3][2]",
            "rows[3][3]",
            "rows[4][0]",
            "rows[4][1]",
            "rows[4][2]",
            "rows[4][3]",
            "rows[5][0]",
            "rows[5][1]",
            "rows[5][2]",
            "rows[5][3]",
            "rows[6][0]",
            "rows[6][1]",
            "rows[6][2]",
            "rows[6][3]",
            "rows[7][0]",
            "rows[7][1]",
            "rows[7][2]",
            "rows[7][3]",
            "rows[8][0]",
            "rows[8][1]",
            "rows[8][2]",
            "rows[8][3]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000201",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a fictional product inventory list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Product Name\", \"Price\", \"Category\", \"Stock Quantity\".\n- Ensure every product name is unique and appears under the \"Product Name\" header.\n- The \"Price\" column must display a numeric value formatted as a float with two decimal places.\n- The \"Category\" column should contain one of the following categories: \"Electronics\", \"Clothing\", \"Toys\", \"Food\", or \"Books\".\n- \"Stock Quantity\" must be an integer indicating the available number of items.\n- The CSV should have exactly 11 rows in total: one header row and 10 product data rows.\n- Each row, including the header, must have exactly 4 comma-separated values.\n- Ensure there are no extra spaces, blank lines, or additional commas in the CSV output.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000202",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of enchanted forests.\n\nFeature Requirements:\n- Include a header row with column headers: \"Forest Name\", \"Area (acres)\", \"Magic Level\", \"Guardian Species\".\n- Ensure all forest names in the \"Forest Name\" column are unique.\n- The \"Area (acres)\" column must contain integer values representing the size of each forest.\n- The \"Magic Level\" column should include one of the following specific values: \"Low\", \"Medium\", \"High\", or \"Legendary\".\n- The \"Guardian Species\" column must list a mythical creature name such as \"Unicorn\", \"Dragon\", \"Dryad\", or \"Phoenix\".\n- The CSV should contain exactly 8 rows of forest data, in addition to the header row.\n- Each row, including the header, must have exactly 4 comma-separated values with no blank rows in between.",
        "raw_output_metric": [
            "rows[0][Forest Name]",
            "rows[0][Area (acres)]",
            "rows[0][Magic Level]",
            "rows[0][Guardian Species]",
            "rows[1][Forest Name]",
            "rows[1][Area (acres)]",
            "rows[1][Magic Level]",
            "rows[1][Guardian Species]",
            "rows[2][Forest Name]",
            "rows[2][Area (acres)]",
            "rows[2][Magic Level]",
            "rows[2][Guardian Species]",
            "rows[3][Forest Name]",
            "rows[3][Area (acres)]",
            "rows[3][Magic Level]",
            "rows[3][Guardian Species]",
            "rows[4][Forest Name]",
            "rows[4][Area (acres)]",
            "rows[4][Magic Level]",
            "rows[4][Guardian Species]",
            "rows[5][Forest Name]",
            "rows[5][Area (acres)]",
            "rows[5][Magic Level]",
            "rows[5][Guardian Species]",
            "rows[6][Forest Name]",
            "rows[6][Area (acres)]",
            "rows[6][Magic Level]",
            "rows[6][Guardian Species]",
            "rows[7][Forest Name]",
            "rows[7][Area (acres)]",
            "rows[7][Magic Level]",
            "rows[7][Guardian Species]",
            "rows[8][Forest Name]",
            "rows[8][Area (acres)]",
            "rows[8][Magic Level]",
            "rows[8][Guardian Species]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000203",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of mythical artifacts discovered from various ancient civilizations.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Origin Civilization\", \"Estimated Age\", \"Material\", \"Discovery Location\".\n- Ensure all artifact names are unique and appear in the first column under the \"Artifact Name\" header.\n- Each \"Origin Civilization\" entry must be one of these options: \"Egyptian\", \"Greek\", \"Mayan\", \"Roman\", \"Celtic\".\n- Every \"Estimated Age\" value must be a positive integer representing years.\n- The \"Material\" column should include items like \"bronze\", \"stone\", \"gold\", \"clay\", or \"silver\".\n- \"Discovery Location\" should list specific country names where the artifact was found.\n- The CSV must contain exactly 9 rows including the header.\n- Ensure no blank rows exist between any CSV entries.\n- Each row, including the header, must have exactly 5 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000204",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of ancient treasure sites in a fantasy realm.\n\nFeature Requirements:\n- The first row must contain column headers: \"Treasure\", \"Depth (m)\", \"Discovered By\", \"Region\".\n- Each \"Treasure\" entry should be a unique, fictional artifact name.\n- The \"Depth (m)\" column must include a positive integer indicating depth in meters.\n- The \"Discovered By\" column should contain explorer names with common first names.\n- The \"Region\" column should list distinct fantasy areas, such as \"Northern Isles\" or \"Mystic Forest\".\n- The CSV should include exactly 8 rows of treasure site data, not counting the header.\n- Each row must contain exactly 4 comma-separated values.\n- There should be no empty or extra rows between data entries.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000205",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an imaginary festival event schedule.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Event Name\", \"Date\", \"Time\", \"Location\", \"Performer\".\n- The CSV must include exactly 6 rows of event data following the header.\n- Each \"Event Name\" must be unique and represent a fictional festival event.\n- All \"Date\" entries should be formatted as YYYY-MM-DD.\n- Every \"Time\" entry must follow the 24-hour format HH:MM.\n- \"Location\" should list either city names or specific venue addresses.\n- The \"Performer\" column must contain the name of a band or musical act.\n- There must be no blank rows between any of the rows in the CSV.\n- Each row, including the header, must consist of exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Event Name]",
            "rows[0][Date]",
            "rows[0][Time]",
            "rows[0][Location]",
            "rows[0][Performer]",
            "rows[1][Event Name]",
            "rows[1][Date]",
            "rows[1][Time]",
            "rows[1][Location]",
            "rows[1][Performer]",
            "rows[2][Event Name]",
            "rows[2][Date]",
            "rows[2][Time]",
            "rows[2][Location]",
            "rows[2][Performer]",
            "rows[3][Event Name]",
            "rows[3][Date]",
            "rows[3][Time]",
            "rows[3][Location]",
            "rows[3][Performer]",
            "rows[4][Event Name]",
            "rows[4][Date]",
            "rows[4][Time]",
            "rows[4][Location]",
            "rows[4][Performer]",
            "rows[5][Event Name]",
            "rows[5][Date]",
            "rows[5][Time]",
            "rows[5][Location]",
            "rows[5][Performer]",
            "rows[6][Event Name]",
            "rows[6][Date]",
            "rows[6][Time]",
            "rows[6][Location]",
            "rows[6][Performer]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000206",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional catalog of ancient artifacts discovered in a lost civilization.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Era\", \"Material\", \"Origin Site\".\n- All artifact names must be unique and evoke imaginative ancient objects.\n- Each \"Era\" entry must be a descriptive time period such as \"Bronze Age\" or \"Iron Age\".\n- The \"Material\" column should contain specific substances like \"Stone\", \"Bronze\", \"Gold\", or \"Ceramic\".\n- \"Origin Site\" must list names of archaeological locations or geolocations.\n- The CSV should contain exactly 12 rows in total, including the header row.\n- Each row must include exactly 4 comma-separated values with no additional spaces or blank rows.\n- All data must be formatted as plain text with no extra formatting or embedded code.",
        "raw_output_metric": [
            "rows[0][Artifact Name]",
            "rows[0][Era]",
            "rows[0][Material]",
            "rows[0][Origin Site]",
            "rows[1][Artifact Name]",
            "rows[1][Era]",
            "rows[1][Material]",
            "rows[1][Origin Site]",
            "rows[2][Artifact Name]",
            "rows[2][Era]",
            "rows[2][Material]",
            "rows[2][Origin Site]",
            "rows[3][Artifact Name]",
            "rows[3][Era]",
            "rows[3][Material]",
            "rows[3][Origin Site]",
            "rows[4][Artifact Name]",
            "rows[4][Era]",
            "rows[4][Material]",
            "rows[4][Origin Site]",
            "rows[5][Artifact Name]",
            "rows[5][Era]",
            "rows[5][Material]",
            "rows[5][Origin Site]",
            "rows[6][Artifact Name]",
            "rows[6][Era]",
            "rows[6][Material]",
            "rows[6][Origin Site]",
            "rows[7][Artifact Name]",
            "rows[7][Era]",
            "rows[7][Material]",
            "rows[7][Origin Site]",
            "rows[8][Artifact Name]",
            "rows[8][Era]",
            "rows[8][Material]",
            "rows[8][Origin Site]",
            "rows[9][Artifact Name]",
            "rows[9][Era]",
            "rows[9][Material]",
            "rows[9][Origin Site]",
            "rows[10][Artifact Name]",
            "rows[10][Era]",
            "rows[10][Material]",
            "rows[10][Origin Site]",
            "rows[11][Artifact Name]",
            "rows[11][Era]",
            "rows[11][Material]",
            "rows[11][Origin Site]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000207",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation of a fictional alien species directory.\n\nFeature Requirements:\n- The first row must contain the column headers: \"Species Name\", \"Home Planet\", \"Lifespan\", \"Primary Ability\".\n- All species names must be unique and appear in the first column.\n- Each \"Home Planet\" entry must include made-up planet names and appear in the second column.\n- \"Lifespan\" entries should be whole numbers representing years and be placed in the third column.\n- The \"Primary Ability\" column should include one special ability such as \"Telepathy\", \"Invisibility\", \"Regeneration\", etc.\n- The CSV should contain exactly 8 rows of species data following the header row.\n- There should be no blank rows between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values.\n- The CSV output must strictly use commas as the separator with no additional formatting.",
        "raw_output_metric": [
            "rows[0][Species Name]",
            "rows[0][Home Planet]",
            "rows[0][Lifespan]",
            "rows[0][Primary Ability]",
            "rows[1][Species Name]",
            "rows[1][Home Planet]",
            "rows[1][Lifespan]",
            "rows[1][Primary Ability]",
            "rows[2][Species Name]",
            "rows[2][Home Planet]",
            "rows[2][Lifespan]",
            "rows[2][Primary Ability]",
            "rows[3][Species Name]",
            "rows[3][Home Planet]",
            "rows[3][Lifespan]",
            "rows[3][Primary Ability]",
            "rows[4][Species Name]",
            "rows[4][Home Planet]",
            "rows[4][Lifespan]",
            "rows[4][Primary Ability]",
            "rows[5][Species Name]",
            "rows[5][Home Planet]",
            "rows[5][Lifespan]",
            "rows[5][Primary Ability]",
            "rows[6][Species Name]",
            "rows[6][Home Planet]",
            "rows[6][Lifespan]",
            "rows[6][Primary Ability]",
            "rows[7][Species Name]",
            "rows[7][Home Planet]",
            "rows[7][Lifespan]",
            "rows[7][Primary Ability]",
            "rows[8][Species Name]",
            "rows[8][Home Planet]",
            "rows[8][Lifespan]",
            "rows[8][Primary Ability]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000208",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship registry.\n\nFeature Requirements:\n- The first row must contain column headers: \"Ship Name\", \"Crew Capacity\", \"Max Speed (km/s)\", \"Destination\".\n- Every \"Ship Name\" must be unique and appear in the first column.\n- The \"Crew Capacity\" column should include only integer values representing the number of crew members.\n- \"Max Speed (km/s)\" entries must be decimal numbers rounded to up to two decimal places.\n- The \"Destination\" column must include names of celestial bodies such as \"Mars\", \"Europa\", \"Titan\", etc.\n- The CSV must contain exactly 10 rows: one header row plus nine spaceship records.\n- Every row, including the header, should have exactly 4 comma-separated values.\n- The CSV output must not include any blank rows or extra delimiters.",
        "raw_output_metric": [
            "rows[0][Ship Name]",
            "rows[0][Crew Capacity]",
            "rows[0][Max Speed (km/s)]",
            "rows[0][Destination]",
            "rows[1..9][Ship Name]",
            "rows[1..9][Crew Capacity]",
            "rows[1..9][Max Speed (km/s)]",
            "rows[1..9][Destination]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000209",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nGenerate a detailed mission log for a hypothetical spaceship fleet in CSV format.\n\nFeature Requirements:\n- The CSV must start with a header row containing the following columns exactly: \"Mission ID\", \"Ship Name\", \"Crew Count\", \"Destination\", \"Launch Date\".\n- Each \"Mission ID\" must be a unique alphanumeric string beginning with \"M\" followed by at least three digits.\n- \"Ship Name\" should be a fictional name for spaceships, with no repeated names across the CSV.\n- \"Crew Count\" must be an integer value ranging from 1 to 100 and occupy the third column.\n- \"Destination\" entries should include names of space locations (e.g., \"Mars\", \"Europa\", \"Titan\") or other fictional exoplanets.\n- \"Launch Date\" must be formatted as YYYY-MM-DD and appear in the fifth column.\n- The CSV should contain exactly 15 rows in total, including the header row.\n- Every row must contain exactly 5 comma-separated values with no blank cells or extra spaces.\n- The output should strictly be in plain CSV format with no additional text or formatting.",
        "raw_output_metric": [
            "rows[0][0]  // This header cell must be exactly 'Mission ID'",
            "rows[0][1]  // This header cell must be exactly 'Ship Name'",
            "rows[0][2]  // This header cell must be exactly 'Crew Count'",
            "rows[0][3]  // This header cell must be exactly 'Destination'",
            "rows[0][4]  // This header cell must be exactly 'Launch Date'",
            "rows[1..14][0]  // Each cell must contain a unique alphanumeric string starting with 'M' followed by at least three digits",
            "rows[1..14][1]  // Each cell must contain a fictional, unique spaceship name",
            "rows[1..14][2]  // Each cell must be an integer between 1 and 100 (the crew count)",
            "rows[1..14][3]  // Each cell must specify a space destination (e.g., Mars, Europa, Titan, or a fictional exoplanet)",
            "rows[1..14][4]  // Each cell must be a valid date in the YYYY-MM-DD format representing the launch date"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000210",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of fictional research project details.\n\nFeature Requirements:\n- Include a first row with column headers: \"Project Title\", \"Principal Investigator\", \"Year\", \"Funding\".\n- Ensure all project titles are unique and appear in the first column under the \"Project Title\" header.\n- Each \"Year\" entry must be a 4-digit integer between 2000 and 2023.\n- The \"Funding\" column should display monetary values in US dollars with a leading \"$\" and two decimal places.\n- Names in the \"Principal Investigator\" column must follow the \"First Last\" format.\n- The CSV should contain exactly 8 rows of research project data.\n- Ensure the CSV output does not include any blank rows between entries.\n- Each row, including the header, should consist of exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Project Title]",
            "rows[0][Principal Investigator]",
            "rows[0][Year]",
            "rows[0][Funding]",
            "rows[1][Project Title]",
            "rows[1][Principal Investigator]",
            "rows[1][Year]",
            "rows[1][Funding]",
            "rows[2][Project Title]",
            "rows[2][Principal Investigator]",
            "rows[2][Year]",
            "rows[2][Funding]",
            "rows[3][Project Title]",
            "rows[3][Principal Investigator]",
            "rows[3][Year]",
            "rows[3][Funding]",
            "rows[4][Project Title]",
            "rows[4][Principal Investigator]",
            "rows[4][Year]",
            "rows[4][Funding]",
            "rows[5][Project Title]",
            "rows[5][Principal Investigator]",
            "rows[5][Year]",
            "rows[5][Funding]",
            "rows[6][Project Title]",
            "rows[6][Principal Investigator]",
            "rows[6][Year]",
            "rows[6][Funding]",
            "rows[7][Project Title]",
            "rows[7][Principal Investigator]",
            "rows[7][Year]",
            "rows[7][Funding]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000211",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional cooking contest scoreboard.\n\nFeature Requirements:\n- The first row must contain column headers: \"Contestant Name\", \"Dish Name\", \"Cuisine Type\", \"Score\".\n- The CSV must include exactly 13 rows in total, with one header row and 12 rows of contestant data.\n- Every \"Contestant Name\" must be unique and appear as the first value in its row.\n- Each \"Dish Name\" should be a unique, creatively named dish featured in the contest.\n- The \"Cuisine Type\" column must contain names of specific world cuisines such as \"Italian\", \"Japanese\", \"Mexican\", etc.\n- Each \"Score\" must be an integer between 80 and 100, inclusive, appearing in the fourth column.\n- There should be no blank rows or extra fields; every row must consist of exactly 4 comma-separated values.\n- The CSV output should be plain text without any additional formatting or code wrappers.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000212",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of global culinary festivals.\n\nFeature Requirements:\n- Include a header row with the column headers \"Festival Name\", \"Country\", \"Month\", \"Attendance\".\n- The first column must list unique festival names that represent each row's culinary event.\n- The \"Country\" column should contain single-word country names using only alphabetic characters.\n- The \"Month\" column must contain one of the valid month names (e.g., January, February, etc.) for each entry.\n- The \"Attendance\" column should include only integer values representing estimated visitor numbers.\n- The CSV should consist of exactly 13 rows total, including one header row and 12 data rows.\n- Ensure each row contains exactly 4 comma-separated values with no additional spaces or extra delimiters.\n- No row should be left blank, and there must be no empty lines between any of the rows.\n- The CSV output must not include any quotation marks, images, or non-text elements.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000213",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic vehicle specifications list.\n\nFeature Requirements:\n- The CSV must start with a header row containing exactly these columns in order: \"Vehicle Model\", \"Year\", \"Energy Source\", \"Max Speed\", \"Manufacturer Location\".\n- The CSV should contain exactly 8 rows of vehicle data following the header row.\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- \"Year\" entries must be four-digit integers representing the vehicle's release year.\n- \"Energy Source\" entries should include options like \"Electric\", \"Hydrogen\", \"Solar\", or \"Hybrid\".\n- \"Max Speed\" must be a number followed by the unit \"km/h\" with no spaces within the value (for example, \"220km/h\").\n- \"Manufacturer Location\" should consist of a valid city name and be placed in the fifth column.\n- All rows, including the header, must strictly include exactly 5 comma-separated values with no blank rows between entries.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000214",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional movie directory.\n\nFeature Requirements:\n- Include a first row with column headers: \"Movie Title\", \"Release Year\", \"Genre\", \"Budget (in millions)\".\n- Ensure all movie titles are unique and are placed in the first column under \"Movie Title\".\n- Each \"Release Year\" entry must be a four-digit integer, arranged in the second column.\n- The \"Genre\" column should contain values like \"Action\", \"Drama\", \"Comedy\", etc.\n- \"Budget (in millions)\" must be a numeric value with one decimal place, located in the fourth column.\n- The CSV must include exactly 8 rows of movie data following the header row.\n- Make sure there are no extra columns or extra blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][0]",
            "rows[0][1]",
            "rows[0][2]",
            "rows[0][3]",
            "rows[1][0]",
            "rows[1][1]",
            "rows[1][2]",
            "rows[1][3]",
            "rows[2][0]",
            "rows[2][1]",
            "rows[2][2]",
            "rows[2][3]",
            "rows[3][0]",
            "rows[3][1]",
            "rows[3][2]",
            "rows[3][3]",
            "rows[4][0]",
            "rows[4][1]",
            "rows[4][2]",
            "rows[4][3]",
            "rows[5][0]",
            "rows[5][1]",
            "rows[5][2]",
            "rows[5][3]",
            "rows[6][0]",
            "rows[6][1]",
            "rows[6][2]",
            "rows[6][3]",
            "rows[7][0]",
            "rows[7][1]",
            "rows[7][2]",
            "rows[7][3]",
            "rows[8][0]",
            "rows[8][1]",
            "rows[8][2]",
            "rows[8][3]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000215",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional music festival schedule.\n\nFeature Requirements:\n- The first row must include column headers: \"Day\", \"Artist\", \"Stage\", \"Start Time\", and \"Genre\".\n- The \"Day\" column should list one of the weekdays: \"Friday\", \"Saturday\", or \"Sunday\".\n- The \"Artist\" column must contain unique music act names.\n- The \"Stage\" column should specify one of the following: \"Main Stage\", \"Side Stage\", or \"Acoustic Stage\".\n- The \"Start Time\" must be formatted in 24-hour time (HH:MM).\n- The \"Genre\" column should include musical styles such as \"Rock\", \"Jazz\", \"Electronic\", or \"Folk\".\n- The CSV must include exactly 7 rows of event data following the header row.\n- There must be no extra blank rows between any records.\n- Each row, including the header row, should contain exactly 5 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000216",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional galaxy catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Galaxy Name\", \"Distance (ly)\", \"Star Count\", \"Dominant Species\".\n- The \"Galaxy Name\" column must list unique, randomly generated galaxy names.\n- \"Distance (ly)\" entries should be integers representing distances in light years.\n- \"Star Count\" values must be formatted as integers indicating the number of stars.\n- \"Dominant Species\" should contain names of imaginative alien species such as \"Zorgon\", \"Nebulite\", or \"Quorbian\".\n- The CSV should contain exactly 7 rows of galaxy data following the header.\n- Each row, including the header, must contain exactly 4 comma-separated values with no additional commas or spaces.\n- Ensure there are no empty lines between any of the rows.",
        "raw_output_metric": [
            "rows[0][0] should be 'Galaxy Name'",
            "rows[0][1] should be 'Distance (ly)'",
            "rows[0][2] should be 'Star Count'",
            "rows[0][3] should be 'Dominant Species'",
            "rows[1][0] through rows[7][0] must contain unique, randomly generated galaxy names",
            "rows[1][1] through rows[7][1] must contain integer values representing distances in light years",
            "rows[1][2] through rows[7][2] must contain integer values for star counts",
            "rows[1][3] through rows[7][3] must contain names of imaginative alien species (e.g. 'Zorgon', 'Nebulite', 'Quorbian')"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000217",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an inventory of magical artifacts.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Power Level\", \"Origin\", \"Discoverer\".\n- Ensure all artifact names are unique and occupy the first column under the \"Artifact Name\" header.\n- Each \"Power Level\" entry must be an integer between 1 and 100, appearing in the second column.\n- The \"Origin\" column should list fictional kingdoms or realms such as \"Avaloria\" or \"Eldoria\".\n- The \"Discoverer\" column must include realistic full names (first and last) and appear in the fourth column.\n- The CSV should contain exactly 15 rows of artifact data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Artifact Name]",
            "rows[0][Power Level]",
            "rows[0][Origin]",
            "rows[0][Discoverer]",
            "rows[1..15][Artifact Name]",
            "rows[1..15][Power Level]",
            "rows[1..15][Origin]",
            "rows[1..15][Discoverer]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000218",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional product catalog.\n\nFeature Requirements:\n- The first row must present column headers in the following order: \"Product ID\", \"Product Name\", \"Category\", \"Price\", \"Stock\".\n- Each \"Product ID\" should consist of a unique code with exactly 3 uppercase letters followed by 3 digits.\n- The \"Product Name\" column must include unique product names such as \"Gadget\", \"Shirt\", \"Lamp\", etc.\n- The \"Category\" entries must be one of the following fixed options: \"Electronics\", \"Clothing\", \"Home\", \"Sports\", or \"Toys\".\n- Each \"Price\" must be a floating-point number formatted with exactly two decimal places and no currency symbols.\n- The \"Stock\" column should contain a non-negative integer representing the available quantity.\n- The CSV output should include exactly 15 rows of product data following the header.\n- Ensure there are no blank rows between any entries.\n- Each row, including the header, must consist of exactly 5 comma-separated fields.",
        "raw_output_metric": [
            "rows[0][Product ID]",
            "rows[0][Product Name]",
            "rows[0][Category]",
            "rows[0][Price]",
            "rows[0][Stock]",
            "rows[1][Product ID]",
            "rows[1][Product Name]",
            "rows[1][Category]",
            "rows[1][Price]",
            "rows[1][Stock]",
            "rows[2][Product ID]",
            "rows[2][Product Name]",
            "rows[2][Category]",
            "rows[2][Price]",
            "rows[2][Stock]",
            "rows[3][Product ID]",
            "rows[3][Product Name]",
            "rows[3][Category]",
            "rows[3][Price]",
            "rows[3][Stock]",
            "rows[4][Product ID]",
            "rows[4][Product Name]",
            "rows[4][Category]",
            "rows[4][Price]",
            "rows[4][Stock]",
            "rows[5][Product ID]",
            "rows[5][Product Name]",
            "rows[5][Category]",
            "rows[5][Price]",
            "rows[5][Stock]",
            "rows[6][Product ID]",
            "rows[6][Product Name]",
            "rows[6][Category]",
            "rows[6][Price]",
            "rows[6][Stock]",
            "rows[7][Product ID]",
            "rows[7][Product Name]",
            "rows[7][Category]",
            "rows[7][Price]",
            "rows[7][Stock]",
            "rows[8][Product ID]",
            "rows[8][Product Name]",
            "rows[8][Category]",
            "rows[8][Price]",
            "rows[8][Stock]",
            "rows[9][Product ID]",
            "rows[9][Product Name]",
            "rows[9][Category]",
            "rows[9][Price]",
            "rows[9][Stock]",
            "rows[10][Product ID]",
            "rows[10][Product Name]",
            "rows[10][Category]",
            "rows[10][Price]",
            "rows[10][Stock]",
            "rows[11][Product ID]",
            "rows[11][Product Name]",
            "rows[11][Category]",
            "rows[11][Price]",
            "rows[11][Stock]",
            "rows[12][Product ID]",
            "rows[12][Product Name]",
            "rows[12][Category]",
            "rows[12][Price]",
            "rows[12][Stock]",
            "rows[13][Product ID]",
            "rows[13][Product Name]",
            "rows[13][Category]",
            "rows[13][Price]",
            "rows[13][Stock]",
            "rows[14][Product ID]",
            "rows[14][Product Name]",
            "rows[14][Category]",
            "rows[14][Price]",
            "rows[14][Stock]",
            "rows[15][Product ID]",
            "rows[15][Product Name]",
            "rows[15][Category]",
            "rows[15][Price]",
            "rows[15][Stock]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000219",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided description into a CSV representation that lists details of a futuristic spaceship fleet.\n\nFeature Requirements:\n- Include a header row with exactly 5 columns labeled \"Ship Name\", \"Model\", \"Crew Capacity\", \"Warp Speed\", \"Origin Planet\".\n- Each \"Ship Name\" must be unique and appear in the first column.\n- The \"Model\" column should contain alphanumeric designations such as \"XJ-9\" or \"ZK-42\".\n- Each \"Crew Capacity\" entry must be an integer and appear in the third column.\n- The \"Warp Speed\" column should include a floating-point number (e.g., 9.5) representing the ship's speed.\n- \"Origin Planet\" should list a fictional planet name and be in the fifth column.\n- The CSV must contain exactly 8 rows of spaceship data in addition to the header row.\n- Ensure that every row, including the header, has exactly 5 comma-separated values and that there are no blank rows between entries.\n- All data points must follow the order and structure specified without any additional formatting.",
        "raw_output_metric": [
            "rows[0][0]  // Header: Ship Name",
            "rows[0][1]  // Header: Model",
            "rows[0][2]  // Header: Crew Capacity",
            "rows[0][3]  // Header: Warp Speed",
            "rows[0][4]  // Header: Origin Planet",
            "rows[1-8][0]  // Each spaceship’s unique Ship Name",
            "rows[1-8][1]  // Each spaceship’s alphanumeric Model designation",
            "rows[1-8][2]  // Each spaceship’s Crew Capacity as an integer",
            "rows[1-8][3]  // Each spaceship’s Warp Speed as a floating-point number",
            "rows[1-8][4]  // Each spaceship’s Origin Planet name"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000220",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional space colony registry.\n\nFeature Requirements:\n- Include a first row with column headers: \"Colony Name\", \"Founding Year\", \"Population\", \"Habitat Type\", \"Sector\".\n- Ensure each \"Colony Name\" is unique and appears in the first column under the header.\n- \"Founding Year\" entries must be four-digit integers, placed in the second column.\n- \"Population\" values must be whole numbers indicating the number of inhabitants in the third column.\n- The \"Habitat Type\" column should only contain one of the following values: \"Orbital\", \"Lunar\", \"Martian\", \"Deep Space\".\n- \"Sector\" must feature designated region names like \"Alpha\", \"Beta\", \"Gamma\", etc., appearing in the fifth column.\n- The CSV should contain exactly 8 rows of colony data (excluding the header) with no blank rows between entries and exactly 5 comma-separated values per row.",
        "raw_output_metric": [
            "rows[0][Colony Name]",
            "rows[0][Founding Year]",
            "rows[0][Population]",
            "rows[0][Habitat Type]",
            "rows[0][Sector]",
            "rows[1..8][Colony Name]",
            "rows[1..8][Founding Year]",
            "rows[1..8][Population]",
            "rows[1..8][Habitat Type]",
            "rows[1..8][Sector]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000221",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a futuristic robot model list.\n\nFeature Requirements:\n- Include a header row with exactly four columns: \"Model Name\", \"Year Introduced\", \"Primary Function\", \"Manufacturer\".\n- Ensure every \"Model Name\" is unique and placed in the first column.\n- Each \"Year Introduced\" must be a four-digit integer between 2050 and 2100.\n- The \"Primary Function\" column should list explicit functions like \"Security\", \"Maintenance\", or \"Transport\".\n- \"Manufacturer\" should include names of fictional companies and appear in the fourth column.\n- The CSV must contain exactly 8 rows of robot model data beneath the header row.\n- Each row, including the header, must consist of exactly 4 comma-separated values.\n- The output should not include any extra spaces or blank rows between entries.\n- The CSV content should not include any additional formatting or text outside the specified structure.",
        "raw_output_metric": [
            "rows[0][0] (Model Name)",
            "rows[0][1] (Year Introduced)",
            "rows[0][2] (Primary Function)",
            "rows[0][3] (Manufacturer)",
            "rows[1][0] (Model Name)",
            "rows[1][1] (Year Introduced)",
            "rows[1][2] (Primary Function)",
            "rows[1][3] (Manufacturer)",
            "rows[2][0] (Model Name)",
            "rows[2][1] (Year Introduced)",
            "rows[2][2] (Primary Function)",
            "rows[2][3] (Manufacturer)",
            "rows[3][0] (Model Name)",
            "rows[3][1] (Year Introduced)",
            "rows[3][2] (Primary Function)",
            "rows[3][3] (Manufacturer)",
            "rows[4][0] (Model Name)",
            "rows[4][1] (Year Introduced)",
            "rows[4][2] (Primary Function)",
            "rows[4][3] (Manufacturer)",
            "rows[5][0] (Model Name)",
            "rows[5][1] (Year Introduced)",
            "rows[5][2] (Primary Function)",
            "rows[5][3] (Manufacturer)",
            "rows[6][0] (Model Name)",
            "rows[6][1] (Year Introduced)",
            "rows[6][2] (Primary Function)",
            "rows[6][3] (Manufacturer)",
            "rows[7][0] (Model Name)",
            "rows[7][1] (Year Introduced)",
            "rows[7][2] (Primary Function)",
            "rows[7][3] (Manufacturer)",
            "rows[8][0] (Model Name)",
            "rows[8][1] (Year Introduced)",
            "rows[8][2] (Primary Function)",
            "rows[8][3] (Manufacturer)"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000222",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional futuristic spaceship fleet list.\n\nFeature Requirements:\n- The first row must be a header with exactly five columns: \"Ship Name\", \"Crew Size\", \"Class\", \"Departure Year\", \"Destination Galaxy\".\n- Each \"Ship Name\" in the first column must be unique and reflect a creative futuristic naming style.\n- The \"Crew Size\" entries must be whole numbers, each ranging from 50 to 1000.\n- The \"Class\" column should include categories such as \"Explorer\", \"Battleship\", \"Transport\", or \"Research\".\n- The \"Departure Year\" values must be four-digit integers, all set to a year after 2100.\n- The \"Destination Galaxy\" column must include names like \"Andromeda\", \"Milky Way\", \"Sombrero\", etc.\n- The CSV output should contain exactly 9 rows: 1 header row plus 8 rows of spaceship data.\n- There must be no blank rows between any of the CSV rows.\n- Each row must have exactly 5 comma-separated values, with no extra spaces or missing entries.\n- Ensure that all spaceship data entries are consistently formatted as specified.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000223",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nTransform the provided descriptive text into a CSV list representing enchanted artifacts.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Power\", \"Era\", \"Mystery Level\".\n- Every artifact name must be unique and appear in the first column under \"Artifact Name\".\n- The \"Power\" column should include specific abilities such as \"Flight\", \"Invisibility\", or \"Time Control\".\n- The \"Era\" column must list singular historical period names such as \"Ancient\", \"Medieval\", or \"Modern\".\n- The \"Mystery Level\" column should contain integer values indicating the artifact's enigma rating.\n- The CSV should include exactly 7 rows of artifact data, excluding the header.\n- Each row, including the header, must have exactly 4 comma-separated values with no extra whitespace.\n- There should be no blank rows between any entries in the CSV output.\n- All entries must strictly follow the order defined by the header columns.\n- Ensure that no row contains any null or missing values for the required columns.",
        "raw_output_metric": [
            "rows[0][Artifact Name]",
            "rows[0][Power]",
            "rows[0][Era]",
            "rows[0][Mystery Level]",
            "rows[1][Artifact Name]",
            "rows[1][Power]",
            "rows[1][Era]",
            "rows[1][Mystery Level]",
            "rows[2][Artifact Name]",
            "rows[2][Power]",
            "rows[2][Era]",
            "rows[2][Mystery Level]",
            "rows[3][Artifact Name]",
            "rows[3][Power]",
            "rows[3][Era]",
            "rows[3][Mystery Level]",
            "rows[4][Artifact Name]",
            "rows[4][Power]",
            "rows[4][Era]",
            "rows[4][Mystery Level]",
            "rows[5][Artifact Name]",
            "rows[5][Power]",
            "rows[5][Era]",
            "rows[5][Mystery Level]",
            "rows[6][Artifact Name]",
            "rows[6][Power]",
            "rows[6][Era]",
            "rows[6][Mystery Level]",
            "rows[7][Artifact Name]",
            "rows[7][Power]",
            "rows[7][Era]",
            "rows[7][Mystery Level]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000224",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional planet catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Planet Name\", \"Diameter (km)\", \"Type\", \"Moon Count\", \"Nearest Star System\".\n- All planet names must be unique and formatted in title case.\n- The \"Diameter (km)\" values should be integers representing planet diameters.\n- The \"Type\" column must include only the specific values \"Terrestrial\", \"Gas Giant\", or \"Ice Giant\".\n- The \"Moon Count\" column should contain integer values indicating the number of moons.\n- The \"Nearest Star System\" column must list fictional star system names only.\n- The CSV should contain exactly 12 rows of planet data, following the header row.\n- Every row must have exactly 5 comma-separated values with no blank rows between.\n- Ensure that each entry strictly adheres to its designated column format.",
        "raw_output_metric": [
            "rows[0][Planet Name]",
            "rows[0][Diameter (km)]",
            "rows[0][Type]",
            "rows[0][Moon Count]",
            "rows[0][Nearest Star System]",
            "rows[1][Planet Name]",
            "rows[1][Diameter (km)]",
            "rows[1][Type]",
            "rows[1][Moon Count]",
            "rows[1][Nearest Star System]",
            "rows[2][Planet Name]",
            "rows[2][Diameter (km)]",
            "rows[2][Type]",
            "rows[2][Moon Count]",
            "rows[2][Nearest Star System]",
            "rows[3][Planet Name]",
            "rows[3][Diameter (km)]",
            "rows[3][Type]",
            "rows[3][Moon Count]",
            "rows[3][Nearest Star System]",
            "rows[4][Planet Name]",
            "rows[4][Diameter (km)]",
            "rows[4][Type]",
            "rows[4][Moon Count]",
            "rows[4][Nearest Star System]",
            "rows[5][Planet Name]",
            "rows[5][Diameter (km)]",
            "rows[5][Type]",
            "rows[5][Moon Count]",
            "rows[5][Nearest Star System]",
            "rows[6][Planet Name]",
            "rows[6][Diameter (km)]",
            "rows[6][Type]",
            "rows[6][Moon Count]",
            "rows[6][Nearest Star System]",
            "rows[7][Planet Name]",
            "rows[7][Diameter (km)]",
            "rows[7][Type]",
            "rows[7][Moon Count]",
            "rows[7][Nearest Star System]",
            "rows[8][Planet Name]",
            "rows[8][Diameter (km)]",
            "rows[8][Type]",
            "rows[8][Moon Count]",
            "rows[8][Nearest Star System]",
            "rows[9][Planet Name]",
            "rows[9][Diameter (km)]",
            "rows[9][Type]",
            "rows[9][Moon Count]",
            "rows[9][Nearest Star System]",
            "rows[10][Planet Name]",
            "rows[10][Diameter (km)]",
            "rows[10][Type]",
            "rows[10][Moon Count]",
            "rows[10][Nearest Star System]",
            "rows[11][Planet Name]",
            "rows[11][Diameter (km)]",
            "rows[11][Type]",
            "rows[11][Moon Count]",
            "rows[11][Nearest Star System]",
            "rows[12][Planet Name]",
            "rows[12][Diameter (km)]",
            "rows[12][Type]",
            "rows[12][Moon Count]",
            "rows[12][Nearest Star System]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000225",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional planetary database.\n\nFeature Requirements:\n- Include an initial row with column headers: \"Planet Name\", \"Diameter (km)\", \"Atmosphere Composition\", \"Distance from Star (AU)\", \"Moons Count\".\n- Ensure all planet names are unique and appear under the \"Planet Name\" header.\n- Each \"Diameter (km)\" value must be an integer, representing the planet's diameter in kilometers.\n- The \"Atmosphere Composition\" values should be selected from options like \"Oxygen-rich\", \"Methane\", \"Carbon Dioxide\", \"Helium\", or \"Hydrogen\".\n- \"Distance from Star (AU)\" entries must be decimal numbers rounded to one decimal place to represent Astronomical Units.\n- \"Moons Count\" should be a non-negative integer indicating the number of moons.\n- The CSV must contain exactly 8 rows of planet data following the header row.\n- Ensure there are no extra spaces or blank rows between entries.\n- Each row must contain exactly 5 comma-separated values following the header order.\n- The CSV output should not include any additional text or explanations beyond the structured data.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000226",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nGenerate a CSV representation of a futuristic spaceship inventory list.\n\nFeature Requirements:\n- The first row must include the column headers: \"Spaceship Name\", \"Capacity\", \"Speed (ly/hr)\", \"Base Orbit\".\n- Each spaceship name in the \"Spaceship Name\" column should be unique.\n- The \"Capacity\" column must contain whole numbers representing the number of crew members each spaceship can accommodate.\n- The \"Speed (ly/hr)\" column should include numeric values formatted with up to two decimal places.\n- The \"Base Orbit\" column must list designated space station names, such as \"New Terra\" or \"Galactic Hub\".\n- The CSV should contain exactly 8 rows of spaceship data following the header.\n- Ensure there are no blank rows between entries and each row consists strictly of 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Spaceship Name]",
            "rows[0][Capacity]",
            "rows[0][Speed (ly/hr)]",
            "rows[0][Base Orbit]",
            "rows[1][Spaceship Name]",
            "rows[1][Capacity]",
            "rows[1][Speed (ly/hr)]",
            "rows[1][Base Orbit]",
            "rows[2][Spaceship Name]",
            "rows[2][Capacity]",
            "rows[2][Speed (ly/hr)]",
            "rows[2][Base Orbit]",
            "rows[3][Spaceship Name]",
            "rows[3][Capacity]",
            "rows[3][Speed (ly/hr)]",
            "rows[3][Base Orbit]",
            "rows[4][Spaceship Name]",
            "rows[4][Capacity]",
            "rows[4][Speed (ly/hr)]",
            "rows[4][Base Orbit]",
            "rows[5][Spaceship Name]",
            "rows[5][Capacity]",
            "rows[5][Speed (ly/hr)]",
            "rows[5][Base Orbit]",
            "rows[6][Spaceship Name]",
            "rows[6][Capacity]",
            "rows[6][Speed (ly/hr)]",
            "rows[6][Base Orbit]",
            "rows[7][Spaceship Name]",
            "rows[7][Capacity]",
            "rows[7][Speed (ly/hr)]",
            "rows[7][Base Orbit]",
            "rows[8][Spaceship Name]",
            "rows[8][Capacity]",
            "rows[8][Speed (ly/hr)]",
            "rows[8][Base Orbit]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000227",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional musical instrument collection.\n\nFeature Requirements:\n- The CSV must include a first row with exactly five column headers: \"Instrument Name\", \"Category\", \"Country of Origin\", \"Year Invented\", \"Price\".\n- Each \"Instrument Name\" entry must be unique and listed in the first column.\n- The \"Category\" column should only include one of these specific types: \"String\", \"Wind\", \"Percussion\", or \"Keyboard\".\n- The \"Country of Origin\" column must list the name of a country and appear as the third column.\n- \"Year Invented\" entries must be whole numbers representing a plausible year for the invention of the instrument.\n- The \"Price\" column should display a decimal number formatted with two decimal places.\n- The CSV must contain exactly 12 rows including the header row.\n- There should be no blank rows or extra lines between the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][0] must have the header 'Instrument Name'",
            "rows[0][1] must have the header 'Category'",
            "rows[0][2] must have the header 'Country of Origin'",
            "rows[0][3] must have the header 'Year Invented'",
            "rows[0][4] must have the header 'Price'",
            "There must be exactly 12 rows in total (including the header row)",
            "Every row must contain exactly 5 comma‐separated values",
            "rows[1..11][0] must contain unique 'Instrument Name' values",
            "rows[1..11][1] must contain a 'Category' which is one of: 'String', 'Wind', 'Percussion', or 'Keyboard'",
            "rows[1..11][2] must contain a 'Country of Origin' (a valid country name)",
            "rows[1..11][3] must contain 'Year Invented' as a plausible whole number year",
            "rows[1..11][4] must contain 'Price' as a decimal number formatted with two decimal places"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000228",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of an intergalactic spaceship launch log.\n\nFeature Requirements:\n- Include a first row with exactly four column headers: \"Spaceship\", \"Launch Year\", \"Duration\", \"Destination\".\n- The \"Spaceship\" column must contain unique names that combine letters and numbers.\n- The \"Launch Year\" entries must be four-digit numbers representing plausible historical launch dates.\n- The \"Duration\" column must list mission durations in days as non-negative integers.\n- The \"Destination\" column must specify fictional planet names such as \"Zephyria\", \"Noveria\", etc.\n- The CSV output must contain exactly 8 rows in total, including the header.\n- Each row must consist of four comma-separated values with no extra or missing entries.\n- Ensure that there are no blank lines between the rows in the CSV output.",
        "raw_output_metric": [
            "rows[0][0] (Header: 'Spaceship')",
            "rows[0][1] (Header: 'Launch Year')",
            "rows[0][2] (Header: 'Duration')",
            "rows[0][3] (Header: 'Destination')",
            "rows[1..7][0] (Spaceship value: unique alphanumeric identifier)",
            "rows[1..7][1] (Launch Year value: exactly four-digit plausible year)",
            "rows[1..7][2] (Duration value: non-negative integer in days)",
            "rows[1..7][3] (Destination value: fictional planet name e.g., 'Zephyria', 'Noveria')"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000229",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional book catalog.\n\nFeature Requirements:\n- Include a first row with the column headers: \"Title\", \"Author\", \"Publication Year\", \"Genre\".\n- Ensure all book titles are unique and occupy the first column under the \"Title\" header.\n- Each \"Publication Year\" entry must be a four-digit number representing the year of publication.\n- The \"Author\" column should contain realistic full names with both a first and last name.\n- The \"Genre\" column must include recognized literature genres such as \"Mystery\", \"Fantasy\", \"Historical\", or \"Romance\".\n- The CSV should contain exactly 10 rows of book data (excluding the header row).\n- There should be no blank rows between entries.\n- Each row, including the header, must have exactly 4 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000230",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an enchanted artifact catalog.\n\nFeature Requirements:\n- The first row must include column headers: \"Artifact Name\", \"Century\", \"Origin\", \"Enchantment Level\".\n- All artifact names in the \"Artifact Name\" column must be unique, using invented names.\n- Each \"Century\" entry must be a positive integer representing the artifact's age in centuries.\n- The \"Origin\" column should list mythical locations such as \"Avalon\", \"Atlantis\", \"Elysium\", etc.\n- The \"Enchantment Level\" column must include one of the three descriptors: \"Low\", \"Medium\", or \"High\".\n- The CSV output must contain exactly 7 rows of artifact data, not including the header.\n- There should be no blank rows between the header and artifact entries.\n- Every row, including the header, must have exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Artifact Name]",
            "rows[0][Century]",
            "rows[0][Origin]",
            "rows[0][Enchantment Level]",
            "rows[1][Artifact Name]",
            "rows[1][Century]",
            "rows[1][Origin]",
            "rows[1][Enchantment Level]",
            "rows[2][Artifact Name]",
            "rows[2][Century]",
            "rows[2][Origin]",
            "rows[2][Enchantment Level]",
            "rows[3][Artifact Name]",
            "rows[3][Century]",
            "rows[3][Origin]",
            "rows[3][Enchantment Level]",
            "rows[4][Artifact Name]",
            "rows[4][Century]",
            "rows[4][Origin]",
            "rows[4][Enchantment Level]",
            "rows[5][Artifact Name]",
            "rows[5][Century]",
            "rows[5][Origin]",
            "rows[5][Enchantment Level]",
            "rows[6][Artifact Name]",
            "rows[6][Century]",
            "rows[6][Origin]",
            "rows[6][Enchantment Level]",
            "rows[7][Artifact Name]",
            "rows[7][Century]",
            "rows[7][Origin]",
            "rows[7][Enchantment Level]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000231",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of enchanted garden plants.\n\nFeature Requirements:\n- Include a first row with column headers: \"Plant Name\", \"Blooming Season\", \"Height (cm)\", \"Sunlight Requirement\".\n- The \"Plant Name\" column must list unique plant names and appear as the first column.\n- \"Blooming Season\" should indicate one of the seasons: \"Spring\", \"Summer\", \"Autumn\", or \"Winter\" in the second column.\n- \"Height (cm)\" must contain integer values representing the plant's height in centimeters in the third column.\n- \"Sunlight Requirement\" should include descriptions such as \"Full Sun\", \"Partial Shade\", or \"Full Shade\" in the fourth column.\n- The CSV must contain exactly 8 rows of plant data (including the header row).\n- Each row should have exactly 4 comma-separated values without any additional or missing columns.\n- Ensure there are no extra blank lines or whitespace between the CSV rows.",
        "raw_output_metric": [
            "rows",
            "rows.length",
            "rows[0][0]",
            "rows[0][1]",
            "rows[0][2]",
            "rows[0][3]",
            "rows[*][0]",
            "rows[*][1]",
            "rows[*][2]",
            "rows[*][3]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000232",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional pet adoption agency record list.\n\nFeature Requirements:\n- Include a header row with the columns: \"Pet ID\", \"Species\", \"Age\", \"Gender\", \"Adoption Center\".\n- Each \"Pet ID\" must be a unique five-digit number.\n- The \"Species\" column should include only the following options: \"Dog\", \"Cat\", \"Bird\", \"Rabbit\", \"Fish\".\n- \"Age\" must be provided as a positive integer representing the pet's age in years.\n- The \"Gender\" column must contain either \"Male\" or \"Female\".\n- The \"Adoption Center\" column must list fictional center names paired with a city (e.g., \"Happy Tails - Austin\").\n- Make sure the CSV output contains exactly 8 rows, including the header row.\n- There should be no blank rows between any of the entries.\n- Every row, including the header, must contain exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Pet ID]",
            "rows[0][Species]",
            "rows[0][Age]",
            "rows[0][Gender]",
            "rows[0][Adoption Center]",
            "rows[1][Pet ID]",
            "rows[1][Species]",
            "rows[1][Age]",
            "rows[1][Gender]",
            "rows[1][Adoption Center]",
            "rows[2][Pet ID]",
            "rows[2][Species]",
            "rows[2][Age]",
            "rows[2][Gender]",
            "rows[2][Adoption Center]",
            "rows[3][Pet ID]",
            "rows[3][Species]",
            "rows[3][Age]",
            "rows[3][Gender]",
            "rows[3][Adoption Center]",
            "rows[4][Pet ID]",
            "rows[4][Species]",
            "rows[4][Age]",
            "rows[4][Gender]",
            "rows[4][Adoption Center]",
            "rows[5][Pet ID]",
            "rows[5][Species]",
            "rows[5][Age]",
            "rows[5][Gender]",
            "rows[5][Adoption Center]",
            "rows[6][Pet ID]",
            "rows[6][Species]",
            "rows[6][Age]",
            "rows[6][Gender]",
            "rows[6][Adoption Center]",
            "rows[7][Pet ID]",
            "rows[7][Species]",
            "rows[7][Age]",
            "rows[7][Gender]",
            "rows[7][Adoption Center]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000233",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional list of enchanted forest creatures.\n\nFeature Requirements:\n- Include a first row with column headers: \"Creature Name\", \"Age\", \"Magical Ability\", \"Habitat\", \"Affinity Element\".\n- Ensure that each \"Creature Name\" is unique and occupies the first column.\n- Each \"Age\" entry must be a positive integer representing the creature's age.\n- The \"Magical Ability\" column should contain specific powers such as \"Invisibility\", \"Telepathy\", or \"Healing\".\n- \"Habitat\" must include forest-related settings like \"Ancient Woods\" or \"Mystic Grove\", appearing in the fourth column.\n- \"Affinity Element\" should list elements such as \"Fire\", \"Water\", \"Earth\", or \"Air\" in the fifth column.\n- The CSV should contain exactly 12 rows of creature data, not including the header.\n- Ensure there are no blank rows between entries and each row has exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][0] - Should equal 'Creature Name' (header)",
            "rows[0][1] - Should equal 'Age' (header)",
            "rows[0][2] - Should equal 'Magical Ability' (header)",
            "rows[0][3] - Should equal 'Habitat' (header)",
            "rows[0][4] - Should equal 'Affinity Element' (header)",
            "rows[1] to rows[12] - Each row must have exactly 5 columns",
            "rows[1..12][0] - Each value must be a unique, non-empty creature name",
            "rows[1..12][1] - Each value must be a positive integer representing age",
            "rows[1..12][2] - Each value must be one of the specific magical abilities (e.g., 'Invisibility', 'Telepathy', 'Healing')",
            "rows[1..12][3] - Each value must be a forest-related habitat (e.g., 'Ancient Woods', 'Mystic Grove')",
            "rows[1..12][4] - Each value must be one of the elements (e.g., 'Fire', 'Water', 'Earth', 'Air')",
            "Total row count (excluding header) must equal 12 (i.e., 13 rows total including header)"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000234",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of futuristic robots designed for space exploration.\n\nFeature Requirements:\n- The CSV must begin with a header row containing the following columns in order: \"Robot ID\", \"Model Number\", \"Activation Year\", \"Assigned Mission\".\n- \"Robot ID\" should be a unique alphanumeric identifier starting with \"RBT\" followed by a three-digit number.\n- \"Model Number\" must be a string in the format \"X-###\", where \"X\" is an uppercase letter and \"###\" is a three-digit number.\n- \"Activation Year\" must be a four-digit integer between 2050 and 2100.\n- \"Assigned Mission\" should include mission names such as \"Mars Exploration\", \"Lunar Mining\", or \"Asteroid Survey\" and must be realistic space mission descriptions.\n- The CSV output should include exactly 7 rows of robot data, excluding the header row.\n- Ensure that there are no blank lines between any rows.\n- Every row, including the header, must have exactly 4 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000235",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of fictional tech startups.\n\nFeature Requirements:\n- The first row must contain exactly four column headers: \"Startup Name\", \"Year Founded\", \"Founder\", \"HQ City\".\n- \"Startup Name\" should list unique, fictional company names that occupy the first column.\n- \"Year Founded\" must be a four-digit integer (e.g., 1999) and appear in the second column.\n- \"Founder\" should include a realistic full name and must be placed in the third column.\n- \"HQ City\" should list well-known global cities in the fourth column.\n- The CSV output must include exactly 8 rows of startup data in addition to the header row.\n- Every row, including the header, must consist of exactly 4 comma-separated values.\n- No extra blank rows or additional data should be present in the CSV output.",
        "raw_output_metric": [
            "rows[0][0]",
            "rows[0][1]",
            "rows[0][2]",
            "rows[0][3]",
            "rows[1][0]",
            "rows[1][1]",
            "rows[1][2]",
            "rows[1][3]",
            "rows[2][0]",
            "rows[2][1]",
            "rows[2][2]",
            "rows[2][3]",
            "rows[3][0]",
            "rows[3][1]",
            "rows[3][2]",
            "rows[3][3]",
            "rows[4][0]",
            "rows[4][1]",
            "rows[4][2]",
            "rows[4][3]",
            "rows[5][0]",
            "rows[5][1]",
            "rows[5][2]",
            "rows[5][3]",
            "rows[6][0]",
            "rows[6][1]",
            "rows[6][2]",
            "rows[6][3]",
            "rows[7][0]",
            "rows[7][1]",
            "rows[7][2]",
            "rows[7][3]",
            "rows[8][0]",
            "rows[8][1]",
            "rows[8][2]",
            "rows[8][3]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000236",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a list of enchanted forest creatures with detailed attributes.\n\nFeature Requirements:\n- Include a header row with exactly five columns: \"Creature Name\", \"Species\", \"Magical Ability\", \"Habitat\", \"Strength Level\".\n- Each \"Creature Name\" entry must be unique and placed in the first column.\n- The \"Species\" column should include predefined types such as \"Elf\", \"Orc\", \"Fairy\", \"Gnome\", or \"Dragon\".\n- The \"Magical Ability\" column must describe a single-word power like \"Invisibility\", \"Healing\", or \"Shapeshifting\".\n- The \"Habitat\" column should contain one of these specific locations: \"Forest\", \"Cave\", or \"Mountain\".\n- The \"Strength Level\" column should include an integer value between 1 and 100.\n- The CSV must contain exactly 12 rows of creature data, following the header row.\n- Ensure that each row has exactly five comma-separated values with no extra spaces or blank lines.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000237",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided narrative about enchanted relics into a CSV representation of a fictional relic catalog.\n\nFeature Requirements:\n- Include a first row with column headers: \"Relic Name\", \"Mythical Origin\", \"Mystic Power Level\", \"Historical Period\".\n- Ensure all relic names are unique and appear in the first column under the \"Relic Name\" header.\n- Each \"Mystic Power Level\" must be a positive integer, occupying the third column.\n- The \"Mythical Origin\" column should include names such as \"Celtic\", \"Egyptian\", \"Sumerian\", etc.\n- \"Historical Period\" should list one of the following exactly: \"Ancient\", \"Medieval\", \"Renaissance\", \"Modern\" in the fourth column.\n- The CSV should contain exactly 9 rows of data, including the header row.\n- Each row, including the header, should have exactly 4 comma-separated values.\n- No blank rows should appear between any entries.\n- Every relic entry must be supported by random creative details that do not repeat.",
        "raw_output_metric": [
            "rows[0][0] == 'Relic Name'",
            "rows[0][1] == 'Mythical Origin'",
            "rows[0][2] == 'Mystic Power Level'",
            "rows[0][3] == 'Historical Period'",
            "rows[*][0]  // Each relic name must be present and unique",
            "rows[*][1]  // Must be one of the allowed origins (e.g., 'Celtic', 'Egyptian', 'Sumerian', etc.)",
            "rows[*][2]  // Must be a positive integer representing Mystic Power Level",
            "rows[*][3]  // Must be exactly one of: 'Ancient', 'Medieval', 'Renaissance', 'Modern'",
            "Total row count == 9  // Exactly 9 rows including the header",
            "Each row must contain exactly 4 comma-separated values"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000238",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an intergalactic spaceship fleet.\n\nFeature Requirements:\n- Include a first row with column headers: \"Ship Name\", \"Engine Type\", \"Captain\", \"Crew Size\", \"Planet of Origin\".\n- Each spaceship name in the first column must be unique and reflect futuristic or fantastical naming.\n- The \"Engine Type\" column should only contain one of the following values: \"Ion\", \"Warp\", \"Fusion\", or \"Antimatter\".\n- For the \"Captain\" column, provide a plausible human name in each row.\n- \"Crew Size\" must be a positive integer indicating the number of crew members.\n- The \"Planet of Origin\" column should list names of planets, drawing from both real-world and fictional settings.\n- The CSV must consist of exactly 8 rows in total, including the header row.\n- Ensure there are no blank rows or extra spaces; each row must have exactly 5 comma-separated values.\n- The output should exclusively contain the CSV content with no additional text or formatting.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000239",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of futuristic vehicle profiles.\n\nFeature Requirements:\n- Include a first row with column headers: \"Vehicle Model\", \"Year\", \"Type\", \"Manufacturer\".\n- Each \"Vehicle Model\" entry must be unique and appear in the first column.\n- The \"Year\" column should contain a 4-digit number representing the model year for each vehicle.\n- The \"Type\" column must have one of these exact entries: \"Electric\", \"Hybrid\", \"Gasoline\", \"Autonomous\".\n- The \"Manufacturer\" column should list a fictional tech company name that sounds modern.\n- The CSV should include exactly 8 rows of vehicle data, not counting the header row.\n- There should be no extra spaces around the commas or any blank rows between the entries.\n- Ensure that each row contains exactly 4 comma-separated values corresponding to the headers.",
        "raw_output_metric": [
            "rows[0][Vehicle Model]",
            "rows[0][Year]",
            "rows[0][Type]",
            "rows[0][Manufacturer]",
            "rows[1][Vehicle Model]",
            "rows[1][Year]",
            "rows[1][Type]",
            "rows[1][Manufacturer]",
            "rows[2][Vehicle Model]",
            "rows[2][Year]",
            "rows[2][Type]",
            "rows[2][Manufacturer]",
            "rows[3][Vehicle Model]",
            "rows[3][Year]",
            "rows[3][Type]",
            "rows[3][Manufacturer]",
            "rows[4][Vehicle Model]",
            "rows[4][Year]",
            "rows[4][Type]",
            "rows[4][Manufacturer]",
            "rows[5][Vehicle Model]",
            "rows[5][Year]",
            "rows[5][Type]",
            "rows[5][Manufacturer]",
            "rows[6][Vehicle Model]",
            "rows[6][Year]",
            "rows[6][Type]",
            "rows[6][Manufacturer]",
            "rows[7][Vehicle Model]",
            "rows[7][Year]",
            "rows[7][Type]",
            "rows[7][Manufacturer]",
            "rows[8][Vehicle Model]",
            "rows[8][Year]",
            "rows[8][Type]",
            "rows[8][Manufacturer]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000240",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a futuristic spaceship mission schedule.\n\nFeature Requirements:\n- The first row must include the following column headers: \"Mission Name\", \"Launch Year\", \"Destination\", \"Commander\", \"Crew Size\".\n- All \"Mission Name\" entries must be unique and consist of two capitalized words (e.g., \"Celestial Journey\").\n- Each \"Launch Year\" must be a four-digit integer between 2050 and 2100.\n- The \"Destination\" column must include fictional space locales such as \"Zephyria\" or \"Nova Prime\".\n- Include exactly 8 rows of mission data following the header row.\n- The \"Commander\" field must contain unique proper names and appear in the fourth column.\n- Each \"Crew Size\" entry must be an integer between 4 and 15, positioned in the fifth column.\n- Ensure there are no blank rows between entries and that each row, including the header, has exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Mission Name]",
            "rows[0][Launch Year]",
            "rows[0][Destination]",
            "rows[0][Commander]",
            "rows[0][Crew Size]",
            "rows[1][Mission Name]",
            "rows[1][Launch Year]",
            "rows[1][Destination]",
            "rows[1][Commander]",
            "rows[1][Crew Size]",
            "rows[2][Mission Name]",
            "rows[2][Launch Year]",
            "rows[2][Destination]",
            "rows[2][Commander]",
            "rows[2][Crew Size]",
            "rows[3][Mission Name]",
            "rows[3][Launch Year]",
            "rows[3][Destination]",
            "rows[3][Commander]",
            "rows[3][Crew Size]",
            "rows[4][Mission Name]",
            "rows[4][Launch Year]",
            "rows[4][Destination]",
            "rows[4][Commander]",
            "rows[4][Crew Size]",
            "rows[5][Mission Name]",
            "rows[5][Launch Year]",
            "rows[5][Destination]",
            "rows[5][Commander]",
            "rows[5][Crew Size]",
            "rows[6][Mission Name]",
            "rows[6][Launch Year]",
            "rows[6][Destination]",
            "rows[6][Commander]",
            "rows[6][Crew Size]",
            "rows[7][Mission Name]",
            "rows[7][Launch Year]",
            "rows[7][Destination]",
            "rows[7][Commander]",
            "rows[7][Crew Size]",
            "rows[8][Mission Name]",
            "rows[8][Launch Year]",
            "rows[8][Destination]",
            "rows[8][Commander]",
            "rows[8][Crew Size]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000241",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a fictional recipe list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Recipe Name\", \"Cuisine\", \"Ingredients Count\", \"Preparation Time\".\n- Ensure each recipe name in the \"Recipe Name\" column is unique.\n- The \"Cuisine\" column must include distinct cuisine types such as \"Italian\", \"Mexican\", \"Chinese\", etc.\n- The \"Ingredients Count\" column should contain an integer representing the number of ingredients.\n- The \"Preparation Time\" column should have an integer value indicating minutes required.\n- The CSV should contain exactly 10 rows of recipe data, excluding the header.\n- Ensure there are no blank rows between the CSV entries.\n- Each row, including the header, should contain exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Recipe Name]",
            "rows[0][Cuisine]",
            "rows[0][Ingredients Count]",
            "rows[0][Preparation Time]",
            "rows[1][Recipe Name]",
            "rows[1][Cuisine]",
            "rows[1][Ingredients Count]",
            "rows[1][Preparation Time]",
            "rows[2][Recipe Name]",
            "rows[2][Cuisine]",
            "rows[2][Ingredients Count]",
            "rows[2][Preparation Time]",
            "rows[3][Recipe Name]",
            "rows[3][Cuisine]",
            "rows[3][Ingredients Count]",
            "rows[3][Preparation Time]",
            "rows[4][Recipe Name]",
            "rows[4][Cuisine]",
            "rows[4][Ingredients Count]",
            "rows[4][Preparation Time]",
            "rows[5][Recipe Name]",
            "rows[5][Cuisine]",
            "rows[5][Ingredients Count]",
            "rows[5][Preparation Time]",
            "rows[6][Recipe Name]",
            "rows[6][Cuisine]",
            "rows[6][Ingredients Count]",
            "rows[6][Preparation Time]",
            "rows[7][Recipe Name]",
            "rows[7][Cuisine]",
            "rows[7][Ingredients Count]",
            "rows[7][Preparation Time]",
            "rows[8][Recipe Name]",
            "rows[8][Cuisine]",
            "rows[8][Ingredients Count]",
            "rows[8][Preparation Time]",
            "rows[9][Recipe Name]",
            "rows[9][Cuisine]",
            "rows[9][Ingredients Count]",
            "rows[9][Preparation Time]",
            "rows[10][Recipe Name]",
            "rows[10][Cuisine]",
            "rows[10][Ingredients Count]",
            "rows[10][Preparation Time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000242",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional planetary system.\n\nFeature Requirements:\n- Include a first row with column headers: \"Planet Name\", \"Diameter (km)\", \"Mass (10^24 kg)\", \"Atmosphere\", \"Moon Count\".\n- Ensure all planet names are unique and appear under the \"Planet Name\" header.\n- Each \"Diameter (km)\" entry must be a positive integer representing the planet's diameter.\n- Each \"Mass (10^24 kg)\" entry should be a positive number, including decimal values if necessary.\n- The \"Atmosphere\" column must include one of the following options: \"None\", \"Thin\", \"Moderate\", or \"Thick\".\n- The \"Moon Count\" column should list a non-negative integer reflecting the number of moons orbiting the planet.\n- The CSV must contain exactly 8 rows of planet data following the header.\n- Ensure the CSV output does not include any blank rows between entries.\n- Each row, including the header, should have exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Planet Name]",
            "rows[0][Diameter (km)]",
            "rows[0][Mass (10^24 kg)]",
            "rows[0][Atmosphere]",
            "rows[0][Moon Count]",
            "rows[1][Planet Name]",
            "rows[1][Diameter (km)]",
            "rows[1][Mass (10^24 kg)]",
            "rows[1][Atmosphere]",
            "rows[1][Moon Count]",
            "rows[2][Planet Name]",
            "rows[2][Diameter (km)]",
            "rows[2][Mass (10^24 kg)]",
            "rows[2][Atmosphere]",
            "rows[2][Moon Count]",
            "rows[3][Planet Name]",
            "rows[3][Diameter (km)]",
            "rows[3][Mass (10^24 kg)]",
            "rows[3][Atmosphere]",
            "rows[3][Moon Count]",
            "rows[4][Planet Name]",
            "rows[4][Diameter (km)]",
            "rows[4][Mass (10^24 kg)]",
            "rows[4][Atmosphere]",
            "rows[4][Moon Count]",
            "rows[5][Planet Name]",
            "rows[5][Diameter (km)]",
            "rows[5][Mass (10^24 kg)]",
            "rows[5][Atmosphere]",
            "rows[5][Moon Count]",
            "rows[6][Planet Name]",
            "rows[6][Diameter (km)]",
            "rows[6][Mass (10^24 kg)]",
            "rows[6][Atmosphere]",
            "rows[6][Moon Count]",
            "rows[7][Planet Name]",
            "rows[7][Diameter (km)]",
            "rows[7][Mass (10^24 kg)]",
            "rows[7][Atmosphere]",
            "rows[7][Moon Count]",
            "rows[8][Planet Name]",
            "rows[8][Diameter (km)]",
            "rows[8][Mass (10^24 kg)]",
            "rows[8][Atmosphere]",
            "rows[8][Moon Count]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000243",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a list of mystical planets with their unique properties.\n\nFeature Requirements:\n- The first row must be a header with the columns \"Planet Name\", \"Diameter (km)\", \"Atmosphere\", \"Ring Count\", \"Orbital Period (years)\".\n- Each \"Planet Name\" should be unique and appear in the first column.\n- \"Diameter (km)\" must be a positive integer representing the planet's diameter in kilometers.\n- The \"Atmosphere\" column must only include one of the following values: \"Gas\", \"Liquid\", \"Solid\", \"None\".\n- \"Ring Count\" must consist of non-negative integers indicating the number of rings.\n- \"Orbital Period (years)\" should include a floating-point number indicating how long the planet takes to orbit its star in years.\n- The CSV must contain exactly 8 rows, including the header row.\n- There should be no blank lines or extra spaces in the CSV output.\n- Each row, including the header, must have exactly 5 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Planet Name]",
            "rows[0][Diameter (km)]",
            "rows[0][Atmosphere]",
            "rows[0][Ring Count]",
            "rows[0][Orbital Period (years)]",
            "rows[1][Planet Name]",
            "rows[1][Diameter (km)]",
            "rows[1][Atmosphere]",
            "rows[1][Ring Count]",
            "rows[1][Orbital Period (years)]",
            "rows[2][Planet Name]",
            "rows[2][Diameter (km)]",
            "rows[2][Atmosphere]",
            "rows[2][Ring Count]",
            "rows[2][Orbital Period (years)]",
            "rows[3][Planet Name]",
            "rows[3][Diameter (km)]",
            "rows[3][Atmosphere]",
            "rows[3][Ring Count]",
            "rows[3][Orbital Period (years)]",
            "rows[4][Planet Name]",
            "rows[4][Diameter (km)]",
            "rows[4][Atmosphere]",
            "rows[4][Ring Count]",
            "rows[4][Orbital Period (years)]",
            "rows[5][Planet Name]",
            "rows[5][Diameter (km)]",
            "rows[5][Atmosphere]",
            "rows[5][Ring Count]",
            "rows[5][Orbital Period (years)]",
            "rows[6][Planet Name]",
            "rows[6][Diameter (km)]",
            "rows[6][Atmosphere]",
            "rows[6][Ring Count]",
            "rows[6][Orbital Period (years)]",
            "rows[7][Planet Name]",
            "rows[7][Diameter (km)]",
            "rows[7][Atmosphere]",
            "rows[7][Ring Count]",
            "rows[7][Orbital Period (years)]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000244",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of an intergalactic colony directory.\n\nFeature Requirements:\n- The first row must contain column headers: \"Colony Name\", \"Founded Year\", \"Population (Thousands)\", \"Primary Industry\", \"Sector\".\n- Each colony name in the first column must be unique.\n- The \"Founded Year\" entries must be four-digit integers.\n- The \"Population (Thousands)\" column should only include integer values representing population in thousands.\n- The \"Primary Industry\" column must feature industries such as \"Mining\", \"Agriculture\", \"Technology\", or \"Research\".\n- The \"Sector\" column should list fictional sector names, such as \"Alpha\", \"Beta\", \"Gamma\", etc.\n- The CSV should contain exactly 12 rows of colony data (including the header that is row one).\n- There must be no blank rows between CSV entries.\n- Each row must have exactly 5 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000245",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a futuristic robot inventory list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Model Identifier\", \"Activation Year\", \"Function\", \"Origin Planet\", \"Energy Source\".\n- Ensure that all model identifiers are unique and consist of exactly 8 alphanumeric characters.\n- Each \"Activation Year\" entry must be a four-digit number ranging from 2050 to 2100 inclusive.\n- The \"Function\" column must include roles like \"Maintenance\", \"Combat\", \"Exploration\", or \"Research\" for each robot.\n- The \"Origin Planet\" column should contain planet names such as \"Mars\", \"Venus\", or fictional names like \"Nova Prime\"; all entries must be clear and non-empty.\n- Each \"Energy Source\" entry should be one of the following: \"Solar\", \"Nuclear\", \"Hydrogen\", or \"Electric\", with no other values allowed.\n- The CSV should contain exactly 12 rows in total, including the header row.\n- Each row must have exactly 5 comma-separated values without any blank rows in between.",
        "raw_output_metric": [
            "rows[0][Model Identifier]",
            "rows[0][Activation Year]",
            "rows[0][Function]",
            "rows[0][Origin Planet]",
            "rows[0][Energy Source]",
            "rows[1][Model Identifier]",
            "rows[1][Activation Year]",
            "rows[1][Function]",
            "rows[1][Origin Planet]",
            "rows[1][Energy Source]",
            "rows[2][Model Identifier]",
            "rows[2][Activation Year]",
            "rows[2][Function]",
            "rows[2][Origin Planet]",
            "rows[2][Energy Source]",
            "rows[3][Model Identifier]",
            "rows[3][Activation Year]",
            "rows[3][Function]",
            "rows[3][Origin Planet]",
            "rows[3][Energy Source]",
            "rows[4][Model Identifier]",
            "rows[4][Activation Year]",
            "rows[4][Function]",
            "rows[4][Origin Planet]",
            "rows[4][Energy Source]",
            "rows[5][Model Identifier]",
            "rows[5][Activation Year]",
            "rows[5][Function]",
            "rows[5][Origin Planet]",
            "rows[5][Energy Source]",
            "rows[6][Model Identifier]",
            "rows[6][Activation Year]",
            "rows[6][Function]",
            "rows[6][Origin Planet]",
            "rows[6][Energy Source]",
            "rows[7][Model Identifier]",
            "rows[7][Activation Year]",
            "rows[7][Function]",
            "rows[7][Origin Planet]",
            "rows[7][Energy Source]",
            "rows[8][Model Identifier]",
            "rows[8][Activation Year]",
            "rows[8][Function]",
            "rows[8][Origin Planet]",
            "rows[8][Energy Source]",
            "rows[9][Model Identifier]",
            "rows[9][Activation Year]",
            "rows[9][Function]",
            "rows[9][Origin Planet]",
            "rows[9][Energy Source]",
            "rows[10][Model Identifier]",
            "rows[10][Activation Year]",
            "rows[10][Function]",
            "rows[10][Origin Planet]",
            "rows[10][Energy Source]",
            "rows[11][Model Identifier]",
            "rows[11][Activation Year]",
            "rows[11][Function]",
            "rows[11][Origin Planet]",
            "rows[11][Energy Source]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000246",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nCreate a CSV representation listing enchanted artifacts discovered in a mythical world.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Power Level\", \"Year Discovered\", \"Enchantment\", \"Origin Kingdom\".\n- Ensure the \"Artifact Name\" column contains unique names for each artifact.\n- The \"Power Level\" column must display integer values representing the artifact's strength.\n- The \"Year Discovered\" column should include a valid four-digit year for each entry.\n- The \"Enchantment\" column must list one defined magical ability per artifact, such as \"Invisibility\", \"Wisdom\", or \"Fortitude\".\n- The \"Origin Kingdom\" column should contain names of distinct fictional kingdoms.\n- The CSV should contain exactly 8 rows of artifact data in addition to the header row.\n- Ensure that there are no blank rows between entries.\n- Each row, including the header, must have exactly 5 comma-separated values.",
        "raw_output_metric": [],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000247",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided event data into a CSV representation of an international conference schedule.\n\nFeature Requirements:\n- The CSV must start with a header row containing: \"Session Title\", \"Speaker\", \"Time Slot\", \"Room\".\n- Include exactly 15 rows of session data, each following the header.\n- Each \"Session Title\" must be unique and formatted as a brief session name.\n- The \"Speaker\" column should list full names typical of professionals.\n- \"Time Slot\" entries must be formatted as hour ranges (e.g., \"09:00-10:00\") using a 24-hour clock.\n- \"Room\" entries must be numerical values (e.g., 101, 202) and placed in the fourth column.\n- Ensure there are no blank lines between CSV rows.\n- Every row, including the header, must contain exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Session Title]",
            "rows[0][Speaker]",
            "rows[0][Time Slot]",
            "rows[0][Room]",
            "rows[1][Session Title]",
            "rows[1][Speaker]",
            "rows[1][Time Slot]",
            "rows[1][Room]",
            "rows[2][Session Title]",
            "rows[2][Speaker]",
            "rows[2][Time Slot]",
            "rows[2][Room]",
            "rows[3][Session Title]",
            "rows[3][Speaker]",
            "rows[3][Time Slot]",
            "rows[3][Room]",
            "rows[4][Session Title]",
            "rows[4][Speaker]",
            "rows[4][Time Slot]",
            "rows[4][Room]",
            "rows[5][Session Title]",
            "rows[5][Speaker]",
            "rows[5][Time Slot]",
            "rows[5][Room]",
            "rows[6][Session Title]",
            "rows[6][Speaker]",
            "rows[6][Time Slot]",
            "rows[6][Room]",
            "rows[7][Session Title]",
            "rows[7][Speaker]",
            "rows[7][Time Slot]",
            "rows[7][Room]",
            "rows[8][Session Title]",
            "rows[8][Speaker]",
            "rows[8][Time Slot]",
            "rows[8][Room]",
            "rows[9][Session Title]",
            "rows[9][Speaker]",
            "rows[9][Time Slot]",
            "rows[9][Room]",
            "rows[10][Session Title]",
            "rows[10][Speaker]",
            "rows[10][Time Slot]",
            "rows[10][Room]",
            "rows[11][Session Title]",
            "rows[11][Speaker]",
            "rows[11][Time Slot]",
            "rows[11][Room]",
            "rows[12][Session Title]",
            "rows[12][Speaker]",
            "rows[12][Time Slot]",
            "rows[12][Room]",
            "rows[13][Session Title]",
            "rows[13][Speaker]",
            "rows[13][Time Slot]",
            "rows[13][Room]",
            "rows[14][Session Title]",
            "rows[14][Speaker]",
            "rows[14][Time Slot]",
            "rows[14][Room]",
            "rows[15][Session Title]",
            "rows[15][Speaker]",
            "rows[15][Time Slot]",
            "rows[15][Room]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000248",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a magical artifact inventory.\n\nFeature Requirements:\n- Include a first row with column headers: \"Artifact Name\", \"Power Level\", \"Material\", \"Era\".\n- Ensure all artifact names are unique and listed in the first column under the \"Artifact Name\" header.\n- Each \"Power Level\" entry must be an integer between 1 and 100 and occupy the second column.\n- The \"Material\" column should include terms like \"Crystal\", \"Steel\", \"Wood\", etc.\n- The \"Era\" column must contain historical periods such as \"Ancient\", \"Medieval\", or \"Modern\" in the fourth column.\n- The CSV should contain exactly 7 rows of artifact data following the header row.\n- Ensure the CSV output does not include any blank rows between entries.\n- Each row, including the header, should consist of exactly 4 comma-separated values.",
        "raw_output_metric": [
            "rows[0][Artifact Name]",
            "rows[0][Power Level]",
            "rows[0][Material]",
            "rows[0][Era]",
            "rows[1][Artifact Name]",
            "rows[1][Power Level]",
            "rows[1][Material]",
            "rows[1][Era]",
            "rows[2][Artifact Name]",
            "rows[2][Power Level]",
            "rows[2][Material]",
            "rows[2][Era]",
            "rows[3][Artifact Name]",
            "rows[3][Power Level]",
            "rows[3][Material]",
            "rows[3][Era]",
            "rows[4][Artifact Name]",
            "rows[4][Power Level]",
            "rows[4][Material]",
            "rows[4][Era]",
            "rows[5][Artifact Name]",
            "rows[5][Power Level]",
            "rows[5][Material]",
            "rows[5][Era]",
            "rows[6][Artifact Name]",
            "rows[6][Power Level]",
            "rows[6][Material]",
            "rows[6][Era]",
            "rows[7][Artifact Name]",
            "rows[7][Power Level]",
            "rows[7][Material]",
            "rows[7][Era]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "task_id": "000249",
        "input_type": "Text",
        "output_type": "CSV",
        "rendering": false,
        "query": "Please output CSV:\n\nTask:\nConvert the provided text into a CSV representation of a summer music festival schedule.\n\nFeature Requirements:\n- Include a first row with column headers: \"Band Name\", \"Start Time\", \"End Time\", \"Stage\".\n- Ensure all band names are unique and appear in the first column under the \"Band Name\" header.\n- Each \"Start Time\" and \"End Time\" must be in 24-hour time format (HH:MM) and appear in their respective columns.\n- The \"Stage\" column should list stage names such as \"Main\", \"Side\", or \"Acoustic\" and must be included in the fourth column.\n- The CSV should contain exactly 12 rows of schedule data (excluding the header row).\n- Ensure the CSV output does not include any empty lines between rows.\n- Each row, including the header, should have exactly 4 comma-separated values.\n- The schedule times should be realistic and non-overlapping for the same stage on a typical festival day.",
        "raw_output_metric": [
            "rows[0][Band Name]",
            "rows[0][Start Time]",
            "rows[0][End Time]",
            "rows[0][Stage]",
            "rows[1..12][Band Name]",
            "rows[1..12][Start Time]",
            "rows[1..12][End Time]",
            "rows[1..12][Stage]",
            "Total row count equals 13 (1 header row + 12 schedule rows)"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000300",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDevelop a webpage that presents a weekly travel itinerary summary.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Weekly Travel Itinerary\".\n- Add a <div> element below the title containing a paragraph with exactly 150 characters describing the travel destination.\n- Place a horizontal line (<hr>) immediately below the descriptive paragraph to divide the sections.\n- Construct a three-column layout beneath the horizontal line, ensuring each column occupies exactly one-third of the available width.\n- In the left column, include a bulleted list (<ul>) with 4 landmarks, with each list item displayed in italics.\n- In the middle column, insert a numbered list (<ol>) containing 4 travel dates.\n- In the right column, provide a numbered list (<ol>) featuring 4 booking references, with each reference title shown in bold.\n- Ensure that each list is clearly delineated with appropriate HTML list tags and that the content meets the specified character and style requirements.",
        "raw_output_metric": [
            "Weekly Travel Itinerary",
            "<h1>",
            "</h1>",
            "<div>",
            "</div>",
            "<p>",
            "</p>",
            "<hr>",
            "<ul>",
            "</ul>",
            "<ol>",
            "</ol>",
            "<li>",
            "</li>",
            "<i>",
            "</i>",
            "<b>",
            "</b>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Weekly Travel Itinerary",
            "How many characters does the travel destination description have?": "150",
            "What appears immediately below the descriptive paragraph to separate the sections?": "A horizontal line",
            "How many columns are present in the layout below the horizontal line?": "3",
            "What does the left column display and how many items does it contain?": "A bulleted list of 4 landmarks, each in italics",
            "What type of list is shown in the middle column and how many items does it include?": "A numbered list of 4 travel dates",
            "What content is provided in the right column and how are the list items styled?": "A numbered list of 4 booking references with each title in bold"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000301",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDevelop a dashboard webpage that presents an overview of a fictional sales report.\n\nFeature Requirements:\n- Include a top banner using an <h2> element with the text \"Sales Dashboard\" and center it at the top.\n- Place a centered horizontal line (<hr>) immediately below the header.\n- Create a container beneath the horizontal line divided into three equal-width columns.\n- In the left column, include a short paragraph (no more than 80 characters) summarizing the monthly performance.\n- In the middle column, add an ordered list with 4 items that outline the quarterly targets.\n- In the right column, display an unordered list with 4 bullet points showing key sales metrics, each styled with bold text.\n- Separate the three columns with vertical line indicators using <span> elements that have a defined border.\n- Conclude the page with a footer using a <footer> element that contains centered text stating \"End of Report\".",
        "raw_output_metric": [
            "<h2>",
            "Sales Dashboard",
            "</h2>",
            "<hr>",
            "<div",
            "<p>",
            "<ol>",
            "<li>",
            "</ol>",
            "<ul>",
            "<b>",
            "<li>",
            "</ul>",
            "<span",
            "<footer>",
            "End of Report",
            "</footer>"
        ],
        "VQA": {
            "What text is displayed in the top banner?": "Sales Dashboard",
            "Is the top banner centered at the top of the page?": "Yes",
            "What element appears immediately below the top header?": "A horizontal line",
            "How many equal-width columns are in the container?": "3",
            "Does the left column contain a short paragraph summarizing monthly performance?": "Yes",
            "How many items are listed in the ordered list in the middle column?": "4",
            "How many bullet points are shown in the right column?": "4",
            "Are the bullet points in the right column styled in bold text?": "Yes",
            "Are vertical lines used to separate the three columns?": "Yes",
            "What centered text is displayed in the footer?": "End of Report"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000302",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a dynamic event announcement webpage for an upcoming tech conference.\n\nFeature Requirements:\n- Place a main title at the top-center using an <h1> element with the text \"Tech Conference 2024\".\n- Under the title, insert a horizontal line (<hr>) to separate the header from the content.\n- Add a <div> element right below the horizontal line containing a short paragraph of no more than 100 characters describing the event.\n- Create a three-column layout below the paragraph where each column occupies approximately 33% of the total width.\n- In the left column, add a bulleted list with 3 session topics, with each list item using underlined text.\n- In the center column, insert a numbered list detailing 3 keynote speakers, ensuring each speaker's name is bolded.\n- In the right column, include a single <div> element that briefly summarizes the registration process in fewer than 90 characters.\n- Insert a second horizontal line (<hr>) below the three-column layout to visually separate the content.\n- Place a centered <footer> element at the bottom with the text \"Reserve Your Seat Today\".",
        "raw_output_metric": [
            "<h1>Tech Conference 2024</h1>",
            "<hr>",
            "<div>",
            "<p>",
            "<ul>",
            "<li>",
            "<u>",
            "<ol>",
            "<b>",
            "<footer>Reserve Your Seat Today</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Tech Conference 2024",
            "Is there a horizontal line separating the header from the rest of the content?": "Yes",
            "How is the event description text described below the header limited in length?": "Fewer than 100 characters",
            "How many columns are present in the main content layout?": "3",
            "How many session topics are listed in the left column?": "3",
            "Are the session topics on the left column underlined?": "Yes",
            "How many keynote speakers are listed in the center column?": "3",
            "Are the keynote speakers' names presented in bold?": "Yes",
            "What is the text displayed in the footer at the bottom?": "Reserve Your Seat Today"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000303",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a basic webpage showcasing a city travel guide.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"City Explorer\".\n- Add a top banner using a <div> that contains a short, exactly 80-character introduction describing the city.\n- Insert a horizontal line (<hr>) immediately below the title to separate it from the content.\n- Create a three-column layout directly under the horizontal line, with each column equally occupying 33% of the available width.\n- In the left column, include an ordered list with 3 must-visit landmarks, each landmark’s name displayed in bold.\n- In the middle column, add a centered paragraph with exactly 60 characters offering a travel tip.\n- In the right column, include an unordered list with 3 local cuisines, each cuisine listed in italics.\n- Add a footer at the bottom as a <div> element featuring a centered paragraph with the text \"Discover More\".",
        "raw_output_metric": [
            "City Explorer",
            "Discover More",
            "<h1>",
            "</h1>",
            "<div>",
            "</div>",
            "<hr>",
            "<ol>",
            "</ol>",
            "<li>",
            "</li>",
            "<strong>",
            "</strong>",
            "<p>",
            "</p>",
            "<ul>",
            "</ul>",
            "<i>",
            "</i>",
            "33%"
        ],
        "VQA": {
            "What is the centered title text displayed at the top of the page?": "City Explorer",
            "How many characters does the introduction banner contain exactly?": "80",
            "How many columns are shown directly under the horizontal line?": "3",
            "How many items are in the left column's ordered list?": "3",
            "Are the landmark names in the left column styled in bold?": "Yes",
            "What is the exact character count of the travel tip in the middle column?": "60",
            "How many items are in the right column's unordered list?": "3",
            "Are the local cuisine names in the right column shown in italics?": "Yes",
            "What text is displayed in the footer at the bottom of the page?": "Discover More"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000304",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a simple webpage presenting a travel itinerary for a road trip.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Road Trip Itinerary\".\n- Display a <p> element immediately below the title containing a brief journey overview limited to 80 characters.\n- Use a horizontal line (<hr>) to clearly separate the title section from the itinerary details.\n- Create a three-column layout beneath the horizontal line, where each column occupies exactly 33.33% of the width.\n- In the left column, include an unordered list with 4 destination names, each styled in italics.\n- In the center column, feature a numbered list with 3 time checkpoints, with each item beginning with the time in bold, followed by a short description.\n- In the right column, display a <div> element that presents a concise note on travel preparations.\n- Enclose each column within a visible border to distinguish them from each other.\n- Ensure that all textual content is plain and does not exceed the specified character limits.",
        "raw_output_metric": [
            "Road Trip Itinerary",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "33.33%",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "</li>",
            "</ul>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "</li>",
            "</ol>",
            "<div>",
            "</div>",
            "border"
        ],
        "VQA": {
            "What is the text of the centered heading at the top of the page?": "Road Trip Itinerary",
            "What element immediately follows the heading?": "A paragraph containing a brief journey overview (max 80 characters)",
            "Which element is used to separate the title section from the itinerary details?": "A horizontal line",
            "How many columns are displayed below the horizontal line?": "3",
            "What percentage of the width does each column occupy?": "33.33%",
            "In the left column, how many destination names are listed?": "4",
            "How are the destination names styled in the left column?": "Italics",
            "In the center column, how many time checkpoints are included?": "3",
            "What formatting is applied to the time values in the center column list?": "They are in bold",
            "What is displayed in the right column?": "A concise note on travel preparations"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000305",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign an interactive travel itinerary page for a weekend getaway trip.\n\nFeature Requirements:\n- Place a centered <h2> element at the top with the text \"Weekend Getaway\".\n- Insert a horizontal line (<hr>) directly below the title to separate the header from the main content.\n- Create a <div> element beneath the line containing a brief description of the destination in no more than 120 characters.\n- Establish a two-column layout below the description with each column occupying exactly 50% of the available space.\n- In the left column, include a bulleted list (<ul>) with 4 recommended landmarks, each presented in italic font.\n- In the right column, include a numbered list (<ol>) with 4 planned activities, with each activity’s title displayed in bold font.\n- Add a footer at the bottom featuring a centered small text reading \"Plan your adventure now\".",
        "raw_output_metric": [
            "Weekend Getaway",
            "<h2>",
            "<hr>",
            "<div>",
            "50%",
            "<ul>",
            "<ol>",
            "<li>",
            "<i>",
            "<b>",
            "Plan your adventure now",
            "<footer>"
        ],
        "VQA": {
            "What is the centered title text displayed at the top?": "Weekend Getaway",
            "Is there a horizontal line separating the title from the main content?": "Yes",
            "Is a brief destination description shown below the line and within 120 characters?": "Yes",
            "How many columns are displayed in the layout beneath the description?": "2",
            "How many recommended landmarks are listed in the left column?": "4",
            "Are the landmarks displayed in italic style?": "Yes",
            "How many planned activities are listed in the right column?": "4",
            "Are the titles of the planned activities displayed in bold?": "Yes",
            "What is the text shown in the footer?": "Plan your adventure now"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000306",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a single-page landing site for a new app called \"Pulse\".\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Welcome to Pulse\".\n- Add a <p> element immediately below the title containing an 80-character tagline describing the app.\n- Insert a horizontal line (<hr>) to separate the header from the main content.\n- Create a three-column layout below the <hr>, with each column occupying approximately 33.33% of the available width.\n- In the left column, include an unordered list with 3 app features, displaying each list item in italics.\n- In the center column, include an ordered list with 3 key benefits, ensuring the first word of each list item is in bold.\n- In the right column, include a paragraph featuring a call-to-action, with the phrase \"Join Today\" underlined.\n- Use borders on each column to clearly separate the sections.\n- Add a <footer> element at the bottom of the page displaying a copyright notice and the current year.\n- Specify that the overall page background should be light grey and the primary text color should be dark blue.",
        "raw_output_metric": [
            "<h1>",
            "Welcome to Pulse",
            "<p>",
            "<hr>",
            "<ul>",
            "<i>",
            "<ol>",
            "<b>",
            "<li>",
            "<u>",
            "Join Today",
            "<footer>",
            "Copyright",
            "2023",
            "lightgrey",
            "darkblue",
            "33.33%"
        ],
        "VQA": {
            "What is the centered title text at the top of the page?": "Welcome to Pulse",
            "How many columns are visible below the horizontal line?": "3",
            "What type of list is in the left column and how many items does it display?": "Unordered list with 3 items displayed in italics",
            "What type of list is in the center column and what special styling is used?": "Ordered list with 3 items where the first word of each item is bolded",
            "Which phrase in the right column is underlined as a call-to-action?": "Join Today",
            "What element is used to separate the header from the main content?": "A horizontal line",
            "What is the background color of the entire page?": "Light grey",
            "What is the primary text color on the page?": "Dark blue",
            "What does the footer display at the bottom of the page?": "A copyright notice and the current year",
            "How is the width distributed among the three columns?": "Each column occupies approximately 33.33% of the available width"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000307",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple webpage that advertises a new tech gadget.\n\nFeature Requirements:\n- Include a centered main heading using an <h1> element with the text \"TechNova Gadget\".\n- Place a horizontal line (<hr>) immediately below the main heading to divide the title from the content.\n- Add an <article> element directly underneath the horizontal line that contains a paragraph of 50 to 80 words describing the gadget's innovative features.\n- Create a two-column layout below the paragraph, ensuring each column exactly occupies 50% of the available width.\n- In the left column, include an unordered list (<ul>) with 4 items, each item describing a feature of the gadget, with the text in italics.\n- In the right column, provide a numbered list (<ol>) with 3 items, each item starting with a bold title that summarizes a key specification, followed by additional descriptive text.\n- Ensure the layout is structured so that both columns appear side by side on the same horizontal line.",
        "raw_output_metric": [
            "<h1>",
            "TechNova Gadget",
            "<hr>",
            "<article>",
            "<p>",
            "50%",
            "<ul>",
            "<li>",
            "<i>",
            "<ol>",
            "<b>"
        ],
        "VQA": {
            "What is the text displayed in the centered main heading?": "TechNova Gadget",
            "What element immediately appears below the main heading?": "Horizontal line",
            "What element contains a paragraph that describes the gadget's innovative features?": "Article",
            "How many words should the descriptive paragraph contain?": "50 to 80 words",
            "How is the space below the paragraph organized?": "It is divided into two columns that each take up 50% of the available width",
            "How many items are listed in the unordered list in the left column?": "4",
            "How is the text styled in the unordered list items in the left column?": "The text is in italics",
            "How many items are present in the numbered list in the right column?": "3",
            "What formatting is applied to the title at the beginning of each numbered list item in the right column?": "The title is bold"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000308",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDevelop a simple webpage displaying a fictional museum exhibition overview.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Museum Exhibition Overview\".\n- Display one <div> element directly beneath the title that holds a paragraph of 120 to 150 characters describing the exhibition.\n- Insert a horizontal line (<hr>) immediately after the descriptive paragraph.\n- Create a three-column layout below the horizontal line, each column occupying exactly 33.3% of the available width.\n- The left column must contain an ordered list with 4 key artifacts; each list item must begin with the artifact's name in bold.\n- The middle column should include a paragraph in italics that summarizes the contributions of the featured artists in exactly two sentences.\n- The right column is required to display an unordered list containing 4 event dates, each formatted as \"DD-MM-YYYY\".",
        "raw_output_metric": [
            "<h1>",
            "Museum Exhibition Overview",
            "<div>",
            "<hr>",
            "33.3%",
            "<ol>",
            "<li>",
            "<strong>",
            "<i>",
            "<ul>",
            "DD-MM-YYYY"
        ],
        "VQA": {
            "What is the text of the centered title at the top of the page?": "Museum Exhibition Overview",
            "How many characters should the exhibition description paragraph contain?": "Between 120 and 150 characters",
            "What element appears immediately after the exhibition description?": "A horizontal line",
            "How many columns are there in the layout below the horizontal line?": "3",
            "What percentage of the available width does each column occupy?": "33.3%",
            "How many key artifacts are listed in the left column?": "4",
            "Does each key artifact in the left column begin with its name in bold?": "Yes",
            "What style is applied to the paragraph in the middle column?": "Italics",
            "How many sentences does the middle column's paragraph contain?": "2",
            "What is the format of the event dates listed in the right column?": "DD-MM-YYYY"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000309",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a simple webpage inviting users to a community gardening event.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Green Thumb Gathering\".\n- Display a <div> element immediately below the title containing a short paragraph (maximum 100 characters) describing the event's purpose.\n- Insert a horizontal line (<hr>) to separate the title from the content below.\n- Create a two-column layout below the horizontal line, with the left column occupying 55% and the right column 45% of the available width.\n- The left column should contain an ordered list with 4 items outlining the event schedule, each item prefixed with a bold time.\n- The right column should include an unordered list with 3 bullet points listing the materials attendees should bring, with the material names in italics.\n- Include a footer at the bottom displaying the event date in a centered <div> element.\n- Ensure each element is clearly separated and structured as specified.",
        "raw_output_metric": [
            "<h1>",
            "Green Thumb Gathering",
            "<div>",
            "<hr>",
            "55%",
            "45%",
            "<ol>",
            "<li>",
            "<b>",
            "<ul>",
            "<i>",
            "<footer>"
        ],
        "VQA": {
            "What is the centered title text?": "Green Thumb Gathering",
            "How is the area below the title divided?": "A two-column layout",
            "What percentage width does the left column occupy?": "55%",
            "How many items are listed in the ordered schedule list in the left column?": "4",
            "Are the time entries in the schedule list displayed in bold?": "Yes",
            "How many bullet points are shown in the material list in the right column?": "3",
            "How are the material names styled in the unordered list?": "Italic",
            "Is there a horizontal line separating the title from the content?": "Yes",
            "Where on the page is the event date displayed?": "In a centered footer div"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000310",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage that displays a monthly summary of community sports events in a vibrant layout.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Monthly Sports Roundup\".\n- Place a horizontal line (<hr>) immediately below the heading to separate it from the content.\n- Insert a <div> element containing a short paragraph (maximum 120 characters) summarizing a featured event.\n- Create a three-column layout below the summary, with each column equally occupying 33.33% of the available width.\n- In the left column, include a bulleted list with 3 sports events, using italic styling for each list item.\n- In the middle column, display a numbered list with 3 event dates, with each date formatted in bold text.\n- In the right column, add a <p> element featuring underlined text that specifies the location for the events.",
        "raw_output_metric": [
            "Monthly Sports Roundup",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div>",
            "</div>",
            "<p>",
            "</p>",
            "33.33%",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "</li>",
            "<ol>",
            "<b>",
            "</b>",
            "<u>",
            "</u>"
        ],
        "VQA": {
            "What is the text displayed in the main heading at the top of the page?": "Monthly Sports Roundup",
            "Is the main heading centered on the page?": "Yes",
            "What element is placed immediately below the main heading to separate it from the content?": "Horizontal line",
            "How many characters at most should the featured event summary contain?": "120",
            "How many columns are arranged below the event summary?": "3",
            "What type of list is present in the left column and how is each list item styled?": "Bulleted list with italic styling",
            "How many event dates are listed in the middle column and what is their text format?": "3 dates in a numbered list with bold text",
            "How is the location information presented in the right column?": "Paragraph with underlined text"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000311",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple webpage for a fictional restaurant advertisement.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Welcome to Savory Delights\".\n- Immediately beneath the title, add a centered <h2> element with the text \"Experience the Flavor\".\n- Place a horizontal line (<hr>) directly below the subtitle to separate the header from the main content.\n- Include a <div> element that contains a brief paragraph (no more than 120 characters) describing the restaurant’s ambiance.\n- Create a two-column layout beneath the descriptive paragraph, each column occupying exactly 50% of the available width.\n- In the left column, include a bulleted list with 4 menu items; each item should list a distinct dish name formatted with underlined text.\n- In the right column, include a numbered list featuring 3 popular locations where the restaurant is frequently visited; each list item must be formatted with bold text for its number.\n- Ensure that elements are clearly separated and visibly organized according to the described structure.\n- Use simple HTML elements only and do not include any images, icons, or external assets.",
        "raw_output_metric": [
            "Welcome to Savory Delights",
            "Experience the Flavor",
            "<h1>",
            "</h1>",
            "<h2>",
            "</h2>",
            "<hr>",
            "<div>",
            "</div>",
            "<ul>",
            "<li>",
            "<u>",
            "</u>",
            "<ol>",
            "<b>",
            "</b>"
        ],
        "VQA": {
            "What is the text displayed at the center of the main header?": "Welcome to Savory Delights",
            "What is the text in the subtitle positioned immediately below the main title?": "Experience the Flavor",
            "What visual element separates the header from the main content?": "Horizontal line",
            "What type of element contains a brief description of the restaurant’s ambiance?": "A paragraph (within a div) with less than 120 characters",
            "How many items are listed in the left column’s bulleted list?": "4",
            "How is the text for each dish name in the left column styled?": "Underlined",
            "How many locations are featured in the right column’s numbered list?": "3",
            "How is the numbering in the right column’s list formatted?": "Bold"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000312",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign an interface showcasing a fictional travel itinerary for a weekend adventure.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Weekend Adventure Plan\".\n- Include a single <div> element below the title containing a descriptive paragraph of exactly 120 characters about the trip.\n- Insert a horizontal line (<hr>) to clearly separate the title from the itinerary details.\n- Arrange the content into a three-column layout immediately following the horizontal line, with each column taking up exactly 33.33% of the width.\n- The left column must feature a bulleted list with exactly 4 destination highlights, and each list item should be underlined.\n- The middle column should contain a table with 2 rows and 2 columns; the first row’s cells must display departure times and the second row’s cells must detail corresponding activities.\n- The right column should include a <div> element with a short paragraph giving travel tips, limited to a maximum of 60 characters.\n- Set the background color of the page to a light pastel shade via an inline <style> attribute on the <body> element.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the page?": "Weekend Adventure Plan",
            "Is the title centered?": "Yes",
            "How many characters does the trip description paragraph contain?": "120",
            "What element is used to separate the title from the itinerary details?": "A horizontal line",
            "How many bullet points are shown in the left column for destination highlights?": "4",
            "What styling is applied to each destination highlight in the left column?": "Underlined",
            "How many rows and columns does the table in the middle column have?": "2 rows and 2 columns",
            "What content is displayed in the first and second rows of the table?": "Departure times in the first row and corresponding activities in the second row",
            "What is the maximum character limit for the travel tips paragraph in the right column?": "60",
            "What type of background color is applied to the page?": "A light pastel shade"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000313",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple webpage showcasing an inspiring travel destination.\n\nFeature Requirements:\n- Include a centered heading using an <h1> element with the text \"Wanderlust Journey\".\n- Place a horizontal line (<hr>) immediately below the heading to separate it from the content.\n- Add a <div> element featuring a brief paragraph of 80-120 characters describing the unique charm of the destination.\n- Implement a two-column layout where each column occupies exactly 50% of the canvas width.\n- In the left column, include a bulleted list containing exactly 4 must-visit landmarks, with each list item’s text styled in italics.\n- In the right column, add a numbered list comprising exactly 4 travel recommendations, where each item begins with a bold title summarizing the tip.\n- Ensure the list in the right column appears adjacent to the left column, maintaining the side-by-side format.\n- Conclude with a centered footer element (<footer>) that contains the text \"Bon Voyage!\"",
        "raw_output_metric": [
            "Wanderlust Journey",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div>",
            "<p>",
            "</p>",
            "width: 50%;",
            "<ul>",
            "<li>",
            "<em>",
            "</em>",
            "</li>",
            "</ul>",
            "<ol>",
            "<li>",
            "<strong>",
            "</strong>",
            "</li>",
            "</ol>",
            "<footer>",
            "Bon Voyage!",
            "</footer>"
        ],
        "VQA": {
            "What is the centered heading text at the top of the page?": "Wanderlust Journey",
            "What element is directly below the heading separating it from the content?": "Horizontal line",
            "What is the approximate character length of the descriptive paragraph?": "80-120 characters",
            "How many columns are displayed in the layout and what is the width of each?": "2 columns, each 50% width",
            "How many bullet points are present in the left column?": "4",
            "What styling is applied to the text of the landmarks in the left column?": "Italics",
            "How many items are there in the numbered list in the right column?": "4",
            "How are the titles in the travel recommendations styled?": "Bold",
            "What text is displayed in the centered footer?": "Bon Voyage!"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000314",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDevelop a simple webpage layout for a weekly workshop schedule.\n\nFeature Requirements:\n- Include a centered title in an <h1> element with the text \"Workshop Schedule\".\n- Display a brief introductory paragraph with a maximum of 150 characters directly below the title.\n- Add a horizontal line (<hr>) to separate the title and introduction from the detailed schedule.\n- Create a grid layout with 7 equally sized columns, each representing a day of the week.\n- In each column, place a subheading (<h2>) with the corresponding day name (e.g., \"Monday\", \"Tuesday\", etc.).\n- Under each day’s subheading, incorporate an ordered list of 3 specific workshop topics.\n- Format the workshop topics in the ordered list with underline styling.\n- At the bottom of the page, include a centered footer (<div>) containing the slogan \"Learn and Grow\".",
        "raw_output_metric": [
            "Workshop Schedule",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "<hr>",
            "Learn and Grow"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the page?": "Workshop Schedule",
            "Is there a brief introductory paragraph below the title, and how long is it?": "Yes, up to 150 characters.",
            "What element separates the title and introduction from the schedule details?": "A horizontal line.",
            "How many columns are displayed in the grid layout representing days of the week?": "7",
            "What does each column header display?": "The day name (e.g., Monday, Tuesday, etc.)",
            "How many workshop topics are listed under each day?": "3",
            "How are the workshop topics styled in the list?": "They are underlined.",
            "What is the centered text in the footer at the bottom of the page?": "Learn and Grow"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000315",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple webpage showcasing a daily recipe.\n\nFeature Requirements:\n- Display a centered main title using an <h1> element with the text \"Daily Recipe\".\n- Place a paragraph (<p>) directly under the title with a brief description of the dish limited to 150 characters.\n- Insert a horizontal line (<hr>) immediately below the paragraph to separate the header from the details.\n- Implement a two-column layout beneath the <hr>, where each column spans exactly 50% of the available width.\n- In the left column, include an unordered list (<ul>) containing exactly 4 ingredients, with one ingredient per list item.\n- In the right column, create an ordered list (<ol>) comprising exactly 3 cooking steps, with one step per list item.\n- Apply bold formatting to the names of the ingredients in the unordered list.\n- Use italics for the text within each cooking step in the ordered list.\n- Ensure all elements are clearly defined and organized in the output.",
        "raw_output_metric": [
            "Daily Recipe",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "50%",
            "<ul>",
            "</ul>",
            "<li>",
            "</li>",
            "<b>",
            "</b>",
            "<ol>",
            "</ol>",
            "<i>",
            "</i>"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Daily Recipe",
            "Is the main title centered on the page?": "Yes",
            "Does a paragraph appear directly underneath the title with a brief description?": "Yes",
            "Is there a horizontal line separating the header from the rest of the content?": "Yes",
            "How many ingredients are listed in the left column?": "4",
            "Are the ingredient names in the left column formatted in bold?": "Yes",
            "How many cooking steps are provided in the right column?": "3",
            "Is the text for each cooking step displayed in italics?": "Yes",
            "Is the layout beneath the horizontal line organized into two columns of equal width?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000316",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDevelop a webpage that promotes a community art workshop event.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Community Art Workshop\".\n- Insert a horizontal line (<hr>) immediately below the title to separate it from the content.\n- Display a <div> element containing a short paragraph of no more than 120 characters describing the event.\n- Create a two-column layout beneath the paragraph where each column takes up exactly 50% of the available width.\n- In the left column, include an unordered list (bulleted) with 4 creative activities, each listed in italics.\n- In the right column, feature an ordered list (numbered) with 3 key details such as date, time, and venue, with each detail's label in bold.\n- Add a footer section with a centered <p> element that provides a simple call-to-action message.\n- Ensure that the structure is clearly separated, with content visually divided by appropriate HTML elements.",
        "raw_output_metric": [
            "Community Art Workshop",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div>",
            "</div>",
            "<p>",
            "</p>",
            "<ul>",
            "</ul>",
            "<li>",
            "</li>",
            "<i>",
            "</i>",
            "<ol>",
            "</ol>",
            "<strong>",
            "</strong>",
            "date",
            "time",
            "venue",
            "50%",
            "<footer>",
            "</footer>"
        ],
        "VQA": {
            "What is the centered title at the top of the webpage?": "Community Art Workshop",
            "What element is used immediately after the title to separate it from the content?": "A horizontal line",
            "How many creative activities are listed in the left column?": "4",
            "Are the creative activities displayed in italic style?": "Yes",
            "How many key details are shown in the right column's ordered list?": "3",
            "Are the labels for the key details in the right column bolded?": "Yes",
            "Where is the call-to-action message displayed?": "Centered in the footer"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000317",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage that displays a summer travel itinerary.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Summer Vacation Itinerary\" at the top of the canvas.\n- Add a paragraph (<p> element) directly below the header with a personal note limited to 120 characters.\n- Insert a horizontal line (<hr> element) below the paragraph to separate the note from the itinerary.\n- Create a timetable using a table structure with 3 rows, each representing one day of the itinerary.\n- In every row of the table, use the first column to display the day label (e.g., \"Day 1\") in a bold format.\n- In the corresponding second column, list exactly 2 planned activities separated by a comma, with each activity underlined.\n- Center the table within the canvas, ensuring it occupies exactly 70% of the available width.\n- Add a footer (<footer> element) at the bottom of the canvas with the text \"Plan your adventure\" in italics.\n- Set the background color of the canvas to a light blue shade.",
        "raw_output_metric": [
            "Summer Vacation Itinerary",
            "<h2>",
            "<p>",
            "<hr>",
            "<table>",
            "Day 1",
            "Day 2",
            "Day 3",
            "<b>",
            "<u>",
            "70%",
            "lightblue",
            "<footer>",
            "Plan your adventure"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Summer Vacation Itinerary",
            "Which element appears directly below the header?": "A paragraph with a personal note",
            "What element separates the personal note from the itinerary?": "A horizontal line",
            "How many rows are in the itinerary table?": "3",
            "How is the day label in the first column of each row formatted?": "Bold",
            "How many activities are listed in the second column of each row?": "2",
            "How are the planned activities styled in the table?": "Underlined and separated by a comma",
            "What is the width and alignment of the table within the canvas?": "Centered and occupies 70% of the available width",
            "What text is displayed in the footer and how is it styled?": "Plan your adventure in italics",
            "What is the background color of the canvas?": "Light blue"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000318",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a simple webpage for a fictional conference schedule page.\n\nFeature Requirements:\n- Place a centered <h1> element at the top with the text \"Conference Schedule\".\n- Insert a horizontal rule (<hr>) immediately below the heading to separate it from the content.\n- Include a centered <div> element with a succinct paragraph (maximum of 100 characters) summarizing the conference theme.\n- Arrange a three-column layout below the summary, where each column occupies roughly 33% of the canvas width.\n- In the left column, display an ordered list with 3 keynote speakers, ensuring each list item shows the speaker's name in bold followed by a one-line description in regular text.\n- In the center column, include an unordered list with 3 breakout session titles, each presented in italics.\n- In the right column, provide 3 networking event items, each structured with an <h3> subheading for the event title followed by the scheduled time in plain text.\n- Apply a monospace font style to all technical and schedule details within the lists.",
        "raw_output_metric": [
            "Conference Schedule",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div",
            "</div>",
            "<p>",
            "</p>",
            "<ol>",
            "</ol>",
            "<li>",
            "</li>",
            "<b>",
            "</b>",
            "<ul>",
            "</ul>",
            "<i>",
            "</i>",
            "<h3>",
            "</h3>",
            "33%",
            "monospace"
        ],
        "VQA": {
            "What is the text displayed in the centered heading at the top of the page?": "Conference Schedule",
            "What element immediately follows the heading to separate it from the rest of the content?": "Horizontal rule",
            "How many columns are used to arrange the main content below the summary?": "3",
            "How many keynote speakers are listed in the left column and how are their names styled?": "3 speakers, names in bold",
            "How many breakout session titles are shown in the center column and in what style?": "3 sessions, italicized",
            "How many networking event items are in the right column and how are their titles presented?": "3 events, event titles as subheadings",
            "What font style is applied to the technical and schedule details within the lists?": "Monospace",
            "Is the centered summary paragraph limited to 100 characters and does it summarize the conference theme?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000319",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage that presents details about a fictional futuristic travel expo.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Futuristic Travel Expo\" displayed at the very top.\n- Add a single <div> element immediately below the title containing a brief description limited to 110 characters.\n- Insert a horizontal line (<hr>) right after the description to separate the header from the main content.\n- Create a two-column layout beneath the horizontal line, with each column occupying exactly 50% of the available width.\n- In the left column, include an unordered list with exactly 3 travel destinations, each destination worded in italics.\n- In the right column, feature an ordered list with exactly 3 futuristic travel packages, where each list item begins with a bold title followed by its description.\n- At the bottom, add a centered <footer> element containing the text \"Join the Future\" to conclude the page.",
        "raw_output_metric": [
            "<h1>Futuristic Travel Expo</h1>",
            "<div>",
            "</div>",
            "<hr>",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "</li>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "</li>",
            "<footer>",
            "Join the Future",
            "</footer>"
        ],
        "VQA": {
            "What is the centered heading at the top of the page?": "Futuristic Travel Expo",
            "How many characters is the brief description limited to?": "110",
            "What element is placed immediately after the description to separate content?": "A horizontal line",
            "How many columns are used in the main content area?": "2",
            "What is the width percentage of each column in the layout?": "50%",
            "What type of list and how many items are shown in the left column?": "An unordered list with 3 items",
            "How are the travel destination names styled in the left column?": "In italics",
            "What type of list and how many items are presented in the right column?": "An ordered list with 3 items",
            "How are the travel package titles formatted in the right column?": "They begin in bold",
            "What text is displayed in the centered footer at the bottom?": "Join the Future"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000320",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a digital menu board with an announcement section for a local café.\n\nFeature Requirements:\n- Include a centered <h1> element displaying the text \"Daily Delights\" at the top.\n- Place a horizontal divider (<hr>) immediately below the title.\n- Create a main <div> container that splits into two equal-width columns.\n- In the left column, include a bulleted list with 4 unique coffee options, each item formatted in italics and limited to 30 characters.\n- In the right column, include a numbered list with 4 food items, where each item's text begins with a bold header for the dish name followed by a brief description.\n- Add a separate <div> element below the main container that displays an announcement in a centered paragraph containing exactly 80 characters.\n- Within the announcement paragraph, use underline (<u>) formatting for any text mentioning \"Limited Time\".\n- Ensure all text content fits within the defined elements and layout with no extra formatting artifacts.",
        "raw_output_metric": [
            "<h1>",
            "Daily Delights",
            "<hr>",
            "<div>",
            "<ul>",
            "<li>",
            "<em>",
            "<ol>",
            "<b>",
            "<p>",
            "<u>Limited Time</u>"
        ],
        "VQA": {
            "What is the text displayed in the centered title at the top?": "Daily Delights",
            "How many coffee options are shown as bullet points in the left column?": "4",
            "Are the coffee options styled in italics?": "Yes",
            "What element is immediately below the title?": "A horizontal divider",
            "How many food items are shown in the numbered list in the right column?": "4",
            "Does each food item start with a bold header followed by a description?": "Yes",
            "Is there an announcement section below the main container?": "Yes",
            "Does the announcement text include underlined text for 'Limited Time' and is it exactly 80 characters long?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000321",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage that showcases a recipe highlight for a featured dish.\n\nFeature Requirements:\n- Add a centered <h1> element at the top with the exact text \"Cooking Corner\".\n- Immediately below the header, include a <p> element containing exactly 120 characters that describe the overall theme of the page.\n- Place a horizontal line (<hr>) directly after the paragraph to separate the header from the main content.\n- Create a two-column layout beneath the horizontal line; the left column must span 60% of the width and the right column 40%.\n- In the left column, display an unordered list with exactly 4 ingredients. Each list item must contain one word in bold.\n- In the right column, include an ordered list with exactly 3 cooking instructions. Each item must begin with a verb.\n- Under each ordered list item, add a nested <div> element with a brief explanation limited to a maximum of 50 characters.\n- End the page with a centered italicized <footer> element containing the text \"Bon Appétit!\".",
        "raw_output_metric": [
            "Cooking Corner",
            "Bon Appétit!",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "60%",
            "40%",
            "<ul>",
            "</ul>",
            "<li>",
            "</li>",
            "<b>",
            "</b>",
            "<ol>",
            "</ol>",
            "<div>",
            "</div>",
            "<footer>",
            "</footer>"
        ],
        "VQA": {
            "What is the text displayed in the top centered heading?": "Cooking Corner",
            "How many characters does the introductory description paragraph contain?": "120 characters",
            "What visual element is used to separate the description from the main content?": "A horizontal line",
            "How many ingredients are listed in the left column?": "4",
            "How is the text in each ingredient styled?": "Bold",
            "What percentage of the width does the left column occupy?": "60%",
            "How many cooking instructions are listed in the right column?": "3",
            "Does each cooking instruction begin with a verb?": "Yes",
            "What text is displayed in the centered italicized footer?": "Bon Appétit!"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000322",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate an interactive infographic presenting sports team details.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Team Overview\".\n- Add a paragraph (<p>) below the header containing a description of the team's recent performance, limited to 150 characters.\n- Insert a horizontal line (<hr>) to separate the header from the main content.\n- Create a two-column layout where the left column occupies 50% width and contains a <ul> list with 3 important upcoming match dates.\n- Make the left column's match date items underlined via styling.\n- Design the right column to occupy the remaining 50% width and include a <table> with 2 columns and 3 rows; one column for match scores and one for opponent names.\n- Precede the left column with a subheader (<h2>) titled \"Upcoming Matches\".\n- Precede the right column with a subheader (<h2>) titled \"Match Results\".\n- Apply a solid border between the two columns.\n- Specify a colored background for the table cells displaying scores, with the color explicitly mentioned in the style attribute.",
        "raw_output_metric": [
            "Team Overview",
            "Upcoming Matches",
            "Match Results",
            "<h1>",
            "<h2>",
            "<p>",
            "<hr>",
            "<ul>",
            "<li>",
            "<table>",
            "background-color:",
            "border:",
            "50%"
        ],
        "VQA": {
            "What is the text of the main centered header?": "Team Overview",
            "Which element is used to separate the header from the main content?": "Horizontal line",
            "What is the maximum character limit for the paragraph description under the header?": "150 characters",
            "How many columns are in the layout?": "2",
            "What is the subheader title that appears before the list of upcoming matches?": "Upcoming Matches",
            "How many match date items are listed in the upcoming matches column?": "3",
            "How are the match date items visually styled?": "Underlined",
            "What is the subheader leading the table of match details?": "Match Results",
            "How many rows does the match results table have?": "3",
            "What two types of information are displayed in the table columns?": "Match scores and opponent names"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000323",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a static webpage that displays a minimalist art gallery featuring abstract paintings.\n\nFeature Requirements:\n- Place a centered <h1> element at the top with the text \"Abstract Art Gallery\" in a large font.\n- Insert a horizontal line (<hr>) immediately below the title to separate the header from the content.\n- Divide the page into three equal vertical columns using <div> elements, each occupying one-third of the available width.\n- In the left column, include a bulleted list with exactly 4 art piece titles, each rendered in italics.\n- In the middle column, create a numbered list with exactly 4 descriptions, where each list item begins with a bold title specifying the art technique used.\n- In the right column, display a short paragraph (maximum 150 characters) that summarizes the overall theme of the gallery.\n- Add a vertical border between each column to clearly demarcate the sections.\n- Conclude the page with a footer containing centered small text that states \"Art Gallery © 2023\".",
        "raw_output_metric": [
            "Abstract Art Gallery",
            "<h1>",
            "<hr>",
            "<div",
            "<ul>",
            "<li><em>",
            "<ol>",
            "<li><strong>",
            "<p>",
            "border-left:",
            "<footer>",
            "Art Gallery © 2023"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Abstract Art Gallery",
            "How many horizontal lines appear immediately below the title?": "1",
            "Into how many vertical columns is the page divided?": "3",
            "How many art piece titles are shown in the left column?": "4",
            "What text style is used for each art piece title in the left column?": "Italics",
            "How many descriptions are provided in the middle column?": "4",
            "How is the art technique indicated at the start of each description in the middle column?": "Bold",
            "What does the right column display?": "A short paragraph summarizing the gallery theme",
            "What is the footer text shown at the bottom of the page?": "Art Gallery © 2023"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000324",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a project dashboard webpage that summarizes current project data and navigation options.\n\nFeature Requirements:\n- Place a centered title using an <h1> element with the text \"Project Dashboard\" at the top of the canvas.\n- Insert a horizontal line (<hr>) immediately below the header to separate it from the content sections.\n- Create a left sidebar occupying 25% of the canvas width that contains a vertical navigation menu with four list items, each enclosed in an <li> element and linked to dummy sections.\n- Allocate the remaining 75% of the width to a main content area that is divided horizontally into two sections by a vertical line (<div> elements styled as columns).\n- In the left column of the main content area, display a bulleted list with three project milestones, with each list item using bold font for the milestone title.\n- In the right column of the main content area, include a numbered list with three task deadlines, where each list item uses italics for the due date.\n- Ensure all text elements are contained within designated <div> containers for clear structural separation.\n- Use a bottom footer section containing a centered short paragraph (no more than 80 characters) with contact information.",
        "raw_output_metric": [],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Project Dashboard",
            "Is there a horizontal line immediately under the main title?": "Yes",
            "How many navigation links are present in the left sidebar?": "4",
            "What is the width percentage of the left sidebar compared to the full canvas?": "25%",
            "How many project milestones are listed in the left column of the main content area?": "3",
            "Are the milestone titles in the left column styled in bold?": "Yes",
            "How many task deadlines are shown in the right column of the main content area?": "3",
            "Are the due dates for the tasks formatted in italics?": "Yes",
            "Is there a vertical divider separating the main content area into two sections?": "Yes",
            "Does the footer include a centered paragraph with contact information?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000325",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple webpage to display a restaurant menu for a local eatery.\n\nFeature Requirements:\n- Display a centered <h1> element with the text \"Restaurant Menu\".\n- Place a centered <h2> element below the title with the text \"Today's Specials\".\n- Insert a horizontal line (<hr>) immediately below the titles.\n- Create a three-column layout beneath the horizontal line, with each column taking up exactly one-third of the available width.\n- In the left column, include an unordered list (<ul>) with 4 appetizer names, each item describing a distinct dish.\n- In the center column, include an ordered list (<ol>) with 4 entree names, ensuring that the dish names are wrapped in bold formatting.\n- In the right column, include an unordered list (<ul>) with 4 dessert names, ensuring that the text of each dish is in italics.\n- Add a paragraph (<p>) below the three-column layout describing the restaurant's address and operating hours, with a maximum of 150 characters.\n- Ensure all list elements and text elements are clearly separated by appropriate HTML structure.",
        "raw_output_metric": [
            "<h1>",
            "Restaurant Menu",
            "<h2>",
            "Today's Specials",
            "<hr>",
            "<ul>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "<i>",
            "</i>",
            "<p>"
        ],
        "VQA": {
            "What is the centered page title text?": "Restaurant Menu",
            "What is the text displayed in the centered sub-title below the title?": "Today's Specials",
            "What element appears immediately after the titles?": "A horizontal line",
            "How many columns are shown beneath the horizontal line?": "Three",
            "How many items are listed in the left column (appetizers)?": "4",
            "How many items are listed in the center column (entrees) and how are they styled?": "4 items, with the dish names in bold",
            "How many items are listed in the right column (desserts) and how are they styled?": "4 items, with the dish names in italics",
            "What information is provided in the paragraph below the columns?": "The restaurant's address and operating hours"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000326",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage layout for a summer festival announcement.\n\nFeature Requirements:\n- Place a centered <h2> element at the top of the page with the text \"Summer Festival 2023\".\n- Add a paragraph (<p>) element immediately below the title that exactly contains 110 characters describing the festival's highlights.\n- Insert a horizontal line (<hr>) to clearly separate the title area from the following content.\n- Create a three-column layout below the horizontal line, with each column equally taking up 33.33% of the canvas width.\n- In the left column, display an unordered list (<ul>) with 4 list items, each representing a featured event, and use underlined text for each item.\n- In the middle column, create an ordered list (<ol>) with 4 list items detailing the schedule timeline, and each list number should be displayed in bold.\n- In the right column, include a <div> element with a single sentence call-to-action reading \"Register Now\" in italic font.\n- Ensure the entire layout has clearly defined margins separating each section, with a white background and black text.\n- Do not include any external assets, images, or icons in the layout.",
        "raw_output_metric": [
            "Summer Festival 2023",
            "<h2>",
            "</h2>",
            "<p>",
            "</p>",
            "<hr>",
            "33.33%",
            "<ul>",
            "</ul>",
            "<li>",
            "</li>",
            "<u>",
            "</u>",
            "<ol>",
            "</ol>",
            "<b>",
            "</b>",
            "<div>",
            "</div>",
            "<i>",
            "</i>",
            "Register Now",
            "background-color: white",
            "color: black",
            "margin"
        ],
        "VQA": {
            "What is the main title text at the top of the page?": "Summer Festival 2023",
            "How is the main title positioned on the page?": "Centered",
            "How many characters does the description paragraph contain?": "110",
            "Is there a horizontal line separating the title area from the content?": "Yes",
            "How many columns are created in the layout below the horizontal line?": "3",
            "What percentage of the canvas width does each column occupy?": "33.33%",
            "How many items are listed as featured events in the left column?": "4",
            "How are the featured event items styled in the left column?": "Underlined",
            "How many schedule items are detailed in the middle column?": "4",
            "What is the call-to-action text in the right column and how is it styled?": "Register Now, italic"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000327",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate a webpage that outlines details for a community gardening workshop.\n\nFeature Requirements:\n- Include a centered main header (<h1>) with the text \"Community Garden Workshop\" in plain text.\n- Position a centered subheader (<h2>) just below the main header with the text \"Grow Together\" using plain text.\n- Insert a horizontal line (<hr>) immediately after the subheader.\n- Design a two-column layout below the horizontal line where each column occupies exactly 50% of the container's width.\n- In the left column, include a paragraph (within a <div>) containing a brief description of the event limited to 120 characters.\n- The right column should display two lists: a bulleted list featuring 3 specific workshop activities (each in italics) and a numbered list with 3 clearly stated benefits (each benefit title in bold).\n- Ensure that all text elements are plainly formatted without external styling or images.",
        "raw_output_metric": [
            "Community Garden Workshop",
            "Grow Together",
            "<h1>",
            "<h2>",
            "<hr>",
            "50%",
            "<div>",
            "<ul>",
            "<ol>",
            "<li>",
            "<i>",
            "<b>"
        ],
        "VQA": {
            "Is the main header centered with the text 'Community Garden Workshop'?": "Yes",
            "Is the subheader centered with the text 'Grow Together'?": "Yes",
            "Is there a horizontal line directly below the subheader?": "Yes",
            "How is the layout organized below the horizontal line?": "A two-column layout with each column occupying 50% of the container's width",
            "Does the left column display a brief event description within a paragraph limited to 120 characters?": "Yes",
            "How many items are present in the bulleted list in the right column?": "3",
            "Are the items in the bulleted list shown in italics?": "Yes",
            "How many items are present in the numbered list in the right column?": "3",
            "Are the items in the numbered list displayed with bold text?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000328",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate a canvas displaying a quarterly sales report summary for a company.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Quarterly Sales Report\".\n- Place a double horizontal line (<hr><hr>) right below the header to separate it from the main content.\n- Create two distinct sections below the horizontal lines: the left section dedicated to product performance and the right section for customer feedback.\n- In the left section, allocate 60% of the canvas width and include an unordered list (<ul>) with 4 product names, each formatted in italics.\n- In the right section, allocate 40% of the canvas width and include an ordered list (<ol>) with 3 customer feedback summaries, where each summary starts with a bold phrase representing a key point.\n- Add a footer section at the bottom of the canvas with right-aligned text inside a <small> element that reads \"Reviewed by Management\".",
        "raw_output_metric": [
            "Quarterly Sales Report",
            "<h2>",
            "</h2>",
            "<hr><hr>",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "<small>Reviewed by Management</small>",
            "60%",
            "40%"
        ],
        "VQA": {
            "What is the text in the centered header at the top of the canvas?": "Quarterly Sales Report",
            "How many horizontal lines appear right below the header?": "2",
            "What percentage of the canvas width is allocated to the left section?": "60%",
            "How many product names are listed in the left section?": "4",
            "How are the product names styled in the left section?": "Italics",
            "How many customer feedback summaries are shown in the right section?": "3",
            "What formatting is applied to the key phrase at the start of each customer feedback summary?": "Bold",
            "What percentage of the canvas width is allocated to the right section?": "40%",
            "What text is displayed in the footer section of the canvas?": "Reviewed by Management",
            "How is the footer text aligned?": "Right"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000329",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate an educational webpage summarizing how renewable energy sources work.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Renewable Energy 101\".\n- Place a <div> element immediately below the title containing a brief description of renewable energy with no more than 120 characters.\n- Insert a horizontal line (<hr>) immediately after the description.\n- Create a two-column layout below the horizontal line, with each column occupying 50% of the available width.\n- The left column should contain a numbered list with 3 types of renewable energy sources.\n- The right column should include an unordered list with 3 benefits of using renewable energy, with each benefit displayed in italics.\n- Beneath the two columns, add another <div> element presenting a short explanation (up to 150 characters) of how these energy sources contribute to a sustainable future.\n- Ensure that all textual content is directly embedded within the appropriate HTML container elements.\n- Use clear structural divisions to visually separate each section on the webpage.",
        "raw_output_metric": [
            "Renewable Energy 101",
            "<h1>Renewable Energy 101</h1>",
            "<div>",
            "</div>",
            "<hr>",
            "50%",
            "<ol>",
            "</ol>",
            "<li>",
            "</li>",
            "<ul>",
            "</ul>",
            "<em>",
            "</em>"
        ],
        "VQA": {
            "What is the main title text displayed on the page?": "Renewable Energy 101",
            "How is the main title presented?": "Centered in an h1 element",
            "What element appears immediately below the main title?": "A div containing a brief description of renewable energy (up to 120 characters)",
            "What separates the description from the rest of the content?": "A horizontal line",
            "How is the content arranged after the horizontal line?": "In a two-column layout, each column occupying 50% width",
            "How many items are listed in the numbered list in the left column?": "3",
            "How many benefits are shown in the unordered list in the right column?": "3",
            "How is each benefit in the unordered list styled?": "Displayed in italics",
            "What content is displayed beneath the two columns?": "A div with a short explanation (up to 150 characters) of how these energy sources contribute to a sustainable future"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000330",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate a webpage layout for a community workshop announcement.\n\nFeature Requirements:\n- Add a centered <h2> element at the top with the text \"Workshop Announcement\".\n- Place a <p> element directly below the title containing a brief description of the workshop in no more than 120 characters.\n- Insert a horizontal line (<hr>) immediately after the description to clearly separate sections.\n- Create a two-column layout under the horizontal line where each column occupies exactly 50% of the available horizontal space.\n- In the left column, include an unordered list (<ul>) with 4 list items, each item depicting a key discussion topic in plain text.\n- In the right column, include an ordered list (<ol>) with 4 items, each starting with a bold subheading for the session title followed by a brief session summary.",
        "raw_output_metric": [
            "<h2>",
            "Workshop Announcement",
            "<p>",
            "<hr>",
            "<ul>",
            "<li>",
            "<ol>",
            "<b>",
            "50%"
        ],
        "VQA": {
            "What is the text displayed in the centered heading at the top of the page?": "Workshop Announcement",
            "What element appears directly below the heading?": "A paragraph with a brief workshop description",
            "What is the maximum character limit for the workshop description text?": "120 characters",
            "What element is used to separate the description from the section below?": "A horizontal line",
            "How is the content arranged under the horizontal line?": "In a two-column layout, each occupying 50% width",
            "How many items are listed in the unordered list in the left column?": "4",
            "How many items are included in the ordered list in the right column?": "4",
            "What special formatting is applied to the beginning of each item in the right column?": "Bold subheadings"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000331",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a simple webpage to display a weekly weather forecast dashboard.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Weekly Weather Forecast\".\n- Display one <div> element containing a summary paragraph with a maximum of 150 characters describing the overall forecast.\n- Use a horizontal line (<hr>) directly beneath the title to separate it from the subsequent content.\n- Create a three-column layout below the horizontal line, where each column occupies approximately 33% of the available width.\n- In the left column, include an unordered list with 4 weather conditions (e.g., rain, snow, fog, wind), with each item displayed in italics.\n- In the middle column, provide a paragraph listing daily temperature ranges, with each day’s range on a separate line.\n- In the right column, construct a table showing the weather details for each day of the week, including columns for Day, High Temperature, and Low Temperature.\n- Use a horizontal rule (<hr>) inside the right column to delineate the table header from the data rows.\n- Ensure all text elements are visibly structured and clearly separated by the designated HTML elements.",
        "raw_output_metric": [
            "Weekly Weather Forecast",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div>",
            "</div>",
            "<ul>",
            "<li>",
            "</li>",
            "<em>",
            "</em>",
            "rain",
            "snow",
            "fog",
            "wind",
            "<p>",
            "</p>",
            "<table>",
            "</table>",
            "Day",
            "High Temperature",
            "Low Temperature"
        ],
        "VQA": {
            "What is the centered title text at the top of the page?": "Weekly Weather Forecast",
            "What element is used directly beneath the title to separate it from the rest of the content?": "Horizontal line",
            "How many weather conditions are listed in the left column?": "4",
            "Are the weather conditions in the unordered list displayed in italics?": "Yes",
            "What does the middle column display?": "Daily temperature ranges with each day’s range on a separate line",
            "Which columns are shown in the table in the right column?": "Day, High Temperature, and Low Temperature",
            "What visual element is used inside the right column to separate the table header from the data rows?": "Horizontal line",
            "How many columns comprise the layout below the horizontal line?": "3"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000332",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage showcasing an exotic travel destination for potential tourists.\n\nFeature Requirements:\n- Include a centered main header (<h1>) with the text \"Discover Phuket\" at the very top.\n- Place a subheader (<h2>) immediately below the main header with the text \"Paradise Awaits\" in a slightly smaller font.\n- Add a paragraph (<p>) beneath the subheader containing an exact 120-character description of Phuket’s scenic beaches and vibrant culture.\n- Insert a horizontal line (<hr>) right after the paragraph to visually separate the header section from the content.\n- Create a two-column layout below the horizontal line where each column takes up exactly 50% of the available width.\n- The left column must include an unordered bulleted list (<ul>) with exactly 4 famous landmarks in Phuket, with each list item displayed in italics.\n- The right column must contain an ordered numbered list (<ol>) featuring exactly 3 local dishes, with each dish name in bold font.\n- Add a footer (<footer>) at the bottom of the page with centered text that reads \"Start your adventure today\".",
        "raw_output_metric": [
            "<h1>",
            "Discover Phuket",
            "<h2>",
            "Paradise Awaits",
            "<p>",
            "<hr>",
            "<ul>",
            "<li><em>",
            "</em></li>",
            "<ol>",
            "<li><b>",
            "</b></li>",
            "<footer>",
            "Start your adventure today",
            "50%"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the page?": "Discover Phuket",
            "What text is shown in the subheader immediately below the main header?": "Paradise Awaits",
            "Does the paragraph beneath the subheader contain exactly 120 characters?": "Yes",
            "What visual element immediately follows the paragraph?": "Horizontal line",
            "How many columns are created below the horizontal line?": "2",
            "What is the width of each column in the two-column layout?": "50%",
            "How many bulleted items are present in the left column?": "4",
            "In what style are the items in the left column displayed?": "Italics",
            "What formatting is applied to the numbered items in the right column?": "Bold",
            "What text is centered in the footer at the bottom of the page?": "Start your adventure today"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000333",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a simple interactive webpage for planning a day trip.\n\nFeature Requirements:\n- Include a centered <h2> element with the text \"Day Trip Planner\".\n- Place a horizontal line (<hr>) directly below the title to separate it from the content below.\n- Create a two-section layout using two <div> elements; the left section should occupy 40% of the available width and the right section 60%.\n- In the left section, display an unordered list containing 4 city names, each shown in italics.\n- In the right section, include a numbered list with 4 activity options, ensuring each option is described in no more than 50 characters.\n- Insert a second horizontal line (<hr>) below the numbered list to separate the activities from an input area.\n- Include an input area below the second horizontal line for users to add comments about the trip.\n- Define clear borders for each section so that the separation between the title, lists, and input area is visually distinct.",
        "raw_output_metric": [
            "Day Trip Planner",
            "<h2>",
            "<hr>",
            "<div",
            "40%",
            "60%",
            "<ul>",
            "<li>",
            "<i>",
            "<ol>",
            "<input",
            "border:"
        ],
        "VQA": {
            "What text is displayed as the main heading on the page?": "Day Trip Planner",
            "How is the main heading visually distinguished?": "It is centered with a horizontal line directly below it",
            "How many horizontal lines are visible on the page?": "Two",
            "How is the page content split into sections?": "A left section occupying 40% and a right section occupying 60% of the width",
            "How many city names are listed in the left section and how are they styled?": "4 city names, all in italics",
            "How many activity options need to be displayed in the right section?": "4",
            "What is the length constraint on the activity descriptions?": "No more than 50 characters each",
            "What separates the activity list from the comment input area?": "A second horizontal line",
            "How are the different sections of the page visually differentiated?": "Each section has clear borders"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000334",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage that displays an outdoor adventure club event summary.\n\nFeature Requirements:\n- Add a centered <h1> element with the text \"Adventure Awaits\" at the top.\n- Place a <p> element directly under the title containing a short event description limited to 100 characters.\n- Insert a horizontal line (<hr>) immediately after the event description to separate the header from the main content.\n- Create a two-column layout below the horizontal line where each column occupies exactly 50% of the canvas width.\n- In the left column, include an unordered list (<ul>) with three outdoor activities, with each activity name styled in italics.\n- In the right column, create an ordered list (<ol>) with three event highlights, ensuring that the title of each highlight is wrapped in <b> tags for bold formatting.\n- Add a centered <p> element at the bottom of the page containing the text \"Join us this weekend!\" to serve as the footer.\n- Ensure that all text elements are clearly visible and organized in separate <div> sections for distinct webpage components.",
        "raw_output_metric": [
            "<h1>",
            "Adventure Awaits",
            "<p>",
            "<hr>",
            "<div>",
            "<ul>",
            "<li>",
            "<i>",
            "<ol>",
            "<b>",
            "Join us this weekend!",
            "50%"
        ],
        "VQA": {
            "What is the main heading text at the top of the page?": "Adventure Awaits",
            "Is the event description placed directly below the title limited to 100 characters?": "Yes",
            "Is there a horizontal separation line immediately after the event description?": "Yes",
            "How many columns are present in the main content area?": "2",
            "How many items are listed in the bullet list on the left column?": "3",
            "Are the activity names in the left column styled in italics?": "Yes",
            "How many numbered event highlights are included in the right column?": "3",
            "Are the titles of the event highlights displayed in bold?": "Yes",
            "What is the text of the centered footer at the bottom of the page?": "Join us this weekend!"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000335",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a dynamic travel itinerary page that displays upcoming journey details.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Upcoming Journeys\".\n- Place a horizontal line (<hr>) directly below the title to separate it from the content.\n- Create a two-section layout below the <hr>, where the left section occupies 40% of the width and the right section occupies 60%.\n- In the left section, include a bulleted list (<ul>) with 4 destination names, each wrapped in <li> elements and styled with underline.\n- In the right section, include a numbered list (<ol>) with 4 corresponding travel dates, each inside an <li> element and with the dates displayed in bold.\n- Add a <div> below the two sections containing a short summary text of no more than 80 characters describing the overall trip.\n- Ensure each section and element is clearly separated and structured on the canvas.",
        "raw_output_metric": [
            "<h1>",
            "Upcoming Journeys",
            "</h1>",
            "<hr>",
            "<ul>",
            "<li>",
            "</li>",
            "</ul>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "</li>",
            "</ol>",
            "<div>",
            "40%",
            "60%"
        ],
        "VQA": {
            "What is the text of the centered title at the top?": "Upcoming Journeys",
            "What element is directly below the title?": "Horizontal line",
            "How many destination names are listed in the left section?": "4",
            "Are the destination names underlined?": "Yes",
            "How many travel dates are displayed in the right section?": "4",
            "Are the travel dates shown in bold?": "Yes",
            "What is the width percentage of the left section?": "40%",
            "What is the width percentage of the right section?": "60%",
            "Is there a summary text displayed below the two sections?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000336",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate a webpage layout that presents a detailed itinerary for a weekend trip.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Weekend Getaway Itinerary\".\n- Place a short welcome message in a <p> element beneath the title, limited to 120 characters.\n- Insert an <hr> element to visually separate the header from the main content.\n- Create a three-column layout immediately after the horizontal line, with each column representing morning, afternoon, and evening sections respectively.\n- In the morning column, include an unordered list with 3 activities, each list item written in italic and all text in lowercase.\n- In the afternoon column, add a <div> containing a brief paragraph summarizing midday plans, not exceeding 150 characters.\n- In the evening column, display an ordered list of 3 evening events, ensuring each event name is rendered in bold text.",
        "raw_output_metric": [
            "Weekend Getaway Itinerary",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<ul>",
            "</ul>",
            "<li><em>",
            "</em>",
            "</li>",
            "<div>",
            "</div>",
            "<ol>",
            "</ol>",
            "<li><strong>",
            "</strong>",
            "</li>",
            "morning",
            "afternoon",
            "evening"
        ],
        "VQA": {
            "What is the text of the centered header at the top of the page?": "Weekend Getaway Itinerary",
            "What visual element separates the header from the main content?": "a horizontal line",
            "How many columns are displayed in the layout?": "three",
            "How many activities are listed in the morning column?": "three",
            "How is the text in each morning list item styled?": "italic and lowercase",
            "What content is placed in the afternoon column?": "a brief paragraph inside a div summarizing midday plans",
            "How many events are displayed in the evening column, and how are they styled?": "three events in an ordered list with bold text"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000337",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage that displays the schedule and details for an art exhibition.\n\nFeature Requirements:\n- Use an <h1> element centered at the top of the page with the text \"Art Exhibition Schedule\".\n- Add a <div> element directly under the title with a brief description of the event, limited to 90 characters.\n- Place a horizontal line (<hr>) immediately below the description to separate the header from the content.\n- Divide the content area into three equal sections horizontally, each occupying 33.33% of the available width.\n- In the left section, include a bulleted list of 3 exhibition categories, with each list item styled in italics.\n- In the center section, display a numbered list of 3 featured artists, with each artist's name in bold.\n- In the right section, create a table that contains 2 columns: one for time slots and one for session titles, with one header row and one data row.\n- Ensure the table cells have a visible 1px solid border.\n- Add a <footer> element at the bottom of the page with centered text stating \"Curated by the City Art Council\".",
        "raw_output_metric": [
            "Art Exhibition Schedule",
            "Curated by the City Art Council",
            "<h1>",
            "<div>",
            "<hr>",
            "<ul>",
            "<li>",
            "<em>",
            "<ol>",
            "<strong>",
            "<table>",
            "time slots",
            "session titles",
            "<footer>"
        ],
        "VQA": {
            "What is the centered page title text?": "Art Exhibition Schedule",
            "What is displayed immediately under the title?": "A brief event description (max 90 characters)",
            "What separates the header from the content?": "A horizontal line",
            "Into how many equal sections is the content area divided horizontally?": "3",
            "How many exhibition categories are listed in the left section?": "3",
            "Is the text for each exhibition category styled in italics?": "Yes",
            "How many featured artists are shown in the center section's numbered list?": "3",
            "Are the featured artists’ names displayed in bold?": "Yes",
            "How is the table in the right section structured?": "It has 2 columns with one header row and one data row",
            "What text is centered at the bottom of the page in the footer?": "Curated by the City Art Council"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000338",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a digital flyer webpage for a fictional summer music festival.\n\nFeature Requirements:\n- Display a top centered heading using an <h1> element with the text \"Summer Beats Festival\".\n- Place a centered subheading using an <h2> element with the text \"2024 Event Highlights\" directly below the main heading.\n- Insert a horizontal line (<hr>) immediately under the subheading to separate the header from the main content.\n- Include an introductory paragraph inside a <div> element containing exactly 150 characters that describe the festival.\n- Create a three-column layout below the horizontal line, with each column occupying 33% of the available width.\n- In the left column, display an unordered list with 4 music genres, each list item using bold formatting.\n- In the middle column, include an unordered list with 4 performance times, and ensure all text is in italics.\n- In the right column, show a numbered list with 4 featured artists; each list item must include a colon followed by a brief description.\n- Add a footer at the bottom using a <p> element that centers the event's date and location.",
        "raw_output_metric": [
            "Summer Beats Festival",
            "2024 Event Highlights",
            "<h1>",
            "<h2>",
            "<hr>",
            "<div>",
            "150",
            "33%",
            "<ul>",
            "<ol>",
            "<li>",
            "<b>",
            "<i>",
            ":",
            "<p>"
        ],
        "VQA": {
            "What is the text of the main heading at the top of the page?": "Summer Beats Festival",
            "What subheading appears directly below the main heading?": "2024 Event Highlights",
            "What element visually separates the header from the main content?": "A horizontal line",
            "How many music genres are listed in the left column and how are they formatted?": "4 genres, each in bold",
            "How many performance times are displayed in the middle column and what is their text style?": "4 performance times, all in italics",
            "How many featured artists are presented in the right column and what extra detail follows each artist's name?": "4 featured artists, each followed by a colon and a brief description",
            "Where on the page is the event's date and location shown?": "Centered in the footer"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000339",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign an interactive dashboard for displaying weekly sales trends and performance metrics.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Weekly Sales Dashboard\".\n- Display a centered paragraph (<p> element) below the title summarizing the sales data in a maximum of 120 characters.\n- Insert a horizontal rule (<hr>) directly after the paragraph.\n- Arrange a three-column layout below the horizontal rule, with each column equally occupying one-third of the available width.\n- The left column should contain an unnumbered list with 4 sales regions, with each list item rendered in bold text.\n- The middle column should present a table with 2 columns and 4 rows, where every cell has a defined border.\n- The right column should display a numbered list with 4 performance metrics, with the names of the metrics formatted in italics.\n- Include a centered footer at the bottom containing a small (<small> element) underlined text \"Report\".",
        "raw_output_metric": [
            "Weekly Sales Dashboard",
            "Report",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<ul>",
            "<li>",
            "<b>",
            "<table>",
            "<tr>",
            "<td>",
            "<ol>",
            "<i>",
            "<small>",
            "</small>",
            "<u>",
            "</u>"
        ],
        "VQA": {
            "What is the centered title text displayed at the top of the dashboard?": "Weekly Sales Dashboard",
            "How many characters maximum is allowed in the summary paragraph below the title?": "120",
            "What element immediately follows the summary paragraph?": "Horizontal rule",
            "How many columns are arranged below the horizontal rule?": "3",
            "How many sales regions are listed as bold items in the left column?": "4",
            "How many cells are present in the table in the middle column?": "8",
            "How many rows does the table in the middle column contain?": "4",
            "How many performance metrics are displayed in the numbered list in the right column?": "4",
            "What style is applied to the performance metric names in the right column?": "Italics",
            "What text is visible in the centered footer at the bottom?": "Underlined 'Report' in a small element"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000340",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage layout that presents a weekly event schedule for community gatherings.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Weekly Schedule\".\n- Display one <div> element containing a short description (maximum 100 characters) summarizing the week’s events.\n- Use a horizontal line (<hr>) immediately below the <h1> title.\n- Create a two-column layout beneath the horizontal line, with each column occupying exactly 50% of the width.\n- In the left column, insert an unordered list (<ul>) with exactly 4 event names, each wrapped in a list item (<li>).\n- In the right column, insert an ordered list (<ol>) with exactly 4 corresponding event times, listed one per list item.\n- Format each event name in the left column using bold text.\n- Format each event time in the right column using italics.\n- Add a centered <footer> element at the bottom of the page containing the text \"Schedule provided by Community Center\".",
        "raw_output_metric": [
            "<h1>Weekly Schedule</h1>",
            "<hr>",
            "<div>",
            "50%",
            "<ul>",
            "<li>",
            "<strong>",
            "</strong>",
            "<ol>",
            "<li>",
            "<em>",
            "</em>",
            "<footer>Schedule provided by Community Center</footer>"
        ],
        "VQA": {
            "What is the centered title text at the top of the page?": "Weekly Schedule",
            "Is there a horizontal line immediately below the title?": "Yes",
            "How many columns are displayed beneath the horizontal line and what is their width?": "2 columns, each occupying 50% width",
            "What is contained in the left column of the layout?": "An unordered list with 4 event names in bold",
            "How many event names are listed in the left column?": "4",
            "What styling is applied to the event times in the right column?": "They are formatted in italics",
            "How many event times are shown in the right column?": "4",
            "What text is displayed in the centered footer at the bottom of the page?": "Schedule provided by Community Center",
            "Is there a section containing a short description of the week’s events?": "Yes, in a div with a description up to 100 characters"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000341",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a single-page webpage to showcase a travel itinerary for an upcoming vacation.\n\nFeature Requirements:\n- Include a center-aligned <h1> element with the exact text \"Vacation Itinerary\".\n- Place a horizontal line (<hr>) immediately below the title to separate it from the content.\n- Add a <div> element containing a short description (no more than 100 characters) summarizing the trip.\n- Create a two-column layout where each column occupies exactly 50% of the horizontal space.\n- In the left column, include an unordered list with 3 list items, each representing one day of the trip, with the text in italics.\n- In the right column, display an ordered list with 3 list items, each detailing a travel tip, where the first word of each tip is in bold.\n- Use a <p> element below the two-column layout stating the final note of the itinerary in standard text.\n- Ensure all specified text and elements are clearly nested within standard HTML elements without any external assets.",
        "raw_output_metric": [
            "<h1>",
            "Vacation Itinerary",
            "</h1>",
            "<hr>",
            "<div>",
            "50%",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "</li>",
            "</ul>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "</li>",
            "</ol>",
            "<p>",
            "</p>"
        ],
        "VQA": {
            "What is the text of the main title displayed at the top of the page?": "Vacation Itinerary",
            "How is the main title aligned on the page?": "Center-aligned",
            "What element is placed immediately below the main title?": "Horizontal line",
            "What does the short description in the dedicated section summarize?": "The upcoming trip",
            "How is the content layout structured after the description?": "Two columns",
            "What percentage of horizontal space does each column occupy?": "50%",
            "How many items are in the list representing the days of the trip displayed in the left column?": "3",
            "What formatting style is applied to the text in each list item on the left?": "Italics",
            "How many travel tips are shown in the list on the right column?": "3",
            "What formatting is applied to the first word of each travel tip in the ordered list?": "Bold"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000342",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage that highlights a fictional book launch event.\n\nFeature Requirements:\n- Display a centered title using an <h1> element that contains the text \"Book Launch Event\".\n- Present a description in a single <div> element with a maximum of 100 characters summarizing the event details.\n- Insert a horizontal line (<hr>) immediately after the title for visual separation.\n- Create a two-column layout below the horizontal line, with each column occupying 50% of the canvas width.\n- In the left column, include an unordered list (<ul>) with exactly three list items, each representing a scheduled time for the event.\n- In the right column, include an ordered list (<ol>) with three list items, each showing a speaker’s name styled in italics.\n- Use a distinct background color for the canvas that is clearly applied to the entire page area.\n- Ensure that all elements are plainly visible and that the layout visually distinguishes between the two columns.",
        "raw_output_metric": [
            "Book Launch Event",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div>",
            "</div>",
            "<ul>",
            "<li>",
            "</li>",
            "</ul>",
            "<ol>",
            "<i>",
            "</i>",
            "</ol>",
            "background-color",
            "50%"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Book Launch Event",
            "Is there a visual separation immediately below the title?": "Yes",
            "What is the maximum character count for the event description summary?": "100",
            "How many columns are created below the horizontal line?": "2",
            "How many scheduled time entries are listed in the left column?": "3",
            "How many speaker names are listed in the right column?": "3",
            "Are the speaker names styled to appear in italics?": "Yes",
            "Is a distinct background color applied to the entire page area?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000343",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a canvas drawing of a simple house with clear structural details and labeled sections.\n\nFeature Requirements:\n- Set the canvas dimensions to 600px width by 400px height.\n- Draw a rectangle representing the house body starting at coordinates (200,200) with a width of 200px and a height of 150px.\n- Draw a triangular roof on top of the house using three points: (200,200), (400,200), and (300,100).\n- Draw two rectangular windows on the house body; one at position (230,250) and the other at (330,250), each with dimensions 30px by 30px.\n- Draw a door as a rectangle with a width of 40px and a height of 60px positioned at (280,290).\n- Add text \"Window A\" centered above the left window.\n- Add text \"Window B\" centered above the right window.\n- Add text \"Entrance\" centered above the door.\n- Ensure that all shapes and text use explicit and measurable coordinates and dimensions.",
        "raw_output_metric": [
            "<canvas",
            "width=\"600\"",
            "height=\"400\"",
            "fillRect(200,200,200,150)",
            "moveTo(200,200)",
            "lineTo(400,200)",
            "lineTo(300,100)",
            "fillRect(230,250,30,30)",
            "fillRect(330,250,30,30)",
            "fillRect(280,290,40,60)",
            "Window A",
            "Window B",
            "Entrance"
        ],
        "VQA": {
            "What are the dimensions of the canvas?": "600px width by 400px height",
            "Where is the house body drawn and what are its dimensions?": "The house body starts at (200,200) with a width of 200px and a height of 150px",
            "What are the coordinates used to draw the triangular roof?": "The roof uses the points (200,200), (400,200), and (300,100)",
            "How many windows are drawn and where are they positioned?": "Two windows; one at (230,250) and one at (330,250)",
            "What are the dimensions of each window?": "Each window is 30px by 30px",
            "Where is the door located and what are its dimensions?": "The door is drawn at (280,290) with a width of 40px and a height of 60px",
            "Which text labels are added and where are they placed?": "Text 'Window A' is centered above the left window, 'Window B' above the right window, and 'Entrance' above the door"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000344",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a single webpage that presents a recipe for a favorite dish.\n\nFeature Requirements:\n- Include an <h1> element centered at the top with the text \"Cooking Delight\" as the webpage title.\n- Insert a horizontal line (<hr>) immediately below the title to separate the header from the content.\n- Contain a <p> element with a short description of the recipe, limited to 120 characters.\n- Implement a two-column layout below the horizontal line, with both columns occupying exactly 50% of the available width.\n- In the left column, provide an unordered (bulleted) list of 4 ingredients, each formatted in italics.\n- In the right column, display an ordered (numbered) list of 4 cooking steps, with the first step highlighted in bold.\n- Follow the two-column content with another horizontal line (<hr>) to visually end the recipe section.\n- Add a centered <footer> section at the bottom that includes the text \"Happy Cooking\".",
        "raw_output_metric": [
            "<h1>",
            "Cooking Delight",
            "<hr>",
            "<p>",
            "50%",
            "<ul>",
            "<li>",
            "<em>",
            "<ol>",
            "<strong>",
            "<footer>",
            "Happy Cooking"
        ],
        "VQA": {
            "What is the centered page title at the top?": "Cooking Delight",
            "Is there a horizontal line immediately below the title?": "Yes",
            "What is the maximum character limit for the recipe description?": "120",
            "How many ingredients are listed in the left column?": "4",
            "How are the ingredients styled?": "Italics",
            "How many cooking steps are in the right column?": "4",
            "Is the first cooking step emphasized in any way?": "Yes, it is bold",
            "How many horizontal lines are present in the recipe section?": "2",
            "What text is shown in the centered footer at the bottom?": "Happy Cooking",
            "What fraction of the page width does each column occupy?": "50%"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000345",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a simple travel dashboard showcasing an upcoming itinerary.\n\nFeature Requirements:\n- Use a centered <h1> element with the text \"Travel Itinerary\" at the top of the canvas.\n- Insert a horizontal line (<hr>) immediately below the header to separate the title from the content.\n- Create a main container using a <div> element that is 900px wide and centered horizontally.\n- Divide the container into two equal side-by-side <div> sections, each occupying 50% of the container's width.\n- In the left section, include a subheading using an <h2> element with the text \"Departure Details\", followed by a paragraph of exactly 150 characters describing the travel plan.\n- In the right section, display an unordered list (<ul>) with 3 list items where each item is written in bold (<b>) to highlight key destinations.\n- Below the two sections, add a <footer> element containing a centered <p> element with the underlined text \"Enjoy Your Journey\".\n- Ensure all textual content is clearly defined within its respective HTML elements without referencing any external assets.",
        "raw_output_metric": [
            "Travel Itinerary",
            "<hr>",
            "900px",
            "Departure Details",
            "<ul>",
            "<li>",
            "<b>",
            "Enjoy Your Journey",
            "<footer>",
            "<p>"
        ],
        "VQA": {
            "What is the text of the centered title at the top of the page?": "Travel Itinerary",
            "Is there a horizontal line immediately below the header?": "Yes",
            "What is the width of the main container in pixels?": "900px",
            "Into how many sections is the main container divided?": "2",
            "What is the subheading text in the left section?": "Departure Details",
            "How many characters does the paragraph describing the travel plan contain?": "150",
            "How many key destinations are listed in the right section?": "3",
            "Are the list items in the right section formatted in bold?": "Yes",
            "What text is displayed in the footer's centered paragraph?": "Enjoy Your Journey",
            "Is the footer text underlined?": "Yes"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000346",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a webpage showcasing a local art exhibition event.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Art Exhibition 2023\".\n- Place a horizontal line (<hr>) immediately below the title.\n- Under the horizontal line, create a two-section layout with the left section occupying 40% of the width and the right section occupying 60% of the width.\n- In the left section, display a paragraph describing the event in exactly 150 characters.\n- In the right section, include an ordered list with exactly 4 elements detailing featured artworks.\n- Each list item in the ordered list must start with a bolded artist's name followed by a colon and the artwork title.\n- Enclose the entire event description in a <div> element with a border property set to 1px solid black.\n- Add a subheading (<h2>) above the ordered list with the text \"Featured Artworks\", aligned to the left.",
        "raw_output_metric": [
            "Art Exhibition 2023",
            "<h1>",
            "</h1>",
            "<hr>",
            "<div",
            "border: 1px solid black",
            "<p>",
            "</p>",
            "40%",
            "60%",
            "<h2>",
            "Featured Artworks",
            "</h2>",
            "<ol>",
            "</ol>",
            "<li>",
            "</li>",
            "<b>",
            "</b>",
            ":"
        ],
        "VQA": {
            "What is the text displayed in the centered title at the top of the page?": "Art Exhibition 2023",
            "Is there a horizontal line immediately following the title?": "Yes",
            "How is the content below the horizontal line organized?": "Into two sections with left at 40% width and right at 60% width",
            "How many characters does the event description paragraph in the left section contain?": "150",
            "How many items are present in the ordered list in the right section?": "4",
            "How is the artist's name formatted in each list item of the ordered list?": "Bolded",
            "What is the text of the subheading above the ordered list?": "Featured Artworks",
            "How is the subheading aligned?": "Left",
            "Is the entire event description enclosed within a bordered container?": "Yes, with a 1px solid black border"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000347",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nCreate a webpage displaying the schedule for a futuristic tech conference.\n\nFeature Requirements:\n- Insert a centered title using an <h1> element with the text \"Tech Future Summit 2040\".\n- Place a <p> element immediately below the title containing exactly 110 characters that summarize the conference’s focus.\n- Add a horizontal rule (<hr>) under the paragraph to clearly separate the header from the main content.\n- Create a two-column layout below the horizontal line where each column occupies 50% of the available width.\n- In the left column, include an unordered list featuring 4 session topics, ensuring each topic is written in italics.\n- In the right column, include an ordered list of 4 corresponding session times, with each time value displayed in bold.\n- End the page with a final <div> element that contains a call-to-action message limited to exactly 50 characters.",
        "raw_output_metric": [
            "<h1>",
            "Tech Future Summit 2040",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<ul>",
            "<li>",
            "<i>",
            "</i>",
            "</li>",
            "</ul>",
            "<ol>",
            "<li>",
            "<b>",
            "</b>",
            "</li>",
            "</ol>",
            "<div>",
            "</div>"
        ],
        "VQA": {
            "What is the title text displayed at the top of the page?": "Tech Future Summit 2040",
            "How many characters are in the summary paragraph below the title?": "110",
            "What element visually separates the header from the main content?": "Horizontal rule",
            "How is the main content area organized?": "Two columns of equal width",
            "How many session topics are listed in the left column?": "4",
            "Are the session topics styled in italics?": "Yes",
            "How many session times are listed in the right column?": "4",
            "Are the session times styled in bold?": "Yes",
            "How many characters does the call-to-action message contain?": "50"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000348",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nDesign a dynamic webpage that displays a project management dashboard.\n\nFeature Requirements:\n- Create a centered <h1> element with the text \"Project Dashboard\" at the top of the canvas.\n- Immediately below the title, include a <p> element containing a mission statement that is exactly 100 characters long.\n- Insert a horizontal line (<hr>) to clearly separate the title and mission statement from the content below.\n- Below the <hr>, implement a three-column layout where each column occupies approximately 33% of the canvas width.\n- In the left column, include an unordered list (<ul>) displaying 4 key project stages, ensuring each list item has underlined text.\n- In the center column, add an ordered list (<ol>) with 3 tasks, where each list item starts with a task title written in bold and uses spelled-out numbers (one, two, three) to indicate the task order.\n- In the right column, display a <div> containing a <p> element with a brief description of the project team, limited to 90 characters.\n- Place a vertical divider between the center and right columns by using a <div> element styled with a visible border.\n- Ensure all textual elements are clearly visible and structured according to the layout instructions.",
        "raw_output_metric": [
            "Project Dashboard",
            "<h1>",
            "<p>",
            "<hr>",
            "33%",
            "<ul>",
            "<li>",
            "<u>",
            "<ol>",
            "<b>one</b>",
            "<b>two</b>",
            "<b>three</b>",
            "<div>",
            "border:",
            "project team"
        ],
        "VQA": {
            "What is the text displayed in the centered title at the top of the canvas?": "Project Dashboard",
            "How many characters does the mission statement contain?": "100",
            "What visual element separates the title and mission statement from the content below?": "A horizontal line",
            "How many columns are present in the layout below the horizontal line?": "Three",
            "How many underlined list items are shown in the left column?": "4",
            "What text formatting is applied to each list item in the left column?": "Underlined",
            "How many tasks are listed in the center column's ordered list?": "3",
            "How are the task numbers formatted in the center column?": "Spelled-out words (one, two, three)",
            "How many characters is the project team description limited to?": "90",
            "What visual element forms the division between the center and right columns?": "A vertical divider with a visible border"
        }
    },
    {
        "task_name": "Text to Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "task_id": "000349",
        "input_type": "Text",
        "output_type": "Canvas",
        "rendering": true,
        "query": "Please output Canvas:\n\nTask:\nGenerate a simple webpage displaying a fictional restaurant menu overview.\n\nFeature Requirements:\n- Place a centered <h1> element at the top with the text \"Gourmet Delights\".\n- Below the title, include a <div> element with a brief 100-character description of the restaurant's ambiance.\n- Insert a horizontal line (<hr>) directly under the description to separate the header from the content.\n- Create a two-column layout immediately following the horizontal line, with each column occupying exactly 50% of the page width.\n- In the left column, add an unordered list with exactly 3 chef recommendations, each rendered in italics.\n- In the right column, include an ordered list with exactly 3 daily specials; each special should begin with a bold dish name.\n- Under the two-column layout, include a centered <footer> element containing a short message about booking reservations.\n- Ensure all text elements are clearly visible and uniformly spaced without any external styling.",
        "raw_output_metric": [
            "<h1>Gourmet Delights</h1>",
            "<div>",
            "<hr>",
            "50%",
            "<ul>",
            "<em>",
            "<li>",
            "<ol>",
            "<strong>",
            "<footer>",
            "booking reservations"
        ],
        "VQA": {
            "What is the centered title text displayed at the top of the page?": "Gourmet Delights",
            "How many characters does the brief description under the title contain?": "100 characters",
            "What visual element immediately follows the description to separate the header from the rest of the content?": "A horizontal line",
            "How is the content organized immediately after the horizontal line?": "It is split into two columns, each occupying 50% of the page width",
            "How many items are listed in the chef recommendations and how are they styled?": "3 items, each rendered in italics",
            "How many items are included in the daily specials and what styling is applied to their dish names?": "3 items, with each special's dish name in bold",
            "What does the centered footer element communicate?": "A short message about booking reservations"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000400",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML page that transforms a short narrative about a notable scientific discovery into a structured document.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Discovery Overview\".\n- Display the provided narrative inside a <p> element immediately following the title.\n- Insert a horizontal rule using the <hr> element after the paragraph to separate content sections.\n- Add a subheading with an <h2> element titled \"Event Details\".\n- Create an ordered list using an <ol> element containing exactly 3 items: \"Date of Discovery\", \"Location\", and \"Research Team\".\n- Place each list item in an <li> element in the order specified.\n- Conclude the HTML structure with a <footer> element that contains the text \"Document End\".",
        "raw_output_metric": [
            "Discovery Overview",
            "Event Details",
            "Date of Discovery",
            "Location",
            "Research Team",
            "Document End",
            "<h1>",
            "<p>",
            "<hr>",
            "<h2>",
            "<ol>",
            "<li>Date of Discovery</li>",
            "<li>Location</li>",
            "<li>Research Team</li>",
            "<footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Discovery Overview",
            "Which element immediately follows the main title to present the narrative text?": "A paragraph element",
            "What visual element is used after the narrative to separate the sections?": "A horizontal rule",
            "What is the text shown as the subheading below the horizontal line?": "Event Details",
            "How many items are shown in the ordered list?": "3",
            "What are the list items displayed in the ordered list, in order?": "Date of Discovery, Location, Research Team",
            "What text is displayed in the footer at the bottom of the page?": "Document End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000401",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nCreate an HTML layout that presents a brief description about a bicycle ride along with detailed route information.\n\nFeature Requirements:\n- Include a header using an <h1> element with the text \"Bicycle Ride Overview\".\n- Display the descriptive text inside a <p> element that immediately follows the header.\n- Insert a line break using a <br> element directly after the introductory paragraph.\n- Add a subheader using an <h2> element with the text \"Route Details\" immediately below the line break.\n- Follow the subheader with another <p> element that provides a brief explanation of the route.\n- Present an ordered list using an <ol> element containing exactly 4 items in this order: \"Start Point\", \"Mid Point\", \"Scenic Spot\", \"End Point\".\n- Create a section using a <section> element with the id \"extra-info\" that contains the text \"Additional Notes\".\n- End the HTML output with a <footer> element that includes the text \"Ride Summary\".",
        "raw_output_metric": [
            "Bicycle Ride Overview",
            "<br>",
            "Route Details",
            "Start Point",
            "Mid Point",
            "Scenic Spot",
            "End Point",
            "extra-info",
            "Additional Notes",
            "Ride Summary"
        ],
        "VQA": {
            "What is the text in the main header at the top of the page?": "Bicycle Ride Overview",
            "What element immediately follows the main header to provide a brief description?": "Paragraph with text",
            "What is the text of the subheader under the line break?": "Route Details",
            "How many items are listed in the ordered list?": "4",
            "What is the third item in the ordered list?": "Scenic Spot",
            "What text is displayed in the section identified by 'extra-info'?": "Additional Notes",
            "What text appears in the footer at the bottom of the page?": "Ride Summary"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000402",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic park into an HTML structure.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Historic Park Snapshot\".\n- Display the original paragraph inside a <p> element immediately after the main header.\n- Add an ordered list (<ol>) element following the paragraph containing exactly 4 items: \"Location\", \"Establishment Date\", \"Notable Landmarks\", and \"Operating Hours\" in that precise order.\n- Each item in the ordered list must be enclosed in an <li> element.\n- Insert a horizontal rule (<hr>) element immediately after the ordered list for visual separation.\n- Include a secondary header using an <h2> element titled \"Park Overview\" directly under the horizontal rule.\n- Create a table (<table> element) immediately after the secondary header containing one header row with two <th> elements labeled \"Aspect\" and \"Details\", and one data row with two corresponding <td> elements containing any descriptive text.\n- Conclude the HTML structure with a <footer> element that contains the text \"End of Historic Park Snapshot\".",
        "raw_output_metric": [
            "Historic Park Snapshot",
            "Location",
            "Establishment Date",
            "Notable Landmarks",
            "Operating Hours",
            "Park Overview",
            "Aspect",
            "Details",
            "End of Historic Park Snapshot"
        ],
        "VQA": {
            "What is the text of the main header at the top of the page?": "Historic Park Snapshot",
            "What content follows immediately after the main header?": "A paragraph describing the historic park",
            "How many items are in the ordered list displayed beneath the paragraph?": "4",
            "What are the four items listed in the ordered list in order?": "Location, Establishment Date, Notable Landmarks, Operating Hours",
            "Which element is placed immediately after the ordered list to visually separate sections?": "Horizontal rule",
            "What is the text of the secondary header displayed below the horizontal rule?": "Park Overview",
            "What are the two column headers in the table shown under the secondary header?": "Aspect and Details",
            "What text is contained in the footer at the bottom of the page?": "End of Historic Park Snapshot"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000403",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML document from a text description of an ancient castle that outlines its architectural details and historical background.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Ancient Castle Overview\".\n- Display the provided castle description within a <p> element immediately following the title.\n- Insert a horizontal rule using the <hr> element directly after the description to separate content areas.\n- Add a subheading using an <h2> element with the text \"Architectural Features\".\n- Create an unordered list with exactly 3 items (\"Fortified Walls\", \"Towering Spires\", \"Drawbridge Entrance\") using a <ul> element, with each item inside an <li> element in the specified order.\n- Add another subheading using an <h2> element with the text \"Historical Background\".\n- Place a second paragraph inside a <p> element under the \"Historical Background\" subheading that briefly explains the castle's significance.\n- End the HTML document with a closing <footer> element containing the text \"Information Ends Here\".",
        "raw_output_metric": [
            "Ancient Castle Overview",
            "Architectural Features",
            "Fortified Walls",
            "Towering Spires",
            "Drawbridge Entrance",
            "Historical Background",
            "Information Ends Here"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Ancient Castle Overview",
            "What element immediately follows the main title?": "A paragraph with the castle description",
            "How many horizontal rules are present in the document?": "1",
            "What are the three items listed under Architectural Features?": "Fortified Walls, Towering Spires, Drawbridge Entrance",
            "What is the subheading for the historical section?": "Historical Background",
            "What text does the footer display?": "Information Ends Here",
            "How many list items are shown in the Architectural Features section?": "3"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000404",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing an ancient castle into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Castle Overview\" at the very top.\n- Display the original paragraph inside a <p> element immediately below the title.\n- Add a horizontal line using the <hr> element directly after the paragraph.\n- Insert a section labeled \"Historical Facts\" using an <h2> element that follows the horizontal line.\n- Within the \"Historical Facts\" section, include an ordered list using the <ol> element containing exactly 4 items in this order: \"Year Built\", \"Architectural Style\", \"Notable Events\", and \"Restoration\".\n- Immediately after the ordered list, add a separate paragraph using a <p> element with the text \"Visitor Information: Open daily from 9 AM to 6 PM.\"\n- Conclude the HTML document with a <footer> element containing the text \"End of the Castle Overview\".",
        "raw_output_metric": [
            "Castle Overview",
            "<h1>",
            "<p>",
            "<hr>",
            "Historical Facts",
            "<h2>",
            "<ol>",
            "Year Built",
            "Architectural Style",
            "Notable Events",
            "Restoration",
            "Visitor Information: Open daily from 9 AM to 6 PM.",
            "<footer>End of the Castle Overview</footer>"
        ],
        "VQA": {
            "What is the title text displayed at the very top of the page?": "Castle Overview",
            "What element directly follows the title in the structure?": "A paragraph containing the castle description",
            "Which visual element is placed immediately after the paragraph?": "A horizontal line",
            "What section header appears after the horizontal line?": "Historical Facts",
            "How many items are listed in the ordered list under the 'Historical Facts' section?": "4",
            "What are the items in the ordered list, in order?": "Year Built, Architectural Style, Notable Events, Restoration",
            "What information is provided in the paragraph following the ordered list?": "Visitor Information: Open daily from 9 AM to 6 PM.",
            "What text is displayed in the footer at the bottom of the page?": "End of the Castle Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000405",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a local coffee shop's daily special into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Daily Special\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph.\n- Include a section titled \"Ingredients\" using an <h2> element.\n- Create a bullet point list inside a <ul> element with exactly 4 items: \"Coffee\", \"Milk\", \"Sugar\", and \"Cinnamon\", each in its own <li> element in the specified order.\n- Include an additional section with an <h2> element titled \"Pricing\", followed by a <p> element containing the special's price starting with a dollar sign.\n- End the HTML document with a closing <footer> element containing the text \"Enjoy Your Cup!\".",
        "raw_output_metric": [
            "Daily Special",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "Ingredients",
            "<h2>",
            "</h2>",
            "<ul>",
            "<li>Coffee</li>",
            "<li>Milk</li>",
            "<li>Sugar</li>",
            "<li>Cinnamon</li>",
            "</ul>",
            "Pricing",
            "$",
            "<footer>Enjoy Your Cup!</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Daily Special",
            "What content follows immediately after the main title?": "A paragraph describing the local coffee shop's daily special.",
            "What element visually separates the paragraph from the rest of the content?": "A horizontal line.",
            "What is the heading title for the ingredients section?": "Ingredients",
            "How many items are shown in the ingredients list?": "4",
            "What are the four ingredients listed under the Ingredients section in order?": "Coffee, Milk, Sugar, and Cinnamon",
            "What is the heading for the pricing section?": "Pricing",
            "What does the pricing section display?": "A paragraph containing the special's price starting with a dollar sign",
            "What message is shown within the footer at the bottom of the page?": "Enjoy Your Cup!"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000406",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML page that provides detailed information about a historical landmark.\n\nFeature Requirements:\n- Start with an <h1> element titled \"Historical Landmark Overview\" at the top of the page.\n- Immediately after, include an <h2> element labeled \"Basic Facts\".\n- Under \"Basic Facts\", display an unordered list (<ul>) containing exactly 3 items: \"Established: [Year]\", \"Location: [City]\", and \"Architect: [Name]\".\n- Add a <p> element right after the list that includes a brief paragraph describing the landmark’s history.\n- Insert an ordered list (<ol>) below the paragraph consisting of exactly 4 key historical events.\n- Conclude the page with a <footer> element that has the text \"Information compiled by the History Department\".",
        "raw_output_metric": [
            "<h1>Historical Landmark Overview</h1>",
            "<h2>Basic Facts</h2>",
            "<li>Established: [Year]</li>",
            "<li>Location: [City]</li>",
            "<li>Architect: [Name]</li>",
            "<footer>Information compiled by the History Department</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Historical Landmark Overview",
            "What subheading appears immediately after the main title?": "Basic Facts",
            "How many items are listed in the unordered list under 'Basic Facts'?": "3",
            "What are the three facts mentioned in the unordered list?": "Established: [Year], Location: [City], and Architect: [Name]",
            "What element directly follows the unordered list and what does it describe?": "A paragraph that describes the landmark’s history",
            "How many historical events are listed in the ordered list?": "4",
            "What text is shown inside the footer element at the bottom of the page?": "Information compiled by the History Department"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000407",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a migratory bird's habitat into an HTML structure.\n\nFeature Requirements:\n- Use an <h1> element at the top containing the text \"Wildlife Habitat\".\n- Insert a <p> element immediately below the heading with a sentence detailing the natural environment of a migratory bird.\n- Add a horizontal line using the <hr> element right after the paragraph.\n- Include an <h2> element with the text \"Migration Patterns\" immediately following the horizontal line.\n- Provide an ordered list using an <ol> element directly after the \"Migration Patterns\" heading, with exactly 3 <li> items in this order: \"Spring\", \"Summer\", and \"Autumn\".\n- Insert another <h2> element with the text \"Geographical Zones\" after the ordered list.\n- Create a bullet list using a <ul> element immediately below the \"Geographical Zones\" heading, containing exactly 4 <li> items in the following order: \"Coastal\", \"Inland\", \"Mountainous\", and \"Desert\".\n- End the HTML with a <footer> element that contains the text \"Report Generated\".\n- Ensure the elements appear in the exact order specified above without any additional content or structural changes.",
        "raw_output_metric": [
            "Wildlife Habitat",
            "Migration Patterns",
            "Spring",
            "Summer",
            "Autumn",
            "Geographical Zones",
            "Coastal",
            "Inland",
            "Mountainous",
            "Desert",
            "Report Generated"
        ],
        "VQA": {
            "What is the text of the main heading at the top of the page?": "Wildlife Habitat",
            "What type of content is immediately below the main heading?": "A paragraph detailing the natural environment of a migratory bird.",
            "What element appears right after the paragraph?": "A horizontal line.",
            "What is the text in the heading that follows the horizontal line?": "Migration Patterns",
            "How many items are in the ordered list under 'Migration Patterns'?": "3",
            "What are the three items listed in the ordered list under 'Migration Patterns'?": "Spring, Summer, Autumn",
            "What is the text of the heading that comes after the ordered list?": "Geographical Zones",
            "How many items are in the bullet list under 'Geographical Zones'?": "4",
            "What are the four items in the bullet list under 'Geographical Zones'?": "Coastal, Inland, Mountainous, Desert",
            "What text is displayed in the footer of the page?": "Report Generated"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000408",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic museum into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Museum Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly following the paragraph.\n- Insert a section header with an <h2> element bearing the text \"Exhibits\".\n- Include a bullet list using a <ul> element containing exactly 3 items: \"Ancient Artifacts\", \"Modern Art\", and \"Interactive Displays\", each provided in its own <li> element in the specified order.\n- End the HTML document with a <footer> element containing the text \"Information Provided by Our Museum\".",
        "raw_output_metric": [
            "<h1>",
            "Museum Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Exhibits",
            "<ul>",
            "<li>",
            "Ancient Artifacts",
            "Modern Art",
            "Interactive Displays",
            "<footer>",
            "Information Provided by Our Museum"
        ],
        "VQA": {
            "What is the text displayed in the main header at the top?": "Museum Overview",
            "What type of element contains the descriptive paragraph?": "A paragraph element",
            "What element is used to visually separate the paragraph from the section header?": "A horizontal line",
            "What text is shown in the secondary section header?": "Exhibits",
            "How many items are in the bullet list?": "3",
            "What are the items listed in the bullet list?": "Ancient Artifacts, Modern Art, Interactive Displays",
            "What is the text provided in the footer of the document?": "Information Provided by Our Museum"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000409",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historical museum by a lakeside into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Museum Overview\".\n- Place the original paragraph inside a <p> element immediately after the title.\n- Insert a horizontal line using the <hr> element directly below the paragraph.\n- Add a subheading using an <h2> element with the text \"Exhibits List\".\n- Create an ordered list using the <ol> element with exactly 4 items: \"Ancient Artifacts\", \"Historical Documents\", \"Interactive Displays\", and \"Virtual Tours\", in that specific order.\n- Immediately following the list, include a <p> element containing the text \"Visit us for more details\".\n- End the HTML output with a <footer> element that contains the text \"End of Museum Details\".",
        "raw_output_metric": [
            "<h1>",
            "Museum Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Exhibits List",
            "<ol>",
            "Ancient Artifacts",
            "Historical Documents",
            "Interactive Displays",
            "Virtual Tours",
            "Visit us for more details",
            "<footer>",
            "End of Museum Details"
        ],
        "VQA": {
            "What is the title text displayed at the top of the page?": "Museum Overview",
            "What type of content is described in the paragraph immediately below the title?": "A historical museum by a lakeside",
            "What element appears directly after the descriptive paragraph?": "A horizontal line",
            "What is the text of the subheading above the exhibits list?": "Exhibits List",
            "How many items are in the ordered list and what are they in order?": "4; Ancient Artifacts, Historical Documents, Interactive Displays, Virtual Tours",
            "What text is shown in the paragraph immediately following the ordered list?": "Visit us for more details",
            "What text is included in the footer at the end of the page?": "End of Museum Details"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000410",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nCreate an HTML document that transforms a short narrative about a coastal town into a structured webpage.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Coastal Tale\" at the top.\n- Display the provided narrative inside a <p> element immediately following the title.\n- Add a horizontal line using the <hr> element directly beneath the paragraph for separation.\n- Include a section titled \"Town Highlights\" using an <h2> element right after the horizontal line.\n- Display an ordered list within an <ol> element containing exactly 3 items: \"Harbor\", \"Market\", and \"Festival\" in the order specified.\n- Insert a block quote using the <blockquote> element after the ordered list with the text \"Experience the charm of the sea.\"\n- End the HTML document with a closing <footer> element containing the text \"End of Story\".",
        "raw_output_metric": [
            "Coastal Tale",
            "Town Highlights",
            "Harbor",
            "Market",
            "Festival",
            "Experience the charm of the sea.",
            "End of Story"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Coastal Tale",
            "What element appears immediately after the title?": "A paragraph containing the narrative about the coastal town",
            "Which element is used to visually separate the narrative from the next section?": "A horizontal line",
            "What is the title of the section following the horizontal line?": "Town Highlights",
            "How many items are listed under the 'Town Highlights' section?": "3",
            "What are the items listed in the ordered list and in what order?": "Harbor, Market, Festival",
            "What text is shown inside the block quote?": "Experience the charm of the sea.",
            "What text can be found at the end of the page in the footer?": "End of Story"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000411",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a travel destination into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Destination Overview\".\n- Display the original text inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element immediately following the paragraph.\n- Include a section title using an <h2> element with the text \"Key Attractions\".\n- Insert an unordered list within a <ul> element containing exactly 3 items in this order: \"Museum\", \"Park\", \"Historic Site\".\n- Each list item must be wrapped in an <li> element.\n- Add a second section title using an <h2> element with the text \"Travel Tips\".\n- Include a paragraph containing additional travel advice immediately following the second section title.\n- End the HTML output with a closing <footer> element that contains the text \"Happy Travels!\"",
        "raw_output_metric": [
            "<h1>",
            "Destination Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Key Attractions",
            "<ul>",
            "<li>",
            "Museum",
            "<li>",
            "Park",
            "<li>",
            "Historic Site",
            "<h2>",
            "Travel Tips",
            "<p>",
            "<footer>",
            "Happy Travels!"
        ],
        "VQA": {
            "What is the text used for the main title?": "Destination Overview",
            "Which element displays the travel destination description?": "p",
            "What element is placed immediately after the paragraph?": "hr",
            "What is the title of the first section in the content?": "Key Attractions",
            "How many items are present in the unordered list?": "3",
            "What are the items listed in the 'Key Attractions' section and in what order?": "Museum, Park, Historic Site",
            "What is the title of the second section?": "Travel Tips",
            "Which element contains additional travel advice following the 'Travel Tips' section?": "p",
            "What text is contained within the footer?": "Happy Travels!"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000412",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief passage describing a scenic national park into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"National Park Overview\".\n- Display the original passage inside a <div> element immediately following the title.\n- Insert a horizontal line using the <hr> element directly after the original passage.\n- Add a section header using an <h2> element with the text \"Park Highlights\".\n- Display an ordered list (<ol>) with exactly 4 items in the following order: \"Trails\", \"Wildlife\", \"Landscapes\", \"Historical Sites\", each wrapped in an <li> element.\n- Include a paragraph (<p>) after the list that briefly describes the best time to visit.\n- Conclude the HTML with a closing <footer> element containing the text \"End of Overview\".",
        "raw_output_metric": [
            "<h1>",
            "National Park Overview",
            "<div>",
            "<hr>",
            "<h2>",
            "Park Highlights",
            "<ol>",
            "Trails",
            "Wildlife",
            "Landscapes",
            "Historical Sites",
            "<p>",
            "best time to visit",
            "<footer>",
            "End of Overview"
        ],
        "VQA": {
            "What is the text of the main title displayed at the top of the page?": "National Park Overview",
            "Which element immediately follows the main title?": "A division containing the original scenic passage",
            "What element is used to visually separate the original passage from the next section?": "A horizontal line",
            "What is the header text for the section that lists park features?": "Park Highlights",
            "How many items are included in the ordered list for park highlights?": "4",
            "What are the four items listed in order within the ordered list?": "Trails, Wildlife, Landscapes, Historical Sites",
            "What element follows the ordered list, and what does it describe?": "A paragraph describing the best time to visit",
            "What text is displayed in the final footer of the page?": "End of Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000413",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that presents an overview of a historical monument.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Monument Overview\".\n- Present a short descriptive paragraph inside a <p> element that explains the monument's background, placed immediately below the title.\n- Insert a horizontal line using an <hr> element following the paragraph to separate content.\n- Add a section header titled \"Historical Significance\" using an <h2> element.\n- Create an ordered list with an <ol> element containing exactly 3 <li> items: \"Foundation Year\", \"Architectural Style\", and \"Cultural Impact\" in that specific order.\n- Enclose each list item in an <li> element, ensuring they appear sequentially.\n- End the HTML document with a <footer> element that contains the text \"Information Verified by History Board\".\n- Ensure that every HTML element is properly nested and closed.",
        "raw_output_metric": [
            "<h1>",
            "Monument Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Historical Significance",
            "<ol>",
            "<li>",
            "Foundation Year",
            "Architectural Style",
            "Cultural Impact",
            "<footer>",
            "Information Verified by History Board"
        ],
        "VQA": {
            "What is the text used for the main title of the page?": "Monument Overview",
            "Which element immediately follows the title to describe the monument's background?": "Paragraph",
            "What visual separator appears right after the description paragraph?": "Horizontal line",
            "What section header introduces the details on historical importance?": "Historical Significance",
            "How many items are listed in the ordered list?": "3",
            "What are the three items listed in the ordered list, in order?": "Foundation Year, Architectural Style, Cultural Impact",
            "What text is displayed in the footer of the document?": "Information Verified by History Board"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000414",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that displays a description of a mountain landscape scene.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mountain Vista\".\n- Display the original mountain scene paragraph inside a <p> element immediately after the title.\n- Add a horizontal rule using the <hr> element directly below the paragraph to separate content.\n- Include a sub-section heading using an <h2> element with the text \"Key Landmarks\".\n- Create an ordered list using an <ol> element containing exactly 4 items: \"Peak\", \"River\", \"Forest\", and \"Valley\"; each item must be wrapped in an <li> element.\n- Immediately following the ordered list, add another sub-section heading using an <h3> element with the text \"Weather Details\".\n- Insert a paragraph using a <p> element that includes the text \"Temperature Today: 15°C, Wind Speed: 10 km/h\".\n- Conclude the HTML document with a closing <footer> element containing the text \"End of Landscape Description\".",
        "raw_output_metric": [
            "Mountain Vista",
            "<hr>",
            "Key Landmarks",
            "Peak",
            "River",
            "Forest",
            "Valley",
            "Weather Details",
            "Temperature Today: 15°C, Wind Speed: 10 km/h",
            "End of Landscape Description"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Mountain Vista",
            "What is the immediate element displayed below the main title?": "A paragraph describing a mountain landscape scene",
            "What visual element is used to separate the paragraph from the subsequent content?": "A horizontal rule",
            "What is the text of the sub-section heading that appears after the horizontal rule?": "Key Landmarks",
            "What four items are listed in the ordered list?": "Peak, River, Forest, and Valley",
            "What sub-heading appears immediately after the ordered list?": "Weather Details",
            "What details are provided in the paragraph under the 'Weather Details' section?": "Temperature Today: 15°C, Wind Speed: 10 km/h",
            "What is the text shown in the footer at the bottom of the document?": "End of Landscape Description"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000415",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing an ancient ruin into an HTML structure.\n\nFeature Requirements:\n- Include a header using an <h1> element with the text \"Ancient Ruins\".\n- Display the original paragraph inside a <p> element immediately after the header.\n- Insert a horizontal line using an <hr> element directly below the paragraph.\n- Add a subsection with an <h2> element labeled \"Historical Facts\".\n- Create an unordered list using a <ul> element containing exactly 4 items: \"Established\", \"Purpose\", \"Discovery\", and \"Preservation\", with each item wrapped in an <li> element in the order specified.\n- Wrap a brief explanation of the ruin’s significance inside an <article> element immediately following the list.\n- End the HTML document with a closing <footer> element containing the text \"End of Report\".",
        "raw_output_metric": [
            "<h1>",
            "Ancient Ruins",
            "<p>",
            "<hr>",
            "<h2>",
            "Historical Facts",
            "<ul>",
            "<li>",
            "Established",
            "Purpose",
            "Discovery",
            "Preservation",
            "<article>",
            "<footer>",
            "End of Report"
        ],
        "VQA": {
            "What is the text of the main header?": "Ancient Ruins",
            "Which element contains the short descriptive paragraph?": "p element",
            "What is displayed immediately below the descriptive paragraph?": "A horizontal line",
            "What is the text of the subsection header?": "Historical Facts",
            "How many items are present in the unordered list?": "4",
            "What are the four list items in the unordered list and in what order?": "Established, Purpose, Discovery, Preservation",
            "Which element wraps the explanation of the ruin’s significance?": "article element",
            "What is the text contained in the footer at the end of the document?": "End of Report"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000416",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing an ancient artifact into an HTML structure.\n\nFeature Requirements:\n- Start with an <h1> element displaying the text \"Ancient Artifact Insight\".\n- Place the provided paragraph inside a <p> element immediately after the title.\n- Insert an <hr> element right after the paragraph to separate sections.\n- Create an <h2> element with the text \"Artifact Details\" to serve as a section title.\n- Include an ordered list (<ol>) containing exactly 4 <li> items in this order: \"Origin\", \"Age\", \"Material\", \"Significance\".\n- Add a <section> element with an <h3> child element titled \"Historical Context\".\n- Within the \"Historical Context\" section, include a <p> element with additional supporting information.\n- End the HTML structure with a <footer> element that contains the text \"Artifact Examination End\".",
        "raw_output_metric": [
            "Ancient Artifact Insight",
            "<h1>",
            "<p>",
            "<hr>",
            "Artifact Details",
            "<h2>",
            "<ol>",
            "Origin",
            "Age",
            "Material",
            "Significance",
            "<li>",
            "<section>",
            "Historical Context",
            "<h3>",
            "Artifact Examination End",
            "<footer>"
        ],
        "VQA": {
            "What is the main heading displayed at the top of the page?": "Ancient Artifact Insight",
            "Where is the paragraph about the artifact placed?": "Immediately below the main heading",
            "What element appears right after the main paragraph?": "A horizontal rule",
            "What is the title of the second section displayed as a subheading?": "Artifact Details",
            "How many items are in the ordered list?": "4",
            "What are the items listed in order in the ordered list?": "Origin, Age, Material, Significance",
            "What is the title inside the Historical Context section?": "Historical Context",
            "What text is shown in the footer?": "Artifact Examination End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000417",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a modern sculpture installation into an HTML structure.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Sculpture Showcase\".\n- Display the provided paragraph inside a <p> element immediately after the title.\n- Insert a horizontal rule using the <hr> element between the description and the next section.\n- Add a subsection titled \"Installation Details\" using an <h2> element.\n- Within the \"Installation Details\" section, present an unordered list (<ul>) containing exactly 4 items in this order: \"Material\", \"Dimensions\", \"Location\", and \"Year Created\", with each item in its own <li> element.\n- Include a further section titled \"Curator Notes\" using an <h3> element, followed by a <p> element with placeholder text.\n- End the HTML document with a closing <footer> element that contains the text \"End of Sculpture Details\".",
        "raw_output_metric": [
            "<h1>",
            "Sculpture Showcase",
            "<p>",
            "<hr>",
            "<h2>",
            "Installation Details",
            "<ul>",
            "<li>",
            "Material",
            "Dimensions",
            "Location",
            "Year Created",
            "<h3>",
            "Curator Notes",
            "<footer>",
            "End of Sculpture Details"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Sculpture Showcase",
            "What appears immediately after the main title?": "A paragraph describing the modern sculpture installation",
            "What element visually separates the description from the next section?": "A horizontal rule",
            "What is the title of the section following the horizontal rule?": "Installation Details",
            "How many list items are presented under 'Installation Details'?": "4",
            "What are the list items shown, in order?": "Material, Dimensions, Location, Year Created",
            "What is the header of the section that follows the installation details?": "Curator Notes",
            "What text is displayed in the footer of the page?": "End of Sculpture Details"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000418",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short narrative about a mountain hiking adventure into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mountain Adventure\".\n- Display the narrative inside a <p> element directly after the title.\n- Add a horizontal line using an <hr> element immediately following the narrative.\n- Include a section with an <h2> element titled \"Hiking Details\".\n- Create an ordered list with an <ol> element containing exactly 4 <li> items: \"Trail Start\", \"Peak\", \"Scenic View\", and \"Camp Site\", in that exact order.\n- Insert a subheading with an <h3> element labeled \"Safety Tips\" following the ordered list.\n- Provide an additional paragraph with a <p> element containing the text \"Always check weather conditions before your hike.\"\n- End the HTML structure with a <footer> element carrying the text \"Adventure End\".",
        "raw_output_metric": [
            "Mountain Adventure",
            "Hiking Details",
            "Trail Start",
            "Peak",
            "Scenic View",
            "Camp Site",
            "Safety Tips",
            "Always check weather conditions before your hike.",
            "Adventure End"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Mountain Adventure",
            "What element contains the mountain hiking narrative right after the title?": "A paragraph (<p>)",
            "What element is placed immediately after the narrative?": "A horizontal line (<hr>)",
            "What is the heading for the section following the horizontal line?": "Hiking Details",
            "How many items are in the ordered list under the Hiking Details section?": "4",
            "What are the list items in the ordered list, in order?": "Trail Start, Peak, Scenic View, and Camp Site",
            "What is the subheading label given before the safety tips text?": "Safety Tips",
            "What safety advice text is provided below the Safety Tips subheading?": "Always check weather conditions before your hike.",
            "What text is shown in the footer at the bottom of the page?": "Adventure End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000419",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a historical monument into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Monument Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph.\n- Insert a subheading using an <h2> element with the text \"Historical Details\".\n- Present a bullet point list within a <ul> element containing exactly 4 items: \"Location\", \"Year Constructed\", \"Architect\", and \"Key Events\", in that specific order.\n- End the HTML document with a closing <footer> element containing the text \"End of Report\".",
        "raw_output_metric": [
            "<h1>Monument Overview</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<h2>Historical Details</h2>",
            "<ul>",
            "<li>Location</li>",
            "<li>Year Constructed</li>",
            "<li>Architect</li>",
            "<li>Key Events</li>",
            "</ul>",
            "<footer>End of Report</footer>"
        ],
        "VQA": {
            "What is the text displayed in the main title at the top of the page?": "Monument Overview",
            "What type of element contains the description of the historical monument immediately after the main title?": "Paragraph",
            "What visual element separates the paragraph from the next section?": "Horizontal line",
            "What is the subheading text shown below the horizontal line?": "Historical Details",
            "How many items are listed in the bullet point list?": "4",
            "What are the bullet point items and in which order do they appear?": "Location, Year Constructed, Architect, Key Events",
            "What text is displayed in the footer at the bottom of the page?": "End of Report"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000420",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief sentence describing a travel destination into an HTML structure.\n\nFeature Requirements:\n- Start with an <h1> element containing the text \"Travel Destination Overview\".\n- Immediately follow the title with a <p> element that includes the original sentence.\n- Insert an <hr> element right after the paragraph for visual separation.\n- Add a subheading using an <h2> element with the text \"Highlights\".\n- Create an unordered list (<ul>) with exactly three list items (<li>) displaying the following items in order: \"Scenic Views\", \"Local Cuisine\", and \"Cultural Attractions\".\n- End the HTML output with a <footer> element that contains the text \"Discover More\".",
        "raw_output_metric": [
            "<h1>",
            "Travel Destination Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Highlights",
            "<ul>",
            "<li>",
            "Scenic Views",
            "Local Cuisine",
            "Cultural Attractions",
            "<footer>",
            "Discover More"
        ],
        "VQA": {
            "What is the main heading displayed on the page?": "Travel Destination Overview",
            "What element appears immediately after the main heading?": "A paragraph containing a brief travel description.",
            "What visual separator is placed right after the paragraph?": "A horizontal rule.",
            "What is the text of the subheading below the horizontal rule?": "Highlights",
            "How many items are listed in the unordered list?": "Three",
            "What is the text of the first list item?": "Scenic Views",
            "What is the text of the second list item?": "Local Cuisine",
            "What is the text of the third list item?": "Cultural Attractions",
            "What text is displayed at the bottom of the page in the footer?": "Discover More"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000421",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that presents a brief description of a historical event with distinct sections for a summary and specific event details.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Historical Event Overview\".\n- Immediately after the title, display a short narrative about the event inside a <p> element.\n- Add a section header below the narrative using an <h2> element with the text \"Event Details\".\n- Create an unordered list (<ul>) that contains exactly 4 list items (<li> elements) in this specific order: \"Date\", \"Location\", \"Key Figures\", and \"Outcome\".\n- Insert a horizontal rule (<hr>) below the unordered list to clearly separate content sections.\n- End the HTML document with a <footer> element containing the text \"Event Analysis Complete\".",
        "raw_output_metric": [
            "Historical Event Overview",
            "Event Details",
            "Date",
            "Location",
            "Key Figures",
            "Outcome",
            "Event Analysis Complete"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Historical Event Overview",
            "Which element follows the main title?": "A paragraph containing a short narrative about the event",
            "What is the text of the section header below the narrative?": "Event Details",
            "How many bullet items are present in the unordered list?": "4",
            "What are the texts of the list items in order?": "Date, Location, Key Figures, Outcome",
            "What element is used to separate the sections after the list?": "A horizontal rule",
            "What text is displayed in the footer at the bottom of the page?": "Event Analysis Complete"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000422",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short narrative describing an ancient castle's history into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Ancient Castle History\".\n- Place the original narrative inside a <p> element immediately following the title.\n- Add a sub-heading with an <h2> element titled \"Key Events\".\n- Create an ordered list using the <ol> element containing exactly 4 items in the following order: \"Foundation\", \"Siege\", \"Renovation\", \"Legacy\".\n- Insert a horizontal line using the <hr> element immediately after the ordered list.\n- Include an additional sub-title with an <h3> element with the text \"Visitor Information\".\n- Display a supplementary description inside a <p> element stating \"Open from April to October\".\n- End the HTML output with a <footer> element that contains the text \"History Provided by Castle Archives\".",
        "raw_output_metric": [
            "<h1>Ancient Castle History</h1>",
            "<p>",
            "<h2>Key Events</h2>",
            "<li>Foundation</li>",
            "<li>Siege</li>",
            "<li>Renovation</li>",
            "<li>Legacy</li>",
            "<hr>",
            "<h3>Visitor Information</h3>",
            "<p>Open from April to October</p>",
            "<footer>History Provided by Castle Archives</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Ancient Castle History",
            "What text is contained in the paragraph immediately below the main title?": "A short narrative describing an ancient castle's history",
            "What sub-heading appears after the narrative paragraph?": "Key Events",
            "How many items are displayed in the ordered list under 'Key Events'?": "4",
            "What are the list items in the ordered list, in order?": "Foundation, Siege, Renovation, Legacy",
            "What element is immediately visible after the ordered list?": "A horizontal line",
            "What sub-title is shown after the horizontal line?": "Visitor Information",
            "What is the supplementary description provided under 'Visitor Information'?": "Open from April to October",
            "What text is shown in the footer section of the page?": "History Provided by Castle Archives"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000423",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a local art festival into an HTML structure.\n\nFeature Requirements:\n- Use an <h1> element at the top with the text \"Art Festival Overview\".\n- Display the original paragraph inside a <p> element immediately following the title.\n- Add a horizontal line using the <hr> element right after the paragraph.\n- Insert a subheading using an <h2> element with the text \"Highlights\" immediately after the horizontal line.\n- Create an ordered list using an <ol> element that contains exactly 4 items in the following order: \"Live Music\", \"Food Stalls\", \"Art Exhibitions\", and \"Workshops\".\n- Each list item must be enclosed in its own <li> element.\n- End the HTML document with a <footer> element containing the text \"Festival End\".",
        "raw_output_metric": [
            "Art Festival Overview",
            "Highlights",
            "Live Music",
            "Food Stalls",
            "Art Exhibitions",
            "Workshops",
            "Festival End"
        ],
        "VQA": {
            "What is the main header text at the top of the page?": "Art Festival Overview",
            "Is there a paragraph displayed immediately under the main header?": "Yes",
            "What visual element is used immediately after the paragraph?": "A horizontal line",
            "What is the subheading text that appears after the horizontal line?": "Highlights",
            "How many items are listed in the ordered list?": "4",
            "What are the ordered list items, in the order they appear?": "Live Music, Food Stalls, Art Exhibitions, Workshops",
            "What text is displayed in the footer at the bottom of the document?": "Festival End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000424",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic building into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Historical Building Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Insert a <nav> element that contains an ordered list (<ol>) with exactly 2 items: \"History\" and \"Architecture\".\n- Add a section using a <section> element immediately after the navigation.\n- Include a heading within the section using an <h2> element with the text \"Visitor Information\".\n- Display a paragraph within the section that describes the building's operating hours.\n- Add an unordered list (<ul>) within the section containing exactly 3 <li> items in the following order: \"Location\", \"Contact Number\", \"Website\".\n- Insert a horizontal line (<hr>) right after the paragraph describing operating hours.\n- End the HTML document with a closing <footer> element that contains the text \"Information provided by Heritage Org\".",
        "raw_output_metric": [
            "Historical Building Overview",
            "History",
            "Architecture",
            "Visitor Information",
            "Location",
            "Contact Number",
            "Website",
            "Information provided by Heritage Org"
        ],
        "VQA": {
            "What is the text content of the main title?": "Historical Building Overview",
            "Which element contains the original paragraph right below the title?": "<p> element",
            "How many items are present in the ordered list within the navigation section?": "2",
            "What are the two items listed in the navigation’s ordered list?": "History and Architecture",
            "What is the heading text within the section for visitor information?": "Visitor Information",
            "How many items are listed in the unordered list in the visitor information section?": "3",
            "What are the three items in the unordered list in order?": "Location, Contact Number, Website",
            "What element is immediately displayed after the paragraph describing operating hours?": "Horizontal line (<hr>)",
            "What text is shown in the footer of the document?": "Information provided by Heritage Org"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000425",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historical monument into an HTML structure.\n\nFeature Requirements:\n- Begin the document with an <h1> element that includes the text \"Historical Monument Overview\".\n- Immediately below the title, include a <p> element that contains the provided paragraph describing the monument.\n- Insert a horizontal line using an <hr> element directly after the paragraph to separate sections.\n- Add an <h2> element with the text \"Key Details\" after the horizontal line.\n- Create an unordered list using a <ul> element that contains exactly 3 list items (<li>): \"Year Built\", \"Architectural Style\", and \"Cultural Significance\".\n- Following the list, include a <p> element with additional commentary summarizing the monument's importance.\n- End the HTML document with a <footer> element containing the text \"End of Monument Description\".",
        "raw_output_metric": [
            "Historical Monument Overview",
            "Key Details",
            "Year Built",
            "Architectural Style",
            "Cultural Significance",
            "End of Monument Description"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Historical Monument Overview",
            "What type of element immediately follows the main title?": "A paragraph containing the monument description",
            "What element is used to separate the description from the next section?": "A horizontal line",
            "What is the subheading text shown after the horizontal line?": "Key Details",
            "How many items are listed under the 'Key Details' section?": "3",
            "What are the exact list items provided?": "Year Built, Architectural Style, Cultural Significance",
            "What element follows the list and provides additional commentary?": "A paragraph summarizing the monument's importance",
            "What is the final element at the bottom of the page and what does it display?": "A footer displaying 'End of Monument Description'"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000426",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief text description of an ancient artifact exhibit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Artifact Exhibit\".\n- Display the original description inside a <p> element immediately after the title.\n- Insert a horizontal rule using the <hr> element right after the paragraph.\n- Add a subheading using an <h2> element with the text \"Exhibit Highlights\".\n- Create an ordered list using an <ol> element containing exactly 4 items in the following order: \"Origin\", \"Discovery\", \"History\", \"Cultural Impact\".\n- Each list item should be wrapped in an <li> element.\n- End the HTML document with a closing <footer> element containing the text \"Artifact Overview Complete\".",
        "raw_output_metric": [
            "<h1>Artifact Exhibit</h1>",
            "<p>",
            "<hr>",
            "<h2>Exhibit Highlights</h2>",
            "<ol>",
            "<li>Origin</li>",
            "<li>Discovery</li>",
            "<li>History</li>",
            "<li>Cultural Impact</li>",
            "</ol>",
            "<footer>Artifact Overview Complete</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Artifact Exhibit",
            "Where is the brief text description located relative to the title?": "Immediately after the title inside a paragraph element.",
            "What element is used to separate the description from the subheading?": "A horizontal rule is used.",
            "What is the text of the subheading on the page?": "Exhibit Highlights",
            "How many items are in the ordered list under the subheading?": "4",
            "What are the four items listed in the ordered list, in order?": "Origin, Discovery, History, Cultural Impact",
            "What text appears in the footer at the bottom of the page?": "Artifact Overview Complete"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000427",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a coastal city into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Coastal City Profile\".\n- Display the original paragraph inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph for separation.\n- Add a section titled \"Popular Landmarks\" using an <h2> element below the horizontal line.\n- Create a bullet point list within a <ul> element that contains exactly 4 landmarks: \"Historic Pier\", \"Marina Bay\", \"Seaside Fort\", and \"Ocean Park\".\n- Ensure each landmark is encapsulated within an <li> element in the specified order.\n- Include a subheading using an <h3> element with the text \"Cultural Insight\" placed after the landmarks list.\n- Add a <blockquote> element containing a sentence that details an interesting historical fact about the city.\n- Conclude the HTML with a closing <footer> element that contains the text \"End of City Overview\".\n- The HTML structure should only include these specified elements, arranged in the order outlined above.",
        "raw_output_metric": [
            "Coastal City Profile",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "Popular Landmarks",
            "<h2>",
            "</h2>",
            "<ul>",
            "<li>Historic Pier</li>",
            "<li>Marina Bay</li>",
            "<li>Seaside Fort</li>",
            "<li>Ocean Park</li>",
            "</ul>",
            "Cultural Insight",
            "<h3>",
            "</h3>",
            "<blockquote>",
            "</blockquote>",
            "End of City Overview",
            "<footer>",
            "</footer>"
        ],
        "VQA": {
            "What is the text of the main title at the top of the page?": "Coastal City Profile",
            "Which element displays the original paragraph text beneath the title?": "Paragraph element (<p>)",
            "What visual element separates the paragraph from the landmarks section?": "Horizontal line (<hr>)",
            "What is the heading text for the landmarks section?": "Popular Landmarks",
            "How many bullet points are in the landmarks list?": "4",
            "What are the four landmarks listed, in order?": "Historic Pier, Marina Bay, Seaside Fort, Ocean Park",
            "What is the subheading text above the historical fact?": "Cultural Insight",
            "What type of element contains the historical fact about the city?": "Blockquote",
            "What text is displayed in the footer at the end of the HTML structure?": "End of City Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000428",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML representation of a short paragraph describing a rainy day, incorporating several distinct sections.\n\nFeature Requirements:\n- Include a main title using an <h1> element containing the text \"Rainy Day Overview\".\n- Immediately display the provided paragraph inside a <p> element below the main title.\n- Insert a horizontal rule using the <hr> element directly after the paragraph.\n- Add a subheading using an <h2> element with the text \"Key Observations\".\n- Present a bullet point list within a <ul> element containing exactly 5 items in this order: \"Umbrellas\", \"Puddles\", \"Drizzle\", \"Storms\", \"Rainbow\".\n- Ensure each list item is wrapped in its own <li> element.\n- Include a <div> element with a class attribute of \"notes\" that contains the text \"Additional Remarks\".\n- End the HTML document with a <footer> element containing the text \"Document End\".",
        "raw_output_metric": [
            "Rainy Day Overview",
            "Key Observations",
            "Umbrellas",
            "Puddles",
            "Drizzle",
            "Storms",
            "Rainbow",
            "Additional Remarks",
            "Document End"
        ],
        "VQA": {
            "What text is displayed in the main header at the top of the page?": "Rainy Day Overview",
            "What text is shown immediately after the main header?": "A short paragraph describing a rainy day",
            "What element is used to visually separate the paragraph from the rest of the content?": "A horizontal line",
            "What text appears as the subheading for the key observations?": "Key Observations",
            "How many items are listed in the bullet point list?": "5",
            "What is the first item in the bullet list?": "Umbrellas",
            "What text is contained in the notes section at the bottom of the content?": "Additional Remarks",
            "What text appears in the footer at the end of the document?": "Document End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000429",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic lighthouse into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Lighthouse History\".\n- Display the original paragraph from the input inside a <p> element immediately following the title.\n- Add a horizontal rule using the <hr> element directly after the paragraph.\n- Introduce a subheading using an <h2> element with the text \"Key Details\".\n- Present an ordered list within an <ol> element that contains exactly three items in the following order: \"Year Built\", \"Location\", \"Purpose\".\n- Each item in the ordered list must be wrapped in an <li> element.\n- Insert a secondary paragraph inside another <p> element that explains the cultural significance of the lighthouse.\n- Conclude the HTML document with a <footer> element that contains the text \"End of History\".",
        "raw_output_metric": [
            "<h1>",
            "Lighthouse History",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<h2>",
            "Key Details",
            "</h2>",
            "<ol>",
            "<li>Year Built</li>",
            "<li>Location</li>",
            "<li>Purpose</li>",
            "</ol>",
            "<p>",
            "</p>",
            "<footer>",
            "End of History",
            "</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Lighthouse History",
            "What immediately follows the main title?": "A paragraph containing the historic lighthouse description",
            "What element separates the first paragraph from the subheading?": "A horizontal rule",
            "What is the text of the subheading?": "Key Details",
            "How many items are included in the ordered list?": "Three",
            "What are the items listed in the ordered list, in order?": "Year Built, Location, Purpose",
            "What additional paragraph is present on the page?": "A paragraph explaining the cultural significance of the lighthouse",
            "What text is displayed in the footer at the bottom of the page?": "End of History"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000430",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief narrative of a historical event into an HTML structure.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Historical Event Overview\".\n- Display the original narrative inside a <p> element immediately after the main title.\n- Insert a horizontal line using the <hr> element directly following the narrative.\n- Add a secondary section using an <h2> element that states \"Event Timeline\".\n- Present an ordered list using an <ol> element containing exactly 4 items: \"Start\", \"Peak\", \"Decline\", and \"Resolution\", with each item within its own <li> element in that order.\n- Include another section titled \"Key Figures\" using an <h2> element.\n- Add an unordered list using a <ul> element with exactly 3 list items naming notable historical figures, ensuring each name is enclosed in an <li> element.\n- Conclude the HTML document with a <footer> element that includes the text \"End of Event Summary\".",
        "raw_output_metric": [
            "<h1>",
            "Historical Event Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Event Timeline",
            "<ol>",
            "Start",
            "Peak",
            "Decline",
            "Resolution",
            "<h2>",
            "Key Figures",
            "<ul>",
            "<footer>",
            "End of Event Summary"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the page?": "Historical Event Overview",
            "What text is contained in the paragraph immediately following the main title?": "The original narrative of the historical event.",
            "What visual element follows the narrative text?": "A horizontal line.",
            "What is the title of the section that introduces the ordered list?": "Event Timeline",
            "How many items does the ordered list contain and what are they?": "4 items: Start, Peak, Decline, Resolution",
            "What is the title of the section that features notable historical figures?": "Key Figures",
            "How many items appear in the unordered list under 'Key Figures'?": "3 items",
            "What text is shown in the footer of the document?": "End of Event Summary"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000431",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML document that structures a brief description of a coastal travel experience.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Coastal Journey\".\n- Place the original travel description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header with an <h2> element containing the text \"Highlights\".\n- Present an ordered list using an <ol> element with exactly three items: \"Sunrise at the beach\", \"Sandcastle building\", and \"Local cuisine tasting\" in that specific order.\n- Conclude the document with a <footer> element that includes the text \"Travel log concludes here\".",
        "raw_output_metric": [
            "<h1>Coastal Journey</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<h2>Highlights</h2>",
            "<ol>",
            "<li>Sunrise at the beach</li>",
            "<li>Sandcastle building</li>",
            "<li>Local cuisine tasting</li>",
            "</ol>",
            "<footer>Travel log concludes here</footer>"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the page?": "Coastal Journey",
            "Which element directly follows the title?": "Paragraph containing the travel description",
            "What visual element is seen immediately after the travel description paragraph?": "Horizontal line",
            "What is the text of the section header after the horizontal line?": "Highlights",
            "How many items are present in the ordered list?": "3",
            "What is the text of the first item in the ordered list?": "Sunrise at the beach",
            "What is the text of the second item in the ordered list?": "Sandcastle building",
            "What is the text of the third item in the ordered list?": "Local cuisine tasting",
            "What text is shown within the footer of the document?": "Travel log concludes here"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000432",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nTransform a brief text describing a mythological creature into an HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mythical Creature\".\n- Display the original narrative inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element right after the paragraph.\n- Add a section header using an <h2> element with the text \"Legend Details\" placed after the horizontal line.\n- Create an unordered list using a <ul> element that contains exactly 3 list items in the following order: \"Origin\", \"Abilities\", and \"Habitat\", where each list item is wrapped in an <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"Narrative Complete\".",
        "raw_output_metric": [
            "Mythical Creature",
            "Legend Details",
            "Origin",
            "Abilities",
            "Habitat",
            "Narrative Complete",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<h2>",
            "</h2>",
            "<ul>",
            "</ul>",
            "<li>",
            "</li>",
            "<footer>",
            "</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Mythical Creature",
            "What immediately follows the main title in the document?": "A paragraph containing the original narrative text",
            "What element is visible right after the narrative paragraph?": "A horizontal line",
            "What section heading is displayed after the horizontal line?": "Legend Details",
            "How many list items are displayed in the unordered list?": "3",
            "What are the names of the list items in the unordered list?": "Origin, Abilities, Habitat",
            "What text is shown at the bottom of the document in the footer?": "Narrative Complete"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000433",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate a HTML page that details the history and features of a famous landmark.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Landmark Spotlight\".\n- Display a brief historical description inside a <p> element immediately following the title.\n- Insert a horizontal line using the <hr> element directly after the historical description.\n- Create a subsection title using an <h2> element with the text \"Key Features\" placed below the horizontal line.\n- Display a numbered list within an <ol> element that contains exactly 4 items: \"Architectural Style\", \"Construction Date\", \"Cultural Significance\", and \"Visitor Information\".\n- Each list item must be wrapped in an <li> element and appear in the specified order.\n- Conclude the HTML document with a <footer> element that includes the text \"Information provided by the City Archives\".",
        "raw_output_metric": [
            "Landmark Spotlight",
            "Key Features",
            "Architectural Style",
            "Construction Date",
            "Cultural Significance",
            "Visitor Information",
            "Information provided by the City Archives",
            "<h1>",
            "<p>",
            "<hr>",
            "<h2>",
            "<ol>",
            "<li>",
            "<footer>"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the page?": "Landmark Spotlight",
            "What element immediately follows the main title?": "A paragraph element with a brief historical description",
            "What element is used to separate the historical description from the rest of the content?": "A horizontal line",
            "What is the text of the subsection title under the horizontal line?": "Key Features",
            "How many list items are included in the numbered list?": "4",
            "What are the four items displayed in the numbered list?": "Architectural Style, Construction Date, Cultural Significance, Visitor Information",
            "What element concludes the HTML document?": "A footer with the text 'Information provided by the City Archives'",
            "Which section in the document clearly introduces the features of the landmark?": "The section titled 'Key Features'"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000434",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a descriptive paragraph about a mythical library into a structured HTML document.\n\nFeature Requirements:\n- Begin with a title using an <h1> element containing the text \"Mythical Library\".\n- Immediately follow the title with a <p> element that contains the original descriptive paragraph.\n- Insert a horizontal rule using the <hr> element right after the paragraph.\n- Add a subsection header with an <h2> element that displays the text \"Library Sections\".\n- Create an ordered list using an <ol> element containing exactly 4 items: \"Ancient Manuscripts\", \"Enchanted Scrolls\", \"Magical Artifacts\", and \"Scribe Studios\", each within an <li> element.\n- After the ordered list, include an <h3> element with the text \"Visit Information\".\n- Provide a <p> element that specifies visiting hours in the format \"Open: 9 AM - 5 PM\".\n- Immediately after, add a <small> element containing the text \"Public Access\" within the same paragraph.\n- End the HTML document with a <footer> element that contains the text \"Footer: Library Info Complete\".",
        "raw_output_metric": [],
        "VQA": {
            "What is the main page title displayed at the top?": "Mythical Library",
            "What element immediately follows the title?": "A paragraph containing the descriptive text of the mythical library",
            "How many items are in the ordered list under 'Library Sections'?": "4",
            "What text is used for the subheader that introduces the library sections?": "Library Sections",
            "List the items that appear in the ordered list.": "Ancient Manuscripts, Enchanted Scrolls, Magical Artifacts, Scribe Studios",
            "What is the header text for the visit information section?": "Visit Information",
            "What visiting hours are shown in the visit information paragraph?": "Open: 9 AM - 5 PM",
            "What is the small text label shown alongside the visiting hours?": "Public Access",
            "What content is included in the footer at the bottom of the page?": "Footer: Library Info Complete"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000435",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure for a short narrative describing an ancient medieval legend.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Medieval Legend\".\n- Present the provided narrative inside a <p> element immediately below the title.\n- Insert a horizontal divider using the <hr> element directly after the narrative.\n- Add a section heading using an <h2> element with the text \"Story Elements\".\n- Create an ordered list with an <ol> element containing exactly three items: \"Hero\", \"Quest\", \"Outcome\" in that order.\n- Wrap the narrative part within <body> tags.\n- End the HTML with a <footer> element containing the text \"Legend End\".",
        "raw_output_metric": [
            "Medieval Legend",
            "Story Elements",
            "Hero",
            "Quest",
            "Outcome",
            "Legend End",
            "<body>",
            "</body>",
            "<h1>",
            "</h1>",
            "<p>",
            "</p>",
            "<hr>",
            "<h2>",
            "</h2>",
            "<ol>",
            "</ol>",
            "<li>Hero</li>",
            "<li>Quest</li>",
            "<li>Outcome</li>",
            "<footer>",
            "</footer>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Medieval Legend",
            "Which element contains the narrative text just below the title?": "Paragraph element (p)",
            "What element is used as a divider after the narrative?": "hr element",
            "What is the text of the section heading following the narrative?": "Story Elements",
            "How many items are in the ordered list under the Story Elements section?": "3",
            "What are the three items listed in the ordered list?": "Hero, Quest, Outcome",
            "What text is shown in the footer at the end of the page?": "Legend End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000436",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic building into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Historic Building Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph for separation.\n- Insert a subtitle using an <h2> element with the text \"Architectural Details\".\n- Create an unordered list with exactly 4 items in the following order: \"Roof\", \"Facade\", \"Interior\", \"Surroundings\". Each item should be wrapped in an <li> element.\n- End the HTML document with a <footer> element containing the text \"Information Complete\".\n- Ensure that every element is placed sequentially as specified to maintain a clear document structure.",
        "raw_output_metric": [
            "Historic Building Overview",
            "Architectural Details",
            "Roof",
            "Facade",
            "Interior",
            "Surroundings",
            "Information Complete",
            "<h1>",
            "<p>",
            "<hr>",
            "<h2>",
            "<ul>",
            "<li>",
            "</li>",
            "</ul>",
            "<footer>"
        ],
        "VQA": {
            "What is the text of the main title at the top of the page?": "Historic Building Overview",
            "What element contains the paragraph describing the historic building?": "p element",
            "Which element is placed immediately below the paragraph to separate content?": "hr element",
            "What is the subtitle text displayed after the horizontal line?": "Architectural Details",
            "How many items are in the unordered list?": "4",
            "What are the four list items in order?": "Roof, Facade, Interior, Surroundings",
            "What text appears in the footer at the end of the document?": "Information Complete"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000437",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a vintage car into an HTML structure.\n\nFeature Requirements:\n- Start with a title using an <h1> element containing the text \"Vintage Car Overview\".\n- Immediately follow the title with a <p> element that includes the car description text.\n- Insert an <hr> element directly after the paragraph to serve as a visual divider.\n- Add a sub-section with a title using an <h2> element that reads \"Technical Specifications\".\n- Create an ordered list (<ol>) containing exactly 4 items: \"Engine Type\", \"Transmission\", \"Fuel Efficiency\", and \"Top Speed\", each enclosed in an <li> element.\n- Include a separate <div> element with an id attribute set to \"additional-info\" containing a brief statement about the car's historical significance.\n- End the HTML with a <footer> element that contains the text \"End of Overview\".",
        "raw_output_metric": [
            "Vintage Car Overview",
            "Technical Specifications",
            "Engine Type",
            "Transmission",
            "Fuel Efficiency",
            "Top Speed",
            "additional-info",
            "End of Overview"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Vintage Car Overview",
            "What element immediately follows the main title?": "A paragraph with the car description",
            "Which visual separator is used after the paragraph?": "A horizontal line",
            "What sub-title introduces the technical specifications section?": "Technical Specifications",
            "How many items are included in the technical specifications list?": "4",
            "Name one item listed in the technical specifications?": "Engine Type",
            "What id is assigned to the division containing additional information?": "additional-info",
            "What text is shown in the footer section at the end of the page?": "End of Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000438",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief descriptive text about a historic monument into a structured HTML document.\n\nFeature Requirements:\n- Begin with an <h1> element containing the text \"Monument Overview\".\n- Immediately follow with a <p> element that contains the original description of the monument.\n- Insert an <hr> element right after the paragraph to separate the content.\n- Add an <h2> element with the text \"Historical Facts\" immediately below the horizontal line.\n- Under \"Historical Facts\", include an ordered list (<ol>) with exactly 3 items in the following order: \"Year Built\", \"Architect\", \"Significance\".\n- Insert another <h2> element with the text \"Visitor Information\" immediately after the ordered list.\n- Below \"Visitor Information\", include an unordered list (<ul>) with exactly 3 items in this order: \"Opening Hours\", \"Ticket Price\", \"Guided Tours\".\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\".",
        "raw_output_metric": [
            "<h1>Monument Overview</h1>",
            "<p>",
            "<hr>",
            "<h2>Historical Facts</h2>",
            "<ol>",
            "Year Built",
            "Architect",
            "Significance",
            "</ol>",
            "<h2>Visitor Information</h2>",
            "<ul>",
            "Opening Hours",
            "Ticket Price",
            "Guided Tours",
            "</ul>",
            "<footer>End of Overview</footer>"
        ],
        "VQA": {
            "What is the text content of the main heading?": "Monument Overview",
            "What element appears immediately after the main heading?": "A paragraph containing the descriptive text",
            "Which element separates the paragraph from the rest of the document?": "A horizontal rule",
            "What is the text of the heading that immediately follows the horizontal rule?": "Historical Facts",
            "How many items are listed in the ordered list under 'Historical Facts'?": "3",
            "What are the items included in that ordered list?": "Year Built, Architect, Significance",
            "What is the text in the second subheading after the ordered list?": "Visitor Information",
            "How many items are in the unordered list under 'Visitor Information'?": "3",
            "What is the text content of the footer at the end of the document?": "End of Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000439",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph about an urban park into an HTML structure.\n\nFeature Requirements:\n- Begin with a title using an <h1> element that displays the text \"Urban Park Overview\".\n- Immediately after the title, insert the original paragraph within a <p> element.\n- Add a horizontal line using the <hr> element right after the paragraph for separation.\n- Include a subtitle with an <h2> element set to \"Park Features\".\n- Create a bullet list using a <ul> element containing exactly 4 <li> elements, with the items in this order: \"Playground\", \"Walking Trails\", \"Picnic Area\", and \"Lake\".\n- Enclose the entire content inside a <section> element to organize the structure.\n- End the HTML output with a <div> element that has a class attribute of \"footer\" and contains the text \"Visit Us Soon\".",
        "raw_output_metric": [
            "<section>",
            "<h1>Urban Park Overview</h1>",
            "<p>",
            "<hr>",
            "<h2>Park Features</h2>",
            "<ul>",
            "<li>Playground</li>",
            "<li>Walking Trails</li>",
            "<li>Picnic Area</li>",
            "<li>Lake</li>",
            "</ul>",
            "<div class=\"footer\">Visit Us Soon</div>"
        ],
        "VQA": {
            "What is the main heading displayed at the top of the page?": "Urban Park Overview",
            "What text appears immediately after the main title?": "The original paragraph about an urban park",
            "What element visually separates the paragraph from the next section?": "A horizontal line",
            "What is the subtitle shown above the park features list?": "Park Features",
            "How many items are displayed in the bullet list of park features?": "4",
            "What are the bullet list items in order?": "Playground, Walking Trails, Picnic Area, Lake",
            "What text is visible at the bottom of the page?": "Visit Us Soon"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000440",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML page that portrays a mystical castle through structured textual content.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Mystical Castle\".\n- Immediately below the title, add a paragraph using a <p> element that provides a one-sentence overview of the castle.\n- Insert a horizontal rule using an <hr> element right after the introductory paragraph.\n- Add a section header using an <h2> element with the text \"Castle Details\".\n- Create an ordered list using an <ol> element that contains exactly three list items in this order: \"Ancient Walls\", \"Hidden Chambers\", \"Royal Guard\", with each item wrapped in an <li> element.\n- Immediately following the ordered list, include a section using a <section> element that contains a paragraph with the text \"Discover the secrets within\".\n- End the HTML document with a <footer> element containing the text \"Page End\".",
        "raw_output_metric": [
            "Mystical Castle",
            "Castle Details",
            "Ancient Walls",
            "Hidden Chambers",
            "Royal Guard",
            "Discover the secrets within",
            "Page End"
        ],
        "VQA": {
            "What is the text content of the main title at the top of the page?": "Mystical Castle",
            "What appears immediately below the main title?": "A one-sentence overview of the castle in a paragraph.",
            "Which element is used right after the introductory paragraph?": "A horizontal rule.",
            "What text is used as the section header after the horizontal rule?": "Castle Details",
            "How many items are present in the ordered list?": "3",
            "What are the texts contained in each ordered list item (in order)?": "Ancient Walls, Hidden Chambers, Royal Guard",
            "What text is displayed within the section element?": "Discover the secrets within",
            "What is the content of the footer?": "Page End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000441",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that displays a brief narrative about a serene lakeside setting.\n\nFeature Requirements:\n- Include a main title using an <h1> element with the text \"Lakeside Serenity\".\n- Display the provided narrative inside a <p> element right after the title.\n- Insert a horizontal line using the <hr> element immediately after the paragraph.\n- Include a secondary heading using an <h2> element with the text \"Location Details\".\n- Create an ordered list using an <ol> element that contains exactly 3 items: \"Water Clarity\", \"Surrounding Flora\", and \"Wildlife Presence\".\n- Each list item should be wrapped in an <li> element in the specified order.\n- End the HTML structure with a <footer> element containing the text \"End of Lakeside Overview\".",
        "raw_output_metric": [
            "Lakeside Serenity",
            "Location Details",
            "Water Clarity",
            "Surrounding Flora",
            "Wildlife Presence",
            "End of Lakeside Overview"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Lakeside Serenity",
            "What text is used as the narrative immediately following the main title?": "A brief narrative about a serene lakeside setting",
            "What element visually divides the narrative from the subsequent content?": "A horizontal line",
            "What is the secondary heading text under the horizontal line?": "Location Details",
            "How many items are displayed within the ordered list?": "3",
            "What are the three items listed in the ordered list and in what order?": "Water Clarity, Surrounding Flora, Wildlife Presence",
            "What text appears at the bottom of the page as a footer?": "End of Lakeside Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000442",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nGenerate an HTML structure that presents a brief description of a historical monument.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Historical Monument\".\n- Display the descriptive text inside a <p> element placed immediately after the main heading.\n- Insert a <blockquote> element right after the paragraph containing the phrase \"A window to the past\".\n- Add a subheading using an <h2> element with the text \"Visitor Details\" following the blockquote.\n- Create an ordered list using an <ol> element that includes exactly four items: \"Opening Hours\", \"Ticket Costs\", \"Guided Tours\", and \"Address\", in that specific order.\n- Conclude the HTML structure with a <footer> element that contains the text \"End of Historical Overview\".",
        "raw_output_metric": [
            "Historical Monument",
            "A window to the past",
            "Visitor Details",
            "Opening Hours",
            "Ticket Costs",
            "Guided Tours",
            "Address",
            "End of Historical Overview"
        ],
        "VQA": {
            "What is the main heading text at the top of the page?": "Historical Monument",
            "What type of text immediately follows the main heading?": "A descriptive paragraph about the monument",
            "What phrase is displayed in the blockquote element?": "A window to the past",
            "What is the text of the subheading after the blockquote?": "Visitor Details",
            "How many items are in the ordered list and what are they?": "Four items: Opening Hours, Ticket Costs, Guided Tours, Address",
            "What is the text shown in the footer at the bottom of the page?": "End of Historical Overview"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000443",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historic museum into a structured HTML document.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Museum Overview\".\n- Place the original paragraph inside a <p> element immediately following the title.\n- Add a horizontal line using the <hr> element under the paragraph to separate content.\n- Insert a section header using an <h2> element with the text \"Exhibit Highlights\" below the horizontal line.\n- Create an ordered list within an <ol> element containing exactly 4 items in the following order: \"Ancient Artifacts\", \"Sculpture Gallery\", \"Modern Exhibits\", \"Interactive Installations\".\n- Ensure each list item is wrapped in an <li> element.\n- Insert a subheader using an <h3> element with the text \"Visitor Information\" immediately after the ordered list.\n- Display another paragraph with placeholder text inside a <p> element below the subheader.\n- End the HTML document with a closing <footer> element that contains the text \"Visit us for an enriching experience\".",
        "raw_output_metric": [
            "<h1>",
            "Museum Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Exhibit Highlights",
            "<ol>",
            "Ancient Artifacts",
            "Sculpture Gallery",
            "Modern Exhibits",
            "Interactive Installations",
            "<li>",
            "<h3>",
            "Visitor Information",
            "<footer>",
            "Visit us for an enriching experience"
        ],
        "VQA": {
            "What is the text in the main title at the top of the page?": "Museum Overview",
            "What follows immediately after the main title?": "A paragraph with a short description of a historic museum.",
            "What graphical element is used to separate the content under the paragraph?": "A horizontal line.",
            "What is the text of the section header below the horizontal line?": "Exhibit Highlights",
            "How many items are in the ordered list, and what are they?": "4 items: Ancient Artifacts, Sculpture Gallery, Modern Exhibits, Interactive Installations",
            "What is the text of the subheader immediately following the ordered list?": "Visitor Information",
            "What text is displayed in the footer at the bottom of the document?": "Visit us for an enriching experience"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000444",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a brief descriptive paragraph about a historical museum tour into an HTML layout.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Museum Journey\".\n- Present the original descriptive paragraph inside a <p> element immediately following the header.\n- Insert a horizontal divider using the <hr> element right after the paragraph.\n- Add a subheader using an <h2> element with the text \"Exhibit Highlights\".\n- Incorporate an unordered list (<ul>) that contains exactly 3 list items (\"Ancient Artifacts\", \"Sculpture Gallery\", \"Historical Documents\") in the specified order, with each item enclosed in an <li> element.\n- Follow the list with a <section> element that provides additional information, enclosed in a <p> element.\n- End the output with a closing <footer> element containing the text \"Tour Concluded\".",
        "raw_output_metric": [
            "Museum Journey",
            "Exhibit Highlights",
            "Ancient Artifacts",
            "Sculpture Gallery",
            "Historical Documents",
            "Tour Concluded"
        ],
        "VQA": {
            "What is the text displayed in the main header of the page?": "Museum Journey",
            "Which element immediately follows the main header?": "A paragraph containing the descriptive text",
            "What element is used to visually separate the descriptive paragraph from the rest of the content?": "A horizontal divider",
            "What is the text shown in the subheader after the divider?": "Exhibit Highlights",
            "How many items are present in the unordered list?": "3",
            "What are the texts of the items listed in the unordered list?": "Ancient Artifacts, Sculpture Gallery, Historical Documents",
            "What is the text contained in the footer at the bottom of the page?": "Tour Concluded"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000445",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a beachside retreat into an HTML structure.\n\nFeature Requirements:\n- Include a main header using an <h1> element with the text \"Beach Retreat Overview\".\n- Display the original paragraph inside a <p> element immediately following the main header.\n- Add a subheader under the paragraph using an <h2> element with the text \"Scenic Details\".\n- Insert a horizontal line using the <hr> element after the subheader for visual separation.\n- Create an unordered list using a <ul> element that contains exactly 3 list items: \"Sunset Views\", \"Ocean Breezes\", and \"Sandy Shores\".\n- Each list item must be wrapped within an <li> element and appear in the order specified.\n- Conclude the HTML structure with a <footer> element containing the text \"End of Retreat Description\".",
        "raw_output_metric": [
            "Beach Retreat Overview",
            "Scenic Details",
            "Sunset Views",
            "Ocean Breezes",
            "Sandy Shores",
            "End of Retreat Description"
        ],
        "VQA": {
            "What is the text displayed in the main header?": "Beach Retreat Overview",
            "What element immediately follows the main header?": "A paragraph containing the original beachside retreat description.",
            "What is the text of the subheader appearing under the paragraph?": "Scenic Details",
            "Which element is used to create a visual separation after the subheader?": "A horizontal line",
            "How many items are included in the unordered list?": "3",
            "What are the list items in order?": "Sunset Views, Ocean Breezes, Sandy Shores",
            "What text does the footer element display?": "End of Retreat Description"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000446",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a mountain hiking adventure into an HTML structure.\n\nFeature Requirements:\n- Include an <h1> element with the text \"Mountain Hiking Adventure\" at the top of the document.\n- Display the original descriptive paragraph inside a <p> element immediately below the heading.\n- Insert a horizontal rule using the <hr> element directly after the paragraph to separate sections.\n- Add an <h2> element titled \"Trail Details\" below the horizontal line.\n- Create an ordered list using an <ol> element that contains exactly 4 items in the following order: \"Trail Length\", \"Difficulty Level\", \"Estimated Time\", and \"Scenic Viewpoints\".\n- End the HTML document with a <footer> element that contains the text \"End of Adventure\".",
        "raw_output_metric": [
            "Mountain Hiking Adventure",
            "Trail Details",
            "Trail Length",
            "Difficulty Level",
            "Estimated Time",
            "Scenic Viewpoints",
            "End of Adventure"
        ],
        "VQA": {
            "What is the main heading text at the top of the page?": "Mountain Hiking Adventure",
            "What type of element is used to display the descriptive paragraph?": "Paragraph",
            "What visual separator appears immediately after the paragraph?": "Horizontal Rule",
            "What is the title of the section below the horizontal rule?": "Trail Details",
            "How many items are there in the ordered list?": "4",
            "What are the items in the ordered list, listed in order?": "Trail Length, Difficulty Level, Estimated Time, Scenic Viewpoints",
            "What text is displayed in the footer?": "End of Adventure"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000447",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a renowned library into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Library Profile\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Insert a horizontal line using the <hr> element directly below the paragraph for clear separation.\n- Add a section heading using an <h2> element with the text \"Library Details\" beneath the horizontal line.\n- Present a bullet point list within a <ul> element containing exactly 3 items in order: \"Established Date\", \"Collections\", \"Location\".\n- Wrap each item in the bullet list within an <li> element to maintain clear structure.\n- Conclude the HTML document with a closing <footer> element containing the text \"Profile End\".",
        "raw_output_metric": [
            "<h1>",
            "Library Profile",
            "<p>",
            "<hr>",
            "<h2>",
            "Library Details",
            "<ul>",
            "<li>Established Date</li>",
            "<li>Collections</li>",
            "<li>Location</li>",
            "<footer>",
            "Profile End"
        ],
        "VQA": {
            "What is the main title visible at the top of the page?": "Library Profile",
            "What content appears immediately after the title?": "A paragraph with a description of a renowned library",
            "What visual element separates the paragraph from the section heading?": "Horizontal line",
            "What is the text of the section heading below the horizontal line?": "Library Details",
            "How many items are there in the bullet point list?": "3",
            "What are the bullet list items in order?": "Established Date, Collections, Location",
            "What text is displayed in the footer at the bottom of the document?": "Profile End"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000448",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a historical museum exhibit into an HTML structure.\n\nFeature Requirements:\n- Include a main heading using an <h1> element with the text \"Exhibit Overview\".\n- Display the original paragraph inside a <p> element immediately after the heading.\n- Insert a horizontal line using the <hr> element directly following the paragraph.\n- Add a subheading with an <h2> element that reads \"Historical Significance\".\n- Create an unordered list (<ul>) containing exactly 4 list items (<li>) in the following order: \"Origin\", \"Era\", \"Impact\", \"Legacy\".\n- Wrap the list in a <section> element with the class \"info-details\".\n- Include a secondary paragraph using a <p> element with the text \"Explore to learn more about the exhibit's background.\"\n- End the HTML document with a closing <footer> element containing the text \"Thank you for visiting\".",
        "raw_output_metric": [
            "Exhibit Overview",
            "Historical Significance",
            "Origin",
            "Era",
            "Impact",
            "Legacy",
            "info-details",
            "Explore to learn more about the exhibit's background.",
            "Thank you for visiting"
        ],
        "VQA": {
            "What is the main heading text displayed at the top of the page?": "Exhibit Overview",
            "What type of element immediately follows the main heading?": "A paragraph containing the original exhibit description",
            "What visual separator is present after the initial paragraph?": "A horizontal line",
            "What text is shown in the subheading below the horizontal line?": "Historical Significance",
            "How many items are listed in the unordered list, and what are they?": "4 items: Origin, Era, Impact, Legacy",
            "What message is displayed at the bottom of the document in the footer?": "Thank you for visiting"
        }
    },
    {
        "task_name": "Text to HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "task_id": "000449",
        "input_type": "Text",
        "output_type": "HTML",
        "rendering": true,
        "query": "Please output HTML:\n\nTask:\nConvert a short paragraph describing a classic musical instrument into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Instrument Overview\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element directly below the paragraph to separate content.\n- Insert a section title using an <h2> element with the text \"Sound Characteristics\".\n- Present a bullet point list in a <ul> element containing exactly 3 items: \"Tone\", \"Resonance\", and \"Dynamics\" in that specific order.\n- Ensure each list item is wrapped in its own <li> element.\n- Conclude the HTML document with a <footer> element containing the text \"End of Overview\".",
        "raw_output_metric": [
            "<h1>",
            "Instrument Overview",
            "<p>",
            "<hr>",
            "<h2>",
            "Sound Characteristics",
            "<ul>",
            "<li>",
            "Tone",
            "Resonance",
            "Dynamics",
            "<footer>",
            "End of Overview"
        ],
        "VQA": {
            "What is the main heading text displayed at the top of the page?": "Instrument Overview",
            "Which element immediately follows the main title?": "A paragraph with the original description",
            "What visual element is used directly below the paragraph to separate content?": "A horizontal line",
            "What is the text of the section title that comes after the horizontal line?": "Sound Characteristics",
            "How many items are in the bullet point list under the Sound Characteristics section?": "3",
            "What are the three items listed in the bullet point list?": "Tone, Resonance, Dynamics",
            "What text is shown in the footer at the end of the document?": "End of Overview"
        }
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000500",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract and structure specific details about a fictional business conference described in the input text.\n\nFeature Requirements:\n- Identify the conference title and include it under the \"conference_title\" key as a string.\n- Extract the conference location mentioned in the text (city and venue) and include it under the \"location\" key as a string.\n- Retrieve all dates related to the conference and list them under the \"conference_dates\" key as an array of strings formatted as \"DD-MM-YYYY\".\n- Extract the scheduled start time of the conference and include it under a \"start_time\" key as a string in \"HH:MM\" 24-hour format.\n- Determine the number of keynote speakers mentioned in the text and include it under a \"keynote_speakers_count\" key as an integer.\n- List any monetary amounts (e.g., \"USD 150\") mentioned in the text under a \"monetary_values\" key as an array of strings.\n- Include the overall summary of the conference details under a \"summary\" key as a string summarizing the main points in no more than 50 words.",
        "raw_output_metric": [
            "conference_title",
            "location",
            "conference_dates",
            "start_time",
            "keynote_speakers_count",
            "monetary_values",
            "summary"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000501",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract detailed meeting event information from the input text and present it as a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a concise string description (up to 50 words) summarizing the key topics and outcomes of the meeting.\n- Extract all numeric identifiers (such as reference numbers or phone numbers) mentioned in the text and list them under an \"identifiers\" key as an array of strings.\n- Identify and list every venue or physical location referenced (e.g., building names, street addresses) under a \"venues\" key as an array of strings.\n- Extract the names of all mentioned organizations and include them under an \"organizations\" key as an array of strings.\n- Capture the meeting's start time and end time, converting them to a 24-hour \"HH:MM\" format, and include these details under \"start_time\" and \"end_time\" keys respectively.\n- If available, extract the participant count from the text and present it as an integer under a \"participant_count\" key.\n- If any discount or statistical percentages are provided (e.g., \"20% discount\"), list them under a \"discounts\" key as an array of strings retaining the original percentage format.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list any email addresses mentioned, including them in an \"emails\" key as an array of strings.\n- Locate any specific meeting date mentioned and format it as \"YYYY-MM-DD\" under a \"meeting_date\" key.",
        "raw_output_metric": [
            "event_summary",
            "identifiers",
            "venues",
            "organizations",
            "start_time",
            "end_time",
            "participant_count",
            "discounts",
            "sentence_count",
            "emails",
            "meeting_date"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000502",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the provided text into a structured JSON object that extracts key details from a corporate press release announcement.\n\nFeature Requirements:\n- Include a \"summary\" key with a concise string summary of the text's main announcement, limited to 50 words.\n- Identify and list all phone numbers mentioned in the text that follow the format \"+<country_code> <number>\" under a \"phone_numbers\" key as an array of strings.\n- Extract any monetary amounts (e.g., \"$5000\", \"€3000\") and store them in an \"amounts\" key as an array of strings.\n- Detect and list all email addresses found in the text under an \"emails\" key as an array of strings.\n- Count and include the total number of characters, including spaces, in the text under a \"character_count\" key as an integer.\n- Extract all dates formatted as \"MM/DD/YYYY\" and provide them in a \"dates\" key as an array of strings.",
        "raw_output_metric": [
            "summary",
            "phone_numbers",
            "amounts",
            "emails",
            "character_count",
            "dates"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000503",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input event announcement text into a structured JSON object that extracts key details about the event.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly encapsulates the core message of the event in no more than 40 words.\n- Extract the first occurrence of a date from the text and assign it to an \"event_date\" key as a string formatted as \"YYYY-MM-DD\".\n- Identify and extract the event's location from the text, storing it under a \"venue\" key as a string.\n- Search the input text for any numerical reference to the expected number of guests and include it under an \"attendee_count\" key as an integer.\n- Identify all numbers preceded by a currency symbol (e.g., \"$\") and list them under a \"budget\" key as an array of strings, preserving the currency symbol.\n- Extract any hashtags (words starting with \"#\") present in the text and include them in a \"hashtags\" key as an array of strings.\n- Identify all personal names mentioned as organizers and include them in an \"organizers\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.",
        "raw_output_metric": [
            "event_summary",
            "event_date",
            "venue",
            "attendee_count",
            "budget",
            "hashtags",
            "organizers",
            "word_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000504",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract and organize detailed information from a scientific experiment report into a structured JSON object.\n\nFeature Requirements:\n- Include an \"experiment_title\" key with a string value that provides the official title of the experiment as mentioned in the text.\n- Extract the \"date_conducted\" from the input text, ensuring it is formatted as \"YYYY-MM-DD\", and store it in a \"dates\" key as an array of strings.\n- Identify and list all the instruments or equipment used in the experiment under an \"instruments\" key as an array of strings.\n- Summarize the experiment's objective in a \"purpose\" key with a string value containing no more than 40 words.\n- Include a \"measurements\" key with an object value, where each measurement (e.g., temperature, pressure) is a key paired with its numerical value extracted from the text.\n- Extract any percentage values mentioned in the text and include them in a \"reported_percentages\" key as an array of strings, preserving the percentage symbol.\n- Count the number of distinct scientific terms mentioned in the report and include this count as an integer under a \"scientific_terms_count\" key.\n- Identify all names of researchers mentioned and list them under a \"researchers\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"total_word_count\" key.\n- If any statistical results (such as p-values) are provided, extract them and include them in a \"statistics\" key as an array of strings with the original formatting.",
        "raw_output_metric": [
            "experiment_title",
            "dates",
            "instruments",
            "purpose",
            "measurements",
            "reported_percentages",
            "scientific_terms_count",
            "researchers",
            "total_word_count",
            "statistics"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000505",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text into a detailed JSON object that identifies specific types of information and computes basic text metrics.\n\nFeature Requirements:\n- Include a \"brief\" key with a one-sentence summary that encapsulates the primary topic of the input text.\n- Identify and list all email addresses found in the input text under an \"emails\" key as an array of strings.\n- Extract all monetary amounts prefixed by a currency symbol (such as \"$\", \"€\", or \"£\") under a \"monetary_values\" key as an array of strings.\n- Count the number of complete sentences in the text and include this count under a \"sentence_count\" key as an integer.\n- Identify all phone numbers formatted as \"XXX-XXX-XXXX\" and list them under a \"phone_numbers\" key as an array of strings.\n- Extract and include all hashtags (words beginning with \"#\") mentioned in the text under a \"hashtags\" key as an array of strings.\n- Determine the total character count of the input text and include this number under a \"character_count\" key as an integer.",
        "raw_output_metric": [
            "brief",
            "emails",
            "monetary_values",
            "sentence_count",
            "phone_numbers",
            "hashtags",
            "character_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000506",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract key travel itinerary details from the input text and represent them in a structured JSON object.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that briefly summarizes the main travel details in no more than 50 words.\n- Extract all departure and return dates from the text and list them under a \"travel_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all city names mentioned as destinations and include them in a \"destinations\" key as an array of strings.\n- Count the total number of travelers mentioned in the text and include this as an integer under a \"traveler_count\" key.\n- Extract any reservation codes or flight numbers mentioned in the text and list them under a \"reservation_ids\" key as an array of strings.\n- If currency amounts are present, extract and list them under a \"prices\" key as an array of strings in their original format.",
        "raw_output_metric": [
            "summary",
            "travel_dates",
            "destinations",
            "traveler_count",
            "reservation_ids",
            "prices"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000507",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text describing a coastal erosion impact report into a structured JSON object containing extracted environmental and geographical details.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value that briefly summarizes the main findings of the report in no more than 60 words.\n- Extract all dates mentioned in the text and list them under an \"erosion_dates\" key as an array of strings formatted as \"MM/DD/YYYY\".\n- Identify and include all coastline names and region identifiers mentioned in the text under a \"coastlines\" key as an array of strings.\n- Find every numerical measurement related to erosion rates (e.g., in meters per year) and list them under an \"erosion_rates\" key as an array of numbers.\n- Count the total number of sentences in the input text and provide this count as an integer value under a \"sentence_count\" key.\n- Extract any temperature readings (including their units, for example \"15°C\") mentioned in the text and list them under a \"temperatures\" key as an array of strings.\n- Identify any percentages that indicate risk levels or reduction estimates and include them under a \"risk_percentages\" key as an array of strings retaining the original percentage format.",
        "raw_output_metric": [
            "overview",
            "erosion_dates",
            "coastlines",
            "erosion_rates",
            "sentence_count",
            "temperatures",
            "risk_percentages"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000508",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text, which details a travel itinerary, into a structured JSON object summarizing the trip highlights and logistics.\n\nFeature Requirements:\n- Include a \"destination\" key with a string value representing the primary travel destination mentioned.\n- Extract specific daily plans into an \"itinerary\" key as an array; each array element should be an object that contains a \"date\" key formatted as \"YYYY-MM-DD\" and an \"activities\" key as an array of strings listing activities planned for that day.\n- Count the total number of days mentioned in the travel plan and include this information as an integer under a \"total_days\" key.\n- Include a \"notes\" key with a string value summarizing any extra recommendations or travel tips mentioned, limited to 40 words.\n- If any flight numbers appear in the text (formatted as two uppercase letters followed by 3 to 4 digits, such as \"AB123\" or \"XY4567\"), list these under a \"flights\" key as an array of strings.",
        "raw_output_metric": [
            "destination",
            "itinerary",
            "itinerary[].date",
            "itinerary[].activities",
            "total_days",
            "notes",
            "flights"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000509",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input financial report text into a structured JSON object summarizing key numerical and organizational data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value that summarizes the overall conclusion of the financial report in exactly 40 to 50 words.\n- Extract all monetary amounts mentioned in the text and list them under a \"monetary_values\" key as an array of strings, preserving currency symbols (e.g., \"$1500\", \"€1200\").\n- Identify all business or organization names mentioned in the text and include them under an \"organizations\" key as an array of strings.\n- Locate and format all publication dates mentioned in the text, listing them under a \"publication_dates\" key as an array of strings in the \"MM/DD/YYYY\" format.\n- Count the total number of unique technical terms (distinct words not commonly used in everyday language) in the text and include this count under a \"tech_term_count\" key as an integer.\n- Extract any percentages related to profit or loss mentioned in the text and list them under a \"profit_changes\" key as an array of strings retaining the original format (e.g., \"20%\").\n- Extract any segmentation headings marked by a colon (\":\") in the text, trim any extra spaces, and list these under a \"report_sections\" key as an array of strings.\n- Include a \"total_character_count\" key with an integer value representing the total number of characters in the input text.\n- Identify all phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(xxx) xxx-xxxx\".",
        "raw_output_metric": [
            "brief",
            "monetary_values",
            "organizations",
            "publication_dates",
            "tech_term_count",
            "profit_changes",
            "report_sections",
            "total_character_count",
            "phone_numbers"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000510",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the input travel article into a structured JSON object that extracts destination details, scheduled events, and statistical figures.\n\nFeature Requirements:\n- Identify the first mentioned city or country in the text and include it as a string value under a \"destination\" key.\n- Extract all dates formatted as \"DD/MM/YYYY\" and list them under an \"event_dates\" key as an array of strings.\n- Calculate the sum of all durations mentioned (e.g., \"2 hours\", \"30 minutes\") in minutes and include this integer under a \"total_duration_minutes\" key.\n- Summarize mentions of popular tourist attractions in no more than 30 words and store this as a string under an \"attraction_summary\" key.\n- Identify numerical ratings (e.g., \"4.5 stars\") and list each occurrence in an array under a \"ratings\" key, preserving their original format.\n- Count the total number of sentences in the text and include this number as an integer under a \"sentence_count\" key.\n- Extract any monetary amounts mentioned in currency format (e.g., \"$100\", \"€50\") and include them in an array under a \"costs\" key.\n- Identify and list all transportation methods mentioned (e.g., \"bus\", \"train\", \"flight\") as an array of strings under a \"transport_methods\" key.\n- Capture and list any percentages mentioned (e.g., \"25% off\") in an array under a \"discounts\" key.\n- If weather conditions (e.g., \"sunny\", \"rainy\") are noted in the article, include them as an array under a \"weather_conditions\" key.",
        "raw_output_metric": [
            "destination",
            "event_dates",
            "total_duration_minutes",
            "attraction_summary",
            "ratings",
            "sentence_count",
            "costs",
            "transport_methods",
            "discounts",
            "weather_conditions"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000511",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text describing a city-wide cultural fair into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that summarizes the main event in no more than 60 characters.\n- Extract the exact name of the fair from the input text and include it under an \"event_name\" key.\n- Identify and list all locations mentioned in the text under a \"locations\" key as an array of strings.\n- Extract any times provided (formatted as \"HH:MM\" or \"HH:MM AM/PM\") and list them under a \"times\" key as an array of strings.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract all monetary amounts (e.g., \"$20\" or \"$15.50\") from the text and include them under a \"prices\" key as an array of strings, preserving the original format.\n- Identify all hashtags (e.g., \"#CityFair\") mentioned in the text and list them under a \"hashtags\" key as an array of strings, sorted alphabetically.",
        "raw_output_metric": [
            "headline",
            "event_name",
            "locations",
            "times",
            "character_count",
            "prices",
            "hashtags"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000512",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract structured information from a restaurant review text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the main points of the review in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"review_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify all unique restaurant names mentioned in the text and include them in a \"restaurant_names\" key as an array of strings.\n- Extract all monetary amounts in US dollars (e.g., \"$20\") from the text and list them under a \"prices\" key as an array of strings.\n- Count the total number of characters in the input text and include this information as an integer value under a \"char_count\" key.\n- Detect and list any phone numbers in the text under a \"phone_numbers\" key as an array of strings using a consistent format.\n- If any percentages are mentioned in the text, list them under a \"discounts\" key as an array of strings, retaining the original format.\n- Include a \"word_frequency\" key that contains an object mapping each unique word longer than four characters to its occurrence count in the input text.",
        "raw_output_metric": [
            "review_summary",
            "review_dates",
            "restaurant_names",
            "prices",
            "char_count",
            "phone_numbers",
            "discounts",
            "word_frequency"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000513",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted details about a scientific expedition and its outcomes.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value summarizing the expedition details in no more than 50 words.\n- Extract all geographic coordinates mentioned in the text and list them under a \"coordinates\" key as an array of strings formatted as \"latitude, longitude\".\n- Identify all institutions or organizations referenced in the input and include them in an \"organizations\" key as an array of strings.\n- Extract any numerical measurements (such as distances, durations, or altitudes) from the text and include them under a \"measurements\" key as an object mapping measurement types to their numeric values.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- If any scientific terms ending with \"-ology\" are mentioned, list them under a \"special_terms\" key as an array of strings.\n- Extract the publication year from the text, if available, and include it as an integer value under a \"publication_year\" key.",
        "raw_output_metric": [
            "event_summary",
            "coordinates",
            "organizations",
            "measurements",
            "sentence_count",
            "special_terms",
            "publication_year"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000514",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the provided business report text into a structured JSON object that extracts specific details and metrics.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value summarizing the main focus of the report in exactly one sentence.\n- Extract all valid email addresses from the text and list them in a \"contact_emails\" key as an array of strings.\n- Identify and list all dates formatted as \"DD/MM/YYYY\" found in the text under a \"report_dates\" key as an array of strings.\n- Extract every instance of a location prefixed with the word \"City:\" and include them as an array of strings under a \"cities\" key.\n- Calculate the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Identify all monetary values mentioned in the format \"$X,XXX\" and list them as an array of strings under an \"amounts\" key.",
        "raw_output_metric": [
            "headline",
            "contact_emails",
            "report_dates",
            "cities",
            "character_count",
            "amounts"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000515",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract and structure specific details from a narrative text about a historical expedition.\n\nFeature Requirements:\n- Include a \"brief_overview\" key with a string value summarizing the main idea of the text in no more than 40 words.\n- Identify and extract all historical time references mentioned in the text (e.g., eras, centuries) and list them under a \"time_periods\" key as an array of strings.\n- Extract all location names highlighted in the text and include them under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Identify all numeric values representing distances or measurements and list them under a \"measurements\" key as an array of strings in the format \"number unit\" (e.g., \"15 km\").\n- If any monetary amounts are present, list them under a \"monetary_values\" key as an array of strings retaining their original formatting (e.g., \"$500\").\n- Extract any proper names of historical figures mentioned in the text and include them under a \"figures\" key as an array of strings.\n- Identify any mentions of percentages and list them under a \"ratios\" key as an array of strings, exactly as they appear (e.g., \"20%\").",
        "raw_output_metric": [
            "brief_overview",
            "time_periods",
            "locations",
            "sentence_count",
            "measurements",
            "monetary_values",
            "figures",
            "ratios"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000516",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract detailed analytical information from the input text and present it in a structured JSON format.\n\nFeature Requirements:\n- Include an \"overview\" key with a concise, one-sentence summary of the input text, not exceeding 40 words.\n- Identify all time markers in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract and list all geographic locations mentioned in the input text under a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Detect numeric values immediately followed by currency symbols and list them under a \"currencies\" key as an array of strings, retaining their original formatting.\n- Identify and record any email addresses mentioned in the text, listing them under an \"emails\" key as an array of strings.\n- Extract the five most frequently occurring topics or keywords from the input text and include them under a \"key_topics\" key as an array of strings.\n- Include a \"text_validation\" key which should state \"Valid\" if the input text is at least 100 words in length, or \"Insufficient text length\" if it is not.\n- Provide a \"metadata\" key that includes the character count of the entire input as an integer.\n- Include a \"punctuation_count\" key that records the total count of punctuation marks found in the input text as an integer.",
        "raw_output_metric": [
            "overview",
            "times",
            "locations",
            "sentence_count",
            "currencies",
            "emails",
            "key_topics",
            "text_validation",
            "metadata[character_count]",
            "punctuation_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000517",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the provided text into structured JSON containing organized details about an event report.\n\nFeature Requirements:\n- Provide an \"event_title\" key with a string value that captures the event's name, limited to 30 characters.\n- Extract a \"location\" key with the city and country from the text, formatted as \"City, Country\".\n- Identify all time details mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM AM/PM\".\n- Extract and list the top three adjectives describing the event under an \"adjectives\" key as an array of strings.\n- Include a \"participant_count\" key with an integer value representing the number of participants mentioned.\n- If monetary amounts are present, list them under an \"amounts\" key as an array of strings retaining the original currency symbols.\n- Provide a \"description\" key containing a summary of the event in no more than 70 words.\n- Include a \"keywords\" key listing unique recurring themes or key terms from the text as an array of strings.\n- Count the number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- Extract a date mentioned in the text and include it as a string under an \"event_date\" key formatted as \"YYYY-MM-DD\".",
        "raw_output_metric": [
            "event_title",
            "location",
            "times",
            "adjectives",
            "participant_count",
            "amounts",
            "description",
            "keywords",
            "sentence_count",
            "event_date"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000518",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the input text into a structured JSON object that organizes key information about a new product launch announcement.\n\nFeature Requirements:\n- Extract the \"product_name\" from the input text and include it as a string value.\n- Identify all launch dates mentioned in the text and list them under a \"launch_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Capture every instance of pricing information including currency symbols (e.g., \"$\", \"€\") and include them in a \"prices\" key as an array of strings.\n- Create a \"features\" key that holds an array of strings, each representing a distinct feature highlighted in the text.\n- Extract any technical specifications (such as \"RAM: 16GB\" or \"Storage: 512GB\") and list them under a \"specifications\" key in the format of an array of strings.\n- Identify and output any promotional codes mentioned in the text under a \"promo_codes\" key as an array of strings.\n- Include a \"word_count\" key that records the total number of words in the input text as an integer.\n- If a website URL is mentioned in the text, include it in a \"website\" key as a string, preserving the original format.",
        "raw_output_metric": [
            "product_name",
            "launch_dates",
            "prices",
            "features",
            "specifications",
            "promo_codes",
            "word_count",
            "website"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000519",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the input text about a community festival into a structured JSON object containing detailed event and participant information.\n\nFeature Requirements:\n- Extract the festival's \"title\" as a string and store it under the key \"event_title\".\n- Identify the festival's \"date\" in the text, format it as \"YYYY-MM-DD\", and assign it to the key \"event_date\".\n- Locate the location where the event is held and include it as a string under the key \"venue\".\n- List all the names of performers and artists mentioned in the text as an array under the key \"performers\".\n- Detect any ticket prices or fees stated in the text and compile them as an array of strings under the key \"prices\", preserving the original formatting with currency symbols.\n- Provide a short summary of the festival's main activities in no more than 50 words under the key \"description\".\n- If mentioned, extract the total number of attendees as an integer and store it under the key \"attendee_count\".\n- Identify unique festival-related keywords (at least three) present in the text and list them in an array under the key \"keywords\".",
        "raw_output_metric": [
            "event_title",
            "event_date",
            "venue",
            "performers",
            "prices",
            "description",
            "attendee_count",
            "keywords"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000520",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text, which describes a community festival, into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that briefly summarizes the theme of the festival in no more than 50 words.\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted in \"HH:MM\" (24-hour) format.\n- Identify all unique locations referenced in the text and include them in a \"locations\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count under a \"sentence_count\" key as an integer.\n- Extract any monetary amounts mentioned in the text, listing them under a \"prices\" key as an array of strings preserving the original currency format (e.g., \"$15.00\").\n- Identify and list any social media handles mentioned, including them in a \"social_handles\" key as an array of strings.\n- Include a \"language\" key that identifies the language of the input text as a string (e.g., \"English\").",
        "raw_output_metric": [
            "event_summary",
            "times",
            "locations",
            "sentence_count",
            "prices",
            "social_handles",
            "language"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000521",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract key weather forecast details from the input text and organize them in a structured JSON format.\n\nFeature Requirements:\n- Create an \"overview\" key that holds a brief summary of the weather forecast in no more than 50 words.\n- Extract all dates from the input text and list them under a \"forecast_dates\" key as an array of strings formatted as \"YYYY-MM-DD\".\n- Identify and list all geographic locations mentioned in the text under a \"locations\" key as an array of strings.\n- If temperature values are provided, extract the highest and lowest temperatures and assign them to \"high_temperature\" and \"low_temperature\" keys as numeric values.\n- Extract any precipitation probability percentages presented in the text and include them in a \"rain_chance_percentages\" key as an array of strings, retaining the original formatting (e.g., \"30%\").\n- Count the total number of characters in the input text and store this number as an integer in a \"char_count\" key.\n- If wind speed information is mentioned, extract each numeric wind speed along with its unit and record them as objects in a \"wind_speeds\" array, where each object contains \"value\" and \"unit\" keys.",
        "raw_output_metric": [
            "overview",
            "forecast_dates",
            "locations",
            "high_temperature",
            "low_temperature",
            "rain_chance_percentages",
            "char_count",
            "wind_speeds[*][value]",
            "wind_speeds[*][unit]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000522",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract event details and related metrics from the input text.\n\nFeature Requirements:\n- Identify the \"event_title\" by extracting the capitalized phrase that appears at the beginning of the text.\n- Create an \"organizer\" key containing a string with the name of the organization or individual responsible for the event, if mentioned.\n- Detect all date ranges mentioned and output an \"event_period\" object with \"start_date\" and \"end_date\" formatted as \"YYYY-MM-DD\".\n- Calculate and include \"event_duration\" as the total number of days between \"start_date\" and \"end_date\".\n- Extract and list all locations mentioned under a \"venues\" key as an array of strings.\n- Identify any ticket pricing (e.g., \"$30\", \"€25\") and include them under a \"ticket_prices\" key as an array of strings.\n- Extract specific time information (e.g., \"09:00 AM\", \"17:30\") from the text and output it as an array of strings under a \"timings\" key.\n- Count the total number of words in the input and output that number under a \"total_words\" key.\n- Identify any percentage values mentioned (e.g., \"20%\") and include them under a \"discounts\" key as an array of strings.\n- If a specific event theme or special note is mentioned, include it as a string under a \"theme\" key.",
        "raw_output_metric": [
            "event_title",
            "organizer",
            "event_period[start_date]",
            "event_period[end_date]",
            "event_duration",
            "venues",
            "ticket_prices",
            "timings",
            "total_words",
            "discounts",
            "theme"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000523",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nAnalyze the given historical narrative and produce a structured JSON object that extracts detailed information and statistics from the text.\n\nFeature Requirements:\n- Include a \"historical_summary\" key with a string that summarizes the narrative in no more than 50 words.\n- Extract all occurrences of geographic locations mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all significant events described in the text and compile them under an \"events\" key as an array of objects, where each object contains \"description\" and \"date\" keys.\n- Count the occurrences of the words \"independence\", \"empire\", and \"colonial\" and include this data as an object under a \"keyword_counts\" key with each word as a key and its count as an integer.\n- Locate and list any monetary amounts found in the text under a \"money_values\" key as an array of strings, preserving the original formatting (e.g., \"$500\", \"€250\").\n- Add a \"line_count\" key with an integer representing the total number of lines in the input text.\n- Identify all fractions present in the text (such as \"1/3\", \"2/5\") and include them under a \"fractions\" key as an array of strings.\n- Provide a \"most_frequent_word\" key with the string that represents the word appearing most frequently in the text.\n- Extract any explicitly enumerated or bulleted lists in the text and include them under a \"lists_found\" key as an array of arrays, where each sub-array represents a separate list.\n- Include a \"reading_time_minutes\" key with an estimated reading time in minutes, calculated based on an average reading speed of 200 words per minute.",
        "raw_output_metric": [
            "historical_summary",
            "locations",
            "events",
            "events[].description",
            "events[].date",
            "keyword_counts",
            "keyword_counts[independence]",
            "keyword_counts[empire]",
            "keyword_counts[colonial]",
            "money_values",
            "line_count",
            "fractions",
            "most_frequent_word",
            "lists_found",
            "reading_time_minutes"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000524",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input narrative into a structured JSON object capturing specific details and analytics.\n\nFeature Requirements:\n- Include a \"description\" key with a string value that provides a concise summary of the narrative in no more than 60 words.\n- Extract all numerical values found within the text (including whole numbers and decimals) and list them under a \"numbers\" key as an array of strings.\n- Identify every unique geographical location mentioned and include them under a \"locations\" key as an array of strings.\n- Compute the total number of sentences in the text and include this as an integer value under a \"sentence_count\" key.\n- If any time values are present, extract them and list these under a \"times\" key as an array of strings formatted in 24-hour \"HH:MM\" style.\n- Detect an explicit title if one exists at the beginning of the text and include it under a \"title\" key as a string.\n- Create a \"word_frequency\" key mapping each word (case-insensitive and appearing more than once) to its occurrence count as an object.",
        "raw_output_metric": [
            "description",
            "numbers",
            "locations",
            "sentence_count",
            "times",
            "title",
            "word_frequency"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000525",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nAnalyze the input text about a weather research report and output a JSON summarizing the key findings.\n\nFeature Requirements:\n- Include a \"weather_summary\" key with a brief description of the main weather pattern discussed in the text, using no more than 40 words.\n- Extract all temperature values mentioned in the text and list them under a \"temperatures\" key as an array of strings, formatted with the degree symbol and units (e.g., \"23°C\").\n- Identify each meteorological phenomenon mentioned (such as \"rain\", \"snow\", \"wind\", \"fog\") and include them in a \"phenomena\" key as an array of strings.\n- Count the total number of sentences in the input text and provide this number as an integer under a \"sentence_count\" key.\n- Extract any specific location names referenced in the report and include them in a \"locations\" key as an array of strings.\n- If the text mentions any wind speeds, extract them and list the values under a \"wind_speeds\" key as an array of strings, maintaining the original format (e.g., \"15 km/h\").",
        "raw_output_metric": [
            "weather_summary",
            "temperatures",
            "phenomena",
            "sentence_count",
            "locations",
            "wind_speeds"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000526",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the provided project meeting summary into a structured JSON object detailing specific components mentioned in the text.\n\nFeature Requirements:\n- Include a \"meeting_topic\" key with a string value that summarizes the main subject of the meeting in no more than 50 words.\n- Extract all meeting dates from the input text and list them under a \"meeting_dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all project phase names mentioned (such as \"planning\", \"execution\", \"evaluation\") and include them in a \"phases\" key as an array of strings.\n- Extract any budget figures mentioned in the text (formatted like \"$1000\", \"$500K\") and include them under a \"budgets\" key as an array of strings retaining the original formatting.\n- Count the total number of characters in the input text and include this number under a \"character_count\" key as an integer.\n- Identify all team lead names mentioned in the input text and include them in a \"team_leads\" key as an array of strings.\n- Extract the names of all locations or venues referred to in the meeting and include them under a \"locations\" key as an array of strings.\n- Identify action items mentioned in the text and list them under a \"tasks\" key, where each task is an object with \"description\" and, if available, a \"responsible\" key representing the person assigned.\n- Ensure each key follows the structure provided and that all values are derived directly from the input text.",
        "raw_output_metric": [
            "meeting_topic",
            "meeting_dates",
            "phases",
            "budgets",
            "character_count",
            "team_leads",
            "locations",
            "tasks",
            "tasks[].description",
            "tasks[].responsible"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000527",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object that organizes key details and data points extracted from the text.\n\nFeature Requirements:\n- Include a \"topic\" key with a string value summarizing the main theme of the input text in no more than 30 words.\n- Extract all location names (such as cities and countries) mentioned in the text and list them under a \"locations\" key as an array of strings.\n- Identify all time stamps in the format \"HH:MM\" and list them under a \"times\" key as an array of strings sorted in ascending order.\n- Search the text for any percentages mentioned and list them under a \"percentages\" key as an array of strings, preserving the percent symbol.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- If measurement values with units such as \"km\" or \"lbs\" appear in the text, extract them and list under a \"measurements\" key as an array of strings.\n- Identify all unique acronyms (sequences of uppercase letters, at least two characters in length) mentioned in the text and include them under an \"acronyms\" key as an array of strings.",
        "raw_output_metric": [
            "topic",
            "locations",
            "times",
            "percentages",
            "sentence_count",
            "measurements",
            "acronyms"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000528",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nParse a blog post about environmental conservation and generate a structured summary with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"headline\" key with a string value that provides a concise summary of the blog post's main message in no more than 20 words.\n- Extract all numerical measurements (with accompanying units like liters, kilograms, meters) found in the text and list them under a \"measurements\" key as an array of strings, preserving the original format.\n- Identify all city names mentioned in the text and include them in a \"cities\" key as an array of strings.\n- Extract the publication date from the text, if available, and provide it under a \"publication_date\" key in \"YYYY-MM-DD\" format; if no date is found, set the value to null.\n- Count the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- List all highlighted scientific terms that begin with a capital letter and appear technical under a \"scientific_terms\" key as an array of strings.",
        "raw_output_metric": [
            "headline",
            "measurements",
            "cities",
            "publication_date",
            "sentence_count",
            "scientific_terms"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000529",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract structured details from a customer feedback email message.\n\nFeature Requirements:\n- Include a key \"overview\" with a summary of the email content in 40 words or less.\n- Extract all product names mentioned in the email and list them under \"products\" as an array of strings, ensuring each name starts with an uppercase letter.\n- Identify and list all email addresses present in the text under \"contact_emails\" as an array of strings.\n- Extract any monetary amounts (e.g., \"$49.99\") from the email and include them under \"prices\" as an array of strings.\n- Count the total number of sentences in the email and provide this count as an integer under \"sentence_count\".\n- If any discount percentages are mentioned (e.g., \"20%\"), list them under \"discounts\" as an array of strings.",
        "raw_output_metric": [
            "overview",
            "products",
            "contact_emails",
            "prices",
            "sentence_count",
            "discounts"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000530",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract detailed event information from the provided event description text.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value that represents the main title of the event.\n- Extract a \"venue\" key with a string value that identifies the location where the event is being held.\n- Identify all speakers mentioned in the text and list them under a \"speakers\" key as an array of strings.\n- Include a \"topics\" key with an array of strings extracted from the key topics discussed in the event.\n- Parse any time details from the text and list them under a \"times\" key as an array of strings in \"HH:MM\" 24-hour format.\n- Count the total number of sentences in the input text and include this count as an integer value under a \"sentence_count\" key.\n- Extract any provided contact emails and list them under a \"contact_emails\" key as an array of strings.\n- If any cost information is present in the text, list those values under a \"costs\" key as an array of strings that retain the original currency format (e.g., \"$50\").",
        "raw_output_metric": [
            "event_title",
            "venue",
            "speakers",
            "topics",
            "times",
            "sentence_count",
            "contact_emails",
            "costs"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000531",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the input text about a market analysis report into a structured JSON object that extracts and organizes key details.\n\nFeature Requirements:\n- Include a \"report_summary\" key with a string that summarizes the main theme of the report in no more than 50 words.\n- Extract all dates mentioned in the input text and list them under a \"report_dates\" key as an array of strings, each formatted as \"YYYY-MM-DD\".\n- Identify all unique company names noted in the input text and include them in a \"company_names\" key as an array of strings.\n- Locate all currency values (denoted with a \"$\" sign) in the input text and list them under a \"financial_figures\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer value under a \"word_count\" key.\n- Identify any industry sectors mentioned in the input text and include them in an \"industry_sectors\" key as an array of strings.\n- If any percentages are present in the text, extract them and list them under a \"percentage_changes\" key as an array of strings, keeping the original format (e.g., \"25%\").\n- Extract any notable product releases mentioned, and include them in a \"product_releases\" key as an array of strings.",
        "raw_output_metric": [
            "report_summary",
            "report_dates",
            "company_names",
            "financial_figures",
            "word_count",
            "industry_sectors",
            "percentage_changes",
            "product_releases"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000532",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract detailed information regarding a restaurant review from the input text.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string value that summarizes the overall sentiment of the review in no more than 40 words.\n- Extract the restaurant’s name mentioned in the text and include it under a \"restaurant_name\" key as a string.\n- Identify all dishes mentioned in the text and include them in a \"dishes\" key as an array of strings.\n- Extract any phone numbers formatted as \"(XXX) XXX-XXXX\" found in the text and list them under a \"contact_numbers\" key as an array of strings.\n- Identify all dates representing dining events, convert them to the \"YYYY-MM-DD\" format, and list them under a \"visit_dates\" key as an array of strings.\n- Count the total number of sentences in the input text and include the count under a \"sentence_count\" key as an integer.\n- Extract all monetary amounts indicated with a dollar sign (e.g., \"$20\") and list them under a \"prices\" key as an array of strings.\n- Include a \"word_count\" key with an integer value representing the total number of words in the input text.",
        "raw_output_metric": [
            "review_summary",
            "restaurant_name",
            "dishes",
            "contact_numbers",
            "visit_dates",
            "sentence_count",
            "prices",
            "word_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000533",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing extracted insights and details about events described.\n\nFeature Requirements:\n- Extract all times mentioned in the text and list them under a \"times\" key as an array of strings formatted as \"HH:MM\" in 24-hour notation.\n- Identify every geographical location mentioned and include them in a \"locations\" key as an array of strings.\n- Summarize the overall event described in the text in no more than 60 words and include it under a \"event_summary\" key.\n- Extract all email addresses found in the text and list them under an \"emails\" key as an array of strings, preserving their original format.\n- Count the total number of sentences within the input text and include the number as an integer value under a \"sentence_count\" key.\n- Identify all unique action verbs present in the text and list them under an \"action_verbs\" key as an array of strings.\n- Record the total number of characters in the input text and include this count as an integer under a \"character_count\" key.\n- If currency amounts are mentioned, extract them and list them under a \"currencies\" key as an array of strings in the original format.\n- Detect and list any phone numbers mentioned in the text under a \"phone_numbers\" key as an array of strings, ensuring they follow the \"XXX-XXX-XXXX\" format.",
        "raw_output_metric": [
            "times",
            "locations",
            "event_summary",
            "emails",
            "sentence_count",
            "action_verbs",
            "character_count",
            "currencies",
            "phone_numbers"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000534",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract essential details from the input text and organize them into a structured JSON object.\n\nFeature Requirements:\n- Include a \"brief\" key with a concise summary of the main objective of the input text, limited to 50 words.\n- Identify and extract all geographical coordinates in the format \"lat: <value>, long: <value>\" and list them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys.\n- Locate every monetary value mentioned in the text (prefixed with a currency symbol) and list them under a \"monetary_values\" key as an array of strings formatted to two decimal places.\n- Detect all instances of measurement units (e.g., \"km\", \"miles\", \"lbs\") paired with numerical values and include them under a \"measurements\" key as an array of objects, each with \"value\" and \"unit\" keys.\n- Count the total number of sentences in the input text and include that number under a \"sentence_count\" key.\n- Extract any email addresses found in the text and list them under an \"emails\" key as an array of strings.\n- Identify all hashtags (words starting with \"#\") present in the text and list them under a \"hashtags\" key as an array of strings.",
        "raw_output_metric": [
            "brief",
            "coordinates",
            "coordinates[0][latitude]",
            "coordinates[0][longitude]",
            "monetary_values",
            "measurements",
            "measurements[0][value]",
            "measurements[0][unit]",
            "sentence_count",
            "emails",
            "hashtags"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000535",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract specific event information from the input text and organize it into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string value that succinctly describes the event in no more than 60 words.\n- Extract the primary event date from the input text and include it under a \"date\" key formatted as \"DD-MM-YYYY\".\n- Identify the event location mentioned in the text and store it under a \"location\" key as a string.\n- Extract any ticket price information mentioned and list each price under a \"ticket_prices\" key as an array of strings.\n- Count the total number of unique event-related actions described and include this as an integer under an \"action_count\" key.\n- If available, extract an organizer's contact phone number and include it under a \"contact_phone\" key as a string.\n- Identify any time details (like start and end times) and list them under a \"times\" key as an array of strings formatted as \"HH:MM\".\n- Extract all mentions of special guest names and include them under a \"guests\" key as an array of strings.",
        "raw_output_metric": [
            "event_summary",
            "date",
            "location",
            "ticket_prices",
            "action_count",
            "contact_phone",
            "times",
            "guests"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000536",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract structured details from a crime narrative text into a JSON object.\n\nFeature Requirements:\n- Include an \"incident_report\" key with a string value summarizing the main event of the story in no more than 60 words.\n- Identify all locations mentioned in the text and list them under a \"locations\" key as an array of unique strings.\n- Extract names of individuals involved as suspects and provide them in a \"suspects\" key as an array of strings.\n- Identify all time references within the text and include them under a \"times\" key as an array of strings formatted in \"HH:MM\" using 24-hour notation.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Extract any phone numbers mentioned in the text and list them under a \"phone_numbers\" key as an array of strings formatted as \"(XXX) XXX-XXXX\".",
        "raw_output_metric": [
            "incident_report",
            "locations",
            "suspects",
            "times",
            "sentence_count",
            "phone_numbers"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000537",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nAnalyze the input text and organize extracted details into a structured JSON object with clearly defined keys.\n\nFeature Requirements:\n- Include a \"title\" key containing the first sentence of the text.\n- Extract all monetary amounts mentioned (formatted with a currency symbol, e.g., \"$150\") and list them in a \"monetary_values\" array.\n- Identify and list all country names mentioned in the text under a \"countries\" key as an array of strings.\n- Perform a basic sentiment analysis and output the result as a \"sentiment\" key with a value of \"positive\", \"neutral\", or \"negative\".\n- Count all numerical values in the text and include an object under the key \"numeric_summary\" that has two properties: \"number_count\" for the total count and \"average_value\" for their average.\n- Determine the total number of sentences and provide this count under a \"sentence_count\" key as an integer.\n- Extract time notations in the \"HH:MM\" 24-hour format and list them in a \"times\" array.\n- Identify and list unique keywords from the first paragraph in a \"keywords\" array.",
        "raw_output_metric": [
            "title",
            "monetary_values",
            "countries",
            "sentiment",
            "numeric_summary[number_count]",
            "numeric_summary[average_value]",
            "sentence_count",
            "times",
            "keywords"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000538",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from a customer experience narrative related to a technology product.\n\nFeature Requirements:\n- Include a \"review_summary\" key with a string summarizing the overall sentiment and main points of the narrative in no more than 50 words.\n- Identify and list all product model names mentioned under a \"products\" key as an array of strings.\n- Extract all order numbers formatted as \"ORD\" followed by 7 digits and include them in an \"order_numbers\" key as an array of strings.\n- Locate and capture any time stamps formatted in 24-hour \"HH:MM\" format, placing them under a \"time_stamps\" key as an array of strings.\n- Count and include the total number of words in the input text as an integer value under a \"word_count\" key.\n- Identify and list all currency amounts present in the text (formatted as \"$\" followed by numeric values with two decimal places) under a \"prices\" key as an array of strings.\n- Extract any email addresses mentioned and include them in an \"emails\" key as an array of strings.\n- Count all numeric ratings mentioned (such as stars rated between 1 and 5) and include them as an array of integers under a \"ratings\" key.\n- Compute and include the total number of characters in the input text as an integer value under a \"char_count\" key.\n- If any warranty-related comments are made, trim each to 100 characters and list them under a \"warranty_comments\" key as an array of strings.",
        "raw_output_metric": [
            "review_summary",
            "products",
            "order_numbers",
            "time_stamps",
            "word_count",
            "prices",
            "emails",
            "ratings",
            "char_count",
            "warranty_comments"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000539",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert a technical log entry input into a structured JSON object with specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"brief_description\" key with a string value that summarizes the main log information in no more than 50 words.\n- Extract all IPv4 addresses mentioned in the input text and list them under the \"ip_addresses\" key as an array of strings.\n- Identify all log levels (e.g., INFO, WARN, ERROR) from the text and include them under a \"log_levels\" key as an array of unique strings.\n- Count the total number of error messages in the log and include this integer under an \"error_count\" key.\n- Extract any timestamps present in the text that follow the \"HH:MM:SS\" format and list them under a \"timestamps\" key as an array of strings.\n- If any URLs are mentioned, capture them under a \"urls\" key as an array of strings, retaining their original format.\n- Include a \"character_count\" key with an integer value representing the total number of characters in the input text.",
        "raw_output_metric": [
            "brief_description",
            "ip_addresses",
            "log_levels",
            "error_count",
            "timestamps",
            "urls",
            "character_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000540",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract structured information about a fictional tech conference from the input text.\n\nFeature Requirements:\n- Include an \"event_name\" key with a string value representing the name of the conference.\n- Extract all monetary amounts mentioned in the text and list them under a \"prices\" key as an array of numbers.\n- Identify the venue location within the text and include it under a \"venue\" key as a string.\n- Capture all email addresses found in the text and include them under an \"emails\" key as an array of strings.\n- Compute the total number of sentences in the input text and include this as an integer value under a \"sentence_count\" key.\n- Record any hashtags mentioned in the text under a \"hashtags\" key as an array of strings.\n- If specific time slots are detailed, extract and list them under a \"time_slots\" key as an array of strings in \"HH:MM\" format.\n- Track the presence of any phone numbers and include them under a \"phone_numbers\" key as an array of formatted strings.\n- Identify all percentage values mentioned in the text and include them under a \"percentages\" key as an array of strings exactly as they appear.",
        "raw_output_metric": [
            "event_name",
            "prices",
            "venue",
            "emails",
            "sentence_count",
            "hashtags",
            "time_slots",
            "phone_numbers",
            "percentages"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000541",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract and structure detailed information about a local town festival from the input text.\n\nFeature Requirements:\n- Create a \"festival_summary\" key that contains a concise summary of the festival, limited to 40 words.\n- Extract and include the \"date\" key, formatted as \"MM/DD/YYYY\", representing the primary event date.\n- Identify and include a \"location\" key that captures the name of the town or city where the festival is held.\n- List all unique performer names mentioned in the text under a \"performers\" key as an array of strings.\n- Extract any mentioned ticket price and include it as a numerical value under a \"ticket_price\" key, formatted with two decimal places.\n- Identify and include an \"activities\" key that contains an array of strings listing all event activities described in the text.\n- Count the total number of sentences in the input text and provide this count under a \"sentence_count\" key as an integer.\n- If the text specifies an event duration, extract it and place it under an \"event_duration\" key, retaining the original format.",
        "raw_output_metric": [
            "festival_summary",
            "date",
            "location",
            "performers",
            "ticket_price",
            "activities",
            "sentence_count",
            "event_duration"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000542",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the provided intergalactic conference report into a structured JSON object containing detailed event information and extracted metadata.\n\nFeature Requirements:\n- Include an \"event_summary\" key with a string that summarizes the key points of the conference in no more than 50 words.\n- Extract all time entries that match the 24-hour format \"HH:MM\" from the text and list them under a \"times\" key as an array of strings.\n- Identify every spaceship name mentioned in the report and include them in a \"spaceships\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer value under a \"character_count\" key.\n- Extract any website URLs appearing in the text and list them under a \"urls\" key as an array of strings.\n- Identify all monetary amounts (e.g., \"$1500\") mentioned in the text and include them in an \"amounts\" key as an array of strings.",
        "raw_output_metric": [
            "event_summary",
            "times",
            "spaceships",
            "character_count",
            "urls",
            "amounts"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000543",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract comprehensive public transport schedule details from the provided text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that provides a concise overview of the public transport information in no more than 50 words.\n- Identify all time entries mentioned in the text, format them in 24-hour style (e.g., \"14:30\") and list them under a \"times\" key as an array of strings.\n- Extract every bus route number mentioned and include them in a \"bus_routes\" key as an array of integers.\n- Detect any mentions of transportation modes such as \"bus\", \"tram\", or \"ferry\" and list them, without duplicates, under a \"modes\" key as an array of strings.\n- Extract all location addresses specified in the text and include them under an \"addresses\" key as an array of strings.\n- Count the total number of characters in the input text and include this count as an integer under a \"char_count\" key.\n- If the text contains any percentage figures related to service efficiency or delays, list them under a \"service_percentages\" key as an array of strings, preserving the original format (e.g., \"75%\").",
        "raw_output_metric": [
            "summary",
            "times",
            "bus_routes",
            "modes",
            "addresses",
            "char_count",
            "service_percentages"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000544",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nParse an input narrative about a neighborhood fair and extract specific details into a structured JSON object.\n\nFeature Requirements:\n- Include an \"event_description\" key with a concise string summary of the narrative that does not exceed 60 words.\n- Extract all email addresses mentioned in the input text and list them under an \"emails\" key as an array of strings.\n- Identify all physical locations mentioned in the narrative and include them under a \"locations\" key as an array of strings.\n- Extract monetary values (formatted as currency amounts, e.g., \"$25.00\") and include them under a \"monetary_values\" key as an array of strings.\n- Count the total number of sentences in the input text and include this information as an integer value under a \"sentence_count\" key.\n- If any URLs are mentioned in the text, extract them and list them under a \"urls\" key as an array of strings.\n- Identify all organizations named in the text and include them under an \"organizations\" key as an array of strings.\n- If any phone numbers are present in the text (formatted as (XXX) XXX-XXXX), extract them and include them under a \"phone_numbers\" key as an array of strings.",
        "raw_output_metric": [
            "event_description",
            "emails",
            "locations",
            "monetary_values",
            "sentence_count",
            "urls",
            "organizations",
            "phone_numbers"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000545",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nConvert the input horticulture guide text into a structured JSON object containing detailed botanical insights.\n\nFeature Requirements:\n- Include an \"overview\" key with a string value summarizing the main content of the input text in no more than 60 words.\n- Extract all dates formatted as \"YYYY/MM/DD\" from the text and list them under a \"dates\" key as an array of strings.\n- Identify and extract all scientific botanical terms (words starting with an uppercase letter and following standard botanical naming conventions) into a \"botanical_terms\" key as an array of strings.\n- Count the total number of words in the input text and include this count as an integer under a \"word_count\" key.\n- Extract any temperature readings mentioned in the text (values followed by \"°C\" or \"°F\") and list them under a \"temperature_readings\" key as an array of strings.\n- Identify all unique seasons mentioned (e.g., \"Spring\", \"Summer\", \"Fall\", \"Winter\") and include them in a \"seasons\" key as an array of strings.\n- If any percentages are referenced in the text (e.g., \"30%\"), list them under a \"percentages\" key as an array of strings, preserving the original format.",
        "raw_output_metric": [
            "overview",
            "dates",
            "botanical_terms",
            "word_count",
            "temperature_readings",
            "seasons",
            "percentages"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000546",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform a promotional event announcement into a structured JSON object that captures essential details about the event.\n\nFeature Requirements:\n- Include an \"event_title\" key with a string value representing the title of the event.\n- Extract and include a \"venue\" key as an object with distinct \"name\", \"address\", and \"city\" keys, each containing string values.\n- Identify and include a \"date_time\" key as an object with \"start\" and \"end\" keys, each formatted as \"YYYY-MM-DD HH:MM\".\n- Create an \"agenda\" key containing an array of objects, each with \"session_name\" and \"speaker\" keys, where the values are strings.\n- Extract all unique speaker names mentioned and list them under a \"speaker_list\" key as an array of strings.\n- Summarize the event announcement in a \"description\" key with a string value not exceeding 60 words.\n- If present, extract a numeric attendee limit from the announcement and include it under an \"attendee_limit\" key as an integer.",
        "raw_output_metric": [
            "event_title",
            "venue[name]",
            "venue[address]",
            "venue[city]",
            "date_time[start]",
            "date_time[end]",
            "agenda[][session_name]",
            "agenda[][speaker]",
            "speaker_list[]",
            "description",
            "attendee_limit"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000547",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract structured details from an incoming support email text for issue tracking and resolution analysis.\n\nFeature Requirements:\n- Provide an \"issue_summary\" key with a brief summary (no more than 40 words) capturing the main problem described in the email.\n- Extract all email addresses mentioned in the text and list them under an \"email_addresses\" key as an array of strings.\n- Identify and list all priority levels specified (e.g., \"high\", \"medium\", \"low\") under a \"priorities\" key as an array of strings.\n- Extract any ticket numbers formatted as \"TICK-1234\" and include them under a \"ticket_numbers\" key as an array of strings.\n- Count the total number of sentences in the email text and include this count as an integer value under a \"sentence_count\" key.\n- Identify if a due date is mentioned; if found, provide it under a \"due_date\" key in \"YYYY-MM-DD\" format, otherwise set its value to null.\n- Include a \"keywords\" key listing all unique technical terms present (if any) as an array of strings.",
        "raw_output_metric": [
            "issue_summary",
            "email_addresses",
            "priorities",
            "ticket_numbers",
            "sentence_count",
            "due_date",
            "keywords"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000548",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nExtract and structure specific details from a travel blog entry describing a vacation experience.\n\nFeature Requirements:\n- Include a \"summary\" key with a string summarizing the main experience of the blog in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any temperature readings (e.g., \"25°C\") mentioned in the text and include them under a \"temperatures\" key as an array of strings.\n- Extract and list all monetary values (e.g., \"$50\", \"100 USD\") found in the text under a \"costs\" key as an array of strings.\n- Count the total number of sentences in the input text and include this count as an integer under a \"sentence_count\" key.\n- Identify and list all country names mentioned in the input text under a \"countries\" key as an array of strings.\n- Compute and include the total number of words in the input text as an integer under a \"word_count\" key.",
        "raw_output_metric": [
            "summary",
            "cities",
            "temperatures",
            "costs",
            "sentence_count",
            "countries",
            "word_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "task_id": "000549",
        "input_type": "Text",
        "output_type": "JSON",
        "rendering": false,
        "query": "Please output JSON:\n\nTask:\nTransform the given text into a structured JSON object that extracts and organizes detailed geographical and statistical data.\n\nFeature Requirements:\n- Include a \"brief\" key with a string value summarizing the core theme of the text in no more than 50 words.\n- Identify and list all city names mentioned in the text under a \"cities\" key as an array of strings.\n- Extract any numerical coordinates present in the text and map them under a \"coordinates\" key as an array of objects, each containing \"latitude\" and \"longitude\" keys with decimal number values.\n- Locate all percentage figures in the text and include them in a \"percentages\" key as an array of strings, preserving their original format.\n- Determine the total number of sentences in the text and include this count as an integer under a \"sentence_count\" key.\n- Detect any country names mentioned in the text and list them under a \"countries\" key as an array of strings.\n- Identify any data references or statistical figures, and list them as objects in a \"statistics\" array, each with \"label\" (string) and \"value\" (number) keys.",
        "raw_output_metric": [
            "brief",
            "cities",
            "coordinates",
            "coordinates[i][latitude]",
            "coordinates[i][longitude]",
            "percentages",
            "sentence_count",
            "countries",
            "statistics",
            "statistics[i][label]",
            "statistics[i][value]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX00",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the plain text representation of a differential geometry formula into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The expression must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use \\nabla to denote the gradient operator and \\Delta to indicate the Laplacian.\n- Represent all fractions using the \\frac{}{} command, ensuring that both numerator and denominator are provided.\n- Enclose function arguments within parentheses to accurately preserve the order of operations.\n- Format all mathematical variables in italics following standard LaTeX conventions.\n- Use the caret symbol (^) combined with curly braces to format all exponents.\n- Include clearly defined spacing commands (such as \\,, \\; or \\quad) between operators, variables, and other symbols.\n- Any summation must be represented with the \\sum command along with appropriate lower and upper limits.\n- Represent integral expressions using the \\int command with clearly specified limits if applicable.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\nabla",
            "\\Delta",
            "\\frac{",
            "(",
            ")",
            "^{",
            "\\,",
            "\\;",
            "\\quad",
            "\\sum",
            "\\int"
        ],
        "VQA": {
            "Does the rendered expression start and end with a distinct environment?": "Yes, it is wrapped in a specific environment.",
            "Is the gradient operator clearly visible in the rendered output?": "Yes, the output displays the gradient operator symbol.",
            "Does the expression show the Laplacian operator as the appropriate symbol?": "Yes, the Laplacian operator is shown correctly.",
            "Are fractions displayed with both a numerator and a denominator separated by a horizontal bar?": "Yes, fractions are formatted to show both parts distinctly.",
            "Are function arguments enclosed within visible parentheses to indicate order of operations?": "Yes, each function argument is enclosed in parentheses.",
            "Do the mathematical variables appear in italic style in the rendered output?": "Yes, all the variables are italicized.",
            "Is there clearly defined spacing between operators and variables in the displayed expression?": "Yes, proper spacing is visibly applied between elements.",
            "Are summation signs and integral symbols displayed with clearly specified limits when applicable?": "Yes, summation and integral expressions include the proper limits."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX01",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a second-order linear differential equation into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation}.\n- Use the \\frac{}{} command to express both the first and second derivatives.\n- Format the second-order derivative specifically as \\frac{d^2y}{dx^2} and the first-order derivative as \\frac{dy}{dx}.\n- Include parentheses around summed or subtracted terms to preserve the correct order of operations.\n- Represent the constant coefficient multiplying the function using a \\cdot symbol between the coefficient and the variable.\n- Format any exponential terms with the base e using the caret (^) followed by curly braces.\n- Utilize the \\sqrt{} command to format any square root expressions if present.\n- Insert spacing commands (such as \\, or \\;) between different parts of the equation to enhance readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\frac{d^2y}{dx^2}",
            "\\frac{dy}{dx}",
            "(",
            ")",
            "\\cdot",
            "e^{",
            "\\sqrt{",
            "\\,",
            "\\;",
            "\\end{equation}"
        ],
        "VQA": {
            "Does the rendered equation appear within a clearly defined, centered block with a visible equation number?": "Yes",
            "Is the second-order derivative shown as a fraction with 'd^2y' in the numerator and 'dx^2' in the denominator?": "Yes",
            "Is the first-order derivative displayed as a fraction with 'dy' over 'dx'?": "Yes",
            "Are parentheses visibly placed around any groups of summed or subtracted terms?": "Yes",
            "Is a dot visibly used between a constant coefficient and the function to indicate multiplication?": "Yes",
            "Are any exponential expressions formatted with the base e raised to a power clearly shown using a caret and curly braces?": "Yes",
            "Is there a square root symbol present that indicates the use of a formatted square root expression?": "Yes",
            "Are spacing elements visibly inserted between different parts of the equation to improve readability?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX02",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a polynomial factorization problem into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The final output must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Represent multiplication using the \\times symbol between numbers and variables where appropriate.\n- Display all exponents using the caret (^) followed by curly braces to enclose the exponent value.\n- Group factors using parentheses to clarify the order of operations and maintain correct mathematical structure.\n- Use the \\frac{}{} command to represent any coefficients given as fractions, ensuring both numerator and denominator are specified.\n- Italicize all algebraic variables using standard mathematical formatting in LaTeX.\n- Include proper spacing commands (e.g., \\,, \\; or \\;) to separate terms and symbols for enhanced readability.\n- Clearly indicate the factoring process by aligning any multi-step equations if necessary.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\times",
            "\\frac",
            "^{",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Is the final output visibly enclosed within the equation environment tags?": "Yes, it is enclosed between \\begin{equation} and \\end{equation}.",
            "Is the multiplication between numbers and variables rendered using the × symbol?": "Yes, the × symbol is used for multiplication.",
            "Are all exponents displayed with a caret (^) followed by curly braces for the exponent value?": "Yes, every exponent is formatted as ^{...}.",
            "Are the factors properly grouped using parentheses to indicate the order of operations?": "Yes, parentheses are used to group factors clearly.",
            "If a coefficient is given as a fraction, is it represented using the fraction command with both numerator and denominator specified?": "Yes, coefficients are shown with \\frac{}{}.",
            "Are all algebraic variables italicized as per standard mathematical formatting?": "Yes, all variables appear in italics.",
            "Is proper spacing (such as \\, or \\;) used to separate terms and symbols for readability?": "Yes, proper spacing commands are included.",
            "Is the factoring process indicated clearly, for example through aligned multi-step equations if needed?": "Yes, multi-step factoring is clearly aligned."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX03",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a definite integral involving trigonometric functions into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation} tags.\n- Represent the integral using the \\int command and include both lower and upper limits.\n- Format the trigonometric functions using \\sin and \\cos commands with proper LaTeX syntax.\n- Use the \\frac{}{} command to express any fractions, ensuring both numerator and denominator are correctly provided.\n- Place parentheses around function arguments where necessary to maintain the correct order of operations.\n- Italicize all variables according to standard LaTeX mathematical conventions.\n- Format exponents using the caret symbol (^) followed by curly braces to contain the exponent.\n- Insert appropriate spacing commands (such as \\,, \\; or \\;) between separate elements of the integral for clarity.\n- Use the \\cdot command for explicit multiplication when a coefficient precedes a variable, ensuring clarity in the expression.\n- Ensure that the limits of integration and other integral components are distinctly and clearly structured.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "_{",
            "}^{",
            "\\sin",
            "\\cos",
            "\\frac",
            "\\cdot",
            "^{",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered output show an equation enclosed in a distinct environment (with a visible equation number)?": "Yes",
            "Is the integral sign displayed with clearly visible lower and upper limits?": "Yes",
            "Are the trigonometric functions 'sin' and 'cos' rendered in their correct format?": "Yes",
            "Is the fraction presented with a clear horizontal division between its numerator and denominator?": "Yes",
            "Are the variables displayed in italic, following standard mathematical conventions?": "Yes",
            "Are exponents shown using a caret symbol with curly braces around the exponent?": "Yes",
            "Is multiplication between coefficients and variables explicitly indicated using a dot?": "Yes",
            "Are parentheses visibly placed around function arguments to ensure the correct order of operations?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX04",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of a logistic growth model into a properly formatted LaTeX mathematical equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Represent any fraction in the model using the \\frac{}{} command, ensuring both a numerator and a denominator are provided.\n- Italicize all variables using standard LaTeX math formatting.\n- Use the caret (^) with curly braces to denote exponents for any exponential terms.\n- Include the \\ln command to represent any natural logarithm expressions where required.\n- Use parentheses to properly group terms and preserve the intended order of operations.\n- Insert multiplication symbols (\\cdot or \\times) explicitly when multiplying numeric coefficients with variables or when clarity is needed.\n- Ensure any limits or subscripts, such as in a summation or index notation, are clearly displayed using the underscore (_) notation.\n- Apply appropriate spacing commands (e.g., \\,, \\; or \\;) between different elements of the equation for enhanced readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "\\cdot",
            "^{",
            "\\ln",
            "_",
            "e^{-"
        ],
        "VQA": {
            "Does the rendered equation start with an equation environment opening tag and end with a closing tag?": "Yes",
            "Are all fractions displayed using the \\frac{}{} command with both numerator and denominator provided?": "Yes",
            "Are all the variables in the equation shown in italic format?": "Yes",
            "Is the caret (^) with curly braces used to denote exponents for exponential terms?": "Yes",
            "Is the natural logarithm represented using the \\ln command?": "Yes",
            "Are explicit multiplication symbols (\\cdot or \\times) inserted when multiplying numeric coefficients with variables?": "Yes",
            "Are proper spacing commands (e.g., \\, \\; or \\,) applied between different elements for readability?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX05",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a polynomial function's derivative and its integral into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The entire expression must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Use the \\frac{}{} command to represent any fractions, ensuring each fraction has a clearly defined numerator and denominator.\n- Represent derivatives using the \\frac{d}{dx} notation to clearly indicate differentiation with respect to x.\n- Format integrals with the \\int command and include the differential operator (dx) immediately following the integrand.\n- Enclose polynomial terms within parentheses when necessary to preserve the correct order of operations.\n- Italicize all variable names using standard LaTeX mathematical formatting.\n- Use curly braces to properly enclose exponents when representing power expressions with the caret (^) symbol.\n- Insert a spacing command (such as \\, or \\;) between operators and operands to improve readability.\n- Ensure that addition and subtraction operators are clearly visible and spaced out within the expression.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac{d}{dx}",
            "\\int",
            "dx",
            "\\frac{",
            "^{",
            "\\,",
            "(",
            ")",
            "+",
            "-"
        ],
        "VQA": {
            "What environment is used to enclose the entire expression?": "The equation environment, using \\begin{equation} and \\end{equation}.",
            "How are fractions displayed in the expression?": "They are represented using the \\frac{}{} command with clearly defined numerators and denominators.",
            "Which notation is used to indicate the derivative with respect to italicized x?": "It uses \\frac{d}{dx}, with x italicized.",
            "How is the integral formatted in the expression?": "It is formatted with the \\int command, and the integrand is immediately followed by \\textit{dx}.",
            "What formatting ensures the correct order of operations for polynomial terms?": "Polynomial terms are enclosed in parentheses when necessary.",
            "How are exponents correctly formatted in the expression?": "Exponents are represented using the caret (^) with curly braces to enclose the exponent.",
            "How is spacing between operators and operands achieved?": "Spacing commands, such as \\, or \\;, are inserted between operators and operands for improved readability."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX06",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nGenerate a LaTeX formatted equation that expresses the probability mass function of a binomial distribution.\n\nFeature Requirements:\n- The equation must begin with \\[ and end with \\] to denote a display math environment.\n- Use \\binom{}{} to represent the binomial coefficient, ensuring the top number is the total number of trials and the bottom number is the number of successes.\n- Write the expression for the probability mass function using variables p for success probability and (1-p) for failure probability, with appropriate exponents for the number of successes and failures.\n- All variables must be italicized by default, using standard LaTeX mathematical formatting.\n- Represent exponents with the caret (^) followed by curly braces, for example, p^{k}.\n- Include a summation sign \\sum with specified lower and upper limits to denote the summing over all possible successful outcomes.\n- Use explicit multiplication symbols (\\cdot) wherever individual factors are multiplied, ensuring clarity in the multiplication of terms.\n- Insert spacing commands (such as \\, or \\;) between elements to enhance readability.\n- Align the fraction and combination commands clearly to emphasize the structure of the equation.",
        "raw_output_metric": [
            "\\[",
            "\\binom{n}{k}",
            "p^{k}",
            "(1-p)^{n-k}",
            "\\cdot",
            "\\sum_{k=0}^{n}",
            "\\,",
            "\\;",
            "\\]"
        ],
        "VQA": {
            "Does the equation start with \\[ and end with \\] to denote a display math environment?": "Yes",
            "Which command is used to represent the binomial coefficient in the equation?": "\\binom{}{}",
            "Are the variables (such as p and 1-p) in the equation italicized by default using LaTeX math formatting?": "Yes",
            "Is the exponent notation in the format p^{k} (using caret followed by curly braces) visible in the equation?": "Yes",
            "Does the equation include explicit multiplication symbols (\\cdot) between the factors?": "Yes",
            "Are spacing commands (like \\, or \\;) used to enhance the readability of the equation?": "Yes",
            "Is there a summation sign (\\sum) displayed with specified lower and upper limits for the summing of outcomes?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX07",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text optimization problem into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the objective using the \\max or \\min command, depending on the context, with the variable being optimized properly italicized.\n- Use \\sum with explicit lower and upper limits to depict the summation over the defined index variable.\n- Include inequality symbols (\\leq or \\geq) to show constraints, ensuring that each inequality is clearly separated by proper spacing commands like \\, or \\;.\n- Format any fractions using the \\frac{}{} command, making sure both the numerator and the denominator are enclosed in curly braces.\n- Utilize superscripts and subscripts by applying the caret (^) and underscore (_) operators, with curly braces to enclose multi-character exponents or indices.\n- Enclose terms that require grouping with \\left( and \\right) to maintain the correct order of operations.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\max",
            "\\min",
            "\\sum",
            "\\leq",
            "\\geq",
            "\\frac{",
            "^{",
            "_{",
            "\\left(",
            "\\right)"
        ],
        "VQA": {
            "What tags must the equation start and end with?": "It starts with \\begin{equation} and ends with \\end{equation}.",
            "How is the objective function represented?": "It uses \\max or \\min with the optimized variable in italics.",
            "How are summations depicted in the equation?": "Using \\sum with explicit lower and upper limits for the index variable.",
            "What notation is used for displaying fractions?": "Fractions are formatted with \\frac{}{} where numerator and denominator are enclosed in curly braces.",
            "How are exponents and indices formatted?": "They are formatted using the caret (^) and underscore (_) operators with curly braces.",
            "How are inequality constraints shown?": "Using inequality symbols \\leq or \\geq combined with spacing commands like \\, or \\;.",
            "How are groupings for order of operations handled?": "Grouped terms are enclosed with \\left( and \\right)."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX08",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of an exponential decay process into a properly formatted LaTeX equation modeling population decline.\n\nFeature Requirements:\n- Enclose the entire equation within the \\begin{equation} and \\end{equation} environment.\n- Represent the exponential decay function using the \\exp command with its argument enclosed in parentheses.\n- Format the decay constant and time variable as italicized symbols using standard LaTeX math formatting.\n- Use the caret symbol (^) with curly braces to correctly format any exponents in the equation.\n- Include a fraction formatted with the \\frac{}{} command to represent any ratios, ensuring both numerator and denominator are provided.\n- Implement the \\cdot command to clearly denote multiplication between coefficients and variables.\n- Apply appropriate spacing commands (such as \\, or \\;) between elements to improve the readability of the equation.\n- Group terms within parentheses where necessary to maintain the proper order of operations.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\exp",
            "^{",
            "\\frac",
            "\\cdot",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Is the final equation shown inside a clearly defined equation box (indicating an equation environment)?": "Yes",
            "Does the rendered equation display the exponential decay function using an exp notation?": "Yes",
            "Are the decay constant and time variable visibly styled in italics?": "Yes",
            "Is the exponent presented with a caret followed by curly braces to denote the power?": "Yes",
            "Does the equation include a fraction that visibly shows both a numerator and a denominator?": "Yes",
            "Can a centered multiplication dot be seen, clearly indicating multiplication between components?": "Yes",
            "Is there evidence of spacing adjustments between components to enhance readability?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX09",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a geometric progression summing the first n terms into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with an \\end{equation} tag.\n- Include the summation symbol \\sum with explicit lower and upper bounds (e.g., i=1 to n) to denote the series.\n- Use the \\frac{}{} command to represent any fraction, ensuring both numerator and denominator are clearly defined.\n- Variables and parameters must be italicized using standard LaTeX math formatting.\n- Represent the common ratio and term calculations using the caret (^) notation with curly braces enclosing any exponent.\n- Incorporate a square root operation formatted with the \\sqrt{} command where necessary.\n- Include spacing commands such as \\, or \\; between different components of the equation to enhance readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sum_{i=1}^{n}",
            "\\frac",
            "\\sqrt",
            "\\,",
            "r^{i-1}"
        ],
        "VQA": {
            "Is the equation displayed in a centered, numbered format (i.e., within a display environment)?": "Yes",
            "Does the equation include a summation symbol with lower bound i=1 and upper bound n?": "Yes",
            "Is there a fraction clearly rendered with a numerator over a denominator using a distinct fraction bar?": "Yes",
            "Are all variables and parameters shown in italic style?": "Yes",
            "Is the exponent notation implemented using caret (^) with the exponent enclosed in curly braces?": "Yes",
            "Does the equation display a square root symbol formatted with a square root operation?": "Yes",
            "Are spacing commands (such as small spaces) visibly placed between different components to improve clarity?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX10",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the given plain text physics formula into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} command and end with an \\end{equation} command.\n- Use the \\vec{} command to indicate vector quantities, ensuring each vector variable is enclosed within the command.\n- Format any fractions appearing in the expression using the \\frac{}{} command, with clearly defined numerators and denominators.\n- Represent any square root operations using the \\sqrt{} command, placing the radicand inside curly braces.\n- Denote acceleration due to gravity with a subscript g, formatted as g with an underscore and curly braces (g_{ }).\n- Include integration symbols using the \\int command with proper limit notation if limits are specified.\n- Apply the caret (^) notation for any exponent, enclosing the exponent in curly braces.\n- Separate multiplication operations with the \\cdot command when they are between a number and a non-adjacent variable, and ensure correct spacing using commands such as \\, or \\; where needed.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\vec{",
            "\\frac{",
            "\\sqrt{",
            "g_{",
            "\\int",
            "^{",
            "\\cdot"
        ],
        "VQA": {
            "Is the equation displayed in a centered math block (display mode)?": "Yes",
            "Do vector variables in the equation show an arrow symbol above them?": "Yes",
            "Are fractions rendered with the numerator directly above the denominator?": "Yes",
            "Is there a visible square root symbol with its radicand clearly enclosed?": "Yes",
            "Is acceleration due to gravity indicated with a subscript 'g'?": "Yes",
            "Does the equation include an integral symbol with proper limit notation when applicable?": "Yes",
            "Are exponents displayed as superscripts in the rendered output?": "Yes",
            "Is multiplication between numbers and variables shown using a centered dot with appropriate spacing?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX11",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a combinatorial summation that includes factorial and binomial coefficients into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and conclude with \\end{equation}.\n- Enclose the entire summation expression within a \\sum command, specifying distinct lower and upper limits.\n- Use the \\binom{}{} command to represent any binomial coefficients in the expression.\n- Represent factorial terms by appending an exclamation mark directly after the numeral (e.g., n!).\n- Format any fractional components with the \\frac{}{} command, ensuring each fraction has both a numerator and a denominator.\n- Italicize all variables using standard LaTeX mathematical formatting.\n- Use the caret symbol (^) with curly braces for any exponentiation present in the expression.\n- Include explicit multiplication symbols (e.g., \\cdot) between numeric coefficients and variables to avoid ambiguity.\n- Insert appropriate spacing commands (such as \\, or \\;) between elements for improved readability.\n- Enclose any complex expressions within parentheses to clearly indicate the order of operations.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sum",
            "_{",
            "^{",
            "\\binom",
            "\\frac",
            "!",
            "\\cdot",
            "\\,",
            "\\;",
            "(",
            ")"
        ],
        "VQA": {
            "Does the equation start and end with the appropriate environment commands?": "Yes, it begins with \\begin{equation} and ends with \\end{equation}.",
            "Is the summation symbol shown with both distinct lower and upper limits?": "Yes, the summation is enclosed within a \\sum command with clearly specified lower and upper limits.",
            "Are binomial coefficients displayed using the \\binom{}{} command?": "Yes, any binomial coefficients are represented with the \\binom{}{} command.",
            "Are factorial expressions formatted with an exclamation mark immediately after the numeral?": "Yes, factorial terms appear with a ! directly after the number (e.g., n!).",
            "Are fractions formatted with the \\frac{}{} command, including both numerator and denominator?": "Yes, all fractional components use the \\frac{}{} command with explicit numerators and denominators.",
            "Are all variables rendered in italic style as per standard LaTeX math formatting?": "Yes, every variable is italicized.",
            "Are multiplication symbols and additional spacing commands (like \\cdot, \\, or \\;) clearly visible between numeric coefficients and variables?": "Yes, multiplication symbols and appropriate spacing commands are included for clarity."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX12",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text geometric formula into a properly formatted LaTeX diagram representing the area of a circle using standard mathematical notation.\n\nFeature Requirements:\n- The result must start with \\begin{equation} and end with \\end{equation} tags.\n- Represent the area of a circle using the formula A = πr^2, ensuring the π symbol is formatted using \\pi.\n- Use the ^ command with curly braces to denote the square of the radius.\n- The radius variable must be italicized using standard LaTeX math formatting.\n- Include a descriptive comment at the end of the equation using a LaTeX comment line (%) to specify that the equation computes the circle's area.\n- Ensure there is proper spacing using commands like \\, between the π symbol and the variable.\n- All symbols and constants, such as r and A, must be formatted using math mode indicators.",
        "raw_output_metric": [
            "\\begin{equation}",
            "A = \\pi \\, r^{2}",
            "% computes the circle's area",
            "\\end{equation}"
        ],
        "VQA": {
            "Does the rendered equation start and end with math environment tags?": "Yes, it starts with \\begin{equation} and ends with \\end{equation}.",
            "What formula for the area of a circle is displayed?": "A = \\pi\\,{r}^{2}",
            "How is the π symbol formatted in the equation?": "It is formatted using \\pi.",
            "How is the exponentiation of the radius indicated?": "It uses the ^ command with curly braces.",
            "Is there additional spacing between the π symbol and the radius variable?": "Yes, a spacing command (\\,) is used.",
            "How is the radius variable formatted?": "It is italicized, following standard LaTeX math mode formatting.",
            "Does the equation include a comment describing its purpose?": "Yes, a LaTeX comment at the end specifies that the equation computes the circle's area."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX13",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a projectile motion formula into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Any fractions within the formula should be represented using the \\frac{}{} command with both numerator and denominator explicitly provided.\n- Enclose any square root expressions using the \\sqrt{} command.\n- All variable symbols (for example, v₀, g, t, and θ) must be italicized using standard LaTeX math formatting.\n- Use parentheses around composite expressions to clearly establish the correct order of operations.\n- Denote multiplication between numbers and variables with either \\cdot or \\times, but omit the symbol between adjacent variables.\n- Include the \\int command with specified lower and upper limits if any integration is present in the description.\n- Insert proper spacing commands (such as \\,, \\; or \\;) between different elements of the equation to improve readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "\\sqrt",
            "\\int",
            "\\cdot",
            "\\times",
            "v_{0}",
            "g",
            "t",
            "\\theta",
            "\\,",
            "\\;"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX14",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert a given plain text algebraic expression featuring radicals, summations, and fractions into an accurate LaTeX formatted mathematical equation.\n\nFeature Requirements:\n- The final output must start with \\begin{equation} and conclude with \\end{equation}.\n- Every instance of a fraction must be written using the \\frac{}{} command with clearly defined numerator and denominator.\n- Any radical expressions present must be formatted using the \\sqrt{} command.\n- A summation must be represented with the \\sum notation, and if limits are specified in the input, they must be included with subscript and superscript.\n- Exponents have to be formatted using the caret (^) followed by curly braces {} enclosing the exponent, even for multi-digit or composite exponents.\n- Multiplication between coefficients and variables must use \\times when indicated in the text, ensuring no multiplication symbol appears between standalone adjacent variables.\n- Parentheses should be explicitly provided around any terms that could be misinterpreted without them, in order to preserve the intended order of operations.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "\\sqrt",
            "\\sum",
            "\\times",
            "^{"
        ],
        "VQA": {
            "Does the rendered equation start with \\begin{equation}?": "Yes",
            "Does the rendered equation end with \\end{equation}?": "Yes",
            "Are all fractions visibly formatted using the \\frac{}{} command with both numerator and denominator clearly defined?": "Yes",
            "Are radical expressions displayed using the \\sqrt{} command?": "Yes",
            "Is a summation symbol shown as \\sum with limits included as subscripts and superscripts when specified?": "Yes",
            "Are exponents formatted with a caret (^) and curly braces ({}), even for multi-digit exponents?": "Yes",
            "Is multiplication between coefficients and variables indicated by a \\times symbol when specified?": "Yes",
            "Are parentheses correctly placed around terms to preserve the intended order of operations?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX15",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of an integral equation into a fully formatted LaTeX expression.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\int command for the integral, specifying both the lower and upper limits explicitly.\n- Apply the \\frac{}{} command to represent any fractions, ensuring that each has both a numerator and a denominator.\n- Format the derivative notation using d/dx properly, including any necessary spacing.\n- Italicize all variable names using standard LaTeX math formatting, while functions should be formatted with \\mathrm{}.\n- Include parentheses where needed to clearly delineate function arguments or group expressions.\n- If a summation is present, represent it using the \\sum command with explicit limits.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "\\frac",
            "\\frac{d}{dx}",
            "\\mathrm",
            "\\sum"
        ],
        "VQA": {
            "Is the equation displayed in its own centered block with clear delimiters separating it from the surrounding text?": "Yes, it appears as a distinct centered block.",
            "Does the integral symbol show both a lower and an upper limit visibly?": "Yes, both limits are clearly displayed next to the integral symbol.",
            "Are fractions rendered with a clearly separated numerator and denominator, indicated by a distinct horizontal division?": "Yes, every fraction displays a defined numerator and denominator.",
            "How is the derivative notation presented in the equation?": "It is shown as d/dx with proper spacing between the 'd' and 'x'.",
            "Are all variable names displayed in italic type?": "Yes, all variable names are italicized.",
            "Is the formatting of functions distinguishable by using a roman (upright) style instead of italics?": "Yes, functions are formatted in roman style.",
            "Are parentheses included where necessary to clarify function arguments or grouped expressions?": "Yes, parentheses are used appropriately for clarity.",
            "If a summation is present, does it visibly include explicit lower and upper limit information with a summation symbol?": "Yes, the summation symbol shows both limits explicitly."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX16",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a piecewise function defining a mathematical scenario into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\begin{cases} and \\end{cases} environment to implement the piecewise format.\n- Clearly indicate the condition for each case using proper inequality symbols (e.g., <, \\leq, >, \\geq).\n- Format each case so that the mathematical expression appears to the left and the condition to the right, separated by a comma.\n- Encapsulate any textual explanation within math mode using the \\text{} command where necessary.\n- Ensure every variable is represented in italics and constants are shown in their standard mathematical form.\n- Include spacing commands (e.g., \\, or \\;) between operators and operands to enhance readability.\n- Use absolute value notation with \\lvert and \\rvert if any case involves modulus expressions.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\begin{cases}",
            "\\end{cases}",
            "<",
            "\\leq",
            ">",
            "\\geq",
            "\\text{",
            "\\lvert",
            "\\rvert",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Is the equation wrapped within a dedicated equation environment?": "Yes",
            "Does the rendered output display a piecewise function using a cases structure?": "Yes",
            "Are the inequality symbols (e.g., '<', '\\leq', '>', '\\geq') clearly visible in the conditions?": "Yes",
            "Is there a visible comma separating the mathematical expression from its condition in each case?": "Yes",
            "Are any textual explanations enclosed within a text mode command?": "Yes",
            "Do the variables appear in italics while constants are in standard mathematical styling?": "Yes",
            "Is there clear spacing between operators and operands as indicated by visible spacing commands?": "Yes",
            "If any modulus expressions are present, are they shown with absolute value notation using specific delimiters?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX17",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the given plain text description of a matrix multiplication operation into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Use the \\begin{bmatrix} and \\end{bmatrix} environments to represent each matrix.\n- Represent the multiplication operation with a centered \\times symbol.\n- Format each matrix entry using subscript notation (e.g., a_{ij}) where appropriate.\n- Italicize all single-letter variable names within the matrices.\n- Include \\, spacing commands between different elements to ensure clear separation.\n- Use proper alignment commands if necessary to display the product of matrices in a single equation.\n- Ensure that when matrices require the use of parentheses for clarity, \\left( and \\right) are used.\n- Maintain consistency in the size and style of brackets across the entire equation.\n- Clearly denote any scalar multiplication by placing the scalar adjacent to the matrix with no additional multiplication symbol.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\begin{bmatrix}",
            "\\end{bmatrix}",
            "\\times",
            "a_{ij}",
            "\\,",
            "\\left(",
            "\\right)"
        ],
        "VQA": {
            "What type of brackets are used to enclose each matrix?": "Square brackets",
            "What symbol is used to indicate multiplication between matrices?": "A centered × symbol",
            "How are individual matrix entries labeled?": "Using subscript notation (e.g., a₍ᵢⱼ₎) with italicized letters",
            "Are single-letter variable names in the matrices italicized?": "Yes",
            "How is scalar multiplication denoted in the equation?": "By placing the scalar adjacent to the matrix with no extra multiplication symbol",
            "Is extra spacing provided between different parts of the equation?": "Yes, with explicit spacing commands",
            "Are parentheses used for clarity when required in the equation?": "Yes, with matching left and right parentheses",
            "In the rendered equation, how many main matrices are displayed?": "Two"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX18",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a probability density function for a normal distribution into a fully formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to clearly display the fraction that represents the normalization constant.\n- Represent the exponential term using the caret (^) symbol, enclosing its power in curly braces.\n- Format the square root portion with the \\sqrt{} command to indicate the standard deviation factor.\n- Ensure that the constant π is formatted as \\pi and is not italicized.\n- Italicize all variables, such as x and σ, using standard LaTeX mathematical formatting.\n- Insert appropriate spacing commands (e.g., \\, or \\;) between different elements of the equation for clarity.\n- Make sure any subscripts, such as those in μ and σ, use the underscore notation with curly braces.\n- Use parentheses around the expression inside the exponent to maintain the correct order of operations.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "\\sqrt",
            "e^{",
            "\\pi",
            "\\,",
            "\\;",
            "_{"
        ],
        "VQA": {
            "Does the rendered output clearly show an equation environment with a distinct beginning and ending?": "Yes",
            "Is the normalization constant displayed as a fraction with a numerator and denominator?": "Yes",
            "Is the exponential term rendered with its power enclosed in curly braces following a caret?": "Yes",
            "Is there a formatted square root symbol that indicates the standard deviation factor?": "Yes",
            "Is the constant π correctly formatted as \\pi and not italicized?": "Yes",
            "Are all variables such as x and \\sigma displayed in italic style?": "Yes",
            "Is appropriate spacing visible between elements in the equation?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX19",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the following plain text description of a calculus expression into a correctly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and conclude with \\end{equation}.\n- Include a definite integral sign with specified lower and upper bounds using the appropriate LaTeX syntax.\n- Use the \\, command to insert a small space between the integral sign and the integrand.\n- Implement \\left( and \\right) for properly paired and scaled parentheses around the integrand.\n- Present any exponential function using the format e^{\\text{...}} where the exponent is enclosed in curly braces.\n- Utilize the \\frac{}{} command to display any fractional parts of the integrand, ensuring both numerator and denominator are provided.\n- Italicize variable names and use \\mathrm{} for standard mathematical functions if needed.\n- Ensure differential elements (such as dx) are written with a small space before them using the \\, command.\n- If any logarithmic functions appear, format them using \\ln with the argument enclosed in parentheses.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "_{",
            "}^{",
            "\\,",
            "\\left(",
            "\\right)",
            "e^{\\text{",
            "\\frac{",
            "}{",
            "\\mathrm{",
            "\\, dx",
            "\\ln("
        ],
        "VQA": {
            "Does the rendered equation start with a visible begin tag for the equation environment?": "Yes",
            "Does the equation end with an end tag for the equation environment?": "Yes",
            "Is there a definite integral shown with both lower and upper bounds?": "Yes",
            "Is a small space visibly inserted between the integral symbol and the integrand?": "Yes",
            "Are the parentheses around the integrand scaled using paired left and right commands?": "Yes",
            "Are exponential functions formatted with the text mode inside the exponent (e.g., e^{text...})?": "Yes",
            "Is any fractional part of the integrand displayed using a fraction layout with both numerator and denominator?": "Yes",
            "Are variable names italicized and differential elements preceded by a small space?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX20",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a statistical concept into a LaTeX formatted representation of a probability density function for the normal distribution.\n\nFeature Requirements:\n- The generated expression must begin with \\begin{equation} and end with \\end{equation}.\n- Use the \\frac{}{} command to clearly format the coefficient preceding the exponential term.\n- Format the exponential part using the \\exp command, ensuring that its exponent is enclosed in curly braces.\n- Represent the constants π and the square root using the \\pi and \\sqrt{} commands, respectively.\n- All variables, such as x, μ, and σ, must be italicized using standard LaTeX math mode.\n- Employ parentheses where necessary to clarify the order of operations, especially around the squared term.\n- Insert appropriate spacing commands (e.g., \\,, \\; or \\;) between different elements of the equation.\n- Ensure that the denominator is clearly expressed as a product involving 2 and σ.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "\\exp",
            "\\pi",
            "\\sqrt",
            "x",
            "\\mu",
            "\\sigma",
            "(x-\\mu)^2",
            "2\\sigma",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered output begin with the equation environment declaration and end with its closing tag?": "Yes",
            "Is the coefficient before the exponential term formatted as a fraction using the fraction command with proper braces?": "Yes",
            "Is the exponential function represented using the exp command with its exponent enclosed in curly braces?": "Yes",
            "Are constants like π and the square root symbol rendered with the proper LaTeX commands (\\pi and \\sqrt{} respectively)?": "Yes",
            "Are the variables, such as x, μ, and σ, displayed in italicized math mode?": "Yes",
            "Are parentheses used around the squared term in the exponent to clarify the order of operations?": "Yes",
            "Is there evidence of spacing commands (e.g., \\, or \\;) inserted between different elements of the equation?": "Yes",
            "Is the denominator visibly expressed as a product involving the number 2 and the variable σ?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX21",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text combinatorial expression into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must start with \\begin{equation} and end with \\end{equation} tags.\n- Use the \\binom{}{} command to display combinations, ensuring both the upper and lower parameters are provided.\n- Represent any nested expressions within parentheses using \\left( and \\right) for automatic sizing.\n- All variables must be italicized, and multiplication between numbers and variables should explicitly include the \\cdot symbol.\n- Include exponentiation formatted by a caret (^) and curly braces to encapsulate multi-character exponents.\n- Use the \\sqrt{} command to properly format any square root operations.\n- Incorporate proper spacing commands (such as \\, or \\;) between operators and terms to enhance readability.\n- Ensure that any factorial expressions use the exclamation mark (!) immediately after the variable or number with no extra spacing.\n- Represent any summation with the \\sum command and include clear lower and upper limits within the subscript and superscript.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\binom",
            "\\left(",
            "\\right)",
            "\\cdot",
            "^",
            "{",
            "}",
            "\\sqrt",
            "\\,",
            "\\;",
            "!",
            "\\sum"
        ],
        "VQA": {
            "Which LaTeX environment tags enclose the equation?": "\\begin{equation} and \\end{equation}",
            "Which command is used to display combinations in the equation?": "\\binom{}{}",
            "How are nested expressions within parentheses formatted for automatic sizing?": "Using \\left( and \\right)",
            "How are variables styled in the displayed equation?": "They are italicized",
            "What symbol is used for explicit multiplication between numbers and variables?": "\\cdot",
            "How is exponentiation formatted in the equation?": "Using a caret (^) with curly braces for multi-character exponents",
            "What command is used to format square root operations?": "\\sqrt{}",
            "How are factorial expressions represented in the equation?": "The exclamation mark (!) is placed immediately after the variable or number with no extra spacing",
            "Which command is used to represent summation along with its limits?": "\\sum with clear lower and upper limits in the subscript and superscript"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX22",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the provided plain text description of a matrix transformation into a properly formatted LaTeX representation.\n\nFeature Requirements:\n- The output must be enclosed within a \\begin{align*} and \\end{align*} environment.\n- Represent matrices using the \\begin{pmatrix} and \\end{pmatrix} commands, ensuring that elements are separated by & and rows by \\\\.\n- Include an arrow symbol, such as \\mapsto, to denote the transformation from the original matrix to the resulting matrix.\n- Bold any vector variables using the \\mathbf command to distinguish them from scalar elements.\n- Use proper spacing commands (e.g., \\, or \\;) between transformation operators and elements to enhance readability.\n- If any elements are raised to a power, format them with the caret (^) followed by curly braces encapsulating the exponent.\n- Enclose any determinant representation within vertical bars using \\left| and \\right|.\n- Ensure that all LaTeX mathematical symbols and operators are correctly placed within math mode.",
        "raw_output_metric": [
            "\\begin{align*}",
            "\\end{align*}",
            "\\begin{pmatrix}",
            "\\end{pmatrix}",
            "&",
            "\\\\",
            "\\mapsto",
            "\\mathbf",
            "\\,",
            "\\;",
            "^",
            "\\left|",
            "\\right|"
        ],
        "VQA": {
            "Does the output start and end with an align* environment?": "Yes, it is enclosed within \\begin{align*} and \\end{align*}.",
            "Are matrices represented using the pmatrix environment with elements separated by & and rows by \\\\?": "Yes, matrices are formatted with \\begin{pmatrix} and \\end{pmatrix} with correct separations.",
            "Is an arrow symbol such as \\mapsto used to denote the transformation between matrices?": "Yes, an arrow like \\mapsto is visible between the original and resulting matrices.",
            "Are vector variables styled in bold using \\mathbf?": "Yes, vector variables are formatted in bold with \\mathbf.",
            "Is proper spacing (e.g., \\, or \\;) included between transformation operators and elements for enhanced readability?": "Yes, spacing commands such as \\, or \\; are used appropriately.",
            "Are elements raised to a power formatted with a caret (^) followed by curly braces enclosing the exponent?": "Yes, exponent formatting follows the ^{...} notation.",
            "Is any determinant representation enclosed by vertical bars using \\left| and \\right|?": "Yes, determinants are properly enclosed with \\left| and \\right|."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX23",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text physics kinematics equation into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The equation must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Use the \\frac{}{} command to display any ratio of two quantities, ensuring that both numerator and denominator are provided.\n- Represent any square root operation with the \\sqrt{} command and include nested radicals if present.\n- All variable names should be italicized using standard LaTeX math formatting, with subscripts applied using the underscore (_) character where indices are specified.\n- Format exponents using the caret (^) followed by curly braces, and include proper grouping with parentheses when necessary.\n- Use \\cdot between numerical factors and variables to indicate multiplication, and include a spacing command such as \\, between different parts of the expression for improved readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac{",
            "}{",
            "\\sqrt{",
            "\\cdot",
            "\\,",
            "_",
            "^{"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX24",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a trigonometric identity into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Use the \\sin, \\cos, and \\tan commands for representing trigonometric functions.\n- Format any fractions with the \\frac{}{} command, ensuring both numerator and denominator are clearly specified.\n- Represent squared terms using the caret symbol followed by curly brackets, e.g., x^{2}.\n- Use parentheses around expressions that contain multiple terms to preserve the correct order of operations.\n- Ensure that the constant pi is written as \\pi in the equation.\n- Include explicit plus (+) and minus (–) symbols exactly as described in the text.\n- Apply spacing commands (e.g., \\, or \\;) between terms and operators to enhance readability.\n- The output should reflect the identity exactly as described, with no additional text or explanation.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sin",
            "\\cos",
            "\\tan",
            "\\frac",
            "^{2}",
            "\\pi",
            "+",
            "–",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "What environment tags enclose the equation?": "The equation is enclosed within \\begin{equation} and \\end{equation}.",
            "How are trigonometric functions represented?": "They are represented using the \\sin, \\cos, and \\tan commands.",
            "How are fractions formatted?": "Fractions are formatted using the \\frac{}{} command with clearly specified numerator and denominator.",
            "How are squared terms displayed?": "Squared terms use the caret symbol followed by curly brackets, e.g., x^{2}.",
            "How is the constant pi denoted?": "It is written as \\pi.",
            "Are spacing commands applied between terms and operators?": "Yes, spacing commands like \\, or \\; are used to enhance readability."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX25",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text description of a combinatorial series involving binomial coefficients, exponents, and fractions into a properly formatted LaTeX mathematical equation.\n\nFeature Requirements:\n- The output must start with a \\begin{align} command and end with an \\end{align} command.\n- Represent all binomial coefficients using the \\binom{}{} command with clearly defined arguments.\n- Use the \\sum operator to denote the summation, including explicit lower and upper limits written with subscripts and superscripts.\n- Format every fraction with the \\frac{}{} command, ensuring both the numerator and denominator are clearly specified.\n- Enclose any exponents using the caret (^) followed by curly braces to group the exponent’s content.\n- Insert curly braces {} appropriately to guarantee proper grouping of terms and operations.\n- Use the \\cdot symbol to indicate multiplication whenever necessary between numbers and variables that are not written adjacently.\n- Incorporate spacing commands (e.g., \\, or \\;) between significant parts of the equation for enhanced readability.\n- Ensure that all variable names are italicized following standard LaTeX mathematical formatting.",
        "raw_output_metric": [
            "\\begin{align}",
            "\\end{align}",
            "\\binom",
            "\\sum",
            "\\frac",
            "^{",
            "\\cdot",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered equation use the 'align' environment for enclosing the expression?": "Yes",
            "Are the binomial coefficients presented using the \\binom{}{} format with clearly defined arguments?": "Yes",
            "Is a summation symbol (\\sum) shown with explicit lower and upper limits in subscript and superscript notation?": "Yes",
            "Are fractions formatted with the \\frac{}{} command displaying a clear numerator and denominator?": "Yes",
            "Are exponents enclosed within curly braces after the caret symbol (^{...}) for proper grouping?": "Yes",
            "Is the multiplication indicated with the \\cdot symbol between numbers and variables?": "Yes",
            "Are spacing commands (such as \\, or \\;) used between significant parts of the equation for enhanced readability?": "Yes",
            "Are all variable names italicized in accordance with standard LaTeX mathematical formatting?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX26",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the following plain text description of a definitive integral that includes polynomial, trigonometric, and square root components into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- Begin the expression with \\begin{equation} and end with \\end{equation} tags.\n- Use the \\int command with clearly defined lower and upper limits for the integral.\n- Represent any fractions within the integrand using the \\frac{}{} command, ensuring both the numerator and denominator are specified.\n- Format all variable names in italic while keeping standard mathematical function names (such as \\sin and \\sqrt) in Roman style.\n- Enclose the polynomial expressions and the square root argument within appropriate parentheses to reflect the correct order of operations.\n- Use curly braces for exponents following the caret (^) to maintain clarity in exponentiation.\n- Include a multiplication symbol (\\cdot or \\times) between numerical coefficients and variables where needed.\n- Apply proper spacing commands (e.g., \\, or \\;) to separate integral limits, operators, and key components for enhanced readability.\n- Clearly separate the trigonometric and algebraic parts of the integrand using conventional grouping symbols in LaTeX.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "_{",
            "}^{",
            "\\frac",
            "\\sin",
            "\\sqrt",
            "^{",
            "\\cdot",
            "\\times",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the integral expression start and end with the correct equation environment tags?": "Yes, it begins with \\begin{equation} and ends with \\end{equation}.",
            "Are the lower and upper limits of the integral clearly defined within the integral symbol?": "Yes, the limits are explicitly shown.",
            "Are all fractions in the integrand represented using the proper fraction formatting?": "Yes, they use the \\frac{}{} command.",
            "Are the variable names in the integrand formatted in italic style?": "Yes, all variables are in italic.",
            "Are standard mathematical functions such as sine (\\sin) and square root (\\sqrt) displayed in Roman style?": "Yes, they retain Roman style.",
            "Is a multiplication symbol (\\cdot or \\times) used between numerical coefficients and variables where required?": "Yes, a multiplication symbol is clearly included.",
            "Are parentheses used appropriately to group polynomial expressions and the square root argument?": "Yes, proper parentheses are applied for correct order of operations.",
            "Are spacing commands applied to enhance the readability between integral limits, operators, and key components?": "Yes, adequate spacing is provided throughout the expression."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX27",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTranslate a plain text description of a complex function involving logarithms and exponential expressions into a well-formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Use the \\log command to represent logarithmic functions, ensuring the argument is enclosed in curly braces, and include bases where specified.\n- Represent exponential expressions with the caret symbol (^) and wrap any non-single-digit exponents inside curly braces.\n- Format any fractions using the \\frac{}{} command with both a numerator and a denominator clearly provided.\n- Include proper use of parentheses to maintain the intended order of operations within the expression.\n- Use \\cdot for multiplication between numbers or variables when necessary, while omitting it for adjacent letters or numbers.\n- Insert an appropriate spacing command (e.g., \\, or \\;) between different parts of the equation to enhance readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\log",
            "^{",
            "\\frac",
            "\\cdot",
            "\\,"
        ],
        "VQA": {
            "Does the rendered output begin with an equation start tag?": "Yes",
            "Does the rendered output end with an equation end tag?": "Yes",
            "Is the logarithm function visibly represented with the log command and its argument in curly braces?": "Yes",
            "Are exponential expressions displayed using the caret symbol with non-single-digit exponents enclosed in curly braces?": "Yes",
            "Can you see fractions formatted with a numerator and denominator clearly delineated in the output?": "Yes",
            "Are parentheses used appropriately to indicate the intended order of operations?": "Yes",
            "Is the multiplication between numbers or variables denoted by a centered dot (·) where necessary?": "Yes",
            "Is there appropriate spacing visible between different parts of the equation for enhanced readability?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX28",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a circle's equation into a properly formatted LaTeX mathematical representation.\n\nFeature Requirements:\n- The output must start with \\begin{equation} and end with \\end{equation}.\n- Represent the circle's standard equation using the form (x - a)^2 + (y - b)^2 = r^2 with all variables italicized.\n- Enclose the center coordinates (a, b) in parentheses, ensuring both elements are separated by a comma.\n- Use the caret (^) with curly braces to clearly indicate exponents for both (x - a)^2 and (y - b)^2.\n- Include the = sign with proper spacing commands on both sides to improve readability.\n- If any fraction appears in the coefficients, format it using the \\frac{}{} command with explicit numerator and denominator.\n- Ensure that all mathematical operations (addition and subtraction) are clearly separated by spacing commands such as \\, or \\;.\n- Do not include any text outside of the LaTeX equation environment.",
        "raw_output_metric": [
            "\\begin{equation}",
            "(x \\, - \\, a)^{2}",
            "(y \\, - \\, b)^{2}",
            "\\, + \\,",
            "\\, = \\,",
            "r^{2}",
            "\\end{equation}"
        ],
        "VQA": {
            "Does the rendered output start and end with an equation environment?": "Yes, it begins with \\begin{equation} and ends with \\end{equation}.",
            "Are the variable names in the equation (x, a, y, b, r) italicized?": "Yes, they are all italicized.",
            "Is the circle's equation presented in the standard form (x - a)^2 + (y - b)^2 = r^2?": "Yes, it follows that standard form.",
            "Are the center coordinates shown enclosed in parentheses and separated by a comma?": "Yes, they appear as (a, b).",
            "Are exponents indicated with a caret followed by curly braces (e.g., ^{2})?": "Yes, the exponents are clearly shown using ^{2}.",
            "Is extra spacing around the equals sign provided for improved readability?": "Yes, spacing commands are used around the '=' sign.",
            "Is any fraction formatting visible using the \\frac{}{} command for coefficients?": "No, there are no fractions present in this equation."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX29",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of a geometric progression summation into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The expression must start with \\begin{equation} and end with \\end{equation}.\n- Use the \\sum command to represent the summation, specifying both the lower limit (e.g., n=0) and an upper limit (e.g., N).\n- All variables must appear in italicized math mode.\n- Represent each term's exponent using the caret (^) with its exponent enclosed in curly braces.\n- Use the \\frac{}{} command to denote any divisions, ensuring both numerator and denominator are enclosed in curly braces.\n- Insert appropriate spacing commands (e.g., \\, or \\;) between distinct parts of the equation for enhanced readability.\n- Include parentheses around complex expressions to clearly indicate the intended order of operations.\n- If a square root is mentioned in the plain text, format it using the \\sqrt{} command with the enclosed radicand in curly braces.\n- Use \\cdot or \\times for multiplication between numeric coefficients and variables, but avoid multiplication symbols between adjacent variables.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sum",
            "_{n=0}",
            "^{N}",
            "^{",
            "\\frac{",
            "\\cdot",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered equation start with \\begin{equation} and end with \\end{equation}?": "Yes",
            "Is the summation symbol (\\sum) displayed with a lower limit of n=0 and an upper limit of N?": "Yes",
            "Are all variables shown in italicized math mode?": "Yes",
            "Are exponents formatted with the caret (^) and enclosed in curly braces?": "Yes",
            "Is division represented using the \\frac{}{} command with both numerator and denominator enclosed in curly braces?": "Yes",
            "Are multiplication operations indicated with either \\cdot or \\times between numeric coefficients and variables?": "Yes",
            "Is there appropriate use of spacing commands (e.g., \\, or \\;) to enhance the readability of the equation?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX30",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text description of a second-order differential equation into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation} tags.\n- Represent the second derivative using the d^2/dx^2 notation, ensuring it is clearly formatted.\n- Display any fractional components using the \\frac command with explicit numerators and denominators.\n- Format all variable names in italicized math mode, while constants remain in standard text.\n- Use the caret (^) with curly braces to denote exponentiation for terms with non-single-digit exponents.\n- Insert explicit multiplication symbols (\\cdot) only between numbers and variables, omitting them between adjacent variables.\n- Include parentheses around grouped terms to preserve the logical structure of the equation.\n- Apply spacing commands such as \\, or \\; between distinct terms for enhanced readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac{d^2}{dx^2}",
            "\\frac",
            "\\cdot",
            "\\,",
            "\\;",
            "^{"
        ],
        "VQA": {
            "What derivative notation is visible for the second derivative?": "d^2/dx^2",
            "How are fractional components displayed in the equation?": "They are shown using explicit numerator and denominator fractions.",
            "Are variable names formatted differently from constants?": "Yes, variable names are italicized while constants remain in standard text.",
            "How is exponentiation indicated in the equation?": "With a caret (^) followed by curly braces for non-single-digit exponents.",
            "What symbol is used between numbers and variables for multiplication?": "A centered dot (·) is used.",
            "Are grouped terms visually distinguished by any markers?": "Yes, they are enclosed in parentheses.",
            "What spacing elements are incorporated between distinct terms?": "Spacing commands such as \\, or \\; are applied.",
            "Is the entire equation enclosed within a specific display environment?": "Yes, it is wrapped in an equation environment."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX31",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the plain text description of an infinite geometric series into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Use the \\sum command with clearly defined lower and upper limits to denote the summation for the series.\n- Represent the first term and common ratio as italicized variables using standard LaTeX mathematical formatting.\n- Express each term's exponent using the caret (^) symbol followed by curly braces, ensuring correct order of operations.\n- Apply the \\frac{}{} command to showcase any fractional expressions, with both numerator and denominator specified.\n- Include appropriate parentheses to group terms where necessary for clarity.\n- Utilize either \\cdot or \\times to represent multiplication with a proper spacing command (such as \\,, \\; or \\;) between elements.\n- Incorporate the \\sqrt{} command for any square root expressions present in the description.\n- Ensure every mathematical symbol and structure is formatted according to conventional LaTeX typesetting practices.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sum",
            "_{n=0}",
            "^{\\infty}",
            "\\frac",
            "^{",
            "\\cdot",
            "\\times",
            "\\sqrt",
            "a",
            "r"
        ],
        "VQA": {
            "Does the rendered equation appear as a centered, isolated block?": "Yes",
            "Are the summation symbols displayed with clearly defined lower and upper limits?": "Yes",
            "Are the first term and the common ratio shown as italicized variables?": "Yes",
            "Is each term's exponent formatted using a caret followed by curly braces?": "Yes",
            "Are any fraction expressions visibly rendered with both numerator and denominator?": "Yes",
            "Is there a multiplication operator (either a centered dot or a cross) displayed with proper spacing?": "Yes",
            "Does the equation include a square root symbol in one of the expressions?": "Yes",
            "Are parentheses used to group terms for clarity in the equation?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX32",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text polynomial summation expression into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The output must begin with a \\begin{align*} tag and end with an \\end{align*} tag.\n- Each summed term should use the \\sum command where appropriate, with clear lower and upper limits specified.\n- Coefficients that are rational numbers must be formatted using the \\frac{}{} command with both numerator and denominator provided.\n- Variables must be italicized by default, and each exponent should be represented using the caret symbol (^) followed by curly braces containing the exponent value.\n- Multiplication between a coefficient and a variable should be denoted with \\cdot, while adjacent variables must appear without an explicit multiplication symbol.\n- Parentheses must be included around grouped terms to clearly denote operation precedence.\n- A proper spacing command (such as \\, or \\;) should be used between separate elements of the equation for enhanced readability.",
        "raw_output_metric": [
            "\\begin{align*}",
            "\\end{align*}",
            "\\sum",
            "_{",
            "}^{",
            "\\frac{",
            "\\cdot",
            "^\\{",
            "(",
            ")",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered equation display summation symbols with clearly defined lower and upper limits?": "Yes",
            "Are any rational number coefficients presented as fractions with both a numerator and a denominator?": "Yes",
            "Are all variables shown in an italicized style?": "Yes",
            "Are the exponents formatted using a superscript notation that visually reflects a caret and curly braces structure?": "Yes",
            "Is the multiplication between coefficients and variables indicated by a centered dot?": "Yes",
            "Are parentheses visibly used to group terms and clarify the precedence of operations?": "Yes",
            "Is there proper spacing between different elements of the equation to enhance readability?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX33",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text trigonometric identity into a properly formatted LaTeX equation demonstrating a step-by-step transformation.\n\nFeature Requirements:\n- Enclose the entire equation within a \\begin{align} and \\end{align} environment.\n- Use the \\sin, \\cos, and \\tan commands to represent trigonometric functions with their arguments in curly braces.\n- Align the equality signs with the ampersand (&) in the align environment for clear step-by-step derivation.\n- Insert proper spacing commands (such as \\, or \\;) between coefficients and trigonometric functions.\n- Represent any fraction using the \\frac{}{} command with explicit numerators and denominators.\n- Format squared terms using the caret (^) with their exponents enclosed in curly braces.\n- Ensure parentheses are used to group terms appropriately to preserve the intended order of operations.\n- Include a transformation indicator (e.g., \\Rightarrow) to show progression between steps.\n- Incorporate a summation expression using \\sum with specified index limits to denote any series expansion within the derivation.",
        "raw_output_metric": [
            "\\begin{align}",
            "\\end{align}",
            "\\sin",
            "\\cos",
            "\\tan",
            "&",
            "\\frac",
            "^",
            "\\Rightarrow",
            "\\sum",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "What environment is used to enclose the entire equation?": "The align environment",
            "Which trigonometric function commands are explicitly utilized?": "The \\sin, \\cos, and \\tan commands",
            "How are coefficients spaced from the trigonometric functions?": "Using spacing commands such as \\, or \\;",
            "How is a fraction represented in the derivation?": "Using the \\frac{}{} command with explicit numerators and denominators",
            "How are squared terms formatted in the equation?": "By using the caret (^) with exponents enclosed in curly braces",
            "What symbol is used to indicate a transformation between steps?": "The \\Rightarrow indicator",
            "Which mathematical notation is incorporated to denote a series expansion?": "A summation expression using \\sum with specified index limits",
            "How are equality signs aligned in the derivation?": "They are aligned with the ampersand (&) in the align environment"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX34",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text second-order differential equation into a correctly formatted LaTeX representation.\n\nFeature Requirements:\n- Begin the equation with \\begin{align*} and end with \\end{align*} tags.\n- Use the \\frac{}{} command for any coefficients that appear as fractions.\n- Represent first and second derivatives of the function using the d/dx notation with superscripts to denote the order of differentiation.\n- Format all variable names and function symbols, ensuring that variables like y are italicized.\n- Utilize \\cdot for explicit multiplication between numbers and variables or coefficients.\n- Express constants such as pi using the proper LaTeX symbol (\\pi) and the natural exponential as e.\n- Include \\, or \\; commands to provide consistent spacing between terms.\n- Ensure that any trigonometric or exponential functions are formatted using commands like \\sin, \\cos, and \\exp to enhance readability.",
        "raw_output_metric": [
            "\\begin{align*}",
            "\\end{align*}",
            "\\frac",
            "\\frac{d^2y}{dx^2}",
            "\\frac{dy}{dx}",
            "\\cdot",
            "\\pi",
            "e",
            "\\exp",
            "\\sin",
            "\\cos",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "What tags enclose the rendered equation?": "It begins with \\begin{align*} and ends with \\end{align*}.",
            "Are fractions displayed using the \\frac{}{} command?": "Yes.",
            "How are the first and second derivatives of the function represented?": "They are shown using the d/dx notation with superscripts indicating the order of differentiation.",
            "Are variable names like y italicized?": "Yes.",
            "Is the explicit multiplication symbol \\cdot used between numbers and variables?": "Yes.",
            "Are constants like pi correctively formatted?": "Yes, pi is rendered as \\pi and e is shown as e.",
            "Is spacing maintained using commands like \\, or \\; between terms?": "Yes.",
            "Are trigonometric or exponential functions formatted using commands like \\sin, \\cos, and \\exp?": "Yes."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX35",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text trigonometric equation into a well-structured LaTeX representation of a harmonic motion expression.\n\nFeature Requirements:\n- The formatted LaTeX must begin with a \\begin{align} and conclude with an \\end{align} environment.\n- Use the \\sin and \\cos commands for all trigonometric functions, ensuring they are properly formatted.\n- Represent any square root operations with the \\sqrt{} command, with expressions under the radical fully enclosed in braces.\n- Include clearly formatted subscripts for variables that denote indices (e.g., x_{1}) wherever applicable.\n- Format exponents using the caret symbol (^) followed by curly braces to encapsulate the exponent.\n- Utilize the \\cdot command for multiplication between numbers and variables to ensure clarity.\n- Insert appropriate spacing commands (such as \\, or \\;) between operators and operands to improve readability.\n- Parentheses must be placed around expressions to explicitly denote the proper order of operations.\n- All variables should be italicized by default through standard LaTeX math formatting.",
        "raw_output_metric": [
            "\\begin{align}",
            "\\end{align}",
            "\\sin",
            "\\cos",
            "\\sqrt{",
            "\\cdot",
            "x_{",
            "^{"
        ],
        "VQA": {
            "Does the rendered LaTeX begin with an alignment environment?": "Yes, it starts with \\begin{align} and ends with \\end{align}.",
            "Are the trigonometric functions correctly formatted using \\sin and \\cos?": "Yes, they are explicitly written as \\sin and \\cos.",
            "Is the square root operation represented using the \\sqrt{} command with the expression fully enclosed in braces?": "Yes, every square root is formatted as \\sqrt{...}.",
            "Are subscripts displayed with clear formatting (for example, x_{1})?": "Yes, variables with indices use the correct subscript format.",
            "Are exponents formatted using the caret symbol (^) and curly braces?": "Yes, exponents are presented as ^{...}.",
            "Is the multiplication between numbers and variables indicated with the \\cdot command?": "Yes, multiplication is clearly shown with \\cdot.",
            "Are appropriate spacing commands (like \\, or \\;) used between operators and operands for improved readability?": "Yes, spacing commands are included for clarity."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX36",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text trigonometric identity into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- Enclose the expression within a \\[ and \\] environment.\n- Use \\sin, \\cos, and \\tan commands to represent the respective trigonometric functions.\n- Format any fractions using the \\frac{}{} command, ensuring both a numerator and a denominator are provided.\n- Italicize all variable names by placing them in math mode without additional formatting.\n- Represent exponents using the caret (^) symbol, wrapping multi-digit exponents in curly braces.\n- Insert parentheses around compound expressions to clearly indicate the order of operations.\n- Use the \\sqrt{} command to format all square root operations with their corresponding radicands.\n- Apply clear spacing commands (e.g., \\, or \\;) between operators and symbols for enhanced readability.\n- If a summation is present, use the \\sum command with defined lower and upper limit expressions.",
        "raw_output_metric": [
            "\\[",
            "\\]",
            "\\sin",
            "\\cos",
            "\\tan",
            "\\frac",
            "^{",
            "\\sqrt",
            "\\sum",
            "(",
            ")",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Is the entire expression enclosed within a display math environment using \\[ and \\]?": "Yes.",
            "Are trigonometric functions represented using the commands such as \\sin, \\cos, and \\tan?": "Yes.",
            "Are all fractions formatted using the \\frac{}{} command with both a numerator and a denominator?": "Yes.",
            "Are all variable names italicized by being placed in math mode without any extra formatting?": "Yes.",
            "Are exponents represented using the caret (^) symbol with multi-digit exponents enclosed in curly braces?": "Yes.",
            "Is every square root operation formatted with the \\sqrt{} command including its appropriate radicand?": "Yes.",
            "Are clear spacing commands (e.g., \\, or \\;) used between operators and symbols for enhanced readability?": "Yes.",
            "If a summation is present, is it displayed with the \\sum command along with defined lower and upper limit expressions?": "Yes."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX37",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the provided plain text description of an exponential decay function into a correctly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Represent the exponential decay using the function e^{-kt}, where k and t are variables formatted in italics.\n- Use the \\frac{}{} command for any fractional expressions, ensuring that both numerator and denominator are clearly enclosed in curly braces.\n- Insert explicit spacing commands (e.g., \\, or \\;) between distinct components of the equation to enhance readability.\n- Use the \\cdot symbol to denote multiplication between numerical constants and variables whenever necessary.\n- Include parentheses around grouped terms to clearly indicate the order of operations.\n- Format any negative signs using the standard LaTeX minus symbol to ensure consistency.\n- All variables must be formatted in math mode to emphasize proper mathematical notation.\n- Ensure that the entire expression is syntactically correct and ready for academic use.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "e^{-kt}",
            "\\frac{",
            "\\cdot",
            "\\,",
            "\\;",
            "(",
            ")"
        ],
        "VQA": {
            "Is the equation enclosed within an environment that clearly sets it off as a numbered equation?": "Yes",
            "Does the displayed equation show the exponential decay in the form e^{-kt}?": "Yes",
            "Are the variables k and t rendered in italics within the equation?": "Yes",
            "Is a centered dot (\\cdot) used to denote multiplication between constants and variables?": "Yes",
            "Are explicit spacing commands such as \\, or \\; visibly inserted between components of the equation?": "Yes",
            "Are parentheses used to group terms and indicate the order of operations?": "Yes",
            "Is the negative sign in the exponent formatted as the standard LaTeX minus symbol?": "Yes",
            "Does the equation include a fractional expression rendered with the \\frac command?": "No"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX38",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text polynomial with an integral and summation into a properly formatted LaTeX expression.\n\nFeature Requirements:\n- The entire equation must be enclosed between \\begin{equation} and \\end{equation} tags.\n- Represent the integral using the \\int command with distinct lower and upper limits specified by an underscore (_) for the lower limit and a caret (^) for the upper limit.\n- Express any summations using the \\sum command with both lower and upper limits defined.\n- Any fractions must be formatted with the \\frac{}{} command, ensuring both the numerator and denominator are explicitly provided.\n- All variables must appear in italics, following standard LaTeX mathematical formatting.\n- Exponents are to be formatted using the caret symbol (^) followed by curly braces enclosing the exponent.\n- Use parentheses to clearly indicate grouped operations in addition, multiplication, or exponentiation, especially when these operations interact.\n- Include appropriate spacing commands (e.g., \\, or \\;) between different parts of the equation to enhance readability.\n- All square roots in the expression should be formatted using the \\sqrt{} command with the radicand enclosed in curly braces.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "\\sum",
            "_{",
            "}^{",
            "\\frac",
            "^{",
            "\\sqrt{",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Does the rendered equation appear within a clearly defined display block?": "Yes, it is enclosed in an equation environment.",
            "Is the integral symbol displayed with visible lower and upper limit indicators?": "Yes, the integral shows distinct lower and upper limits.",
            "Can you see a summation symbol that includes both lower and upper bounds?": "Yes, the summation symbol has clearly defined lower and upper indices.",
            "Are fractions rendered with the numerator and denominator clearly separated?": "Yes, fractions appear with distinct numerator and denominator parts.",
            "Do all variables in the equation appear in an italicized style?": "Yes, every variable is shown in italics.",
            "Are exponents displayed as superscripts with the exponent values positioned correctly?": "Yes, exponents are rendered as superscripts with proper alignment.",
            "Is there appropriate spacing between elements like the integral, summation, and fractions for better readability?": "Yes, the equation includes spacing commands that enhance clarity."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX39",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text trigonometric simplification problem into a properly formatted LaTeX aligned equations block.\n\nFeature Requirements:\n- The output must begin with a \\begin{align} and conclude with an \\end{align} environment.\n- Use LaTeX commands like \\sin, \\cos, and \\tan for all trigonometric functions.\n- Represent any division operations using the \\frac{}{} command with clear numerator and denominator.\n- Apply the exponent notation with the caret symbol (^) followed by curly braces for any power.\n- Enclose subexpressions that require grouping with parentheses to maintain the correct order of operations.\n- Incorporate proper spacing using commands (e.g., \\, or \\;) between different parts of the equation for clarity.\n- Use the & symbol to align the equality signs or relevant operators within the align environment.\n- Explicitly display each step of the simplification process so that intermediate steps are clearly identifiable.\n- All angles or variable names must be enclosed in math mode with italic formatting as per standard LaTeX conventions.",
        "raw_output_metric": [
            "\\begin{align}",
            "\\end{align}",
            "\\sin",
            "\\cos",
            "\\tan",
            "\\frac{",
            "^{",
            "\\,",
            "\\;",
            "&",
            "(",
            ")"
        ],
        "VQA": {
            "Does the rendered output start with \\begin{align} and end with \\end{align}?": "Yes",
            "Are the trigonometric functions displayed as \\sin, \\cos, and \\tan in the output?": "Yes",
            "Is every division operation represented using the \\frac{}{} command?": "Yes",
            "Are exponent notations written using the caret (^) with curly braces for the powers?": "Yes",
            "Are subexpressions that require grouping enclosed in parentheses to maintain the proper order of operations?": "Yes",
            "Is there proper spacing (using commands like \\, or \\;) between different parts of the equation?": "Yes",
            "Are the equality signs (or relevant operators) aligned using the & symbol within the align environment?": "Yes",
            "Are all angles and variable names enclosed in math mode with italic formatting?": "Yes",
            "Can the viewer visually identify each intermediate simplification step in the equation block?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX40",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the plain text description of a double integral with variable limits into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation}.\n- Use two nested \\int symbols, with the outer integral specifying limits for y and the inner integral specifying limits for x.\n- Apply clear notation for variable limits, using _{lower limit} and ^{upper limit} for both integrals.\n- Include the differentials \\,dx and \\,dy at the end of the respective integrals, ensuring a small space between the integrand and the differential.\n- Use \\frac{}{} to format any fraction present within the integrand, with each fraction having both a numerator and a denominator.\n- Parenthesize the integrand or parts of the integrand to preserve the correct order of operations.\n- Represent any exponent using the caret symbol (^) immediately followed by curly braces containing the exponent.\n- Use standard LaTeX commands for common functions (for example, \\sin, \\cos) ensuring they appear in roman type.\n- Insert spacing commands (e.g., \\,, \\; or \\;) between distinct parts of the equation to enhance readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "_{",
            "}^{",
            "\\,dx",
            "\\,dy",
            "\\frac"
        ],
        "VQA": {
            "Does the displayed equation appear centered in a separate block?": "Yes.",
            "How many integral symbols are visible in the rendered equation?": "Two.",
            "Are the integration limits shown above and below the integral symbols?": "Yes.",
            "Which variable’s integration limits are associated with the outer integral?": "y.",
            "Which variable’s integration limits are specified for the inner integral?": "x.",
            "Are the differentials displayed with a small space before them (e.g., dx and dy)?": "Yes.",
            "Is any fraction in the integrand rendered with a clear numerator over a denominator separated by a horizontal line?": "Yes.",
            "Are exponents indicated using a caret followed by numbers inside curly braces?": "Yes."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX41",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTranslate a plain text gravitational law equation into a fully formatted LaTeX expression incorporating physics notation and structure.\n\nFeature Requirements:\n- The output must begin with a \\[ and end with a \\] to denote display math mode.\n- Use the \\frac{}{} command to display fractions with an explicit numerator and denominator.\n- Represent multiplication using the \\cdot symbol between numbers and variables, but do not insert it between adjacent variables.\n- Enclose expressions affected by order of operations in parentheses where necessary.\n- All variables (e.g., m, g, r) must be written in italicized math mode.\n- Include a square root operation formatted with \\sqrt{} when representing derived quantities.\n- Format any summation operations with \\sum, explicitly including lower and upper limit definitions.\n- Use spacing commands such as \\, or \\quad to improve readability between different elements of the equation.\n- Express exponential operations using the caret (^) followed by curly braces for their exponents.",
        "raw_output_metric": [
            "\\[",
            "\\]",
            "\\frac",
            "}{",
            "\\cdot",
            "\\sqrt",
            "\\sum",
            "_{i=1}^{n}",
            "\\,",
            "\\quad",
            "^{2}"
        ],
        "VQA": {
            "Is the entire equation enclosed within display math delimiters (i.e., \\[ and \\])?": "Yes",
            "Does the equation use \\frac{}{} to clearly separate a numerator and a denominator?": "Yes",
            "Is the multiplication between numbers and variables indicated by the \\cdot symbol?": "Yes",
            "Are expressions that require a specific order of operations enclosed in parentheses where necessary?": "Yes",
            "Is a square root operation displayed using the \\sqrt{} command?": "Yes",
            "Does the equation include a summation (\\sum) with explicit lower and upper limit definitions?": "Yes",
            "Are all variable names, such as m and r, displayed in italicized math mode?": "Yes",
            "Is exponential notation expressed using the caret (^) followed by curly braces for the exponent?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX42",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the provided plain text statement of the inverse square law of light intensity into a properly formatted LaTeX mathematical equation.\n\nFeature Requirements:\n- The equation must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Variables representing light intensity and distance must be italicized using LaTeX math mode.\n- Use the \\frac{}{} command to represent the inverse square relationship, with the numerator as the constant k and the denominator as the square of the distance.\n- Denote the squared term by using the caret (^) followed by curly braces containing the exponent.\n- Include appropriate spacing commands (such as \\, or \\;) between variables, operators, and fractions to enhance readability.\n- Use an equals sign to define the equation explicitly, placing the constant of proportionality (k) on the appropriate side.\n- Ensure that the multiplication symbol (\\cdot) is used between the constant and the fraction when necessary to clearly indicate multiplication.",
        "raw_output_metric": [],
        "VQA": {
            "What environment encloses the rendered equation?": "It is enclosed within an equation environment (i.e., it starts with \\begin{equation} and ends with \\end{equation}).",
            "Are the variables representing light intensity and distance displayed in italics?": "Yes, they are italicized in math mode.",
            "Is the inverse square relationship shown using a fraction?": "Yes, the equation uses the \\frac command to display a fraction.",
            "How is the squared term of the distance variable indicated?": "It is denoted using the caret (^) followed by curly braces containing the exponent.",
            "Are there visible spacing commands between variables and operators?": "Yes, spacing commands like \\, or \\; are added for readability.",
            "Is the multiplication symbol used between the constant and the fraction?": "Yes, the \\cdot symbol is used for multiplication.",
            "Does the equation clearly use an equals sign to define the constant of proportionality?": "Yes, an equals sign is present to define the equation explicitly."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX43",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform the plain text trigonometric identity into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- The equation must begin with a \\begin{equation} tag and end with an \\end{equation} tag.\n- All trigonometric function names, such as sine and cosine, must be represented using \\sin and \\cos in LaTeX.\n- Any use of angles or variables should be rendered in math-mode italics.\n- Use the caret (^) followed by curly braces to denote exponents, ensuring multi-digit exponents are enclosed.\n- Parentheses must be placed appropriately to indicate the correct order of operations.\n- Represent any square root operation using the \\sqrt{} command.\n- Include a \\cdot symbol to denote multiplication between numbers or between a number and a variable when needed, but omit it between adjacent variables.\n- Ensure proper spacing commands (such as \\, or \\;) are inserted between different components of the equation for improved readability.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\sin",
            "\\cos",
            "^{",
            "\\sqrt{",
            "\\cdot",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "Are the trigonometric functions in the equation visibly rendered as the correct function names (sin and cos)?": "Yes",
            "Are all angles and variables displayed in math-mode italics in the rendered output?": "Yes",
            "When an exponent consists of more than one digit, is it clearly formatted with proper exponent notation?": "Yes",
            "Is the multiplication between numbers or a number and a variable indicated by a centered dot operator?": "Yes",
            "Does the equation display any square root operation using a recognizable radical symbol?": "Yes",
            "Are there visible spacing adjustments (such as small spaces between components) that improve readability?": "Yes",
            "Is the equation presented as a standalone centered display on the page?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX44",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text description of a differential equation with an integral term into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The entire expression must be enclosed within \\begin{equation} and \\end{equation} tags.\n- Represent any fraction using the \\frac{}{} command, ensuring both the numerator and denominator are specified.\n- Format derivatives using the prime notation (e.g., f'(x)) for first derivatives and double primes (e.g., f''(x)) for second derivatives.\n- Use the \\int command with appropriate limits to denote the integral part of the expression.\n- Enclose composite expressions or arguments of functions within curly braces if needed to maintain correct mathematical grouping.\n- Insert explicit multiplication symbols (\\cdot) between numerical coefficients and variables where applicable.\n- Format standard mathematical functions (such as sin, cos, log) in roman type to differentiate them from variables.\n- Include spacing commands (such as \\, or \\quad) between distinct parts of the equation for enhanced readability.\n- Ensure all variables are italicized using standard LaTeX math formatting conventions.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\frac",
            "f'(x)",
            "f''(x)",
            "\\int",
            "\\cdot",
            "\\sin",
            "\\cos",
            "\\log",
            "\\,",
            "\\quad"
        ],
        "VQA": {
            "What environment visibly encloses the entire mathematical expression?": "It is displayed within an equation environment.",
            "How are fractions rendered in the expression?": "They appear with a horizontal fraction bar showing both numerator and denominator.",
            "What notation is used to represent the first and second derivatives?": "Prime notation is used: f'(x) for the first derivative and f''(x) for the second derivative.",
            "How is the integral term displayed within the expression?": "It shows the integral symbol with clearly indicated lower and upper limits.",
            "What visual element separates numerical coefficients from variables?": "An explicit multiplication symbol (·) is used.",
            "How are standard mathematical functions like sine or cosine styled?": "They are shown in roman type to differentiate them from variables.",
            "Is proper grouping visible for composite expressions or function arguments?": "Yes, they are enclosed in braces for correct grouping.",
            "Are any spacing commands noticeable in the layout for enhanced readability?": "Yes, additional spaces such as small or quad spaces are inserted between distinct parts of the equation."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX45",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the following plain text expression for the probability density function of the exponential distribution into a properly formatted LaTeX equation.\n\nFeature Requirements:\n- Enclose the entire expression within \\begin{equation} and \\end{equation} tags.\n- Italicize all variable names using proper LaTeX math mode formatting.\n- Represent the exponent using e^{...} notation with the exponent enclosed in curly braces.\n- Use the \\frac{}{} command to depict any fractional terms, ensuring both numerator and denominator are specified.\n- Format any constants or function names (like \"exp\" if used) with \\mathrm{} to differentiate them from variables.\n- Include appropriate spacing commands (e.g., \\, or \\;) between terms to improve readability.\n- Apply subscripts and superscripts with curly braces to clearly define their scopes.\n- Use \\times or \\cdot consistently to indicate multiplication between numerical factors and variables.\n- If a summation or integration symbol appears, define its limits using proper LaTeX subscript and superscript syntax.",
        "raw_output_metric": [],
        "VQA": {
            "Is the entire equation displayed in a centered, separate block (enclosed in a display math environment)?": "Yes",
            "Are all variable names, such as λ and x, displayed in italic font?": "Yes",
            "Is the exponential term expressed using the e^{...} notation with the exponent enclosed in curly braces?": "Yes",
            "Are any fractional terms formatted using the \\frac{}{} command with both numerator and denominator specified?": "Yes",
            "Are constants and function names (for example, 'exp') shown in roman (upright) typeface using \\mathrm{}?": "Yes",
            "Is there appropriate spacing (using commands like \\, or \\;) between numerical factors and variables for improved readability?": "Yes",
            "Are multiplication operations consistently indicated with symbols such as \\times or \\cdot?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX46",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTranslate the following plain text description of a calculus-based probability function into a correctly formatted LaTeX mathematical expression.\n\nFeature Requirements:\n- The output must begin with \\[ and end with \\] delimiters.\n- Integrals must be represented using the \\int symbol, with clearly defined lower and upper limits using subscript and superscript notation.\n- Use the \\frac{}{} command for any fractional expressions, ensuring that both numerator and denominator are explicitly provided.\n- All standard mathematical functions (e.g., sin, log) should be formatted in roman text within math mode using commands like \\operatorname.\n- Include exponents using the caret (^) followed by curly braces to enclose complex exponents.\n- Represent any summation using the \\sum notation with specified starting and ending indices.\n- Parentheses should be used around any sub-expressions to indicate the intended order of operations.\n- Proper spacing commands such as \\, or \\; must be inserted between distinct mathematical elements to enhance readability.\n- Variables should be italicized by default following LaTeX math formatting conventions.",
        "raw_output_metric": [
            "\\[",
            "\\]",
            "\\int",
            "\\frac",
            "\\operatorname",
            "\\sum",
            "^{",
            "\\,",
            "\\;"
        ],
        "VQA": {
            "What delimiters enclose the entire LaTeX expression?": "\\[ and \\]",
            "How is an integral visually represented?": "Using \\int with lower and upper limits shown via subscripts and superscripts",
            "What command is used to display fractions in the output?": "\\frac{}{} with explicit numerator and denominator",
            "How are standard mathematical functions like sin and log formatted?": "They are formatted in roman text using commands like \\operatorname",
            "How should exponents be represented in the expression?": "Using the caret (^) followed by curly braces enclosing the exponent",
            "What notation is used for summations?": "The expression uses \\sum with specified starting and ending indices",
            "How are variables formatted in the LaTeX expression?": "Variables are italicized following standard math formatting conventions"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX47",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nTransform a plain text description of a trigonometric identity for the cosine of a double angle into a properly formatted mathematical equation in LaTeX.\n\nFeature Requirements:\n- The equation must begin with \\begin{equation} and end with \\end{equation}.\n- All variables must be italicized using LaTeX’s standard mathematical formatting.\n- Represent the double angle as 2\\theta with the multiplication clearly indicated.\n- Use the \\cos command for the cosine function to ensure it remains upright and not italicized.\n- Format any fractions with the \\frac{}{} command, ensuring both numerator and denominator are explicitly provided.\n- Include squared terms with the caret (^) symbol followed by curly braces to denote the exponent.\n- Enclose expressions in parentheses where necessary to maintain the correct order of operations.\n- Use a multiplication symbol such as \\cdot between coefficients and variables.\n- Insert appropriate spacing commands (for example, \\, or \\;) between elements of the equation for enhanced readability.\n- Ensure every mathematical operator is properly spaced to clearly distinguish different parts of the equation.",
        "raw_output_metric": [],
        "VQA": {
            "Does the rendered equation appear centered as a standalone displayed equation?": "Yes, it is shown in a designated equation display block.",
            "Are all variables in the equation shown in italic style?": "Yes, every variable is italicized as required.",
            "Is the double angle written with a clear multiplication symbol between 2 and θ?": "Yes, the double angle is represented as 2 \\cdot \\theta with a visible multiplication symbol.",
            "Is the cosine function displayed using an upright style?": "Yes, \\cos is used so that the cosine function remains upright.",
            "Are fractions formatted with both numerator and denominator clearly specified?": "Yes, fractions are rendered using the \\frac{}{} command with explicit numerator and denominator.",
            "Are squared terms shown using the caret (^) with curly braces for the exponent?": "Yes, squared terms are correctly formatted with the caret and curly braces.",
            "Are expressions enclosed in parentheses where necessary to ensure proper order of operations?": "Yes, parentheses are used to maintain the correct order of operations."
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX48",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text calculus expression representing a definite integral of an exponential function into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} command and end with an \\end{equation} command.\n- Use the \\int symbol to define the integral and include both lower and upper limits placed as subscripts and superscripts respectively.\n- Format the exponential function using the notation e^{...}, ensuring that the exponent is enclosed in curly braces.\n- Use the \\frac{}{} command to represent any fractions that appear in the expression.\n- Italicize all variables by placing them in math mode without additional formatting commands.\n- Include appropriate LaTeX spacing commands (e.g., \\,, \\; or \\,) to separate elements like the integrand and differential operator.\n- Represent the differential element using the correct differential notation (e.g., \\,dx) at the end of the integrand.\n- Ensure any parentheses used to alter the order of operations are clearly indicated in the output.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\int",
            "_{",
            "}^{",
            "e^{",
            "\\frac{",
            "\\,dx"
        ],
        "VQA": {
            "Is the overall expression enclosed within a displayed equation environment?": "Yes",
            "Does the integral symbol visually include both a lower limit and an upper limit?": "Yes",
            "Is the exponential function represented as 'e' raised to a clearly formatted superscript exponent?": "Yes",
            "Can you see a fraction rendered with a horizontal dividing line in the expression?": "Yes",
            "Are all the variables, such as the variable in the differential element, presented in an italicized style?": "Yes",
            "Is there a clear and distinct separation between the integrand and the differential element (like dx)?": "Yes",
            "Are visible spacing cues present that separate elements within the integrand?": "Yes",
            "Are parentheses used to clarify the order of operations in the exponent clearly visible?": "Yes"
        }
    },
    {
        "task_name": "Text to Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "task_id": "00XX49",
        "input_type": "Text",
        "output_type": "Latex",
        "rendering": true,
        "query": "Please output Latex:\n\nTask:\nConvert the given plain text chemical reaction into a properly formatted LaTeX equation that displays a balanced reaction.\n\nFeature Requirements:\n- The reaction must start with a \\begin{equation} tag and end with an \\end{equation} tag.\n- Chemical element symbols must be written in roman (upright) text while any subscripts representing the number of atoms are formatted using the _{} command.\n- Use the \\rightarrow command to denote the reaction arrow between reactants and products.\n- Stoichiometric coefficients should be placed directly before their corresponding chemical formulas without any intervening space.\n- Include the + symbol between chemical species, ensuring a small spacing command (e.g., \\,) is placed before and after the plus sign.\n- Parentheses must be used to group atoms in polyatomic ions when necessary.\n- For clarity, every reactant and product should be separated by appropriate spacing to visually distinguish distinct chemical species.\n- Ensure that the overall reaction is balanced as reflected in the LaTeX equation formatting.",
        "raw_output_metric": [
            "\\begin{equation}",
            "\\end{equation}",
            "\\mathrm",
            "_{",
            "\\rightarrow",
            "\\, + \\,"
        ],
        "VQA": {
            "Is the equation visibly enclosed between a start tag and an end tag for the equation environment?": "Yes, it starts with \\begin{equation} and ends with \\end{equation}.",
            "Are the chemical element symbols displayed in upright (roman) text?": "Yes, they are shown in roman text.",
            "Is the reaction arrow represented by a specific LaTeX command?": "Yes, it uses the \\rightarrow command.",
            "Are the stoichiometric coefficients placed directly before the chemical formulas without any space?": "Yes, they are placed directly before the formulas.",
            "Is a spacing command present before and after each '+' symbol?": "Yes, a small spacing command (\\,) is used on both sides of each '+'.",
            "Are subscripts used for the number of atoms formatted with the _{} command?": "Yes, subscripts are formatted using _{}.",
            "Are parentheses used to group atoms in polyatomic ions where needed?": "Yes, parentheses are correctly used around polyatomic ions.",
            "Does the overall reaction appear balanced in the formatted output?": "Yes, the reaction is balanced as shown in the LaTeX equation."
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000700",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a formatted Markdown document outlining a project update meeting agenda for a new product launch.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element that displays the text \"Project Update Meeting\".\n- Include an <h2> element titled \"Meeting Agenda\" immediately after the title.\n- Present exactly 3 bullet points under the \"Meeting Agenda\" section, where each bullet point briefly describes a specific agenda item.\n- Add an introductory section with a single paragraph containing exactly 3 sentences that provides background information for the meeting.\n- Include a \"Discussion Points\" section using an <h2> element, followed by exactly 4 paragraphs where each paragraph is comprised of 2 full sentences discussing different aspects of the project.\n- Create a \"Next Steps\" section using an <h2> element that is immediately followed by a numbered list containing exactly 3 items, with each item detailing a clear and distinct action.\n- Conclude with a \"Summary\" section using an <h2> element, featuring one final paragraph of exactly 2 sentences that encapsulate the outcomes of the meeting.",
        "raw_output_metric": [
            "Project Update Meeting",
            "Meeting Agenda",
            "Discussion Points",
            "Next Steps",
            "Summary",
            "1.",
            "2.",
            "3.",
            "-"
        ],
        "VQA": {
            "What is the centered title at the top of the document?": "Project Update Meeting",
            "What is the text of the h2 element immediately following the title?": "Meeting Agenda",
            "How many bullet points are listed under the Meeting Agenda section?": "3",
            "How many sentences are in the introductory background paragraph?": "3",
            "What is the heading level used for the Discussion Points section?": "h2",
            "How many paragraphs are included in the Discussion Points section?": "4",
            "How many items appear in the numbered list under the Next Steps section?": "3",
            "How many sentences does the final summary paragraph contain?": "2"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000701",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a fictional travel itinerary for a weekend getaway.\n\nFeature Requirements:\n- Begin with a centered <h1> element displaying the text \"Travel Itinerary\".\n- Create an \"Overview\" section using an <h2> element, immediately followed by exactly 2 paragraphs where each paragraph contains 2 complete sentences.\n- Add a \"Destinations\" section with an <h2> element followed by an unordered list containing exactly 5 items, each listing a different destination name.\n- Include a \"Schedule\" section using an <h2> element, immediately followed by an ordered list with exactly 3 items, each item representing a distinct day of the itinerary.\n- Conclude with a \"Notes\" section using an <h2> element, accompanied by one paragraph that consists of exactly 3 complete sentences.\n- Ensure that all paragraphs consist of full sentences with proper punctuation and spacing.",
        "raw_output_metric": [
            "<h1>Travel Itinerary</h1>",
            "<h2>Overview</h2>",
            "<h2>Destinations</h2>",
            "<h2>Schedule</h2>",
            "<h2>Notes</h2>"
        ],
        "VQA": {
            "What is the text displayed in the centered h1 element at the top of the document?": "Travel Itinerary",
            "What is the heading label for the overview section?": "Overview",
            "How many paragraphs immediately follow the Overview heading and how many complete sentences does each contain?": "2 paragraphs, each with 2 complete sentences",
            "What is the heading label for the destinations section and how many list items does it contain?": "Destinations; 5 items",
            "What is the heading label for the schedule section and how many ordered list items are provided?": "Schedule; 3 items",
            "What is the heading label for the notes section and how many complete sentences does its paragraph include?": "Notes; 3 complete sentences",
            "Are all paragraphs structured with proper punctuation and spacing?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000702",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that announces a new product launch.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Product Launch Announcement'.\n- Begin with an <h2> element titled 'Overview' followed by exactly 2 paragraphs introducing the new product; each paragraph must contain at least 2 complete sentences.\n- Add an <h2> element titled 'Features' followed by an ordered list that contains exactly 5 bullet items, each outlining a unique feature of the product.\n- Insert an <h2> element titled 'Pricing' accompanied by a table with two columns — 'Tier' and 'Price' — listing exactly 3 pricing options, each in its own row.\n- Create a final section using an <h2> element titled 'Contact' that includes one paragraph with detailed contact information and at least one sentence.\n- Maintain the order of sections as follows: Title, Overview, Features, Pricing, and Contact.\n- Ensure all text is clearly structured and evenly spaced between sections.",
        "raw_output_metric": [
            "Product Launch Announcement",
            "Overview",
            "Features",
            "Pricing",
            "Tier",
            "Price",
            "Contact"
        ],
        "VQA": {
            "What is the text of the centered title in the document?": "Product Launch Announcement",
            "How many paragraphs are present in the Overview section?": "2",
            "What is the minimum number of complete sentences each overview paragraph contains?": "2",
            "How many bullet items are included in the Features ordered list?": "5",
            "What are the column headers displayed in the Pricing table?": "Tier and Price",
            "How many pricing options (rows) are shown in the Pricing section?": "3",
            "How many paragraphs are present in the Contact section?": "1"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000703",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that outlines a fictional weekend festival schedule and details.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Weekend Festival Overview\".\n- Create a subsection titled \"Event Schedule\" using an <h2> element followed by a table with exactly 3 columns labeled \"Time\", \"Event\", and \"Location\".\n- Populate the table with exactly 3 rows, each row listing a unique time, event name, and venue.\n- Add a subsection titled \"Performances\" with an <h2> element and include a numbered list containing exactly 4 performance acts.\n- Incorporate a subsection titled \"Additional Information\" using an <h2> element that contains exactly 2 paragraphs, each with at least two sentences outlining guidelines and important notes for attendees.\n- Finish the document with a subsection titled \"Contact\" using an <h3> element, followed by a paragraph that provides a fictional email address and phone number.",
        "raw_output_metric": [
            "Weekend Festival Overview",
            "<h1>",
            "</h1>",
            "Event Schedule",
            "<h2>",
            "</h2>",
            "Time",
            "Event",
            "Location",
            "Performances",
            "Additional Information",
            "Contact",
            "<h3>"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Weekend Festival Overview",
            "How many columns are in the event schedule table?": "3",
            "What are the column headers of the event schedule table?": "Time, Event, and Location",
            "How many rows are present in the event schedule table?": "3",
            "How many performance acts are listed in the numbered list under the Performances section?": "4",
            "How many paragraphs are under the Additional Information section?": "2",
            "What does each paragraph in the Additional Information section contain?": "At least two sentences",
            "What contact details are provided in the Contact section?": "A fictional email address and phone number"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000704",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that summarizes a fictional community event.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Community Event Recap\".\n- Present an introductory section using an <h2> element titled \"Event Overview\" followed by exactly 2 paragraphs, each containing at least two sentences.\n- Create a section using an <h2> element titled \"Schedule\" that includes a numbered list of exactly 3 items, each item describing a specific session or time slot.\n- Add a section titled \"Highlights\" using an <h2> element, immediately followed by a bullet list of exactly 4 points, with each point detailing a distinct feature of the event.\n- Conclude with a section titled \"Closing Remarks\" using an <h2> element, which must be followed by a single paragraph containing at least two sentences.\n- Ensure that all sections and list items are clearly separated and follow a consistent Markdown structure.",
        "raw_output_metric": [
            "Community Event Recap",
            "Event Overview",
            "Schedule",
            "Highlights",
            "Closing Remarks",
            "1.",
            "2.",
            "3.",
            "- "
        ],
        "VQA": {
            "What is the centered title text displayed at the top of the page?": "Community Event Recap",
            "Which header introduces the introductory section of the document?": "Event Overview",
            "How many paragraphs are in the Event Overview section?": "2",
            "Which header marks the section that contains a numbered list?": "Schedule",
            "How many items are in the numbered list within the Schedule section?": "3",
            "Which header is used for the section featuring a bullet list of event features?": "Highlights",
            "How many bullet points are present in the Highlights section?": "4",
            "Which header indicates the final section with closing comments?": "Closing Remarks",
            "How many paragraphs appear under the Closing Remarks section?": "1"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000705",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a Markdown formatted tech review report summarizing a recent innovation analysis.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Tech Review 2023'.\n- Begin with a subsection header using an <h2> element titled 'Overview' and follow it with exactly 3 paragraphs, each containing at least 2 sentences.\n- Add a subsection header with an <h2> element titled 'Findings' immediately followed by a bullet list.\n- The bullet list should contain exactly 5 items, with each item starting with a numerical rating (e.g., \"1. Excellent\") followed by a brief description.\n- Create another subsection header using an <h2> element titled 'Recommendations' and add a numbered list with exactly 3 items, each outlining a specific improvement suggestion.\n- End with a final subsection header using an <h2> element titled 'Summary' that is followed by a single, concluding paragraph containing at least 2 sentences.\n- Ensure that all specified paragraphs and list items have clearly distinct content as described.",
        "raw_output_metric": [],
        "VQA": {
            "What is the text of the centered title displayed as an <h1> element?": "Tech Review 2023",
            "How many paragraphs follow the 'Overview' header?": "3",
            "What is the minimum number of sentences required for each 'Overview' paragraph?": "2",
            "How many bullet list items are shown in the 'Findings' section?": "5",
            "Do the bullet list items in the 'Findings' section begin with a numerical rating?": "Yes",
            "How many items are contained in the numbered list under the 'Recommendations' section?": "3",
            "How many sentences should the concluding paragraph under the 'Summary' header have at minimum?": "2",
            "What are the subsection headers visible on the page aside from the main title?": "Overview, Findings, Recommendations, Summary"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000706",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a futuristic city guide.\n\nFeature Requirements:\n- Start with a centered title using an <h1> element that reads \"Futuristic City Guide\".\n- Create a section using an <h2> element titled \"City Overview\" followed by exactly three paragraphs, each containing at least two sentences.\n- Add another section with an <h2> element titled \"Neighborhood Highlights\" featuring a bullet list with exactly 5 items, each item describing a different neighborhood.\n- Include a section titled \"Transport & Infrastructure\" using an <h2> element followed by a numbered list with exactly 4 items that detail various transportation features.\n- Insert a section with an <h2> element labeled \"Sustainability Initiatives\" which contains a table with exactly 3 columns and 2 rows detailing energy, waste management, and green spaces.\n- Conclude with a final section titled \"Visitor Tips\" using an <h2> element that is followed by a single paragraph containing at least three sentences.",
        "raw_output_metric": [
            "Futuristic City Guide",
            "City Overview",
            "Neighborhood Highlights",
            "Transport & Infrastructure",
            "Sustainability Initiatives",
            "Visitor Tips",
            "energy",
            "waste management",
            "green spaces"
        ],
        "VQA": {
            "What is the text of the centered title at the top of the document?": "Futuristic City Guide",
            "How many paragraphs are present under the 'City Overview' section?": "3",
            "How many bullet list items are in the 'Neighborhood Highlights' section?": "5",
            "How many numbered items are present in the 'Transport & Infrastructure' section?": "4",
            "How many columns does the table in the 'Sustainability Initiatives' section have?": "3",
            "How many rows does the table in the 'Sustainability Initiatives' section have?": "2",
            "What is the minimum number of sentences in the 'Visitor Tips' paragraph?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000707",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nTransform the provided text into a well-structured Markdown document that outlines a travel itinerary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Travel Itinerary Plan\".\n- Create a subsection using an <h2> element titled \"Overview\" with exactly 2 paragraphs, each containing at least two sentences.\n- Add another subsection using an <h2> element titled \"Daily Schedule\" followed by a numbered list.\n- The numbered list must contain exactly 3 items, each item representing one travel day with a brief description.\n- Insert a subsection titled \"Accommodation\" using an <h2> element, followed by a single paragraph of at least three sentences describing lodging details.\n- End with a final subsection titled \"Additional Tips\" using an <h2> element, accompanied by a bullet list of exactly 4 travel recommendations.\n- Ensure that the document does not include any elements other than the specified structure.",
        "raw_output_metric": [
            "Travel Itinerary Plan",
            "Overview",
            "Daily Schedule",
            "Accommodation",
            "Additional Tips",
            "1.",
            "2.",
            "3.",
            "-"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the document?": "Travel Itinerary Plan",
            "How many paragraphs are present in the 'Overview' section?": "2",
            "How many sentences should each paragraph in the 'Overview' section have at a minimum?": "At least 2",
            "How many items are in the numbered list under the 'Daily Schedule' section?": "3",
            "How many sentences should the single paragraph in the 'Accommodation' section contain at a minimum?": "At least 3",
            "How many bullet points are in the 'Additional Tips' section?": "4"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000708",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a Markdown document that outlines a fictional art gallery exhibition.\n\nFeature Requirements:\n- Start with a centered title using an <h1> element labeled \"Modern Art Exhibition\".\n- Include an <h2> element titled \"Exhibition Overview\" containing exactly 2 paragraphs, each with at least two complete sentences.\n- Add an <h2> element labeled \"Featured Artists\" followed by an ordered list of exactly 4 artist names.\n- After the artist list, include an <h2> element titled \"Art Pieces\" with a bullet list of exactly 5 items, each describing a unique art piece.\n- Provide an <h2> element titled \"Visitor Information\" containing a paragraph with details about timings and location, ensuring it consists of at least two sentences.\n- End with an <h2> element labeled \"Conclusion\" that includes a single paragraph summarizing the exhibition, with a minimum of two sentences.\n- All sections must be clearly delineated using Markdown header syntax for visual separation.",
        "raw_output_metric": [
            "Modern Art Exhibition",
            "Exhibition Overview",
            "Featured Artists",
            "Art Pieces",
            "Visitor Information",
            "Conclusion"
        ],
        "VQA": {
            "What is the centered title displayed in the h1 element?": "Modern Art Exhibition",
            "How many paragraphs are included in the 'Exhibition Overview' section?": "2",
            "How many artist names are listed under the 'Featured Artists' section?": "4",
            "How many bullet points describe unique art pieces in the 'Art Pieces' section?": "5",
            "What details are provided in the 'Visitor Information' section?": "A paragraph with timings and location details, containing at least two sentences",
            "Which header element labels the final summary section?": "Conclusion",
            "How many sections, using Markdown header syntax, are present in the document?": "6"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000709",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a cultural festival's schedule.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Cultural Festival Schedule\".\n- Present a subsection header using an <h2> element titled \"Event Overview\" followed by exactly 2 paragraphs, each with at least two complete sentences.\n- Add an <h2> header for a section labeled \"Highlights\" that is immediately followed by a bullet list of exactly 5 items, where each item describes a unique event happening during the festival.\n- Provide an <h2> header for a section titled \"Activities\" including a numbered list with exactly 4 items, each item containing a single sentence that briefly explains the activity.\n- Finish with an <h2> element for a \"Final Notes\" section that contains a single paragraph with at least two sentences summarizing the festival details.\n- Ensure that the Markdown document only uses text formatting and does not include any images, icons, or external assets.\n- The document must strictly follow a Markdown structure without any code blocks or embedded HTML code other than the specified heading elements.",
        "raw_output_metric": [
            "Cultural Festival Schedule",
            "Event Overview",
            "Highlights",
            "Activities",
            "Final Notes"
        ],
        "VQA": {
            "What is the text of the centered main title (<h1>) on the page?": "Cultural Festival Schedule",
            "How many paragraphs are present under the 'Event Overview' section (<h2>)?": "2",
            "Does each paragraph under the 'Event Overview' section contain at least two complete sentences?": "Yes",
            "How many bullet list items are shown immediately following the 'Highlights' section (<h2>)?": "5",
            "How many items are in the numbered list under the 'Activities' section (<h2>)?": "4",
            "What is the label of the final section that contains a summary paragraph?": "Final Notes",
            "Does the 'Final Notes' section include a paragraph with at least two sentences summarizing the festival details?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000710",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a Markdown document detailing a fictional travel itinerary for an adventurous vacation.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element containing the text “Wanderlust Journey.”\n- Add an <h2> element labeled “Overview” and include exactly 3 paragraphs immediately following it; each paragraph must comprise at least two sentences.\n- The first paragraph in the “Overview” section should introduce the vacation, the second should highlight planning strategies, and the third should address travel safety.\n- Insert an <h2> element titled “Destinations” followed by a bullet list that contains exactly 5 items, where each bullet specifies a uniquely named destination.\n- After listing the destinations, include an <h2> element for “Schedule” and add a numbered list with exactly 3 items, each item describing a distinct day’s itinerary and activities.\n- Conclude with an <h2> element titled “Conclusion” that is followed by a single paragraph summarizing the travel experience with at least two sentences.\n- Ensure that all paragraphs and list items are clearly structured and contain the required amount of content as specified.",
        "raw_output_metric": [
            "<h1>Wanderlust Journey</h1>",
            "<h2>Overview</h2>",
            "<h2>Destinations</h2>",
            "<h2>Schedule</h2>",
            "<h2>Conclusion</h2>"
        ],
        "VQA": {
            "What is the text of the centered <h1> title?": "Wanderlust Journey",
            "How many paragraphs immediately follow the 'Overview' <h2> element?": "3",
            "What is the content focus of the first paragraph in the 'Overview' section?": "Introducing the vacation",
            "What planning strategies are highlighted, and in which paragraph are they mentioned?": "The second paragraph in 'Overview' highlights planning strategies",
            "What is discussed in the third paragraph of the 'Overview' section?": "Travel safety",
            "How many bullet list items are present under the 'Destinations' <h2> element?": "5",
            "What is the section title for the bullet list that contains uniquely named destinations?": "Destinations",
            "How many items are shown in the numbered list under the 'Schedule' <h2> element?": "3",
            "What details do the numbered list items under 'Schedule' describe?": "A distinct day’s itinerary and activities",
            "How many paragraphs follow the 'Conclusion' <h2> element, and what is their content focus?": "1; summarizing the travel experience with at least two sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000711",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document presenting an event planning outline for a community gathering.\n\nFeature Requirements:\n- Use an <h1> element to create a centered title reading \"Community Gathering Plan\".\n- Immediately after the title, include a paragraph with a complete sentence specifying the event date and location.\n- Create an <h2> element labeled \"Agenda\" followed by an ordered list containing exactly 5 agenda items.\n- Add an <h2> element titled \"Speakers\" with a paragraph that introduces exactly 3 speakers by name and role.\n- Include an <h2> element titled \"Logistics\" with a single paragraph containing exactly 2 sentences that describe the setup and registration process.\n- Ensure every paragraph in the document consists of at least two complete sentences.\n- Include a final section titled \"Notes\" using an <h2> element that is followed by a bullet list of exactly 3 follow-up action items.",
        "raw_output_metric": [
            "Community Gathering Plan",
            "Agenda",
            "Speakers",
            "Logistics",
            "Notes",
            "registration process",
            "1.",
            "2.",
            "3.",
            "4.",
            "5."
        ],
        "VQA": {
            "What is the text of the centered title at the top of the document?": "Community Gathering Plan",
            "How many complete sentences are in the paragraph immediately following the title?": "At least 2 complete sentences",
            "What is the heading for the agenda section?": "Agenda",
            "How many agenda items are listed under the Agenda heading?": "5",
            "What is the heading for the speakers section?": "Speakers",
            "How many speakers are introduced in the speakers section?": "3",
            "What is the heading for the logistics section?": "Logistics",
            "How many sentences are used to describe the setup and registration process in the logistics paragraph?": "2 sentences",
            "What is the heading for the final section that lists follow-up actions?": "Notes",
            "How many follow-up action items are included in the bullet list under Notes?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000712",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a structured Markdown event announcement for a community workshop with a detailed schedule and clear sections.\n\nFeature Requirements:\n- Include a centered title using an h1 element with the text \"Community Workshop Schedule\".\n- Begin with a subheader titled \"Overview\" using an h2 element, followed by exactly 2 paragraphs where each paragraph contains at least 2 complete sentences.\n- Add a section called \"Session Timings\" using an h2 header, then insert an ordered list of exactly 3 sessions. Each session item must mention a start time and a session topic.\n- Create a section titled \"Speaker List\" using an h2 element. Under this header, include an unordered bullet list containing exactly 4 speaker names.\n- Conclude with a section labeled \"Closing Remarks\" using an h2 header, followed by a single paragraph that includes at least 3 sentences summarizing the event.\n- Ensure that all components use Markdown formatting and that no images, icons, or external assets are included.",
        "raw_output_metric": [
            "Community Workshop Schedule",
            "## Overview",
            "## Session Timings",
            "## Speaker List",
            "## Closing Remarks"
        ],
        "VQA": {
            "What is the centered main event title?": "Community Workshop Schedule",
            "Which Markdown element is used for the main title?": "h1",
            "What is the subheader title that starts the overview section?": "Overview",
            "How many paragraphs are present in the Overview section?": "2",
            "What is the heading title for the session timings section?": "Session Timings",
            "How many sessions are listed under the Session Timings section?": "3",
            "What details must each session item include?": "A start time and a session topic",
            "What is the heading title for the speaker list section?": "Speaker List",
            "How many speaker names are listed in the Speaker List section?": "4",
            "How many sentences does the Closing Remarks paragraph include at minimum?": "At least 3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000713",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that outlines a fictional historical event report.\n\nFeature Requirements:\n- Create a centered main title using an <h1> element with the text \"Historical Chronicles\".\n- Add a subsection titled \"Background\" using an <h2> element that is immediately followed by exactly 3 paragraphs, each containing at least three sentences.\n- Insert another subsection titled \"Event Timeline\" as an <h2> element, followed by a numbered list detailing exactly 5 key events.\n- Provide a subsection titled \"Analysis\" using an <h2> element with exactly 2 paragraphs discussing the implications of the event.\n- The \"Analysis\" paragraphs must each include at least two descriptive sentences.\n- Ensure that all sections are clearly separated by blank lines.\n- The output must not contain any images, icons, or external assets.\n- All lists and headings should be directly visible in the final Markdown output.",
        "raw_output_metric": [
            "<h1>Historical Chronicles</h1>",
            "<h2>Background</h2>",
            "<h2>Event Timeline</h2>",
            "1.",
            "2.",
            "3.",
            "4.",
            "5.",
            "<h2>Analysis</h2>"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the document?": "Historical Chronicles",
            "How many paragraphs immediately follow the 'Background' section?": "3",
            "What is the minimum number of sentences required in each 'Background' paragraph?": "3",
            "What type of list appears under the 'Event Timeline' section?": "Numbered list",
            "How many key events are detailed in the 'Event Timeline' section?": "5",
            "How many paragraphs are included in the 'Analysis' section?": "2",
            "What is the minimum number of descriptive sentences required in each 'Analysis' paragraph?": "2",
            "Are all sections clearly separated by blank lines in the document?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000714",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines an event invitation.\n\nFeature Requirements:\n- Begin with a centered <h1> header displaying the text 'Event Invitation'.\n- Include an <h2> header for a subsection titled 'Event Overview'.\n- Provide exactly 3 paragraphs under the 'Event Overview' section, each containing at least two complete sentences.\n- Include an <h2> header for a subsection titled 'Schedule' followed by a numbered list containing exactly 5 items, each item specifying a time and an associated activity.\n- Add an <h2> header for a section named 'Venue' and include a single paragraph of at least two sentences that describes the event location.\n- Include a final section with an <h2> header titled 'RSVP', containing a bullet list of exactly 3 contact methods.\n- Ensure that all text content adheres to a formal invitation tone.\n- Use plain text for output without any external styling, embedded images, or assets.\n- Make certain that each structural component (headers, paragraphs, and list items) is clearly visible and properly formatted in Markdown.",
        "raw_output_metric": [
            "Event Invitation",
            "Event Overview",
            "Schedule",
            "Venue",
            "RSVP"
        ],
        "VQA": {
            "What is the main header text that appears at the top of the document?": "Event Invitation (centered as an h1 header)",
            "Which section headers (h2) are included in the document?": "Event Overview, Schedule, Venue, RSVP",
            "How many paragraphs are present under the 'Event Overview' section?": "3",
            "What is the minimum number of complete sentences required in each 'Event Overview' paragraph?": "2 sentences",
            "How many items should the numbered list under the 'Schedule' section contain?": "5",
            "What details does each item in the 'Schedule' list include?": "A time and an associated activity",
            "How many bullet points are listed under the 'RSVP' section?": "3",
            "Is any external styling, such as images or embedded assets, used in this Markdown output?": "No"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000715",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nTransform the provided text into a comprehensive Markdown travel itinerary report for a week-long European journey.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element with the text \"European Journey\".\n- Add a subsection header using an <h2> element titled \"Trip Overview\".\n- Include exactly 2 paragraphs in the \"Trip Overview\" section, each containing at least two sentences describing the overall trip.\n- Introduce an <h2> element for a subsection titled \"Daily Itinerary\" followed by an ordered list.\n- The ordered list must contain exactly 5 items, each detailing one day of activities.\n- Insert an additional subsection titled \"Travel Advice\" using an <h2> element followed by a bullet list.\n- The bullet list should consist of exactly 3 items offering travel tips.\n- All content must be structured in clear and specified Markdown format without using code blocks or any external assets.",
        "raw_output_metric": [
            "European Journey",
            "Trip Overview",
            "Daily Itinerary",
            "Travel Advice"
        ],
        "VQA": {
            "What is the text of the centered main title?": "European Journey",
            "How many subsection headers (<h2> elements) are present in the document?": "3",
            "What is the title of the first <h2> subsection?": "Trip Overview",
            "How many paragraphs are included under the Trip Overview section?": "2",
            "What is the minimum number of sentences each paragraph in the Trip Overview section must contain?": "2",
            "Under the Daily Itinerary section, how many ordered list items are expected?": "5",
            "What is the title of the section that contains the bullet list?": "Travel Advice",
            "How many bullet points should be present in the Travel Advice section?": "3",
            "Which types of lists are used in the Daily Itinerary and Travel Advice sections respectively?": "Ordered list and bullet list"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000716",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that details a fictional art exhibition.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Art Exhibition Highlights\".\n- Create an \"Overview\" section with an <h2> header followed by exactly 2 paragraphs; each paragraph must contain at least 2 sentences.\n- Add a \"Featured Artists\" section with an <h2> element that precedes an ordered list of exactly 3 artist names.\n- Insert a \"Gallery\" section using an <h2> header and a bullet list containing exactly 5 unique items, each describing a different featured artwork.\n- Provide a \"Schedule\" section with an <h2> header that introduces a table-like structure using Markdown formatting to list 3 time slots with corresponding events.\n- Include a \"Closing Remarks\" section with an <h2> header containing exactly 1 paragraph that sums up the event in at least 3 sentences.",
        "raw_output_metric": [
            "Art Exhibition Highlights",
            "Overview",
            "Featured Artists",
            "Gallery",
            "Schedule",
            "Closing Remarks"
        ],
        "VQA": {
            "What is the centered title text displayed in the <h1> element?": "Art Exhibition Highlights",
            "How many paragraphs are present in the Overview section?": "2",
            "Does each paragraph in the Overview section contain at least 2 sentences?": "Yes",
            "How many artists are listed in the ordered list under the Featured Artists section?": "3",
            "How many unique items are in the bullet list of the Gallery section?": "5",
            "How many time slots are listed in the Schedule section?": "3",
            "How many paragraphs are contained in the Closing Remarks section?": "1"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000717",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a structured Markdown document that analyzes a short poem.\n\nFeature Requirements:\n- Begin the document with a centered main title using an <h1> element displaying the text \"Poem Analysis\".\n- Include an \"Overview\" subsection with an <h2> element containing exactly two paragraphs that summarize the poem in at least two sentences each.\n- Add a \"Themes\" section using an <h2> element followed by a bullet list with exactly three items, each item naming a distinct theme found in the poem.\n- Create a \"Stanza Breakdown\" subsection with an <h2> element that is followed by exactly two sub-sections; each sub-section should use an <h3> element for the stanza title and include one paragraph with at least two sentences analyzing that stanza.\n- Conclude with a \"Final Thoughts\" subsection using an <h2> element, accompanied by one paragraph that offers closing remarks in at least two complete sentences.\n- Ensure that each paragraph within the document is composed of a minimum of two sentences.",
        "raw_output_metric": [
            "<h1>",
            "Poem Analysis",
            "<h2>",
            "Overview",
            "<h2>",
            "Themes",
            "<h2>",
            "Stanza Breakdown",
            "<h3>",
            "<h2>",
            "Final Thoughts"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Poem Analysis",
            "How is the main title styled in the document?": "It is centered and presented using a large header format.",
            "How many paragraphs are present in the Overview section?": "2",
            "How many items are listed in the bullet list under the Themes section?": "3",
            "What is the title of the section that analyzes individual stanzas?": "Stanza Breakdown",
            "How many stanza sub-sections are present under the Stanza Breakdown section?": "2",
            "What type of element is used for the titles of the stanza sub-sections?": "They are presented as smaller headers.",
            "How many paragraphs are found in the Final Thoughts section?": "1"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000718",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a markdown document that outlines a weekend city escape itinerary.\n\nFeature Requirements:\n- Begin with a centered h1 element titled \"Weekend City Getaway\".\n- Include an h2 header \"Overview\" followed by exactly 2 paragraphs describing the purpose and highlights of the trip.\n- Add an h2 header \"Itinerary\" with a numbered list of exactly 3 items, each item representing one day of the weekend.\n- For each day in the itinerary, include a sub-bullet list of exactly 3 activities labeled \"Morning\", \"Afternoon\", and \"Evening\".\n- Insert an h2 header \"Logistics\" and follow it with a single paragraph detailing transportation and accommodation, ensuring the paragraph has at least two sentences.\n- End with an h2 header \"Reminders\" accompanied by a bullet list of exactly 4 tips or reminders.\n- All paragraphs must contain at least two sentences.\n- The document should be fully formatted in Markdown without any code blocks, images, or external assets.",
        "raw_output_metric": [
            "Weekend City Getaway",
            "Overview",
            "Itinerary",
            "Logistics",
            "Reminders",
            "Morning",
            "Afternoon",
            "Evening"
        ],
        "VQA": {
            "What is the title of the centered h1 element at the top of the document?": "Weekend City Getaway",
            "How many paragraphs are included under the 'Overview' header?": "2",
            "How many items are in the numbered itinerary list for the weekend days?": "3",
            "What sub-bullet activity labels are used for each day in the itinerary?": "Morning, Afternoon, and Evening",
            "How many sentences minimum must the Logistics paragraph contain?": "At least 2",
            "How many tips are in the bullet list under the 'Reminders' header?": "4",
            "How many h2 headers are present in the document?": "4"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000719",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document representing a local art exhibition schedule.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Local Art Exhibition Schedule'.\n- Add a subtitle using an <h2> element with the text 'Event Overview', followed by a paragraph that explains the exhibition in exactly three sentences.\n- Create exactly 3 sections for different exhibition events; each section must start with an <h3> element displaying the event name.\n- Under each event section, provide a bullet list containing exactly 3 items that detail the event's date, time, and venue.\n- Separate each event section with a horizontal rule.\n- Conclude with a final section titled 'Visitor Information' using an <h2> element, which is followed by a single paragraph containing exactly two sentences explaining ticket purchase details.",
        "raw_output_metric": [
            "Local Art Exhibition Schedule",
            "Event Overview",
            "Visitor Information",
            "<h1>",
            "<h2>",
            "<h3>",
            "date",
            "time",
            "venue",
            "---"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Local Art Exhibition Schedule",
            "Which HTML element is used for the main title?": "h1",
            "How many sentences are in the overview paragraph following the 'Event Overview' subtitle?": "3",
            "How many exhibition event sections are included in the schedule?": "3",
            "How many bullet points are listed under each event section (detailing date, time, and venue)?": "3",
            "Which HTML tag is used for the headers of the exhibition event sections?": "h3",
            "What is the title of the final section that provides visitor details?": "Visitor Information",
            "How many sentences are in the paragraph under the 'Visitor Information' section?": "2",
            "What visual element is used to separate each event section?": "Horizontal rule"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000720",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a detailed travel itinerary document in Markdown format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Travel Itinerary'.\n- Incorporate an <h2> element titled 'Overview' featuring exactly 1 paragraph containing at least 3 complete sentences.\n- Under the 'Overview' section, include an ordered list of exactly 3 travel destinations.\n- Create an <h2> element titled 'Daily Plan' followed by two <h3> subheaders labeled 'Morning' and 'Evening'.\n- Under each subheader in the 'Daily Plan' section, supply exactly 1 paragraph with a minimum of 2 complete sentences.\n- Add an <h2> element titled 'Budget' that is followed by a table consisting of 2 columns ('Item' and 'Cost') and exactly 3 rows of data.\n- Finish the document with an <h2> element titled 'Notes' which includes exactly 1 paragraph containing at least 2 complete sentences.",
        "raw_output_metric": [
            "<h1>Travel Itinerary</h1>",
            "<h2>Overview</h2>",
            "1.",
            "2.",
            "3.",
            "<h2>Daily Plan</h2>",
            "<h3>Morning</h3>",
            "<h3>Evening</h3>",
            "<h2>Budget</h2>",
            "Item",
            "Cost",
            "<h2>Notes</h2>"
        ],
        "VQA": {
            "What is the centered main title in the document?": "Travel Itinerary",
            "How many complete sentences are required in the paragraph under the 'Overview' section?": "At least 3",
            "How many items are present in the ordered list under the 'Overview' section?": "3",
            "How many subheaders are there under the 'Daily Plan' section and what are their labels?": "2 (Morning and Evening)",
            "How many complete sentences must each paragraph under the 'Daily Plan' subheaders have?": "At least 2",
            "What are the column headers of the 'Budget' table?": "Item and Cost",
            "How many rows of data does the 'Budget' table contain?": "3",
            "How many paragraphs are present in the 'Notes' section?": "1",
            "What is the minimum number of complete sentences required in the 'Notes' section paragraph?": "At least 2"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000721",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a structured Markdown document formatted as an event synopsis report.\n\nFeature Requirements:\n- Begin with a centered title enclosed in <h1> tags reading \"Event Overview\".\n- Create a subsection titled \"Event Details\" using an <h2> tag.\n- Under the \"Event Details\" section, include exactly 3 paragraphs describing the timeline of the event; each paragraph must contain at least two sentences.\n- Add a subsection titled \"Highlights\" using an <h2> tag followed by a bullet list of exactly 5 unique event highlights.\n- Insert a subsection titled \"Schedule\" using an <h2> tag containing an ordered list of exactly 4 timestamps.\n- End the document with a subsection titled \"Closing Remarks\" using an <h2> tag that includes a single paragraph of at least three sentences.\n- Ensure that every header, paragraph, and list is distinctly formatted and clearly visible in the output.",
        "raw_output_metric": [
            "<h1>Event Overview</h1>",
            "<h2>Event Details</h2>",
            "<h2>Highlights</h2>",
            "<h2>Schedule</h2>",
            "<h2>Closing Remarks</h2>"
        ],
        "VQA": {
            "What is the centered title text at the top of the document?": "Event Overview",
            "How many paragraphs are under the 'Event Details' section?": "3",
            "What is the minimum number of sentences required in each 'Event Details' paragraph?": "2",
            "How many unique highlights are listed under the 'Highlights' section?": "5",
            "How many timestamps are included in the ordered list in the 'Schedule' section?": "4",
            "What is the minimum number of sentences in the 'Closing Remarks' paragraph?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000722",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that outlines a weekend art festival schedule.\n\nFeature Requirements:\n- Begin with an <h1> element displaying the centered title \"Art Festival Weekend Schedule\".\n- Include an <h2> element titled \"Event Overview\" immediately after the title, followed by a paragraph of exactly 3 sentences that introduces the festival.\n- Add an <h2> element titled \"Day 1 Schedule\" followed by a numbered list containing exactly 5 items, where each item names an event and specifies its starting time.\n- Insert another <h2> element titled \"Day 2 Schedule\" with a bullet list consisting of exactly 4 items, each describing the event name and its scheduled time.\n- Create an <h2> element titled \"Special Activities\" that is followed by 2 separate paragraphs; each paragraph must contain at least 2 sentences outlining one unique highlight of the festival.\n- Conclude with an <h2> element titled \"Feedback\" followed by a single paragraph that invites visitors to submit their opinions about the festival.",
        "raw_output_metric": [
            "Art Festival Weekend Schedule",
            "Event Overview",
            "Day 1 Schedule",
            "Day 2 Schedule",
            "Special Activities",
            "Feedback"
        ],
        "VQA": {
            "What is the text in the centered h1 element at the top of the page?": "Art Festival Weekend Schedule",
            "What is the h2 title that appears immediately after the title?": "Event Overview",
            "How many sentences are in the paragraph under 'Event Overview'?": "3",
            "What is the title of the h2 section that is followed by a numbered list?": "Day 1 Schedule",
            "How many items does the numbered list under 'Day 1 Schedule' contain?": "5",
            "What is the title of the h2 section that contains a bullet list?": "Day 2 Schedule",
            "How many bullet list items are shown under 'Day 2 Schedule'?": "4",
            "How many paragraphs are under the 'Special Activities' section?": "2",
            "What does the paragraph under 'Feedback' invite visitors to do?": "Submit their opinions about the festival"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000723",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nTransform the given text into a formatted Markdown document that outlines an upcoming community event.\n\nFeature Requirements:\n- Include a centered <h1> title with the text \"Community Event Overview\".\n- Create a subsection titled \"Event Summary\" using an <h2> element, followed by exactly 2 paragraphs that each contain at least two complete sentences.\n- Add a subsection titled \"Agenda\" with an <h2> element that is immediately followed by a bullet list.\n- The bullet list must contain exactly 5 items, each detailing a distinct part of the event schedule.\n- Insert another subsection titled \"Location Details\" using an <h2> element, accompanied by a single paragraph providing the event's venue description with at least one sentence.\n- Conclude the document with a subsection titled \"Contact Information\" using an <h2> element, and include a bullet list with exactly 3 items to specify contact methods.\n- Ensure that all structural elements are properly sequenced and visibly formatted in Markdown.",
        "raw_output_metric": [
            "Community Event Overview",
            "Event Summary",
            "Agenda",
            "Location Details",
            "Contact Information"
        ],
        "VQA": {
            "What is the centered title text at the top of the document?": "Community Event Overview",
            "What heading level is used for the top title?": "h1",
            "How many paragraphs are under the 'Event Summary' section?": "2",
            "What content requirement is specified for each paragraph in the 'Event Summary' section?": "Each paragraph must contain at least two complete sentences.",
            "How many items are in the bullet list under the 'Agenda' section?": "5",
            "How many paragraphs are provided in the 'Location Details' section?": "1",
            "How many items are included in the 'Contact Information' bullet list?": "3",
            "What are the names of the four main sections (excluding the title) in the document?": "Event Summary, Agenda, Location Details, Contact Information"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000724",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a structured weekly update report for a cross-team initiative focused on product development.\n\nFeature Requirements:\n- Use an <h1> element for the main title with the text 'Weekly Product Update'.\n- Include a subsection titled 'Project Overview' using an <h2> element, followed by exactly 2 paragraphs, each containing at least two sentences.\n- Add a section named 'Task Breakdown' with an <h2> element and a numbered list that contains exactly 3 items, each item explaining a specific task allocated to a team.\n- Create a subsection titled 'Milestones Achieved' using an <h2> element, immediately followed by a bullet list of exactly 4 items summarizing completed milestones.\n- Introduce a final section titled 'Upcoming Actions' with an <h2> element and a single paragraph that outlines the next steps in at least two sentences.",
        "raw_output_metric": [
            "Weekly Product Update",
            "Project Overview",
            "Task Breakdown",
            "Milestones Achieved",
            "Upcoming Actions"
        ],
        "VQA": {
            "What is the text of the main title displayed in the h1 element?": "Weekly Product Update",
            "Which header level is used for the 'Project Overview' section?": "h2",
            "How many paragraphs are present under the 'Project Overview' section?": "2",
            "How many items are in the numbered list under the 'Task Breakdown' section?": "3",
            "Which header level is used for the 'Milestones Achieved' section and how many bullet list items are displayed immediately after?": "h2 and 4 bullet points",
            "What header level is used for the 'Upcoming Actions' section?": "h2",
            "How many sentences at a minimum does the paragraph in the 'Upcoming Actions' section contain?": "At least 2"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000725",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown itinerary for a weekend trip that outlines a detailed schedule and travel recommendations.\n\nFeature Requirements:\n- Add a centered title using an h1 element with the text \"Weekend Getaway\".\n- Begin with a brief introduction section using an h2 element titled \"Overview\" containing exactly 1 paragraph with at least two sentences.\n- Create a \"Daily Schedule\" section using an h2 element that includes 3 bullet lists, one for each day (Friday, Saturday, Sunday).\n- Each bullet list should contain exactly 4 items, listing specific activities for that day.\n- Include a section named \"Travel Tips\" with an h2 element followed by a paragraph containing at least two sentences with practical advice.\n- Add a concluding section using an h2 element titled \"Final Thoughts\" that contains 1 paragraph with at least two sentences.\n- Ensure that the document is strictly structured in Markdown format without any code blocks, external links, or images.",
        "raw_output_metric": [
            "# Weekend Getaway",
            "## Overview",
            "## Daily Schedule",
            "Friday",
            "Saturday",
            "Sunday",
            "## Travel Tips",
            "## Final Thoughts"
        ],
        "VQA": {
            "What is the centered h1 title at the top of the itinerary?": "Weekend Getaway",
            "What is the title of the first section that provides an introduction?": "Overview",
            "How many sentences are expected in the 'Overview' section's paragraph?": "At least two sentences",
            "How many bullet lists are included under the 'Daily Schedule' section?": "Three",
            "How many items does each bullet list in the 'Daily Schedule' contain?": "Four",
            "What days are covered in the 'Daily Schedule' section?": "Friday, Saturday, and Sunday",
            "What is the title of the section that offers travel advice?": "Travel Tips",
            "Does the 'Travel Tips' section contain a paragraph with multiple sentences?": "Yes, at least two sentences",
            "What is the title of the final section that provides a conclusion?": "Final Thoughts",
            "Does the 'Final Thoughts' section include exactly one paragraph?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000726",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that serves as a detailed travel itinerary for a two-day city tour.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"City Tour Itinerary\" at the top.\n- Create an <h2> element titled \"Day 1: Arrival and Exploration\" followed by exactly 2 paragraphs, each containing at least two sentences.\n- Under the \"Day 1: Arrival and Exploration\" section, add an unordered bullet list containing exactly 3 items describing specific activities.\n- Create another <h2> element titled \"Day 2: Cultural Tour\" followed by exactly 1 paragraph with at least three sentences.\n- Under the \"Day 2: Cultural Tour\" section, include an unordered bullet list with exactly 4 items, each detailing a different cultural highlight.\n- Conclude the document with an <h2> element titled \"Additional Notes\" that includes a single paragraph with a minimum of two sentences describing further instructions for the journey.\n- Ensure that no code blocks or triple backticks are used anywhere in the output.",
        "raw_output_metric": [
            "City Tour Itinerary",
            "Day 1: Arrival and Exploration",
            "Day 2: Cultural Tour",
            "Additional Notes"
        ],
        "VQA": {
            "What is the centered h1 title text?": "City Tour Itinerary",
            "What is the title of the first h2 section?": "Day 1: Arrival and Exploration",
            "How many paragraphs are under the 'Day 1: Arrival and Exploration' section?": "2",
            "What is the minimum number of sentences required in each paragraph under Day 1?": "2",
            "How many bullet list items are present in the Day 1 section?": "3",
            "What is the title of the second h2 section?": "Day 2: Cultural Tour",
            "How many sentences should the paragraph under the 'Day 2: Cultural Tour' section contain at a minimum?": "3",
            "How many bullet list items are present in the Day 2 section?": "4",
            "What is the title of the final h2 section?": "Additional Notes",
            "How many paragraphs are under the 'Additional Notes' section?": "1"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000727",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a plan for a community art exhibition.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text 'Community Art Exhibition'.\n- Present an <h2> section labeled 'Overview' followed by exactly 2 paragraphs; each paragraph must contain at least two complete sentences.\n- Add another <h2> section called 'Featured Artists' with a bullet list of exactly 5 items, where each item specifies a distinct artist's name and art style.\n- Insert an <h2> section titled 'Schedule' that contains a table with exactly three columns labeled 'Event', 'Date', and 'Time', and exactly 3 rows corresponding to different events.\n- Conclude with an <h2> section named 'Contact Information' featuring a single paragraph that includes details for at least 2 contact methods (such as email and phone).\n- Ensure that all elements are formatted strictly using Markdown syntax and visible as plain text.",
        "raw_output_metric": [
            "<h1>Community Art Exhibition</h1>",
            "Overview",
            "Featured Artists",
            "Schedule",
            "Event",
            "Date",
            "Time",
            "Contact Information",
            "email",
            "phone"
        ],
        "VQA": {
            "What is the text of the centered main title?": "Community Art Exhibition",
            "Which heading level is used for the main title?": "h1",
            "How many paragraphs are included in the Overview section?": "2",
            "How many bullet points are displayed in the Featured Artists section?": "5",
            "What are the column labels in the Schedule table?": "Event, Date, Time",
            "How many event rows are present in the Schedule table (excluding the header)?": "3",
            "What does the Contact Information section include?": "A paragraph with at least 2 contact methods (e.g., email and phone)"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000728",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that displays a fictional art exhibition announcement with a clear structure.\n\nFeature Requirements:\n- Start with a centered level-one heading titled \"Art Exhibition 2023\".\n- Create an \"Overview\" section using a level-two heading, followed by a paragraph containing at least three sentences summarizing the event’s theme and date.\n- Include a \"Featured Artists\" section with a level-two heading, followed by an unordered list with exactly 5 items, each naming a different artist.\n- Add a \"Schedule\" section using a level-two heading that is divided into exactly 2 subsections titled \"Day 1\" and \"Day 2\" using level-three headings.\n- Under each day’s subsection, include a numbered list with exactly 3 entries detailing the session times and activities.\n- Conclude with a \"Visitor Information\" section as a level-two heading, including a paragraph of at least three sentences that outlines ticket prices, location, and entry guidelines.",
        "raw_output_metric": [
            "Art Exhibition 2023",
            "## Overview",
            "## Featured Artists",
            "## Schedule",
            "### Day 1",
            "### Day 2",
            "## Visitor Information"
        ],
        "VQA": {
            "What is the text content of the centered level-one heading at the top?": "Art Exhibition 2023",
            "Which level of heading is used for the 'Overview' section?": "Level-two heading",
            "How many sentences does the 'Overview' paragraph contain at minimum?": "Three sentences",
            "How many items are listed in the unordered list under 'Featured Artists'?": "5",
            "What heading titles are used in the 'Schedule' section subsections?": "Day 1 and Day 2",
            "How many numbered entries are there under each day in the 'Schedule' section?": "3",
            "Which section provides information about ticket prices, location, and entry guidelines?": "Visitor Information",
            "What is the minimum number of sentences present in the 'Visitor Information' paragraph?": "Three sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000729",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nTransform the provided text into a formatted Markdown document presenting an event overview.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text ‘Event Overview’.\n- Add a subsection header using an <h2> element titled ‘Background’ followed by exactly 2 paragraphs, each containing at least two sentences.\n- Include a subsection header using an <h2> element titled ‘Agenda’ followed by a bullet list.\n- The bullet list must contain exactly 5 items, each detailing a specific activity or time slot.\n- Add another subsection header using an <h2> element labeled ‘Speakers’ followed by a numbered list.\n- The numbered list should include exactly 3 speakers, with each item providing the speaker’s name and their role.\n- Conclude with a subsection header using an <h2> element called ‘Closing Remarks’ followed by a single paragraph comprising at least three sentences.",
        "raw_output_metric": [
            "Event Overview",
            "Background",
            "Agenda",
            "Speakers",
            "Closing Remarks"
        ],
        "VQA": {
            "What is the text in the centered title rendered as an h1?": "Event Overview",
            "How many paragraphs are shown under the Background section?": "2",
            "Does each Background paragraph contain at least two sentences?": "Yes",
            "How many bullet list items are displayed in the Agenda section?": "5",
            "How many speakers are listed in the numbered Speakers section?": "3",
            "Does the Closing Remarks section contain exactly one paragraph?": "Yes",
            "What is the minimum number of sentences required in the Closing Remarks paragraph?": "3",
            "Name all the section headers used in the document.": "Event Overview, Background, Agenda, Speakers, Closing Remarks"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000730",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document representing a structured event agenda.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element that exactly reads 'Event Agenda'.\n- Immediately after, include a <h2> element titled 'Schedule Overview'.\n- Under the 'Schedule Overview', provide exactly 3 paragraphs summarizing the day's schedule; each paragraph must contain at least 2 sentences.\n- Follow with a <h2> element for a section titled 'Speakers'.\n- Directly below the 'Speakers' header, include a numbered list with exactly 4 items; each item should be a single sentence describing an individual speaker.\n- Add another <h2> element labeled 'Notes' after the speakers section.\n- Under the 'Notes' header, create a bullet list with exactly 3 items, where each bullet point offers a unique piece of additional information about the event.\n- Ensure all elements are clearly structured and no nested lists or external asset references are included.\n- Do not use any code blocks or triple backticks in the output.",
        "raw_output_metric": [
            "<h1>Event Agenda</h1>",
            "<h2>Schedule Overview</h2>",
            "<h2>Speakers</h2>",
            "<h2>Notes</h2>",
            "1.",
            "2.",
            "3.",
            "4.",
            "-"
        ],
        "VQA": {
            "What is the text content of the centered title at the top?": "Event Agenda",
            "Which header directly follows the main 'Event Agenda' title?": "Schedule Overview",
            "How many paragraphs summarizing the day's schedule are present?": "3",
            "What is the minimum number of sentences each paragraph under 'Schedule Overview' must contain?": "2",
            "What is the title of the section that introduces the list of speakers?": "Speakers",
            "How many single-sentence items are in the numbered speakers list?": "4",
            "What is the header title for the section presenting the bullet list with additional event information?": "Notes",
            "How many bullet points are included under the 'Notes' section?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000731",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted markdown document for planning a cultural festival event.\n\nFeature Requirements:\n- Use an <h1> element at the top, centered, with the text ‘Cultural Festival Plan’.\n- Create an <h2> section titled ‘Event Overview’ that is followed by exactly 2 paragraphs summarizing the festival.\n- Add an <h2> section called ‘Schedules’ with a bullet list containing exactly 3 detailed time slots for performances.\n- Under the ‘Schedules’ section, each bullet list item must include a time range and activity description, all in one sentence.\n- Include an <h2> section labeled ‘Performers’ that lists exactly 4 performers in a numbered list.\n- Provide an <h2> section titled ‘Logistics’ followed by a single paragraph detailing venue, transportation, and accommodation information with at least two sentences.\n- End the document with a final paragraph that starts with ‘Additional Notes:’ and contains exactly 2 sentences explaining extra event details.",
        "raw_output_metric": [
            "Cultural Festival Plan",
            "Event Overview",
            "Schedules",
            "Performers",
            "Logistics",
            "Additional Notes:"
        ],
        "VQA": {
            "What is the text and style of the top heading?": "It is a centered h1 element with the text 'Cultural Festival Plan'.",
            "How many paragraphs are present under the 'Event Overview' section?": "2",
            "How many bullet points are shown in the 'Schedules' section?": "3",
            "Do each of the bullet points under 'Schedules' include a time range and an activity description in one sentence?": "Yes",
            "How many performers are listed in the 'Performers' section?": "4",
            "Does the 'Logistics' section contain a single paragraph with at least two sentences detailing venue, transportation, and accommodation?": "Yes",
            "What does the final paragraph start with and how many sentences does it contain?": "It starts with 'Additional Notes:' and contains 2 sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000732",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a Markdown guide outlining urban gardening techniques in a step-by-step format.\n\nFeature Requirements:\n- Start with a centered title using an <h1> element with the text 'Urban Gardening Guide'.\n- Create a section titled 'Getting Started' using an <h2> element that includes exactly 2 paragraphs, each containing at least 3 sentences.\n- Provide a subsection named 'Materials Required' with an <h2> element that is immediately followed by an ordered list.\n- The ordered list must have exactly 5 items, each item describing a specific tool or material needed for urban gardening.\n- Add another section titled 'Step-by-Step Process' using an <h2> element, followed by exactly 3 numbered steps in sequence.\n- Each step in the process should be detailed in a paragraph that consists of at least 2 descriptive sentences.\n- Conclude with a section titled 'Maintenance Tips' using an <h2> element that contains a bullet list of exactly 3 items, each offering a specific tip for garden upkeep.\n- Ensure that all paragraphs are written in plain text without using any code blocks or triple backticks.",
        "raw_output_metric": [],
        "VQA": {
            "What is the text of the centered main title?": "Urban Gardening Guide",
            "Which HTML tag is used to display the main title?": "h1",
            "How many paragraphs are included under the 'Getting Started' section?": "2",
            "What is the minimum number of sentences required in each 'Getting Started' paragraph?": "3",
            "What is the title of the subsection that immediately precedes an ordered list?": "Materials Required",
            "How many items should the ordered list under 'Materials Required' have?": "5",
            "How many numbered steps are present in the 'Step-by-Step Process' section?": "3",
            "How many bullet points are included in the 'Maintenance Tips' section?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000733",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document describing a fictional art gallery exhibition announcement.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Art Gallery Exhibition\".\n- Insert an <h2> element titled \"Exhibition Overview\" immediately after the title.\n- Include a paragraph under \"Exhibition Overview\" that contains at least 3 sentences summarizing the theme and purpose of the exhibition.\n- Add an <h2> header titled \"Featured Artists\" followed by a bullet list.\n- The bullet list must contain exactly 5 items, each representing a unique artist's name with at least two words.\n- Incorporate another <h2> header titled \"Event Schedule\" paired with exactly 3 paragraphs, where each paragraph details a different part of the event timeline.\n- Conclude the document with an <h2> header named \"Location & Contact\" containing a single paragraph that specifies venue details and contact information.\n- Ensure every paragraph in the document is composed of a minimum of two sentences.",
        "raw_output_metric": [
            "Art Gallery Exhibition",
            "Exhibition Overview",
            "Featured Artists",
            "Event Schedule",
            "Location & Contact"
        ],
        "VQA": {
            "What is the centered title displayed using the <h1> element?": "Art Gallery Exhibition",
            "Which header immediately follows the title?": "Exhibition Overview",
            "How many sentences does the paragraph under 'Exhibition Overview' contain at minimum?": "3 sentences",
            "What is the header for the section that lists artist names?": "Featured Artists",
            "How many bullet points are in the 'Featured Artists' list?": "5",
            "What is the naming criterion for each artist in the bullet list?": "Each name contains at least two words",
            "How many paragraphs are provided under the 'Event Schedule' header?": "3",
            "What details are provided in the final 'Location & Contact' section?": "Venue details and contact information"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000734",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a travel itinerary document in Markdown format outlining a detailed weekend seaside getaway.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element containing the text ‘Weekend Seaside Getaway’.\n- Create an <h2> element for a section titled ‘Overview’ that includes exactly 2 paragraphs, each containing at least three sentences.\n- Add an <h2> element for a section named ‘Itinerary Details’, followed by a numbered list of exactly 5 items where each item describes a planned activity along with a specific time.\n- Incorporate an <h2> element for a section titled ‘Accommodations’ that is immediately followed by a table consisting of exactly 2 columns and 3 rows detailing the hotel name and its address.\n- Insert a concluding section using an <h2> element titled ‘Notes’, containing one paragraph with at least two sentences summarizing local customs and safety tips.\n- Ensure every element follows the specified header and content structure in Markdown.",
        "raw_output_metric": [
            "Weekend Seaside Getaway",
            "Overview",
            "Itinerary Details",
            "Accommodations",
            "Notes",
            "Hotel Name",
            "Address",
            "1.",
            "2.",
            "3.",
            "4.",
            "5."
        ],
        "VQA": {
            "What is the centered title displayed at the top of the document?": "Weekend Seaside Getaway",
            "How many paragraphs are present in the 'Overview' section?": "2",
            "Does each paragraph in the 'Overview' section contain at least three sentences?": "Yes",
            "How many items are in the numbered list under 'Itinerary Details'?": "5",
            "What details does each itinerary list item include?": "A planned activity along with its specific time",
            "How many columns and rows are in the table under the 'Accommodations' section?": "2 columns and 3 rows",
            "What type of information is detailed in the 'Accommodations' table?": "The hotel name and its address",
            "What topics are summarized in the paragraph under the 'Notes' section?": "Local customs and safety tips"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000735",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that details a weekend getaway travel itinerary.\n\nFeature Requirements:\n- Use an <h1> element at the top displaying the text \"Weekend Getaway Itinerary\".\n- Create a section titled \"Overview\" using an <h2> element followed by exactly 3 paragraphs summarizing the trip plans and travel goals.\n- Include a subsection titled \"Schedule\" using an <h2> element followed by a numbered list of exactly 5 steps detailing daily activities.\n- Add a section titled \"Dining Options\" using an <h2> element with a bullet list of exactly 3 items, each specifying a restaurant and its type of cuisine.\n- Present a \"Packing List\" subsection using an <h2> element followed by a bullet list of exactly 4 essential items.\n- Incorporate a final section titled \"Additional Notes\" using an <h2> element containing a single paragraph that comprises at least two sentences.\n- Ensure that every paragraph in the output consists of at least two sentences.",
        "raw_output_metric": [
            "Weekend Getaway Itinerary",
            "Overview",
            "Schedule",
            "Dining Options",
            "Packing List",
            "Additional Notes"
        ],
        "VQA": {
            "What is the text of the main header (<h1>) at the top of the document?": "Weekend Getaway Itinerary",
            "How many paragraphs are in the Overview section?": "3",
            "How many numbered steps are listed in the Schedule section?": "5",
            "How many dining options are specified in the Dining Options section?": "3",
            "How many items are present in the Packing List?": "4",
            "Does the Additional Notes section contain exactly one paragraph with at least two sentences?": "Yes",
            "Do all paragraphs in the document have at least two sentences?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000736",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nConvert the provided product review text into a formatted Markdown document with a structured product evaluation layout.\n\nFeature Requirements:\n- Use a centered main heading (<h1>) with the text \"Product Evaluation\".\n- Add a section header (<h2>) labeled \"Overview\" that is followed by exactly 2 paragraphs, each containing at least two complete sentences.\n- Create a section header (<h2>) titled \"Specifications\" and include a bullet list below it with exactly 4 items, where each item specifies one distinct feature of the product.\n- Introduce a section header (<h2>) called \"Performance\" with exactly 3 paragraphs immediately following it, each paragraph starting with a clear statement comparing a positive aspect against a negative one.\n- Append a section header (<h2>) named \"Final Thoughts\" that includes a single paragraph composed of at least three sentences summarizing the overall impressions.\n- Ensure that all paragraphs have proper punctuation and maintain clear sentence structure.",
        "raw_output_metric": [
            "Product Evaluation",
            "Overview",
            "Specifications",
            "Performance",
            "Final Thoughts"
        ],
        "VQA": {
            "What is the main heading text displayed at the top center?": "Product Evaluation",
            "How many paragraphs follow the 'Overview' header?": "2",
            "Does each 'Overview' paragraph include at least two complete sentences?": "Yes",
            "How many items are there in the bullet list under the 'Specifications' section?": "4",
            "How many paragraphs are present in the 'Performance' section?": "3",
            "Does each paragraph in the 'Performance' section start by comparing a positive aspect to a negative one?": "Yes",
            "What is the label of the section summarizing the overall impressions?": "Final Thoughts",
            "What is the minimum number of sentences required in the 'Final Thoughts' paragraph?": "3"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000737",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a formatted Markdown document that serves as a project status update report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Project Status Update\".\n- Insert an <h2> element titled \"Team Overview\" followed by a bullet list that exactly names 5 team members.\n- Add an <h2> element for a section labeled \"Current Milestones\" containing exactly 3 numbered items, each describing a milestone.\n- Include an <h2> element titled \"Progress Details\" followed by 2 paragraphs, each with a minimum of two sentences, detailing the project's progress.\n- Create an <h2> element labeled \"Upcoming Tasks\" that is followed by a bullet list of exactly 4 distinct upcoming task items.\n- Conclude with an <h2> element titled \"Remarks\" featuring a single paragraph summarizing final observations.\n- Ensure that all content is clearly visible and structured as specified without using any code snippets or external assets.",
        "raw_output_metric": [
            "<h1>Project Status Update</h1>",
            "<h2>Team Overview</h2>",
            "<h2>Current Milestones</h2>",
            "<h2>Progress Details</h2>",
            "<h2>Upcoming Tasks</h2>",
            "<h2>Remarks</h2>",
            "1.",
            "2.",
            "3."
        ],
        "VQA": {
            "What is the text of the centered h1 title?": "Project Status Update",
            "How many team members are listed in the 'Team Overview' section?": "5",
            "What is the heading for the section that contains the team member bullet list?": "Team Overview",
            "How many numbered items are present under the 'Current Milestones' section?": "3",
            "What is the title of the section that contains two paragraphs about project progress?": "Progress Details",
            "How many paragraphs detail the project progress in the 'Progress Details' section?": "2",
            "How many upcoming tasks are listed under the 'Upcoming Tasks' section?": "4",
            "What is the heading for the final remarks section?": "Remarks"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000738",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines an event itinerary for a local community festival.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Community Festival Itinerary\".\n- Display a section header using an <h2> element labeled \"Overview\" followed by exactly 2 paragraphs describing the festival’s purpose.\n- Provide a subsection titled \"Schedule\" using an <h2> element followed by a bullet list with exactly 5 items, each item starting with the event time and a brief description.\n- Create a subsection titled \"Locations\" using an <h2> element that includes exactly 3 numbered entries, each specifying a distinct location within the festival grounds.\n- Introduce a subsection titled \"Notes\" using an <h2> element containing a single paragraph composed of at least 5 sentences.\n- Conclude with a subsection called \"Contact Information\" using an <h2> element housing a bullet list with exactly 2 items: one for a phone number and one for an email address.\n- All paragraphs must consist of a minimum of two sentences each.",
        "raw_output_metric": [
            "<h1>Community Festival Itinerary</h1>",
            "<h2>Overview</h2>",
            "<h2>Schedule</h2>",
            "<h2>Locations</h2>",
            "<h2>Notes</h2>",
            "<h2>Contact Information</h2>",
            "Phone",
            "Email"
        ],
        "VQA": {
            "What is the text displayed in the centered title?": "Community Festival Itinerary",
            "How many paragraphs are shown under the 'Overview' section?": "2",
            "How many bullet-list items are shown in the 'Schedule' section?": "5",
            "How many numbered entries are shown in the 'Locations' section?": "3",
            "How many sentences minimum does the paragraph in the 'Notes' section have?": "At least 5",
            "How many bullet points are present in the 'Contact Information' section?": "2",
            "What HTML tag is used for the main title?": "h1",
            "What HTML tag is consistently used for section headers like 'Overview', 'Schedule', 'Locations', 'Notes', and 'Contact Information'?": "h2"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000739",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a fictional software development initiative.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Software Initiative Overview\".\n- Present a subsection header using an <h2> element titled \"Overview\" followed by exactly 2 paragraphs, each containing at least 2 sentences.\n- Create another subsection header with an <h2> element titled \"Milestones\" followed by an ordered list consisting of exactly 3 items, each representing a key milestone.\n- Include a subsection header using an <h2> element titled \"Team Contributions\" with a bullet list of exactly 4 items, each detailing one team member's role.\n- Provide a final subsection header with an <h2> element titled \"Future Directions\" followed by a single paragraph that includes at least 3 sentences.\n- Ensure all text sections, including titles and paragraphs, are clearly structured and distinctly separated.",
        "raw_output_metric": [
            "<h1>Software Initiative Overview</h1>",
            "<h2>Overview</h2>",
            "<h2>Milestones</h2>",
            "<h2>Team Contributions</h2>",
            "<h2>Future Directions</h2>"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the document?": "Software Initiative Overview",
            "How many paragraphs are under the 'Overview' section?": "2",
            "How many items are listed in the ordered 'Milestones' list?": "3",
            "How many bullet points are shown under the 'Team Contributions' section?": "4",
            "What is the title of the final section that includes a paragraph of future plans?": "Future Directions",
            "How many sentences does the paragraph in the 'Future Directions' section contain?": "At least 3 sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000740",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nTransform the provided text into a formatted Markdown document that serves as a fictional travel brochure.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Wanderlust Chronicles.\"\n- Add a subsection header using an <h2> element titled \"Destinations Overview\" that is immediately followed by exactly 3 paragraphs, each containing at least two complete sentences.\n- Include a subsection header using an <h2> element titled \"Itinerary\" followed by a bullet list that contains exactly 5 items, each item naming a different travel destination.\n- Insert a subsection header using an <h2> element titled \"Local Experiences\" with exactly 2 paragraphs, each paragraph elaborating on activities specific to one of the destinations.\n- Add a final subsection header using an <h2> element titled \"Travel Tips\" accompanied by a single paragraph comprising at least three complete sentences.\n- Ensure that every list and paragraph is clearly delineated and follows the specified structure.",
        "raw_output_metric": [
            "Wanderlust Chronicles",
            "Destinations Overview",
            "Itinerary",
            "Local Experiences",
            "Travel Tips"
        ],
        "VQA": {
            "What is the text of the centered title in the brochure?": "Wanderlust Chronicles.",
            "Which HTML heading element is used for the centered title?": "h1",
            "How many paragraphs immediately follow the 'Destinations Overview' header?": "3 paragraphs",
            "What is the minimum number of complete sentences each paragraph under 'Destinations Overview' must have?": "At least 2 complete sentences",
            "How many items are included in the bullet list under the 'Itinerary' section?": "5 items",
            "How many paragraphs are present in the 'Local Experiences' section?": "2 paragraphs",
            "What is required of the single paragraph under the 'Travel Tips' section?": "It must include at least three complete sentences",
            "What is the ordered sequence of sections in the brochure?": "Title (h1), Destinations Overview (h2), Itinerary (h2), Local Experiences (h2), Travel Tips (h2)"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000741",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown travel itinerary guide for planning a weekend getaway.\n\nFeature Requirements:\n- Start the document with an <h1> element centered on the page displaying the title \"Weekend Escape\".\n- Immediately following the title, include an <h2> section labeled \"Overview\" that contains exactly 2 paragraphs, each with at least three sentences describing the planned trip.\n- Add an <h2> section titled \"Itinerary\" that is followed by a numbered list where each number represents a day of the trip, and include exactly 2 items per day detailing distinct activities.\n- For each activity listed in the itinerary, use sub-bullets to specify the time of day (morning, afternoon, or evening).\n- Create an <h2> section called \"Packing List\" featuring a bullet list of exactly 5 essential items needed for the journey.\n- End with an <h2> section titled \"Additional Tips\" containing a single paragraph of at least two sentences that offers extra travel advice.",
        "raw_output_metric": [
            "<h1>Weekend Escape</h1>",
            "<h2>Overview</h2>",
            "<h2>Itinerary</h2>",
            "<h2>Packing List</h2>",
            "<h2>Additional Tips</h2>",
            "morning",
            "afternoon",
            "evening"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the page?": "Weekend Escape",
            "How many paragraphs are present in the Overview section?": "2",
            "What is the minimum number of sentences required in each Overview paragraph?": "At least 3",
            "What type of list is used in the Itinerary section?": "Numbered list",
            "How many activity items are listed for each day in the Itinerary section?": "2",
            "What additional information is provided as sub-bullets for each itinerary activity?": "The time of day (morning, afternoon, or evening)",
            "How many essential items are listed in the Packing List section?": "5",
            "How many paragraphs are in the Additional Tips section?": "1",
            "What is the minimum number of sentences in the Additional Tips paragraph?": "At least 2"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000742",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a Markdown document that outlines a quarterly meeting agenda with specific sections and detailed content.\n\nFeature Requirements:\n- Start with a centered title using an <h1> element that reads ‘Quarterly Meeting Agenda’.\n- Follow with an introductory paragraph stating the purpose of the meeting; the paragraph must contain at least three sentences.\n- Create a section titled ‘Schedule’ using an <h2> element and include a table with exactly 3 rows. Each row should represent a different session: Opening, Core Discussion, and Wrap-Up, with two columns for ‘Session’ and ‘Time’.\n- Add a section titled ‘Discussion Topics’ using an <h2> element immediately followed by an ordered list with exactly 5 items, each listing a specific topic.\n- Include a section titled ‘Action Items’ using an <h2> element and provide a bullet list with exactly 4 items that specify actionable tasks.\n- Conclude with a section titled ‘Final Thoughts’ using an <h2> element that contains a concluding paragraph of no fewer than two sentences.\n- Make sure that all text elements are formatted as Markdown without the use of images, icons, or external assets.",
        "raw_output_metric": [
            "Quarterly Meeting Agenda",
            "Schedule",
            "Session",
            "Time",
            "Opening",
            "Core Discussion",
            "Wrap-Up",
            "Discussion Topics",
            "Action Items",
            "Final Thoughts"
        ],
        "VQA": {
            "What is the centered title at the top of the document?": "Quarterly Meeting Agenda",
            "How many sentences does the introductory paragraph contain?": "At least three sentences",
            "What is the title of the section that presents the schedule?": "Schedule",
            "How many rows are in the schedule table?": "3",
            "What are the session names listed in the schedule table?": "Opening, Core Discussion, and Wrap-Up",
            "What is the title of the section immediately followed by an ordered list?": "Discussion Topics",
            "How many items are in the ordered list under the Discussion Topics section?": "5",
            "What is the title of the section that includes a bullet list for actionable tasks?": "Action Items",
            "How many items are listed in the bullet list under Action Items?": "4",
            "What is the title of the final section and how many sentences does its concluding paragraph contain?": "Final Thoughts; at least two sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000743",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a creative project plan in Markdown format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Project Plan\".\n- Display a subsection header using an <h2> element titled \"Overview\", followed by exactly 2 paragraphs, each containing at least two full sentences.\n- Insert a bullet list immediately after the \"Overview\" section containing exactly 3 items, each item clearly outlining a critical project milestone.\n- Add another subsection header using an <h2> element titled \"Timeline\" with exactly 2 paragraphs; the first paragraph should describe the project start details and the second should explain the anticipated end date.\n- Follow the \"Timeline\" section with a numbered list that includes exactly 4 items, each item describing a distinct phase of the project.\n- Conclude with a final subsection titled \"Summary\" using an <h2> element that contains a single paragraph summarizing the entire project plan.",
        "raw_output_metric": [
            "<h1>Project Plan</h1>",
            "<h2>Overview</h2>",
            "<h2>Timeline</h2>",
            "<h2>Summary</h2>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Project Plan",
            "How many paragraphs are immediately under the 'Overview' section?": "2",
            "How many bullet points are listed in the 'Overview' section?": "3",
            "How many paragraphs follow the 'Timeline' header?": "2",
            "How many numbered items are displayed after the 'Timeline' section?": "4",
            "How many paragraphs are in the 'Summary' section?": "1",
            "Does each paragraph in the 'Overview' section contain at least two full sentences?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000744",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCreate a Markdown formatted product update announcement report.\n\nFeature Requirements:\n- At the top, include a centered <h1> element with the title \"Product Update Announcement\".\n- Immediately below, add an <h2> element titled \"Overview\" followed by exactly 3 paragraphs, each containing at least 2 sentences.\n- Next, include an <h2> element titled \"New Features\" with a numbered list of exactly 5 items, where each item describes a distinct feature update.\n- Then, insert an <h2> element titled \"Customer Feedback\" followed by a single paragraph summarizing user responses in at least 2 sentences.\n- Finally, add an <h2> element titled \"Release Date\" with a centered line that states the specific release date in the format YYYY-MM-DD.",
        "raw_output_metric": [
            "<h1>Product Update Announcement</h1>",
            "<h2>Overview</h2>",
            "<h2>New Features</h2>",
            "<h2>Customer Feedback</h2>",
            "<h2>Release Date</h2>",
            "1.",
            "2.",
            "3.",
            "4.",
            "5.",
            "YYYY-MM-DD"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the announcement?": "Product Update Announcement",
            "How many paragraphs are present under the 'Overview' section?": "3",
            "Does each paragraph in the 'Overview' section contain at least 2 sentences?": "Yes",
            "How many items are listed in the 'New Features' numbered list?": "5",
            "What type of list is used in the 'New Features' section?": "Numbered list",
            "How many paragraphs are included in the 'Customer Feedback' section?": "1",
            "In what format is the release date displayed in the 'Release Date' section?": "YYYY-MM-DD"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000745",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a conference event schedule.\n\nFeature Requirements:\n- Begin with a centered title using an <h1> element displaying \"Conference Event Schedule\".\n- Introduce an \"Overview\" section with an <h2> element that includes exactly 2 paragraphs of text, each paragraph containing at least 2 sentences.\n- Create a \"Sessions\" section with an <h2> element followed by an ordered list of exactly 5 session entries, where each entry includes the session title, the speaker's name, and a brief description.\n- Add a \"Keynote\" section with an <h2> element accompanied by one paragraph containing a detailed description of the keynote session, ensuring the paragraph has no fewer than 2 sentences.\n- Conclude with a \"Contact\" section using an <h2> element that includes one paragraph listing the organizer’s email and phone number in plain text.\n- Ensure that all text elements are clear, consistently formatted, and follow the Markdown document structure specified above.",
        "raw_output_metric": [
            "<h1>Conference Event Schedule</h1>",
            "<h2>Overview</h2>",
            "<h2>Sessions</h2>",
            "<h2>Keynote</h2>",
            "<h2>Contact</h2>",
            "Email:",
            "Phone:"
        ],
        "VQA": {
            "What is the text in the centered title (using an h1 element)?": "Conference Event Schedule",
            "How many paragraphs are included in the Overview section?": "2",
            "Does each paragraph in the Overview section contain at least two sentences?": "Yes",
            "How many session entries are in the ordered list under the Sessions section?": "5",
            "Does each session entry include the session title, speaker's name, and a brief description?": "Yes",
            "How many paragraphs are in the Keynote section?": "1",
            "Does the single Keynote paragraph contain no fewer than two sentences?": "Yes",
            "What contact information is provided in the Contact section?": "The organizer’s email and phone number"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000746",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nCompose a Markdown document promoting a local cooking workshop event.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text “Local Cooking Workshop”.\n- Create a section titled “Event Summary” using an <h2> element that contains exactly 2 paragraphs; each paragraph must be at least two sentences long.\n- Introduce a section titled “Featured Recipes” with an <h2> element followed by a bullet list containing exactly 3 items, where each item names a recipe and provides a brief description.\n- Add a section titled “Chef Profiles” using an <h2> element followed by an ordered list with exactly 2 items, where each item lists a chef’s name and one interesting fact about them.\n- Conclude with a section titled “Registration Info” using an <h2> element that includes a single paragraph detailing registration steps in at least two sentences.\n- Ensure that all sections and list items are clearly structured and contain only text.",
        "raw_output_metric": [],
        "VQA": {
            "What is the text of the centered title in the <h1> element?": "Local Cooking Workshop",
            "How many paragraphs are included in the 'Event Summary' section?": "2",
            "What is the minimum sentence requirement for each paragraph in the 'Event Summary' section?": "At least two sentences",
            "How many bullet list items are shown in the 'Featured Recipes' section?": "3",
            "What two elements are provided in each bullet point of the 'Featured Recipes' section?": "A recipe name and a brief description",
            "How many items appear in the ordered list under the 'Chef Profiles' section?": "2",
            "What type of list is used in the 'Chef Profiles' section?": "Ordered list",
            "What is the minimum number of sentences required in the paragraph under the 'Registration Info' section?": "At least two sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000747",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that presents a fictional futuristic space expo review.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Space Expo 3000 Review\".\n- Create a subsection header using an <h2> element titled \"Event Overview\" followed by exactly 2 paragraphs, each containing at least two complete sentences.\n- Add a subsection header using an <h2> element titled \"Highlights\" with a bullet list of exactly 5 items, each item detailing a distinct event highlight.\n- Insert a subsection header using an <h2> element titled \"Exhibitors\" with a numbered list of exactly 3 items, where each item describes a unique exhibitor and their showcased technology.\n- Conclude with a subsection titled \"Closing Thoughts\" using an <h2> element that contains a single paragraph comprising at least three sentences summarizing the expo.",
        "raw_output_metric": [
            "Space Expo 3000 Review",
            "Event Overview",
            "Highlights",
            "Exhibitors",
            "Closing Thoughts"
        ],
        "VQA": {
            "What is the text of the centered <h1> title?": "Space Expo 3000 Review",
            "How is the main title visually aligned?": "Centered",
            "What is the subtitle for the event overview section?": "Event Overview",
            "How many paragraphs are present under the 'Event Overview' section?": "2",
            "How many items are listed as bullet points under the 'Highlights' section?": "5",
            "What is the section header that precedes the numbered list of exhibitors?": "Exhibitors",
            "How many items are in the numbered exhibitors list?": "3",
            "What is the title of the final section summarizing the expo?": "Closing Thoughts",
            "How many sentences does the 'Closing Thoughts' paragraph contain?": "At least 3",
            "Do each of the two paragraphs in the 'Event Overview' section contain at least two complete sentences?": "Yes"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000748",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a travel itinerary report that outlines an adventurous journey using a clear Markdown format.\n\nFeature Requirements:\n- Use an <h1> element to display a centered title reading \"Adventure Timeline\".\n- Include an <h2> subsection titled \"Journey Overview\" featuring exactly 2 paragraphs, each composed of at least 2 sentences.\n- Add an <h2> subsection named \"Daily Schedule\" followed by a numbered list.\n- The numbered list must contain exactly 5 entries, with each entry representing one day of travel in a single sentence.\n- Create an <h2> subsection titled \"Key Destinations\" that is followed by a bullet list.\n- The bullet list should include exactly 4 items, with each item specifying a city and one notable attraction.\n- Conclude with an <h2> subsection named \"Final Thoughts\" that contains a single paragraph of at least 2 sentences.\n- Ensure all text is strictly Markdown without any external assets, code blocks, images, or icons.",
        "raw_output_metric": [
            "Adventure Timeline",
            "Journey Overview",
            "Daily Schedule",
            "Key Destinations",
            "Final Thoughts"
        ],
        "VQA": {
            "What is the text displayed in the centered h1 title?": "Adventure Timeline",
            "How many paragraphs are in the 'Journey Overview' section and what is unique about them?": "2 paragraphs, each composed of at least 2 sentences",
            "What type of list follows the 'Daily Schedule' heading and how many entries should it contain?": "A numbered list with exactly 5 entries",
            "What does each entry in the 'Daily Schedule' numbered list represent?": "One day of travel in a single sentence",
            "How many items are in the bullet list under the 'Key Destinations' section?": "4 items",
            "What detailed information does each bullet list item under 'Key Destinations' include?": "A city and one notable attraction",
            "How is the 'Final Thoughts' section formatted?": "As an h2 subsection containing a single paragraph of at least 2 sentences"
        }
    },
    {
        "task_name": "Text to Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "task_id": "000749",
        "input_type": "Text",
        "output_type": "Markdown",
        "rendering": true,
        "query": "Please output Markdown:\n\nTask:\nGenerate a formatted Markdown document that outlines a project kick-off meeting summary.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Project Kick-off Meeting\".\n- Create an <h2> section titled \"Overview\" followed by exactly 3 paragraphs, each paragraph containing at least two full sentences that describe the meeting purpose.\n- Add an <h2> section titled \"Meeting Agenda\" immediately followed by a bullet list that consists of exactly 5 items, each representing a specific agenda topic.\n- Include a subsection labeled \"Decisions\" using an <h2> element with a numbered list containing exactly 3 items that detail key outcomes.\n- Provide an <h2> section labeled \"Action Items\" that is immediately followed by a table featuring exactly 4 rows; the table should have 2 columns with headers \"Task\" and \"Owner\".\n- Conclude with an <h2> section titled \"Sign-off\" containing a single centered paragraph with italicized text reading \"Approved by Team Lead\".",
        "raw_output_metric": [
            "Project Kick-off Meeting",
            "Overview",
            "Meeting Agenda",
            "Decisions",
            "Action Items",
            "Task",
            "Owner",
            "Sign-off",
            "Approved by Team Lead"
        ],
        "VQA": {
            "What is the main title text displayed on the page?": "Project Kick-off Meeting",
            "How is the main title aligned?": "Centered",
            "How many paragraphs are included in the 'Overview' section?": "3",
            "How many bullet points are listed in the 'Meeting Agenda' section?": "5",
            "How many items are present in the numbered 'Decisions' list?": "3",
            "What text appears as the headers in the 'Action Items' table?": "Task and Owner",
            "How many rows does the 'Action Items' table contain?": "4",
            "What is the exact italicized text in the 'Sign-off' section?": "Approved by Team Lead",
            "Which section is immediately followed by a bullet list?": "Meeting Agenda"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000800",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing monthly sales for different product categories.\n\nFeature Requirements:\n- Display a bar chart with exactly 8 distinct bars representing separate product categories.\n- Label the x-axis as \"Product Categories\" and the y-axis as \"Sales (units)\".\n- Add a chart title that reads \"Monthly Sales by Category\" at the top of the plot.\n- Use a unique color for each bar to differentiate the product categories.\n- Place the category names (e.g., Electronics, Clothing, Furniture, Toys, Books, Sports, Food, Garden) along the x-axis.\n- Annotate the top of each bar with the corresponding numerical sales value.\n- Set the y-axis limit from 0 to 120 to ensure all data points are clearly visible.\n- Include horizontal grid lines across the y-axis to aid in value estimation.\n- Position the grid lines beneath the bars to maintain visual clarity during data comparison.",
        "raw_output_metric": [
            "Product Categories",
            "Sales (units)",
            "Monthly Sales by Category",
            "Electronics",
            "Clothing",
            "Furniture",
            "Toys",
            "Books",
            "Sports",
            "Food",
            "Garden",
            "0",
            "120"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Monthly Sales by Category",
            "What label is used for the x-axis?": "Product Categories",
            "What label is used for the y-axis?": "Sales (units)",
            "How many bars are shown representing product categories?": "8",
            "Which product categories are displayed along the x-axis?": "Electronics, Clothing, Furniture, Toys, Books, Sports, Food, Garden",
            "Are the sales values annotated at the top of each bar?": "Yes",
            "What is the range of the y-axis?": "0 to 120",
            "Are horizontal grid lines included in the chart layout?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000801",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined arrays representing age and average expenditure.\n\nFeature Requirements:\n- Plot exactly 15 data points using red circle markers without connecting lines.\n- Label the x-axis as \"Age (years)\" and the y-axis as \"Average Expenditure ($)\".\n- Include a title at the top center with the text \"Expenditure vs Age\".\n- Set the x-axis range from 20 to 60 and the y-axis range from 200 to 1000.\n- Add grid lines to both axes using a light gray color to enhance readability.\n- Place a legend in the lower right corner with the label \"Data Points\".",
        "raw_output_metric": [
            "plt.scatter",
            "15",
            "red",
            "o",
            "Age (years)",
            "Average Expenditure ($)",
            "Expenditure vs Age",
            "Data Points",
            "20",
            "60",
            "200",
            "1000",
            "plt.xlabel",
            "plt.ylabel",
            "plt.title",
            "plt.xlim",
            "plt.ylim",
            "plt.grid",
            "plt.legend",
            "loc='lower right'"
        ],
        "VQA": {
            "What is the title of the scatter plot?": "Expenditure vs Age",
            "How many data points are plotted?": "15",
            "What marker style and color are used for the data points?": "Red circle markers",
            "What are the labels for the x-axis and y-axis?": "x-axis: Age (years), y-axis: Average Expenditure ($)",
            "What are the x-axis and y-axis ranges?": "x-axis: 20 to 60, y-axis: 200 to 1000",
            "Are grid lines present on the plot and what color are they?": "Yes, they are light gray",
            "Where is the legend placed and what does it label?": "Lower right corner, labeled 'Data Points'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000802",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing wind speed and precipitation levels.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Wind Speed (mph)\" and the y-axis labeled as \"Precipitation (mm)\".\n- Include a title at the top of the plot with the text \"Wind Speed vs Precipitation\".\n- Plot exactly 8 data points representing different measurement pairs.\n- Use red circle markers with a marker size of 80 for each data point.\n- Set the x-axis range from 0 to 100 and the y-axis range from 0 to 50.\n- Add grid lines to both the x and y axes.\n- Include a legend positioned in the lower right corner with the label \"Measurement Data\".",
        "raw_output_metric": [
            "Wind Speed vs Precipitation",
            "Wind Speed (mph)",
            "Precipitation (mm)",
            "Measurement Data",
            "plt.scatter",
            "red",
            "marker='o'",
            "s=80",
            "plt.xlim(0, 100)",
            "plt.ylim(0, 50)",
            "grid",
            "lower right"
        ],
        "VQA": {
            "What is the title displayed at the top of the plot?": "Wind Speed vs Precipitation",
            "How many data points are plotted in the scatter plot?": "8",
            "What label is used for the x-axis?": "Wind Speed (mph)",
            "What label is used for the y-axis?": "Precipitation (mm)",
            "What marker properties are used for the data points?": "Red circle markers with a marker size of 80",
            "What are the x-axis and y-axis ranges set to?": "x-axis: 0 to 100, y-axis: 0 to 50",
            "Where is the legend located and what label does it show?": "Lower right corner with the label 'Measurement Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000803",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot visualizing rainfall amounts for eight different cities.\n\nFeature Requirements:\n- Create exactly 8 data points representing rainfall measurements in millimeters.\n- Plot the data points as red circular markers.\n- Label the x-axis as \"Cities\" and the y-axis as \"Rainfall (mm)\".\n- Set the plot title to \"Citywide Rainfall Analysis\".\n- Use city names (\"City 1\" through \"City 8\") along the x-axis as categorical labels.\n- Include grid lines on both the x and y axes.\n- Limit the y-axis range from 0 to 200 to accommodate all data points.\n- Annotate each point with its precise rainfall value displayed just above the marker.",
        "raw_output_metric": [
            "City 1",
            "City 2",
            "City 3",
            "City 4",
            "City 5",
            "City 6",
            "City 7",
            "City 8",
            "Cities",
            "Rainfall (mm)",
            "Citywide Rainfall Analysis",
            "red",
            "plt.scatter",
            "plt.grid",
            "set_ylim(0, 200)",
            "annotate"
        ],
        "VQA": {
            "How many data points are plotted on the scatter plot?": "8",
            "What type of marker is used for the plotted data points?": "Red circular markers",
            "Which cities are represented along the x-axis?": "City 1 through City 8",
            "What label is given to the x-axis?": "Cities",
            "What label is given to the y-axis?": "Rainfall (mm)",
            "What is the title of the scatter plot?": "Citywide Rainfall Analysis",
            "Are grid lines included in the plot?": "Yes, on both the x and y axes",
            "What is the set range for the y-axis?": "0 to 200",
            "What additional annotation is provided for each data point?": "Each point is annotated with its rainfall value displayed just above the marker"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000804",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nCreate a bar chart visualizing the population of eight different cities using predefined numerical data.\n\nFeature Requirements:\n- Plot exactly 8 vertical bars, each representing a different city.\n- Label the x-axis as \"Cities\" with the names of each city clearly marked.\n- Label the y-axis as \"Population (in millions)\" and set the y-axis range from 0 to 12.\n- Include a title at the top of the plot with the text \"City Population Comparison\".\n- Color all the bars in a consistent shade of green.\n- Add grid lines along the y-axis to improve data readability.\n- Place a legend in the upper right corner with the label \"Population Data\".",
        "raw_output_metric": [
            "plt.bar",
            "plt.xlabel",
            "plt.ylabel",
            "plt.title",
            "plt.ylim",
            "plt.grid",
            "plt.legend",
            "City Population Comparison",
            "Cities",
            "Population (in millions)",
            "Population Data",
            "green",
            "0",
            "12"
        ],
        "VQA": {
            "How many vertical bars are displayed in the chart?": "8",
            "What label is given to the x-axis?": "Cities",
            "What label is given to the y-axis?": "Population (in millions)",
            "What is the range set for the y-axis?": "0 to 12",
            "What is the title of the bar chart?": "City Population Comparison",
            "What color are all the bars?": "Green",
            "Which axis has grid lines displayed?": "Y-axis",
            "Where is the legend located in the plot?": "Upper right corner"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000805",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined arrays representing product names and their corresponding monthly sales figures.\n\nFeature Requirements:\n- Display a bar chart with the x-axis labeled \"Product Names\" and the y-axis labeled \"Sales Count\".\n- Include a title at the top with the text \"Monthly Product Sales\".\n- Plot exactly 5 bars representing 5 distinct products.\n- Use a unique color for each bar chosen from a set of 5 different colors.\n- Arrange the product names in alphabetical order on the x-axis.\n- Set the y-axis range from 0 to 100 with tick marks at every 10 units.\n- Add grid lines only along the y-axis to enhance readability.\n- Place a legend in the upper right corner outside the plot area with the label \"Sales Data\".",
        "raw_output_metric": [
            "Product Names",
            "Sales Count",
            "Monthly Product Sales",
            "Sales Data",
            "plt.bar",
            "set_ylim(0, 100)",
            "grid"
        ],
        "VQA": {
            "What is the title of the chart?": "Monthly Product Sales",
            "What is the label on the x-axis?": "Product Names",
            "What is the label on the y-axis?": "Sales Count",
            "How many bars are displayed in the bar chart?": "5",
            "Are the product names sorted in alphabetical order on the x-axis?": "Yes",
            "What is the range set for the y-axis?": "0 to 100",
            "At what increment are the tick marks on the y-axis?": "10 units",
            "Which grid lines are visible?": "Only along the y-axis",
            "Where is the legend positioned and what does it say?": "Upper right corner outside the plot area with label 'Sales Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000806",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing product sales across different regions.\n\nFeature Requirements:\n- Create a bar chart with exactly 7 bars, each representing a distinct region.\n- Label the x-axis as \"Regions\" and the y-axis as \"Units Sold\".\n- Set the chart title to \"Sales Distribution by Region\".\n- Assign a unique shade of green to each bar for clear differentiation.\n- Display the numerical sales value on top of each bar.\n- Include horizontal grid lines along the y-axis only.\n- Use the region names \"North\", \"South\", \"East\", \"West\", \"Central\", \"Northeast\", and \"Northwest\" on the x-axis.\n- Adjust the y-axis range so that it starts at 0 and extends slightly above the highest sales value.",
        "raw_output_metric": [
            "North",
            "South",
            "East",
            "West",
            "Central",
            "Northeast",
            "Northwest",
            "Regions",
            "Units Sold",
            "Sales Distribution by Region",
            "limegreen",
            "forestgreen",
            "seagreen",
            "darkgreen",
            "mediumseagreen",
            "olive",
            "springgreen",
            "ax.bar",
            "ax.yaxis.grid",
            "ax.set_ylim",
            "plt.show"
        ],
        "VQA": {
            "What is the title of the chart?": "Sales Distribution by Region",
            "How many bars are displayed in the chart?": "7",
            "What is the label on the x-axis?": "Regions",
            "What is the label on the y-axis?": "Units Sold",
            "Which regions are represented on the x-axis?": "North, South, East, West, Central, Northeast, Northwest",
            "Are numerical sales values shown on the chart?": "Yes",
            "What is unique about the color of each bar?": "Each bar has a unique shade of green",
            "Which grid lines are visible on the chart?": "Horizontal grid lines along the y-axis only",
            "How is the y-axis range set?": "It starts at 0 and extends slightly above the highest sales value"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000807",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart illustrating the monthly sales figures for a retail store.\n\nFeature Requirements:\n- Display a bar chart with the x-axis labeled as \"Month\" and the y-axis labeled as \"Sales ($)\".\n- Include a title at the top with the text \"Monthly Retail Sales\".\n- Plot exactly 12 bars corresponding to the months January through December.\n- Use a consistent fill color of orange for all bars and outline each bar with a black edge.\n- Set the x-axis tick labels to the three-letter abbreviations of the month names (e.g., Jan, Feb, Mar, etc.).\n- Add horizontal grid lines across the plot to enhance the readability of sales values.\n- Set the y-axis range from 0 to 20000.\n- Include data labels at the top of each bar displaying the exact sales figures.",
        "raw_output_metric": [
            "Monthly Retail Sales",
            "Month",
            "Sales ($)",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "orange",
            "black",
            "plt.bar",
            "plt.title",
            "plt.xlabel",
            "plt.ylabel",
            "plt.xticks",
            "plt.ylim",
            "plt.grid"
        ],
        "VQA": {
            "What is the chart's title?": "Monthly Retail Sales",
            "What label is used on the x-axis?": "Month",
            "What label is used on the y-axis?": "Sales ($)",
            "How many bars are displayed on the chart?": "12",
            "What are the x-axis tick labels?": "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec",
            "What is the fill and outline color of the bars?": "Orange fill and black outline",
            "Are horizontal grid lines present in the chart?": "Yes",
            "What is the range set for the y-axis?": "0 to 20000",
            "What information is displayed at the top of each bar?": "Exact sales figures"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000808",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot that visualizes monthly rainfall measurements.\n\nFeature Requirements:\n- Plot exactly 8 data points representing months evenly distributed along the x-axis.\n- Label the x-axis as \"Month\" and the y-axis as \"Rainfall (mm)\".\n- Include a title at the top of the plot with the text \"Monthly Rainfall Distribution\".\n- Use red circular markers with a uniform marker size to represent each data point.\n- Add grid lines to both axes using major tick intervals for clear readability.\n- Include a legend positioned in the upper right corner with the label \"Rainfall Data\".\n- Set the x-axis range from 1 to 12 and the y-axis range from 0 to 250.\n- Draw a horizontal dashed line at y = 150 to indicate the average rainfall level.",
        "raw_output_metric": [
            "plt.scatter",
            "Month",
            "Rainfall (mm)",
            "Monthly Rainfall Distribution",
            "red",
            "o",
            "Rainfall Data",
            "plt.xlim(1, 12)",
            "plt.ylim(0, 250)",
            "plt.axhline(y=150, linestyle='--')",
            "plt.grid"
        ],
        "VQA": {
            "How many data points are plotted on the scatter plot?": "8",
            "What is the label on the x-axis?": "Month",
            "What is the label on the y-axis?": "Rainfall (mm)",
            "What is the title displayed at the top of the plot?": "Monthly Rainfall Distribution",
            "What color and shape are the markers used for the data points?": "Red circular markers",
            "Are grid lines included in the plot?": "Yes, on both axes at major tick intervals",
            "Where is the legend positioned?": "Upper right corner",
            "What label is used in the legend?": "Rainfall Data",
            "What are the x-axis and y-axis ranges set to?": "x-axis: 1 to 12, y-axis: 0 to 250",
            "What special horizontal line is drawn on the plot?": "A dashed line at y = 150"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000809",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot that visualizes the relationship between speed and distance measurements.\n\nFeature Requirements:\n- Construct a scatter plot with exactly 15 data points representing different observations.\n- Set the x-axis label as \"Speed (km/h)\" and ensure its values range uniformly from 0 to 120.\n- Set the y-axis label as \"Distance (km)\" and ensure its values vary between 0 and 100.\n- Add a title at the top of the plot with the text \"Speed vs Distance Analysis\".\n- Use red circular markers for each data point to clearly display individual observations.\n- Integrate grid lines on both the x-axis and y-axis to enhance the plot's readability.\n- Include a legend in the bottom right corner with the label \"Observation Points\".",
        "raw_output_metric": [
            "Speed vs Distance Analysis",
            "Speed (km/h)",
            "Distance (km)",
            "Observation Points",
            "15",
            "red",
            "grid",
            "lower right",
            "plt.scatter"
        ],
        "VQA": {
            "What is the title displayed at the top of the plot?": "Speed vs Distance Analysis",
            "How many data points are plotted in the scatter plot?": "15",
            "What is the label on the x-axis and what range of values does it cover?": "Speed (km/h) with values from 0 to 120",
            "What is the label on the y-axis and what range of values does it cover?": "Distance (km) with values between 0 and 100",
            "What color and shape are the markers used for the data points?": "Red circular markers",
            "Are grid lines visible on the plot and on which axes?": "Yes, on both the x-axis and y-axis",
            "Where is the legend located and what label does it display?": "Bottom right corner with the label 'Observation Points'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000810",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot that displays altitude readings against corresponding air pressure values.\n\nFeature Requirements:\n- Plot exactly 7 data points representing measurement intervals evenly spaced on the x-axis.\n- Label the x-axis as \"Altitude (m)\" and the y-axis as \"Pressure (hPa)\".\n- Display data points as red circle markers.\n- Include a title at the top with the text \"Pressure vs Altitude\".\n- Set the x-axis range from 1000 to 5000 and the y-axis range from 900 to 1050.\n- Overlay grid lines on the x-axis to enhance readability.\n- Add a legend in the lower right corner with the label \"Measurement Data\".",
        "raw_output_metric": [
            "Altitude (m)",
            "Pressure (hPa)",
            "Pressure vs Altitude",
            "Measurement Data",
            "1000",
            "5000",
            "900",
            "1050",
            "7",
            "red",
            "o",
            "lower right",
            "grid",
            "scatter"
        ],
        "VQA": {
            "How many data points are plotted on the scatter plot?": "7",
            "What marker style and color are used for the data points?": "Red circle markers",
            "What is the label of the x-axis?": "Altitude (m)",
            "What is the label of the y-axis?": "Pressure (hPa)",
            "What is the title displayed at the top of the plot?": "Pressure vs Altitude",
            "What are the configured ranges for the x-axis and y-axis?": "x-axis: 1000 to 5000, y-axis: 900 to 1050",
            "Where is the legend located and what label does it display?": "Lower right corner, 'Measurement Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000811",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing weekly sales performance data.\n\nFeature Requirements:\n- Create a bar chart with the x-axis representing days of the week: \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\".\n- Use bars colored in green with a solid dark green edge for each day's sales.\n- Include a chart title \"Weekly Sales Report\" positioned at the top of the plot.\n- Label the y-axis as \"Units Sold\" and set the numeric range from 0 to 100.\n- Display grid lines only along the y-axis to help gauge the bar heights.\n- Annotate each bar with its exact sales value placed just above the bar, using a font size of 10.\n- Position a legend in the lower right corner with the label \"Sales Figures\" indicating the data representation.\n- Ensure the chart displays exactly 7 bars corresponding to the full week.",
        "raw_output_metric": [
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "Weekly Sales Report",
            "Units Sold",
            "Sales Figures",
            "green",
            "darkgreen",
            "0",
            "100",
            "10"
        ],
        "VQA": {
            "Which days of the week are represented on the x-axis?": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
            "What is the title displayed at the top of the bar chart?": "Weekly Sales Report",
            "What is the color of the bars and their edges?": "Green bars with a solid dark green edge",
            "How many bars are present in the chart?": "7",
            "What label is given to the y-axis?": "Units Sold",
            "What is the numeric range set for the y-axis?": "0 to 100",
            "Which axis shows grid lines?": "Only the y-axis",
            "What additional information is shown above each bar?": "The exact sales value",
            "Where is the legend located and what label does it show?": "Lower right corner with the label 'Sales Figures'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000812",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined arrays representing wind speed and humidity measurements.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Wind Speed (km/h)\" and the y-axis labeled as \"Humidity (%)\".\n- Include a title for the plot with the text \"Wind Speed vs Humidity\".\n- Plot exactly 12 data points where each x-value corresponds to wind speed and each y-value to humidity.\n- Use red circular markers with a size of 100 for each plotted data point.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the bottom right corner with the label \"Sensor Data\".\n- Set the x-axis range from 0 to 50 and the y-axis range from 20 to 100.\n- Draw a dotted horizontal line at y = 50 to indicate the median humidity level.",
        "raw_output_metric": [
            "Wind Speed (km/h)",
            "Humidity (%)",
            "Wind Speed vs Humidity",
            "Sensor Data",
            "red",
            "o",
            "100",
            "12",
            "plt.scatter",
            "plt.xlim(0, 50)",
            "plt.ylim(20, 100)",
            "plt.axhline(y=50, linestyle=':')",
            "plt.grid"
        ],
        "VQA": {
            "What is the x-axis label of the plot?": "Wind Speed (km/h)",
            "What is the y-axis label of the plot?": "Humidity (%)",
            "What is the title displayed at the top of the plot?": "Wind Speed vs Humidity",
            "How many data points are plotted in the scatter plot?": "12",
            "What is the color and shape of the markers used?": "Red circular markers",
            "What is the size of each plotted marker?": "100",
            "Are grid lines visible on the plot?": "Yes",
            "Where is the legend located and what label does it display?": "Bottom right, Sensor Data",
            "What are the axis ranges for the x-axis and y-axis?": "x-axis: 0 to 50, y-axis: 20 to 100",
            "What horizontal line is drawn to indicate the median humidity level?": "A dotted horizontal line at y = 50"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000813",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing product sales for four quarters.\n\nFeature Requirements:\n- Create a bar chart with exactly 4 bars, each corresponding to a quarter labeled \"Q1\", \"Q2\", \"Q3\", and \"Q4\".\n- Label the x-axis as \"Quarter\" and the y-axis as \"Sales (in Thousands)\".\n- Use distinct colors for each bar chosen from a set of four colors: red, green, blue, and orange.\n- Set the chart title as \"Quarterly Sales Analysis\" centered at the top.\n- Display the exact numerical sales value above each corresponding bar.\n- Use grid lines along the y-axis to improve readability.\n- Ensure the y-axis range starts at 0 and extends to a value that is at least 10% greater than the maximum sales value.\n- Position a legend that identifies each bar's quarter in the upper right corner.",
        "raw_output_metric": [
            "Q1",
            "Q2",
            "Q3",
            "Q4",
            "Quarter",
            "Sales (in Thousands)",
            "Quarterly Sales Analysis",
            "red",
            "green",
            "blue",
            "orange",
            "plt.bar",
            "plt.text",
            "plt.grid",
            "plt.legend",
            "upper right"
        ],
        "VQA": {
            "How many bars are shown in the chart?": "4",
            "What are the x-axis labels for the bars?": "Q1, Q2, Q3, and Q4",
            "What labels are used for the x-axis and y-axis?": "x-axis: Quarter, y-axis: Sales (in Thousands)",
            "What is the title of the chart?": "Quarterly Sales Analysis",
            "Are numerical sales values displayed above each bar?": "Yes, the exact sales value is shown",
            "Are grid lines present in the chart?": "Yes, along the y-axis",
            "What colors are used for the bars?": "Red, green, blue, and orange",
            "Where is the legend located?": "Upper right corner"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000814",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar plot displaying quarterly sales figures for four distinct regions.\n\nFeature Requirements:\n- The x-axis should contain four categories labeled \"North\", \"South\", \"East\", and \"West\".\n- The y-axis must display sales in dollars ranging from 0 to 500,000.\n- Plot exactly four bars, each corresponding to one of the specified regions.\n- Use a unique color for each bar: blue for \"North\", green for \"South\", red for \"East\", and purple for \"West\".\n- Add a centered title at the top with the text \"Quarterly Sales by Region\".\n- Label the x-axis as \"Region\" and the y-axis as \"Sales ($)\".\n- Draw grid lines along the y-axis to improve readability.\n- Display the exact sales number above each bar as a data label.\n- Ensure the plot has no additional annotations other than the specified elements.",
        "raw_output_metric": [
            "North",
            "South",
            "East",
            "West",
            "Quarterly Sales by Region",
            "Region",
            "Sales ($)",
            "blue",
            "green",
            "red",
            "purple",
            "0",
            "500000"
        ],
        "VQA": {
            "What is the title displayed at the top of the plot?": "Quarterly Sales by Region",
            "Which categories are shown on the x-axis?": "North, South, East, West",
            "What is the range of the y-axis?": "0 to 500,000",
            "What unique colors are used for each bar by region?": "Blue for North, green for South, red for East, and purple for West",
            "What labels are set for the x-axis and y-axis?": "x-axis: Region, y-axis: Sales ($)",
            "Are grid lines present along any axis?": "Yes, along the y-axis",
            "Is the exact sales number displayed above each bar?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000815",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using simulated data representing weekly sales performance across different regions.\n\nFeature Requirements:\n- Create a vertical bar chart with exactly 6 bars, each corresponding to a different region (Region 1 to Region 6).\n- Label the x-axis as \"Regions\" and populate it with the region labels \"R1\", \"R2\", \"R3\", \"R4\", \"R5\", and \"R6\".\n- Label the y-axis as \"Weekly Sales (k units)\" and set the y-axis range from 0 to 100.\n- Use distinct shades of green for each bar, progressing from light green for the lowest sales to dark green for the highest.\n- Place a title at the top of the plot with the text \"Weekly Sales by Region\".\n- Add grid lines exclusively along the y-axis to improve traceability of sales values.\n- Position the numerical sales value at the top of each bar as an annotation.\n- Ensure that the plot includes a legend at the bottom right corner with the label \"Sales Data\".",
        "raw_output_metric": [
            "R1",
            "R2",
            "R3",
            "R4",
            "R5",
            "R6",
            "Regions",
            "Weekly Sales (k units)",
            "Weekly Sales by Region",
            "Sales Data",
            "0",
            "100"
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "6",
            "What are the labels on the x-axis?": "R1, R2, R3, R4, R5, and R6",
            "What is the title of the chart?": "Weekly Sales by Region",
            "What is the label and range of the y-axis?": "Weekly Sales (k units) with a range from 0 to 100",
            "Which axis has grid lines visible?": "Y-axis only",
            "Are numerical values annotated on the chart?": "Yes, each bar shows its numerical sales value at the top",
            "What color pattern is used for the bars?": "Distinct shades of green from light to dark",
            "Where is the legend located and what is its label?": "Bottom right; 'Sales Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000816",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing rainfall and humidity measurements.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Rainfall (mm)\" and the y-axis labeled as \"Humidity (%)\".\n- Include a title at the top with the text \"Rainfall vs Humidity Analysis\".\n- Scatter exactly 50 data points that are evenly spread across the x-axis domain.\n- Use blue circular markers for each data point.\n- Set the figure size to 10 inches in width and 6 inches in height.\n- Configure the x-axis range from 0 to 200 and the y-axis range from 20 to 100.\n- Add grid lines along both the x and y axes.\n- Place a legend in the upper right corner with the label \"Measurement Data\".",
        "raw_output_metric": [
            "Rainfall (mm)",
            "Humidity (%)",
            "Rainfall vs Humidity Analysis",
            "Measurement Data",
            "figsize=(10,6)",
            "plt.scatter",
            "color='blue'",
            "marker='o'",
            "xlim(0,200)",
            "ylim(20,100)",
            "plt.grid",
            "loc='upper right'",
            "50"
        ],
        "VQA": {
            "What is the title displayed at the top of the scatter plot?": "Rainfall vs Humidity Analysis",
            "What is the label on the x-axis?": "Rainfall (mm)",
            "What is the label on the y-axis?": "Humidity (%)",
            "How many data points are visible in the plot?": "50",
            "What is the range of the x-axis?": "0 to 200",
            "What is the range of the y-axis?": "20 to 100",
            "Where is the legend located and what does it label the data as?": "Upper right corner, 'Measurement Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000817",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing rainfall data for 7 consecutive months.\n\nFeature Requirements:\n- Display a bar chart with exactly 7 bars corresponding to the month abbreviations \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", and \"Jul\".\n- Label the x-axis as \"Month\" with each month evenly spaced along the axis.\n- Label the y-axis as \"Rainfall (mm)\" with a visible range set from 0 to 250.\n- Use a gradient from the \"viridis\" colormap to color each bar distinctly.\n- Set a title at the top of the chart reading \"Monthly Rainfall Data\" in bold font.\n- Overlay each bar with its numerical rainfall value displayed above it.\n- Incorporate horizontal grid lines along the y-axis to improve readability.",
        "raw_output_metric": [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Month",
            "Rainfall (mm)",
            "Monthly Rainfall Data",
            "viridis",
            "grid"
        ],
        "VQA": {
            "What is the chart title displayed at the top of the chart?": "Monthly Rainfall Data",
            "Is the chart title styled in bold font?": "Yes",
            "How many bars are displayed in the bar chart?": "7",
            "What are the x-axis labels shown for each bar?": "Jan, Feb, Mar, Apr, May, Jun, Jul",
            "What is the x-axis labeled as?": "Month",
            "What is the y-axis labeled as?": "Rainfall (mm)",
            "What numerical range is visible on the y-axis?": "0 to 250",
            "What type of colormap gradient is used to color the bars?": "viridis",
            "Is each bar overlaid with its numerical rainfall value?": "Yes",
            "Are horizontal grid lines displayed along the y-axis?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000818",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart representing monthly sales figures over a year.\n\nFeature Requirements:\n- Create a bar chart displaying exactly 12 bars corresponding to each month from January to December.\n- Label the x-axis with the abbreviated month names and the y-axis with \"Sales (in USD)\".\n- Set the chart title at the top as \"Monthly Sales Overview\".\n- Use a uniform green color for all bars with distinct black borders.\n- Draw grid lines only along the y-axis to enhance data readability.\n- Annotate each bar with its corresponding sales figure placed just above the bar.\n- Configure the y-axis range to start at 0 and extend to 10% above the highest sales value.\n- Position a legend in the upper right corner with the label \"2023 Sales Data\".",
        "raw_output_metric": [
            "Monthly Sales Overview",
            "Sales (in USD)",
            "2023 Sales Data",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "green",
            "black",
            "plt.bar(",
            "plt.annotate(",
            "plt.grid(axis='y')",
            "plt.ylim("
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "12",
            "Which months are represented on the x-axis?": "Each month from January to December (abbreviated)",
            "What is the label on the y-axis?": "Sales (in USD)",
            "What is the title of the chart?": "Monthly Sales Overview",
            "What color are the bars and how are their borders styled?": "Uniform green bars with distinct black borders",
            "Where are grid lines shown in the chart?": "Only along the y-axis",
            "Are the bars annotated with their sales figures?": "Yes, each bar is annotated with its corresponding sales figure above it",
            "How is the y-axis range configured?": "It starts at 0 and extends to 10% above the highest sales value",
            "Where is the legend placed and what does it indicate?": "In the upper right corner with the label '2023 Sales Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000819",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing the average monthly rainfall data.\n\nFeature Requirements:\n- Plot exactly 12 bars where each bar represents a month from January to December.\n- Label the x-axis as \"Month\" and the y-axis as \"Rainfall (mm)\".\n- Set the plot title to \"Average Monthly Rainfall\".\n- Use alternating colors for the bars, for example using blue and green in sequence.\n- Display only the abbreviated month names (e.g., Jan, Feb, etc.) as x-axis tick labels.\n- Include horizontal grid lines on the y-axis to aid in reading the rainfall values.\n- Set the y-axis limit from 0 to 300 to cover the range of rainfall data.",
        "raw_output_metric": [
            "plt.bar",
            "plt.xlabel",
            "Month",
            "plt.ylabel",
            "Rainfall (mm)",
            "plt.title",
            "Average Monthly Rainfall",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "blue",
            "green",
            "plt.grid",
            "plt.ylim(0, 300)"
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "12",
            "What is the title of the plot?": "Average Monthly Rainfall",
            "What is the label of the x-axis?": "Month",
            "What is the label of the y-axis?": "Rainfall (mm)",
            "What text labels are shown on the x-axis ticks?": "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec",
            "What is the color pattern used for the bars?": "Alternating blue and green",
            "Are horizontal grid lines visible on the chart?": "Yes",
            "What are the defined limits for the y-axis?": "0 to 300"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000820",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot visualizing vehicle performance data.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Distance (km)\" and the y-axis labeled as \"Speed (km/h)\".\n- Plot exactly 15 data points with predefined arrays representing distance and speed.\n- Use red circular markers to represent each data point.\n- Include a title at the top of the plot with the text \"Vehicle Speed vs Distance\".\n- Set the x-axis range from 0 to 200 and the y-axis range from 0 to 150.\n- Add grid lines for both axes, showing only the major ticks.\n- Include a legend in the lower right corner with the label \"Vehicle Data\".\n- Draw a dashed horizontal line at a y-value of 100 to mark a speed threshold.\n- Annotate each data point with its corresponding index number from 1 to 15.",
        "raw_output_metric": [
            "Distance (km)",
            "Speed (km/h)",
            "Vehicle Speed vs Distance",
            "plt.scatter",
            "red",
            "o",
            "15",
            "plt.xlim(0, 200)",
            "plt.ylim(0, 150)",
            "plt.grid",
            "Vehicle Data",
            "plt.legend",
            "plt.axhline",
            "y=100",
            "linestyle='--'",
            "plt.annotate"
        ],
        "VQA": {
            "What is the title displayed at the top of the plot?": "Vehicle Speed vs Distance",
            "What labels are used for the x-axis and y-axis?": "x-axis: Distance (km), y-axis: Speed (km/h)",
            "How many data points are plotted on the scatter plot?": "15",
            "What are the marker style and color used for the data points?": "Red circular markers",
            "What are the ranges set for the x-axis and y-axis?": "x-axis: 0 to 200, y-axis: 0 to 150",
            "Are there grid lines shown on the plot, and if so, what type?": "Yes, major grid lines for both axes",
            "Where is the legend located and what label does it display?": "Lower right corner, displaying 'Vehicle Data'",
            "What feature highlights a speed threshold on the plot?": "A dashed horizontal line at y = 100",
            "How are the data points annotated?": "Each data point is annotated with its index number from 1 to 15"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000821",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing average monthly sales figures.\n\nFeature Requirements:\n- Display a bar chart with the x-axis labeled \"Month\" and the y-axis labeled \"Sales (in Units)\".\n- Include a title at the top of the plot with the text \"Average Monthly Sales\".\n- Plot exactly 12 bars corresponding to the months January through December.\n- Use a different shade of green for each bar to visually distinguish the months.\n- Add numeric annotations above each bar showing the exact sales figure.\n- Configure the x-axis to display the abbreviated month names (e.g., Jan, Feb, Mar, etc.).\n- Add horizontal grid lines along the y-axis to assist in reading the sales values.",
        "raw_output_metric": [
            "Month",
            "Sales (in Units)",
            "Average Monthly Sales",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Average Monthly Sales",
            "What label is used for the x-axis?": "Month",
            "What label is used for the y-axis?": "Sales (in Units)",
            "How many bars are shown in the chart?": "12",
            "How are the different months visually distinguished in the bar chart?": "Each bar uses a different shade of green",
            "What text is shown above each bar?": "The exact sales figure",
            "How are the month names displayed on the x-axis?": "As abbreviated names (e.g., Jan, Feb, Mar, etc.)",
            "What type of grid lines are included to assist in reading the sales values?": "Horizontal grid lines along the y-axis"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000822",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing vehicle speed and fuel efficiency.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Speed (km/h)\" and the y-axis labeled as \"Fuel Efficiency (L/100km)\".\n- Plot exactly 12 data points representing different vehicle speed and fuel efficiency pairs.\n- Each data point should be marked with a red circular marker.\n- Add a title at the top center with the text \"Speed vs. Fuel Efficiency\".\n- Set the x-axis range from 0 to 200 km/h and the y-axis range from 3 to 15 L/100km.\n- Show grid lines on both the x-axis and y-axis.\n- Include a horizontal dashed black threshold line at y=8 L/100km.\n- Add a legend in the upper right corner with the label \"Vehicle Data\".",
        "raw_output_metric": [
            "Speed (km/h)",
            "Fuel Efficiency (L/100km)",
            "Speed vs. Fuel Efficiency",
            "Vehicle Data",
            "plt.scatter",
            "red",
            "o",
            "xlim(0, 200)",
            "ylim(3, 15)",
            "plt.axhline",
            "8",
            "color='k'",
            "linestyle='--'",
            "plt.grid",
            "plt.legend"
        ],
        "VQA": {
            "What is the label on the x-axis of the scatter plot?": "Speed (km/h)",
            "What is the label on the y-axis of the scatter plot?": "Fuel Efficiency (L/100km)",
            "How many data points are displayed in the scatter plot?": "12",
            "What color and shape are used for the markers?": "Red circular markers",
            "What is the title of the scatter plot?": "Speed vs. Fuel Efficiency",
            "What are the specified ranges for the x-axis and y-axis?": "x-axis: 0 to 200 km/h, y-axis: 3 to 15 L/100km",
            "What additional visual elements (grid lines, threshold line, legend) are included?": "Grid lines on both axes, a horizontal dashed black threshold line at y=8 L/100km, and a legend in the upper right corner labeled 'Vehicle Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000823",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing monthly rainfall amounts.\n\nFeature Requirements:\n- Construct a bar chart with exactly 8 bars, each representing one of the months from January to August.\n- Label the x-axis as \"Month\" and the y-axis as \"Rainfall (mm)\".\n- Include a plot title at the top reading \"Monthly Rainfall Totals\".\n- Color each bar with a gradient fill transitioning from light blue at the start to dark blue at the end.\n- Set the x-axis ticks to display the abbreviated month names (e.g., Jan, Feb, Mar, etc.).\n- Outline each bar with a thin black border to clearly separate them.\n- Add horizontal grid lines along the y-axis to improve data readability.\n- Annotate each bar at its top with the corresponding rainfall value.",
        "raw_output_metric": [
            "Monthly Rainfall Totals",
            "Month",
            "Rainfall (mm)",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "edgecolor='black'",
            "lightblue",
            "darkblue"
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "8",
            "What label is shown on the x-axis?": "Month",
            "What label is shown on the y-axis?": "Rainfall (mm)",
            "What is the title of the chart?": "Monthly Rainfall Totals",
            "Which month abbreviations are visible on the x-axis?": "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug",
            "Do the bars display a gradient fill? If so, what is the color transition?": "Yes, from light blue to dark blue",
            "How are the bars outlined?": "They have a thin black border",
            "What additional feature is used to enhance data readability along the y-axis?": "Horizontal grid lines",
            "What type of annotation is present on each bar?": "The corresponding rainfall value is annotated at the top"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000824",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart displaying the number of muffins sold each day over one week.\n\nFeature Requirements:\n- Create exactly 7 vertical bars, each representing a day of the week.\n- Set the x-axis with the day names: \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\".\n- Label the y-axis as \"Muffins Sold\" and use a range from 0 to 100.\n- Include a title at the top that reads \"Weekly Muffin Sales\".\n- Use distinct pastel colors for each bar to differentiate the days.\n- Add grid lines along the y-axis to enhance readability.\n- Place a legend at the upper right corner with the label \"Daily Sales\".",
        "raw_output_metric": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Muffins Sold",
            "Weekly Muffin Sales",
            "Daily Sales"
        ],
        "VQA": {
            "How many vertical bars are displayed on the chart?": "7",
            "Which days of the week are labeled along the x-axis?": "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday",
            "What label is assigned to the y-axis?": "Muffins Sold",
            "What is the chart title displayed at the top?": "Weekly Muffin Sales",
            "What is the range set for the y-axis?": "0 to 100",
            "What type of colors are used for the bars?": "Distinct pastel colors",
            "Is there a legend shown on the chart and what is its label?": "Yes, 'Daily Sales'",
            "Are grid lines present and if so, where?": "Yes, along the y-axis"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000825",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing quarterly sales data across five distinct regions.\n\nFeature Requirements:\n- Display a bar chart with the x-axis labeled as \"Region\" and the y-axis labeled as \"Sales (in million USD)\".\n- Include a title at the top with the text \"Quarterly Sales by Region\".\n- Plot exactly 5 bars representing the regions \"North\", \"South\", \"East\", \"West\", and \"Central\".\n- Use a different color for each bar sourced from a standard color palette.\n- Place numeric labels above each bar indicating the sales values.\n- Add horizontal grid lines along the y-axis to improve data readability.\n- Set the y-axis range from 0 to a maximum value that accommodates all sales data comfortably.\n- Ensure the plot is structured with evenly spaced bars for clear visual separation.",
        "raw_output_metric": [
            "plt.xlabel('Region')",
            "plt.ylabel('Sales (in million USD)')",
            "plt.title('Quarterly Sales by Region')",
            "'North'",
            "'South'",
            "'East'",
            "'West'",
            "'Central'",
            "plt.bar",
            "plt.grid",
            "plt.ylim"
        ],
        "VQA": {
            "What is the chart title at the top?": "Quarterly Sales by Region",
            "How many bars are displayed in the chart?": "5",
            "Which regions are represented by the bars?": "North, South, East, West, Central",
            "What label is displayed on the x-axis?": "Region",
            "What label is displayed on the y-axis?": "Sales (in million USD)",
            "Are numeric sales values shown above each bar?": "Yes",
            "Do the bars feature different colors from a standard palette?": "Yes",
            "Are horizontal grid lines visible along the y-axis?": "Yes",
            "Is the y-axis range set to start from 0?": "Yes",
            "Are the bars evenly spaced for clear visual separation?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000826",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot that displays the relationship between study time and exam scores for 15 students.\n\nFeature Requirements:\n- Plot exactly 15 data points representing pairs of study time (in hours) and exam scores (in percentage).\n- Label the x-axis as \"Study Time (hours)\" and the y-axis as \"Exam Score (%)\".\n- Use red circular markers for each data point to clearly indicate individual scores.\n- Set the x-axis range from 0 to 20 and the y-axis range from 0 to 100.\n- Include a title \"Study Time vs Exam Scores\" at the top of the plot.\n- Add grid lines across the plot to assist with data point alignment.\n- Annotate the data point with the highest exam score using an arrow and the label \"Top Score\".\n- Draw a horizontal dashed line at the average exam score across all data points.",
        "raw_output_metric": [
            "15",
            "Study Time (hours)",
            "Exam Score (%)",
            "Study Time vs Exam Scores",
            "Top Score",
            "red",
            "0",
            "20",
            "100",
            "plt.scatter",
            "plt.xlabel",
            "plt.ylabel",
            "plt.title",
            "plt.xlim(0, 20)",
            "plt.ylim(0, 100)",
            "plt.grid",
            "plt.annotate",
            "plt.axhline"
        ],
        "VQA": {
            "How many data points are plotted?": "15",
            "What is the x‑axis label?": "Study Time (hours)",
            "What is the y‑axis label?": "Exam Score (%)",
            "What color and shape are the markers used for the data points?": "Red circular markers",
            "What is the range of the x‑axis?": "0 to 20",
            "What is the range of the y‑axis?": "0 to 100",
            "What is the title of the scatter plot?": "Study Time vs Exam Scores",
            "How is the highest exam score annotated?": "Annotated with an arrow and labeled 'Top Score'",
            "What kind of line is drawn at the average exam score?": "A horizontal dashed line"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000827",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart to display the number of visitors at a museum over the course of a week.\n\nFeature Requirements:\n- Display a bar chart with exactly 7 bars representing each day of the week.\n- Label the x-axis as \"Days of Week\" with tick labels: \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\".\n- Label the y-axis as \"Visitor Count\" with a range that fits the provided data.\n- Include a title at the top with the text \"Museum Visitors per Day\".\n- Use orange-colored bars with black edges to differentiate each day.\n- Add horizontal grid lines along the y-axis to improve readability.\n- Include a legend in the bottom right corner with the label \"Daily Count\".",
        "raw_output_metric": [
            "Museum Visitors per Day",
            "Days of Week",
            "Visitor Count",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "Daily Count",
            "orange",
            "black"
        ],
        "VQA": {
            "How many bars represent the days of the week?": "7",
            "What are the tick labels on the x-axis?": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
            "What is the label for the x-axis?": "Days of Week",
            "What is the label for the y-axis?": "Visitor Count",
            "What is the title displayed at the top of the chart?": "Museum Visitors per Day",
            "What are the colors used for the bars and their edges?": "Orange bars with black edges",
            "Are there grid lines displayed, and if so, where?": "Horizontal grid lines along the y-axis",
            "What is the position and label of the legend?": "Bottom right corner with label 'Daily Count'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000828",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot visualizing car engine displacement versus mileage using a preset data array.\n\nFeature Requirements:\n- Create a scatter plot using 20 data points evenly distributed along both axes.\n- Label the x-axis as \"Engine Displacement (cc)\" and the y-axis as \"Mileage (mpg)\".\n- Set the title of the plot to \"Engine Displacement vs. Mileage\".\n- Use red circular markers for each data point with a marker size of 50.\n- Display grid lines on both axes with ticks incremented appropriately.\n- Set the x-axis range from 1000 to 5000 cc and the y-axis range from 10 to 50 mpg.\n- Include a legend located in the lower right corner with the label \"Car Data\".",
        "raw_output_metric": [
            "Engine Displacement (cc)",
            "Mileage (mpg)",
            "Engine Displacement vs. Mileage",
            "Car Data",
            "plt.scatter",
            "marker='o'",
            "color='red'",
            "s=50",
            "20",
            "1000",
            "5000",
            "10",
            "50",
            "plt.xlabel",
            "plt.ylabel",
            "plt.title",
            "plt.legend",
            "plt.grid"
        ],
        "VQA": {
            "How many data points are plotted on the scatter plot?": "20",
            "What is the title of the plot?": "Engine Displacement vs. Mileage",
            "What label appears on the x-axis?": "Engine Displacement (cc)",
            "What label appears on the y-axis?": "Mileage (mpg)",
            "What color and shape are the markers in the scatter plot?": "Red circular markers",
            "What is the marker size used in the scatter plot?": "50",
            "What is the range set on the x-axis?": "1000 to 5000 cc",
            "What is the range set on the y-axis?": "10 to 50 mpg",
            "Is there a legend displayed on the plot?": "Yes",
            "Where is the legend located and what does it label?": "Lower right corner with the label 'Car Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000829",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing altitude and wind speed measurements.\n\nFeature Requirements:\n- Create a scatter plot using red circular markers for each data point.\n- Label the x-axis as \"Altitude (m)\" and the y-axis as \"Wind Speed (km/h)\".\n- Display a title at the top reading \"Wind Speed vs Altitude\".\n- Plot exactly 12 data points, ensuring the x-axis values range from 0 to 5000 and the y-axis values span from 5 to 30.\n- Add dashed grid lines to both the x and y axes.\n- Include a legend in the lower right corner with the label \"Data Points\".\n- Annotate each data point by displaying its altitude value next to the marker in a small font.\n- Set the x-axis limits from 0 to 5000 and the y-axis limits from 0 to 35.\n- Use a light grey background color for the plot area to enhance marker visibility.",
        "raw_output_metric": [
            "plt.scatter",
            "marker='o'",
            "color='red'",
            "Altitude (m)",
            "Wind Speed (km/h)",
            "Wind Speed vs Altitude",
            "plt.xlim(0, 5000)",
            "plt.ylim(0, 35)",
            "linestyle='--'",
            "Data Points",
            "annotate",
            "12",
            "lightgrey"
        ],
        "VQA": {
            "What is the x-axis label of the scatter plot?": "Altitude (m)",
            "What is the y-axis label of the scatter plot?": "Wind Speed (km/h)",
            "What is the title displayed at the top of the plot?": "Wind Speed vs Altitude",
            "How many data points are plotted in the scatter plot?": "12",
            "What color and shape are the markers used for the data points?": "Red circular markers",
            "Where is the legend positioned and what label does it display?": "Lower right corner with the label 'Data Points'",
            "What type of grid lines are present on the plot?": "Dashed grid lines on both the x and y axes",
            "What are the set limits for the x-axis and y-axis?": "x-axis: 0 to 5000; y-axis: 0 to 35"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000830",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart visualizing monthly regional sales performance.\n\nFeature Requirements:\n- Display a bar chart with the x-axis labeled as \"Months\" and the y-axis labeled as \"Sales (Units)\".\n- Include a centered title at the top with the text \"Monthly Sales Performance\".\n- Plot exactly 12 bars, each representing one month from January to December.\n- Use a distinct color for each bar selected from a predefined set of 12 colors.\n- Add numerical annotations above each bar displaying the exact sales figures.\n- Configure x-axis ticks to correspond to the abbreviated month names (Jan, Feb, ..., Dec).\n- Apply horizontal grid lines on the y-axis to enable easier comparison of sales values.\n- Automatically adjust the y-axis range based on the provided sales data.",
        "raw_output_metric": [
            "import matplotlib.pyplot as plt",
            "plt.bar",
            "plt.xlabel('Months')",
            "plt.ylabel('Sales (Units)')",
            "plt.title('Monthly Sales Performance')",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "plt.xticks",
            "plt.grid"
        ],
        "VQA": {
            "What is the label for the x-axis?": "Months",
            "What is the label for the y-axis?": "Sales (Units)",
            "What is the centered title at the top of the chart?": "Monthly Sales Performance",
            "How many bars are displayed in the chart?": "12",
            "Are the x-axis ticks labeled with abbreviated month names (e.g., Jan, Feb, etc.)?": "Yes",
            "Does each bar use a distinct color from a predefined set of 12 colors?": "Yes",
            "Are numerical sales figures annotated above each bar?": "Yes",
            "Are horizontal grid lines applied on the y-axis for easier comparison?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000831",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot illustrating the relationship between individuals' ages and their annual incomes.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Age (years)\" and the y-axis labeled as \"Annual Income (USD)\".\n- Plot exactly 15 data points representing individual samples.\n- Use red circular markers with a marker size set to 50.\n- Add a centered title at the top with the text \"Income vs. Age Distribution\".\n- Set the x-axis range from 0 to 100 and the y-axis range from 0 to 50000.\n- Incorporate dashed grey grid lines on both the x and y axes.\n- Include a legend positioned in the lower right corner with the label \"Sample Data\".\n- Display a light gray background for the plotting area.",
        "raw_output_metric": [
            "Age (years)",
            "Annual Income (USD)",
            "Income vs. Age Distribution",
            "Sample Data",
            "15",
            "red",
            "50",
            "0",
            "100",
            "50000",
            "--",
            "grey",
            "lightgray"
        ],
        "VQA": {
            "What is the label on the x-axis?": "Age (years)",
            "What is the label on the y-axis?": "Annual Income (USD)",
            "How many data points are plotted?": "15",
            "What color and shape are the markers used?": "Red circular markers",
            "What is the marker size set to?": "50",
            "What is the title displayed at the top?": "Income vs. Age Distribution",
            "What are the x-axis and y-axis ranges?": "X-axis: 0 to 100, Y-axis: 0 to 50000",
            "How are the grid lines styled?": "Dashed grey lines on both axes",
            "Where is the legend positioned and what label does it display?": "Lower right corner; labeled 'Sample Data'",
            "What is the background color of the plotting area?": "Light gray"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000832",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart representing monthly website visitor counts.\n\nFeature Requirements:\n- Create a bar chart with exactly 12 bars, each representing a different month of the year.\n- Set the x-axis label to \"Month\" and the y-axis label to \"Visitor Count\".\n- Include a title at the top with the text \"Monthly Website Traffic\".\n- Use distinct shades of orange for each bar to differentiate the months.\n- Add numerical labels above each bar that display the exact visitor counts.\n- Configure the y-axis to range from 0 to 5000 to appropriately reflect the visitor data.\n- Ensure grid lines appear on the y-axis to aid in reading the values.\n- Place a legend at the upper right corner with the label \"Visitor Data\".",
        "raw_output_metric": [
            "Monthly Website Traffic",
            "Month",
            "Visitor Count",
            "Visitor Data",
            "0",
            "5000",
            "orange",
            "12"
        ],
        "VQA": {
            "How many bars does the chart contain?": "12",
            "What does each bar represent?": "A different month of the year",
            "What is the label on the x-axis?": "Month",
            "What is the label on the y-axis?": "Visitor Count",
            "What is the chart title?": "Monthly Website Traffic",
            "What color scheme is used for the bars?": "Distinct shades of orange",
            "Are numerical labels displayed above each bar?": "Yes",
            "What is the y-axis range?": "0 to 5000",
            "Are grid lines present, and if so, on which axis?": "Y-axis",
            "Where is the legend located and what does it say?": "Upper right corner; Visitor Data"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000833",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing daily sales figures for a week.\n\nFeature Requirements:\n- Display a bar chart with exactly 7 bars, each representing a day of the week (Monday through Sunday).\n- Label the x-axis as \"Days of the Week\" and the y-axis as \"Sales (Units)\".\n- Include a title at the top of the plot with the text \"Weekly Sales Report\".\n- Use a distinct color for each bar selected from a predefined color palette.\n- Add horizontal grid lines corresponding to the y-axis values to enhance visualization.\n- Set the y-axis range from 0 to the maximum sales value incremented by 10.\n- Display the numerical sales value at the top of each bar.\n- Include a legend in the lower right corner with the label \"Daily Sales\".",
        "raw_output_metric": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Days of the Week",
            "Sales (Units)",
            "Weekly Sales Report",
            "Daily Sales"
        ],
        "VQA": {
            "How many bars are displayed on the chart?": "7",
            "Which days of the week are represented on the x-axis?": "Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday",
            "What is the label of the x-axis?": "Days of the Week",
            "What is the label of the y-axis?": "Sales (Units)",
            "What is the title of the plot?": "Weekly Sales Report",
            "How is the color of each bar determined?": "Each bar uses a distinct color from a predefined color palette",
            "Where is the legend located and what does it display?": "Lower right corner with the label 'Daily Sales'",
            "What is the y-axis range set to?": "From 0 to the maximum sales value incremented by 10",
            "What additional information is shown on each bar?": "The numerical sales value is displayed at the top of each bar"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000834",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot to illustrate the relationship between study time and exam performance using predefined data arrays.\n\nFeature Requirements:\n- Plot exactly 12 data points representing individual students with study times on the x-axis and exam scores on the y-axis.\n- Label the x-axis as \"Study Time (hours)\" and the y-axis as \"Exam Score (%)\".\n- Use circular markers colored in dark green to represent each data point.\n- Include a title at the top of the plot with the text \"Study Time vs Exam Performance\".\n- Add dashed grid lines to both the x and y axes to improve readability.\n- Set the x-axis range from 0 to 10 and the y-axis range from 0 to 100.",
        "raw_output_metric": [
            "Study Time vs Exam Performance",
            "Study Time (hours)",
            "Exam Score (%)",
            "darkgreen",
            "marker='o'",
            "plt.scatter",
            "plt.xlim(0, 10)",
            "plt.ylim(0, 100)",
            "plt.grid",
            "linestyle='--'",
            "12"
        ],
        "VQA": {
            "How many data points are plotted?": "12",
            "What is the label on the x-axis?": "Study Time (hours)",
            "What is the label on the y-axis?": "Exam Score (%)",
            "What color are the markers?": "dark green",
            "What shape are the markers?": "circular",
            "What is the title of the plot?": "Study Time vs Exam Performance",
            "What style are the grid lines?": "dashed",
            "What is the range set for the x-axis?": "0 to 10",
            "What is the range set for the y-axis?": "0 to 100"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000835",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing product categories and their associated sales figures.\n\nFeature Requirements:\n- Create a bar chart with the x-axis labeled as \"Product Categories\" and the y-axis labeled as \"Sales Figures\".\n- Use exactly 8 bars each representing a unique product category.\n- Assign a solid green fill color to the bars and a thin black outline for each bar.\n- Set the chart title to \"Monthly Product Sales\" and center it at the top of the plot.\n- Display the exact sales number above each bar as data labels.\n- Establish the y-axis range from 0 to 200 to accommodate all sales figures.\n- Add grid lines only on the y-axis to improve readability.\n- Place a legend in the lower right corner with the label \"Sales Data\".\n- Define the x-axis ticks to align precisely under each corresponding bar.",
        "raw_output_metric": [
            "Monthly Product Sales",
            "Product Categories",
            "Sales Figures",
            "Sales Data",
            "green",
            "black",
            "0",
            "200",
            "8"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Monthly Product Sales",
            "What is the label for the x-axis?": "Product Categories",
            "What is the label for the y-axis?": "Sales Figures",
            "How many bars are displayed in the chart?": "8",
            "What fill color and outline are used for the bars?": "Solid green fill with a thin black outline",
            "What is the y-axis range in the chart?": "0 to 200",
            "Are data labels showing exact sales numbers visible above each bar?": "Yes",
            "Where is the legend placed and what label does it have?": "Lower right corner with label 'Sales Data'",
            "Are grid lines added on both axes or only on one?": "Only on the y-axis"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000836",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar plot displaying wind speed measurements at various elevation levels.\n\nFeature Requirements:\n- Create a bar plot with 8 discrete bars representing different elevation categories.\n- Label the x-axis as \"Elevation (m)\" with values distributed evenly between 0 and 3500.\n- Label the y-axis as \"Wind Speed (m/s)\" displaying a range from 0 to 25.\n- Color each bar with a distinct shade of green derived from a continuous gradient.\n- Place the title \"Wind Speed by Elevation\" prominently at the top of the plot.\n- Add numerical annotations above each bar showing the exact wind speed value.\n- Include grid lines along the y-axis only to improve readability.\n- Ensure that all elevation values are evenly spaced and clearly visible on the x-axis.",
        "raw_output_metric": [
            "Elevation (m)",
            "Wind Speed (m/s)",
            "Wind Speed by Elevation",
            "plt.bar(",
            "np.linspace(0, 3500, 8)",
            "plt.ylim(0, 25)",
            "plt.grid(axis='y')",
            "get_cmap('Greens')",
            "annotate("
        ],
        "VQA": {
            "How many discrete bars represent different elevation categories?": "8",
            "What is the x-axis label?": "Elevation (m)",
            "What is the range of elevation values on the x-axis?": "Evenly distributed between 0 and 3500",
            "What is the y-axis label?": "Wind Speed (m/s)",
            "What is the wind speed range on the y-axis?": "0 to 25",
            "How are the bars colored?": "Each bar has a distinct shade of green derived from a continuous gradient",
            "What is the title of the plot?": "Wind Speed by Elevation",
            "Are there numerical annotations above each bar?": "Yes, showing the exact wind speed value",
            "Where are the grid lines added?": "Along the y-axis only"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000837",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using provided data arrays representing wind speed and humidity measurements.\n\nFeature Requirements:\n- Plot exactly 15 data points evenly distributed along the x-axis representing wind speed values.\n- Label the x-axis as \"Wind Speed (km/h)\" and the y-axis as \"Humidity (%)\".\n- Use red circular markers for each data point.\n- Set the plot title to \"Wind Speed vs Humidity Measurements\".\n- Include grid lines on the plot to clearly delineate both axes.\n- Set the x-axis range from 0 to 25 and the y-axis range from 30 to 100.\n- Add a legend positioned at the lower right with the label \"Data Points\".",
        "raw_output_metric": [
            "import matplotlib.pyplot as plt",
            "plt.scatter",
            "Wind Speed (km/h)",
            "Humidity (%)",
            "Wind Speed vs Humidity Measurements",
            "red",
            "o",
            "plt.xlim",
            "plt.ylim",
            "plt.grid",
            "plt.legend",
            "lower right",
            "Data Points",
            "15"
        ],
        "VQA": {
            "How many data points are visible in the scatter plot?": "15",
            "Are the data points represented by red circular markers?": "Yes",
            "What label is present on the x-axis?": "Wind Speed (km/h)",
            "What label is used for the y-axis?": "Humidity (%)",
            "What is the title of the plot?": "Wind Speed vs Humidity Measurements",
            "Can grid lines be seen to delineate both axes?": "Yes",
            "What is the range of values displayed on the x-axis?": "0 to 25",
            "What is the range of values displayed on the y-axis?": "30 to 100",
            "Is there a legend on the plot and where is it located?": "Yes, at the lower right with the label 'Data Points'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000838",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using pre-defined data arrays representing sales figures for six different regions.\n\nFeature Requirements:\n- Create a bar chart with exactly 6 bars, each representing one of the following regions: North, South, East, West, Central, and International.\n- Label the x-axis as \"Regions\" and the y-axis as \"Sales (in thousands)\".\n- Use distinct colors for each bar selected from a sequential colormap such as 'viridis'.\n- Include a centered title at the top of the plot with the text \"Regional Sales Figures\".\n- Set the y-axis range from 0 to a value that is 20% greater than the highest sales figure.\n- Add grid lines only on the y-axis to improve data readability.\n- Annotate each bar with its corresponding sales figure displayed above the bar.\n- Specify the figure size to be 10 inches wide by 6 inches tall.",
        "raw_output_metric": [
            "North",
            "South",
            "East",
            "West",
            "Central",
            "International",
            "Regions",
            "Sales (in thousands)",
            "Regional Sales Figures",
            "viridis",
            "figsize=(10,6)"
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "6",
            "Which regions are represented on the x-axis?": "North, South, East, West, Central, International",
            "What is the label on the x-axis?": "Regions",
            "What is the label on the y-axis?": "Sales (in thousands)",
            "What is the title of the chart?": "Regional Sales Figures",
            "Are grid lines shown and on which axis?": "Grid lines are shown only on the y-axis",
            "Are the sales figures annotated on the chart?": "Yes, each bar has its corresponding sales figure displayed above it",
            "Are the bars uniquely colored?": "Yes, each bar uses a distinct color from the 'viridis' colormap",
            "What are the dimensions of the figure?": "10 inches wide by 6 inches tall"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000839",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing students' study hours and corresponding exam scores.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Study Hours\" and the y-axis labeled as \"Exam Score\".\n- Include a title at the top of the plot with the text \"Study Hours vs Exam Scores\".\n- Plot exactly 12 data points representing data collected from individual students.\n- Use red circular markers for each data point.\n- Overlay a dashed green line that represents the best-fit regression line calculated from the data.\n- Add grid lines exclusively along the y-axis to aid in assessing score intervals.\n- Set the x-axis range from 0 to 10 and the y-axis range from 0 to 100.\n- Place a legend in the lower right corner with the label \"Student Data\".\n- Ensure each marker is large enough (e.g., marker size 8) to be easily visible without overlapping excessively.",
        "raw_output_metric": [
            "Study Hours",
            "Exam Score",
            "Study Hours vs Exam Scores",
            "Student Data",
            "plt.scatter",
            "red",
            "o",
            "markersize=8",
            "plt.plot",
            "linestyle='--'",
            "green",
            "plt.xlim(0, 10)",
            "plt.ylim(0, 100)",
            "plt.grid",
            "axis='y'",
            "12"
        ],
        "VQA": {
            "What is the x-axis label on the scatter plot?": "Study Hours",
            "What is the label on the y-axis?": "Exam Score",
            "What title is displayed at the top of the plot?": "Study Hours vs Exam Scores",
            "How many data points are plotted on the scatter plot?": "12",
            "What color and shape are the markers used for the data points?": "Red circular markers",
            "What type of line is overlaid to represent the best-fit regression line?": "Dashed green line",
            "Which axis has grid lines displayed?": "Only the y-axis",
            "What are the specified ranges for the x-axis and y-axis?": "x-axis: 0 to 10, y-axis: 0 to 100",
            "Where is the legend placed and what label does it display?": "Lower right corner, label 'Student Data'",
            "What is the approximate marker size used in the scatter plot?": "Size 8"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000840",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing study hours and exam scores.\n\nFeature Requirements:\n- Plot exactly 15 data points representing individual students' study hours and corresponding exam scores.\n- Label the x-axis as \"Study Hours\" and the y-axis as \"Exam Scores\".\n- Include a title at the top with the text \"Study Hours vs Exam Scores Distribution\".\n- Use red circular markers with a size of 8 to display each data point.\n- Add grid lines to both the x-axis and y-axis to enhance plot readability.\n- Draw a horizontal dashed black line at y = 50 to indicate the minimum passing score.\n- Include a legend in the upper right corner with the label \"Student Data\".",
        "raw_output_metric": [
            "Study Hours",
            "Exam Scores",
            "Study Hours vs Exam Scores Distribution",
            "Student Data",
            "50",
            "red",
            "o",
            "8",
            "black",
            "dashed",
            "grid"
        ],
        "VQA": {
            "How many data points are plotted in the scatter plot?": "15",
            "What is the label on the x-axis?": "Study Hours",
            "What is the label on the y-axis?": "Exam Scores",
            "What is the title displayed at the top of the plot?": "Study Hours vs Exam Scores Distribution",
            "What are the characteristics of the data markers used in the scatter plot?": "Red circular markers with a size of 8",
            "Are grid lines visible on the plot?": "Yes, on both the x-axis and y-axis",
            "What horizontal line is drawn on the plot and what does it indicate?": "A dashed black line at y = 50 indicating the minimum passing score",
            "Where is the legend located and what label does it show?": "In the upper right corner with the label 'Student Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000841",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using generated data arrays representing engine RPM and vehicle speed.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Engine RPM\" and the y-axis labeled as \"Vehicle Speed (km/h)\".\n- Set the plot title to \"Performance Analysis: RPM vs Speed\".\n- Plot exactly 15 data points with x values ranging from 1000 to 5000 and y values ranging from 50 to 200.\n- Use red circular markers with a marker size of 50 for all plotted points.\n- Add grid lines to both axes using a dotted line style for clear reference.\n- Define the x-axis limit from 800 to 5200 and the y-axis limit from 40 to 210.",
        "raw_output_metric": [
            "Engine RPM",
            "Vehicle Speed (km/h)",
            "Performance Analysis: RPM vs Speed",
            "plt.scatter",
            "15",
            "red",
            "o",
            "s=50",
            "plt.xlabel",
            "plt.ylabel",
            "plt.title",
            "plt.grid",
            "linestyle=':'",
            "plt.xlim(800, 5200)",
            "plt.ylim(40, 210)"
        ],
        "VQA": {
            "What is the title of the scatter plot?": "Performance Analysis: RPM vs Speed",
            "What label is assigned to the x-axis?": "Engine RPM",
            "What label is assigned to the y-axis?": "Vehicle Speed (km/h)",
            "How many data points are plotted?": "15",
            "What are the color and shape of the markers?": "Red circular markers",
            "What is the size of the markers?": "50",
            "What is the defined limit for the x-axis?": "800 to 5200",
            "What is the defined limit for the y-axis?": "40 to 210",
            "How are the grid lines styled?": "Dotted lines on both axes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000842",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing height and weight measurements.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled as \"Height (cm)\" and the y-axis labeled as \"Weight (kg)\".\n- Include a title at the top of the plot with the text \"Height vs Weight Scatter Plot\".\n- Plot exactly 15 data points representing individual measurements.\n- Use red circle markers with a marker size of 50 for each data point.\n- Add grid lines on both the x and y axes to enhance visualization.\n- Set the x-axis range from 140 to 200 and the y-axis range from 40 to 100.\n- Include a legend in the lower right corner with the label \"Measurement Data\".",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the scatter plot?": "Height vs Weight Scatter Plot",
            "What label is used on the x-axis?": "Height (cm)",
            "What label is used on the y-axis?": "Weight (kg)",
            "How many data points are shown in the plot?": "15",
            "What color and shape are the markers used for the data points?": "Red circles",
            "What marker size is applied to each data point?": "50",
            "Are grid lines visible on both the x and y axes?": "Yes",
            "What are the x-axis and y-axis ranges set for the plot?": "x-axis: 140 to 200, y-axis: 40 to 100",
            "Where is the legend located and what is its label?": "Lower right; Measurement Data"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000843",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart displaying quarterly sales figures for three different products.\n\nFeature Requirements:\n- Use a grouped bar layout to display three products side by side for each of the 4 quarters.\n- Label the x-axis as \"Quarter\" with ticks labeled \"Q1\", \"Q2\", \"Q3\", and \"Q4\".\n- Label the y-axis as \"Sales (in Thousands)\".\n- Include a centered title \"Product Sales per Quarter\" at the top of the chart.\n- Use distinct colors for each product, such as red for Product A, green for Product B, and blue for Product C.\n- Draw horizontal grid lines across the y-axis to help indicate sales values.\n- Place a legend in the upper right corner identifying each product by name.",
        "raw_output_metric": [
            "Quarter",
            "Q1",
            "Q2",
            "Q3",
            "Q4",
            "Sales (in Thousands)",
            "Product Sales per Quarter",
            "Product A",
            "Product B",
            "Product C",
            "red",
            "green",
            "blue",
            "upper right"
        ],
        "VQA": {
            "What is the title of the chart?": "Product Sales per Quarter",
            "What label is used for the x-axis?": "Quarter",
            "What are the x-axis tick labels?": "Q1, Q2, Q3, Q4",
            "What label is used for the y-axis?": "Sales (in Thousands)",
            "How many products are represented in each quarter?": "Three",
            "What color represents Product A?": "Red",
            "What color represents Product B?": "Green",
            "What color represents Product C?": "Blue",
            "Where is the legend positioned?": "Upper right corner"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000844",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart that visualizes monthly sales data for a retail store.\n\nFeature Requirements:\n- Create a bar chart with the x-axis labeled as \"Month\" and the y-axis labeled as \"Sales (in USD)\".\n- Set the title of the chart as \"Monthly Sales Performance for 2022\" and position it at the top of the plot.\n- Plot exactly 12 bars, each representing a month from January to December.\n- Assign each bar a deep red color for a uniform appearance.\n- Add grid lines along the y-axis to clearly indicate the sales levels.\n- Display x-axis tick labels using abbreviated month names (e.g., Jan, Feb, Mar, etc.).\n- Include a legend in the upper right corner with the label \"Sales Data\".",
        "raw_output_metric": [
            "Month",
            "Sales (in USD)",
            "Monthly Sales Performance for 2022",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "deep red",
            "Sales Data",
            "upper right"
        ],
        "VQA": {
            "How many bars are displayed in the chart?": "12",
            "What is the x-axis label?": "Month",
            "What is the y-axis label?": "Sales (in USD)",
            "What is the title of the chart?": "Monthly Sales Performance for 2022",
            "What color are the bars?": "Deep red",
            "Are grid lines present, and if so, along which axis?": "Yes, along the y-axis",
            "How are the x-axis tick labels formatted?": "Abbreviated month names (Jan, Feb, Mar, etc.)",
            "Where is the legend placed in the plot?": "Upper right corner",
            "What label does the legend display?": "Sales Data"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000845",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot visualizing the relationship between study hours and exam scores.\n\nFeature Requirements:\n- Create a scatter plot with the x-axis labeled as \"Study Hours\" and the y-axis labeled as \"Exam Scores\".\n- Include exactly 15 data points where the x-values (study hours) range from 1 to 15 and the y-values represent randomly assigned exam scores between 50 and 100.\n- Use red circular markers for each data point in the plot.\n- Add a title at the top reading \"Study Hours vs Exam Scores\".\n- Include grid lines for both the x and y axes to improve data readability.\n- Set the x-axis range from 0 to 16 and the y-axis range from 45 to 105.\n- Display a legend in the lower right corner with the label \"Student Data\".",
        "raw_output_metric": [
            "Study Hours",
            "Exam Scores",
            "Study Hours vs Exam Scores",
            "Student Data",
            "red",
            "range(1, 16)",
            "np.random.randint(50, 101)",
            "plt.scatter",
            "plt.xlim(0, 16)",
            "plt.ylim(45, 105)",
            "plt.grid(True)"
        ],
        "VQA": {
            "What is the label of the x-axis?": "Study Hours",
            "What is the label of the y-axis?": "Exam Scores",
            "How many data points are shown in the scatter plot?": "15",
            "What range of values is displayed on the x-axis?": "0 to 16",
            "What range of values is displayed on the y-axis?": "45 to 105",
            "What is the title of the scatter plot?": "Study Hours vs Exam Scores",
            "What color are the scatter plot markers?": "Red",
            "What shape are the scatter plot markers?": "Circular",
            "Where is the legend located and what is its label?": "Lower right corner, 'Student Data'"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000846",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar plot using predefined data arrays representing sales figures for five distinct products across different regions.\n\nFeature Requirements:\n- Create a bar plot with exactly 5 bars, each representing a unique product labeled \"Product A\" through \"Product E\".\n- Label the x-axis as \"Products\" and the y-axis as \"Sales (in Thousand Units)\".\n- Set the plot title at the top with the text \"Regional Sales Distribution\".\n- Use a distinct shade of red for each bar while ensuring the colors remain within a similar tone range.\n- Display grid lines only along the y-axis to highlight sales values.\n- Ensure each bar has a uniform width of 0.6 and is evenly spaced across the x-axis.\n- Include a legend in the upper right corner with the label \"Sales Data\".",
        "raw_output_metric": [
            "Product A",
            "Product B",
            "Product C",
            "Product D",
            "Product E",
            "Products",
            "Sales (in Thousand Units)",
            "Regional Sales Distribution",
            "Sales Data",
            "0.6",
            "plt.bar",
            "axis='y'"
        ],
        "VQA": {
            "How many bars are displayed in the plot?": "5",
            "What are the labels for the 5 bars?": "Product A, Product B, Product C, Product D, Product E",
            "What is the label on the x-axis?": "Products",
            "What is the label on the y-axis?": "Sales (in Thousand Units)",
            "What text is shown as the title of the plot?": "Regional Sales Distribution",
            "What color theme is used for the bars?": "Distinct shades of red, all within a similar tone range",
            "Where are the grid lines displayed?": "Along the y-axis only",
            "What is the legend text and where is it positioned?": "Sales Data in the upper right corner",
            "What is the uniform width of each bar?": "0.6"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000847",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing altitude and wind speed measurements.\n\nFeature Requirements:\n- Display a scatter plot with the x-axis labeled \"Altitude (m)\" and the y-axis labeled \"Wind Speed (km/h)\".\n- Include a title at the top with the text \"Altitude vs Wind Speed Analysis\".\n- Plot exactly 12 data points representing various measurement recordings.\n- Use red circular markers with a defined size for each data point and do not connect the points with lines.\n- Configure the x-axis to show ticks at every 100 meters in the range of 0 to 1100.\n- Configure the y-axis to show ticks at every 10 km/h in the range of 0 to 120.\n- Add grid lines to both axes to improve data readability.\n- Place a legend in the lower right corner with the label \"Data Points\".\n- Ensure the plot background is set with a white canvas and no additional external graphics.",
        "raw_output_metric": [
            "Altitude (m)",
            "Wind Speed (km/h)",
            "Altitude vs Wind Speed Analysis",
            "Data Points",
            "red",
            "o",
            "100",
            "1100",
            "10",
            "120",
            "lower right"
        ],
        "VQA": {
            "What is the title text displayed at the top of the plot?": "Altitude vs Wind Speed Analysis",
            "What label is assigned to the x-axis?": "Altitude (m)",
            "What label is assigned to the y-axis?": "Wind Speed (km/h)",
            "How many data points are plotted in the scatter plot?": "12",
            "What type and color of markers are used for the data points?": "Red circular markers",
            "What is the tick interval and range on the x-axis?": "Every 100 meters from 0 to 1100",
            "What is the tick interval and range on the y-axis?": "Every 10 km/h from 0 to 120",
            "Where is the legend positioned and what is its label?": "Lower right corner, labeled 'Data Points'",
            "Are grid lines visible on the plot?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000848",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib bar chart using predefined data arrays representing daily rainfall measurements for a week.\n\nFeature Requirements:\n- Create a bar chart with the x-axis labeled as \"Day of Week\" and the y-axis labeled as \"Rainfall (mm)\".\n- Plot exactly 7 bars, each representing one day starting from Monday through Sunday.\n- Use a distinct color for each bar chosen from a predefined list of 7 colors.\n- Add grid lines along the y-axis to clearly indicate the increments of rainfall.\n- Place a title at the top of the chart with the text \"Weekly Rainfall Distribution\".\n- Rotate the x-axis labels by 45 degrees to ensure they are easily readable.\n- Ensure that each bar has a contrasting black outline to differentiate adjacent bars.",
        "raw_output_metric": [
            "Day of Week",
            "Rainfall (mm)",
            "Weekly Rainfall Distribution",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "45",
            "black"
        ],
        "VQA": {
            "How many bars are displayed on the chart?": "7",
            "What is the title of the chart?": "Weekly Rainfall Distribution",
            "What label is shown on the x-axis?": "Day of Week",
            "What label is shown on the y-axis?": "Rainfall (mm)",
            "Are there grid lines along the y-axis?": "Yes",
            "By how many degrees are the x-axis labels rotated?": "45",
            "Do the bars have a contrasting black outline?": "Yes"
        }
    },
    {
        "task_name": "Text to Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "task_id": "000849",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "rendering": true,
        "query": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib scatter plot using predefined data arrays representing each month of the year and corresponding sales revenue.\n\nFeature Requirements:\n- Plot exactly 12 data points representing the months from January to December.\n- Set the x-axis label to \"Month\" and configure the x-ticks to display abbreviated month names (\"Jan\", \"Feb\", ..., \"Dec\").\n- Set the y-axis label to \"Sales (in thousands)\" and define the y-axis range from 0 to 100.\n- Include a centered title at the top with the text \"Monthly Sales Overview\".\n- Use red circle markers with a marker size of 50 to represent the data points.\n- Add grid lines along both the x and y axes for improved readability.\n- Include a legend in the lower right corner with the label \"Sales Data\".",
        "raw_output_metric": [
            "Month",
            "Sales (in thousands)",
            "Monthly Sales Overview",
            "Sales Data",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "0",
            "100",
            "red",
            "o",
            "50"
        ],
        "VQA": {
            "How many data points are plotted in the scatter plot?": "12",
            "What is the label of the x-axis?": "Month",
            "What abbreviated month names are shown on the x-ticks?": "Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec",
            "What is the label of the y-axis?": "Sales (in thousands)",
            "What is the y-axis range?": "0 to 100",
            "What is the title displayed at the top of the plot?": "Monthly Sales Overview",
            "What marker style and color are used for the data points?": "Red circle markers",
            "What is the marker size used in the plot?": "50",
            "Are grid lines present in the scatter plot?": "Yes, along both the x and y axes",
            "Where is the legend located and what label does it display?": "Lower right corner; Sales Data"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000900",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a customer support ticket resolution process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Support Ticket Flowchart\".\n- Display exactly 4 main process steps, each within a unique node, connected sequentially with arrows.\n- Use a circle-shaped node to represent the initial ticket submission.\n- Use a diamond-shaped node to represent a decision point for escalation during the triage step.\n- Include a loopback arrow from the resolution step back to the triage step to indicate possible re-evaluation.\n- Assign a specific fill color (e.g., green) to the initial node and a different fill color (e.g., blue) to the final closure node.\n- Use rectangular nodes exclusively for process actions like ticket review and resolution.\n- Add a legend at the bottom of the diagram explaining the shapes used for the start, decision, and action nodes.\n- Ensure all arrows clearly indicate the directional flow from one node to the next.",
        "raw_output_metric": [
            "Support Ticket Flowchart",
            "Ticket Submission",
            "Triage",
            "Ticket Review",
            "Closure",
            "circle",
            "diamond",
            "rectangle",
            "green",
            "blue",
            "loopback arrow",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Support Ticket Flowchart",
            "How many main process steps are included in the diagram?": "4",
            "Which shape is used to represent the initial ticket submission?": "Circle",
            "What fill color is assigned to the initial ticket submission node?": "Green",
            "Which shape is used to represent the escalation decision point during triage?": "Diamond",
            "What fill color is assigned to the final closure node in the flowchart?": "Blue",
            "Are the ticket review and resolution steps depicted using rectangular nodes?": "Yes",
            "Is there a loopback arrow present, and where does it point from and to?": "From the resolution step back to the triage step",
            "Does the flowchart include a legend explaining the shapes used for start, decision, and action nodes?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000901",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual restaurant order management process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Restaurant Order Process Workflow\".\n- Display exactly 4 main process steps, each within its own unique rectangular node.\n- Use an oval-shaped node to represent the order confirmation stage.\n- Connect all nodes with solid arrows to indicate the sequential flow of the process.\n- Incorporate a loopback arrow that points from the order confirmation stage back to the initial order reception step.\n- Apply a green fill color for the order reception node and an orange fill color for the final delivery node.\n- Label each arrow with the specific action or decision taken between steps.\n- Add a legend at the bottom of the diagram that explains the meanings of the rectangular and oval node shapes.",
        "raw_output_metric": [
            "Restaurant Order Process Workflow",
            "Order Reception",
            "Meal Preparation",
            "Order Packaging",
            "Final Delivery",
            "Order Confirmation",
            "green",
            "orange",
            "legend",
            "rectangular",
            "oval",
            "-->"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Restaurant Order Process Workflow",
            "How many main process steps are represented by rectangular nodes?": "4",
            "Which stage is depicted using an oval shape?": "The Order Confirmation stage",
            "What fill color is applied to the Order Reception node?": "Green",
            "What fill color is used for the Final Delivery node?": "Orange",
            "How are the nodes connected?": "With solid arrows labeled with specific actions or decisions",
            "What does the loopback arrow indicate?": "It points from the Order Confirmation stage back to the Order Reception step",
            "What is explained in the legend at the bottom of the diagram?": "The meanings of rectangular and oval node shapes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000902",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual supply chain process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Supply Chain Overview\".\n- Display exactly 4 main stages: Procurement, Manufacturing, Distribution, and Retail, each represented as a unique node.\n- Connect all nodes sequentially with arrows that clearly indicate the flow from one stage to the next.\n- Use a parallelogram-shaped node to depict a Quality Check step immediately after the Manufacturing stage.\n- Include a loopback arrow from the Retail node back to the Procurement node, symbolizing a restock or feedback cycle.\n- Distinguish the starting Procurement node with one background color and the final Retail node with another distinct color.\n- Represent the Manufacturing and Distribution stages using rectangular nodes.\n- Integrate an additional oval-shaped node labeled \"Logistics\" connected to the Distribution stage to indicate a side process.\n- Add a note section at the bottom of the diagram labeled \"Annotations\" that explains the meanings of the node shapes and color codes.\n- Ensure the overall diagram follows a left-to-right directional flow.",
        "raw_output_metric": [
            "flowchart LR",
            "Supply Chain Overview",
            "Procurement",
            "Manufacturing",
            "Quality Check",
            "Distribution",
            "Logistics",
            "Retail",
            "Annotations",
            "-->"
        ],
        "VQA": {
            "What is the title displayed at the top of the diagram?": "Supply Chain Overview",
            "How many main stages are shown in the diagram?": "4",
            "Which main stages are included?": "Procurement, Manufacturing, Distribution, and Retail",
            "What shape is used for the Quality Check step placed after Manufacturing?": "Parallelogram",
            "Which stages are represented as rectangular nodes?": "Manufacturing and Distribution",
            "Which additional node is connected to the Distribution stage and what is its shape?": "Logistics; Oval",
            "Is there a loopback arrow from the Retail stage to the Procurement stage?": "Yes",
            "What note section is included at the bottom of the diagram?": "Annotations"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000903",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an organization hierarchy into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Organization Hierarchy\".\n- Display exactly 4 main branches representing distinct departments, each within its own node, arranged horizontally.\n- Use a circular-shaped node to depict the CEO at the top of the hierarchy.\n- Connect all nodes with arrows to represent direct reporting lines.\n- Include at least one subnode under each department to illustrate the position of a team lead.\n- Utilize rectangular nodes exclusively for department head positions.\n- Apply a unique fill color for each department branch to differentiate them visually.\n- Incorporate a loopback arrow on one department branch to indicate a recurring reporting cycle.\n- Arrange the diagram in a top-down hierarchical layout with clear directional flow.\n- Include a legend at the bottom of the diagram that clearly explains the meaning of all node shapes and colors used.",
        "raw_output_metric": [
            "graph TD",
            "Organization Hierarchy",
            "((CEO))",
            "[Department 1]",
            "[Department 2]",
            "[Department 3]",
            "[Department 4]",
            "Team Lead",
            "-->",
            "style",
            "fill:#",
            "legend"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Organization Hierarchy",
            "How many main department branches are displayed?": "4",
            "What shape is used for the CEO node?": "Circular",
            "What shape are the department head nodes?": "Rectangular",
            "Does each department branch include at least one subnode for a team lead?": "Yes",
            "How are the 4 main department nodes arranged?": "Horizontally",
            "Is there a loopback arrow shown on one of the department branches?": "Yes",
            "What is the directional layout of the diagram?": "Top-down hierarchical layout",
            "Do the department branches use unique fill colors?": "Yes",
            "Is there a legend included at the bottom of the diagram?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000904",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an online course enrollment process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Course Enrollment Process\".\n- Display exactly 4 main action steps, each contained in a unique rectangular node.\n- Use an oval-shaped node to represent the starting point and a hexagon-shaped node to denote the completion of the process.\n- Incorporate a diamond-shaped decision node labeled \"Prerequisites Met?\" that directs the flow into two distinct branches.\n- Draw a loopback arrow from the course selection step back to the decision node to allow re-evaluation.\n- Connect all nodes with clear directional arrows to maintain a sequential and logical flow.\n- Highlight the enrollment confirmation step by applying a distinct background color fill.\n- Append a legend at the bottom of the diagram that explains the meaning of the different node shapes and colors.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title at the top of the flowchart?": "Course Enrollment Process",
            "What shape is used to represent the starting point?": "Oval",
            "How many main action steps (rectangular nodes) are present?": "4",
            "What shape is used for the decision node labeled 'Prerequisites Met?'?": "Diamond",
            "What shape denotes the completion of the process?": "Hexagon",
            "Is there a loopback arrow from the course selection step back to the decision node?": "Yes",
            "How is the enrollment confirmation step highlighted?": "With a distinct background color fill",
            "What additional element is included at the bottom of the diagram?": "A legend explaining the meaning of node shapes and colors"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000905",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a weather monitoring system's architecture into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Weather Monitoring Architecture\".\n- Display exactly 4 main system components, each represented as distinct nodes.\n- Use a cylindrical shaped node to represent the data storage element.\n- Connect the components sequentially with directional arrows that illustrate the flow from data collection to processing and then to data output.\n- Use a diamond-shaped node to indicate a decision point for triggering weather alerts.\n- Incorporate a loopback arrow from the decision node to the data collection node to emphasize continuous monitoring.\n- Apply a unique color fill for the data collection and data output nodes to distinguish them from other components.\n- Include a legend at the bottom of the diagram that explains the meaning of each different node shape used.",
        "raw_output_metric": [
            "Weather Monitoring Architecture",
            "Data Collection",
            "Data Processing",
            "Data Storage",
            "Data Output",
            "((Data Storage))",
            "{",
            "Weather Alerts",
            "-->",
            "legend"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Weather Monitoring Architecture",
            "How many main system components are depicted as nodes?": "4",
            "Which node is represented using a cylindrical shape?": "Data Storage element",
            "What shape is used for the decision point that triggers weather alerts?": "Diamond",
            "How are the components connected to illustrate the flow?": "They are connected sequentially with directional arrows from data collection to processing to data output, with a loopback arrow from the decision node to data collection",
            "Which nodes have a unique color fill?": "The data collection and data output nodes",
            "What does the legend at the bottom of the diagram explain?": "It explains the meaning of each different node shape used"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000906",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a detailed description of a space station maintenance procedure into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Space Station Maintenance\".\n- Represent exactly 4 distinct maintenance phases as individual nodes.\n- Use circular nodes for the start and finish steps, each with a unique fill color.\n- Incorporate one diamond-shaped node to signify a quality inspection decision point during the process.\n- Connect all nodes with directional arrows to indicate the sequence of operations.\n- Add one loop arrow from the quality inspection node back to the repair action to represent a repeatable step.\n- Use rectangular nodes exclusively for all standard action steps.\n- Label every node clearly with the name of the maintenance phase or action.\n- Include a legend at the bottom describing the meanings of the circular, diamond, and rectangular node shapes.",
        "raw_output_metric": [
            "graph LR",
            "Space Station Maintenance",
            "start",
            "finish",
            "Maintenance Phase 1",
            "Maintenance Phase 2",
            "Maintenance Phase 3",
            "Maintenance Phase 4",
            "Quality Inspection",
            "Repair Action",
            "loop",
            "legend",
            "circular",
            "diamond",
            "rectangular"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Space Station Maintenance",
            "How many maintenance phase nodes (standard actions) are depicted as rectangular nodes?": "4",
            "Are the start and finish steps represented as circular nodes with unique fill colors?": "Yes",
            "Is there a single diamond-shaped node representing the quality inspection decision point?": "Yes",
            "Is there a loop arrow from the quality inspection node back to the repair action?": "Yes",
            "Are all nodes connected by directional arrows indicating the process sequence?": "Yes",
            "Does the diagram include a legend at the bottom that describes the meanings of circular, diamond, and rectangular shapes?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000907",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative about a fictional treasure hunt into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- The diagram must include exactly 4 sequential checkpoints, each represented as a unique node detailing a step in the treasure hunt.\n- A round-shaped node labeled \"Start Hunt\" should denote the beginning, and a star-shaped node labeled \"Treasure Found\" must mark the end.\n- Include a diamond-shaped node to illustrate a decision point where the participant chooses between two paths.\n- Incorporate a parallel branch that splits into two separate nodes after the decision point, each representing different clue options.\n- Connect all nodes with directional arrows to clearly indicate the flow from the starting point to the final treasure.\n- Add a loopback arrow from the decision node to one of the checkpoint nodes to signify revisiting a clue.\n- Use rectangular nodes for all actions or movement steps during the hunt.\n- Provide a legend at the bottom of the diagram that explains the specific shapes used for start, decision, action, and end nodes.",
        "raw_output_metric": [
            "Start Hunt",
            "Checkpoint 1",
            "Checkpoint 2",
            "Checkpoint 3",
            "Checkpoint 4",
            "Decision",
            "Clue Option A",
            "Clue Option B",
            "Treasure Found",
            "Legend: Start (round)",
            "Legend: Decision (diamond)",
            "Legend: Action (rectangular)",
            "Legend: End (star)"
        ],
        "VQA": {
            "How many sequential checkpoints are depicted in the diagram?": "4",
            "What label is given to the round-shaped starting node?": "Start Hunt",
            "What shape is used for the decision point node?": "Diamond",
            "How many nodes form the parallel branch for the clue options after the decision point?": "2",
            "What label is assigned to the star-shaped ending node?": "Treasure Found",
            "Which shape is used for representing all actions or movement steps?": "Rectangle",
            "Is a legend included in the diagram to explain the node shapes?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000908",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nCreate a Mermaid diagram that represents a simplified customer support escalation process.\n\nFeature Requirements:\n- The diagram must have a title at the top reading \"Customer Support Escalation\".\n- Include exactly 4 main process steps, each represented by a unique rectangular node.\n- Display a decision point using a diamond-shaped node labeled \"Escalate?\" positioned between the second and third steps.\n- Use an arrow to indicate a loop from the decision node back to the first action step for cases requiring additional verification.\n- Include a distinct colored node for the start step and another distinct colored node for the end step, ensuring they are different.\n- Connect all nodes sequentially with clear directional arrows to illustrate the process flow.\n- Insert a node labeled \"Log Issue\" after the decision node, using a rectangular node, which leads to the end step if the decision is negative.\n- Add a legend at the bottom of the diagram that defines the shapes used (rectangular for actions and diamond for decisions).\n- Present the entire process in one continuous flow without any separate sub-processes.\n- Ensure that each node is visibly labeled with the step number and description to clearly identify the order of steps.",
        "raw_output_metric": [
            "Customer Support Escalation",
            "Step 1",
            "Step 2",
            "Step 3",
            "Step 4",
            "Start",
            "End",
            "Escalate?",
            "Log Issue",
            "Legend",
            "rectangular",
            "diamond",
            "loop"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Customer Support Escalation",
            "How many main process steps (rectangular nodes) are included, each labeled with a step number and description?": "4",
            "Is there a diamond-shaped decision node labeled 'Escalate?' positioned between the second and third steps?": "Yes",
            "Is there a loop arrow from the decision node back to the first action step for additional verification?": "Yes",
            "Is there a 'Log Issue' rectangular node placed after the decision node that connects to the end step when the decision is negative?": "Yes",
            "Are the start and end steps depicted using distinct colored nodes that are different from each other?": "Yes",
            "Is there a legend at the bottom of the diagram that defines the shapes (rectangular for actions and diamond for decisions)?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000909",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an outdoor treasure hunt adventure into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Treasure Hunt Map\".\n- Represent exactly 4 main adventure stages, each within a unique node, connected sequentially with arrows.\n- Use an ellipse-shaped node for the starting point and a hexagon-shaped node for the endpoint.\n- Use a diamond-shaped node to illustrate a decision point where a choice between two clues is made.\n- Include at least one loopback arrow from a later stage to an earlier one to denote a repeated search.\n- Connect all nodes using clearly directed arrows to indicate the order of events.\n- Represent all intermediate action steps with rectangular nodes.\n- Apply a distinct fill color to the start node (red) and another to the end node (blue) for visual differentiation.\n- Label each node with descriptive names such as \"Clue Discovery\", \"Obstacle Challenge\", etc.\n- Include a legend at the bottom of the diagram that explains the significance of each node shape.",
        "raw_output_metric": [
            "graph TD",
            "Treasure Hunt Map",
            "Clue Discovery",
            "Obstacle Challenge",
            "Map Reading",
            "Treasure Found",
            "ellipse",
            "hexagon",
            "diamond",
            "rect",
            "red",
            "blue",
            "legend",
            "->",
            "loop"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Treasure Hunt Map",
            "How many main adventure stages are represented in unique nodes?": "4",
            "How is the starting point node visually represented?": "Ellipse shape with red fill",
            "How is the endpoint node visually represented?": "Hexagon shape with blue fill",
            "What shape is used for the decision point where a choice between two clues is made?": "Diamond shape",
            "How are intermediate action steps depicted?": "Rectangular nodes",
            "How are the nodes visually connected?": "Directed arrows",
            "Is there a loopback arrow in the diagram?": "Yes, at least one loopback arrow is included",
            "What does the legend at the bottom of the diagram explain?": "The significance of each node shape"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000910",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual software release timeline description into a Mermaid Gantt chart.\n\nFeature Requirements:\n- Include a title at the top of the chart labeled \"Release Timeline\".\n- Display exactly 4 project phases, each represented as a distinct task with specific start and end dates.\n- Use a milestone marker to highlight critical deadlines within the timeline.\n- Color-code each phase differently based on its category (e.g., planning, development, testing, deployment).\n- Include vertical dashed lines to indicate review checkpoints on specified dates.\n- Ensure that tasks are arranged sequentially across a 6-month period.\n- Add a legend at the bottom of the chart explaining the meaning of each color used.",
        "raw_output_metric": [
            "gantt",
            "title Release Timeline",
            "section Planning",
            "section Development",
            "section Testing",
            "section Deployment",
            "milestone",
            "dashed",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Release Timeline",
            "How many project phases are shown in the chart?": "4",
            "Does each project phase display specific start and end dates?": "Yes",
            "Is there a milestone marker to highlight critical deadlines?": "Yes",
            "Are the project phases color-coded by category?": "Yes, with categories Planning, Development, Testing, and Deployment",
            "Are vertical dashed lines used to indicate review checkpoints?": "Yes",
            "Over what period are the tasks arranged?": "6 months",
            "Where is the legend that explains the color coding located?": "At the bottom of the chart"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000911",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual narrative describing an emergency management workflow into a Mermaid diagram that visually outlines the series of events and decisions.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Emergency Management Workflow\".\n- Display exactly 4 distinct process steps, each represented by a unique rectangular node with descriptive labels.\n- Use a hexagon-shaped node to indicate a high-priority trigger event within the workflow.\n- Connect the nodes in a sequential order with clearly marked arrow directions to show process flow.\n- Incorporate at least one branching arrow that splits into two parallel process paths before converging back into a main flow.\n- Assign a green color fill for the start node, an orange fill for the decision node, and a red fill for the end node to visually distinguish them.\n- Include a legend at the bottom of the diagram that explains the meaning and shape of each node used.",
        "raw_output_metric": [],
        "VQA": {
            "What is the diagram's title displayed at the top?": "Emergency Management Workflow",
            "How many distinct process steps (rectangular nodes) are present?": "4",
            "What shape is used to represent the high-priority trigger event?": "Hexagon",
            "Which node is filled with green color?": "The start node",
            "Which node uses an orange fill to indicate its function?": "The decision node",
            "Which node is highlighted with a red fill?": "The end node",
            "Does the diagram include a branching arrow that splits into two parallel process paths?": "Yes",
            "What does the legend at the bottom of the diagram explain?": "It explains the meaning and shape of each node used"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000912",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a textual event itinerary into a Mermaid diagram that displays the arranged schedule of a local festival.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Festival Schedule\".\n- Represent exactly 5 main events as rectangular nodes, each clearly labeled with the event name.\n- Connect the nodes with clearly directed arrows indicating the sequential order of events.\n- Incorporate an elliptical node to represent scheduled break periods between events.\n- Use a diamond-shaped node to indicate a decision point where attendees choose between concurrent sessions.\n- Add a loopback arrow from the after-party event node that connects back to an earlier event node for repeated viewing.\n- Apply a unique blue fill color to the starting event node and a unique green fill color to the ending event node.\n- Group two overlapping events within a subgraph to highlight parallel scheduling.\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape used.",
        "raw_output_metric": [
            "graph TD",
            "Festival Schedule",
            "Event 1",
            "Event 2",
            "Event 3",
            "Event 4",
            "After Party",
            "((Break))",
            "{Decision}",
            "subgraph",
            "legend",
            "blue",
            "green",
            "->"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Festival Schedule",
            "How many main event nodes (rectangular) are present?": "5",
            "What shape is used to represent the scheduled break periods?": "Ellipse",
            "What shape is used to indicate the decision point for concurrent sessions?": "Diamond",
            "What unique colors are used for the starting and ending event nodes?": "Blue for the starting event and green for the ending event",
            "Is there a loopback arrow from the after-party event node back to an earlier event?": "Yes",
            "Are two overlapping events grouped within a subgraph for parallel scheduling?": "Yes",
            "Does the diagram include a legend at the bottom explaining the meaning of each node shape?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000913",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a project management timeline description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a main title at the top of the flowchart labeled \"Project Timeline\".\n- Display exactly 4 primary process step nodes arranged sequentially, each uniquely labeled.\n- Use ellipse-shaped nodes to represent both the starting and ending points, with the start node filled in green and the end node filled in red.\n- Incorporate a diamond-shaped node immediately after the second process step to indicate a decision point with two distinct direction arrows.\n- Create a sub-process group containing 2 rectangular nodes that represent review phases, connected by arrows and clearly separated from the main flow.\n- Ensure that all text labels within nodes are clearly visible using a consistent font style and size.\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape and the color scheme used for the start and end nodes.",
        "raw_output_metric": [
            "flowchart TD",
            "Project Timeline",
            "((Start))",
            "Step 1",
            "Step 2",
            "Decision",
            "Step 3",
            "Step 4",
            "((End))",
            "Review Phase 1",
            "Review Phase 2",
            "Legend",
            "fill:green",
            "fill:red"
        ],
        "VQA": {
            "What is the main title displayed at the top of the flowchart?": "Project Timeline",
            "How many primary process step nodes are arranged sequentially?": "4",
            "What shape is used for the starting and ending nodes?": "Ellipse",
            "What are the fill colors of the start and end nodes respectively?": "Green for start, red for end",
            "What shape is used immediately after the second process step to indicate a decision point?": "Diamond",
            "How many nodes are present in the sub-process group representing review phases?": "2",
            "What shape are the nodes in the sub-process group?": "Rectangle",
            "What does the legend at the bottom of the diagram explain?": "The meaning of each node shape and the color scheme used for the start and end nodes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000914",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual supply chain process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Supply Chain Overview\".\n- Display exactly 4 main process steps, each represented by a distinct node.\n- Use a hexagon-shaped node to represent an inspection checkpoint within the process.\n- Include a bidirectional arrow between two nodes to indicate a feedback loop.\n- Apply only rectangular shapes for processing steps.\n- Assign a green fill color to the start node and a red fill color to the end node to clearly distinguish them.\n- Add a caption at the bottom of the diagram that serves as a legend explaining the shape symbols and color meanings.",
        "raw_output_metric": [
            "Supply Chain Overview",
            "graph LR",
            "Process 1",
            "Process 2",
            "Process 3",
            "Process 4",
            "Inspection Checkpoint",
            "<-->",
            "rectangular",
            "hexagon",
            "green",
            "red",
            "Legend"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Supply Chain Overview",
            "How many main process steps are displayed in the diagram?": "4",
            "What shape is used for processing steps?": "Rectangle",
            "Which node is represented by a hexagon shape?": "Inspection checkpoint",
            "What color is assigned to the start node?": "Green",
            "What color is assigned to the end node?": "Red",
            "What type of arrow is used to indicate the feedback loop between two nodes?": "Bidirectional arrow",
            "What does the caption at the bottom of the diagram explain?": "The shape symbols and color meanings"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000915",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative describing a product development cycle into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Product Development Cycle\".\n- Display exactly 4 main process steps, each contained within a uniquely labeled rectangular node.\n- Use an elliptical node to represent the starting point and another elliptical node for the endpoint.\n- Incorporate a diamond-shaped node immediately after the second process step to indicate a decision point.\n- Add a loopback arrow from the decision node back to the first process step, signifying an iterative revision.\n- Apply a distinct fill color for the start node, a different color for the decision node, and a separate color for the end node.\n- Ensure that all nodes are connected with clear directional arrows to depict the sequential flow of the process.\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape (rectangular, elliptical, and diamond).",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Product Development Cycle",
            "How many main process steps are represented as rectangular nodes?": "4",
            "What shape is used for the starting point?": "Ellipse",
            "What shape is used immediately after the second process step to indicate a decision point?": "Diamond",
            "Is there a loopback arrow from the decision node back to the first process step?": "Yes",
            "Are distinct fill colors applied to the start, decision, and end nodes?": "Yes",
            "What shape is used for the endpoint of the flowchart?": "Ellipse",
            "Is a legend provided at the bottom of the diagram explaining node shapes?": "Yes",
            "According to the legend, what does the rectangular shape represent?": "Main process steps",
            "According to the legend, what do the elliptical nodes represent?": "The start and end points"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000916",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nGenerate a Mermaid sequence diagram visualizing the steps involved in processing a customer support ticket.\n\nFeature Requirements:\n- Include a title at the top labeled \"Support Ticket Flow\".\n- Illustrate exactly 4 main steps: \"Ticket Submission\", \"Initial Review\", \"Technical Resolution\", and \"Ticket Closure\".\n- Use rectangular nodes for all processing steps except the beginning and end, which must be shown in oval nodes.\n- Incorporate a diamond-shaped node to represent a decision point at the \"Initial Review\" stage where the ticket may either be resolved or escalated.\n- Connect nodes sequentially with arrows indicating a left-to-right flow.\n- Include at least one loopback arrow from \"Technical Resolution\" back to \"Initial Review\" to handle cases requiring re-assessment.\n- Assign unique color fills to the start and end nodes to differentiate them from the process steps.\n- Add a legend at the bottom of the diagram that explains the meaning of the oval, rectangular, and diamond nodes.",
        "raw_output_metric": [
            "sequenceDiagram",
            "Support Ticket Flow",
            "Ticket Submission",
            "Initial Review",
            "Technical Resolution",
            "Ticket Closure",
            "diamond",
            "escalated",
            "resolved",
            "loop",
            "legend",
            "oval",
            "rectangular"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Support Ticket Flow",
            "How many main processing steps are depicted in the diagram?": "4",
            "Which steps are represented in the diagram?": "Ticket Submission, Initial Review, Technical Resolution, and Ticket Closure",
            "How are the start and end nodes visually represented?": "They are shown as oval nodes with unique color fills.",
            "What shape is used for the intermediate processing steps?": "Rectangular nodes.",
            "Which node is depicted as a diamond shape and what does it represent?": "The decision point at 'Initial Review', representing whether the ticket is resolved or escalated.",
            "How are the nodes connected in the diagram?": "They are connected with left-to-right flow arrows.",
            "Is there a loopback arrow present, and if so, what does it connect?": "Yes, from 'Technical Resolution' back to 'Initial Review'.",
            "What detail does the legend at the bottom of the diagram provide?": "It explains the shapes used: oval for start/end, rectangular for process steps, and diamond for decision points.",
            "How are the start and end nodes differentiated from the other processing steps?": "They are uniquely colored and shown as oval nodes."
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000917",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a museum tour itinerary into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- The flowchart must have a title at the top labeled \"Museum Tour Itinerary\".\n- Include exactly 4 main tour stops represented by unique rectangular nodes.\n- Use a diamond-shaped node to indicate a visitor decision point where they choose between a guided tour or self-exploration.\n- Display an arrow looping back from the diamond node to the first tour stop to show a revisit option.\n- Distinguish the initial starting node with a blue fill color and the final exit node with a red fill color.\n- All nodes must be connected sequentially with clearly directed arrows showing the order of activities.\n- At least one node must include a descriptive subtitle text inside it.\n- Include a separate branch after the decision node that leads to an optional snack break represented by an oval node.\n- Present a key/legend at the bottom of the diagram that explains the meaning of each node shape used.",
        "raw_output_metric": [
            "Museum Tour Itinerary",
            "Tour Stop 1",
            "Tour Stop 2",
            "Tour Stop 3",
            "Tour Stop 4",
            "diamond",
            "guided tour",
            "self-exploration",
            "blue",
            "red",
            "Snack Break",
            "oval",
            "legend"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Museum Tour Itinerary",
            "How many main tour stops are represented by rectangular nodes?": "4",
            "Which node shape indicates the visitor decision point?": "Diamond",
            "What option does the diamond node offer?": "Choose between a guided tour or self-exploration",
            "Which node is filled with blue and which with red?": "The initial starting node is blue and the final exit node is red",
            "Is there a looping arrow displayed in the diagram, and where does it point?": "Yes, it loops back from the diamond node to the first tour stop",
            "Does at least one node include a descriptive subtitle text?": "Yes",
            "Is there a branch after the decision node, and what shape is the optional snack break node?": "Yes, it leads to an oval node",
            "What information is provided at the bottom of the diagram?": "A key/legend explaining the meaning of each node shape used"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000918",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a detailed description of a whimsical culinary journey into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- The flowchart must have the title \"Culinary Adventure\" displayed at the top.\n- Exactly 4 main process steps should be represented by distinct rectangular nodes, arranged sequentially.\n- Include one hexagon-shaped node to denote an \"Ingredient Check\" decision point.\n- Use arrows to clearly connect all nodes in a left-to-right directional flow.\n- Incorporate a loopback arrow from the last process step back to the \"Ingredient Check\" node to indicate a review process.\n- Differentiate the starting and finishing nodes by assigning them unique fill colors.\n- Each node must include a label that is visible and clearly describes its function.\n- Add a triangle-shaped node specifically to mark a timed cooking phase midway through the process.\n- Append a legend at the bottom of the diagram that explains the significance of the rectangle, hexagon, and triangle shapes.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Culinary Adventure",
            "How many main process steps (rectangular nodes) are present in the diagram?": "4",
            "What shape is used to denote the 'Ingredient Check' decision point?": "Hexagon",
            "What directional flow is indicated by the connecting arrows?": "Left-to-right",
            "Is there a loopback arrow in the diagram, and if so, what does it connect?": "Yes, from the last process step back to the Ingredient Check node",
            "How are the starting and finishing nodes visually distinguished?": "They have unique fill colors",
            "What shape marks the timed cooking phase in the process?": "Triangle",
            "What information does the legend at the bottom of the diagram provide?": "It explains the significance of the rectangle, hexagon, and triangle shapes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000919",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a step-by-step conference scheduling process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Conference Scheduler\".\n- Display exactly 4 primary process steps, each represented within a unique node connected in sequential order by arrows.\n- Use a circle-shaped node with a green fill to represent the process start.\n- Represent a decision point using a diamond-shaped node labeled \"Availability Conflict?\" within the flow.\n- Use rectangular nodes exclusively for all standard action steps between the start and end nodes.\n- Include a branch that splits from the decision node into a sub-process that loops back to one of the main action nodes.\n- Clearly differentiate the end of the process by using a square-shaped node with a blue fill.\n- Provide a legend at the bottom of the diagram that explains the meanings of all node shapes used.",
        "raw_output_metric": [
            "flowchart",
            "Conference Scheduler",
            "circle",
            "green",
            "4 primary process steps",
            "rectangular",
            "Availability Conflict?",
            "diamond",
            "sub-process",
            "square",
            "blue",
            "Legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Conference Scheduler",
            "How many primary process steps are shown in the diagram?": "4",
            "What shape and color fill is used to represent the process start?": "Circle with green fill",
            "Which shape is used for the decision node labeled 'Availability Conflict?'?": "Diamond",
            "What shape is used exclusively for the standard action steps between the start and end nodes?": "Rectangular",
            "Is there a branch from the decision node that loops back to one of the main action nodes?": "Yes",
            "What shape and fill color is used to denote the end of the process?": "Square with blue fill",
            "Is there a legend at the bottom of the diagram?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000920",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a detailed description of a festival schedule into a Mermaid timeline diagram.\n\nFeature Requirements:\n- Place a title \"Festival Timeline\" at the top of the diagram.\n- Display exactly 4 sequential events, each represented by a unique node aligned horizontally.\n- Use rectangular nodes exclusively for scheduled performance events.\n- Represent a break period with a hexagon-shaped node placed between performance events.\n- Connect all event nodes with solid arrows indicating the progression in time.\n- Include a loop arrow from the final event back to the break period node to suggest a recurring schedule.\n- Highlight the start and end events by applying distinct fill colors (e.g., green for start, red for end).\n- Ensure each node label contains a time indicator formatted as \"HH:MM\".\n- Provide a legend at the bottom that explains the meaning of the different node shapes and colors in the diagram.",
        "raw_output_metric": [
            "Festival Timeline",
            "HH:MM",
            "->",
            "hexagon",
            "rect",
            "green",
            "red",
            "legend"
        ],
        "VQA": {
            "What is the diagram's title?": "Festival Timeline",
            "How many sequential performance events are displayed?": "4",
            "What shape is used for the performance events?": "Rectangular",
            "What shape is used to represent the break period?": "Hexagon",
            "Which nodes have distinct fill colors and what are they?": "The start event is green and the final event is red",
            "What does each node label include?": "A time indicator formatted as 'HH:MM'",
            "How are the nodes connected in the diagram?": "All event nodes are connected with solid arrows, and there is a loop arrow from the final event back to the break period",
            "What additional element is provided at the bottom of the diagram?": "A legend that explains the meaning of different node shapes and colors"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000921",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative of a coastal town festival planning process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Festival Planning Flow\".\n- Display exactly 4 major planning phases, each represented by a unique node, and arranged sequentially from start to finish.\n- Use rectangular nodes for all planning stages.\n- Incorporate a diamond-shaped node to represent a decision point regarding weather contingency.\n- Link all nodes with directional arrows indicating the flow of the planning process.\n- Include a loopback arrow from the decision point back to the stage of \"Vendor Coordination\" to show process repetition if needed.\n- Style the start node with a blue fill and the end node with an orange fill for visual distinction.\n- Attach a separate subgraph at the bottom containing a legend that explains the significance of rectangular and diamond-shaped nodes.\n- Ensure all node labels clearly indicate the phase names and decision point.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Festival Planning Flow",
            "How many major planning phase nodes are visible and what shape are they?": "4 rectangular nodes",
            "Which node is styled with a blue fill?": "The start node",
            "Which node is styled with an orange fill?": "The end node",
            "Is there a diamond-shaped node and what decision does it represent?": "Yes, it represents the weather contingency decision point",
            "What does the loopback arrow connect?": "It connects the weather decision node back to Vendor Coordination",
            "How are all nodes connected in the flowchart?": "With directional arrows indicating the sequential flow",
            "What additional element is attached at the bottom of the chart?": "A subgraph containing a legend explaining the rectangular and diamond-shaped nodes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000922",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a descriptive narrative outlining a customer support troubleshooting procedure into a Mermaid sequence diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Customer Support Flow\".\n- Display exactly 4 process steps, each represented as a unique node in sequence.\n- Represent the initial contact step with a star-shaped node.\n- Use rectangular nodes for all action-oriented steps throughout the flow.\n- Incorporate a diamond-shaped decision node to indicate a customer confirmation checkpoint.\n- Connect all nodes with arrows that clearly denote the sequential order and process flow.\n- Apply one branch arrow stemming from the decision node to represent an alternative troubleshooting path.\n- Highlight the final resolution outcome with a circular node.\n- Add a footer legend that explains the meanings of the star, rectangle, diamond, and circle node shapes.",
        "raw_output_metric": [],
        "VQA": {
            "What is the diagram's title displayed at the top?": "Customer Support Flow",
            "How many process steps are represented as unique nodes?": "4",
            "Which shape represents the initial contact step?": "Star",
            "What shape is used for all action-oriented steps in the sequence?": "Rectangle",
            "What shape is used to display the customer confirmation checkpoint?": "Diamond",
            "What shape highlights the final resolution outcome?": "Circle",
            "How many different node shapes are explained in the footer legend?": "4",
            "What does the branch arrow from the decision node represent?": "Alternative troubleshooting path"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000923",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a customer support ticketing workflow into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- The diagram must include a header titled \"Support Ticket Workflow\" at the top.\n- Display exactly 4 main stages as nodes: Submission, Triage, Resolution, and Closure.\n- Use a circular node to represent the starting point of the workflow.\n- Include one diamond-shaped node to indicate a decision point where a ticket can be either escalated or resolved.\n- Draw arrows to connect nodes sequentially, ensuring a clear directional flow and including a loop arrow from \"Resolution\" back to \"Triage\" for reopened tickets.\n- Label each node with a corresponding abbreviation (e.g., S for Submission, T for Triage, etc.).\n- Use rectangular nodes exclusively for action-based stages, with the exception of the start and decision nodes.\n- Apply distinct background colors for the start and end nodes to differentiate them visually.\n- Add a legend at the bottom of the diagram that explains the shapes and colors used in the chart.",
        "raw_output_metric": [
            "graph LR",
            "Support Ticket Workflow",
            "Submission",
            "S",
            "Triage",
            "T",
            "Resolution",
            "R",
            "Closure",
            "C",
            "((Start))",
            "{Decision}",
            "-->",
            "loop",
            "legend",
            "fill:"
        ],
        "VQA": {
            "What is the header title displayed at the top of the diagram?": "Support Ticket Workflow",
            "How many main stage nodes are included in the workflow?": "4",
            "What are the names and abbreviations of the main stage nodes?": "Submission (S), Triage (T), Resolution (R), Closure (C)",
            "Which node shape is used to represent the starting point of the workflow?": "Circular",
            "What shape is used for the decision point where a ticket is escalated or resolved?": "Diamond",
            "Is there a loop arrow from the Resolution node back to the Triage node for reopened tickets?": "Yes",
            "What type of shape is used for the action-based stages?": "Rectangular",
            "Are distinct background colors applied to the start and end nodes?": "Yes",
            "What information does the legend at the bottom of the diagram provide?": "It explains the shapes and colors used"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000924",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a descriptive narrative of a community garden’s seasonal workflow into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram reading \"Garden Growth Cycle\".\n- Display exactly 4 main stages as nodes, each clearly labeled with its season and represented using rectangular shapes.\n- Use a circular node to indicate the \"Preparation\" stage, distinct from the other rectangular stages.\n- Connect the nodes with directional arrows showing the sequential flow from one season to the next.\n- Insert a loopback arrow from the \"Harvest\" stage back to the \"Preparation\" stage to represent the recurring annual cycle.\n- Highlight the \"Harvest\" node with a different color fill to visually differentiate it from the other stages.\n- Add a legend at the bottom of the diagram that explains the meaning of the different node shapes and arrow types.",
        "raw_output_metric": [
            "Garden Growth Cycle",
            "flowchart TD",
            "Preparation",
            "Spring",
            "Summer",
            "Harvest",
            "(Preparation)",
            "[Spring]",
            "[Summer]",
            "[Harvest]",
            "-->",
            "H --> P",
            "style",
            "fill:",
            "subgraph Legend"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Garden Growth Cycle",
            "How many main season stages are represented as rectangular nodes?": "4",
            "Which stage is depicted using a circular node?": "Preparation",
            "Is there a loopback arrow connecting the Harvest stage back to the Preparation stage?": "Yes",
            "Which stage node is highlighted with a different color fill?": "Harvest",
            "Does the diagram include a legend at the bottom explaining node shapes and arrow types?": "Yes",
            "Are all the nodes connected by directional arrows showing sequential flow?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000925",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an e-commerce checkout process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title \"E-commerce Checkout Journey\" at the top of the diagram.\n- Display exactly 4 main process steps: Cart Review, Payment Processing, Shipping Selection, and Order Confirmation, each in a unique rectangular node.\n- Incorporate a diamond-shaped node to represent the decision point on payment approval.\n- Use a red fill for the \"Cart Review\" start node and a green fill for the \"Order Confirmation\" end node.\n- Connect all nodes sequentially using directional arrows, with clear labels indicating the step numbers (e.g., Step 1, Step 2, etc.).\n- Add a loopback arrow from \"Payment Processing\" back to \"Cart Review\" to indicate a retry in case of payment failure.\n- Position all nodes with specific directional links, ensuring that the decision node is clearly connected between the payment and shipping steps.\n- Include a legend at the bottom of the diagram that explains the meanings of the different node shapes and color codes.",
        "raw_output_metric": [
            "graph TD",
            "E-commerce Checkout Journey",
            "Cart Review",
            "Payment Processing",
            "Shipping Selection",
            "Order Confirmation",
            "Step 1",
            "Step 2",
            "Step 3",
            "Step 4",
            "Payment Approval",
            "red",
            "green",
            "legend"
        ],
        "VQA": {
            "What is the diagram title displayed at the top?": "E-commerce Checkout Journey",
            "How many main process steps are depicted in the diagram?": "4",
            "What are the names of the main process steps?": "Cart Review, Payment Processing, Shipping Selection, Order Confirmation",
            "Which node is shown with a red fill?": "Cart Review",
            "Which node is shown with a green fill?": "Order Confirmation",
            "What shape is used to represent the payment approval decision point?": "Diamond",
            "Are all nodes connected sequentially with arrows labeled as steps (e.g., Step 1, Step 2)?": "Yes",
            "Is there a loopback arrow to indicate a retry in case of payment failure and which nodes does it connect?": "Yes, from Payment Processing back to Cart Review",
            "How is the decision node positioned in relation to the payment and shipping steps?": "It is clearly connected between Payment Processing and Shipping Selection",
            "Does the diagram include a legend at the bottom that explains the node shapes and color codes?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000926",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nCreate a Mermaid diagram that illustrates an innovative recycling initiative process in an urban setting.\n\nFeature Requirements:\n- Include a title at the top labeled \"Urban Recycling Initiative\".\n- Display exactly 5 main stages: Collection, Sorting, Processing, Distribution, and Feedback.\n- Represent the Collection and Distribution stages with nodes that have a unique color fill different from the other stages.\n- Use rectangular nodes exclusively for action steps and a parallelogram-shaped node to represent the environmental review step linked to the Sorting stage.\n- Connect all nodes sequentially with arrows that clearly show the process flow from Collection to Feedback.\n- Add a branch from Processing to Sorting to indicate a re-evaluation loop in the process.\n- Place a legend at the bottom of the diagram explaining the meaning of each node shape and color code.",
        "raw_output_metric": [
            "flowchart",
            "Urban Recycling Initiative",
            "Collection",
            "Sorting",
            "Processing",
            "Distribution",
            "Feedback",
            "environmental review",
            "rect",
            "parallelogram",
            "->",
            "legend"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Urban Recycling Initiative",
            "How many main stages are depicted in the process?": "5",
            "What are the names of the five main stages?": "Collection, Sorting, Processing, Distribution, and Feedback",
            "Which stages are represented with a unique color fill?": "Collection and Distribution",
            "What shape is used exclusively for action steps in the diagram?": "Rectangular",
            "What shape is used for the environmental review step linked to the Sorting stage?": "Parallelogram",
            "Which stage is directly connected to the environmental review step?": "Sorting",
            "Is there a re-evaluation loop in the process, and if so, between which stages?": "Yes, from Processing to Sorting",
            "What information is provided in the legend at the bottom of the diagram?": "Explanation of each node shape and color code"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000927",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual machine maintenance schedule into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Machine Maintenance Schedule\".\n- Display exactly 4 main maintenance steps, each within a unique rectangular action node.\n- Use an oval-shaped node for the process start point and another oval-shaped node for the ending point.\n- Incorporate a diamond-shaped decision node to represent a maintenance check, with two distinct outward arrows labeled \"Pass\" and \"Fail\".\n- Add a loopback arrow from the \"Fail\" decision output directing back to the maintenance steps to indicate a recheck.\n- Apply a green fill color for the starting node and a red fill color for the ending node to visually differentiate them.\n- Connect all nodes sequentially from left to right with clear directional arrows indicating the process flow.\n- Include a legend at the bottom of the diagram that explains the meaning of the oval, rectangular, and diamond-shaped nodes.",
        "raw_output_metric": [
            "Machine Maintenance Schedule",
            "flowchart LR",
            "Start",
            "Maintenance Step 1",
            "Maintenance Step 2",
            "Maintenance Step 3",
            "Maintenance Step 4",
            "maintenance check",
            "Pass",
            "Fail",
            "End",
            "green",
            "red",
            "legend",
            "oval",
            "rectangular",
            "diamond",
            "recheck"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Machine Maintenance Schedule",
            "How many main maintenance steps (rectangular nodes) are included?": "4",
            "What shape is used for the starting node and what is its fill color?": "Oval with green fill",
            "What shape is used for the ending node and what is its fill color?": "Oval with red fill",
            "What shape is used for the maintenance check decision node?": "Diamond",
            "How many outward arrows come from the decision node and what labels do they have?": "Two arrows labeled 'Pass' and 'Fail'",
            "Is there a loopback arrow present and where does it direct?": "Yes, from the 'Fail' decision output back to the maintenance steps",
            "How are the nodes connected in terms of directional flow?": "Sequentially from left to right",
            "What additional information is included at the bottom of the diagram?": "A legend explaining the meaning of the oval, rectangular, and diamond-shaped nodes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000928",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a maintenance procedure description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Maintenance Workflow\".\n- Display exactly 4 main process steps, each within a distinct node, connected with directional arrows.\n- Represent the initial step with an ellipse-shaped node to indicate the start of the procedure.\n- Use a diamond-shaped node to depict a decision point that branches into parallel task sequences.\n- Incorporate a loopback arrow from the final process node back to the second process node to indicate a recurring check.\n- Distinguish the first and last nodes by applying a red fill for the start node and a green fill for the end node.\n- Use rectangular nodes exclusively for all standard task steps in the process.\n- Include a legend at the bottom of the diagram that explains the meaning of the ellipse, rectangle, and diamond shapes.",
        "raw_output_metric": [
            "Maintenance Workflow",
            "((Start))",
            "[Step 1]",
            "[Step 2]",
            "[Step 3]",
            "[Step 4]",
            "{Decision}",
            "fill:#ff0000",
            "fill:#00ff00",
            "loopback",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Maintenance Workflow",
            "How many main process step nodes are present in the diagram?": "4",
            "What shape is used for the initial step node and what fill color does it have?": "Ellipse with red fill",
            "What shape is used to represent the decision point node?": "Diamond",
            "What shape are all the standard task step nodes?": "Rectangles",
            "What fill color is applied to the final process node?": "Green",
            "Which nodes are connected by a loopback arrow?": "From the final process node back to the second process node",
            "What information is provided by the legend at the bottom of the diagram?": "The meaning of the ellipse, rectangle, and diamond shapes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000929",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative describing an automated software deployment process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Software Deployment Pipeline\".\n- Display exactly 4 distinct process steps in separate nodes, connected sequentially using arrows.\n- Use a circular node for the initial step, a rectangular node for a mid-deployment action, and a parallelogram node for deployment validation.\n- Include at least one branch with an arrow representing a rollback procedure in case of deployment failure.\n- Incorporate a loopback arrow from the deployment validation node to the deployment action node to indicate a reattempt.\n- Differentiate nodes by applying a unique color fill for the initial step versus the rollback step.\n- Place a legend at the bottom of the diagram explaining the meaning of each node shape and color used.\n- Ensure all nodes have clear, labeled text describing their function in the process.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the diagram?": "Software Deployment Pipeline",
            "How many distinct process steps (nodes) are shown in the diagram?": "4",
            "What shape is used for the initial deployment step node?": "Circular",
            "What shape is used for the mid-deployment action node?": "Rectangular",
            "What shape represents the deployment validation step?": "Parallelogram",
            "Is there a branch with an arrow indicating a rollback procedure in case of failure?": "Yes",
            "Is there a loopback arrow from the deployment validation node to the deployment action node?": "Yes",
            "Are different color fills used to differentiate the initial step from the rollback step?": "Yes",
            "Is a legend present at the bottom of the diagram, explaining node shapes and colors?": "Yes",
            "Do all nodes feature clear, labeled text describing their respective functions?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000930",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative description of a renewable energy project into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Renewable Energy Cycle\".\n- Display exactly 4 main stages in the project, each contained in its own uniquely labeled node.\n- Use an oval-shaped node for the start of the process and an oval-shaped node for the end to distinguish these stages.\n- Represent a decision point with a diamond-shaped node at a stage where a funding evaluation occurs.\n- Connect all nodes sequentially with arrows indicating clear directional flow between each stage.\n- Incorporate a loopback arrow from a mid-process stage returning to the funding evaluation decision point to indicate reassessment.\n- Use rectangular nodes exclusively for all action steps that occur between the start and decision point.\n- Apply a distinct color fill for the start node and a separate color fill for the end node to enhance visual differentiation.\n- Include a legend at the bottom of the diagram that explains the meaning of the different node shapes and color fills.\n- Ensure that each connection between nodes is clearly labeled with the transition condition or stage description.",
        "raw_output_metric": [
            "flowchart LR",
            "Renewable Energy Cycle",
            "(Start)",
            "Funding Evaluation",
            "(End)",
            "Legend",
            "-->",
            "loopback"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Renewable Energy Cycle",
            "How many main stages are shown in the project?": "4",
            "Which shape is used for the start and end nodes?": "Oval",
            "What shape represents the funding evaluation decision point?": "Diamond",
            "What shape is used for the action steps between the start and the decision point?": "Rectangle",
            "Is there a loopback arrow included in the diagram?": "Yes",
            "How are the start and end nodes visually differentiated?": "Distinct color fills",
            "Are the connections between nodes clearly labeled with transition conditions or stage descriptions?": "Yes",
            "Is there a legend provided at the bottom of the diagram?": "Yes",
            "What information does the legend explain?": "Node shapes and color fills"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000931",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative description of an interstellar mission launch sequence into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Mission Launch Sequence\".\n- Display exactly 4 main mission stages, each within a unique rectangular node, connected with directional arrows.\n- Use an elliptical-shaped node to represent the start of the mission and a differently colored elliptical node for the mission completion.\n- Incorporate a diamond-shaped node to depict a critical decision point for communications clearance before liftoff.\n- Include a loopback arrow from the decision node back to one of the main mission stage nodes, indicating a recheck step if clearance is not granted.\n- Label each arrow with clear text such as \"proceed\" or \"retry\" to indicate the transition between stages.\n- Ensure all nodes are sequentially connected with arrows showing a clear, linear progression of events.\n- Add a legend at the bottom of the diagram to explain the meanings of each node shape and the arrow labels.",
        "raw_output_metric": [
            "Mission Launch Sequence",
            "Stage 1",
            "Stage 2",
            "Stage 3",
            "Stage 4",
            "Start",
            "Mission Complete",
            "Communications Clearance",
            "proceed",
            "retry",
            "Legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Mission Launch Sequence",
            "How many main mission stages (rectangular nodes) are shown?": "4",
            "What shape is used to represent the start of the mission?": "Elliptical",
            "Which node represents the mission completion and what is distinctive about it?": "An elliptical node with a different color",
            "What shape is used for the communications clearance decision point?": "Diamond",
            "How are the arrows labeled to indicate transitions between stages?": "Labels such as 'proceed' and 'retry'",
            "Is there a loopback arrow, and what is its purpose?": "Yes, it indicates a recheck step if clearance is not granted",
            "What additional element is included at the bottom of the diagram?": "A legend explaining node shapes and arrow labels"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000932",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a written description of a coffee shop order and preparation process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Coffee Shop Workflow.\"\n- Provide exactly 4 main sequential steps shown within rectangular nodes.\n- Use an oval-shaped node for the start point and a different-colored oval-shaped node for the end point.\n- Integrate one diamond-shaped node to represent a decision point where the customer chooses between dine-in or take-away.\n- Add a loopback arrow illustrating the possibility of a reorder in the process.\n- Introduce a separate branch with two additional steps to detail the customization of a specialty drink.\n- Utilize colored arrows to depict different paths with clear directional flow between nodes.\n- Label all nodes with descriptive text explaining their role in the process.\n- Place a legend at the bottom of the diagram that explains the meaning of each node shape and the color distinctions used.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Coffee Shop Workflow",
            "How many main sequential steps are depicted within rectangular nodes?": "4",
            "What shape is used for the start point?": "Oval",
            "What is unique about the end point node compared to the start point?": "It is an oval with a different color",
            "What shape is used to represent the decision point where the customer chooses between dine-in and take-away?": "Diamond",
            "What options does the decision point provide?": "Dine-in or take-away",
            "How many additional steps are included in the branch for customizing a specialty drink?": "2",
            "What element in the diagram explains the meaning of each node shape and color distinctions?": "The legend at the bottom"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000933",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative description of an online ordering system into a Mermaid sequence diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Online Order Sequence\".\n- Represent exactly four actors: Customer, Website, Payment System, and Shipping Center, each depicted with a distinct rectangular node.\n- Arrange the actors vertically with clear sequential flow of interactions.\n- Use solid arrows to depict standard message passing between the actors.\n- Include a diamond-shaped node to represent a decision point for payment authorization.\n- Depict a dashed arrow to illustrate the alternate flow in case of payment failure.\n- Add a loopback arrow from the Website node back to the Customer node for order corrections.\n- Label each arrow with a descriptive action such as \"Place Order\", \"Confirm Payment\", \"Dispatch Order\", and \"Report Issue\".\n- Include a footer legend that explains the meaning of the shapes (rectangular nodes for actors and diamond for decision point).",
        "raw_output_metric": [
            "sequenceDiagram",
            "title Online Order Sequence",
            "Customer",
            "Website",
            "Payment System",
            "Shipping Center",
            "Place Order",
            "Confirm Payment",
            "Payment Authorization",
            "Dispatch Order",
            "Report Issue",
            "alt",
            "-.->",
            "loop",
            "legend",
            "rectangular",
            "diamond"
        ],
        "VQA": {
            "What is the title labeled at the top of the diagram?": "Online Order Sequence",
            "How many actors are depicted in the diagram?": "4",
            "Which names are assigned to the actors?": "Customer, Website, Payment System, Shipping Center",
            "What shape is used to represent each actor?": "Rectangular node",
            "What shape is used to represent the payment authorization decision point?": "Diamond-shaped node",
            "What type of arrow represents the alternate flow in case of payment failure?": "Dashed arrow",
            "Which arrow is used to indicate order corrections?": "Loopback arrow from the Website node back to the Customer node",
            "What does the footer legend explain?": "Rectangular nodes represent actors and the diamond represents the decision point"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000934",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a descriptive narrative of a weekly workout schedule into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Display a header titled \"Weekly Workout Schedule\" at the top of the diagram.\n- Include exactly 4 distinct workout days represented by rectangular nodes.\n- Use a diamond-shaped node to represent a decision point for \"Intensity Adjustment\".\n- Connect all nodes with directional arrows showing a sequential order from the first to the last workout day.\n- Insert a parallel branch after the second workout day for an optional \"Recovery Session\" represented by a rectangular node.\n- Include a loopback arrow from the final workout day returning to the first day to illustrate the repeating weekly cycle.\n- Apply a unique fill color to the starting node and a different fill color to the ending node.\n- Use an ellipse shape exclusively for the designated rest day node.\n- Attach an annotation near the decision node containing the text \"Intensity Adjustment\".\n- Place a legend at the bottom of the diagram that clearly defines the meanings of each node shape and the applied color codes.",
        "raw_output_metric": [
            "Weekly Workout Schedule",
            "Workout Day 1",
            "Workout Day 2",
            "Workout Day 3",
            "Workout Day 4",
            "Recovery Session",
            "Intensity Adjustment",
            "Rest Day",
            "Legend",
            "rect",
            "diamond",
            "ellipse",
            "fill:",
            "loopback"
        ],
        "VQA": {
            "What is the header title in the diagram?": "Weekly Workout Schedule",
            "How many distinct workout day nodes are displayed?": "4",
            "What shape is used for the workout day nodes?": "Rectangle",
            "What shape is used for the 'Intensity Adjustment' decision node?": "Diamond",
            "Is there an optional branch for a 'Recovery Session' and what is its node shape?": "Yes, it is a rectangle",
            "Does the diagram include a loopback arrow from the final workout day back to the first?": "Yes",
            "Are unique fill colors applied to the starting and ending workout day nodes?": "Yes, different colors are used",
            "What shape is used to represent the designated rest day?": "Ellipse",
            "Is there an annotation near the decision node, and what does it state?": "It states 'Intensity Adjustment'",
            "What does the legend at the bottom of the diagram define?": "Node shapes and color codes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000935",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a written narrative of a fictional space mission into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart reading \"Interstellar Voyage\".\n- Display exactly 4 main mission stages, each represented by a unique rectangular node labeled with the stage name (e.g., Launch, Orbit Insertion, Exploration, Return).\n- Represent the mission start with an oval-shaped node labeled \"Mission Commence\" and the end with an ellipse-shaped node labeled \"Mission Complete\", each having a distinct fill color.\n- Use a diamond-shaped node to denote a critical decision point labeled \"Navigate Asteroid Field\".\n- Connect all nodes with clear directional arrows to depict the sequential flow of the mission stages.\n- Add a loopback arrow from the \"Navigate Asteroid Field\" node back to the \"Orbit Insertion\" node, labeled \"Re-assess Trajectory\".\n- Include a node shaped as a parallelogram to show \"Fuel Check\" between Exploration and Return stages.\n- Append a legend at the bottom of the diagram that defines each node shape and its corresponding role in the mission.",
        "raw_output_metric": [
            "Interstellar Voyage",
            "Mission Commence",
            "Launch",
            "Orbit Insertion",
            "Exploration",
            "Return",
            "Navigate Asteroid Field",
            "Re-assess Trajectory",
            "Fuel Check",
            "Mission Complete",
            "legend"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Interstellar Voyage",
            "How many main mission stages are depicted and what are they?": "4 stages: Launch, Orbit Insertion, Exploration, Return",
            "What node shape and label represent the start of the mission?": "Oval-shaped node labeled 'Mission Commence' with a distinct fill color",
            "What node shape and label indicate the mission's completion?": "Ellipse-shaped node labeled 'Mission Complete' with a distinct fill color",
            "Which node is diamond-shaped and what decision does it represent?": "Diamond-shaped node representing 'Navigate Asteroid Field'",
            "What is the label on the loopback arrow, and between which nodes does it connect?": "Re-assess Trajectory; connects 'Navigate Asteroid Field' back to 'Orbit Insertion'",
            "What node shape is used for the 'Fuel Check' and where is it placed?": "Parallelogram-shaped node placed between the Exploration and Return stages",
            "What information does the legend at the bottom of the diagram provide?": "It defines each node shape and its corresponding role in the mission"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000936",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an urban transportation network into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Urban Transit Map\".\n- Display exactly 4 main transit hubs, each represented as a rectangular node.\n- Connect all transit hubs sequentially with directional arrows indicating major transit routes.\n- Integrate a diamond-shaped node at one hub representing a critical decision point for route diversion.\n- Add a cylinder-shaped node connected to one hub to represent a maintenance facility.\n- Incorporate at least one looping arrow from a transit hub to itself symbolizing a circular bus route.\n- Apply distinct fill colors: one color for transit hubs and a different color for the maintenance facility.\n- Provide a legend at the bottom of the diagram clearly explaining the meanings of each node shape and assigned color.",
        "raw_output_metric": [
            "flowchart LR",
            "Urban Transit Map",
            "Hub 1",
            "Hub 2",
            "Hub 3",
            "Hub 4",
            "-->",
            "[",
            "]",
            "{",
            "}",
            "((Maintenance Facility))",
            "loop",
            "Legend"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Urban Transit Map",
            "How many main transit hubs (rectangular nodes) are shown?": "4",
            "Are the transit hubs connected sequentially by directional arrows?": "Yes",
            "What shape is used at one hub to represent a critical decision point for route diversion?": "Diamond",
            "What shape represents the maintenance facility connected to one of the hubs?": "Cylinder",
            "Is there a looping arrow from at least one transit hub to itself indicating a circular bus route?": "Yes",
            "Are distinct fill colors used for the transit hubs and the maintenance facility?": "Yes",
            "Is a legend provided at the bottom of the diagram explaining node shapes and assigned colors?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000937",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a detailed workflow of organizing a virtual conference into a structured Mermaid diagram.\n\nFeature Requirements:\n- The diagram must have a title labeled \"Virtual Conference Workflow\" at the top.\n- Display exactly 4 main milestones, each contained within a uniquely labeled node connected sequentially with directional arrows.\n- Use a circle-shaped node to represent the \"Registration\" step.\n- Include a branching structure where the process splits into \"Speaker Sessions\" and \"Networking\" nodes.\n- Include a feedback loop arrow from the \"Post-Conference Survey\" node that loops back to the \"Planning\" node.\n- Utilize distinct color fills for \"Planning\", \"Execution\", and \"Follow-Up\" nodes.\n- Anchor a legend at the bottom of the diagram, explaining the meanings of the node shapes and colors used.",
        "raw_output_metric": [
            "Virtual Conference Workflow",
            "Planning",
            "Registration",
            "Execution",
            "Follow-Up",
            "Speaker Sessions",
            "Networking",
            "Post-Conference Survey",
            "legend",
            "circle"
        ],
        "VQA": {
            "What is the diagram title displayed at the top?": "Virtual Conference Workflow",
            "How many main milestone nodes are shown in the diagram?": "4",
            "Which step is represented with a circle-shaped node?": "Registration",
            "What are the two nodes branching from the main sequence?": "Speaker Sessions and Networking",
            "Which node has a feedback loop arrow returning to another node and what is that target?": "Post-Conference Survey loops back to Planning",
            "Which nodes are styled with distinct color fills?": "Planning, Execution, and Follow-Up",
            "Is there a legend present in the diagram?": "Yes",
            "What does the legend explain?": "Node shapes and color meanings"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000938",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a written narrative about a treasure hunt event into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Treasure Hunt Adventure.\"\n- Display exactly 4 key locations as circular nodes, each representing a distinct phase of the hunt, connected sequentially with arrows.\n- Use a parallelogram-shaped node to represent a clue decoding step within the narrative.\n- Include an offshoot arrow indicating an optional detour to collect bonus items.\n- Ensure all nodes are labeled with clear names and connected by directional arrows showing the progression of the hunt.\n- Apply a unique border style to the starting node to visually distinguish it as the entry point.\n- Use square nodes exclusively for event action steps throughout the diagram.\n- Include a legend at the bottom of the diagram explaining the meaning of each node shape.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Treasure Hunt Adventure",
            "How many key location nodes are included in the flowchart?": "4",
            "What shape are the key location nodes representing distinct phases of the hunt?": "Circular",
            "What shape is used to represent the clue decoding step?": "Parallelogram",
            "What does the offshoot arrow indicate in the diagram?": "An optional detour to collect bonus items",
            "What border style is applied to the starting node?": "A unique border style to visually distinguish it as the entry point",
            "What shape is used exclusively for event action steps?": "Square",
            "What is included at the bottom of the diagram to explain the node shapes?": "A legend explaining the meaning of each node shape"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000939",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a narrative description of a smart home security system into a Mermaid diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Smart Home Security Workflow\".\n- Display exactly 4 main steps, each contained in a uniquely labeled node and connected with directional arrows.\n- Use a diamond-shaped node to indicate a sensor activation decision point.\n- Represent the data processing step in an oval-shaped node to differentiate from other steps.\n- Ensure a feedback loop arrow is present from the final node back to the initial sensor status verification step.\n- Distinguish the initial alarm trigger step with a blue fill and the resolution step with a green fill.\n- Use rectangular nodes for all standard processing actions.\n- Arrange nodes in a left-to-right sequence with explicit arrow markers indicating process flow.\n- Include a sub-section at the bottom of the diagram listing each node shape along with its corresponding function.\n- Ensure all nodes include a brief description of the step occurring in that part of the system.",
        "raw_output_metric": [
            "Smart Home Security Workflow",
            "graph LR",
            "->",
            "diamond",
            "oval",
            "rectangle",
            "blue",
            "green",
            "Initial Alarm Trigger",
            "Sensor Activation Decision",
            "Data Processing",
            "Resolution",
            "Legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the diagram?": "Smart Home Security Workflow",
            "How many main steps are explicitly shown in the workflow?": "4",
            "Which node is drawn in a diamond shape?": "The sensor activation decision point",
            "Which step is represented in an oval-shaped node?": "The data processing step",
            "Is there a feedback loop arrow in the diagram and where does it connect from/to?": "Yes, from the final node back to the initial sensor status verification step",
            "Which node is distinguished with a blue fill?": "The initial alarm trigger step",
            "Which node is marked with a green fill?": "The resolution step",
            "Is there a sub-section listing node shapes along with their corresponding functions at the bottom?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000940",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a troubleshooting workflow into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Troubleshooting Workflow\".\n- Display exactly 4 main steps for error detection, analysis, resolution, and testing, each within separate nodes.\n- Use a diamond-shaped node to represent a decision point where the error is confirmed.\n- Incorporate a loopback arrow from the testing node that points back to the error detection node.\n- Clearly mark \"Start\" and \"End\" nodes with distinctive color fills to differentiate them.\n- Use rectangular nodes exclusively for actions and procedural steps in the process.\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape.",
        "raw_output_metric": [
            "graph TD",
            "Troubleshooting Workflow",
            "Start",
            "End",
            "Error Detection",
            "Analysis",
            "Resolution",
            "Testing",
            "Error Confirmed?",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Troubleshooting Workflow",
            "How many main steps are included for error detection, analysis, resolution, and testing?": "4",
            "What labels are used for the 4 main procedural steps?": "Error Detection, Analysis, Resolution, Testing",
            "Which node is represented using a diamond shape?": "The decision point where the error is confirmed",
            "Which two nodes have distinctive color fills to differentiate them?": "Start and End",
            "What shape is used exclusively for the action and procedural step nodes?": "Rectangular",
            "Where does the loopback arrow originate and terminate?": "From the Testing node back to the Error Detection node",
            "What is provided at the bottom of the diagram to explain the node shapes?": "A legend detailing the meaning of each node shape"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000941",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative description of an automated ticket booking process into a Mermaid sequence diagram.\n\nFeature Requirements:\n- Include a header titled \"Ticket Booking Sequence\" centered at the top of the diagram.\n- Represent the interactions between exactly 4 actors: \"User\", \"Web Server\", \"Payment Gateway\", and \"Database\" with distinct lifelines.\n- Display a synchronous message from the User to the Web Server initiating the booking process, clearly labeled \"Start Booking\".\n- Use dashed arrow lines for return messages, ensuring that every synchronous call has a corresponding response.\n- Clearly indicate a decision point by using a note labeled \"Payment Approved?\" connected to the Payment Gateway.\n- Incorporate a loop to simulate the retry mechanism for a failed payment, with a label \"Retry Payment\".\n- Include a clear termination message at the end of the process for both successful and unsuccessful outcomes.\n- Attach a legend at the bottom of the diagram explaining the meaning of solid and dashed message arrows.",
        "raw_output_metric": [
            "Ticket Booking Sequence",
            "User",
            "Web Server",
            "Payment Gateway",
            "Database",
            "Start Booking",
            "Payment Approved?",
            "Retry Payment",
            "legend",
            "solid",
            "dashed",
            "loop"
        ],
        "VQA": {
            "What is the header title at the top of the diagram?": "Ticket Booking Sequence (centered)",
            "How many actors are represented in the diagram?": "4 actors",
            "Which actors are involved in the sequence diagram?": "User, Web Server, Payment Gateway, and Database",
            "Which actor initiates the booking process and what is the message label?": "User initiates with 'Start Booking'",
            "How are the return messages visually depicted in the diagram?": "With dashed arrow lines",
            "What decision point is indicated in the diagram and what is its label?": "A note labeled 'Payment Approved?' connected to the Payment Gateway",
            "What loop mechanism is included to handle failed payment attempts?": "A loop labeled 'Retry Payment'",
            "Is there a termination message shown at the end of the process?": "Yes, for both successful and unsuccessful outcomes",
            "What explanation is provided in the legend attached at the bottom of the diagram?": "The legend explains the meaning of solid and dashed arrow messages"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000942",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a company structure description into a Mermaid organizational chart diagram.\n\nFeature Requirements:\n- Include a title at the top of the chart labeled \"Organizational Structure\".\n- Display exactly 4 distinct departments, each represented as a unique node, connected with directional arrows.\n- Use elliptical nodes for managerial positions and rectangular nodes for staff positions.\n- Designate one node as the CEO with a highlighted border style distinct from all other nodes.\n- Apply a specific fill color for managerial nodes and a different fill color for staff nodes.\n- Include horizontal and vertical arrows to demonstrate both same-level connections and hierarchical reporting.\n- Annotate each node with text that indicates its role and department.\n- Insert a branch with a sub-department that loops back to its parent, represented by a curved arrow.\n- Include a legend at the bottom of the diagram explaining the different shapes and color codes.\n- Arrange all nodes to clearly depict a top-down reporting structure with precise arrow directions.",
        "raw_output_metric": [
            "graph TD",
            "Organizational Structure",
            "CEO",
            "((CEO))",
            "Department 1",
            "Department 2",
            "Department 3",
            "Department 4",
            "((Manager))",
            "[Staff]",
            "-->",
            "-.->",
            "legend",
            "classDef"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Organizational Structure",
            "How many distinct department nodes are shown?": "4",
            "Which shape is used for managerial positions?": "Elliptical",
            "Which shape is used for staff positions?": "Rectangular",
            "Which node is designated as the CEO with a highlighted border style?": "CEO",
            "Are different fill colors applied to managerial and staff nodes?": "Yes",
            "Does the chart include both horizontal and vertical directional arrows?": "Yes",
            "Is there a branch with a sub-department that loops back to its parent using a curved arrow?": "Yes",
            "Is a legend explaining shapes and color codes included at the bottom of the diagram?": "Yes",
            "How is the overall node arrangement structured?": "Top-down reporting structure"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000943",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of an online flight booking process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Place a title at the top of the diagram labeled \"Flight Booking Process\".\n- Create exactly 4 primary action steps in rectangular nodes with the labels \"Search Flights\", \"Select Flight\", \"Enter Passenger Info\", and \"Confirm Booking\".\n- Include one diamond-shaped node labeled \"Payment Successful?\" to mark the decision point.\n- Draw a loop-back arrow from the \"Payment Failed\" branch of the decision node back to the \"Enter Passenger Info\" node.\n- Use a red fill for the initial \"Start\" node and a green fill for the final \"End\" node.\n- Connect every node with clear, straight-line arrows that indicate the sequential flow of the process.\n- Add a legend at the bottom of the diagram explaining the meanings of the rectangular nodes (for actions) and the diamond-shaped node (for decisions).",
        "raw_output_metric": [
            "Flight Booking Process",
            "Search Flights",
            "Select Flight",
            "Enter Passenger Info",
            "Confirm Booking",
            "Payment Successful?",
            "Payment Failed",
            "Start",
            "End",
            "legend",
            "red",
            "green"
        ],
        "VQA": {
            "What is the title displayed at the top of the diagram?": "Flight Booking Process",
            "How many primary action steps are depicted using rectangular nodes?": "4",
            "What are the labels of the primary action steps?": "Search Flights, Select Flight, Enter Passenger Info, Confirm Booking",
            "What shape is used for the decision node?": "Diamond",
            "What is the label of the decision node?": "Payment Successful?",
            "Which node has a red fill color?": "Start",
            "Which node has a green fill color?": "End",
            "Is there a loop-back arrow included in the diagram?": "Yes",
            "From which branch does the loop-back arrow originate and to which node does it point?": "From Payment Failed branch of the decision node to Enter Passenger Info",
            "What does the legend at the bottom explain?": "Rectangular nodes represent actions and the diamond-shaped node represents a decision"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000944",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nTransform a restaurant ordering process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Ordering Process\".\n- Display exactly 4 main process steps: \"Place Order\", \"Prepare Food\", \"Deliver Order\", and \"Receive Payment\", each within a unique rectangular node.\n- Use a diamond-shaped node labeled \"Order Verification\" as a decision point between \"Place Order\" and \"Prepare Food\".\n- Incorporate a loopback arrow from \"Prepare Food\" back to \"Order Verification\" to represent order adjustments.\n- Apply a distinct green fill for the starting node (\"Place Order\") and a blue fill for the ending node (\"Receive Payment\").\n- Ensure all nodes are connected sequentially with clear directional arrows indicating the order of operations.\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape: circle for start, rectangular for actions, and diamond for decisions.\n- Add a textual note within the diagram labeled \"Time-sensitive Process\" using a clearly differentiated text style.",
        "raw_output_metric": [
            "Ordering Process",
            "Place Order",
            "Order Verification",
            "Prepare Food",
            "Deliver Order",
            "Receive Payment",
            "Time-sensitive Process",
            "legend",
            "circle",
            "rectangular",
            "diamond",
            "green",
            "blue"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Ordering Process",
            "How many main process steps are included in the flowchart?": "4",
            "Which node is used as the decision point and what is its shape?": "Order Verification is a diamond-shaped node",
            "What labels are on the rectangular nodes representing actions?": "Place Order, Prepare Food, Deliver Order, Receive Payment",
            "What fill color is applied to the starting node 'Place Order'?": "Green",
            "What fill color is applied to the ending node 'Receive Payment'?": "Blue",
            "Is there a loopback from 'Prepare Food' to 'Order Verification'?": "Yes",
            "What note is included in the diagram and how is it differentiated?": "Time-sensitive Process with a clearly differentiated text style",
            "What does the legend at the bottom specify about the node shapes?": "Circle for start, rectangular for actions, diamond for decisions"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000945",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a narrative that explains the process of organizing a community workshop into a Mermaid sequence diagram.\n\nFeature Requirements:\n- Include a title at the top of the diagram labeled \"Community Workshop Sequence\".\n- Display exactly 4 sequential steps within rectangular nodes, each representing a distinct phase in the organization process.\n- Incorporate a circular node to represent a pivotal review milestone between the planning and execution phases.\n- Represent a parallel task scenario using a fork-like structure to show simultaneous activities during preparations.\n- Use directional arrows to connect all nodes, ensuring that the flow of events is clearly indicated.\n- Color the initial planning node in blue and the final evaluation node in orange to differentiate the beginning and end.\n- Add a loopback arrow from the evaluation node to the planning node to indicate revision based on feedback.\n- Include a legend at the bottom explaining the shapes used: rectangles for process steps and a circle for milestone reviews.\n- Label each node with both a phase name and a brief description of the actions involved in that phase.",
        "raw_output_metric": [
            "Community Workshop Sequence",
            "sequenceDiagram",
            "Planning",
            "Preparation",
            "Execution",
            "Evaluation",
            "Review Milestone",
            "blue",
            "orange",
            "fork",
            "par",
            "->",
            "loop",
            "legend",
            "rectangles for process steps",
            "circle for milestone reviews"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Community Workshop Sequence",
            "How many sequential rectangular nodes representing process steps are displayed?": "4",
            "Which node is colored blue?": "The initial planning node",
            "Which node is colored orange?": "The final evaluation node",
            "Is there a circular node in the diagram, and what does it represent?": "Yes, a pivotal review milestone",
            "Does the diagram include a fork-like structure showing parallel tasks?": "Yes, during preparations",
            "Is there a loopback arrow from the evaluation node to the planning node?": "Yes",
            "What does the legend at the bottom explain?": "Rectangles for process steps and a circle for milestone reviews"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000946",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a university course registration process into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Registration Process\".\n- Display exactly 4 main process steps: \"Start\", \"Input Student Details\", \"Evaluate Prerequisites\", and \"Complete Registration\", each represented in distinct nodes.\n- Use a diamond-shaped node to represent a decision point labeled \"Prerequisite Check\".\n- Connect the nodes with arrows in a left-to-right sequential flow.\n- Include a loopback arrow from the \"Prerequisite Check\" node back to the \"Input Student Details\" node if prerequisites are not met.\n- Use circular nodes exclusively for the \"Start\" and \"Complete Registration\" steps.\n- Use rectangular nodes exclusively for the \"Input Student Details\" and \"Evaluate Prerequisites\" process steps.\n- Color the \"Prerequisite Check\" decision node with a distinct fill color (e.g., yellow) to differentiate it from action nodes.\n- Add a legend at the bottom of the diagram that explains the meaning of the node shapes: circular for start/end, rectangular for actions, and diamond for decisions.\n- Ensure all nodes are clearly labeled with their respective step names as provided in the process description.",
        "raw_output_metric": [
            "graph LR",
            "Registration Process",
            "((Start))",
            "[Input Student Details]",
            "[Evaluate Prerequisites]",
            "((Complete Registration))",
            "{Prerequisite Check}",
            "yellow",
            "Legend",
            "circular",
            "rectangular",
            "diamond",
            "->",
            "loopback"
        ],
        "VQA": {
            "What is the title at the top of the flowchart?": "Registration Process",
            "How many main process steps are displayed?": "4",
            "Which processes are represented as main steps?": "Start, Input Student Details, Evaluate Prerequisites, Complete Registration",
            "What shape is used for the 'Start' node?": "Circular",
            "What shape is used for the 'Input Student Details' node?": "Rectangular",
            "Which node is represented as a diamond shape and how is it colored?": "Prerequisite Check, colored yellow",
            "Is there a loopback arrow visible from any node? If so, which nodes does it connect?": "Yes, from Prerequisite Check back to Input Student Details",
            "How is the flow direction indicated in the diagram?": "Left-to-right sequential flow",
            "What shape is used for the 'Complete Registration' node?": "Circular",
            "What does the legend at the bottom explain?": "It explains that circular nodes are for start/end, rectangular nodes for actions, and diamond nodes for decisions"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000947",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a space mission launch sequence into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- The diagram must have a title at the top labeled \"Launch Sequence\".\n- Include exactly 4 primary process steps as nodes: \"Pre-Launch Check\", \"Fueling\", \"Countdown\", and \"Liftoff\".\n- Represent a decision point with a diamond-shaped node labeled \"Abort?\" placed between \"Fueling\" and \"Countdown\".\n- Connect all nodes in a clear top-to-bottom sequential order using directional arrows.\n- Use a circular node exclusively for the \"Countdown\" step to differentiate it from other rectangular action nodes.\n- Draw a loopback arrow from the \"Abort?\" node returning to the \"Pre-Launch Check\" node to indicate a re-initiation process.\n- Apply a blue fill color for the \"Pre-Launch Check\" node and a red fill color for the \"Liftoff\" node.\n- Incorporate a side branch with a rectangular node labeled \"Mission Control\" connected beneath \"Fueling\" via dotted arrows.\n- Include a legend at the bottom of the diagram explaining the meaning of each node shape and the specified color fills.",
        "raw_output_metric": [
            "graph TD",
            "Launch Sequence",
            "Pre-Launch Check",
            "Fueling",
            "Countdown",
            "Liftoff",
            "Abort?",
            "Mission Control",
            "dotted",
            "loopback",
            "legend",
            "blue",
            "red"
        ],
        "VQA": {
            "What is the title displayed at the top of the flowchart?": "Launch Sequence",
            "How many primary process step nodes are there?": "4",
            "Which nodes represent the primary process steps?": "Pre-Launch Check, Fueling, Countdown, Liftoff",
            "What shape is used for the 'Countdown' node?": "Circular",
            "Which node is presented as a diamond-shaped decision point?": "Abort?",
            "From which node does the loopback arrow originate and to which node does it return?": "It originates from 'Abort?' and loops back to 'Pre-Launch Check'",
            "Which node is filled with blue color?": "Pre-Launch Check",
            "Which node is filled with red color?": "Liftoff",
            "What is the label of the side branch node connected by dotted arrows?": "Mission Control",
            "What additional visual element is included at the bottom of the diagram?": "A legend explaining node shapes and color fills"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000948",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nGenerate a flowchart that describes a machine troubleshooting process using Mermaid.\n\nFeature Requirements:\n- The diagram must have a title at the top labeled \"Machine Troubleshoot Flowchart\".\n- Include an oval-shaped Start node and a rounded rectangle-shaped End node with distinct color fills.\n- Display exactly 4 action steps, each enclosed in a rectangular node with unique identifiers.\n- Incorporate a diamond-shaped node labeled \"Issue Resolved?\" to indicate a decision point.\n- Create a loopback arrow from the negative decision branch of \"Issue Resolved?\" back to the first action step.\n- Draw an additional branch that originates from the second action step, diverges, and merges with the main flow before the End node.\n- Use arrows for all transitions to clearly indicate the sequential flow.\n- Apply distinct fill colors for decision nodes compared to action nodes.\n- Add a legend at the bottom of the diagram explaining the meanings of the oval, rectangular, diamond, and rounded rectangle node shapes.",
        "raw_output_metric": [
            "Machine Troubleshoot Flowchart",
            "Start",
            "End",
            "Action1",
            "Action2",
            "Action3",
            "Action4",
            "Issue Resolved?",
            "legend",
            "oval",
            "rectangular",
            "diamond",
            "rounded rectangle",
            "fill"
        ],
        "VQA": {
            "What is the title at the top of the diagram?": "Machine Troubleshoot Flowchart",
            "What shape is used for the Start node?": "Oval",
            "How many action steps are displayed as rectangular nodes?": "4",
            "What is the label on the decision (diamond-shaped) node?": "Issue Resolved?",
            "Is there a loopback arrow from the negative branch of the 'Issue Resolved?' node back to the first action step?": "Yes",
            "Does the second action step have an additional branch that diverges and then merges with the main flow?": "Yes",
            "Are arrows used for all transitions in the diagram?": "Yes",
            "Are distinct fill colors used to differentiate decision nodes from action nodes?": "Yes",
            "What shape is used for the End node?": "Rounded rectangle",
            "Is there a legend at the bottom of the diagram explaining the node shapes?": "Yes"
        }
    },
    {
        "task_name": "Text to Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "task_id": "000949",
        "input_type": "Text",
        "output_type": "Mermaid",
        "rendering": true,
        "query": "Please output Mermaid:\n\nTask:\nConvert a textual description of a smart home automation routine into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top labeled \"Smart Home Routine\".\n- Display exactly 4 distinct process steps (e.g., \"Detect\", \"Decide\", \"Actuate\", \"Verify\"), each within its own unique node.\n- Use a parallelogram-shaped node to represent a decision point where the system chooses between manual or automatic intervention.\n- Connect all nodes sequentially with arrows showing a clear, directional flow from start to finish.\n- Add a loopback arrow from the final \"Verify\" node back to the \"Detect\" node to indicate continuous monitoring.\n- Apply a unique fill color for the \"Detect\" start node and a contrasting fill color for the \"Verify\" end node to visually distinguish them.\n- Use rectangular nodes exclusively for action steps such as \"Actuate\".\n- Include a legend at the bottom of the diagram that explains the meaning of each node shape and the significance of the applied colors.\n- Label each arrow with a brief description of the transition to ensure clarity in the process flow.\n- Specify that all text within nodes and arrows should be centered and clearly legible.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title displayed at the top of the diagram?": "Smart Home Routine",
            "How many distinct process steps are shown as nodes?": "4",
            "What are the four process steps labeled in the diagram?": "Detect, Decide, Actuate, Verify",
            "Which node is designed with a parallelogram shape for decision making?": "Decide",
            "Which process step is represented with a rectangular node as an action step?": "Actuate",
            "Which two nodes have unique fill colors to distinguish them?": "Detect and Verify",
            "Is there a loopback arrow present, and if so, which nodes does it connect?": "Yes; it connects the Verify node back to the Detect node",
            "Does every arrow in the diagram include a brief label describing the transition?": "Yes",
            "Is there a legend included at the bottom of the diagram that explains node shapes and color significance?": "Yes"
        }
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001000",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a well-structured TOML configuration that organizes the content into clearly defined sections.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# System Generated Configuration File\" at the top.\n- Create a [header] section that includes the key \"title\" with a string value, and the key \"date\" with a string value formatted as \"YYYY-MM-DD\".\n- Define a [authors] section containing exactly two keys: \"primary\" and \"secondary\", each associated with a string representing a name.\n- Include a [preferences] section that features four numeric keys: \"threshold\", \"min\", \"max\", and \"median\", with integer values.\n- Establish a [controls] section that specifies exactly three keys: \"start\", \"stop\", and \"reset\", each with boolean values set to either true or false.\n- Add a [statistics] section that includes one key \"values\" which is an array containing exactly four floating point numbers.\n- Conclude with a [logs] section where three keys \"debug\", \"trace\", and \"error\" are provided, each formatted as a non-empty string enclosed in double quotes.",
        "raw_output_metric": [
            "header.title",
            "header.date",
            "authors.primary",
            "authors.secondary",
            "preferences.threshold",
            "preferences.min",
            "preferences.max",
            "preferences.median",
            "controls.start",
            "controls.stop",
            "controls.reset",
            "statistics.values",
            "logs.debug",
            "logs.trace",
            "logs.error"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001001",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the description of a scientific experiment setup into a structured TOML configuration file.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Scientific Configuration\".\n- Create an [experiment] section that includes two keys: \"title\" and \"objective\", each associated with a non-empty string value enclosed in double quotes.\n- Include a [metadata] section with exactly two keys: \"researcher\" and \"date\", each storing a string value, where \"date\" follows the \"YYYY-MM-DD\" format.\n- Add a [parameters] section containing three numeric keys: \"temperature\", \"pressure\", and \"duration\", where each value is either an integer or a float.\n- Introduce a [results] section that features an array key \"values\" holding exactly four integer values.\n- Provide a [notes] section with exactly three keys: \"initial\", \"midpoint\", and \"final\", each paired with a non-empty string value enclosed in double quotes.\n- Include a [flags] section that specifies two boolean keys: \"approved\" and \"verified\", each set to either true or false.",
        "raw_output_metric": [
            "experiment.title",
            "experiment.objective",
            "metadata.researcher",
            "metadata.date",
            "parameters.temperature",
            "parameters.pressure",
            "parameters.duration",
            "results.values",
            "notes.initial",
            "notes.midpoint",
            "notes.final",
            "flags.approved",
            "flags.verified"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001002",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration representing a simulation setup with structured sections and key-value pairs.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by the text \"Generated Simulation Configuration\".\n- Include a section labeled [configuration] that contains a key \"title\" with a string value enclosed in double quotes.\n- Under a section [info], specify exactly three keys: \"creator\", \"date\", and \"type\", each assigned a string value enclosed in double quotes.\n- Create a section [parameters] that includes exactly four keys: \"iterations\", \"timeout\", \"threshold\", and \"rate\", each set to an integer numeric value.\n- Under a section [flags], include exactly three boolean keys: \"active\", \"test_mode\", and \"log_enabled\", each set either to true or false.\n- Add a section [values] containing exactly two arrays: \"scores\" and \"indexes\", with each array holding exactly five decimal number values.\n- Include a section [notes] that has exactly two keys: \"remark\" and \"summary\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure that all string values in the TOML file are encapsulated in double quotes.",
        "raw_output_metric": [
            "configuration.title",
            "info.creator",
            "info.date",
            "info.type",
            "parameters.iterations",
            "parameters.timeout",
            "parameters.threshold",
            "parameters.rate",
            "flags.active",
            "flags.test_mode",
            "flags.log_enabled",
            "values.scores",
            "values.indexes",
            "notes.remark",
            "notes.summary"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001003",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nCreate a TOML configuration file for a simulated application environment with specific sections and defined values.\n\nFeature Requirements:\n- Begin with a single-line comment starting with # followed by the text \"Auto-generated TOML Config\".\n- Include a [project] section with two keys: \"title\" for the project name and \"id\" for the project identifier, each value must be enclosed in double quotes.\n- Within a [config] section, include two numeric keys: \"max_users\" and \"timeout\" with integer values, and one floating-point key \"threshold\" with a value formatted to two decimal places.\n- Add a [permissions] section that lists four boolean keys: \"read\", \"write\", \"execute\", and \"delete\", each set explicitly to true or false.\n- Create a [data] section containing two arrays: \"scores\" and \"values\", each array must hold exactly four integers.\n- Under a [notifications] section, provide exactly three keys: \"success\", \"failure\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that every string value is enclosed in double quotes and that consistent indentation of two spaces is used for any nested elements in sections.\n- The TOML file must follow proper TOML syntax without any extra spacing or additional sections.",
        "raw_output_metric": [
            "project.title",
            "project.id",
            "config.max_users",
            "config.timeout",
            "config.threshold",
            "permissions.read",
            "permissions.write",
            "permissions.execute",
            "permissions.delete",
            "data.scores",
            "data.values",
            "notifications.success",
            "notifications.failure",
            "notifications.alert"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001004",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a clearly defined TOML configuration structure.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Customized TOML Setup\".\n- Create a section labeled [header] containing a key \"description\" with a string value enclosed in double quotes.\n- Under the [config] section, include exactly three boolean keys: \"active\", \"enabled\", and \"locked\", each assigned either true or false.\n- Add a [metrics] section with exactly three keys: \"rating\", \"level\", and \"count\", each holding a numeric value.\n- Construct a [synchronization] section that contains exactly two arrays: \"timestamps\" and \"delays\", each with three numeric elements.\n- Define a [notes] section with exactly three keys: \"update\", \"review\", and \"deploy\", each associated with a non-empty string value in double quotes.\n- Ensure all string values in the TOML format are enclosed in double quotes.\n- Use exactly two spaces of indentation for nested elements within each section.",
        "raw_output_metric": [
            "header.description",
            "config.active",
            "config.enabled",
            "config.locked",
            "metrics.rating",
            "metrics.level",
            "metrics.count",
            "synchronization.timestamps",
            "synchronization.delays",
            "notes.update",
            "notes.review",
            "notes.deploy"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001005",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided game level narrative into a structured TOML configuration for a video game.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Auto-generated Game Level Configuration\".\n- Include a [level] section with the keys \"name\" and \"difficulty\", where \"name\" is a string and \"difficulty\" is one of \"easy\", \"medium\", or \"hard\", both enclosed in double quotes.\n- Under the [config] section, specify exactly two numeric keys: \"max_players\" and \"time_limit\", with \"time_limit\" representing the duration in seconds.\n- Create a [spawn] section containing three keys: \"start\", \"checkpoint\", and \"finish\". Each of these keys should be associated with a nested table that holds numeric coordinates \"x\" and \"y\".\n- Provide a [rules] section that includes exactly three boolean keys: \"jump\", \"run\", and \"crouch\", with their values set to true or false.\n- Ensure all string values appear within double quotes and maintain consistent two-space indentation for nested elements.",
        "raw_output_metric": [
            "level.name",
            "level.difficulty",
            "config.max_players",
            "config.time_limit",
            "spawn.start.x",
            "spawn.start.y",
            "spawn.checkpoint.x",
            "spawn.checkpoint.y",
            "spawn.finish.x",
            "spawn.finish.y",
            "rules.jump",
            "rules.run",
            "rules.crouch"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001006",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration for a simulation scenario.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Generated Simulation TOML File\".\n- Include a [config] section with keys \"simulationName\" and \"scenario\", both set to a string value enclosed in double quotes.\n- Under a [versionInfo] section, include exactly two keys: \"release\" and \"build\", each with a corresponding string value enclosed in double quotes.\n- Create a [flags] section containing three boolean keys: \"active\", \"interactive\", and \"monitor\", each set to either true or false.\n- Under a [parameters] section, provide exactly two arrays: \"thresholds\" and \"limits\", each holding exactly three numeric values.\n- Establish an [alerts] section with exactly three keys: \"notice\", \"caution\", and \"alert\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "raw_output_metric": [
            "config.simulationName",
            "config.scenario",
            "versionInfo.release",
            "versionInfo.build",
            "flags.active",
            "flags.interactive",
            "flags.monitor",
            "parameters.thresholds",
            "parameters.limits",
            "alerts.notice",
            "alerts.caution",
            "alerts.alert"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001007",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a sensor monitoring system that processes temperature data.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with # followed by the text \"Sensor Data TOML Configuration Generated\".\n- Create a [project] section with a key \"name\" set to a string that represents the project title.\n- Add a [contact] section containing exactly two keys: \"support_email\" and \"maintainer\", each assigned a valid email address string.\n- Include a [flags] section with three boolean keys: \"active\", \"record\", and \"debug\", each set to either true or false.\n- Define a [measurements] section that holds exactly one array named \"values\" with three integer numeric figures.\n- Insert an [info] section with exactly three keys: \"description\", \"location\", and \"notes\", each having a non-empty string value.\n- Ensure every string value is enclosed within double quotes.\n- Apply consistent indentation of two spaces for any nested elements within each section.",
        "raw_output_metric": [
            "project.name",
            "contact.support_email",
            "contact.maintainer",
            "flags.active",
            "flags.record",
            "flags.debug",
            "measurements.values",
            "info.description",
            "info.location",
            "info.notes"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001008",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration file that accurately reflects the settings and parameters for a fictional desktop application.\n\nFeature Requirements:\n- Start the output with a single-line comment that reads \"# Configurable TOML Setup\".\n- Include a [profile] section with the key \"username\" that holds a string value enclosed in double quotes.\n- Under the [version_info] section, include exactly two keys: \"release\" with a value in the format \"vX.Y.Z\" and \"build\" with a numeric value.\n- Create a [preferences] section containing three boolean keys: \"dark_mode\", \"notifications\", and \"auto_update\", each set to either true or false.\n- Provide a [numbers] section with two arrays: \"primes\" and \"fibonacci\", each array containing exactly four integer values.\n- Under the [logs] section, ensure there are exactly three keys: \"start\", \"stop\", and \"error_log\", each associated with a non-empty string value enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within any sections.",
        "raw_output_metric": [
            "# Configurable TOML Setup",
            "profile.username",
            "version_info.release",
            "version_info.build",
            "preferences.dark_mode",
            "preferences.notifications",
            "preferences.auto_update",
            "numbers.primes",
            "numbers.fibonacci",
            "logs.start",
            "logs.stop",
            "logs.error_log"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001009",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided passage into a TOML configuration that organizes predetermined fields and values.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Custom TOML Layout\".\n- Create a [header] section that includes two keys: \"project\" and \"date\", where \"project\" is a string and \"date\" is a string in \"YYYY-MM-DD\" format.\n- Include an [authors] section containing exactly two keys: \"primary\" and \"secondary\", each assigned a string value.\n- Add a [flags] section with three boolean keys: \"active\", \"deprecated\", and \"beta\", each set to either true or false.\n- Define a [metrics] section that includes exactly two arrays: \"values\" and \"points\", with each array containing exactly four integer values.\n- Under a [logs] section, include three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string message.\n- Introduce a [config] section with one key \"retry_count\" assigned an integer value.\n- Ensure every string value in the TOML file is enclosed in double quotes and maintain consistent two-space indentations where applicable.",
        "raw_output_metric": [
            "header.project",
            "header.date",
            "authors.primary",
            "authors.secondary",
            "flags.active",
            "flags.deprecated",
            "flags.beta",
            "metrics.values",
            "metrics.points",
            "logs.start",
            "logs.process",
            "logs.finish",
            "config.retry_count"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001010",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided instructions into a TOML configuration for a hypothetical web server setup.\n\nFeature Requirements:\n- Include a [header] section with a key service assigned a double-quoted string representing the web service name.\n- Under the [information] section, list exactly two keys: maintainer and date, each paired with a double-quoted string.\n- Include a [server] section containing exactly three keys: host (a double-quoted string), port (an integer), and protocol (a double-quoted string).\n- Provide a [limits] section with exactly two arrays: connections and bandwidth, each containing four numeric values.\n- Under the [flags] section, include three boolean keys: active, secure, and logging, each set to either true or false.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Web Server Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent two-space indentation for any nested elements within sections.",
        "raw_output_metric": [
            "header.service",
            "information.maintainer",
            "information.date",
            "server.host",
            "server.port",
            "server.protocol",
            "limits.connections",
            "limits.bandwidth",
            "flags.active",
            "flags.secure",
            "flags.logging"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001011",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration that represents a fictional space station control module setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Space Station Config\".\n- Create a [module] section containing a key \"identifier\" whose value is a string starting with \"SS-\" followed by digits.\n- Include a [control] section with two keys: \"active\" (a boolean value) and \"priority\" (an integer value).\n- Add an [environment] section that contains an array key \"sensors\" with exactly four string elements, each enclosed in double quotes.\n- Provide an [alarms] section with exactly two keys: \"low\" and \"high\", each assigned a numerical value.\n- Set up a [communications] section with two keys: \"frequency\" assigned a float value and \"channel\" assigned an integer value.\n- Ensure that all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements or complex structures.\n- Guarantee that all key names are in lower-case and use underscores to separate words.\n- Conclude with exactly one single-line comment at the end of the file starting with \"# Configuration Complete\".",
        "raw_output_metric": [
            "module.identifier",
            "control.active",
            "control.priority",
            "environment.sensors",
            "alarms.low",
            "alarms.high",
            "communications.frequency",
            "communications.channel"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001012",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration that outlines the details of a mythical creature registry.\n\nFeature Requirements:\n- Include a section labeled [registry] with the key \"theme\" set to a string value indicating \"Mythical Creatures\".\n- Under the [details] section, list exactly two keys: \"keeper\" and \"location\", each assigned a string value enclosed in double quotes.\n- Create a section [permissions] containing two keys \"searchable\" and \"editable\", each set to either true or false.\n- Provide a section [creatures] that includes exactly two arrays: \"names\" (holding three distinct strings for creature names) and \"ages\" (holding three corresponding integer values).\n- Insert a single-line comment at the top of the TOML file beginning with '#' followed by the text \"Mythical Creature Registry Configuration\".\n- Ensure all string values across the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within each section.",
        "raw_output_metric": [
            "registry.theme",
            "details.keeper",
            "details.location",
            "permissions.searchable",
            "permissions.editable",
            "creatures.names",
            "creatures.ages"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001013",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a well-structured TOML configuration that organizes project details, options, parameters, and logs.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment that starts with \"#\" followed by the text \"Automated TOML Setup\".\n- Create a [header] section that includes the key \"project\" with a corresponding string value enclosed in double quotes.\n- Under an [info] section, include exactly three keys: \"creator\", \"release\", and \"license\", each paired with a specific string value enclosed in double quotes.\n- Add an [options] section that contains two keys: \"max_connections\" and \"timeout\", each assigned a numeric (integer) value.\n- Insert a [parameters] section that includes exactly two arrays: \"values\" and \"thresholds\", each containing four precise floating-point numbers separated only by commas.\n- Create a [logs] section with exactly two keys: \"start\" and \"stop\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure that if any nested elements are present, they use a consistent indentation of two spaces.",
        "raw_output_metric": [
            "header.project",
            "info.creator",
            "info.release",
            "info.license",
            "options.max_connections",
            "options.timeout",
            "parameters.values",
            "parameters.thresholds",
            "logs.start",
            "logs.stop"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001014",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a TOML configuration file following the specific structure described below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" and the exact text \"New TOML Config File\".\n- Create a [header] section containing a key \"title\" with a string value in double quotes.\n- Include a [config] section with exactly two keys: \"creator\" and \"release\", each assigned a string value enclosed in double quotes.\n- Add a [flags] section that consists of three keys: \"active\", \"visible\", and \"modifiable\", each assigned either true or false.\n- Provide a [values] section with exactly two arrays: \"numbers\" and \"indexes\", where each array contains four integer values.\n- Create a [logs] section that has exactly three keys: \"start\", \"process\", and \"finish\", each associated with a non-empty string value in double quotes.\n- Ensure all sections and keys follow consistent two-space indentation for any nested content.",
        "raw_output_metric": [
            "header.title",
            "config.creator",
            "config.release",
            "flags.active",
            "flags.visible",
            "flags.modifiable",
            "values.numbers",
            "values.indexes",
            "logs.start",
            "logs.process",
            "logs.finish"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001015",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a custom project management system.\n\nFeature Requirements:\n- Include a single-line comment at the beginning of the TOML file starting with \"#\" followed by \"Project Configurations\" in plain text.\n- Create a [project] section containing two keys: \"name\" with a string value and \"id\" with a numeric value.\n- Under a [contacts] section, list exactly two entries: \"email\" and \"phone\", each set to a string representing valid contact information.\n- Include a [preferences] section with three boolean keys: \"notifications\", \"auto_save\", and \"dark_mode\", each independently set to either true or false.\n- Provide a [schedule] section that includes an array key \"deadlines\" containing exactly three date strings in the format \"YYYY-MM-DD\".\n- Create a [logs] section with exactly three keys: \"success\", \"failure\", and \"pending\", each assigned a non-empty string message.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.\n- Ensure the TOML file follows precise structure as defined with no additional sections or keys.",
        "raw_output_metric": [
            "project.name",
            "project.id",
            "contacts.email",
            "contacts.phone",
            "preferences.notifications",
            "preferences.auto_save",
            "preferences.dark_mode",
            "schedule.deadlines",
            "logs.success",
            "logs.failure",
            "logs.pending"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001016",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML blueprint for a simulation configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" that reads \"Simulation Configuration File\".\n- Create a [system] section containing a key \"name\" with a string value representing the simulation name.\n- Under a [configuration] section, include exactly three keys: \"iterations\" (an integer), \"threshold\" (a floating-point number), and \"speed\" (an integer).\n- Provide an [options] section with two boolean keys: \"debug_mode\" and \"logging_enabled\", each set to either true or false.\n- Create a [parameters] section that contains exactly two arrays: \"values\" and \"limits\", each with four numeric entries.\n- Include a [feedback] section comprising exactly three keys: \"status\", \"alert\", and \"note\", each associated with a non-empty string value.\n- Ensure all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections.",
        "raw_output_metric": [
            "system.name",
            "configuration.iterations",
            "configuration.threshold",
            "configuration.speed",
            "options.debug_mode",
            "options.logging_enabled",
            "parameters.values",
            "parameters.limits",
            "feedback.status",
            "feedback.alert",
            "feedback.note"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001017",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration for a fantasy role-playing game.\n\nFeature Requirements:\n- Add a [campaign] section with the key \"title\" assigned to a descriptive string enclosed in double quotes.\n- Include a [lore] section containing exactly two keys: \"background\" and \"myth\", each assigned a non-empty string.\n- Create a [npcs] section with three boolean flags: \"friendly\", \"neutral\", and \"hostile\", each set to either true or false.\n- Provide a [statistics] section that contains exactly two arrays: \"attributes\" and \"skills\", each including four integer numbers.\n- Under the [quests] section, list exactly three keys: \"main\", \"side\", and \"daily\", each paired with a succinct narrative string.\n- Incorporate a [rules] section featuring a single key \"combat_mode\" set to either \"turn_based\" or \"real_time\" as a string.\n- Begin the TOML file with a single-line comment starting with \"#\" followed by the text \"Fantasy LLM Configuration\".\n- Ensure all keys and string values are enclosed in double quotes and nested elements use two spaces for indentation.\n- Include a [metadata] section with exactly two keys: \"creator\" and \"release\", each with a corresponding string value.",
        "raw_output_metric": [
            "campaign.title",
            "lore.background",
            "lore.myth",
            "npcs.friendly",
            "npcs.neutral",
            "npcs.hostile",
            "statistics.attributes",
            "statistics.skills",
            "quests.main",
            "quests.side",
            "quests.daily",
            "rules.combat_mode",
            "metadata.creator",
            "metadata.release"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001018",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided event description into a precisely structured TOML configuration file.\n\nFeature Requirements:\n- Include an event title under an [event] section with the key \"name\" and assign it a string value.\n- Under a [details] section, list exactly three entries: \"date\", \"location\", and \"duration\", each paired with a string value.\n- Create a [config] section containing two integer keys: \"max_participants\" and \"min_age\", both set to specific numeric values.\n- Add a [flags] section featuring exactly four boolean keys: \"registration_open\", \"requires_ticket\", \"vip_access\", and \"catering_available\", each set to either true or false.\n- Provide an [agenda] section that includes an array named \"sessions\" with exactly four string values representing session start times.\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the text \"Event TOML Configuration generated\".\n- Ensure every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "event.name",
            "details.date",
            "details.location",
            "details.duration",
            "config.max_participants",
            "config.min_age",
            "flags.registration_open",
            "flags.requires_ticket",
            "flags.vip_access",
            "flags.catering_available",
            "agenda.sessions"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001019",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided text into a structured TOML configuration for an industrial monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" that reads \"Generated TOML Configuration for Industrial Monitor\".\n- Create a [system] section that includes exactly two keys: \"name\" with a string value and \"status\" with a string value that is either \"active\" or \"inactive\".\n- Under a [versionInfo] section, define exactly two keys: \"build\" and \"release\", each associated with a string value.\n- Include a [network] section containing two boolean keys: \"connected\" and \"secured\", each set explicitly to either true or false.\n- Add a [performance] section with exactly two numeric keys: \"latency\" and \"throughput\", both formatted as integers.\n- Create a [logs] section that includes exactly three keys: \"info\", \"debug\", and \"critical\", each associated with a non-empty string value.\n- Ensure every string value is enclosed in double quotes, while numeric and boolean values are provided without quotes.",
        "raw_output_metric": [
            "system.name",
            "system.status",
            "versionInfo.build",
            "versionInfo.release",
            "network.connected",
            "network.secured",
            "performance.latency",
            "performance.throughput",
            "logs.info",
            "logs.debug",
            "logs.critical"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001020",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration from the provided text describing a simulation setup.\n\nFeature Requirements:\n- Include a [header] section with exactly two keys: \"project\" and \"token\", each set to a string value.\n- Under the [simulation] section, include exactly two keys: \"duration\" and \"iterations\", each assigned a numeric value.\n- Include a [features] section containing three boolean keys: \"active\", \"monitored\", and \"recorded\", each with either true or false as the value.\n- Provide a [parameters] section that contains exactly two arrays: \"values\" with three floating-point numbers and \"weights\" with three integer numbers.\n- Under the [logs] section, ensure there are exactly three keys: \"info\", \"alert\", and \"crit\", each associated with a non-empty string value.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Simulation Configuration File\".\n- All string values in the TOML file must be enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "raw_output_metric": [
            "header.project",
            "header.token",
            "simulation.duration",
            "simulation.iterations",
            "features.active",
            "features.monitored",
            "features.recorded",
            "parameters.values",
            "parameters.weights",
            "logs.info",
            "logs.alert",
            "logs.crit"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001021",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration file for an online digital artwork exhibit with detailed metadata, options, collections, and notes.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment \"# Generated TOML Configuration\".\n- Include a [gallery] section with a key \"exhibit\" whose value is a non-empty string enclosed in double quotes.\n- Under a [credentials] section, list exactly two items: \"curator\" and \"year\", both as strings, each enclosed in double quotes.\n- Provide an [options] section containing three boolean keys: \"open\", \"public\", and \"highlight\", each set to either true or false.\n- Add a [collections] section that contains exactly two arrays: \"paintings\" and \"sculptures\", each holding four integer values.\n- In a [notes] section, include exactly three keys: \"review\", \"comment\", and \"summary\", each mapped to a non-empty string enclosed in double quotes.\n- Ensure all string values are enclosed in double quotes and maintain a consistent two-space indentation for nested elements.\n- Do not include any additional keys, sections, or extraneous text beyond the specified requirements.",
        "raw_output_metric": [
            "gallery.exhibit",
            "credentials.curator",
            "credentials.year",
            "options.open",
            "options.public",
            "options.highlight",
            "collections.paintings",
            "collections.sculptures",
            "notes.review",
            "notes.comment",
            "notes.summary"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001022",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided configuration narrative into a TOML file following the detailed structure below.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" that exactly reads \"Auto-generated TOML Setup\".\n- Create a [project] section with exactly two keys: \"name\" and \"date\", both assigned a string value.\n- Add a [contributors] section containing exactly three keys: \"lead\", \"assistant\", and \"reviewer\", each with a corresponding string value.\n- Define a [parameters] section with two keys: \"threshold\" and \"max_limit\", both assigned numeric values.\n- Create a [flags] section including exactly four keys: \"debug\", \"maintenance\", \"logging\", and \"backup\", each set to either true or false.\n- Include a [results] section that contains one array key \"scores\" with exactly five integer values.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of 2 spaces in the TOML file for elements within any sections.\n- The output should strictly follow the TOML structure as outlined without any extra keys or sections.",
        "raw_output_metric": [
            "project.name",
            "project.date",
            "contributors.lead",
            "contributors.assistant",
            "contributors.reviewer",
            "parameters.threshold",
            "parameters.max_limit",
            "flags.debug",
            "flags.maintenance",
            "flags.logging",
            "flags.backup",
            "results.scores"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001023",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a detailed TOML configuration for a network service setup.\n\nFeature Requirements:\n- The first line must be a comment starting with \"#\" followed by \"Generated Network Service Configuration\".\n- Include a [server] section with keys \"host\" (a string), \"port\" (an integer), and \"max_connections\" (an integer).\n- Under the [strategies] section, include exactly two arrays: \"destinations\" and \"weights\", each containing four numeric values.\n- Add a [logging] section with keys \"level\" and \"file\", both set as strings enclosed in double quotes.\n- Insert a [security] section containing two boolean keys: \"firewall_enabled\" and \"ssl_supported\", each set to either true or false.\n- Ensure all string values are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "raw_output_metric": [
            "server.host",
            "server.port",
            "server.max_connections",
            "strategies.destinations",
            "strategies.weights",
            "logging.level",
            "logging.file",
            "security.firewall_enabled",
            "security.ssl_supported"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001024",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration representing a custom server setup.\n\nFeature Requirements:\n- Start the file with a single-line comment that begins with \"#\" followed by the text \"Custom Server Configuration\".\n- Include a [configuration] section with a key \"name\" that holds a string describing the server name.\n- Under the [info] section, list exactly two keys: \"owner\" and \"date\", each assigned a string value.\n- Provide a [features] section containing exactly three boolean keys: \"active\", \"monitoring\", and \"logging\", each set to either true or false.\n- Create a [metrics] section with exactly two arrays: \"cpu_usage\" and \"memory_usage\", each containing three numeric values.\n- Include a [alerts] section that consists of exactly three keys: \"critical\", \"moderate\", and \"normal\", each associated with a non-empty string message.\n- Ensure every string value is enclosed in double quotes.\n- Use uniform indentation of two spaces for items that are nested within each section.",
        "raw_output_metric": [
            "configuration.name",
            "info.owner",
            "info.date",
            "features.active",
            "features.monitoring",
            "features.logging",
            "metrics.cpu_usage",
            "metrics.memory_usage",
            "alerts.critical",
            "alerts.moderate",
            "alerts.normal"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001025",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML structure that represents an event management schedule with clearly defined sections and values.\n\nFeature Requirements:\n- The TOML file must start with a single-line comment beginning with \"#\" followed by \"Generated Event Schedule\".\n- There must be an [event] section containing exactly one key: \"name\", with its value enclosed in double quotes.\n- Include a [details] section with exactly three keys: \"location\", \"date\", and \"time\", each assigned a string value enclosed in double quotes.\n- Create a [participants] section that defines two arrays: \"speakers\" and \"attendees\", each array containing exactly four string elements.\n- Add a [schedule] section that contains exactly three keys: \"opening\", \"break\", and \"closing\", each assigned a numeric value representing time in a 24-hour format.\n- Conclude with a [feedback] section that includes exactly two keys: \"positive\" and \"negative\", each associated with a non-empty string value enclosed in double quotes.\n- All string values in the TOML file must be enclosed in double quotes, and consistent indentation with two spaces must be used for nested elements.",
        "raw_output_metric": [
            "event.name",
            "details.location",
            "details.date",
            "details.time",
            "participants.speakers",
            "participants.attendees",
            "schedule.opening",
            "schedule.break",
            "schedule.closing",
            "feedback.positive",
            "feedback.negative"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001026",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the input text into a TOML configuration file for setting up a fictional game environment.\n\nFeature Requirements:\n- The output must start with a single-line comment beginning with \"#\" followed by the text \"Generated Game Configuration\".\n- Include a [game] section that contains the key \"title\" with a string value representing the name of the game.\n- Under a [profile] section, include two string keys: \"username\" and \"rank\", each displaying relevant game character details.\n- Create an [options] section with three boolean keys: \"sound\", \"multiplayer\", and \"debug\", each assigned either true or false.\n- Introduce a [stats] section containing one array \"scores\" that consists of exactly three integer values.\n- Add a [feedback] section where exactly two keys, \"positive\" and \"negative\", are defined with non-empty string values.\n- Ensure there is a [checkpoints] section with two arrays: \"sections\" and \"levels\", each containing exactly three numeric values.\n- All string values must be enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "game.title",
            "profile.username",
            "profile.rank",
            "options.sound",
            "options.multiplayer",
            "options.debug",
            "stats.scores",
            "feedback.positive",
            "feedback.negative",
            "checkpoints.sections",
            "checkpoints.levels"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001027",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided meeting summary text into a structured TOML configuration.\n\nFeature Requirements:\n- The TOML file must begin with a single-line comment starting with \"#\" followed by the text \"Meeting TOML Configuration\".\n- Include a [header] section with exactly two keys: \"meeting_topic\" and \"date\", each assigned a string value enclosed in double quotes.\n- Provide a [participants] section containing exactly two keys: \"present\" and \"absent\". The \"present\" key should be assigned an array of exactly three string values representing participant names, and \"absent\" should be assigned an array of exactly two string values.\n- Create an [agenda] section that includes exactly three numeric keys: \"item1\", \"item2\", and \"item3\", each holding an integer value specifying minutes.\n- Add an [action_items] section with exactly three keys: \"todo\", \"in_progress\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent two-space indentation for any nested elements within sections.",
        "raw_output_metric": [
            "header.meeting_topic",
            "header.date",
            "participants.present",
            "participants.absent",
            "agenda.item1",
            "agenda.item2",
            "agenda.item3",
            "action_items.todo",
            "action_items.in_progress",
            "action_items.completed"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001028",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for a warehouse management system.\n\nFeature Requirements:\n- Create a [warehouse] section that contains exactly three keys: \"name\" (string), \"capacity\" (integer), and \"location\" (string).\n- Under a [system] section, include two keys: \"version\" (string) and \"uptime_hours\" (integer) with non-empty values.\n- Develop a [configuration] section featuring four boolean keys: \"maintenance_mode\", \"auto_restock\", \"inventory_tracking\", and \"notifications_enabled\", each set to either true or false.\n- Insert a [statistics] section containing two arrays: \"incoming_shipments\" and \"outgoing_shipments\", with each array holding exactly three numeric values.\n- Include a [remarks] section with three keys: \"startup\", \"operation\", and \"shutdown\", each associated with a non-empty string.\n- At the very beginning of the TOML file, add a single-line comment starting with \"#\" followed by \"Generated Warehouse Configuration\".",
        "raw_output_metric": [
            "warehouse.name",
            "warehouse.capacity",
            "warehouse.location",
            "system.version",
            "system.uptime_hours",
            "configuration.maintenance_mode",
            "configuration.auto_restock",
            "configuration.inventory_tracking",
            "configuration.notifications_enabled",
            "statistics.incoming_shipments",
            "statistics.outgoing_shipments",
            "remarks.startup",
            "remarks.operation",
            "remarks.shutdown"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001029",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a configuration file for a fictional online bookstore management system.\n\nFeature Requirements:\n- Include a [store] section containing a key \"name\" with a string value representing the bookstore's name.\n- Under a [config] section, specify exactly two keys: \"currency\" and \"locale\", both with string values enclosed in double quotes.\n- Create a [security] section that includes three boolean keys: \"ssl\", \"encryption\", and \"backup\", each set to either true or false.\n- Provide a [products] section with two arrays: \"isbn_list\" containing exactly three integer-like values and \"prices\" containing exactly three floating-point numbers.\n- Include an [alerts] section that has exactly three keys: \"success\", \"info\", and \"error\", each paired with a descriptive string message that is at least ten characters long.\n- The file must begin with a single-line comment reading \"# Generated TOML for Online Bookstore\" at the very top.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use a consistent indentation of two spaces for nested elements within sections.",
        "raw_output_metric": [
            "store.name",
            "config.currency",
            "config.locale",
            "security.ssl",
            "security.encryption",
            "security.backup",
            "products.isbn_list",
            "products.prices",
            "alerts.success",
            "alerts.info",
            "alerts.error"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001030",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a detailed TOML configuration for a software deployment setup.\n\nFeature Requirements:\n- Include a [header] section with a key \"label\" that holds a unique string value.\n- Under the [config] section, list exactly three keys: \"maintainer\", \"release\", and \"patch\", each associated with a string value.\n- Provide a [features] section containing two boolean keys: \"active\" and \"beta\", each set to either true or false.\n- Under the [parameters] section, create one array \"values\" that contains exactly four integer numbers.\n- Include a [logs] section that defines exactly three keys: \"start\", \"process\", and \"finish\", each with a non-empty string representing a timestamp.\n- Add a single-line comment at the beginning of the TOML file starting with \"#\" followed by the text \"Awaiting TOML System Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "raw_output_metric": [
            "header.label",
            "config.maintainer",
            "config.release",
            "config.patch",
            "features.active",
            "features.beta",
            "parameters.values",
            "logs.start",
            "logs.process",
            "logs.finish"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001031",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a TOML configuration for a simulated monitoring system.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Auto-generated monitoring configuration\".\n- Include a [header] section with a key \"description\" that holds a brief summary of the system, with its value enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"name\" and \"email\", both assigned string values in double quotes.\n- Provide a [permissions] section containing three boolean keys: \"read\", \"write\", and \"execute\", each set to either true or false.\n- Include a [performance] section that contains exactly two arrays: \"latencies\" and \"throughputs\", each holding four numeric values.\n- Under the [alerts] section, ensure there are exactly three keys: \"critical\", \"warning\", and \"info\", each associated with a non-empty string value in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "header.description",
            "creator.name",
            "creator.email",
            "permissions.read",
            "permissions.write",
            "permissions.execute",
            "performance.latencies",
            "performance.throughputs",
            "alerts.critical",
            "alerts.warning",
            "alerts.info"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001032",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML configuration for a virtual event management system.\n\nFeature Requirements:\n- Insert a single-line comment at the top starting with \"#\" followed by \"LLM Generated Config for Virtual Events\".\n- Create a [project] section with the key \"name\" set to a string value enclosed in double quotes.\n- Add a [details] section that includes exactly two keys: \"description\" and \"date\", each assigned a string value enclosed in double quotes.\n- Include a [config] section that contains exactly four numeric keys: \"maxParticipants\", \"minParticipants\", \"ticketPrice\", and \"duration\", each set to a numeric value.\n- Provide a [preferences] section holding three arrays: \"themes\", \"venues\", and \"formats\", each containing exactly four string elements enclosed in double quotes.\n- Create a [status] section with exactly three keys: \"upcoming\", \"ongoing\", and \"completed\", each associated with a non-empty string value enclosed in double quotes.\n- Ensure the [config] and [preferences] sections use consistent indentation of three spaces for any nested elements.\n- Output the sections in the following order: comment first, then [project], followed by [details], [config], [preferences], and finally [status].",
        "raw_output_metric": [
            "project.name",
            "details.description",
            "details.date",
            "config.maxParticipants",
            "config.minParticipants",
            "config.ticketPrice",
            "config.duration",
            "preferences.themes",
            "preferences.venues",
            "preferences.formats",
            "status.upcoming",
            "status.ongoing",
            "status.completed"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001033",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided meteorological sensor description into a structured TOML configuration.\n\nFeature Requirements:\n- Include a single-line comment at the top starting with \"#\" followed by the text \"Generated Meteorological Configuration\".\n- Under the [header] section, include a key \"system\" with the string value \"Weather Station\" enclosed in double quotes.\n- Under the [parameters] section, list exactly three keys: \"temperature\", \"humidity\", and \"pressure\", each assigned a numeric value with at least one decimal point.\n- Under the [alerts] section, specify exactly three keys: \"critical\", \"warning\", and \"normal\", each mapped to a descriptive message as a non-empty string enclosed in double quotes.\n- Under the [operational] section, include exactly two boolean keys: \"active\" and \"standby\", each set to either true or false.\n- Under the [schedules] section, provide a key \"times\" that holds an array of exactly three ISO 8601 formatted date-time strings.\n- Use consistent indentation of two spaces for nested elements within each section and ensure all string values are wrapped in double quotes.",
        "raw_output_metric": [
            "header.system",
            "parameters.temperature",
            "parameters.humidity",
            "parameters.pressure",
            "alerts.critical",
            "alerts.warning",
            "alerts.normal",
            "operational.active",
            "operational.standby",
            "schedules.times"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001034",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the given text into a detailed TOML file representing a robotics control system configuration.\n\nFeature Requirements:\n- Begin with a single-line comment that reads \"# Config generated for robotics control system\" at the very start of the file.\n- Include a [robot] section that contains exactly two keys: name and id, both holding string values enclosed in double quotes.\n- Create a [mechanics] section with exactly three keys: joints, sensors, and motors, each assigned an array of exactly four integer values.\n- Define a [system] section with two keys: uptime, which must be an integer, and status, which must be a non-empty string enclosed in double quotes.\n- Add a [parameters] section that includes three keys: threshold (assigned a float with one decimal point), ratio (assigned a float with one decimal point), and scale (assigned an integer).\n- Provide a [logs] section containing exactly three keys: daily, error, and debug, with each key holding an array of exactly three log messages as strings.\n- Use consistent indentation of two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "robot.name",
            "robot.id",
            "mechanics.joints",
            "mechanics.sensors",
            "mechanics.motors",
            "system.uptime",
            "system.status",
            "parameters.threshold",
            "parameters.ratio",
            "parameters.scale",
            "logs.daily",
            "logs.error",
            "logs.debug"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001035",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConstruct a TOML configuration for a virtual pet simulation game.\n\nFeature Requirements:\n- Include an introductory section [configuration] with a key \"app\" that is exactly \"Virtual Pet Simulator\".\n- Under the [details] section, include exactly three key-value pairs: \"creator\" (a string), \"release_date\" (a string in the format \"YYYY-MM-DD\"), and \"version\" (a string).\n- Add a [functions] section containing two arrays: \"actions\" and \"responses\", each with exactly four string elements.\n- Create a [parameters] section that holds three numeric keys: \"speed\", \"hunger_rate\", and \"happiness\", each assigned an integer value.\n- Under the [flags] section, include exactly four boolean keys: \"active\", \"logging\", \"debug\", and \"maintenance\", each set to either true or false.\n- Begin the file with a single-line comment starting with # and the text \"Virtual Pet Simulator TOML Configuration\".\n- Ensure every string value is enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within sections.",
        "raw_output_metric": [
            "configuration.app",
            "details.creator",
            "details.release_date",
            "details.version",
            "functions.actions",
            "functions.responses",
            "parameters.speed",
            "parameters.hunger_rate",
            "parameters.happiness",
            "flags.active",
            "flags.logging",
            "flags.debug",
            "flags.maintenance"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001036",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided customer record details into a structured TOML format.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by the text \"Generated Customer Record TOML\".\n- Include a [record] section with exactly two keys: \"customer\" and \"id\", both assigned string values enclosed in double quotes.\n- Under a [profile] section, include exactly two keys: \"age\" set as an integer and \"active\" set as a boolean.\n- Create a [subscriptions] section that contains one array key \"plans\", which holds exactly four numeric values.\n- Provide a [logs] section with exactly three keys: \"last_login\", \"signup_date\", and \"expiration\", each associated with a valid ISO8601 date string enclosed in double quotes.\n- Ensure every string value in the TOML file is enclosed in double quotes and use consistent indentation of two spaces for all nested elements.",
        "raw_output_metric": [
            "record.customer",
            "record.id",
            "profile.age",
            "profile.active",
            "subscriptions.plans",
            "logs.last_login",
            "logs.signup_date",
            "logs.expiration"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001037",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fictional event management system.\n\nFeature Requirements:\n- Include a header comment at the beginning of the TOML file that starts with # followed by the text \"Event Management Configuration\".\n- Under the [event] section, include a key name with a quoted string value representing the event title.\n- Under the [details] section, add exactly two keys: location (a quoted string) and date (a quoted string in the format \"YYYY-MM-DD\").\n- Under the [options] section, include three boolean keys: registration_open, ticketed, and live_stream, each set to either true or false.\n- Under the [stats] section, define two arrays: attendees and speakers, each containing exactly three positive integers.\n- Under the [notifications] section, include exactly three keys: announcement, reminder, and emergency, each associated with a non-empty quoted string message.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "event.name",
            "details.location",
            "details.date",
            "options.registration_open",
            "options.ticketed",
            "options.live_stream",
            "stats.attendees",
            "stats.speakers",
            "notifications.announcement",
            "notifications.reminder",
            "notifications.emergency"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001038",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the textual system configuration details into a neatly organized TOML file.\n\nFeature Requirements:\n- Start the file with a single-line comment beginning with \"#\" followed by the text \"TOML Configuration File Loaded\".\n- Create a top-level [config] section that includes a key named \"name\" with its value as a string.\n- Under a [properties] section, list exactly two keys: \"creator\" and \"build\", each assigned a double-quoted string.\n- Include a [flags] section with three boolean keys: \"active\", \"beta\", and \"deployed\", each set to either true or false.\n- Provide a [parameters] section that includes exactly two arrays: \"thresholds\" and \"limits\", each array containing three integer values.\n- Under an [alerts] section, add exactly three keys: \"notice\", \"alert\", and \"critical\", each associated with a non-empty, double-quoted string.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for elements nested within each section.",
        "raw_output_metric": [
            "config.name",
            "properties.creator",
            "properties.build",
            "flags.active",
            "flags.beta",
            "flags.deployed",
            "parameters.thresholds",
            "parameters.limits",
            "alerts.notice",
            "alerts.alert",
            "alerts.critical"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001039",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided narrative into a structured TOML configuration.\n\nFeature Requirements:\n- Start the TOML file with a single-line comment beginning with \"#\" followed by the exact phrase \"Auto-generated Config Data\".\n- Create a [document] section that includes a key \"headline\" with a string value enclosed in double quotes.\n- Add an [info] section containing exactly two keys: \"creator\" and \"date\", each assigned a string value in double quotes.\n- Construct an [options] section that lists four boolean keys: \"debug\", \"cache\", \"sync\", and \"backup\", each set to either true or false.\n- Include a [values] section with two arrays: \"samples\" containing exactly five integers and \"thresholds\" containing exactly three floating-point numbers.\n- Create a [comments] section with exactly two keys: \"note\" and \"remark\", each associated with a non-empty string value in double quotes.\n- Ensure all array elements and string values are enclosed appropriately within the TOML file using double quotes.\n- Apply consistent indentation with two spaces for any nested items within sections.",
        "raw_output_metric": [
            "document.headline",
            "info.creator",
            "info.date",
            "options.debug",
            "options.cache",
            "options.sync",
            "options.backup",
            "values.samples",
            "values.thresholds",
            "comments.note",
            "comments.remark"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001040",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nGenerate a structured TOML configuration for a fantasy game level setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Fantasy Game Level Configuration\".\n- Include a \"[level]\" section with a key \"name\" that holds a string value enclosed in double quotes representing the level name.\n- Under the \"[settings]\" section, include exactly two keys: \"difficulty\" with a string value and \"max_players\" with an integer value.\n- Create an \"[environment]\" section that contains exactly four keys: \"gravity\" (a numeric value), \"atmosphere\" (a string value), \"temperature\" (an integer value), and \"time_of_day\" (a string value), each properly formatted.\n- Provide a \"[score]\" section that includes exactly two keys: \"high\" and \"low\". Each key must be associated with an array of three integers.\n- Under the \"[rules]\" section, ensure there are exactly two keys: \"allowed_spells\" and \"forbidden_moves\", each assigned an array of non-empty strings containing at least two elements.\n- All string values must be enclosed in double quotes, and nested elements should use two spaces for indentation wherever applicable.",
        "raw_output_metric": [
            "level.name",
            "settings.difficulty",
            "settings.max_players",
            "environment.gravity",
            "environment.atmosphere",
            "environment.temperature",
            "environment.time_of_day",
            "score.high",
            "score.low",
            "rules.allowed_spells",
            "rules.forbidden_moves"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001041",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided description of a game competition event into a structured TOML configuration for event management.\n\nFeature Requirements:\n- Include an [event] section with the key name; its value must be a string enclosed in double quotes.\n- Under the [organizer] section, include exactly two keys: lead and email, each assigned a string value within double quotes.\n- Create a [timing] section containing two keys: start_date and end_date, both formatted as ISO date strings enclosed in double quotes.\n- Provide a [rules] section with exactly three keys: registration_open and scoring_enabled as boolean values, and max_participants as an integer.\n- Add a [venues] section that includes one key: locations, which must be an array of exactly four string values, each string enclosed in double quotes.\n- Under the [notes] section, ensure there are exactly three keys: reminder, instructions, and contact, each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the top of the TOML file starting with # followed by the text \"Generated Event Configuration\".\n- All string values in the TOML file must be enclosed in double quotes.",
        "raw_output_metric": [
            "event.name",
            "organizer.lead",
            "organizer.email",
            "timing.start_date",
            "timing.end_date",
            "rules.registration_open",
            "rules.scoring_enabled",
            "rules.max_participants",
            "venues.locations",
            "notes.reminder",
            "notes.instructions",
            "notes.contact"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001042",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided product description text into a structured TOML configuration.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" and followed by the text \"Custom Product TOML Configuration\".\n- Create a [product] section that includes a key \"name\" set to a non-empty string enclosed in double quotes.\n- Under a [specifications] section, include exactly three keys: \"color\", \"material\", and \"origin\", each assigned a non-empty string value in double quotes.\n- Add an [inventory] section that specifies two keys: \"quantity\" as an integer and \"in_stock\" as a boolean value (true or false).\n- Introduce a [pricing] section that contains three keys: \"base_price\", \"tax_rate\", and \"discount\", each associated with a numeric value (integer or float).\n- Create a [features] section that comprises exactly two arrays: \"highlights\" and \"accessories\", where \"highlights\" holds three descriptive strings and \"accessories\" holds three numeric product IDs.\n- Ensure all nested elements within sections are indented consistently with two spaces.\n- All string values in the TOML file must be enclosed in double quotes.",
        "raw_output_metric": [
            "product.name",
            "specifications.color",
            "specifications.material",
            "specifications.origin",
            "inventory.quantity",
            "inventory.in_stock",
            "pricing.base_price",
            "pricing.tax_rate",
            "pricing.discount",
            "features.highlights",
            "features.accessories"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001043",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration for an application setup.\n\nFeature Requirements:\n- Add a [config] section with a key named application that holds a string value representing the application name.\n- Under the [system] section, include exactly two keys: os and architecture, each with a corresponding string value.\n- Create a [parameters] section containing three integer keys: max_users, timeout, and retry_count, each assigned a numeric value.\n- Include a [flags] section with exactly four boolean keys: debug, maintenance, logging, and backup, each set to either true or false.\n- Create a [paths] section that contains exactly two arrays: directories and files, each with exactly three string paths.\n- Under the [alerts] section, define exactly three keys: critical, moderate, and info, each linked to a non-empty string message.\n- Begin the TOML file with a single-line comment starting with # followed by the text \"Generated Application Config\".\n- Ensure that every string value in the TOML file is enclosed in double quotes.\n- Use consistent indentation with two spaces for any nested elements within sections.",
        "raw_output_metric": [
            "config.application",
            "system.os",
            "system.architecture",
            "parameters.max_users",
            "parameters.timeout",
            "parameters.retry_count",
            "flags.debug",
            "flags.maintenance",
            "flags.logging",
            "flags.backup",
            "paths.directories",
            "paths.files",
            "alerts.critical",
            "alerts.moderate",
            "alerts.info"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001044",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the given description into a structured TOML configuration for a fictional network node.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" that reads \"Generated TOML Network Node Config\".\n- Under the [basic] section, include a key \"node_id\" with a corresponding string value enclosed in double quotes.\n- Under the [specs] section, include two integer keys: \"bandwidth\" and \"latency\", each representing a numeric value.\n- Under the [flags] section, include exactly three boolean keys: \"is_active\", \"supports_ipv6\", and \"fault_tolerant\", each set to either true or false.\n- Under the [connections] section, include exactly two arrays: \"connected_nodes\" holding three string values (each enclosed in double quotes), and \"signal_strength\" containing three numeric values.\n- Under the [logs] section, include exactly three keys: \"startup\", \"shutdown\", and \"error_allocation\", each associated with a timestamp string value enclosed in double quotes.\n- Ensure that all string values are enclosed in double quotes and use consistent two-space indentation for nested elements within sections.",
        "raw_output_metric": [
            "basic.node_id",
            "specs.bandwidth",
            "specs.latency",
            "flags.is_active",
            "flags.supports_ipv6",
            "flags.fault_tolerant",
            "connections.connected_nodes",
            "connections.signal_strength",
            "logs.startup",
            "logs.shutdown",
            "logs.error_allocation"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001045",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into a structured TOML configuration representing a server deployment setup.\n\nFeature Requirements:\n- Begin the file with a single-line comment starting with \"#\" followed by \"Server Deployment Configuration\".\n- Create a [server] section containing two keys: \"name\" with a unique string value and \"ip\" with a valid IP address as a string.\n- Add a [deployment] section that includes three keys: \"environment\", \"region\", and \"instance_type\", each with a distinct string value enclosed in double quotes.\n- Include a [monitoring] section with two numerical keys: \"uptime_threshold\" with an integer value and \"response_time\" with a float value.\n- Generate a [users] section that contains an array named \"admins\" holding exactly three username strings.\n- Add a [security] section containing two boolean keys: \"firewall_enabled\" and \"intrusion_detection\", each set to true or false.\n- Create a [logging] section that defines exactly three keys: \"level\", \"destination\", and \"format\", each paired with a non-empty string value enclosed in double quotes.\n- Use uniform indentation of two spaces for all nested elements in each section.\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Maintain the structure so that each section and its keys follow a clear and consistent order without any additional or missing fields.",
        "raw_output_metric": [
            "server.name",
            "server.ip",
            "deployment.environment",
            "deployment.region",
            "deployment.instance_type",
            "monitoring.uptime_threshold",
            "monitoring.response_time",
            "users.admins",
            "security.firewall_enabled",
            "security.intrusion_detection",
            "logging.level",
            "logging.destination",
            "logging.format"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001046",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided text into an inventory configuration represented in TOML.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with '#' followed by the text \"Auto-generated Inventory Configuration\".\n- Create an [inventory] section containing a key \"category\" with a string value, and a key \"location\" with another string value.\n- Under a [details] section, include exactly two keys: \"capacity\" and \"restock_interval\", each assigned an integer value.\n- Add a [references] section with two arrays: \"suppliers\" and \"destinations\", where each array holds exactly three string values.\n- Define a [flags] section with three boolean keys: \"isActive\", \"isClosed\", and \"needsReview\", each set to either true or false.\n- Ensure that all string values are enclosed in double quotes.\n- Use an indentation of two spaces within nested elements inside each section.",
        "raw_output_metric": [
            "inventory.category",
            "inventory.location",
            "details.capacity",
            "details.restock_interval",
            "references.suppliers",
            "references.destinations",
            "flags.isActive",
            "flags.isClosed",
            "flags.needsReview"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001047",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided narrative into a structured TOML configuration representing a course schedule.\n\nFeature Requirements:\n- Include a [course] section with the key \"name\" holding the course title as a string enclosed in double quotes.\n- Under the [creator] section, list exactly two keys: \"instructor\" and \"department\", each paired with a string value in double quotes.\n- Create a [schedule] section containing three keys: \"start\", \"end\", and \"break\", each set to a string representing a time (e.g., \"08:30\") in double quotes.\n- Provide a [content] section that holds exactly two arrays: \"chapters\" and \"references\", each containing three numeric values.\n- Define a [alerts] section with exactly three keys: \"reminder\", \"deadline\", and \"update\", each associated with a non-empty string value in double quotes.\n- Insert a single-line comment at the very beginning starting with \"#\" followed by the text \"Course Configuration Generated\".\n- Include a [features] section with two boolean keys: \"elective\" and \"mandatory\", each assigned either true or false.\n- Ensure all string values are enclosed in double quotes and all arrays use consistent four-space indentation for nested elements.\n- Use precise keys and structure as specified to guarantee the output meets the requirements exactly.",
        "raw_output_metric": [
            "course.name",
            "creator.instructor",
            "creator.department",
            "schedule.start",
            "schedule.end",
            "schedule.break",
            "content.chapters",
            "content.references",
            "alerts.reminder",
            "alerts.deadline",
            "alerts.update",
            "features.elective",
            "features.mandatory"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001048",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nConvert the provided description into a structured TOML configuration for a game settings file.\n\nFeature Requirements:\n- Include a [game] section with exactly two keys: \"name\" and \"genre\", each assigned a non-empty string value enclosed in double quotes.\n- Under a [developer] section, provide exactly two keys: \"studio\" and \"release_date\", both holding string values in double quotes.\n- Create an [options] section that contains exactly three boolean keys: \"sound\", \"fullscreen\", and \"multiplayer\", each explicitly set to either true or false.\n- Add a [levels] section that includes exactly two arrays: \"stage_scores\" with four numeric values and \"thresholds\" with three numeric values.\n- Include a [notifications] section with exactly three keys: \"start\", \"pause\", and \"exit\", each associated with a non-empty string value enclosed in double quotes.\n- Place a single-line comment at the beginning of the file starting with # followed by the text \"Generated Game Config\".",
        "raw_output_metric": [
            "game.name",
            "game.genre",
            "developer.studio",
            "developer.release_date",
            "options.sound",
            "options.fullscreen",
            "options.multiplayer",
            "levels.stage_scores",
            "levels.thresholds",
            "notifications.start",
            "notifications.pause",
            "notifications.exit"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "task_id": "001049",
        "input_type": "Text",
        "output_type": "TOML",
        "rendering": false,
        "query": "Please output TOML:\n\nTask:\nTransform the provided description into a structured TOML configuration that represents an environment setup.\n\nFeature Requirements:\n- Begin the TOML file with a single-line comment starting with \"#\" followed by \"Configuration for Environment Setup\".\n- Create a top-level section named [info] that contains exactly two keys: project and maintainer, both assigned non-empty string values enclosed in double quotes.\n- Include a [details] section with exactly four keys: id, stage, release, and patch, where each key is associated with an integer value.\n- Add a [features] section that defines exactly three arrays: alpha, beta, and gamma, each composed of exactly four boolean values (either true or false).\n- Establish a [notes] section with exactly three keys: summary, explanation, and remarks, each holding a non-empty string value enclosed in double quotes.\n- Provide a [settings] section containing two boolean keys: debug_mode and safe_mode, with each value set as either true or false.\n- Use consistent indentation of two spaces for all key-value pairs within each section.\n- Ensure that all string values in the TOML file are enclosed in double quotes.\n- Do not include any extra sections, keys, or nested structures outside of what is specified above.\n- All values and arrays must match the exact count and types described in each requirement.",
        "raw_output_metric": [
            "info.project",
            "info.maintainer",
            "details.id",
            "details.stage",
            "details.release",
            "details.patch",
            "features.alpha",
            "features.beta",
            "features.gamma",
            "notes.summary",
            "notes.explanation",
            "notes.remarks",
            "settings.debug_mode",
            "settings.safe_mode"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001100",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered <h2> element at the top of the component with the text \"Reservation Form\".\n- Display a text input field with a placeholder \"Full Name\" for the user's name entry.\n- Provide a text input field with a placeholder \"Enter Phone Number\" for contact information.\n- Incorporate an input field of type \"date\" to allow users to select their reservation date.\n- Include a dropdown select element labeled \"Number of Guests\" with options ranging from 1 to 6.\n- Arrange all input elements in a vertical flex container that justifies content to the center.\n- Add exactly two buttons at the bottom of the form labeled \"Confirm\" and \"Clear\", where the \"Confirm\" button is styled with a green background.\n- When the \"Confirm\" button is clicked, validate that all fields are filled in and display a <p> element with the message \"Reservation Confirmed\" directly below the form.\n- Ensure the entire form is visually centered on the page using flexbox styling.",
        "raw_output_metric": [
            "Reservation Form",
            "Full Name",
            "Enter Phone Number",
            "type=\"date\"",
            "Number of Guests",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "Confirm",
            "Clear",
            "Reservation Confirmed"
        ],
        "VQA": {
            "What is the text displayed in the centered title at the top of the component?": "Reservation Form",
            "What placeholder text is used for the user’s full name input field?": "Full Name",
            "What placeholder text is shown for the phone number input field?": "Enter Phone Number",
            "Is there an input field that allows the user to select a reservation date?": "Yes",
            "What is the label for the dropdown select element?": "Number of Guests",
            "How many guest options are available in the dropdown?": "6",
            "What are the labels of the two buttons present at the bottom of the form?": "Confirm and Clear",
            "Which button is styled with a green background?": "Confirm",
            "Is the entire form visually centered on the page using flexbox styling?": "Yes"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001101",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays an event registration form.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"Event Registration\" and center it horizontally.\n- Provide a text input field for \"Username\" with a placeholder \"Enter your username\" positioned at the top of the form.\n- Insert a text input for \"Email\" below the username field with a placeholder \"Enter your email address\" and enforce a proper email format.\n- Add a <select> dropdown for \"Event Type\" with fixed options \"Workshop\", \"Seminar\", and \"Meetup\" placed in the middle section of the form.\n- Display a numeric input for \"Number of Guests\" with a minimum value of 1 and a placeholder \"Guests\" immediately after the event type dropdown.\n- Include a button labeled \"Register\" at the end of the form styled with a green background color and white text.\n- Use a grid layout to organize the input fields and dropdown into two columns with an even gap between them.\n- Implement a <div> element below the form to display a confirmation message when the \"Register\" button is clicked.\n- Validate that \"Username\" and \"Email\" are not empty and that the \"Email\" field contains a valid email format before submission.\n- Add a footer at the very bottom of the component using a <footer> element containing the text \"2023 Event Registration\" centered horizontally.",
        "raw_output_metric": [
            "Event Registration",
            "Username",
            "Enter your username",
            "Email",
            "Enter your email address",
            "Event Type",
            "Workshop",
            "Seminar",
            "Meetup",
            "Number of Guests",
            "Guests",
            "Register",
            "2023 Event Registration"
        ],
        "VQA": {
            "What is the text displayed in the header at the top of the component?": "Event Registration",
            "What placeholder text is shown in the Username input field?": "Enter your username",
            "What placeholder text appears in the Email input field?": "Enter your email address",
            "Which options are available in the dropdown for Event Type?": "Workshop, Seminar, Meetup",
            "What placeholder text is provided in the Number of Guests input field?": "Guests",
            "How is the Register button styled?": "Green background with white text",
            "How are the input fields and dropdown arranged in the form layout?": "Grid layout with two columns",
            "What confirmation element is displayed when the Register button is clicked?": "A confirmation message div",
            "What is the text content of the footer at the bottom of the component?": "2023 Event Registration"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001102",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays an interactive event registration form.\n\nFeature Requirements:\n- Include a centered <h1> header with the text \"Event Registration\".\n- Display a text input field with a placeholder \"Full Name\".\n- Display an email input field with a placeholder \"Email Address\".\n- Incorporate a dropdown selector with three options labeled \"Workshop\", \"Seminar\", and \"Webinar\" for event type selection.\n- Include a date input field labeled \"Event Date\" that allows the user to pick a date.\n- Provide exactly two buttons at the bottom of the form, one labeled \"Register\" and the other labeled \"Clear Form\".\n- Style the \"Register\" button with a background color of green.\n- Use a flexbox layout to arrange form elements vertically with even spacing.\n- Implement form validation to ensure that all fields are filled before the \"Register\" button becomes active.\n- After the \"Register\" button is clicked, display a <p> element with a confirmation message indicating successful registration.",
        "raw_output_metric": [
            "Event Registration",
            "Full Name",
            "Email Address",
            "Workshop",
            "Seminar",
            "Webinar",
            "Event Date",
            "Register",
            "Clear Form",
            "green",
            "<p>"
        ],
        "VQA": {
            "What is the main header text displayed on the page?": "Event Registration",
            "What is the placeholder text for the name input field?": "Full Name",
            "What is the placeholder text for the email input field?": "Email Address",
            "How many options are visible in the event type dropdown?": "3",
            "What are the labels available in the event type dropdown?": "Workshop, Seminar, Webinar",
            "What label is shown for the date input field?": "Event Date",
            "How many buttons are displayed at the bottom of the form?": "2",
            "What are the labels of the buttons at the bottom of the form?": "Register and Clear Form",
            "What is the background color of the Register button?": "Green",
            "How are the form elements arranged on the page?": "Vertically with even spacing"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001103",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a book search interface for a library website.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Library Book Search\" at the top.\n- Include a text input field with a placeholder \"Type book title here\" for entering search queries.\n- Provide a \"Search\" button next to the input field that is styled with a solid green background color.\n- Add an unordered list below the search area to show up to five search result items, each within its own <li> element.\n- Implement a \"Clear\" button adjacent to the \"Search\" button that resets both the input field and the search results.\n- Use a CSS grid layout to arrange the input field and buttons in a single row.\n- Create a <div> element below the search results to display an error message in red text if the user attempts to search with an empty input field.",
        "raw_output_metric": [
            "Library Book Search",
            "Type book title here",
            "Search",
            "Clear",
            "grid",
            "red"
        ],
        "VQA": {
            "What is the header text displayed at the top of the interface?": "Library Book Search",
            "How is the header positioned on the page?": "Centered",
            "What placeholder text is shown in the search input field?": "Type book title here",
            "What text is displayed on the primary action button next to the input field?": "Search",
            "What is the background color of the Search button?": "Solid green",
            "How many search result items are displayed at most?": "Up to five",
            "What element is used to list the search results?": "Unordered list with list items",
            "What is the text displayed on the button used to clear the search?": "Clear",
            "Which CSS layout method is used to arrange the input field and buttons?": "CSS grid layout",
            "How is the error message styled when an empty search is attempted?": "Displayed in red text"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001104",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that allows a user to create and display a personal note.\n\nFeature Requirements:\n- Include an <h1> element at the top with the exact text \"Note Taker\".\n- Render a text input field with a placeholder \"Enter note title\" and a fixed width of 300px.\n- Provide a textarea element with a placeholder \"Enter your note\" that spans exactly 4 rows.\n- Add a checkbox input immediately below the textarea with an accompanying label \"Mark as Important\".\n- Ensure exactly two buttons are present below the input fields, labeled \"Save Note\" and \"Clear\".\n- Style the \"Save Note\" button with a background color of green and the \"Clear\" button with a background color of red.\n- Use a CSS grid layout to align the input elements in a single centered column within the browser window.\n- Upon clicking the \"Save Note\" button, display a new <div> element directly beneath the form that shows the note title and content.\n- Implement basic form validation that prevents submission if the note title or textarea is empty before displaying the note.",
        "raw_output_metric": [
            "Note Taker",
            "Enter note title",
            "Enter your note",
            "Mark as Important",
            "Save Note",
            "Clear",
            "300px",
            "4",
            "grid",
            "green",
            "red"
        ],
        "VQA": {
            "What is the top heading text displayed on the page?": "Note Taker",
            "What placeholder text appears in the note title input field?": "Enter note title",
            "What is the fixed width of the note title input field?": "300px",
            "What placeholder text is shown in the note textarea?": "Enter your note",
            "How many rows are set for the note textarea?": "4",
            "What label is associated with the checkbox below the textarea?": "Mark as Important",
            "What are the labels of the two buttons displayed below the input fields?": "Save Note and Clear",
            "What are the background colors of the Save Note and Clear buttons?": "Green and Red",
            "How are the input elements arranged within the browser window?": "In a single centered column using a CSS grid layout",
            "What happens when the Save Note button is clicked?": "A new div appears displaying the note title and content"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001105",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a contact enquiry form.\n\nFeature Requirements:\n- Render a centered header using an <h2> element with the text \"Contact Us\" at the top of the page.\n- Place a text input field with a placeholder \"Your Email\" immediately below the header.\n- Include another text input field for \"Subject\" right underneath the email input.\n- Provide a textarea element with a placeholder \"Write your message here\" that spans exactly 3 rows.\n- Display exactly two buttons at the bottom of the form labeled \"Send\" and \"Clear\".\n- Style the \"Send\" button with a background color of dark green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the email, subject, and message fields are not empty before enabling the \"Send\" button.",
        "raw_output_metric": [
            "Contact Us",
            "Your Email",
            "Subject",
            "Write your message here",
            "Send",
            "Clear",
            "dark green",
            "3"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Contact Us",
            "How many text input fields are visible below the header?": "2",
            "What placeholder text is visible in the first text input field?": "Your Email",
            "What placeholder text is visible in the second text input field?": "Subject",
            "What placeholder text is shown in the textarea?": "Write your message here",
            "How many rows does the textarea span?": "3",
            "How many buttons are displayed at the bottom of the form?": "2",
            "What are the labels on the two buttons?": "Send and Clear",
            "What background color is applied to the 'Send' button?": "Dark green",
            "How is the form positioned on the page?": "Centered both vertically and horizontally"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001106",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a blog comment submission form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Leave a Comment\".\n- Render a text input field for the full name with a placeholder \"Your Name\".\n- Include a textarea for the comment content with a placeholder \"Enter your comment\" that spans exactly 4 rows.\n- Provide exactly two buttons at the bottom labeled \"Post Comment\" and \"Clear Form\".\n- Style the \"Post Comment\" button with a background color of dark green.\n- Use a CSS grid layout to center and align the form's elements horizontally.\n- Ensure the form width is capped at 500px and is centered on the page.\n- When the \"Post Comment\" button is clicked successfully, display a <p> element below the form with the message \"Comment submitted!\".\n- Implement basic validation to confirm that both the name input and comment textarea are not empty before enabling the \"Post Comment\" button.",
        "raw_output_metric": [
            "Leave a Comment",
            "Your Name",
            "Enter your comment",
            "rows={4}",
            "Post Comment",
            "Clear Form",
            "darkgreen",
            "500px",
            "grid",
            "Comment submitted!"
        ],
        "VQA": {
            "What is the text displayed in the header at the top of the form?": "Leave a Comment",
            "What is the placeholder text in the full name input field?": "Your Name",
            "What is the placeholder text shown in the comment textarea?": "Enter your comment",
            "How many rows does the comment textarea span?": "4",
            "What are the labels on the two buttons at the bottom of the form?": "Post Comment and Clear Form",
            "Which button is styled with a dark green background?": "Post Comment",
            "What message appears below the form after successfully posting a comment?": "Comment submitted!",
            "What is the maximum width of the form?": "500px",
            "How is the form's layout structured to center its elements?": "Using a CSS grid layout",
            "How many primary input elements (text input and textarea) are displayed in the form?": "2"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001107",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with multiple input fields and validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"User Registration\".\n- Include three text input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\", arranged vertically.\n- Add a pair of radio buttons labeled \"Male\" and \"Female\" for gender selection positioned immediately below the input fields.\n- Implement a <select> dropdown for country selection with exactly three options: \"USA\", \"Canada\", and \"Mexico\", located directly under the radio buttons.\n- Provide exactly two buttons at the bottom of the form labeled \"Register\" and \"Clear\", ensuring the \"Register\" button is styled with a background color of green.\n- Use a grid layout with a fixed gap of 15 pixels to organize the form elements within a centered container.\n- Include inline validation by displaying a <span> element with red text next to any field that is left empty upon submission.\n- Render a <p> element below the form to display the message \"Registration Successful\" when all fields pass validation upon clicking the \"Register\" button.",
        "raw_output_metric": [
            "User Registration",
            "Enter Username",
            "Enter Email",
            "Enter Password",
            "Male",
            "Female",
            "USA",
            "Canada",
            "Mexico",
            "Register",
            "Clear",
            "15px",
            "Registration Successful",
            "<h1>",
            "<input>",
            "<select>",
            "<span>",
            "<p>"
        ],
        "VQA": {
            "What is the text displayed in the header of the form?": "User Registration",
            "How many text input fields are present in the registration form?": "3",
            "What are the placeholders used for the text input fields?": "Enter Username, Enter Email, Enter Password",
            "Which gender options are available as radio buttons?": "Male and Female",
            "What options are listed in the country selection dropdown?": "USA, Canada, Mexico",
            "How many buttons are visible at the bottom of the form?": "2",
            "Which button is styled with a green background?": "Register",
            "What message is displayed in the paragraph below the form upon successful registration?": "Registration Successful",
            "What is the fixed gap between the grid layout elements in the form?": "15 pixels"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001108",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a simple newsletter subscription widget.\n\nFeature Requirements:\n- Render a centered <h3> element with the text \"Subscribe to Our Newsletter\" at the top.\n- Display an email input field with the placeholder \"Enter your email address\".\n- Place a checkbox below the email field with a label \"I agree to the terms and conditions\".\n- Include a button labeled \"Subscribe\" that features a green background.\n- Utilize CSS grid to position the email input and checkbox side by side in two distinct columns.\n- Implement a state variable to store and show an error message beneath the form when the email field is empty or contains an invalid email format.\n- Add a <span> element adjacent to the email input that updates in real-time to reflect the current number of characters being typed.\n- Display a confirmation <div> containing the message \"Subscription successful\" after the \"Subscribe\" button is clicked and all validations pass.\n- Apply inline styling to add a visible border and padding around the entire form.",
        "raw_output_metric": [
            "Subscribe to Our Newsletter",
            "Enter your email address",
            "I agree to the terms and conditions",
            "Subscribe",
            "Subscription successful"
        ],
        "VQA": {
            "What is the header text displayed at the top of the widget?": "Subscribe to Our Newsletter",
            "What placeholder text appears in the email input field?": "Enter your email address",
            "What label is shown for the checkbox below the email field?": "I agree to the terms and conditions",
            "What text is displayed on the subscription button?": "Subscribe",
            "What is the background color of the subscribe button?": "Green",
            "How are the email input field and checkbox arranged within the form layout?": "They are positioned side by side in two columns using CSS grid",
            "What additional element is placed next to the email input field?": "A span that shows a real-time character count",
            "What confirmation message is displayed after a successful subscription submission?": "Subscription successful"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001109",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that implements a user registration form with multiple input fields and basic validation.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Registration\".\n- Include three text input fields for \"Username\", \"Email\", and \"Password\", each with a corresponding placeholder text.\n- Implement basic validation to ensure that no input field is left empty before form submission.\n- Add a checkbox input with a label \"I agree to the Terms\" positioned below the password field.\n- Provide exactly one button at the bottom of the form labeled \"Register\" and style it with a green background and white text.\n- Use a grid layout to arrange the input fields into two columns, with the checkbox and the button spanning both columns.\n- Implement a <p> element that displays a success message below the form when the \"Register\" button is clicked and the validation passes.",
        "raw_output_metric": [
            "Registration",
            "Username",
            "Email",
            "Password",
            "I agree to the Terms",
            "Register",
            "<h1>",
            "<p>",
            "display: grid",
            "green",
            "white"
        ],
        "VQA": {
            "What is the text content of the centered header?": "Registration",
            "How many text input fields are displayed in the form?": "Three",
            "What are the placeholder texts for the text inputs?": "Username, Email, Password",
            "What label is associated with the checkbox input?": "I agree to the Terms",
            "What text is shown on the button at the bottom of the form?": "Register",
            "How are the input fields arranged in the layout?": "They are arranged in a grid with two columns, while the checkbox and button span both columns",
            "Which element displays a success message below the form upon successful registration?": "A paragraph element"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001110",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Create an Account\" at the top of the form.\n- Display three input fields for \"Username\", \"Email\", and \"Password\", each with their appropriate placeholder text.\n- Use a flexbox layout to center the form on the page with a column arrangement.\n- Include exactly one button labeled \"Register\" that is styled with a background color of green.\n- Add a paragraph element below the button that dynamically displays an error message if any input is left empty upon clicking \"Register\".\n- Implement a checkbox with a label \"I agree to the Terms and Conditions\" below the input fields.\n- Ensure each input field and the checkbox are enclosed in their own <div> container with a bottom margin of 10px.",
        "raw_output_metric": [
            "Create an Account",
            "Username",
            "Email",
            "Password",
            "Register",
            "green",
            "I agree to the Terms and Conditions",
            "10px",
            "flex",
            "column"
        ],
        "VQA": {
            "What is the text displayed in the centered header at the top of the form?": "Create an Account",
            "How many input fields are visibly provided for user registration?": "3",
            "What are the placeholder texts for the input fields?": "Username, Email, and Password",
            "What label is displayed next to the checkbox?": "I agree to the Terms and Conditions",
            "How many separate containers are used for the input fields and the checkbox?": "4",
            "What is the text on the visible button in the form?": "Register",
            "What background color is used for the Register button?": "Green",
            "Where is the error message paragraph positioned in relation to the button?": "Below the button",
            "What layout style is used to center the form on the page?": "Flexbox with a column arrangement"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001111",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user sign-up form for a community website.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Join Our Community\".\n- Display two input fields side by side: one with a placeholder \"Username\" and the other with \"Email\".\n- Provide a third input field of type password with a placeholder \"Enter Password\" placed below the two side by side fields.\n- Add exactly three buttons at the bottom of the form labeled \"Register\", \"Clear\", and \"Cancel\", ensuring the \"Register\" button is styled with a background color of green.\n- Utilize a grid layout to arrange the two side-by-side input fields and one full-width input field for the password.\n- Implement basic validation to check that all fields are filled before allowing a registration attempt, showing a red-bordered <div> with an error message if any field is empty.\n- Include a <p> element below the form that displays the message \"Registration Complete\" when the registration is successful.\n- Style the form container with a box shadow and a padding of 20px to ensure a distinct, card-like appearance.",
        "raw_output_metric": [
            "Join Our Community",
            "Username",
            "Email",
            "Enter Password",
            "Register",
            "Clear",
            "Cancel",
            "Registration Complete",
            "box shadow",
            "20px",
            "green",
            "grid"
        ],
        "VQA": {
            "What is the header text displayed at the top and how is it aligned?": "Join Our Community, centered in an h1 element",
            "How many input fields are present and what are their placeholder texts?": "Three input fields: the first has 'Username', the second has 'Email' (both side by side), and the third has 'Enter Password' below",
            "How many buttons appear at the bottom of the form and what are their labels?": "Three buttons: 'Register', 'Clear', and 'Cancel'",
            "What specific styling is applied to the 'Register' button?": "It is styled with a green background color",
            "What layout is used to arrange the username, email, and password inputs?": "A grid layout with the first two inputs side by side and the password field full-width below",
            "What visual cue is provided when not all form fields are filled out?": "A red-bordered error message div appears",
            "What message is displayed beneath the form upon successful registration?": "Registration Complete",
            "How is the form container styled to achieve a card-like appearance?": "It uses a box shadow and has a padding of 20px"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001112",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a user registration form with validation.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" at the top of the form.\n- Display three input fields: one for username with a placeholder \"Username\", one for email with a placeholder \"Email Address\", and one for password with a placeholder \"Password\" that uses input type \"password\".\n- Provide a radio button group labeled \"Gender\" with exactly two options: \"Male\" and \"Female\", arranged horizontally.\n- Include a dropdown selection labeled \"Country\" with three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add a checkbox labeled \"Accept Terms and Conditions\" that must be checked before submission.\n- Place two buttons at the bottom of the form labeled \"Register\" and \"Cancel\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the entire form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the username, email, and password fields are not empty, verify that the email contains an \"@\" character, and confirm that the terms checkbox is checked.\n- When the \"Register\" button is clicked and all validations pass, display a new <div> element below the form with the text \"Registration Successful\".",
        "raw_output_metric": [
            "Register Now",
            "Username",
            "Email Address",
            "Password",
            "Gender",
            "Male",
            "Female",
            "Country",
            "USA",
            "Canada",
            "Mexico",
            "Accept Terms and Conditions",
            "Register",
            "Cancel",
            "green",
            "Registration Successful"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Register Now",
            "How many input fields are shown for text entries?": "3",
            "What placeholders are used for the text input fields?": "Username, Email Address, and Password",
            "What label is displayed for the radio button group?": "Gender",
            "Which options are provided for the gender selection?": "Male and Female",
            "How many options are available in the country dropdown?": "3",
            "What options can be selected from the country dropdown?": "USA, Canada, and Mexico",
            "What is the label next to the checkbox that appears in the form?": "Accept Terms and Conditions",
            "What labels are given to the buttons at the bottom of the form?": "Register and Cancel",
            "What text is shown after a successful registration?": "Registration Successful"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001113",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Create a parent div with a flexbox layout that centers all content both vertically and horizontally on the page.\n- Include a header using an <h1> element at the top with the text \"Subscribe Now\".\n- Add a text input field for email with the placeholder \"Enter your email\".\n- Insert a checkbox input paired with a label displaying \"Agree to terms & conditions\".\n- Provide exactly two buttons: one labeled \"Subscribe\" styled with a background color of green and another labeled \"Clear\" with a background color of grey.\n- Embed a <p> element below the form to show an error message \"Invalid email.\" when the email input is empty or does not include an \"@\" symbol during form submission.\n- Apply inline styling to the subscription form container to create a solid black border of 2px.\n- Implement basic client-side validation ensuring the email field is not empty and contains an \"@\" before allowing submission.",
        "raw_output_metric": [
            "Subscribe Now",
            "Enter your email",
            "Agree to terms & conditions",
            "Subscribe",
            "Clear",
            "Invalid email.",
            "2px",
            "black",
            "green",
            "grey"
        ],
        "VQA": {
            "What is the text displayed in the header of the form?": "Subscribe Now",
            "Does the parent container center the form vertically and horizontally?": "Yes",
            "What placeholder text is visible in the email input field?": "Enter your email",
            "What label is displayed next to the checkbox?": "Agree to terms & conditions",
            "How many buttons are shown in the form?": "Two",
            "What is the background color of the 'Subscribe' button?": "Green",
            "What is the background color of the 'Clear' button?": "Grey",
            "What error message appears below the form when the email input is invalid?": "Invalid email.",
            "How is the border of the subscription form container styled?": "2px solid black"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001114",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays an event RSVP form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Event RSVP\" at the top of the page.\n- Include a text input field with a placeholder \"Full Name\" for users to enter their name.\n- Provide an email input field with a placeholder \"Email Address\" and ensure the input type is set to email.\n- Add a dropdown select element for ticket options with a default disabled option \"Select Ticket Type\" and additional options \"General Admission\", \"VIP\", and \"Student\".\n- Incorporate a set of radio buttons labeled \"In-Person\" and \"Virtual\" for choosing the mode of attendance, placed directly below the select element.\n- Create a button labeled \"Confirm RSVP\" styled with a background color of green.\n- Implement an onClick event for the confirmation button that, upon successful validation of non-empty fields, displays a <div> element containing the message \"RSVP Received\" with a top margin of 20px.\n- Use a flexbox layout to ensure the entire form is centered both horizontally and vertically on the page.",
        "raw_output_metric": [
            "Event RSVP",
            "Full Name",
            "Email Address",
            "Select Ticket Type",
            "General Admission",
            "VIP",
            "Student",
            "In-Person",
            "Virtual",
            "Confirm RSVP",
            "RSVP Received"
        ],
        "VQA": {
            "What is the text displayed in the header at the top of the page?": "Event RSVP",
            "What placeholder text is shown in the text input field?": "Full Name",
            "What is the placeholder text for the email input field?": "Email Address",
            "What options are available in the dropdown for ticket selection?": "Select Ticket Type (default), General Admission, VIP, Student",
            "What are the labels for the radio buttons indicating the mode of attendance?": "In-Person and Virtual",
            "What label is displayed on the confirmation button?": "Confirm RSVP",
            "What is the background color of the confirmation button?": "Green",
            "What message is shown after a successful RSVP submission?": "RSVP Received",
            "How is the form positioned on the page?": "Centered both horizontally and vertically using a flexbox layout"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001115",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a secure login form for a fictional banking application.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Banking Login\".\n- Render a text input field with a placeholder text of \"Enter your email address\" and validate that it contains an \"@\" symbol.\n- Render a password input field with a placeholder text of \"Enter your password\".\n- Provide exactly two buttons labeled \"Login\" and \"Clear\", ensuring the \"Login\" button is styled with a green background color.\n- Use a flexbox container to center the form horizontally and vertically on the page, with a maximum width of 400px.\n- Implement basic validation that displays a <p> element with an error message if either the email or password fields are empty upon submission.\n- Automatically clear any error messages when the \"Clear\" button is clicked.",
        "raw_output_metric": [
            "Banking Login",
            "Enter your email address",
            "Enter your password",
            "Login",
            "Clear",
            "@",
            "green",
            "maxWidth: 400px"
        ],
        "VQA": {
            "What is the header text displayed on the login form?": "Banking Login",
            "How many input fields can be found on the form?": "2",
            "What placeholder text is shown for the email field?": "Enter your email address",
            "What placeholder text is shown for the password field?": "Enter your password",
            "How many buttons are rendered on the form?": "2",
            "Which button has a green background color?": "Login",
            "What labels are assigned to the two buttons?": "Login and Clear",
            "What layout technique is used to center the form horizontally and vertically?": "Flexbox",
            "What is the maximum width specified for the form container?": "400px",
            "Which element is used to display an error message if the input fields are empty?": "Paragraph (<p>)"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001116",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a simple newsletter signup form.\n\nFeature Requirements:\n- Create a header centered using an <h1> element with the text \"Subscribe Now!\".\n- Display a single text input field with a placeholder text of \"Enter your email address\".\n- Include a button labeled \"Sign Up\" that is styled with a background color of green.\n- Arrange all elements within a container that uses CSS grid to center the form horizontally on the page.\n- Implement basic validation to ensure the email input contains the \"@\" symbol before allowing submission.\n- Render a <p> element below the form that displays \"Subscription successful!\" in green text after a valid submission.",
        "raw_output_metric": [
            "Subscribe Now!",
            "Enter your email address",
            "Sign Up",
            "Subscription successful!",
            "@",
            "green",
            "grid"
        ],
        "VQA": {
            "What is the header text displayed in the form?": "Subscribe Now!",
            "How many input fields are visible in the form?": "1",
            "What placeholder text is shown in the email input field?": "Enter your email address",
            "What is the text displayed on the button?": "Sign Up",
            "What is the background color of the button?": "Green",
            "Through which layout method is the form centered on the page?": "CSS Grid",
            "What message appears below the form after a valid submission?": "Subscription successful!",
            "What text color is used for the success message?": "Green"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001117",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays an online quiz submission form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Quiz Submission\".\n- Display an input field with a placeholder text of \"Enter your email\" positioned at the top of the form.\n- Implement three radio buttons arranged horizontally for quiz difficulty levels labeled \"Easy\", \"Medium\", and \"Hard\".\n- Provide a multi-line textarea with a placeholder text of \"Your Comments\" that spans exactly 4 rows.\n- Add exactly two buttons at the bottom of the form: one labeled \"Submit Quiz\" with an orange background and one labeled \"Clear\" with a default background.\n- Use a flexbox layout to align the form centrally in both vertical and horizontal directions within the container.\n- Display a <p> element at the bottom of the component that shows a congratulatory message when the \"Submit Quiz\" button is clicked, ensuring it is only visible after successful validation of the email input and selection of a difficulty level.",
        "raw_output_metric": [
            "Quiz Submission",
            "Enter your email",
            "Easy",
            "Medium",
            "Hard",
            "Your Comments",
            "Submit Quiz",
            "Clear"
        ],
        "VQA": {
            "What is the text in the centered header?": "Quiz Submission",
            "What placeholder text should appear in the email input field?": "Enter your email",
            "How many radio buttons for quiz difficulty are displayed?": "3",
            "What are the labels of the quiz difficulty radio buttons?": "Easy, Medium, Hard",
            "What placeholder text and row count is set for the comments textarea?": "Your Comments and 4 rows",
            "What are the labels of the two buttons shown at the bottom of the form and which one has an orange background?": "Submit Quiz (orange) and Clear (default)",
            "Where is the congratulatory message displayed after a successful form submission?": "In a paragraph element at the bottom of the component"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001118",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form with three input fields and two action buttons.\n\nFeature Requirements:\n- Include an <h2> element at the top of the form with the text \"User Registration\".\n- Create three input fields: one with a placeholder \"Enter Username\", one with a placeholder \"Enter Email\", and one with a placeholder \"Enter Password\" that masks the input.\n- Position a checkbox labeled \"Accept Terms and Conditions\" immediately below the password field.\n- Place exactly two buttons at the bottom of the form labeled \"Register\" and \"Cancel\".\n- Use a CSS grid layout to align labels on the left and corresponding input fields on the right.\n- Style the \"Register\" button with a green background and white text.\n- Implement basic form validation that triggers a <p> element displaying an error message if any input is empty or if the email does not follow a valid format upon clicking \"Register\".\n- Ensure the \"Cancel\" button clears all current input values when clicked.",
        "raw_output_metric": [
            "User Registration",
            "Enter Username",
            "Enter Email",
            "Enter Password",
            "Accept Terms and Conditions",
            "Register",
            "Cancel"
        ],
        "VQA": {
            "What is the heading text displayed at the top of the registration form?": "User Registration",
            "How many input fields are visible in the form?": "3",
            "What placeholder text is used for the username input field?": "Enter Username",
            "What placeholder text is shown in the password input field, and how is the input presented?": "Enter Password; the input is masked",
            "Which label appears immediately below the password field?": "Accept Terms and Conditions",
            "How many action buttons are present at the bottom of the form?": "2",
            "What are the labels of the action buttons shown in the form?": "Register and Cancel",
            "What styling is applied to the Register button in terms of background and text color?": "Green background with white text",
            "What layout method is used to align the labels and input fields?": "CSS grid layout",
            "What element appears to display an error message when form validation fails?": "<p> element"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001119",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"User Registration\".\n- Display an input field for the email address with a placeholder \"Enter Email\" and position it at the top of the form.\n- Provide a password input field with a placeholder \"Enter Password\" followed immediately by a confirmation password field with a placeholder \"Confirm Password\".\n- Include a dropdown select element labeled \"Country\" that contains exactly three options: \"USA\", \"Canada\", and \"Mexico\".\n- Add exactly two buttons at the bottom of the form with the labels \"Register\" and \"Clear\"; style the \"Register\" button with a background color of green.\n- Use a flexbox layout to center the form on the page both vertically and horizontally.\n- Implement basic validation to ensure that the email and both password fields are filled and that the password and confirmation match before submission.\n- Include a <p> element below the form that displays a success message once the registration is completed.",
        "raw_output_metric": [
            "User Registration",
            "Enter Email",
            "Enter Password",
            "Confirm Password",
            "Country",
            "USA",
            "Canada",
            "Mexico",
            "Register",
            "Clear"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "User Registration",
            "What placeholder text appears in the email input field?": "Enter Email",
            "What are the placeholder texts for the password fields?": "Enter Password and Confirm Password",
            "How many options are available in the country dropdown menu?": "3",
            "What are the country options listed in the dropdown?": "USA, Canada, Mexico",
            "Which two buttons are displayed at the bottom of the form?": "Register and Clear",
            "What background color is applied to the Register button?": "Green",
            "Where is the success message displayed once the registration is completed?": "Below the form in a paragraph element"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001120",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a to-do list interface with task addition and removal functionality.\n\nFeature Requirements:\n- Include a centered header using an <h3> element with the text \"Task Manager\".\n- Display a text input field with a placeholder \"Enter new task\" for users to add a task.\n- Place an \"Add Task\" button immediately next to the input field that appends the entered task to the list.\n- Render the tasks as <li> elements within an unordered list, each paired with a checkbox that, when toggled, applies a line-through style to the task's text.\n- Provide exactly one \"Clear All\" button positioned at the bottom of the component that removes all tasks upon clicking.\n- Ensure the component uses a flexbox layout to center all elements both vertically and horizontally within the page.\n- Implement a <p> element that displays the message \"No tasks available\" when the unordered list is empty.\n- Apply inline CSS styling such that the \"Add Task\" button has a green background and the \"Clear All\" button has a red background.\n- Validate that the text input field is not empty before adding a new task to the list.\n- Structure the component so that the header, input area, task list, and clear button are clearly separated and visually distinct.",
        "raw_output_metric": [
            "Task Manager",
            "Enter new task",
            "Add Task",
            "Clear All",
            "No tasks available",
            "<li>",
            "line-through",
            "green",
            "red"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Task Manager",
            "What placeholder is shown in the task input field?": "Enter new task",
            "What label is visible on the button next to the input field?": "Add Task",
            "What background color is applied to the Add Task button?": "Green",
            "What background color is applied to the Clear All button?": "Red",
            "What message is displayed when there are no tasks in the list?": "No tasks available",
            "How many Clear All buttons are visible?": "One",
            "Where is the Clear All button positioned within the component?": "At the bottom",
            "What is paired with each task in the list to show its completion state?": "A checkbox"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001121",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nDevelop a React component that presents a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text \"Enter your email address\".\n- Include a checkbox element below the email input with a label \"Agree to receive updates\".\n- Provide exactly two buttons at the bottom of the form labeled \"Subscribe\" and \"Clear\", styled with background colors green and gray respectively.\n- Use a grid layout to center the form both vertically and horizontally on the page.\n- Implement basic validation to check that the email input is in a valid email format before allowing submission.\n- Render a <p> element containing the text \"Subscription successful\" after a successful form submission.\n- Automatically focus on the email input field when the component renders.\n- Display an inline error message below the email input if the entered email is not valid upon submission.",
        "raw_output_metric": [
            "Newsletter Signup",
            "Enter your email address",
            "Agree to receive updates",
            "Subscribe",
            "Clear",
            "Subscription successful"
        ],
        "VQA": {
            "What is the text of the centered header?": "Newsletter Signup",
            "What placeholder text is shown in the email input field?": "Enter your email address",
            "What is the label next to the checkbox appearing below the email input?": "Agree to receive updates",
            "How many buttons are visible at the bottom of the form?": "2",
            "What are the labels of the two buttons?": "Subscribe and Clear",
            "What background color is used for the Subscribe button?": "Green",
            "What background color is used for the Clear button?": "Gray",
            "What message is displayed in a paragraph element upon successful form submission?": "Subscription successful"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001122",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription widget.\n\nFeature Requirements:\n- Include an <h1> element at the top of the component with the text \"Join Our Newsletter\".\n- Display a single-line input field for the email address with a placeholder \"Enter your email address\" that spans the full width of its container.\n- Add a button labeled \"Subscribe\" immediately next to the email input, and style it with a green background and white text.\n- Use a CSS grid layout to place the email input and button side-by-side within a container.\n- Wrap the entire component in a <div> that has a fixed width of 400px and apply a 1px solid gray border around it.\n- Implement an onSubmit event handler for the form that validates the email using a basic regular expression.\n- Below the form, include a <p> element that initially displays the message \"Please enter a valid email\".\n- Once a correct email is submitted, replace the <p> content with \"Thank you for subscribing!\".\n- Ensure that the component is centered horizontally on the page using appropriate CSS styling.",
        "raw_output_metric": [
            "Join Our Newsletter",
            "Enter your email address",
            "Subscribe",
            "Please enter a valid email",
            "Thank you for subscribing!"
        ],
        "VQA": {
            "What is the main heading text displayed at the top of the widget?": "Join Our Newsletter",
            "What placeholder text is shown in the email input field?": "Enter your email address",
            "What text is displayed on the button next to the email input?": "Subscribe",
            "What are the button's visible background and text colors?": "Green background and white text",
            "How are the email input field and subscribe button arranged?": "Side by side using a CSS grid layout",
            "What fixed width and border styling is applied to the component container?": "400px width and 1px solid gray border",
            "What message is initially displayed below the form?": "Please enter a valid email",
            "What message appears after a correct email is submitted?": "Thank you for subscribing!",
            "How is the component positioned on the page?": "Centered horizontally"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001123",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nCreate a React component that renders a newsletter subscription form with input validation and dynamic messaging.\n\nFeature Requirements:\n- Display a centered <h2> element with the text \"Newsletter Signup\" at the top of the component.\n- Render a text input field for the email address with a placeholder \"Enter your email address\" directly below the header.\n- Include a dropdown <select> element with options \"Daily\", \"Weekly\", and \"Monthly\" for choosing newsletter frequency.\n- Provide exactly two buttons at the bottom: one labeled \"Subscribe\" with a green background color and another labeled \"Clear Form\" with a red border.\n- Use a flexbox layout on a container <div> to center the form both horizontally and vertically within the viewport.\n- Implement a <p> element below the buttons to display a confirmation message when the \"Subscribe\" button is clicked.\n- Add client-side validation to verify the email input contains an \"@\" character and that a frequency option is selected before allowing submission.\n- Ensure that clicking the \"Clear Form\" button resets all input fields and the dropdown selection to their default states.",
        "raw_output_metric": [
            "Newsletter Signup",
            "Enter your email address",
            "Daily",
            "Weekly",
            "Monthly",
            "Subscribe",
            "Clear Form",
            "@"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Newsletter Signup",
            "How is the header positioned within the component?": "Centered horizontally",
            "What placeholder text is shown in the email input field?": "Enter your email address",
            "What options are available in the newsletter frequency dropdown?": "Daily, Weekly, Monthly",
            "How many buttons are present and what are their labels?": "Two buttons: Subscribe and Clear Form",
            "What style is applied to the Subscribe button?": "Green background",
            "What style is applied to the Clear Form button?": "Red border",
            "Where is the confirmation message displayed after subscribing?": "Below the buttons",
            "What symbol must the email input contain to pass validation?": "@",
            "What occurs when the Clear Form button is clicked?": "All fields reset to their default states"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001124",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Subscribe to our Newsletter\".\n- Render two input fields: one text input for the user's full name with a placeholder \"Full Name\" and one email input with a placeholder \"Email Address\".\n- Place exactly one button below the input fields, labeled \"Subscribe\", and style it with red text on a white background.\n- Utilize a flexbox layout to center the complete form both vertically and horizontally within the viewport.\n- On clicking the \"Subscribe\" button, display a <div> element beneath the form containing the message \"Subscription Successful!\" in bold text, but only if both input fields contain non-empty values.",
        "raw_output_metric": [
            "Subscribe to our Newsletter",
            "Full Name",
            "Email Address",
            "Subscribe",
            "Subscription Successful!"
        ],
        "VQA": {
            "What is the header text displayed in the form?": "Subscribe to our Newsletter",
            "How many input fields are visible in the form?": "2",
            "What placeholder text is shown in the first input field?": "Full Name",
            "What placeholder text is shown in the second input field?": "Email Address",
            "What label is displayed on the button below the input fields?": "Subscribe",
            "What are the button's text and background colors?": "Red text on a white background",
            "What message appears after clicking the button if both fields are filled?": "Subscription Successful!",
            "How is the 'Subscription Successful!' message styled?": "Bold text",
            "How is the form positioned on the viewport?": "Centered vertically and horizontally using flexbox"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001125",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a hotel booking form for making reservations.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Hotel Booking Form\".\n- Display two date input fields with placeholders \"Check-in Date\" and \"Check-out Date\".\n- Render a number input field for the guest count with a placeholder \"Number of Guests\".\n- Include a <select> dropdown menu with options \"Single\", \"Double\", and \"Suite\" for room type selection.\n- Provide exactly two buttons labeled \"Reserve\" and \"Clear\" positioned at the bottom of the form.\n- Style the \"Reserve\" button with a green background color and the \"Clear\" button with a red background color.\n- Use a CSS flexbox layout to center the form both vertically and horizontally on the page.\n- Implement an onClick event for the \"Reserve\" button that triggers an alert with the message \"Reservation Successful\".\n- Ensure basic validation so that all input fields contain data before allowing a reservation.",
        "raw_output_metric": [
            "Hotel Booking Form",
            "Check-in Date",
            "Check-out Date",
            "Number of Guests",
            "Single",
            "Double",
            "Suite",
            "Reserve",
            "Clear",
            "Reservation Successful"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Hotel Booking Form",
            "How many date input fields are visible?": "2",
            "What placeholders are used for the date input fields?": "Check-in Date and Check-out Date",
            "What placeholder text is used for the guest count input field?": "Number of Guests",
            "How many room type options are available in the dropdown?": "3",
            "What are the room type options listed in the dropdown?": "Single, Double, and Suite",
            "What are the labels on the two buttons at the bottom of the form?": "Reserve and Clear",
            "Which button is styled with a green background?": "Reserve",
            "Which button is styled with a red background?": "Clear",
            "How is the form positioned on the page?": "Centered using CSS flexbox"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001126",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nCreate a React component that renders a simple newsletter subscription form.\n\nFeature Requirements:\n- Include a centered page title using an <h1> element with the text \"Newsletter Signup\".\n- Display an email input field with a placeholder text of \"Enter your email\" and mark it as a required field.\n- Place a checkbox labeled \"I agree to receive weekly updates\" directly below the email input field.\n- Provide exactly one submission button at the bottom of the form labeled \"Subscribe\" and style it with a background color of green.\n- Use a grid layout to arrange the form elements with a 10px gap between each element.\n- Implement an <h3> element below the form that displays the message \"Subscription successful!\" upon form submission.\n- Validate that the email field is not empty and matches a standard email format before allowing submission.\n- Disable the \"Subscribe\" button until the checkbox is selected.",
        "raw_output_metric": [
            "Newsletter Signup",
            "Enter your email",
            "I agree to receive weekly updates",
            "Subscribe",
            "green",
            "10px",
            "Subscription successful!"
        ],
        "VQA": {
            "What is the text displayed in the page title?": "Newsletter Signup",
            "What placeholder text is shown in the email input field?": "Enter your email",
            "Is the email input field marked as required?": "Yes",
            "What label is displayed next to the checkbox?": "I agree to receive weekly updates",
            "What is the text on the submission button at the bottom of the form?": "Subscribe",
            "What is the background color of the subscription button?": "Green",
            "What is the gap between the grid layout items in the form?": "10px",
            "What message appears below the form when the submission is successful?": "Subscription successful!"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001127",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Subscribe Now\" using a flex container.\n- Display a single text input field with a placeholder text of \"Enter your email address\" positioned below the header.\n- Place an explanatory <p> element beneath the input field with the exact text \"Join our monthly newsletter for updates\" in a smaller font.\n- Add a button labeled \"Sign Up\" directly under the paragraph and ensure it has a background color of green.\n- Include a <div> container that wraps the entire form and applies a flexbox layout to center the form vertically and horizontally within the page.\n- Implement a <span> element to display an error message below the button if the email input is empty upon clicking \"Sign Up\".\n- Ensure the component maintains a maximum width of 400px and uses padding of 20px around the form for clear spacing.",
        "raw_output_metric": [
            "Subscribe Now",
            "Enter your email address",
            "Join our monthly newsletter for updates",
            "Sign Up",
            "400px",
            "20px",
            "green",
            "flex"
        ],
        "VQA": {
            "What is the text content of the page header?": "Subscribe Now",
            "Is the header centered horizontally using a flex container?": "Yes",
            "What placeholder text appears in the email input field?": "Enter your email address",
            "What explanation is provided underneath the input field?": "Join our monthly newsletter for updates",
            "What label is displayed on the button below the explanation text?": "Sign Up",
            "What is the background color of the sign-up button?": "Green",
            "Is there an area to display an error message under the button if the email input is empty?": "Yes",
            "What are the layout constraints of the form container?": "Maximum width of 400px with 20px padding"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001128",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nDevelop a React component that implements a to-do list interface.\n\nFeature Requirements:\n- Create a centered <h2> element with the text \"To-Do List\" at the top of the component.\n- Include a text input field with a placeholder \"New Task\" for entering tasks.\n- Provide an \"Add Task\" button that, when clicked, appends the input text as a new task to the list.\n- Display the tasks in an unordered list (<ul>) where each task is wrapped in a <li> element.\n- Each <li> element must also include a \"Delete\" button that removes the respective task.\n- Use a flexbox layout to center the entire to-do list container both vertically and horizontally on the page.\n- Style the most recently added <li> element with a distinct background color to highlight it.\n- Implement a <p> element that briefly shows the message \"Task added!\" each time a new task is successfully added.\n- Validate that the text input is not empty before allowing a task to be added.\n- Enclose the to-do list and input area within a <div> element that features a visible border.",
        "raw_output_metric": [
            "To-Do List",
            "New Task",
            "Add Task",
            "Delete",
            "Task added!"
        ],
        "VQA": {
            "What is the text of the heading displayed at the top of the component?": "To-Do List",
            "What placeholder text appears in the task input field?": "New Task",
            "What label is shown on the button used to add new tasks?": "Add Task",
            "In which type of list are the tasks displayed?": "Unordered list",
            "What extra button is provided alongside each task in the list?": "Delete",
            "Is the to-do list container centered on the page?": "Yes, using a flexbox layout",
            "How is the most recently added task visually distinguished from the others?": "It has a distinct background color",
            "What message is briefly displayed after a new task is added?": "Task added!",
            "Does the container have a visible border?": "Yes"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001129",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Register Now\" positioned at the top of the form.\n- Display an input field for the username with a placeholder \"Username\" and an input field for the email with a placeholder \"Email Address\".\n- Include a password input field with a placeholder \"Password\" that masks user input.\n- Provide a radio button group with two options labeled \"Male\" and \"Female\" positioned immediately below the input fields.\n- Implement a single submit button at the bottom of the form labeled \"Create Account\" and styled with a background color of green.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Add a <p> element below the form that displays the message \"Registration Successful\" when the form is submitted with all fields filled.\n- Ensure basic front-end validation such that none of the input fields (username, email, and password) are empty upon submission.",
        "raw_output_metric": [
            "Register Now",
            "Username",
            "Email Address",
            "Password",
            "Male",
            "Female",
            "Create Account",
            "Registration Successful",
            "display: 'flex'"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Register Now",
            "Which placeholders are shown in the input fields?": "Username, Email Address, and Password",
            "How many gender options are provided in the radio button group?": "2",
            "What are the labels for the radio button options?": "Male and Female",
            "What is the text on the submit button at the bottom of the form?": "Create Account",
            "What background color is applied to the submit button?": "Green",
            "Where is the 'Registration Successful' message displayed upon submission?": "Below the form",
            "How is the form positioned on the page?": "It is centered vertically and horizontally using Flexbox"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001130",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant reservation form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Reserve Your Table\" at the top of the form.\n- Display a text input field with a placeholder stating \"Enter your full name\" for the user's name.\n- Provide a phone number input field with a placeholder \"Enter your phone number\".\n- Incorporate a date input element with a label \"Reservation Date\" and a time input element with a label \"Reservation Time\".\n- Add a select dropdown for party size with a default option \"Select number of guests\" and options ranging from 1 to 10.\n- Use a flexbox layout to center the form vertically and horizontally on the page.\n- Include exactly two buttons at the bottom of the form labeled \"Book Now\" and \"Cancel\", ensuring the \"Book Now\" button has a background color of green.\n- Implement a <p> element to display the message \"Reservation confirmed!\" below the form when the \"Book Now\" button is clicked, and include simple validation to ensure all input fields are filled before submission.",
        "raw_output_metric": [
            "Reserve Your Table",
            "Enter your full name",
            "Enter your phone number",
            "Reservation Date",
            "Reservation Time",
            "Select number of guests",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "Book Now",
            "Cancel",
            "Reservation confirmed!"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Reserve Your Table",
            "What placeholder text is shown in the user's name input field?": "Enter your full name",
            "What placeholder text is shown in the phone number input field?": "Enter your phone number",
            "What label appears above the date input element?": "Reservation Date",
            "What label appears above the time input element?": "Reservation Time",
            "What is the default option text in the party size dropdown?": "Select number of guests",
            "How many options are provided in the party size dropdown?": "10",
            "How many buttons are located at the bottom of the form?": "2",
            "What are the labels on the two buttons?": "Book Now and Cancel",
            "What message is displayed below the form upon clicking the Book Now button when the submission is successful?": "Reservation confirmed!"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001131",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a product survey form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Product Survey\".\n- Display a form that is centered both vertically and horizontally on the page using a flexbox layout.\n- Implement a radio button group for rating the product with exactly 5 options labeled from 1 to 5.\n- Include a text input field with a placeholder \"Your Email\" to collect the user's contact.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Clear\".\n- Ensure the \"Submit\" button is styled with a background color of green.\n- Add a <div> element below the form that displays a message \"Thank you for your feedback!\" when the \"Submit\" button is clicked.\n- Implement basic validation to ensure that a rating is selected and the email field is not empty before submission.\n- Use inline style objects within the React component to style all elements explicitly.\n- Include a <p> element adjacent to the email input to display an error message in red if validation fails.",
        "raw_output_metric": [
            "Product Survey",
            "Your Email",
            "1",
            "2",
            "3",
            "4",
            "5",
            "Submit",
            "Clear",
            "Thank you for your feedback!",
            "green",
            "red"
        ],
        "VQA": {
            "What is the text of the centered header?": "Product Survey",
            "How is the form positioned on the page?": "Centered vertically and horizontally using a flexbox layout",
            "How many rating options are available for the product rating?": "5",
            "What labels are used for the product rating options?": "1, 2, 3, 4, 5",
            "What placeholder is shown in the email input field?": "Your Email",
            "What buttons appear at the bottom of the form?": "Submit and Clear",
            "What is the background color of the 'Submit' button?": "Green",
            "What message is displayed below the form upon submission?": "Thank you for your feedback!",
            "How is the validation error message displayed next to the email input?": "In red"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001132",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a daily planner interface.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Daily Planner\".\n- Include a text input field with the placeholder \"Task Title\" above the task list.\n- Create an unordered list element that dynamically displays added tasks, each with a bold title and regular description.\n- Add a textarea element below the list with a placeholder \"Task Details\" that spans exactly 4 rows.\n- Provide exactly three buttons beneath the textarea labeled \"Add Task\", \"Clear All\", and \"Mark Completed\".\n- Ensure the \"Add Task\" button has a green background color.\n- Use a flexbox layout to center the component horizontally and vertically on the page.\n- Implement validation to prevent adding tasks when the task title input is empty.\n- When the \"Mark Completed\" button is clicked, apply a strike-through style to all the task items.\n- Position the input field and buttons in a vertical stack to clearly separate each section of the planner.",
        "raw_output_metric": [
            "Daily Planner",
            "Task Title",
            "Task Details",
            "Add Task",
            "Clear All",
            "Mark Completed",
            "rows",
            "4",
            "backgroundColor",
            "green",
            "textDecoration",
            "line-through",
            "display",
            "flex"
        ],
        "VQA": {
            "What text is displayed in the header at the top of the planner?": "Daily Planner",
            "What is the placeholder text in the text input field above the task list?": "Task Title",
            "How are the task items visually displayed in terms of styling for the title and description?": "Each task shows a bold title and a regular description",
            "What type of list is used to display the added tasks?": "An unordered list",
            "What is the placeholder text in the textarea located below the task list?": "Task Details",
            "How many rows does the textarea span?": "4",
            "How many buttons are displayed beneath the textarea?": "Three",
            "What labels appear on the buttons beneath the textarea?": "Add Task, Clear All, Mark Completed",
            "What is the background color of the Add Task button?": "Green",
            "How is the overall component aligned on the page?": "Centered horizontally and vertically using a flexbox layout"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001133",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a travel booking form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Flight Booking\".\n- Render a labeled text input field for \"Departure City\" with a placeholder \"Enter departure city\".\n- Render a labeled text input field for \"Arrival City\" with a placeholder \"Enter destination city\".\n- Include a date input element labeled \"Travel Date\" that accepts valid future dates only.\n- Position two checkboxes side-by-side labeled \"Direct Flight\" and \"Economy Class\" within the form.\n- Provide a button at the bottom labeled \"Book Now\" styled with a green background and white text.\n- Use a flexbox layout to center the form both vertically and horizontally within a fixed-width card container.",
        "raw_output_metric": [
            "Flight Booking",
            "Departure City",
            "Enter departure city",
            "Arrival City",
            "Enter destination city",
            "Travel Date",
            "Direct Flight",
            "Economy Class",
            "Book Now",
            "green",
            "white",
            "flexbox",
            "card"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Flight Booking",
            "Which label is associated with the first text input field?": "Departure City",
            "What placeholder is shown for the Departure City input?": "Enter departure city",
            "Which label is associated with the second text input field?": "Arrival City",
            "What placeholder is shown for the Arrival City input?": "Enter destination city",
            "What label appears next to the date input element?": "Travel Date",
            "What are the labels of the two checkboxes positioned side-by-side?": "Direct Flight and Economy Class",
            "What text is displayed on the booking button?": "Book Now",
            "What are the visual styling details of the booking button?": "Green background with white text",
            "How is the form positioned within the container?": "Centered both vertically and horizontally using flexbox in a fixed-width card container"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001134",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription module.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Newsletter Subscription\".\n- Display an email input field with a placeholder of \"Enter your email address\".\n- Provide a button labeled \"Subscribe\" styled with a background color of green.\n- Use a flexbox layout to center the subscription module both vertically and horizontally on the page.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" immediately after the button is clicked.\n- Add basic validation to ensure the email input is not empty and contains an \"@\" symbol before allowing submission.\n- Wrap the entire component in a <div> with a fixed width of 400px and a light gray border.",
        "raw_output_metric": [
            "Newsletter Subscription",
            "Enter your email address",
            "Subscribe",
            "Thank you for subscribing!",
            "400px",
            "green",
            "lightgray"
        ],
        "VQA": {
            "What text is displayed in the centered main header?": "Newsletter Subscription",
            "What is the placeholder text in the email input field?": "Enter your email address",
            "What text appears on the subscription button?": "Subscribe",
            "What is the background color of the subscription button?": "Green",
            "What message is shown immediately after the button is clicked?": "Thank you for subscribing!",
            "What is the fixed width of the outer container?": "400px",
            "What style is used for the border of the container?": "Light gray"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001135",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header with an <h1> element displaying \"Subscribe to Our Newsletter\".\n- Create an input field for an email address with a placeholder \"Enter your email\", styled with a solid border and padding.\n- Add a checkbox labeled \"I agree to the terms and conditions\" positioned just below the email input.\n- Provide a centered button labeled \"Subscribe\" that has a green background color.\n- Use a flexbox layout to arrange the form vertically and ensure it is centered both horizontally and vertically on the page.\n- Display a <div> element beneath the button to show an error message in red if the email is invalid or the checkbox is unchecked when the \"Subscribe\" button is clicked.\n- Include simple validation that checks the email input follows a standard email format and that the checkbox is ticked before submission.",
        "raw_output_metric": [
            "Subscribe to Our Newsletter",
            "Enter your email",
            "I agree to the terms and conditions",
            "Subscribe"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Subscribe to Our Newsletter",
            "What placeholder text is shown in the email input?": "Enter your email",
            "What styling is applied to the email input field?": "Solid border with padding",
            "What label is displayed under the email input?": "I agree to the terms and conditions",
            "What is the background color of the subscribe button?": "Green",
            "How is the form layout arranged?": "Vertically centered using a flexbox layout",
            "What visual indicator appears when validation fails?": "An error message in red is displayed below the button"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001136",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Display a centered header using an <h3> element with the text \"Subscribe to Our Newsletter\".\n- Include an input field of type \"email\" with a placeholder \"Enter your email\" positioned above the form.\n- Render a submit button labeled \"Subscribe Now\" styled with a white background and red text.\n- Arrange the input field and submit button next to each other using a flexbox layout.\n- Apply a container with a maximum width and centered horizontally on the page using margin auto.\n- Implement a <p> element that appears below the form showing the message \"Thank you for subscribing!\" after the form is successfully submitted.\n- Validate the form so that submission only occurs if the email input is not empty and contains an \"@\" symbol.",
        "raw_output_metric": [
            "Subscribe to Our Newsletter",
            "Enter your email",
            "Subscribe Now",
            "Thank you for subscribing!"
        ],
        "VQA": {
            "What is the header text displayed on the page?": "Subscribe to Our Newsletter",
            "Which HTML element is used to present the header text?": "h3",
            "What placeholder text is shown in the email input field?": "Enter your email",
            "How are the email input field and submit button arranged?": "They are placed next to each other using a flexbox layout",
            "What label is displayed on the submit button?": "Subscribe Now",
            "What are the background and text colors of the submit button?": "White background and red text",
            "How is the container styled in terms of alignment?": "It has a maximum width and is centered horizontally using margin auto",
            "What message appears below the form after a successful submission?": "Thank you for subscribing!"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001137",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Newsletter Signup\".\n- Display a required email input field with a placeholder \"Enter your email address\".\n- Provide a required text input field for the user's first name with a placeholder \"Your First Name\".\n- Wrap the form elements inside a <section> element with a background color of #f7f7f7.\n- Arrange the form using a flex container that centers the content vertically and horizontally on the page.\n- Include a button labeled \"Subscribe\" placed directly below the input fields.\n- Style the \"Subscribe\" button with a background color of green and white text.\n- Implement a <p> element that displays the message \"Thank you for subscribing!\" after the button is clicked.\n- Validate that neither the email input field nor the first name input field is empty before displaying the message.",
        "raw_output_metric": [
            "Newsletter Signup",
            "Enter your email address",
            "Your First Name",
            "#f7f7f7",
            "Subscribe",
            "green",
            "white",
            "Thank you for subscribing!"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Newsletter Signup",
            "What placeholder text is shown in the email input field?": "Enter your email address",
            "What placeholder text is shown in the first name input field?": "Your First Name",
            "What is the background color of the section containing the form?": "#f7f7f7",
            "How are the form elements arranged on the page?": "Centered both vertically and horizontally using a flex container",
            "What text is displayed on the subscription button?": "Subscribe",
            "What are the visual styles applied to the Subscribe button?": "Green background with white text",
            "What message appears after clicking the Subscribe button?": "Thank you for subscribing!"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001138",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a job application form.\n\nFeature Requirements:\n- Include a header using an <h1> element with the text \"Job Application\".\n- Create text input fields for \"Full Name\", \"Email\", and \"Phone Number\", each with an appropriate placeholder.\n- Add a dropdown menu labeled \"Position Applied For\" that includes three specific job title options.\n- Provide a textarea element titled \"Cover Letter\" that spans exactly 4 rows.\n- Include a submit button labeled \"Apply\" with a dark green background color.\n- Insert a reset button labeled \"Clear\" positioned to the right of the submit button.\n- Arrange all form elements within a div that utilizes a grid layout with two columns.\n- Implement validation to ensure all fields are filled in and that the email input contains an \"@\" symbol.\n- Add a <div> element at the bottom to display a confirmation message once the form is successfully submitted.",
        "raw_output_metric": [
            "Job Application",
            "Full Name",
            "Email",
            "Phone Number",
            "Position Applied For",
            "Cover Letter",
            "Apply",
            "Clear",
            "rows=\"4\"",
            "dark green",
            "grid",
            "confirmation message",
            "@"
        ],
        "VQA": {
            "What text is displayed in the header at the top of the form?": "Job Application",
            "Which text input fields are visible in the form?": "Full Name, Email, Phone Number",
            "What placeholder texts appear in the text input fields?": "Full Name, Email, Phone Number",
            "How many options are provided in the dropdown menu for the job position?": "3",
            "What label is associated with the dropdown menu?": "Position Applied For",
            "What is the visible label and size detail of the cover letter field?": "Cover Letter (textarea with 4 rows)",
            "What labels are shown on the form action buttons?": "Apply and Clear",
            "What distinctive styling detail is applied to the 'Apply' button?": "Dark green background",
            "How are the form elements visually arranged on the page?": "In a grid layout with two columns",
            "Where is the confirmation message displayed upon successful submission?": "At the bottom of the form"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001139",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user login form with email and password input fields.\n\nFeature Requirements:\n- Include an <h1> element at the top with the text \"User Login\".\n- Display an email input field with a placeholder \"Enter Email\" positioned at the beginning of the form.\n- Create a password input field with a placeholder \"Enter Password\" and ensure its type is set to \"password\".\n- Use a flexbox layout to arrange the form elements in a vertical column and center them horizontally on the page.\n- Add exactly two buttons below the input fields labeled \"Login\" and \"Clear\".\n- Style the \"Login\" button with a green background color and a 4-pixel border radius.\n- Implement a <div> element below the form that conditionally displays an error message when login validation fails.\n- Validate that both the email and password fields are not empty and that the email field contains an \"@\" symbol before enabling the \"Login\" button.",
        "raw_output_metric": [
            "User Login",
            "Enter Email",
            "Enter Password",
            "Login",
            "Clear",
            "password",
            "flex",
            "column",
            "center",
            "green",
            "4px"
        ],
        "VQA": {
            "What is the text shown in the main header?": "User Login",
            "What placeholder text is displayed in the first input field?": "Enter Email",
            "What placeholder text is given for the password input?": "Enter Password",
            "What is the input type of the password field?": "password",
            "How many buttons are displayed below the input fields?": "2",
            "What labels are seen on the two buttons?": "Login and Clear",
            "What background color is applied to the Login button?": "Green",
            "What is the border radius of the Login button?": "4 pixels",
            "How are the form elements arranged on the page?": "Vertical column centered horizontally",
            "Where is the error message container located on the page?": "Below the form"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001140",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a basic newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Subscribe to our Newsletter\".\n- Display two text input fields placed side by side: one with a placeholder \"Enter First Name\" and the other with a placeholder \"Enter Email Address\".\n- Wrap the input fields in a <form> element with an appropriate onSubmit handler.\n- Provide exactly one button labeled \"Subscribe\" styled with a green background color.\n- Use a flexbox layout to center the form horizontally on the page.\n- Implement a <div> element below the form that shows the message \"Subscription Successful\" when the \"Subscribe\" button is clicked.\n- Add basic client-side validation to ensure both input fields are not empty before processing the form submission.",
        "raw_output_metric": [
            "Subscribe to our Newsletter",
            "Enter First Name",
            "Enter Email Address",
            "Subscribe",
            "Subscription Successful"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Subscribe to our Newsletter",
            "How many text input fields are arranged side by side?": "2",
            "What is the placeholder text for the first input field?": "Enter First Name",
            "What is the placeholder text for the second input field?": "Enter Email Address",
            "What label is shown on the button?": "Subscribe",
            "What background color is used for the button?": "Green",
            "How is the form aligned on the page?": "Centered horizontally",
            "What message appears below the form when the button is clicked successfully?": "Subscription Successful"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001141",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a user registration card.\n\nFeature Requirements:\n- Create a header using an <h1> element with the text \"Register Now\" centered at the top of the component.\n- Directly below the header, include a <p> element that states \"Please complete the form below to join.\"\n- Add exactly three text input fields labeled \"Username\", \"Email\", and \"Password\", each with corresponding placeholder texts \"Enter your username\", \"Enter your email\", and \"Enter your password\".\n- Place two buttons at the bottom of the form: one labeled \"Register\" with a green background and another labeled \"Clear\" with a red background.\n- Use a CSS flexbox layout to arrange all form elements in a vertical column with 10px spacing between each element.\n- Implement basic validation so that when the \"Register\" button is clicked, a <div> element appears below the buttons with the text \"Registration Successful\" only if all input fields are non-empty.\n- Style all text input fields with a 1px solid #ccc border and 5px padding.",
        "raw_output_metric": [
            "Register Now",
            "Please complete the form below to join.",
            "Username",
            "Email",
            "Password",
            "Enter your username",
            "Enter your email",
            "Enter your password",
            "Register",
            "Clear",
            "Registration Successful",
            "flex",
            "10px",
            "1px solid #ccc",
            "5px"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the registration card?": "Register Now",
            "What message appears directly below the main header?": "Please complete the form below to join.",
            "How many text input fields are visible on the form?": "3",
            "What are the labels of the three text input fields?": "Username, Email, and Password",
            "What placeholder texts are provided for the input fields?": "Enter your username, Enter your email, and Enter your password",
            "How many buttons are present at the bottom of the form?": "2",
            "What labels are shown on the two buttons?": "Register and Clear",
            "What are the background colors of the Register and Clear buttons?": "Green for Register and Red for Clear",
            "What text appears after successful registration upon validation?": "Registration Successful",
            "How are all the form elements arranged?": "Using a CSS flexbox layout in a vertical column with 10px spacing between each element"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001142",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a simple product review form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Product Review\".\n- Place a text input field at the top of the form with a placeholder \"Enter product name\".\n- Provide a group of horizontally arranged radio buttons labeled \"Rating\" with options numbered 1 through 5.\n- Include a textarea element with a placeholder \"Write your review here\" that spans exactly 4 rows.\n- Add a submit button labeled \"Submit Review\" styled with a background color of green.\n- Utilize a flexbox layout to center the form horizontally and vertically within its container.\n- Ensure that form validation checks that the product name is not empty and a rating is selected before submission.\n- After the user submits the form, display a <p> element below the form with the message \"Thank you for your feedback!\".",
        "raw_output_metric": [
            "Product Review",
            "Enter product name",
            "Rating",
            "1",
            "2",
            "3",
            "4",
            "5",
            "Write your review here",
            "Submit Review",
            "Thank you for your feedback!"
        ],
        "VQA": {
            "What is the header text displayed at the top of the form?": "Product Review",
            "What placeholder text appears in the text input field?": "Enter product name",
            "How many radio button options are visible under the 'Rating' label?": "5",
            "What numbers are used as labels for the radio buttons?": "1, 2, 3, 4, 5",
            "What placeholder text is shown in the textarea?": "Write your review here",
            "How many rows does the textarea span?": "4",
            "What is the text on the submit button?": "Submit Review",
            "What background color is used for the submit button?": "Green",
            "How is the form positioned within its container?": "Centered horizontally and vertically",
            "What message appears below the form after submission?": "Thank you for your feedback!"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001143",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Newsletter Subscription\".\n- Provide an email input field with a placeholder \"Enter your email address\".\n- Display a checkbox immediately below the email input labeled \"I agree to receive emails\".\n- Include exactly two buttons at the bottom of the form labeled \"Subscribe\" and \"Clear\".\n- Style the \"Subscribe\" button with a background color of green and the \"Clear\" button with a background color of red.\n- Utilize a flexbox layout to center the form horizontally and vertically on the page.\n- Implement a <p> element below the buttons to display a confirmation message when the \"Subscribe\" button is clicked.\n- Add basic validation to ensure the email input field is in a valid email format before the form can be submitted.\n- Enclose the form within a container that has a 2px border and 20px padding.",
        "raw_output_metric": [
            "Newsletter Subscription",
            "Enter your email address",
            "I agree to receive emails",
            "Subscribe",
            "Clear",
            "green",
            "red"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Newsletter Subscription",
            "What placeholder text appears in the email input field?": "Enter your email address",
            "What is the label for the checkbox located below the email input?": "I agree to receive emails",
            "How many buttons are present in the form?": "2",
            "What are the texts shown on the two buttons?": "Subscribe and Clear",
            "What background color is used for the Subscribe button?": "Green",
            "What background color is used for the Clear button?": "Red",
            "Where is the confirmation message displayed in relation to the buttons?": "Below the buttons",
            "What styling is applied to the form container?": "2px border and 20px padding",
            "What layout technique is used to center the form horizontally and vertically on the page?": "Flexbox"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001144",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that displays a restaurant order form.\n\nFeature Requirements:\n- Include a centered <h1> header element with the text \"Restaurant Order Form\".\n- Display an input field for the customer's name with a placeholder \"Enter your name\".\n- Incorporate a select element with options \"Indoor\", \"Outdoor\", and \"Bar\" to choose seating.\n- Add a radio button group for selecting the meal type with options \"Lunch\" and \"Dinner\".\n- Provide a number input field for the order quantity, enforcing a minimum value of 1.\n- Include exactly two buttons at the bottom of the form labeled \"Place Order\" and \"Clear Form\".\n- Style the \"Place Order\" button with a green background color.\n- Use a flexbox layout to arrange all elements in a vertical column with uniform spacing.\n- Implement a <p> element that displays a confirmation message below the form when the \"Place Order\" button is clicked.\n- Add basic validation to ensure the name input is not empty and that the quantity is at least 1 before submission.",
        "raw_output_metric": [],
        "VQA": {
            "What is the text displayed in the centered header?": "Restaurant Order Form",
            "What placeholder text is used in the customer name input field?": "Enter your name",
            "What seating options are available in the dropdown selection?": "Indoor, Outdoor, Bar",
            "What meal type options are provided by the radio buttons?": "Lunch and Dinner",
            "What type of input is used for order quantity and what is its minimum value?": "A number input field with a minimum of 1",
            "How many buttons are present at the bottom of the form and what are their labels?": "Two; Place Order and Clear Form",
            "What is the background color of the Place Order button?": "Green",
            "How are the form elements arranged in the layout?": "They are arranged vertically with uniform spacing using flexbox",
            "Where is the confirmation message displayed upon placing an order?": "In a paragraph element below the form"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001145",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders an interactive quiz interface featuring one multiple choice question.\n\nFeature Requirements:\n- Display a centered header using an <h2> element with the text \"Quiz Time\" at the top.\n- Render a paragraph element below the header showing the quiz question \"What is the capital of France?\".\n- Present exactly four clickable buttons as answer options labeled \"Paris\", \"Berlin\", \"Madrid\", and \"Rome\".\n- Use a flexbox layout to center the entire quiz interface both horizontally and vertically within the viewport.\n- Style the \"Paris\" button with a green background color to indicate it as the correct answer.\n- Implement an onClick event for each button that displays a <p> element below the buttons with the text \"Correct!\" when \"Paris\" is clicked and \"Incorrect!\" for the other buttons.\n- Ensure that the buttons change their background color to a lighter shade when hovered over.\n- Include a progress bar at the bottom of the component that visually indicates the completion of 1 out of 5 quiz steps.",
        "raw_output_metric": [
            "Quiz Time",
            "What is the capital of France?",
            "Paris",
            "Berlin",
            "Madrid",
            "Rome",
            "Correct!",
            "Incorrect!",
            "1 out of 5"
        ],
        "VQA": {
            "What text is shown in the centered header at the top of the quiz?": "Quiz Time",
            "What quiz question is displayed below the header?": "What is the capital of France?",
            "How many answer buttons are visible on the quiz interface?": "4",
            "What are the labels on the answer buttons?": "Paris, Berlin, Madrid, Rome",
            "Which answer button is styled with a green background?": "Paris",
            "What progress status is shown in the progress bar at the bottom?": "1 out of 5",
            "How is the quiz interface positioned in the viewport?": "Centered horizontally and vertically"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001146",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders a newsletter subscription form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text \"Subscribe Now\".\n- Render a text input field with a placeholder \"Enter your email address\" above the subscription button.\n- Provide a subscription button labeled \"Sign Up\" and style it with a background color of green.\n- Add a checkbox with the label \"Receive Updates\" placed immediately next to the text input field.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement an inline error message in a <span> element below the email input if the entered email does not match a basic email format.\n- Display a success message in a <p> element below the form once the \"Sign Up\" button is clicked and validation passes.\n- Utilize React hooks to manage and validate the state of the text input and checkbox.\n- Ensure that form submission is prevented if either the email field is empty or the checkbox is unchecked.",
        "raw_output_metric": [],
        "VQA": {
            "What is the text displayed in the header of the form?": "Subscribe Now",
            "What placeholder text appears in the email input field?": "Enter your email address",
            "What label is written on the subscription button?": "Sign Up",
            "What is the background color of the subscription button?": "Green",
            "What label is associated with the checkbox next to the email input?": "Receive Updates",
            "Where is the inline error message displayed in relation to the email input field?": "Below the email input",
            "Where is the success message shown once the form is submitted with valid inputs?": "Below the form"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001147",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that implements a login form for a mobile banking application.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Bank Account Login\".\n- Display two input fields: one for username with a placeholder \"Enter Username\" and one for password with type \"password\" and a placeholder \"Enter Password\".\n- Place each input field inside its own <div> with a margin of 10px.\n- Implement client-side validation to ensure neither the username nor password field is empty before submission.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Provide three buttons below the input fields labeled \"Login\", \"Clear\", and \"Forgot Password\", with the \"Login\" button styled using a green background color.\n- Upon successful login, display a <p> element below the form with the text \"Welcome back!\".\n- Add a footer at the bottom of the component with centered text reading \"Powered by MobileBank\".\n- Surround the form with a border, subtle shadow, and padding of 20 pixels.",
        "raw_output_metric": [
            "Bank Account Login",
            "Enter Username",
            "Enter Password",
            "password",
            "Login",
            "Clear",
            "Forgot Password",
            "Welcome back!",
            "Powered by MobileBank",
            "10px",
            "20px"
        ],
        "VQA": {
            "What is the text displayed in the header of the form?": "Bank Account Login",
            "What placeholder text is shown in the username field?": "Enter Username",
            "What placeholder text is shown in the password field?": "Enter Password",
            "How many buttons are displayed below the input fields?": "Three",
            "What labels are shown on the buttons?": "Login, Clear, Forgot Password",
            "What is the distinctive style of the Login button?": "Green background color",
            "What message appears upon a successful login?": "Welcome back!",
            "What text is shown in the footer?": "Powered by MobileBank",
            "How is the form positioned on the page?": "Centered vertically and horizontally using flexbox",
            "What visual decorations are applied to the form container?": "Border with subtle shadow and 20 pixels of padding"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001148",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nGenerate a React component that renders an event registration form.\n\nFeature Requirements:\n- Include a centered header using an <h1> element displaying the text \"Event Registration\".\n- Display an input field for the user's email with a placeholder \"Enter your email address\".\n- Implement a dropdown selection with three options: \"Workshop\", \"Webinar\", and \"Seminar\", with a default placeholder option \"Select Event Type\".\n- Add a date input field labeled \"Event Date\" positioned below the dropdown.\n- Include exactly two buttons at the bottom of the form, labeled \"Register\" and \"Clear\", respectively.\n- Style the \"Register\" button with a background color of green and the \"Clear\" button with a background color of red.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement basic validation to ensure that the email field is not empty and follows a valid email format, and that an event type is selected before submission.",
        "raw_output_metric": [
            "Event Registration",
            "Enter your email address",
            "Select Event Type",
            "Workshop",
            "Webinar",
            "Seminar",
            "Event Date",
            "Register",
            "Clear",
            "green",
            "red",
            "flex"
        ],
        "VQA": {
            "What text is displayed in the centered header?": "Event Registration",
            "What placeholder is shown in the email input field?": "Enter your email address",
            "What options are visible in the event type dropdown?": "Select Event Type, Workshop, Webinar, Seminar",
            "What label is provided for the date input field?": "Event Date",
            "How many buttons are shown at the bottom and what are their labels?": "Two buttons: Register and Clear",
            "What are the background colors of the Register and Clear buttons?": "Green for Register and Red for Clear",
            "How is the form centered on the page?": "Using a flexbox layout to center it vertically and horizontally"
        }
    },
    {
        "task_name": "Text to React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "task_id": "001149",
        "input_type": "Text",
        "output_type": "React",
        "rendering": true,
        "query": "Please output React:\n\nTask:\nCreate a React component that renders a user registration form.\n\nFeature Requirements:\n- Display a centered header using an <h1> element with the text \"Register Now\" at the top of the component.\n- Create two input fields with one field for email (placeholder \"Email Address\") and another for password (placeholder \"Password\"), ensuring the password input masks the characters.\n- Position a <label> element before each input field to clearly indicate the field's purpose.\n- Include exactly three buttons at the bottom of the form labeled \"Register\", \"Clear\", and \"Back to Login\".\n- Style the \"Register\" button with a solid green background and use a grey background for both the \"Clear\" and \"Back to Login\" buttons.\n- Employ a CSS grid layout to arrange the input fields and buttons, ensuring that labels and input fields are aligned side by side.\n- Add inline validation that displays an error message in a <span> element below the email field if the entered text does not match a valid email format.\n- Include a checkbox with the label \"Agree to Terms\" positioned directly below the password field.\n- Insert a <p> element beneath the form that displays a dynamic success message once the registration form is successfully submitted.",
        "raw_output_metric": [
            "Register Now",
            "Email Address",
            "Password",
            "Register",
            "Clear",
            "Back to Login",
            "Agree to Terms"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001200",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, door, windows, and a sun in the background.\n\nFeature Requirements:\n- The SVG canvas must have a width and height of 400 pixels.\n- The house body should be a square with a width and height of 200 pixels, centered horizontally and positioned so that its bottom is 50 pixels above the bottom of the canvas.\n- The house body must be filled with light gray (#D3D3D3) and include a black border stroke of 2 pixels.\n- The roof should be an isosceles triangle placed on top of the house body, with a base width of 220 pixels and a height of 80 pixels, filled with dark red (#8B0000) and centered above the house.\n- A rectangular door must be placed at the center of the house body’s bottom, with a width of 50 pixels and a height of 80 pixels, filled with brown (#A0522D).\n- Two square windows, each 40 pixels by 40 pixels, must be positioned on either side of the door on the house body, filled with white and outlined with a black stroke of 2 pixels.\n- A circular sun should be positioned in the top right corner of the canvas with a radius of 30 pixels, filled with yellow (#FFD700) and outlined in black with a stroke of 2 pixels.\n- All elements must be clearly separated and proportionally aligned, ensuring no overlapping between the house and the sun.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "200",
            "50",
            "<polygon",
            "fill=\"#8B0000\"",
            "220",
            "80",
            "fill=\"#A0522D\"",
            "fill=\"white\"",
            "40",
            "<circle",
            "r=\"30\"",
            "fill=\"#FFD700\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "What are the fill color and border attributes of the house body?": "Filled with light gray (#D3D3D3) and a 2-pixel black border",
            "How is the house body sized and positioned on the canvas?": "It is a 200x200 pixel square, centered horizontally with its bottom 50 pixels above the bottom edge",
            "What is the shape, color, and dimensions of the roof?": "An isosceles triangle with a dark red (#8B0000) fill, 220 pixels wide at the base and 80 pixels tall, centered above the house body",
            "What are the dimensions, color, and location of the door?": "A 50x80 pixel rectangle, filled brown (#A0522D), centered on the house body's bottom",
            "What are the size and styling details of the windows?": "Two square windows of 40x40 pixels, filled white with a 2-pixel black stroke, placed on either side of the door",
            "What are the features of the sun including its size, color, border, and position?": "A circle with a radius of 30 pixels, filled yellow (#FFD700) with a 2-pixel black stroke, located in the top right corner"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001201",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a seaside scene featuring a sailboat on the ocean with a shining sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must have a consistent width and height of 400 pixels.\n2. Create a blue rectangle representing the ocean, covering the bottom half of the canvas with its top edge at 200 pixels, filled with the hexadecimal color #1E90FF.\n3. Draw a yellow circle in the top right quadrant to represent the sun, with a radius of 40 pixels and filled with the hexadecimal color #FFD700.\n4. Render a sailboat by including a dark gray rectangle for the hull that is 80 pixels wide and 20 pixels high, centered horizontally along the bottom edge of the ocean rectangle, using the hexadecimal color #696969.\n5. Construct a triangular sail using a polygon element positioned above the hull, with three defined points, filled with light gray (#D3D3D3) and outlined with a 2-pixel black stroke (#000000).\n6. Add two small white circles as seagulls in the sky, each with a radius of 5 pixels, placed near the top of the canvas at specific horizontal positions.\n7. Maintain proper layering so that the sun and seagulls appear behind the sailboat and ocean elements for visual depth.\n8. Ensure that all elements are positioned with explicit coordinates for clear spatial relationships within the canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#1E90FF\"",
            "y=\"200\"",
            "<circle",
            "fill=\"#FFD700\"",
            "r=\"40\"",
            "fill=\"#696969\"",
            "<polygon",
            "fill=\"#D3D3D3\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "points=\"",
            "r=\"5\"",
            "fill=\"white\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What is the fill color of the ocean rectangle?": "#1E90FF",
            "At which vertical pixel does the top edge of the ocean rectangle lie?": "200 pixels",
            "What are the characteristics of the sun in the scene?": "A yellow circle with a radius of 40 pixels, fill #FFD700, located in the top right quadrant",
            "How is the sailboat hull depicted?": "As a dark gray rectangle 80 pixels wide and 20 pixels high, fill #696969, centered horizontally along the bottom edge of the ocean",
            "What are the visual properties of the sail's triangular shape?": "A polygon with three points, filled with light gray (#D3D3D3) and outlined with a 2-pixel black stroke (#000000), positioned above the hull",
            "How many seagulls are shown and what are their characteristics?": "Two seagulls, each depicted as a small white circle with a radius of 5 pixels near the top of the canvas",
            "Which elements are layered behind the sailboat and ocean?": "The sun and the seagulls"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001202",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house scene with a house, a sun, and a pair of clouds.\n\nFeature Requirements:\n1. The SVG canvas should have a fixed width and height of 400 pixels.\n2. A large rectangle representing the house's body must be centered horizontally and measure 200 pixels in width and 150 pixels in height.\n3. The house's rectangle should be filled with light blue using hexadecimal color #ADD8E6 and positioned so its bottom edge aligns with the bottom of the SVG canvas.\n4. A triangle depicting the roof should be positioned directly above the house’s rectangle, with its base matching the top width of the house and its apex centered.\n5. The triangle roof must be colored red with the hexadecimal code #FF0000.\n6. A circle illustrating the sun should be placed in the top right corner of the canvas, with a radius of 40 pixels and filled with yellow using hexadecimal color #FFD700.\n7. Two ellipses representing clouds should be placed in the top left area; each ellipse should have a width of 50 pixels, a height of 30 pixels, and be filled with light gray using hexadecimal color #D3D3D3.\n8. Each cloud should be arranged so that at least one edge touches the upper boundary of the SVG canvas for visual emphasis.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "200",
            "150",
            "#ADD8E6",
            "<polygon",
            "#FF0000",
            "<circle",
            "40",
            "#FFD700",
            "<ellipse",
            "50",
            "30",
            "#D3D3D3"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 400 pixels",
            "What is the width and height of the house's body rectangle?": "200 pixels wide and 150 pixels high",
            "What is the fill color of the house's body rectangle?": "Light blue (#ADD8E6)",
            "How is the house's rectangle positioned vertically within the canvas?": "Its bottom edge aligns with the bottom of the SVG canvas",
            "What is the color and shape of the roof?": "A red triangle (#FF0000)",
            "Where is the roof triangle positioned relative to the house's rectangle?": "Directly above the house’s rectangle with its base matching the rectangle's width",
            "What are the dimensions and fill color of the sun?": "A circle with a radius of 40 pixels, filled with yellow (#FFD700)",
            "Where is the sun located in the canvas?": "In the top right corner",
            "How many clouds are depicted and what are their dimensions?": "Two clouds, each represented by an ellipse 50 pixels wide and 30 pixels high",
            "What is the fill color of the clouds and how are they arranged relative to the canvas?": "Light gray (#D3D3D3); at least one edge of each cloud touches the upper boundary of the SVG canvas"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001203",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a small house with a door, windows, and a pitched roof.\n\nFeature Requirements:\n- The SVG canvas must have a width and height of 400 pixels.\n- The house body should be depicted as a rectangle in the lower half of the canvas, with a width of 300 pixels and a height of 200 pixels, and it should be horizontally centered.\n- The house body must be filled with light gray using the hexadecimal code #D3D3D3.\n- The house roof should be drawn as a triangle (using a polygon) placed directly above the rectangle, with its base matching the width of the house body and its peak centered above the rectangle.\n- The roof should be filled with deep red using the hexadecimal code #8B0000 and have a black stroke of 3 pixels.\n- The door should be represented as a smaller rectangle centered at the bottom of the house body, with a width of 70 pixels and a height of 120 pixels.\n- The door must be filled with dark brown using the hexadecimal code #654321 and feature a black border of 2 pixels.\n- Two square windows, each measuring 50 pixels by 50 pixels, should be placed symmetrically on either side of the door on the house body.\n- Each window should be filled with sky blue using the hexadecimal code #87CEEB and outlined with a 2-pixel black stroke.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "width=\"300\"",
            "height=\"200\"",
            "<polygon",
            "fill=\"#8B0000\"",
            "stroke=\"#000000\"",
            "stroke-width=\"3\"",
            "width=\"70\"",
            "height=\"120\"",
            "fill=\"#654321\"",
            "width=\"50\"",
            "height=\"50\"",
            "fill=\"#87CEEB\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 x 400 pixels",
            "How is the house body represented on the canvas?": "A 300 x 200 pixels rectangle filled with light gray (#D3D3D3) at the lower half and horizontally centered",
            "What shape and color is used for the roof?": "A triangle (polygon) placed directly above the house body, filled with deep red (#8B0000) and outlined with a 3-pixel black stroke",
            "How is the door depicted on the house body?": "A centered rectangle at the bottom with dimensions 70 x 120 pixels, filled with dark brown (#654321) and a 2-pixel black border",
            "How many windows are there and what are their specifications?": "Two square windows, each measuring 50 x 50 pixels, filled with sky blue (#87CEEB) and outlined with a 2-pixel black stroke",
            "Where are the windows positioned relative to the door?": "Symmetrically placed on either side of the door on the house body"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001204",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, door, and two windows.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. The main body of the house should be represented by a rectangle centered horizontally near the bottom of the canvas, with a width of 200 pixels and a height of 150 pixels, filled with the color blue (#1E90FF).\n3. A triangular roof must be drawn on top of the house body as a polygon with its base matching the top side of the house rectangle, filled with red (#FF0000).\n4. A door should be depicted as a rectangle centered on the house body, with dimensions 50 pixels wide and 80 pixels tall, positioned so that its bottom edge aligns with the bottom of the house, and filled with dark brown (#6B4226).\n5. Two windows must be included on either side of the door, each represented by a square with sides of 40 pixels, filled with yellow (#FFFF00) and outlined with a 2-pixel black stroke (#000000).",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "xmlns=\"http://www.w3.org/2000/svg\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#1E90FF\"",
            "<polygon",
            "fill=\"#FF0000\"",
            "<rect",
            "width=\"50\"",
            "height=\"80\"",
            "fill=\"#6B4226\"",
            "<rect",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#FFFF00\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400px by 400px",
            "What is the fill color of the main house rectangle?": "Blue (#1E90FF)",
            "What are the dimensions of the house's rectangle?": "200 pixels wide by 150 pixels tall",
            "What shape does the roof have and what is its color?": "It is a triangular roof (polygon) filled with red (#FF0000)",
            "What are the dimensions and color of the door?": "50 pixels wide by 80 pixels tall, dark brown (#6B4226)",
            "How many windows are on the house?": "2",
            "What are the sizes of the windows?": "Each window is a 40x40 pixel square",
            "What are the fill and stroke properties of the windows?": "Yellow fill (#FFFF00) with a 2-pixel black stroke (#000000)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001205",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house scene featuring a house with a roof, door, windows, a chimney, and a sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas should have dimensions of 400 pixels by 400 pixels.\n2. The house body must be a rectangle positioned at the center bottom of the canvas with a width of 200 pixels and a height of 150 pixels, filled with light blue (#ADD8E6) and outlined with a 2-pixel black stroke.\n3. The roof should be a polygon forming an isosceles triangle placed directly on top of the house, with a base width of 220 pixels, filled with dark red (#8B0000) and outlined with a 2-pixel black stroke.\n4. A chimney must be included on the roof, represented by a rectangle of 30 pixels in width and 80 pixels in height, positioned toward the right side of the roof, filled with gray (#808080) and outlined with a 2-pixel black stroke.\n5. The door of the house should be a rectangle centered on the house body, measuring 40 pixels in width and 70 pixels in height, filled with brown (#A52A2A) and outlined with a 2-pixel black stroke.\n6. Two square windows, each 40 pixels by 40 pixels, should be placed on the left and right sides of the house body, filled with white (#FFFFFF) and outlined with a 2-pixel black stroke.\n7. A circular sun must be positioned in the upper left corner of the SVG, with a radius of 30 pixels, filled with yellow (#FFD700) and outlined with a 2-pixel black stroke.\n8. All elements should be aligned and spaced evenly within the canvas to ensure a balanced composition.\n9. The bottom edge of the house body should align with the bottom of the SVG canvas to create a grounded appearance.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "#ADD8E6",
            "#8B0000",
            "#808080",
            "#A52A2A",
            "#FFFFFF",
            "#FFD700",
            "rect",
            "polygon",
            "circle",
            "200",
            "150",
            "220",
            "30",
            "80",
            "40",
            "70",
            "stroke",
            "stroke-width"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 x 400 pixels",
            "What are the dimensions, fill color, and stroke of the house body?": "200 x 150 pixels, light blue (#ADD8E6), 2-pixel black stroke",
            "What shape is the roof, and what are its fill and border properties?": "An isosceles triangle (polygon), dark red (#8B0000) fill, 2-pixel black stroke",
            "What are the dimensions and appearance of the chimney on the roof?": "30 x 80 pixels, filled with gray (#808080), outlined with a 2-pixel black stroke",
            "Where is the door located on the house, and what are its dimensions and colors?": "Centered on the house body, 40 x 70 pixels, filled with brown (#A52A2A) and a 2-pixel black stroke",
            "How many windows are there, and what are their dimensions and colors?": "Two windows, each 40 x 40 pixels, filled with white (#FFFFFF) with a 2-pixel black stroke",
            "What are the visual properties of the sun and where is it placed?": "A circle with a radius of 30 pixels, filled with yellow (#FFD700), outlined with a 2-pixel black stroke, located in the upper left corner"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001206",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quaint house with a pitched roof, windows, a door, and a bright sun in the sky.\n\nFeature Requirements:\n- The SVG canvas must be 400 pixels wide and 400 pixels high.\n- The house's main body should be represented by a rectangle of 150 pixels in width and 100 pixels in height, positioned centrally in the lower half of the canvas.\n- The pitched roof must be an isosceles triangle placed directly on top of the house's rectangle, with its base equal to the width of the rectangle and filled in red (#FF0000).\n- A door should be drawn as a smaller rectangle of 40 pixels by 60 pixels and centered at the bottom of the house; it must have a fill color of brown (#8B4513) and a border of 2 pixels in black (#000000).\n- Two square windows, each 30 pixels by 30 pixels, should be placed one on each side of the door on the house's body; each window must be filled with light blue (#ADD8E6) and outlined with a 1-pixel stroke in dark gray (#A9A9A9).\n- A sun must be featured as a yellow circle with a radius of 30 pixels, positioned in the top left corner of the canvas.\n- The sun should have an outer stroke of 3 pixels in orange (#FFA500).",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "width=\"150\"",
            "height=\"100\"",
            "polygon",
            "fill=\"#FF0000\"",
            "width=\"40\"",
            "height=\"60\"",
            "fill=\"#8B4513\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "width=\"30\"",
            "height=\"30\"",
            "fill=\"#ADD8E6\"",
            "stroke=\"#A9A9A9\"",
            "stroke-width=\"1\"",
            "circle",
            "r=\"30\"",
            "fill=\"yellow\"",
            "stroke=\"#FFA500\"",
            "stroke-width=\"3\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide by 400 pixels high",
            "What are the dimensions and placement of the house's main body?": "150 pixels wide by 100 pixels high, positioned centrally in the lower half of the canvas",
            "What is the shape and color of the roof?": "An isosceles triangle filled in red (#FF0000) placed directly on top of the house's rectangle",
            "What are the dimensions and styling of the door?": "40 pixels by 60 pixels, centered at the bottom of the house, filled with brown (#8B4513) and with a 2-pixel black (#000000) border",
            "How many windows are there and what are their properties?": "Two square windows, each 30 pixels by 30 pixels, filled with light blue (#ADD8E6) and outlined with a 1-pixel dark gray (#A9A9A9) stroke",
            "What details describe the sun in the image?": "A yellow circle with a radius of 30 pixels in the top left corner, featuring a 3-pixel orange (#FFA500) stroke"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001207",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a scenic beach with a palm tree and a sun.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 300 pixels high.\n2. A rectangle representing the ocean must cover the top half of the canvas, starting from the top edge, with a fill color of #1E90FF.\n3. A rectangle representing the beach must cover the bottom half of the canvas, starting from the middle, with a fill color of #FFD700.\n4. A circle representing the sun must be placed in the top right corner of the canvas with a radius of 30 pixels and a fill color of #FFA500.\n5. A palm tree trunk, depicted as a rectangle, must be positioned near the center of the right half of the canvas; it should be 20 pixels wide, 80 pixels tall, and filled with #8B4513.\n6. The trunk’s bottom edge must align exactly with the boundary between the ocean and the beach.\n7. Five ellipses representing palm leaves must emanate from the top of the trunk in a semi-circular arc, each with a fill color of #228B22.\n8. Each palm leaf ellipse must have a horizontal radius of 25 pixels and a vertical radius of 15 pixels, arranged evenly around the top of the trunk.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "fill=\"#1E90FF\"",
            "fill=\"#FFD700\"",
            "<circle",
            "r=\"30\"",
            "fill=\"#FFA500\"",
            "width=\"20\"",
            "height=\"80\"",
            "fill=\"#8B4513\"",
            "<ellipse",
            "fill=\"#228B22\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What is the fill color and position of the ocean rectangle?": "Fill color is #1E90FF; it covers the top half of the canvas starting from the top edge",
            "What is the fill color and position of the beach rectangle?": "Fill color is #FFD700; it covers the bottom half of the canvas starting from the middle",
            "What shape, size, and color is the sun and where is it placed?": "It is a circle with a radius of 30 pixels, filled with #FFA500, and placed in the top right corner",
            "How is the palm tree trunk depicted and where is it positioned relative to the canvas?": "It is a rectangle 20 pixels wide and 80 pixels tall, filled with #8B4513, positioned near the center of the right half with its bottom edge aligned exactly with the ocean-beach boundary",
            "How many palm leaf ellipses are there, and what are their dimensions and fill color?": "There are five ellipses; each has a horizontal radius of 25 pixels, a vertical radius of 15 pixels, and is filled with #228B22",
            "How are the palm leaves arranged?": "They are arranged in a semi-circular arc emanating from the top of the palm tree trunk"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001208",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image capturing a serene seaside sunset scene with a calm sea, a glowing sun, and distant mountains.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 300 pixels tall for consistent dimensions.\n2. A large rectangle filling the bottom half of the canvas must represent the sea and should use a gradient that transitions from #1E90FF at the top to #00BFFF at the bottom.\n3. The top half of the canvas should be filled with a solid sky color using the hexadecimal code #FFD700.\n4. Draw a circle to represent the sun with a radius of 40 pixels, positioned so that its center is at (320, 150), and fill it with the color #FF4500.\n5. Include three overlapping polygon shapes along the horizon to depict distant mountains; each polygon should have at least four vertices and be filled with one of the following shades of gray respectively: #A9A9A9, #808080, and #696969.\n6. Ensure the top edge of the sea rectangle aligns exactly with the bottom of the sky area to create a seamless division.\n7. Each mountain polygon must have a 1-pixel black stroke outline using the color #000000 to clearly separate them from the background.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "fill=\"#FFD700\"",
            "linearGradient",
            "stop",
            "offset",
            "#1E90FF",
            "#00BFFF",
            "<circle",
            "cx=\"320\"",
            "cy=\"150\"",
            "r=\"40\"",
            "fill=\"#FF4500\"",
            "<polygon",
            "fill=\"#A9A9A9\"",
            "fill=\"#808080\"",
            "fill=\"#696969\"",
            "stroke=\"#000000\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels tall",
            "What solid color fills the sky area in the top half of the canvas?": "#FFD700",
            "What is the gradient used for the sea rectangle?": "From #1E90FF at the top to #00BFFF at the bottom",
            "What is the position and size of the sun?": "A circle with radius 40 pixels centered at (320, 150)",
            "What color is used to fill the sun?": "#FF4500",
            "How many mountain polygons are included in the scene?": "Three",
            "What fill colors are used for the mountain polygons?": "#A9A9A9, #808080, and #696969",
            "What stroke outline is applied to each mountain polygon?": "1-pixel black stroke (#000000)",
            "How is the alignment between the sea and the sky ensured?": "The top edge of the sea rectangle aligns exactly with the bottom edge of the sky area"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001209",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a modern house situated on a hillside.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 300 pixels.\n2. The house's main structure must be a square with a side length of 150 pixels, positioned at the lower center of the canvas.\n3. The square representing the house should be filled with a light gray color using the hexadecimal code #D3D3D3.\n4. The roof should be depicted as an isosceles triangle directly on top of the square, with a base equal to the square’s width and a height of 50 pixels, filled with dark red using the hexadecimal code #8B0000.\n5. Two square windows, each measuring 30 pixels on a side, should be placed symmetrically on the house’s square body, and filled with sky blue using the hexadecimal code #87CEEB.\n6. A rectangular door of 40 pixels in width and 70 pixels in height should be centered along the bottom edge of the square house, filled with brown using the hexadecimal code #8B4513.\n7. All elements of the house (square, roof, windows, and door) must have a consistent black stroke outline with a stroke width of 2 pixels.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "150",
            "#D3D3D3",
            "#8B0000",
            "50",
            "30",
            "#87CEEB",
            "40",
            "70",
            "#8B4513",
            "stroke=\"black\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What is the size of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What shape and size is the house's main structure?": "A square of 150 pixels per side, positioned at the lower center",
            "What fill color is used for the house's square?": "#D3D3D3 (light gray)",
            "What shape does the roof have and what are its dimensions?": "An isosceles triangle with a base of 150 pixels and a height of 50 pixels",
            "How many windows are drawn on the house, what are their dimensions, and what is their fill color?": "Two square windows of 30 pixels per side, filled with #87CEEB (sky blue)",
            "What are the dimensions and color of the door, and where is it positioned?": "A rectangle 40 pixels wide by 70 pixels high, centered along the bottom edge of the house square, filled with #8B4513 (brown)",
            "What stroke style is applied to all elements of the house?": "A black stroke outline with a stroke width of 2 pixels"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001210",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a rocket preparing for launch against a starry night background.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 400 pixels.\n- The rocket body should be represented by a vertical rectangle positioned in the center, measuring 60 pixels in width and 180 pixels in height, colored bright red (#FF0000).\n- A triangle element representing the rocket's nose cone must be placed on top of the rectangle, with a base equal to the width of the rectangle and a height of 40 pixels, filled with a darker shade of red (#B22222).\n- Include three small circular windows on the rocket body, each with a radius of 10 pixels, evenly spaced vertically and centered horizontally on the rectangle, with a white fill (#FFFFFF) and a black stroke (#000000) of 2 pixels.\n- Two polygon elements should represent the rocket's side thrusters, one on each side of the bottom of the rectangle; each thruster must be a triangle with a base of 20 pixels and a height of 30 pixels, filled in orange (#FFA500) and positioned symmetrically.\n- Below the rocket, add a smaller triangle to simulate the launch flame, with a width of 40 pixels and a height of 30 pixels, positioned centrally under the rectangle and filled with bright yellow (#FFFF00) with a slight red gradient.\n- The background of the SVG must be a deep navy blue (#000080) with several small white circle elements randomly scattered to mimic stars, each circle having a radius of 2 pixels.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "fill=\"#000080\"",
            "rect",
            "fill=\"#FF0000\"",
            "width=\"60\"",
            "height=\"180\"",
            "fill=\"#B22222\"",
            "polygon",
            "r=\"10\"",
            "fill=\"#FFFFFF\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "fill=\"#FFA500\"",
            "height=\"30\"",
            "fill=\"#FFFF00\"",
            "linearGradient",
            "stop",
            "r=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "What shape and color is used for the rocket's body?": "A vertical rectangle in bright red (#FF0000)",
            "How is the rocket's nose cone represented?": "A triangle placed on top of the rectangle, colored darker red (#B22222)",
            "How many circular windows does the rocket body have and what are their features?": "Three windows, each with a radius of 10 pixels, white fill (#FFFFFF) with a black stroke (#000000) of 2 pixels",
            "What shapes and colors are used for the rocket's side thrusters?": "Two triangle polygons on either side of the bottom of the rectangle, each with a base of 20 pixels and height of 30 pixels, filled in orange (#FFA500)",
            "How is the rocket's launch flame depicted?": "A smaller triangle below the rocket, 40 pixels wide and 30 pixels high, with a bright yellow fill (#FFFF00) featuring a slight red gradient",
            "What is the background style of the SVG?": "A deep navy blue (#000080) with several small white circles (radius of 2 pixels) scattered as stars"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001211",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a vibrant underwater scene featuring a coral reef, colorful fish, and bubbles.\n\nFeature Requirements:\n- The SVG canvas must have a width and height of 400 pixels.\n- A coral reef should occupy the bottom portion of the canvas, depicted by an irregular, curvy shape filled with the color #FF4500.\n- Three distinct fish must be present above the coral reef, each represented by an ellipse with a tail fin.\n- Each fish should have its own fill color: one with #1E90FF, one with #32CD32, and one with #FFD700, and all must include a 2-pixel black stroke outline.\n- Each fish must include an eye represented by a small white circle with a centered black circle for the pupil.\n- At least five bubbles of varying sizes (with radii between 5 and 15 pixels) must be randomly distributed in the upper half of the canvas.\n- All elements should be arranged so that the coral reef forms a stable base at the bottom while the fish and bubbles are clearly visible in the water above.\n- Every primary shape in the composition must have a 2-pixel stroke outline in black (#000000).",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "xmlns=\"http://www.w3.org/2000/svg\"",
            "fill=\"#FF4500\"",
            "path",
            "ellipse",
            "fill=\"#1E90FF\"",
            "fill=\"#32CD32\"",
            "fill=\"#FFD700\"",
            "circle",
            "fill=\"#FFFFFF\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "r="
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What is the fill color of the coral reef?": "#FF4500",
            "How many fish are depicted in the scene?": "3",
            "What are the fill colors of the three fish?": "#1E90FF, #32CD32, and #FFD700",
            "Do the fish have visible eyes, and what do they look like?": "Yes, each fish has a white circle eye with a centered black pupil",
            "How many bubbles are visible in the upper half of the canvas?": "At least 5",
            "What is the range of radii for the bubbles?": "Between 5 and 15 pixels",
            "Do all primary shapes have a 2-pixel black stroke outline?": "Yes"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001212",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a charming house set in a scenic landscape with a sun and clouds.\n\nFeature Requirements:\n- The SVG canvas must be 400 pixels wide and 400 pixels high.\n- Include a rectangle in the center-bottom area to represent the house's main body, with a width of 120 pixels and a height of 100 pixels, filled with the color #F4A460.\n- Add a triangle (using a polygon element) on top of the house's rectangle to represent the roof, with its base matching the rectangle's width, filled with the color #8B0000.\n- Place a small rectangle centered on the house's main rectangle to serve as the door, measuring 30 pixels wide by 50 pixels high, filled with the color #654321.\n- Create a circle in the top-left quadrant of the canvas to depict the sun, with a radius of 40 pixels and filled with the color #FFD700.\n- Add two separate cloud shapes near the top-right quadrant; each cloud should consist of three overlapping circles with a radius of 20 pixels each, filled with the color #FFFFFF.\n- Ensure the house is grounded by aligning its bottom edge with the bottom edge of the SVG canvas.\n- The sun and cloud elements should have a thin black stroke outline of 1 pixel to enhance their visual definition.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "polygon",
            "circle",
            "fill=\"#F4A460\"",
            "fill=\"#8B0000\"",
            "fill=\"#654321\"",
            "fill=\"#FFD700\"",
            "fill=\"#FFFFFF\"",
            "120",
            "100",
            "30",
            "50",
            "40",
            "20",
            "stroke=\"black\"",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 400 pixels high",
            "What color fills the main body of the house?": "#F4A460",
            "How is the roof of the house represented and what is its fill color?": "As a triangle (polygon) with a fill color of #8B0000",
            "What are the dimensions and fill color of the door?": "30 pixels wide by 50 pixels high, filled with #654321",
            "Where is the sun positioned and what is its radius?": "In the top-left quadrant with a radius of 40 pixels",
            "How many cloud shapes are depicted and how many circles make up each cloud?": "Two clouds, each consisting of three overlapping circles",
            "What stroke style is applied to the sun and cloud elements?": "A thin black stroke outline of 1 pixel"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001213",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, door, and two windows.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels in width and 400 pixels in height.\n2. The house's body should be represented by a rectangle centered horizontally and positioned in the lower half of the canvas, with a width of 200 pixels and a height of 150 pixels.\n3. The house's body rectangle must be filled with a light gray color using hexadecimal code #D3D3D3.\n4. The roof should be depicted as a triangle (using a polygon element) placed immediately above the house’s body, with vertices at the midpoint of the top edge and at the top corners of the house's rectangle, and filled with a dark red color using hexadecimal code #8B0000.\n5. A door must be included as a smaller rectangle centered horizontally on the house's body, measuring 50 pixels in width and 80 pixels in height, filled with brown using hexadecimal code #654321, and aligned with the bottom of the house's body.\n6. Two windows should be incorporated as squares with a side length of 40 pixels each, placed symmetrically on either side of the door on the house's body, each filled with white (#FFFFFF) and having a solid border (stroke) of 2 pixels in black (#000000).\n7. All elements (house, roof, door, and windows) must be arranged within the canvas ensuring a balanced composition and clear separation between components.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#D3D3D3\"",
            "<polygon",
            "fill=\"#8B0000\"",
            "width=\"50\"",
            "height=\"80\"",
            "fill=\"#654321\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#FFFFFF\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "How is the house's body represented and what are its dimensions?": "A centered rectangle, 200 pixels wide and 150 pixels high",
            "What is the fill color of the house's body?": "#D3D3D3",
            "What shape and fill color is used for the roof, and where is it positioned?": "A triangle (polygon) with dark red color (#8B0000), placed immediately above the house's body",
            "What are the dimensions, fill color, and alignment of the door?": "50 pixels wide, 80 pixels high, brown (#654321), centered horizontally and aligned with the bottom of the house's body",
            "How many windows are there and what are their dimensions and styling details?": "Two windows, each 40x40 pixels, filled with white (#FFFFFF) and outlined with a 2-pixel black stroke (#000000)",
            "Where are the windows positioned relative to the door?": "They are symmetrically placed on either side of the door"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001214",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a cartoon-style house on a grassy hill with a shining sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels tall.\n2. The house should be depicted as a rectangle with a width of 150 pixels and a height of 100 pixels, centered horizontally and positioned slightly above the vertical midpoint.\n3. The roof should be an isosceles triangle directly above the house, with a base equal to the house's width and a height of 70 pixels.\n4. The door must be illustrated as a rectangle that is 40 pixels wide and 60 pixels high, centered on the lower part of the house.\n5. Include two square windows, each 30 pixels by 30 pixels, positioned symmetrically on either side of the door.\n6. The hill should be rendered as a large green semi-circle spanning at least 70% of the canvas width, positioned along the bottom edge.\n7. The sun must appear as a circle with a radius of 40 pixels in the top right corner, with several straight lines radiating outward to symbolize sunlight.\n8. Specific colors should be applied: use #FFD700 for the sun, #DC143C for the roof, #8B4513 for the door, and #32CD32 for the hill.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "width=\"150\"",
            "height=\"100\"",
            "polygon",
            "70",
            "width=\"40\"",
            "height=\"60\"",
            "width=\"30\"",
            "height=\"30\"",
            "circle",
            "r=\"40\"",
            "line",
            "#FFD700",
            "#DC143C",
            "#8B4513",
            "#32CD32"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "How is the house depicted in the image?": "As a rectangle 150 pixels wide and 100 pixels high, centered horizontally and positioned slightly above the vertical midpoint",
            "What shape is the roof and what are its dimensions?": "An isosceles triangle with a base of 150 pixels and a height of 70 pixels positioned directly above the house",
            "What is the color of the roof?": "#DC143C",
            "How many windows are displayed on the house and what are their sizes?": "Two square windows, each 30x30 pixels",
            "How is the door represented on the house?": "As a rectangle that is 40 pixels wide and 60 pixels high, centered on the lower part of the house, colored #8B4513",
            "What form does the grassy hill take and what is its color?": "A large green semi-circle spanning at least 70% of the canvas width, along the bottom edge, colored #32CD32",
            "Where is the sun located and what are its defining features?": "In the top right corner as a circle with a radius of 40 pixels with several straight lines radiating outward",
            "What is the designated color for the sun?": "#FFD700"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001215",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a cartoon-style house with a triangular roof, a door, and two square windows.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n2. The house's main body should be represented by a rectangle positioned centrally, with a width of 200 pixels and a height of 150 pixels.\n3. The rectangle representing the house body must be filled with a light yellow color using the hexadecimal code #FFFACD.\n4. A triangular roof should be drawn on top of the house body using a polygon element, with the base of the triangle aligned with the top edge of the rectangle, and the triangle filled with a firebrick red color (#B22222).\n5. The door should be a smaller rectangle centered horizontally on the lower half of the house body, with a width of 50 pixels and a height of 80 pixels, filled with a dark brown color using HEX #8B4513.\n6. Two square windows, each 40 pixels by 40 pixels, must be placed symmetrically on either side of the house, one on the left and one on the right of the door, both filled with a light blue color using hexadecimal #ADD8E6.\n7. All elements must have an outline stroke width of 2 pixels in black (#000000) to clearly define their shapes.\n8. The bottom of the house's main body should align with the bottom edge of the SVG canvas to indicate that the house is standing on the ground.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#FFFACD\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "<polygon",
            "fill=\"#B22222\"",
            "points=",
            "width=\"50\"",
            "height=\"80\"",
            "fill=\"#8B4513\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#ADD8E6\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 300 pixels",
            "What are the dimensions and fill color of the house's main body?": "200 by 150 pixels, filled with light yellow (#FFFACD)",
            "What is the shape and fill color of the roof?": "A triangle filled with firebrick red (#B22222)",
            "What are the dimensions, fill color, and placement of the door?": "50 by 80 pixels, filled with dark brown (#8B4513), centered horizontally on the lower half of the house",
            "How many windows are there and what are their dimensions and fill color?": "Two windows, each 40 by 40 pixels, filled with light blue (#ADD8E6)",
            "What stroke characteristics are applied to all elements?": "A 2 pixel wide black stroke (#000000)",
            "How is the house's main body positioned within the canvas?": "The bottom of the house aligns with the bottom edge of the SVG canvas"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001216",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a playful city skyline at dusk with buildings and a setting sun.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n- The SVG should include a large circle representing the setting sun, positioned near the upper right corner with a radius of 40 pixels and filled with orange (#FFA500).\n- There must be three rectangles representing buildings, each placed along the bottom of the canvas with their bases aligned; the rectangles should have widths of 50, 70, and 60 pixels and heights of 150, 200, and 170 pixels respectively.\n- Each building rectangle must have a unique fill color using varying shades of gray (for example, #A9A9A9, #808080, and #696969) and a black stroke of 1 pixel.\n- The circle representing the sun should have a 3-pixel stroke outlined in red (#FF0000) to enhance its visual prominence.\n- The buildings should be evenly spaced with a gap of 20 pixels between each, ensuring a balanced skyline.\n- A thin horizontal line of 2 pixels in dark blue (#00008B) must be drawn along the horizon directly below the sun to signify the transition to night.\n- All specified elements should be clearly positioned so that they do not overlap and are fully visible within the canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<circle",
            "r=\"40\"",
            "fill=\"#FFA500\"",
            "stroke=\"#FF0000\"",
            "stroke-width=\"3\"",
            "<rect",
            "width=\"50\"",
            "height=\"150\"",
            "fill=\"#A9A9A9\"",
            "stroke=\"black\"",
            "stroke-width=\"1\"",
            "width=\"70\"",
            "height=\"200\"",
            "fill=\"#808080\"",
            "width=\"60\"",
            "height=\"170\"",
            "fill=\"#696969\"",
            "<line",
            "stroke=\"#00008B\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x300 pixels",
            "What color is used to fill the setting sun?": "Orange (#FFA500)",
            "What is the radius of the sun circle?": "40 pixels",
            "How many building rectangles are displayed in the skyline?": "Three",
            "What are the stroke attributes of the sun?": "3-pixel stroke in red (#FF0000)",
            "What unique fill colors are used for the three buildings?": "Shades of gray: #A9A9A9, #808080, and #696969",
            "What stroke width is applied to each building rectangle?": "1 pixel",
            "How far apart are the buildings spaced from each other?": "20 pixels apart",
            "What are the dimensions (widths and heights) of the buildings?": "Widths: 50, 70, 60 pixels; Heights: 150, 200, 170 pixels",
            "What element is drawn along the horizon and what are its properties?": "A thin horizontal line of 2 pixels in dark blue (#00008B)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001217",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a seaside scene featuring a sailboat and ocean waves.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n2. A background rectangle covering the entire canvas should be filled with light sky blue using the hexadecimal code #87CEEB.\n3. The sailboat’s hull should be created using a polygon centered at the bottom of the canvas, filled with blue (#1E90FF) and outlined with a black stroke of 2 pixels.\n4. A triangular sail should be positioned to the left of the hull, filled with white (#FFFFFF) and given a black outline of 2 pixels.\n5. A vertical mast, represented by a line with a stroke width of 4 pixels in black, must connect from the center top of the hull to the tip of the sail.\n6. Two wave patterns must be included as smooth, curved paths near the bottom of the canvas, each drawn with a stroke of 3 pixels in light blue (#ADD8E6) and no fill.\n7. The sails, hull, and mast should be proportionally sized to ensure the sailboat appears well-centered horizontally with its hull’s base flush with the bottom edge.\n8. All elements should be arranged to clearly depict the scene without overlapping unless intentionally layered for visual effect.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"300\"",
            "rect",
            "fill=\"#87CEEB\"",
            "polygon",
            "fill=\"#1E90FF\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "fill=\"#FFFFFF\"",
            "line",
            "stroke-width=\"4\"",
            "path",
            "stroke=\"#ADD8E6\"",
            "stroke-width=\"3\"",
            "fill=\"none\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What is the background color of the canvas and its hexadecimal code?": "Light sky blue with hexadecimal code #87CEEB",
            "How is the sailboat’s hull designed in terms of color and stroke?": "It is a polygon filled with blue (#1E90FF) and outlined with a black stroke of 2 pixels",
            "What are the properties of the sail's design?": "The sail is triangular, filled with white (#FFFFFF), and has a black outline of 2 pixels",
            "How is the mast depicted in the image?": "As a vertical line drawn in black with a stroke width of 4 pixels, connecting the top center of the hull to the tip of the sail",
            "How many wave patterns are included, and what is their styling?": "Two curved paths near the bottom, each with a light blue (#ADD8E6) stroke of 3 pixels and no fill",
            "How is the sailboat positioned relative to the canvas?": "It is centered horizontally with its hull's base flush with the bottom edge"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001218",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quaint house featuring a roof, door, and two windows.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. The house body should be a rectangle with a width of 200 pixels and a height of 150 pixels, centered horizontally and aligned with the bottom of the canvas, filled with light gray using the hexadecimal color #D3D3D3.\n3. The roof must be represented by a triangle (polygon) placed directly above the house body, with vertices aligned so that the base of the triangle matches the top edge of the house rectangle, and the triangle should be filled with maroon (#800000).\n4. Two square windows, each 40 pixels by 40 pixels, should be added to the house body—positioned symmetrically on either side of the center—with a fill color of sky blue (#87CEEB) and outlined with a 2-pixel stroke in dark gray (#A9A9A9).\n5. The door should be centered on the bottom of the house and represented as a rectangle with a width of 50 pixels and a height of 90 pixels, filled with brown (#8B4513).",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#D3D3D3\"",
            "polygon",
            "fill=\"#800000\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#87CEEB\"",
            "stroke=\"#A9A9A9\"",
            "stroke-width=\"2\"",
            "width=\"50\"",
            "height=\"90\"",
            "fill=\"#8B4513\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 x 400 pixels",
            "What are the dimensions and position of the house body?": "200 x 150 pixels, centered horizontally and aligned at the bottom",
            "What is the fill color of the house body?": "#D3D3D3 (light gray)",
            "How is the roof depicted and what is its fill color?": "A triangle (polygon) filled with maroon (#800000)",
            "How many windows are shown on the house and what are their dimensions?": "Two windows, each 40 x 40 pixels",
            "What are the fill and stroke colors of the windows?": "Filled with sky blue (#87CEEB) and outlined with dark gray (#A9A9A9) with a 2-pixel stroke",
            "What are the dimensions and fill color of the door?": "50 x 90 pixels, filled with brown (#8B4513)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001219",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quaint cottage with a rectangular body, triangular roof, door, two windows, and a chimney.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n2. The cottage body should be depicted by a rectangle centered horizontally along the bottom of the canvas, with a width of 200 pixels and a height of 150 pixels, filled with light blue (#ADD8E6).\n3. The roof must be drawn as a triangle (using a polygon element) positioned directly above the cottage body, with a base width of 200 pixels and a height of 80 pixels, filled with red (#FF0000).\n4. The door should be a rectangle centered on the cottage body’s bottom edge, measuring 40 pixels in width and 70 pixels in height, filled with dark brown (#654321) and outlined with a 2-pixel black stroke (#000000).\n5. Two square windows, each 30 pixels by 30 pixels, must be placed symmetrically on either side of the cottage body above the door, filled with white (#FFFFFF) and outlined with a 2-pixel black stroke (#000000).\n6. A chimney should be drawn as a small rectangle on the left side of the roof, with a width of 20 pixels and a height of 40 pixels, filled with gray (#808080).\n7. The roof’s base should align exactly with the top of the cottage body to ensure a seamless connection.\n8. All shapes must be accurately positioned and scaled within the SVG coordinate system according to the specified dimensions.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#ADD8E6\"",
            "polygon",
            "fill=\"#FF0000\"",
            "width=\"40\"",
            "height=\"70\"",
            "fill=\"#654321\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "width=\"30\"",
            "height=\"30\"",
            "fill=\"#FFFFFF\"",
            "width=\"20\"",
            "height=\"40\"",
            "fill=\"#808080\"",
            "</svg>"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide by 300 pixels high",
            "How is the cottage body depicted?": "A rectangle centered horizontally along the bottom, 200 pixels wide and 150 pixels high, filled with light blue (#ADD8E6)",
            "What shape and color is the roof?": "A red triangle (polygon) with a base of 200 pixels and a height of 80 pixels (#FF0000)",
            "How is the door designed on the cottage?": "A rectangle centered on the bottom edge of the cottage body, 40 pixels wide and 70 pixels high, filled with dark brown (#654321) with a 2-pixel black stroke (#000000)",
            "How many windows are there and what are their specifications?": "Two square windows, each 30 pixels by 30 pixels, filled with white (#FFFFFF) and outlined with a 2-pixel black stroke (#000000)",
            "Where is the chimney located and what are its dimensions and color?": "On the left side of the roof, measured 20 pixels wide by 40 pixels high, filled with gray (#808080)",
            "How is the roof positioned relative to the cottage body?": "The roof is positioned directly above the cottage body with its base aligning exactly with the top of the cottage body",
            "Are the components of the cottage symmetrically and accurately placed?": "Yes, all elements are positioned and scaled according to the specified dimensions and layout requirements"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001220",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, two windows, and a door.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 300 pixels.\n2. The house body must be represented by a rectangle centered horizontally, with a width of 200 pixels and a height of 150 pixels.\n3. The house body rectangle should be filled with a light gray color using the hexadecimal code #D3D3D3.\n4. The roof should be depicted as a triangle placed directly on top of the house body, spanning the full width of 200 pixels with a height of 75 pixels.\n5. The roof triangle must be filled with a red color using the hexadecimal code #FF0000.\n6. Two square windows, each 40 pixels on each side, should be positioned symmetrically on the house body, one on the left and one on the right.\n7. The windows must be filled with a sky blue color using the hexadecimal code #87CEEB and have a black stroke outline of 2 pixels.\n8. A door should be drawn as a rectangle centered horizontally at the bottom of the house body, with a width of 50 pixels and a height of 90 pixels.\n9. The door should be filled with a dark brown color using the hexadecimal code #654321, ensuring it is clearly visible within the house body.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#D3D3D3\"",
            "<polygon",
            "fill=\"#FF0000\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#87CEEB\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "width=\"50\"",
            "height=\"90\"",
            "fill=\"#654321\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What are the dimensions of the house body rectangle?": "200 pixels wide and 150 pixels high",
            "What is the fill color of the house body rectangle?": "#D3D3D3",
            "What shape is used for the roof and what is its fill color?": "A triangle filled with #FF0000",
            "What are the dimensions and fill color of each window?": "40 pixels by 40 pixels, filled with #87CEEB with a 2px black stroke",
            "How many windows are displayed on the house body?": "2",
            "What are the dimensions and fill color of the door?": "50 pixels wide and 90 pixels high, filled with #654321",
            "Where is the door positioned on the house body?": "Centered horizontally at the bottom of the house body"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001221",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple abstract cityscape at sunset.\n\nFeature Requirements:\n- The SVG canvas should have a width of 400 pixels and a height of 300 pixels.\n- The background must be filled with a linear gradient that transitions from orange (#FFA500) at the top to purple (#800080) at the bottom.\n- Include three rectangle elements to represent buildings; their widths should be 50 pixels, 70 pixels, and 60 pixels respectively.\n- The bottom edges of these buildings should align with the bottom of the canvas, and they should be positioned at various horizontal locations within the lower half of the canvas.\n- Each building must be filled with a distinct shade of gray using the hexadecimal codes #A9A9A9, #808080, and #696969.\n- Add a circle element representing the sun in the upper left quadrant with a radius of 30 pixels, filled with yellow (#FFFF00).\n- The sun element must have a stroke outline that is 3 pixels thick using red (#FF0000).\n- Insert five small circle elements as stars scattered in the upper half of the canvas; each star should have a radius of 5 pixels and be filled with white (#FFFFFF).",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<linearGradient",
            "stop-color=\"#FFA500\"",
            "stop-color=\"#800080\"",
            "<rect",
            "width=\"50\"",
            "width=\"70\"",
            "width=\"60\"",
            "fill=\"#A9A9A9\"",
            "fill=\"#808080\"",
            "fill=\"#696969\"",
            "<circle",
            "r=\"30\"",
            "fill=\"#FFFF00\"",
            "stroke=\"#FF0000\"",
            "stroke-width=\"3\"",
            "r=\"5\"",
            "fill=\"#FFFFFF\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What is the background gradient transition from and to?": "It transitions from orange (#FFA500) at the top to purple (#800080) at the bottom",
            "How many building rectangles are included and what are their widths?": "There are three buildings with widths of 50, 70, and 60 pixels respectively",
            "What are the fill colors used for the three buildings?": "The buildings are filled with #A9A9A9, #808080, and #696969",
            "How are the building rectangles positioned relative to the canvas?": "Their bottom edges align with the canvas bottom and they are placed in the lower half of the canvas",
            "What are the attributes of the sun element?": "It is a circle with a radius of 30 pixels, filled with yellow (#FFFF00), and outlined with a 3-pixel red (#FF0000) stroke",
            "How many stars are included, and what are their common properties?": "There are five stars; each is a circle with a radius of 5 pixels and filled with white (#FFFFFF)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001222",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a house with a chimney, window, door, and sun in the background.\n\nFeature Requirements:\n1. The SVG should display a rectangle for the main body of the house, centered horizontally at the bottom half of the canvas with a width of 200 pixels and a height of 150 pixels.\n2. The house body must be filled with light grey (#D3D3D3) and have a dark grey outline (#A9A9A9) with a stroke width of 3 pixels.\n3. A triangle representing the roof should be placed directly above the house body, centered, with a base width of 220 pixels and a height of 100 pixels, filled with maroon (#800000).\n4. The house should include a rectangular door centered on its bottom edge, measuring 50 pixels in width and 80 pixels in height, with a fill color of dark brown (#654321) and a small circular knob positioned near the right side of the door.\n5. A square window should be placed on the left side of the house, sized at 40 by 40 pixels, filled with sky blue (#87CEEB) and outlined in black (#000000) with a stroke width of 2 pixels.\n6. Include a circle in the top right corner of the SVG to represent the sun, with a radius of 30 pixels, filled with yellow (#FFD700) and outlined in orange (#FFA500) with a stroke width of 2 pixels.\n7. The entire SVG canvas should have a width of 400 pixels and a height of 300 pixels to ensure proper centering and alignment.\n8. The bottom edge of the house should align with the bottom of the SVG canvas, making it appear grounded.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "stroke=\"#A9A9A9\"",
            "stroke-width=\"3\"",
            "width=\"200\"",
            "height=\"150\"",
            "<polygon",
            "fill=\"#800000\"",
            "width=\"220\"",
            "height=\"100\"",
            "<rect",
            "fill=\"#654321\"",
            "width=\"50\"",
            "height=\"80\"",
            "<circle",
            "<rect",
            "fill=\"#87CEEB\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "width=\"40\"",
            "height=\"40\"",
            "<circle",
            "r=\"30\"",
            "fill=\"#FFD700\"",
            "stroke=\"#FFA500\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x300 pixels",
            "What are the dimensions and colors of the main house body?": "200x150 pixels, light grey (#D3D3D3) fill with dark grey (#A9A9A9) outline (3px stroke)",
            "What are the base width and height of the triangular roof?": "220 pixels base, 100 pixels height",
            "What is the fill color of the roof?": "Maroon (#800000)",
            "What are the dimensions and fill color of the door?": "50x80 pixels, dark brown (#654321)",
            "Where is the door located on the house?": "Centered on the bottom edge of the house",
            "What are the dimensions and style of the window?": "40x40 pixels, filled with sky blue (#87CEEB) and outlined in black (#000000) with a 2px stroke",
            "Where is the window positioned?": "On the left side of the house",
            "What are the properties of the sun?": "A circle with a 30 pixel radius, filled with yellow (#FFD700) and outlined in orange (#FFA500) with a 2px stroke, positioned in the top right corner"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001223",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a colorful hot air balloon with a payload basket beneath it.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 500 pixels.\n2. The hot air balloon should be created using an ellipse element, centered horizontally in the upper half of the canvas, with a horizontal radius of 100 pixels and a vertical radius of 125 pixels.\n3. The ellipse representing the balloon must be filled with a linear gradient transitioning from red (#FF0000) at the top to orange (#FFA500) at the bottom.\n4. The payload basket should be depicted as a rectangle element 80 pixels wide and 60 pixels tall, positioned directly below the balloon and centered horizontally.\n5. The basket must be filled with dark brown (#654321) and have a 3-pixel stroke outline in black (#000000).\n6. Two line elements should connect the bottom corners of the ellipse to the top corners of the rectangle to represent the suspension ropes, and each line should have a stroke width of 2 pixels in black (#000000).\n7. A small sun should be included in the design, depicted by a circle with a radius of 30 pixels and filled with yellow (#FFFF00), with a 1-pixel stroke in orange (#FFA500), placed in the top left corner of the canvas.\n8. All elements should be horizontally centered within their respective zones to maintain balanced spacing in the overall layout.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"500\"",
            "ellipse",
            "rx=\"100\"",
            "ry=\"125\"",
            "linearGradient",
            "#FF0000",
            "#FFA500",
            "rect",
            "width=\"80\"",
            "height=\"60\"",
            "#654321",
            "stroke-width=\"3\"",
            "#000000",
            "line",
            "stroke-width=\"2\"",
            "circle",
            "r=\"30\"",
            "#FFFF00",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 500 pixels tall",
            "What shape represents the hot air balloon and what are its dimensions?": "An ellipse with a horizontal radius of 100 pixels and a vertical radius of 125 pixels, centered in the upper half of the canvas",
            "How is the hot air balloon filled?": "With a linear gradient that goes from red (#FF0000) at the top to orange (#FFA500) at the bottom",
            "What are the dimensions and styling details of the payload basket?": "A rectangle 80 pixels wide and 60 pixels tall, filled dark brown (#654321) with a 3-pixel black (#000000) stroke",
            "How are the hot air balloon and payload basket connected?": "They are connected by two black lines (each with a stroke width of 2 pixels) linking the bottom corners of the ellipse to the top corners of the rectangle",
            "Where is the sun located and how is it styled?": "The sun is in the top left corner, depicted as a circle with a 30-pixel radius, filled yellow (#FFFF00) and outlined with a 1-pixel orange (#FFA500) stroke",
            "Are the elements in the design horizontally centered?": "Yes, all elements are horizontally centered within their respective zones"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001224",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a small house with a roof, door, and a circular window.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. A rectangle representing the house body should be centered horizontally, measure 200 pixels in width and 150 pixels in height, and be positioned near the bottom of the canvas.\n3. The house rectangle must be filled with light blue (#ADD8E6) and have a black stroke outline of 2 pixels.\n4. An isosceles triangle representing the roof should be drawn on top of the house body, with its base perfectly aligned with the top edge of the rectangle, filled with red (#FF0000) and outlined in black with a 2-pixel stroke.\n5. A centered door must be added to the house body, measuring 50 pixels in width and 80 pixels in height, and positioned at the bottom center of the rectangle, filled with dark brown (#654321) and outlined with a 2-pixel black stroke.\n6. A circular window should be placed on the left side of the house body with a radius of 20 pixels, positioned at one-third of the house's height from the top, filled with white (#FFFFFF), and outlined with a 2-pixel black stroke.\n7. A circular door knob should appear on the right side of the door with a radius of 5 pixels, filled with yellow (#FFFF00) and centered vertically on the door.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#ADD8E6\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "<polygon",
            "fill=\"#FF0000\"",
            "<rect",
            "fill=\"#654321\"",
            "width=\"50\"",
            "height=\"80\"",
            "<circle",
            "r=\"20\"",
            "fill=\"#FFFFFF\"",
            "<circle",
            "r=\"5\"",
            "fill=\"#FFFF00\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What are the dimensions and position of the house rectangle?": "200x150 pixels, centered horizontally near the bottom",
            "What is the fill color and stroke style of the house body?": "Light blue (#ADD8E6) with a 2-pixel black stroke",
            "What shape is used for the roof and how is it styled?": "An isosceles triangle filled with red (#FF0000) and outlined with a 2-pixel black stroke",
            "What are the dimensions and position of the door on the house?": "50x80 pixels, centered at the bottom of the house rectangle",
            "What color and stroke style is applied to the door?": "Dark brown (#654321) with a 2-pixel black stroke",
            "Where is the circular window positioned, and what are its size and style?": "On the left side of the house body at one-third of its height, with a radius of 20 pixels, filled white (#FFFFFF) and a 2-pixel black stroke",
            "What are the characteristics of the door knob?": "A circle with a radius of 5 pixels, filled with yellow (#FFFF00), located on the right side of the door and centered vertically"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001225",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, windows, a door, and a shining sun in the sky.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 400 pixels.\n- The house body should be represented by a rectangle centered horizontally at the bottom of the canvas, with a width of 200 pixels, a height of 150 pixels, and filled with the color #B22222.\n- The house roof must be a triangle created using a polygon, positioned directly above the house body with its base aligned to the top edge of the house, and colored with #8B0000.\n- A door should be placed in the center of the house body, represented by a rectangle of 50 pixels width and 80 pixels height, and filled with the color #654321.\n- Two windows must be added on either side of the door, each represented by a square measuring 40 pixels by 40 pixels, positioned 20 pixels from the inner edge of the house, and filled with the color #ADD8E6.\n- The sun should be drawn as a circle with a 40-pixel radius, filled with the color #FFD700, and positioned in the upper right corner of the canvas such that its center is 60 pixels from the top edge and 60 pixels from the right edge.\n- All elements should be explicitly aligned to ensure the house appears grounded and the sun is clearly separated from the main structure.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#B22222\"",
            "<polygon",
            "fill=\"#8B0000\"",
            "width=\"50\"",
            "height=\"80\"",
            "fill=\"#654321\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#ADD8E6\"",
            "<circle",
            "r=\"40\"",
            "fill=\"#FFD700\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "What are the dimensions and fill color of the house body?": "200 pixels by 150 pixels, filled with #B22222",
            "What shape is used for the house roof and what color is it?": "A triangle (polygon), filled with #8B0000",
            "What are the dimensions and fill color of the door?": "50 pixels by 80 pixels, filled with #654321",
            "How many windows are featured on the house and what are their dimensions?": "Two windows, each 40 pixels by 40 pixels",
            "What fill color is used for the windows?": "#ADD8E6",
            "What shape, size, and fill color is used for the sun?": "A circle with a 40-pixel radius, filled with #FFD700",
            "Where is the sun positioned on the canvas?": "In the upper right corner, with its center 60 pixels from the top and 60 pixels from the right edge"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001226",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a small house featuring a roof, a door, and two windows.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. The main body of the house should be a square placed in the center of the canvas with a width and height of 200 pixels.\n3. The house's square must be filled with a light blue color using the hexadecimal code #ADD8E6 and its bottom should align with the bottom of the SVG canvas.\n4. A triangle should be added on top of the square to represent the roof, with its base equal to 200 pixels wide and a height of 100 pixels.\n5. The roof triangle must be centered horizontally on the square and filled with dark red using the hexadecimal code #8B0000.\n6. A rectangle representing the door should be centered horizontally on the lower part of the house, measuring 50 pixels wide and 90 pixels tall, with its bottom edge aligning with the house's square bottom.\n7. The door should be filled with brown using the hexadecimal code #8B4513.\n8. Two square windows, each measuring 40 pixels by 40 pixels, must be placed symmetrically on either side of the door.\n9. The windows should be filled with yellow using the hexadecimal code #FFFF00 and outlined with a black stroke of 2 pixels.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "200",
            "100",
            "50",
            "90",
            "40",
            "#ADD8E6",
            "#8B0000",
            "#8B4513",
            "#FFFF00",
            "<rect",
            "<polygon",
            "stroke=\"black\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 400 pixels",
            "What is the fill color and size of the main house body?": "Light blue (#ADD8E6), 200 by 200 pixels",
            "How is the house's square positioned in relation to the canvas?": "Centered horizontally with its bottom aligned with the bottom of the canvas",
            "What shape, dimensions, and fill color represent the roof?": "A triangle, 200 pixels wide with a height of 100 pixels, filled with dark red (#8B0000)",
            "What are the dimensions and fill color of the door?": "50 by 90 pixels, filled with brown (#8B4513)",
            "How is the door positioned relative to the house's body?": "Centered horizontally on the lower part, with its bottom edge aligned with the bottom of the house",
            "How many windows are there and what are their dimensions?": "Two, each 40 by 40 pixels",
            "What are the fill and outline properties of the windows?": "Filled with yellow (#FFFF00) and outlined with a 2-pixel black stroke"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001227",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quaint house with a roof, windows, and a door.\n\nFeature Requirements:\n1. The SVG should include a central rectangle representing the house’s body, measuring 200 pixels in width and 150 pixels in height, and filled with pastel blue (#ADD8E6).\n2. The house rectangle must be centered horizontally on a canvas that measures 400 pixels in both width and height.\n3. A triangle representing the roof should be placed directly on top of the house’s body, with its base matching the width of the rectangle (200 pixels) and a height of 80 pixels, filled with dark red (#8B0000).\n4. The SVG should feature two square windows on the house’s body, each measuring 40 pixels in width and height, positioned symmetrically on either side of the house’s center.\n5. Both windows must be filled with light yellow (#FFFFE0) and outlined with a 2-pixel black stroke.\n6. A rectangular door should be centered horizontally at the bottom of the house’s body, measuring 40 pixels in width and 70 pixels in height, filled with dark gray (#A9A9A9).\n7. A small circle representing a doorknob should be placed on the right side of the door, with a radius of 5 pixels and filled with gold (#FFD700).\n8. All elements must be precisely positioned to ensure the house appears centered and grounded within the SVG canvas.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#ADD8E6\"",
            "polygon",
            "points=",
            "fill=\"#8B0000\"",
            "width=\"40\"",
            "height=\"40\"",
            "fill=\"#FFFFE0\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "height=\"70\"",
            "fill=\"#A9A9A9\"",
            "circle",
            "r=\"5\"",
            "fill=\"#FFD700\""
        ],
        "VQA": {
            "What are the dimensions of the house's body rectangle?": "200 pixels wide and 150 pixels high",
            "What color is used to fill the house's body?": "Pastel blue (#ADD8E6)",
            "How is the roof represented and what are its dimensions?": "A triangle with a 200-pixel base and 80-pixel height",
            "What color is the roof filled with?": "Dark red (#8B0000)",
            "How many windows are visible on the house's body and what are their sizes?": "Two windows, each 40x40 pixels",
            "What fill and outline colors are used for the windows?": "Light yellow (#FFFFE0) fill with a 2-pixel black stroke",
            "Where is the door placed on the house's body?": "Centered horizontally at the bottom of the house",
            "What are the dimensions of the door?": "40 pixels wide and 70 pixels high",
            "What color is the door filled with?": "Dark gray (#A9A9A9)",
            "How is the doorknob represented and what are its properties?": "A small circle on the right side of the door with a radius of 5 pixels, filled with gold (#FFD700)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001228",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quirky robot character composed of a head, body, arms, and legs.\n\nFeature Requirements:\n- The SVG canvas must be 300 pixels wide and 300 pixels high.\n- A square element representing the robot’s body should be 100x100 pixels and positioned at the center of the canvas.\n- The body must be filled with light gray (#C0C0C0) and outlined with a 3-pixel stroke in dark gray (#808080).\n- A circle representing the robot’s head with a radius of 50 pixels should be placed directly above the body, with its bottom edge touching the top of the body.\n- The head should feature a vibrant blue fill (#1E90FF) and have a 2-pixel black stroke (#000000).\n- Two small circles for the eyes, each with a radius of 10 pixels, must be placed symmetrically on the head, horizontally separated by 20 pixels from the center.\n- Two rectangles acting as arms, each 15 pixels wide and 60 pixels high, should extend from the midpoint on each side of the body with slightly rounded corners.\n- A pair of rectangles representing the legs, each 30 pixels wide and 80 pixels high, should be positioned beneath the body, side by side and centered horizontally.",
        "raw_output_metric": [
            "<svg",
            "300",
            "<rect",
            "100",
            "#C0C0C0",
            "3",
            "#808080",
            "<circle",
            "50",
            "#1E90FF",
            "2",
            "#000000",
            "10",
            "20",
            "15",
            "60",
            "30",
            "80"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "300x300 pixels",
            "What are the dimensions and position of the robot's body square?": "100x100 pixels, centered in the canvas",
            "What fill and stroke colors are used for the body square?": "Light gray (#C0C0C0) fill with a 3-pixel dark gray (#808080) stroke",
            "What shape represents the robot's head and what is its size?": "A circle with a radius of 50 pixels placed above the body with its bottom edge touching the body",
            "What colors and stroke properties does the head have?": "Vibrant blue (#1E90FF) fill with a 2-pixel black stroke",
            "How many eyes does the head have and what are their dimensions?": "Two eyes, each a circle with a radius of 10 pixels",
            "How are the robot's eyes positioned on the head?": "They are placed symmetrically, each 20 pixels horizontally from the center",
            "What are the dimensions of each arm, and where are they located relative to the body?": "Each arm is 15x60 pixels, extending from the midpoint on each side of the body with slightly rounded corners",
            "How many legs does the robot have and what are their dimensions?": "Two legs, each 30x80 pixels, positioned beneath the body and centered horizontally"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001229",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image depicting a serene lakeside scene with a small boat and a rising sun.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n- The background should consist of two horizontal sections: the lower half representing the lake with a blue (#1E90FF) rectangle and the upper half showcasing the sky with a light blue (#87CEEB) rectangle.\n- A circular sun with a radius of 30 pixels should be positioned in the top right corner, filled with yellow (#FFD700) and outlined with a 2-pixel stroke in orange (#FF8C00).\n- A simple boat should be drawn near the center of the lake using a combination of a polygon for the sail in white (#FFFFFF) and a rectangle for the hull in brown (#8B4513).\n- The boat's hull must be placed so that its bottom edge is aligned with the lake's top boundary, giving the impression that it is floating.\n- Two small ovals representing ripples should be positioned underneath the boat in a slightly darker blue shade (#104E8B) to simulate water movement.\n- A thin horizontal line with a color of dark blue (#00008B) should separate the lake from the sky, ensuring clear distinction between the two sections.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"300\"",
            "rect",
            "#1E90FF",
            "#87CEEB",
            "circle",
            "r=\"30\"",
            "#FFD700",
            "stroke=\"#FF8C00\"",
            "stroke-width=\"2\"",
            "polygon",
            "#FFFFFF",
            "#8B4513",
            "ellipse",
            "#104E8B",
            "line",
            "#00008B"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 300 pixels",
            "How is the background divided and what are the associated colors?": "The lower half is a blue lake (#1E90FF) and the upper half is a light blue sky (#87CEEB)",
            "How is the sun depicted in the image?": "A circular sun with a radius of 30 pixels, filled with yellow (#FFD700) and outlined with a 2-pixel stroke in orange (#FF8C00), positioned in the top right corner",
            "What shapes and colors are used to represent the boat?": "A white polygon for the sail (#FFFFFF) and a brown rectangle for the hull (#8B4513)",
            "How is the boat positioned in relation to the lake?": "The boat's hull is aligned so that its bottom edge touches the lake's top boundary",
            "What elements indicate water movement and how are they styled?": "Two small ovals representing ripples in a slightly darker blue (#104E8B)",
            "What element separates the lake from the sky and what is its color?": "A thin horizontal line in dark blue (#00008B)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001230",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a garden scene featuring a circular fountain, a park bench, and twin trees.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels high.\n2. The fountain should be represented by a circle with a radius of 50 pixels, centered horizontally at 150 pixels from the top, and filled with light blue (#ADD8E6) with a 2-pixel dark blue (#00008B) stroke.\n3. The park bench should be depicted by a rectangle measuring 120 pixels in width and 40 pixels in height, positioned to the right of the fountain with its top aligned at 220 pixels, and filled with saddle brown (#8B4513).\n4. The bench must include a horizontal line at its top edge to indicate a backrest, drawn with a 3-pixel black (#000000) stroke.\n5. Two trees should appear on either side of the fountain, each with a trunk drawn as a rectangle of 20 pixels in width and 80 pixels in height; the left tree’s trunk should be at 50 pixels from the left edge and the right tree’s trunk at 350 pixels minus 20 pixels in width.\n6. Each tree should have three circles representing foliage, each with a radius of 30 pixels, placed directly above the trunk, evenly spaced horizontally, filled with forest green (#228B22) and outlined with a 1-pixel black stroke.\n7. The entire scene should be arranged so that no elements overlap improperly, maintaining clear separations between the fountain, bench, and trees.\n8. The background of the SVG canvas must be filled with light grey (#D3D3D3) covering the entire area.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "fill=\"#D3D3D3\"",
            "<circle",
            "r=\"50\"",
            "cx=\"200\"",
            "cy=\"150\"",
            "fill=\"#ADD8E6\"",
            "stroke=\"#00008B\"",
            "stroke-width=\"2\"",
            "<rect",
            "width=\"120\"",
            "height=\"40\"",
            "fill=\"#8B4513\"",
            "<line",
            "stroke=\"#000000\"",
            "stroke-width=\"3\"",
            "width=\"20\"",
            "height=\"80\"",
            "x=\"50\"",
            "x=\"330\"",
            "r=\"30\"",
            "fill=\"#228B22\"",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What is the background color of the scene?": "Light grey (#D3D3D3)",
            "What are the radius, fill color, and stroke details of the fountain circle?": "Radius 50 pixels, filled with light blue (#ADD8E6), with a 2-pixel dark blue (#00008B) stroke",
            "Where is the fountain located on the canvas?": "Centered horizontally with its center at 150 pixels from the top (i.e. approximately at (200,150))",
            "What are the dimensions, fill color, and placement details of the park bench?": "120x40 pixels, filled with saddle brown (#8B4513), positioned to the right of the fountain with its top edge at 220 pixels",
            "What additional drawing detail indicates the bench’s backrest?": "A horizontal line drawn at the bench's top edge with a 3-pixel black (#000000) stroke",
            "What are the dimensions and positions of the tree trunks?": "Each trunk is a 20x80 pixel rectangle; the left trunk is 50 pixels from the left edge, and the right trunk is positioned at 330 pixels (350 minus the trunk width)",
            "How is each tree’s foliage depicted?": "Each tree has three evenly spaced circles (radius 30 pixels each) above the trunk, filled with forest green (#228B22) and outlined with a 1-pixel black stroke"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001231",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a minimalist house with a sloped roof, central door, two side windows, and a decorative chimney.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 300 pixels.\n2. The house's main body must be a rectangle centered horizontally in the lower half of the canvas, with a width of 200 pixels and a height of 150 pixels.\n3. The house's rectangle should be filled with light grey (#D3D3D3) and outlined with a dark grey stroke of 3 pixels.\n4. The roof should be an upward-pointing triangle placed directly above the house's main body, spanning the full width of the house and having a height of 75 pixels, filled with dark red (#8B0000).\n5. The door must be a rectangle centered on the house's main body, measuring 50 pixels in width and 90 pixels in height, filled with brown (#8B4513) and aligned so its bottom meets the bottom of the house's rectangle.\n6. Two square windows, each 40 pixels by 40 pixels, should be placed—one to the left and one to the right of the door—with a fill of sky blue (#87CEEB) and outlined with a black stroke of 2 pixels.\n7. A chimney should be included as a small rectangle on the right side of the roof, with dimensions of 20 pixels in width and 40 pixels in height, filled with red (#B22222) and outlined with a black stroke of 1 pixel.\n8. All elements must be proportionately sized and clearly aligned within the SVG canvas to create a harmonious layout.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "200",
            "150",
            "#D3D3D3",
            "stroke",
            "stroke-width=\"3\"",
            "<polygon",
            "75",
            "#8B0000",
            "50",
            "90",
            "#8B4513",
            "40",
            "#87CEEB",
            "stroke-width=\"2\"",
            "20",
            "40",
            "#B22222",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What are the dimensions, fill color, and stroke properties of the house's main body?": "200x150 pixels rectangle filled with light grey (#D3D3D3) and outlined with a 3px dark grey stroke",
            "How is the roof constructed and styled above the house?": "An upward-pointing triangle spanning the full width of the house (200 pixels) with a height of 75 pixels, filled with dark red (#8B0000)",
            "What are the size, color, and alignment details of the door?": "A 50x90 pixels rectangle filled with brown (#8B4513), centered on the house's main body with its bottom aligned with the house's bottom",
            "How many windows are there and what are their design details?": "Two square windows, each 40x40 pixels, filled with sky blue (#87CEEB) and outlined with a 2px black stroke, placed one to the left and one to the right of the door",
            "What are the dimensions and styling of the chimney?": "A 20x40 pixels rectangle on the right side of the roof, filled with red (#B22222) and outlined with a 1px black stroke",
            "How are all the elements arranged in the layout?": "They are proportionately sized and clearly aligned within the SVG canvas, with the house centered horizontally in the lower half and the roof, door, windows, and chimney correctly positioned relative to the house"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001232",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a small house with a sun and a tree in a scenic daytime setting.\n\nFeature Requirements:\n- The SVG canvas must be 400 pixels wide and 300 pixels high.\n- Include a rectangle element for the house body, centered horizontally and positioned towards the lower half, with a width of 150 pixels, a height of 100 pixels, and filled with the color #FFD700.\n- Add a triangle element on top of the house body to represent the roof, with its base matching the top edge of the house rectangle, a height of 60 pixels, and filled with the color #A52A2A.\n- Place a rectangular door centered on the house body, with a width of 40 pixels, a height of 60 pixels, starting at the bottom of the house rectangle, and filled with the color #654321.\n- Include a circle element to depict the sun, positioned in the top right corner with a radius of 30 pixels, and filled with the color #FFA500.\n- Create a circle element for the tree canopy to the left of the house, with a radius of 40 pixels, and filled with the color #228B22; its center should be positioned 50 pixels to the left of the house.\n- Add a rectangle element for the tree trunk positioned directly below the canopy, with a width of 20 pixels, a height of 50 pixels, and filled with the color #8B4513, ensuring its base aligns with the bottom of the SVG canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "fill=\"#FFD700\"",
            "150",
            "100",
            "60",
            "<polygon",
            "fill=\"#A52A2A\"",
            "40",
            "<rect",
            "fill=\"#654321\"",
            "<circle",
            "fill=\"#FFA500\"",
            "30",
            "<circle",
            "fill=\"#228B22\"",
            "50",
            "<rect",
            "fill=\"#8B4513\"",
            "20",
            "50"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels high",
            "What is the fill color of the house body rectangle?": "#FFD700",
            "What are the dimensions of the house body rectangle?": "150 pixels wide and 100 pixels high",
            "What shape is used for the roof and what is its fill color?": "A triangle with a base matching the house (150 pixels wide) and a height of 60 pixels, filled with #A52A2A",
            "What are the dimensions and fill color of the door on the house?": "40 pixels wide, 60 pixels high, and filled with #654321",
            "Where is the sun positioned and what are its features?": "In the top right corner of the canvas with a radius of 30 pixels, filled with #FFA500",
            "What are the properties of the tree canopy?": "A circle with a radius of 40 pixels, filled with #228B22, positioned 50 pixels to the left of the house",
            "What are the dimensions, fill color, and positioning details of the tree trunk?": "A rectangle 20 pixels wide and 50 pixels high, filled with #8B4513, positioned directly below the canopy with its base aligned to the bottom of the SVG canvas"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001233",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a charming house set in a daytime landscape with a prominent sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. Draw the main body of the house as a rectangle centered horizontally at the bottom of the canvas, with a width of 200 pixels, a height of 150 pixels, and a fill color of light gray (#D3D3D3).\n3. Create the roof using a polygon element with three points forming a triangle, positioned directly above the house, and filled with dark red (#8B0000).\n4. Add two square windows on the left and right sides of the house’s center, each measuring 30 pixels by 30 pixels, with a fill color of light blue (#ADD8E6) and a 2-pixel black stroke.\n5. Incorporate a door as a rectangle at the center of the house’s front, with dimensions of 50 pixels in width and 80 pixels in height, filled with a dark brown color (#654321) and aligned horizontally.\n6. Place a sun in the top right corner as a circle with a 40-pixel radius, filled with yellow (#FFD700).\n7. Draw eight evenly spaced rays radiating from the sun’s circumference, each as a straight line extending 30 pixels outward, colored orange (#FFA500) with a stroke width of 3 pixels.\n8. Set the background color of the entire SVG canvas to sky blue (#87CEEB).",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "fill=\"#87CEEB\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "width=\"200\"",
            "height=\"150\"",
            "<polygon",
            "fill=\"#8B0000\"",
            "points",
            "fill=\"#ADD8E6\"",
            "width=\"30\"",
            "height=\"30\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "fill=\"#654321\"",
            "width=\"50\"",
            "height=\"80\"",
            "<circle",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "<line",
            "stroke=\"#FFA500\"",
            "stroke-width=\"3\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 400 pixels",
            "How is the main body of the house represented?": "A rectangle centered at the bottom with a width of 200 pixels, a height of 150 pixels, and a fill color of light gray (#D3D3D3)",
            "What shape and color is used to depict the roof?": "A triangle drawn with a polygon, filled with dark red (#8B0000) and positioned directly above the house",
            "What are the details provided for the windows?": "Two square windows, each 30x30 pixels, filled with light blue (#ADD8E6) and outlined by a 2-pixel black stroke, placed on the left and right sides of the house’s center",
            "How is the door described in the scene?": "A rectangle at the center of the house’s front with dimensions of 50x80 pixels, filled with dark brown (#654321)",
            "How is the sun represented in the image?": "A circle in the top right corner with a 40-pixel radius, filled with yellow (#FFD700)",
            "What are the characteristics of the sun's rays?": "Eight evenly spaced rays, each drawn as a straight line extending 30 pixels outward from the sun’s circumference, colored orange (#FFA500) with a stroke width of 3 pixels"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001234",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a small house with a roof, door, and two windows.\n\nFeature Requirements:\n1. The SVG canvas should be 400 pixels wide and 400 pixels high.\n2. The main body of the house must be represented by a rectangle that is centered horizontally, occupying 60% of the canvas width and 50% of the canvas height, and positioned so that its top edge starts at 200 pixels from the top.\n3. The house rectangle should be filled with a light gray color (#D3D3D3) and have a solid black stroke of 3 pixels.\n4. The roof must be depicted as an isosceles triangle placed directly above the house rectangle, with its base matching the top width of the rectangle and filled with red (#FF0000) with a black stroke of 2 pixels.\n5. A door should be centered on the house rectangle, drawn as a smaller rectangle that occupies 20% of the house's width and 40% of the house's height, filled with brown (#A52A2A) and outlined with a 2-pixel stroke in dark brown (#8B0000).\n6. Two square windows must be symmetrically positioned on either side of the door; each window’s side length should be 15% of the house's width, filled with light blue (#ADD8E6), and each should have a 2-pixel black stroke.\n7. All elements (house body, roof, door, and windows) should be precisely aligned based on the given pixel measurements to ensure a balanced and centered composition.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "stroke=\"black\"",
            "stroke-width=\"3\"",
            "<polygon",
            "fill=\"#FF0000\"",
            "stroke-width=\"2\"",
            "fill=\"#A52A2A\"",
            "stroke=\"#8B0000\"",
            "fill=\"#ADD8E6\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide by 400 pixels high",
            "How is the main body of the house depicted?": "A light gray rectangle (#D3D3D3) with a 3-pixel black stroke, centered horizontally, occupying 60% of the canvas width and 50% of the canvas height, starting 200 pixels from the top",
            "How is the roof shown in the image?": "As an isosceles triangle placed directly above the house rectangle with its base matching the top width of the rectangle",
            "What are the fill color and stroke details of the roof?": "Filled with red (#FF0000) and outlined with a 2-pixel black stroke",
            "How is the door represented on the house?": "As a brown rectangle (#A52A2A) centered on the house, occupying 20% of the house's width and 40% of its height, with a 2-pixel dark brown stroke (#8B0000)",
            "How are the windows designed?": "As two square windows, each with a side length of 15% of the house's width, filled with light blue (#ADD8E6) and a 2-pixel black stroke",
            "Where are the windows located relative to the door?": "Symmetrically positioned on either side of the door"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001235",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a lively beach scene featuring a palm tree and a rising sun.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 500 pixels and a height of 400 pixels.\n2. The background should include a rectangle covering the entire canvas filled with light blue (#87CEEB) to represent the sky.\n3. A yellow circle representing the sun must be placed in the top right corner with a radius of 40 pixels and filled with #FFD700.\n4. The palm tree trunk should be a vertical rectangle, 30 pixels wide and 120 pixels tall, positioned on the left side of the canvas, aligned such that its bottom meets the top of the beach area, and filled with brown (#8B4513).\n5. The palm tree canopy must consist of five overlapping green circles, each with a radius of 30 pixels, arranged in a semi-circular pattern above the trunk, filled with #228B22 and outlined by a 2-pixel black stroke (#000000).\n6. The beach area should be depicted with a rectangle at the bottom of the canvas, occupying the lower 100 pixels in height, filled with a sandy color (#FFF5BA).\n7. The sun, palm tree trunk, and canopy must be proportionally arranged to maintain visual balance within the scene.\n8. All elements should be precisely positioned to ensure clear separations between the sky, palm tree, and beach areas.",
        "raw_output_metric": [
            "<svg",
            "width=\"500\"",
            "height=\"400\"",
            "<rect",
            "fill=\"#87CEEB\"",
            "<circle",
            "fill=\"#FFD700\"",
            "r=\"40\"",
            "fill=\"#8B4513\"",
            "width=\"30\"",
            "height=\"120\"",
            "fill=\"#228B22\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "fill=\"#FFF5BA\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "500 pixels wide and 400 pixels tall",
            "What color fills the background to represent the sky?": "Light blue (#87CEEB)",
            "What shape is used to depict the sun and what are its properties?": "A yellow circle in the top right corner with a radius of 40 pixels filled with #FFD700",
            "Where is the palm tree trunk located and what are its dimensions and color?": "On the left side, as a vertical rectangle 30 pixels wide and 120 pixels tall filled with brown (#8B4513)",
            "How is the palm tree canopy constructed?": "It consists of five overlapping green circles arranged in a semi-circular pattern, each with a radius of 30 pixels, filled with #228B22 and outlined with a 2-pixel black stroke (#000000)",
            "How is the beach area depicted in the scene?": "As a rectangle at the bottom of the canvas occupying the lower 100 pixels in height, filled with sandy color (#FFF5BA)",
            "How is the palm tree trunk positioned in relation to the beach area?": "Its bottom aligns with the top of the beach area",
            "Do the elements have clear separations in the layout?": "Yes, the sky, palm tree, and beach areas are clearly separated by their respective shapes and positions"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001236",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a stylized rocket blasting off.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels high.\n2. The rocket’s main body should be represented by a vertical ellipse centered horizontally, with a width of 80 pixels and a height of 200 pixels, and filled with the color #1E90FF.\n3. A triangle should be added on the top of the ellipse to serve as the rocket’s nose cone, with its base matching the width of the ellipse and filled with the color #FF4500.\n4. Two symmetrical polygons must be placed at the bottom of the body to represent the rocket’s fins, each shaped like a trapezoid, 40 pixels wide and 60 pixels high, and filled with the color #32CD32.\n5. A small circle with a radius of 15 pixels must be centered on the ellipse to depict the cockpit window, filled with #FFFFFF and outlined with a 2-pixel stroke in #000000.\n6. Below the rocket, a series of three irregular polygons should simulate flame trails, each polygon having different shapes but all starting from the lower center of the rocket, filled with a gradient transitioning from yellow (#FFFF00) near the rocket to red (#FF0000) at the tips.\n7. The entire composition should be aligned such that the bottom of the rocket’s fins touches the bottom of the SVG canvas, giving the appearance that the rocket is launching from that base.\n8. The SVG elements must be organized in a logical layer order so that the flame trails appear behind the rocket body and its features.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<ellipse",
            "fill=\"#1E90FF\"",
            "<polygon",
            "fill=\"#FF4500\"",
            "fill=\"#32CD32\"",
            "<circle",
            "r=\"15\"",
            "fill=\"#FFFFFF\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "<linearGradient",
            "stop-color=\"#FFFF00\"",
            "stop-color=\"#FF0000\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "What shape and size is used for the rocket's main body?": "A vertical ellipse 80 pixels wide and 200 pixels high",
            "What is the fill color of the rocket's main body?": "#1E90FF",
            "What shape forms the rocket’s nose cone and what is its fill color?": "A triangle with fill color #FF4500",
            "How are the rocket's fins depicted in terms of shape, size, and color?": "Two symmetrical trapezoids, each 40 pixels wide and 60 pixels high, filled with #32CD32",
            "What is used to represent the cockpit window and how is it styled?": "A small circle with a 15-pixel radius, filled with #FFFFFF and outlined with a 2-pixel black stroke",
            "How are the flame trails portrayed and where are they layered relative to the rocket?": "Three irregular polygons with a gradient from yellow (#FFFF00) to red (#FF0000), placed behind the rocket body",
            "Which part of the rocket aligns with the bottom of the SVG canvas?": "The bottom of the rocket’s fins touches the bottom of the canvas"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001237",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a vibrant butterfly with detailed wings and a central body.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 400 pixels.\n2. The butterfly's body must be represented by a vertical rectangle centered horizontally, with a width of 20 pixels, a height of 100 pixels, positioned from y=150 to y=250, and filled with the color #4B0082.\n3. The left wing should be drawn as an ellipse with a horizontal radius of 80 pixels and a vertical radius of 120 pixels, centered at (100, 200), and filled with the color #FF69B4.\n4. The right wing should be drawn as an ellipse with a horizontal radius of 80 pixels and a vertical radius of 120 pixels, centered at (300, 200), and filled with the color #1E90FF.\n5. Both wings must include a black stroke outline with a thickness of 3 pixels.\n6. Each wing should contain a decorative circle in its center, with a radius of 15 pixels, filled with white (#FFFFFF) and outlined with a 2 pixel black stroke.\n7. Two antennae should extend from the top of the butterfly's body, each drawn as a quadratic Bézier curve with a 2 pixel black stroke; one antenna should curve from the left side of the body toward (80, 100) and the other from the right side toward (320, 100).",
        "raw_output_metric": [
            "width=\"400\"",
            "height=\"400\"",
            "xmlns=\"http://www.w3.org/2000/svg\"",
            "<svg",
            "<rect",
            "x=\"190\"",
            "y=\"150\"",
            "width=\"20\"",
            "height=\"100\"",
            "fill=\"#4B0082\"",
            "<ellipse",
            "cx=\"100\"",
            "cy=\"200\"",
            "rx=\"80\"",
            "ry=\"120\"",
            "fill=\"#FF69B4\"",
            "stroke=\"black\"",
            "stroke-width=\"3\"",
            "cx=\"300\"",
            "fill=\"#1E90FF\"",
            "<circle",
            "r=\"15\"",
            "fill=\"#FFFFFF\"",
            "stroke-width=\"2\"",
            "<path",
            "Q",
            "80,100",
            "320,100"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What shape and color is used for the butterfly's body?": "A vertical rectangle filled with color #4B0082",
            "What are the position and size details of the butterfly's body?": "Centered horizontally, width 20 pixels, height 100 pixels (from y=150 to y=250)",
            "How is the left wing represented and what is its fill color?": "An ellipse centered at (100, 200) with horizontal radius 80 pixels, vertical radius 120 pixels, filled with #FF69B4",
            "How is the right wing represented and what is its fill color?": "An ellipse centered at (300, 200) with horizontal radius 80 pixels, vertical radius 120 pixels, filled with #1E90FF",
            "What outline do both wings have?": "A black stroke with a thickness of 3 pixels",
            "What decorative element is present on each wing?": "A white circle with a 15-pixel radius outlined in black with a 2-pixel stroke",
            "How many antennae are displayed and what stroke width do they have?": "Two antennae with a 2-pixel black stroke",
            "From where do the antennae extend and to where do they curve?": "They extend from the top of the butterfly's body; one curves toward (80, 100) and the other toward (320, 100)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001238",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, windows, and a door.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n- The house's body should be represented by a centered rectangle with a width of 200 pixels and a height of 150 pixels.\n- The rectangle for the house's body should be filled with a light blue color using hexadecimal code #ADD8E6.\n- A triangle representing the roof must sit directly on top of the house's body, with its base matching the width of the rectangle.\n- The roof triangle should be filled with a dark red color using hexadecimal code #8B0000.\n- Two square windows, each 30 pixels by 30 pixels, should appear on the house's body, evenly spaced horizontally.\n- Each window must be filled with a white color (#FFFFFF) and outlined with a 2-pixel black stroke (#000000).\n- A door, represented by a vertical rectangle of width 40 pixels and height 70 pixels, must be centered at the bottom of the house's body.\n- The door should be filled with a brown color using hexadecimal code #A0522D and include a circular doorknob with a radius of 5 pixels positioned near its right edge.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "200",
            "150",
            "#ADD8E6",
            "<polygon",
            "#8B0000",
            "30",
            "#FFFFFF",
            "stroke",
            "2",
            "#000000",
            "40",
            "70",
            "#A0522D",
            "<circle",
            "r=\"5\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 300 pixels",
            "What are the dimensions of the house's body (the rectangle)?": "200 pixels by 150 pixels",
            "What is the fill color of the house's body?": "#ADD8E6",
            "What shape represents the roof and what is its fill color?": "A triangle filled with #8B0000",
            "How many windows are there on the house's body?": "Two",
            "What are the dimensions of each window?": "30 pixels by 30 pixels",
            "What are the fill and stroke details of the windows?": "Filled with white (#FFFFFF) and outlined with a 2-pixel black stroke (#000000)",
            "What are the dimensions of the door?": "40 pixels by 70 pixels",
            "What is the fill color of the door?": "#A0522D",
            "What detail is added to the door for decoration?": "A circular doorknob with a radius of 5 pixels near its right edge"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001239",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a stylized rocket launching from a base pad.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels high.\n2. The rocket's body should be represented by a centered rectangle with a width of 30 pixels and a height of 120 pixels, filled with metallic grey (#A9A9A9).\n3. The rocket's nose cone must be depicted as an isosceles triangle attached to the top of the rocket's body, with its base matching the rectangle's width.\n4. A horizontal ellipse at the bottom of the canvas, measuring 100 pixels in width and 20 pixels in height, should serve as the launch pad, colored dark grey (#505050).\n5. Simulate rocket flames by creating a polyline beneath the rocket, consisting of at least 4 points that form a jagged line and filled with orange (#FFA500).\n6. Include two circular windows on the rocket's body, each with a radius of 10 pixels; one should be placed on the upper half and the other on the lower half, both filled with blue (#1E90FF).",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "rect",
            "width=\"30\"",
            "height=\"120\"",
            "fill=\"#A9A9A9\"",
            "polygon",
            "ellipse",
            "100",
            "20",
            "fill=\"#505050\"",
            "polyline",
            "fill=\"#FFA500\"",
            "points",
            "circle",
            "r=\"10\"",
            "fill=\"#1E90FF\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "What color is the rocket's body?": "Metallic grey (#A9A9A9)",
            "What are the dimensions of the rocket's body rectangle?": "30 pixels wide and 120 pixels high",
            "What shape represents the rocket's nose cone?": "Isosceles triangle",
            "What shape and size is used for the launch pad?": "A horizontal ellipse measuring 100 pixels in width and 20 pixels in height",
            "What is the color of the launch pad?": "Dark grey (#505050)",
            "How is the rocket flame rendered and what color is it?": "A polyline of at least 4 jagged points filled with orange (#FFA500)",
            "How many circular windows are on the rocket's body and what are their properties?": "Two circular windows, each with a radius of 10 pixels and filled with blue (#1E90FF)"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001240",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a roof, door, and windows.\n\nFeature Requirements:\n- The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n- The house’s main body should be represented by a rectangle, centered horizontally, with a width of 200 pixels and a height of 150 pixels, filled with light gray (#D3D3D3).\n- The roof should be depicted with a polygon element in the shape of a triangle, positioned so its base aligns with the top edge of the house body, and filled with red (#FF0000).\n- The door must be a rectangle centered along the bottom section of the house, measuring 50 pixels in width and 80 pixels in height, filled with dark brown (#654321), and its top edge should align proportionally with the house’s lower half.\n- Two square windows, each 40 pixels by 40 pixels in size, should be placed symmetrically on either side of the door. Each window should be filled with white (#FFFFFF) and have a black stroke outline of 2 pixels.\n- All major elements (house body, roof, door, and windows) should include a 2-pixel black stroke (#000000) to clearly define their borders.\n- Ensure that the positioning of each element is precise so that the overall composition appears balanced and centered within the SVG canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "fill=\"#D3D3D3\"",
            "<polygon",
            "fill=\"#FF0000\"",
            "fill=\"#654321\"",
            "fill=\"#FFFFFF\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 300 pixels",
            "How is the house's main body positioned on the canvas?": "Centered horizontally",
            "What are the dimensions and fill color of the house's main body?": "200 by 150 pixels, light gray (#D3D3D3)",
            "What geometric shape represents the roof, and what is its fill color?": "A triangle (polygon) filled with red (#FF0000)",
            "What are the dimensions and fill color of the door, and where is it placed?": "50 by 80 pixels, dark brown (#654321), centered along the bottom section of the house",
            "How many windows are present, what are their dimensions, and how are they styled?": "Two windows, each 40 by 40 pixels with a 2-pixel black stroke and white fill",
            "What stroke styling is applied to all major elements of the house?": "A 2-pixel black stroke (#000000) is used for the house body, roof, door, and windows"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001241",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house with a triangular roof, a rectangular door, two square windows, and a sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n2. The house body should be depicted as a rectangle centered horizontally at the bottom of the canvas, with a width of 200 pixels, a height of 150 pixels, and filled with light gray (#D3D3D3).\n3. The roof must be drawn as a triangle positioned directly above the house body, with its base aligned along the top edge of the rectangle and filled with dark red (#A52A2A).\n4. The door should appear as a rectangle in the center of the house’s lower section, measuring 40 pixels in width and 70 pixels in height, and filled with brown (#8B4513).\n5. Two windows, represented as squares of 30 pixels on each side, must be placed symmetrically on the left and right of the door, filled with sky blue (#87CEEB).\n6. Both windows should have a 2-pixel black stroke outline.\n7. The sun must be illustrated as a circle with a radius of 30 pixels, positioned in the top right corner of the canvas and filled with yellow (#FFD700).\n8. All elements must be arranged with clear margins so that none of the shapes touch the edges of the SVG canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#D3D3D3\"",
            "<polygon",
            "fill=\"#A52A2A\"",
            "width=\"40\"",
            "height=\"70\"",
            "fill=\"#8B4513\"",
            "width=\"30\"",
            "height=\"30\"",
            "fill=\"#87CEEB\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "<circle",
            "r=\"30\"",
            "fill=\"#FFD700\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 300 pixels",
            "What color and size is the house body?": "Light gray (#D3D3D3) rectangle with a width of 200 pixels and a height of 150 pixels",
            "Where is the house body positioned on the canvas?": "Centered horizontally at the bottom of the canvas",
            "How is the roof represented and what is its fill color?": "As a triangle with its base aligned along the top edge of the house body, filled with dark red (#A52A2A)",
            "What is the size and color of the door?": "A rectangle that is 40 pixels wide and 70 pixels high, filled with brown (#8B4513)",
            "How many windows are there and what are their dimensions?": "There are two windows, each a 30 by 30 pixels square",
            "What color are the windows and what additional styling do they have?": "Filled with sky blue (#87CEEB) with a 2-pixel black stroke outline",
            "How is the sun depicted in the image?": "As a circle with a radius of 30 pixels, filled with yellow (#FFD700)",
            "Where is the sun positioned on the SVG canvas?": "In the top right corner",
            "Do any of the elements touch the edges of the SVG canvas?": "No, all elements are arranged with clear margins"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001242",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a classic house with a sun and scattered clouds.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels high.\n2. The house body should be represented by a rectangle element with a width of 200 pixels and a height of 150 pixels, centered horizontally and positioned so its bottom edge aligns with the bottom of the canvas.\n3. The house roof must be created using a polygon element forming a triangle that sits directly on top of the house body, with vertices at the top left corner, top right corner, and a centered point above the house.\n4. The door should be a rectangle centered on the house body, measuring 50 pixels in width and 80 pixels in height, and filled with white (#FFFFFF).\n5. The house body must be filled with a light blue color (#ADD8E6) and outlined with a 2-pixel black stroke.\n6. The sun should be drawn as a circle with a radius of 40 pixels, positioned with its center at coordinates (350, 50), filled with yellow (#FFD700) and outlined with a 2-pixel orange stroke (#FFA500).\n7. In the top left corner, include a cluster of three overlapping circles, each with a radius of 20 pixels, evenly spaced horizontally to form a cloud; each circle must be filled with light gray (#D3D3D3) and outlined with a 1-pixel gray stroke (#808080).",
        "raw_output_metric": [
            "width=\"400\"",
            "height=\"400\"",
            "<svg",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#ADD8E6\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "<polygon",
            "50",
            "80",
            "fill=\"#FFFFFF\"",
            "<circle",
            "cx=\"350\"",
            "cy=\"50\"",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "stroke=\"#FFA500\"",
            "stroke-width=\"2\"",
            "r=\"20\"",
            "fill=\"#D3D3D3\"",
            "stroke=\"#808080\"",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400x400 pixels",
            "What color fills the house body and what is its size?": "Light blue (#ADD8E6) and 200x150 pixels",
            "How is the house body outlined?": "With a 2-pixel black stroke",
            "What shape and positioning does the house roof have?": "A triangle (polygon) sitting directly on top of the house, with vertices at the top left and right corners of the house and a centered point above it",
            "What are the dimensions, fill color, and placement of the door?": "50x80 pixels, filled white (#FFFFFF), centered on the house body",
            "What are the characteristics of the sun drawn in the image?": "A circle with radius 40 pixels, centered at (350, 50), filled with yellow (#FFD700) and outlined with a 2-pixel orange stroke (#FFA500)",
            "How many circles make up the cloud in the top left corner and what are their radii?": "Three circles, each with a radius of 20 pixels",
            "What fill and stroke are used for the cloud circles?": "Filled with light gray (#D3D3D3) and outlined with a 1-pixel gray stroke (#808080)",
            "How is the positioning of the house body aligned with the canvas?": "It is centered horizontally and its bottom edge aligns with the bottom of the canvas"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001243",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a vibrant mountain landscape featuring mountains, a river, and a shining sun.\n\nFeature Requirements:\n1. The SVG canvas must have a width of 400 pixels and a height of 300 pixels.\n2. A large mountain should be depicted as a polygon spanning the full width at the bottom, filled with the color #8B4513, and outlined with a 2-pixel black stroke.\n3. A smaller, overlapping mountain must be positioned on the left side, drawn as a polygon filled with #CD853F and also outlined with a 2-pixel black stroke.\n4. A circular sun with a radius of 40 pixels should be placed in the top right corner, filled with the color #FFD700.\n5. A horizontal river represented by a rectangle of 40 pixels in height should cross the lower third of the canvas, filled with the color #1E90FF.\n6. The river rectangle must extend across the full width of the canvas and be aligned to the bottom.\n7. Within the river, include two evenly spaced, parallel white lines of 1 pixel thickness running horizontally to simulate water reflections.\n8. Ensure all graphic elements are positioned to utilize the full canvas area and clearly display the layered depth of the scenery.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "polygon",
            "points=",
            "fill=\"#8B4513\"",
            "stroke=\"black\"",
            "stroke-width=\"2\"",
            "fill=\"#CD853F\"",
            "circle",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "rect",
            "fill=\"#1E90FF\"",
            "height=\"40\"",
            "line",
            "stroke=\"white\"",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 300 pixels",
            "What color is the large mountain polygon and what stroke thickness does it have?": "#8B4513 with a 2-pixel black stroke",
            "What color is the smaller mountain on the left and what stroke does it use?": "#CD853F with a 2-pixel black stroke",
            "Where is the circular sun positioned and what is its radius and fill color?": "Top right corner, 40 pixels radius, filled with #FFD700",
            "What are the dimensions and fill color of the river rectangle?": "Extends full width, 40 pixels in height, filled with #1E90FF, aligned at the bottom",
            "How many white reflective lines are drawn inside the river and what is their line thickness?": "Two lines, each 1 pixel thick",
            "How is the layered depth demonstrated in the image?": "By overlapping a smaller mountain on the left with a large mountain spanning the bottom and the river and sun positioned in distinct layers"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001244",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a quaint house on a hill with a shining sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. The house should be depicted as a square with a width and height of 150 pixels, positioned at the center of the lower half of the canvas.\n3. A triangular roof, 150 pixels wide, must be placed precisely on top of the house square, filled with the color red (#FF0000).\n4. A rectangular door measuring 40 pixels wide by 60 pixels high should be centered on the bottom part of the house, filled with brown (#8B4513).\n5. There must be two square windows, each 30 pixels per side, placed symmetrically on either side of the door.\n6. A green hill should be represented as an ellipse spanning 400 pixels in width and 150 pixels in height, located at the bottom edge of the canvas.\n7. A sun must be drawn as a circle with a radius of 30 pixels, located in the upper right corner of the canvas and filled with yellow (#FFFF00).\n8. Every shape in the SVG should include a 2-pixel black (#000000) stroke outline for clear definition.",
        "raw_output_metric": [
            "svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "150",
            "<polygon",
            "points=",
            "#FF0000",
            "40",
            "60",
            "#8B4513",
            "30",
            "<ellipse",
            "green",
            "<circle",
            "#FFFF00",
            "stroke=\"#000000\"",
            "stroke-width=\"2\""
        ],
        "VQA": {
            "What is the size of the SVG canvas?": "400 by 400 pixels",
            "What shape and dimensions represent the house?": "A 150x150 pixel square centered in the lower half of the canvas",
            "What shape and color is used for the roof on the house?": "A triangular roof, 150 pixels wide and filled with red (#FF0000)",
            "What are the dimensions and positioning of the door?": "A 40x60 pixel rectangle centered on the bottom of the house and filled with brown (#8B4513)",
            "How many windows are on the house and what are their sizes?": "There are two square windows, each 30x30 pixels, placed symmetrically on either side of the door",
            "What does the hill look like and what are its dimensions?": "A green ellipse spanning 400 pixels in width and 150 pixels in height, located at the bottom edge",
            "How is the sun depicted in terms of shape, color, and location?": "A yellow (#FFFF00) circle with a radius of 30 pixels, positioned in the upper right corner",
            "What consistent styling is applied to all shapes in the image?": "Every shape has a 2-pixel black (#000000) stroke outline"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001245",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a stylized rocket lifting off from a launchpad under a starry sky.\n\nFeature Requirements:\n1. The SVG canvas must have a width and height of 400 pixels.\n2. At the bottom center of the canvas, include a rectangle representing the launchpad that is 80 pixels wide and 20 pixels tall, with its top edge aligned with the bottom of the canvas.\n3. Above the launchpad, draw a rocket using a polygon with five precise points so that its tip is at least 150 pixels above the launchpad and the body is centered horizontally.\n4. Fill the rocket with a linear gradient that transitions vertically from #FF4500 at the base to #FFA500 at the tip.\n5. Immediately below the base of the rocket, create three downward-pointing flame triangles, each 60 pixels wide at the base and 40 pixels tall, filled with #FFFF00.\n6. Surround the base of the rocket with four small circles acting as thruster sparks, each having a radius of 10 pixels and filled with #FF6347.\n7. In the top half of the canvas, evenly distribute five small circles to represent stars, each having a radius of 8 pixels and filled with white (#FFFFFF).\n8. All shapes (rocket, launchpad, flames, sparks, and stars) must include a 1-pixel black stroke (#000000) for clear outlines.\n9. Ensure every element is precisely aligned and centered horizontally on the canvas for a balanced composition.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "80",
            "20",
            "<polygon",
            "points",
            "150",
            "linearGradient",
            "stop",
            "#FF4500",
            "#FFA500",
            "#FFFF00",
            "<circle",
            "10",
            "#FF6347",
            "8",
            "#FFFFFF",
            "stroke",
            "1",
            "#000000"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 by 400 pixels",
            "Where is the launchpad located and what are its dimensions?": "At the bottom center, 80 pixels wide and 20 pixels tall",
            "How many points define the rocket polygon?": "Five",
            "What is the color gradient applied to the rocket?": "It transitions vertically from #FF4500 at the base to #FFA500 at the tip",
            "What is the minimum vertical clearance between the rocket’s tip and the launchpad?": "At least 150 pixels above the launchpad",
            "How many flame triangles are drawn, and what are their dimensions and fill color?": "Three triangles, each 60 pixels wide and 40 pixels tall, filled with #FFFF00",
            "How many thruster spark circles are drawn around the base of the rocket, and what is their radius and fill color?": "Four circles, each with a radius of 10 pixels and filled with #FF6347",
            "How many stars are shown in the top half of the canvas, and what are their characteristics?": "Five stars, each a circle with a radius of 8 pixels filled with white (#FFFFFF)",
            "Do all the shapes include a stroke, and if so, what is its width and color?": "Yes, a 1-pixel black stroke (#000000) on all shapes",
            "Is every element centered horizontally for a balanced composition?": "Yes"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001246",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a futuristic city skyline at dusk with a prominent sun in the sky.\n\nFeature Requirements:\n- The SVG canvas must be 400 pixels wide and 400 pixels high.\n- The skyline should consist of four distinct rectangular buildings with widths of 50, 70, 60, and 80 pixels, respectively.\n- Each building must have a different height (e.g., 150, 200, 180, and 220 pixels) and its base must align with the bottom edge of the canvas.\n- The buildings should be filled with different shades of gray using hexadecimal color codes such as #A9A9A9, #808080, #696969, and #505050.\n- A yellow circle representing the sun must be placed in the upper quadrant of the canvas, having a radius of 40 pixels and filled with #FFD700.\n- The sun should have a black stroke outline of 3 pixels using the color code #000000.\n- A rectangle covering the entire canvas should serve as the background, using a vertical linear gradient from dark blue (#00008B) at the top to light blue (#87CEFA) at the bottom.\n- All elements must be precisely positioned to ensure they do not overlap improperly, with the buildings arranged side by side along the base of the canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "linearGradient",
            "<stop",
            "#00008B",
            "#87CEFA",
            "#A9A9A9",
            "#808080",
            "#696969",
            "#505050",
            "<circle",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "stroke=\"#000000\"",
            "stroke-width=\"3\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "How many buildings are present in the skyline?": "4",
            "What are the widths of the four buildings?": "50, 70, 60, and 80 pixels",
            "What are the heights of the buildings and how are they aligned?": "150, 200, 180, and 220 pixels with bases aligned to the bottom edge",
            "What hexadecimal color codes are used to fill the buildings?": "#A9A9A9, #808080, #696969, and #505050",
            "What prominent object is located in the upper quadrant of the canvas?": "A yellow sun",
            "What are the sun's visual characteristics?": "A circle with a 40-pixel radius, filled with #FFD700, and outlined with a 3-pixel black stroke (#000000)",
            "What type of background is applied to the canvas?": "A vertical linear gradient",
            "What colors are used in the background gradient?": "Dark blue (#00008B) at the top to light blue (#87CEFA) at the bottom"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001247",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a mountain landscape featuring a prominent mountain, a rising sun, and two clouds.\n\nFeature Requirements:\n1. The SVG canvas should have a width of 400 pixels and a height of 400 pixels.\n2. The mountain must be represented by a polygon with three points forming a triangle that spans the width of the canvas, with its base aligned with the bottom edge.\n3. The mountain polygon should be filled with a dark gray color using the hexadecimal code #696969.\n4. A sun should be drawn as a circle with a radius of 40 pixels, positioned so that its center is at (320, 80) to appear rising behind the mountain.\n5. The sun must be filled with a bright yellow color using the hexadecimal code #FFD700 and must have a 2-pixel orange (#FF8C00) stroke.\n6. Two clouds must be included, each composed of three overlapping ellipses.\n7. The left cloud should be centered at (100, 100) and the right cloud at (200, 120), with each ellipse having a width of 60 pixels and a height of 30 pixels, filled with white (#FFFFFF) and a 1-pixel light gray (#D3D3D3) stroke.\n8. All graphical elements must be properly layered to ensure that the sun appears partially behind the mountain, with the clouds rendered on top of the sun if their positions overlap.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "polygon",
            "points",
            "fill=\"#696969\"",
            "circle",
            "cx=\"320\"",
            "cy=\"80\"",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "stroke=\"#FF8C00\"",
            "stroke-width=\"2\"",
            "ellipse",
            "fill=\"#FFFFFF\"",
            "stroke=\"#D3D3D3\"",
            "stroke-width=\"1\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels by 400 pixels",
            "How many vertices does the mountain polygon have?": "Three",
            "What is the fill color of the mountain?": "#696969",
            "What is the position and radius of the sun?": "Center at (320,80) with a radius of 40 pixels",
            "What are the sun's fill and stroke properties?": "Fill is #FFD700 and stroke is 2 pixels in #FF8C00",
            "How many clouds are in the image and how are they constructed?": "Two clouds, each composed of three overlapping ellipses",
            "Where is the left cloud located?": "Centered at (100,100)",
            "Where is the right cloud located?": "Centered at (200,120)",
            "What are the dimensions and styling of each ellipse in the clouds?": "Each ellipse is 60 pixels wide and 30 pixels tall, filled with #FFFFFF and outlined with a 1-pixel stroke in #D3D3D3",
            "Which element appears partially behind the mountain due to layering?": "The sun"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001248",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple house scene featuring a house with a roof, door, windows, and a sun in the sky.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 300 pixels tall.\n2. The house body should be represented by a rectangle centered horizontally at the bottom of the canvas, with a width of 200 pixels and a height of 150 pixels, filled with the color #D3D3D3.\n3. The roof must be a triangle created using a polygon placed directly above the house body, with its three vertices clearly defined and filled with the color #B22222.\n4. A door should be centered on the house body, depicted as a rectangle with a width of 50 pixels and a height of 80 pixels, filled with the color #654321.\n5. Two square windows, each 40 pixels in both width and height, must be placed symmetrically on either side of the door and filled with the color #87CEFA.\n6. The sun should appear as a circle positioned in the top right corner of the canvas, with a radius of 30 pixels and filled with the color #FFD700.\n7. Every element in the SVG, including the house, roof, door, windows, and sun, must have a stroke outline of 2 pixels using the color black (#000000).\n8. Ensure that the bottom edge of the house body aligns exactly with the bottom of the SVG canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"300\"",
            "rect",
            "polygon",
            "circle",
            "200",
            "150",
            "50",
            "80",
            "40",
            "30",
            "fill=\"#D3D3D3\"",
            "fill=\"#B22222\"",
            "fill=\"#654321\"",
            "fill=\"#87CEFA\"",
            "fill=\"#FFD700\"",
            "stroke=\"#000000\"",
            "stroke-width=\"2\"",
            "points"
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400 pixels wide and 300 pixels tall",
            "What color is the house body filled with and what are its dimensions?": "Filled with #D3D3D3; 200 pixels wide and 150 pixels high, centered at the bottom",
            "How is the roof depicted and what is its fill color?": "As a triangle (polygon) placed directly above the house, filled with #B22222",
            "What are the dimensions and fill color of the door, and where is it positioned?": "50 pixels wide, 80 pixels high, filled with #654321, centered on the house body",
            "How many windows are there, what are their sizes, and what fill color do they have?": "Two square windows, each 40 pixels by 40 pixels, filled with #87CEFA",
            "Where is the sun located and what are its visual properties?": "Located in the top right corner with a radius of 30 pixels, filled with #FFD700",
            "What is common to all elements (house, roof, door, windows, sun) in terms of outline?": "Each element has a 2-pixel black (#000000) stroke outline"
        }
    },
    {
        "task_name": "Text to SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "task_id": "001249",
        "input_type": "Text",
        "output_type": "SVG",
        "rendering": true,
        "query": "Please output SVG:\n\nTask:\nGenerate an SVG image of a house with a sun and a green field.\n\nFeature Requirements:\n1. The SVG canvas must be 400 pixels wide and 400 pixels high.\n2. The house's body should be represented by a rectangle that is 200 pixels wide and 150 pixels tall, centered horizontally and positioned so that its bottom edge is 200 pixels from the top of the canvas.\n3. The house's body rectangle must be filled with a light blue color using the hexadecimal code #ADD8E6.\n4. The roof of the house should be created with a polygon element forming a triangle that sits directly on top of the house's body, filled with a dark red color using the hexadecimal code #8B0000.\n5. A circle representing the sun must be placed in the top-left corner with a radius of 40 pixels, filled with yellow (#FFD700) and outlined with a 3 pixel black stroke (#000000).\n6. A green field should be drawn as a rectangle covering the full width of the SVG (400 pixels) and a height of 50 pixels at the bottom of the canvas, filled with green (#008000).\n7. A window on the house should appear as a white rectangle measuring 50 pixels by 50 pixels, centered within the house's body and bordered with a 2 pixel solid black stroke.\n8. All elements must be positioned so that they are clearly visible and correctly aligned within the 400px by 400px SVG canvas.",
        "raw_output_metric": [
            "<svg",
            "width=\"400\"",
            "height=\"400\"",
            "<rect",
            "width=\"200\"",
            "height=\"150\"",
            "fill=\"#ADD8E6\"",
            "<polygon",
            "fill=\"#8B0000\"",
            "<circle",
            "r=\"40\"",
            "fill=\"#FFD700\"",
            "stroke=\"#000000\"",
            "stroke-width=\"3\"",
            "fill=\"#008000\"",
            "height=\"50\"",
            "fill=\"white\"",
            "stroke-width=\"2\"",
            "stroke=\"black\""
        ],
        "VQA": {
            "What are the dimensions of the SVG canvas?": "400px by 400px",
            "What are the dimensions and color of the house's body?": "200px wide, 150px tall, filled with light blue (#ADD8E6)",
            "How is the house's body positioned on the canvas?": "Centered horizontally with its bottom edge 200px from the top",
            "What shape and color is used for the house's roof?": "A triangle polygon filled with dark red (#8B0000)",
            "Where is the sun placed and what are its visual properties?": "In the top-left corner; it is a circle with a 40px radius, filled with yellow (#FFD700) and outlined with a 3px black stroke",
            "What element is drawn at the bottom of the canvas and what are its dimensions?": "A green field, represented by a rectangle 400px wide and 50px tall, filled with green (#008000)",
            "What are the specifications for the window on the house?": "A white 50px by 50px rectangle, centered within the house's body and bordered with a 2px solid black stroke"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001300",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting an office floor plan layout.\n\nFeature Requirements:\n- Display exactly 8 rooms, each represented as a rectangle labeled from \"Room A\" to \"Room H\".\n- Arrange the rooms in a two-row grid with 4 rooms per row, with a 0.5 cm gap between adjacent rooms.\n- Draw a central corridor running vertically between the two rows; the corridor should be a rectangle with a light gray fill.\n- Use blue solid lines for the borders of the rooms and a dashed line style for the corridor’s outline.\n- Ensure all room rectangles have identical dimensions of 3 cm in width and 2 cm in height.\n- Position the entire diagram centered within a canvas of 15 cm width and 10 cm height.\n- Include a title centered above the diagram with the text \"Office Floor Plan\" in a bold font.\n- Label the corridor with the text \"Main Corridor\" in an italic font, placed at the center of the corridor.",
        "raw_output_metric": [
            "tikzpicture",
            "Office Floor Plan",
            "Room A",
            "Room B",
            "Room C",
            "Room D",
            "Room E",
            "Room F",
            "Room G",
            "Room H",
            "Main Corridor",
            "3 cm",
            "2 cm",
            "0.5 cm",
            "15 cm",
            "10 cm",
            "blue",
            "dashed",
            "fill=lightgray",
            "textbf",
            "textit"
        ],
        "VQA": {
            "What is the title text displayed above the diagram?": "Office Floor Plan (in bold)",
            "How many room rectangles are present in the layout?": "8",
            "What labels are used for the rooms?": "Room A, Room B, Room C, Room D, Room E, Room F, Room G, Room H",
            "How are the rooms arranged?": "In a two-row grid with 4 rooms per row",
            "What is the gap distance between adjacent rooms?": "0.5 cm",
            "What are the dimensions of each room rectangle?": "3 cm in width and 2 cm in height",
            "How is the corridor depicted?": "A vertical rectangle with light gray fill and a dashed outline",
            "What text labels the corridor and in what style?": "Main Corridor (in italic)",
            "What style is used for the borders of the rooms?": "Blue solid lines",
            "What are the dimensions of the canvas on which the diagram is centered?": "15 cm in width and 10 cm in height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001301",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a detailed flowchart of a process.\n\nFeature Requirements:\n- Display exactly 6 nodes, each designed as a rectangle with dimensions of 2 cm by 1 cm.\n- Label the nodes sequentially from \"Step A\" to \"Step F\" with each label centered inside its rectangle.\n- Arrange the nodes in a vertical column with equal spacing between each successive node.\n- Connect the nodes with directional arrows starting from the top node and proceeding sequentially to the bottom node.\n- Use solid arrow lines with arrowheads to clearly indicate the process flow.\n- Alternate the fill colors of the nodes between blue and green, starting with blue at the top.\n- Position the entire diagram centered within a canvas of width 12 cm and height 14 cm.\n- Include a title centered above the diagram with the text \"Process Flowchart\" displayed in bold font.\n- Ensure the arrow thickness is exactly 0.8 pt and connects the midpoints of the respective rectangle edges.\n- Enclose the entire diagram within a subtle dashed line frame outlining the canvas boundaries.",
        "raw_output_metric": [
            "tikzpicture",
            "Process Flowchart",
            "Step A",
            "Step B",
            "Step C",
            "Step D",
            "Step E",
            "Step F",
            "2 cm",
            "1 cm",
            "blue",
            "green",
            "12 cm",
            "14 cm",
            "0.8 pt",
            "dashed",
            "rectangle",
            "->"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Process Flowchart (bold)",
            "How many nodes are present in the flowchart?": "6",
            "What labels do the nodes display from top to bottom?": "Step A, Step B, Step C, Step D, Step E, Step F",
            "What are the dimensions of each node?": "2 cm by 1 cm",
            "How are the nodes arranged in the diagram?": "In a vertical column with equal spacing",
            "How are the nodes connected to indicate the process flow?": "With directional arrows connecting the midpoints of adjacent nodes",
            "What is the arrow thickness used in the diagram?": "0.8 pt",
            "How are the node fill colors organized from the top node?": "Alternating blue and green, starting with blue",
            "What are the dimensions of the overall canvas that centers the diagram?": "12 cm by 14 cm",
            "How is the canvas outlined in the rendered diagram?": "With a subtle dashed line frame outlining the boundaries"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001302",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a star-inspired node network.\n\nFeature Requirements:\n- Display exactly 8 nodes, one of which is a central node and the remaining 7 evenly arranged in a circle around it.\n- Label the central node with \"Center\" and the peripheral nodes with letters A through G.\n- Position the central node at the exact center of a canvas measuring 12 cm by 12 cm, with peripheral nodes evenly spaced around a circle of radius 4 cm.\n- Draw the central node as a blue circle with a radius of 0.5 cm, and each peripheral node as a red circle with a radius of 0.3 cm.\n- Connect the central node to each peripheral node using dashed lines with a thickness of 1mm.\n- Ensure all nodes are evenly distributed with precise angular spacing between the peripheral nodes.\n- Place a title \"Star Network Diagram\" centered above the diagram in an italic font.\n- Use solid fill for nodes and no external assets or icons.\n- Guarantee that every line and node is explicitly placed based on the described measurements and positions.",
        "raw_output_metric": [
            "tikzpicture",
            "Star Network Diagram",
            "Center",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "blue",
            "red",
            "0.5 cm",
            "0.3 cm",
            "circle",
            "dashed",
            "1mm",
            "4cm",
            "12cm"
        ],
        "VQA": {
            "What is the title displayed above the diagram and how is it styled?": "Star Network Diagram in italic",
            "How many nodes are shown in the diagram?": "8",
            "What text is used for the central node's label?": "Center",
            "Which labels are used for the peripheral nodes?": "A, B, C, D, E, F, G",
            "Where is the central node placed within the canvas?": "At the center of a 12 cm by 12 cm canvas",
            "What is the radius of the circle on which the peripheral nodes are arranged?": "4 cm",
            "What are the color and size of the central node?": "Blue circle with a radius of 0.5 cm",
            "What are the color and size of each peripheral node?": "Red circle with a radius of 0.3 cm",
            "How are the nodes connected in the diagram?": "They are connected with dashed lines of 1mm thickness"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001303",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a flowchart for a basic data processing pipeline.\n\nFeature Requirements:\n- Depict exactly 6 process steps with distinct labels: \"Input\", \"Preprocess\", \"Analyze\", \"Validate\", \"Process\", and \"Output\".\n- Arrange the process steps in a vertical sequence, evenly spaced along a 16 cm tall canvas and centered horizontally.\n- Connect each step with solid arrows pointing downward, ensuring every arrow has a line thickness of 1 pt.\n- Use rectangular nodes for the process steps with a fixed width of 3 cm and a height of 1.5 cm.\n- Insert a decision diamond labeled \"Fault?\" between the \"Validate\" and \"Process\" steps that is 1.5 cm wide and 1.5 cm high, centered horizontally.\n- Place the text \"Data Pipeline Flowchart\" in bold font, centered at the top of the diagram.\n- Set the entire diagram within a canvas measuring exactly 14 cm in width and 16 cm in height.\n- Ensure all node text is centered and uses a consistent font size of 12 pt.\n- Draw all arrows as clear and unbroken straight lines.\n- Include clear separation between nodes such that the diagram elements do not overlap.",
        "raw_output_metric": [
            "Data Pipeline Flowchart",
            "Input",
            "Preprocess",
            "Analyze",
            "Validate",
            "Fault?",
            "Process",
            "Output",
            "tikzpicture",
            "node",
            "rectangle",
            "diamond",
            "->",
            "line width=1pt",
            "14 cm",
            "16 cm",
            "3 cm",
            "1.5 cm"
        ],
        "VQA": {
            "How many rectangular process steps are displayed in the flowchart?": "6",
            "What are the labels of the rectangular process steps?": "Input, Preprocess, Analyze, Validate, Process, and Output",
            "What shape and label is used between the Validate and Process steps?": "A decision diamond labeled 'Fault?'",
            "What is the font style and size used for node text?": "Centered text with a 12 pt font size",
            "How is the title 'Data Pipeline Flowchart' styled and positioned?": "It is in bold and centered at the top of the diagram",
            "How are the process steps arranged within the canvas?": "Vertically aligned and evenly spaced along a 16 cm tall canvas",
            "What are the dimensions of the overall canvas?": "14 cm in width and 16 cm in height",
            "How are the arrows connecting the nodes designed?": "They are solid, straight lines with a 1 pt thickness"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001304",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing an urban park layout with distinct recreational zones connected by pathways.\n\nFeature Requirements:\n- Include exactly 7 nodes, each labeled with a unique letter from A to G to represent different park zones.\n- Arrange nodes in two rows; the top row should have 3 nodes equally spaced and the bottom row 4 nodes equally spaced, with a vertical separation of 3 cm.\n- Represent each node as a square with side lengths of 1 cm.\n- Connect adjacent nodes horizontally and vertically using dashed lines to depict walking paths.\n- Place a circular fountain with a diameter of 1.2 cm exactly at the center of the diagram.\n- Ensure the entire layout is centered on a canvas that is 12 cm wide and 8 cm high.\n- Add a title above the diagram reading \"Urban Park Layout\" in an italicized font, centered on the canvas.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "Urban Park Layout",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "rectangle",
            "1 cm",
            "3 cm",
            "dashed",
            "circle",
            "1.2 cm",
            "12 cm",
            "8 cm"
        ],
        "VQA": {
            "How many nodes are present in the layout?": "7",
            "What letters label the nodes?": "A, B, C, D, E, F, G",
            "How are the nodes arranged in rows?": "Top row with 3 nodes and bottom row with 4 nodes",
            "What is the shape and size of each node?": "Each node is a square with 1 cm side lengths",
            "What is the vertical separation between the two rows?": "3 cm",
            "What is at the center of the diagram?": "A circular fountain with a diameter of 1.2 cm",
            "How are the nodes connected?": "Adjacent nodes are connected horizontally and vertically using dashed lines",
            "What is the title of the diagram and how is it styled?": "Urban Park Layout, italicized and centered",
            "What are the dimensions of the canvas?": "12 cm wide and 8 cm high"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001305",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting a grid of geometric shapes with an accompanying legend.\n\nFeature Requirements:\n- Create a grid with 16 equal cells arranged in 4 rows and 4 columns, centered within a canvas of 15 cm by 15 cm.\n- In each cell, randomly draw either a triangle, square, or circle, ensuring each shape is entirely contained within its cell.\n- Assign a distinct fill color to each shape chosen from red, blue, and green.\n- Draw all shapes with a solid outline of line thickness 0.5 mm.\n- Ensure every shape is of uniform size, fitting within a bounding box of 2 cm by 2 cm.\n- Place a centered title above the grid with the text \"Geometric Pattern Grid\" in a bold sans-serif font.\n- Include a legend positioned in the bottom-left corner that clearly details which shape corresponds with which color.\n- Label each cell with its row and column coordinates using a small font inside each cell.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Geometric Pattern Grid",
            "red",
            "blue",
            "green",
            "triangle",
            "square",
            "circle",
            "0.5mm",
            "2cm",
            "15cm",
            "legend"
        ],
        "VQA": {
            "How many cells are in the grid?": "16",
            "How many rows and columns does the grid have?": "4 rows and 4 columns",
            "What is the title text displayed above the grid?": "Geometric Pattern Grid",
            "What font style is used for the title?": "Bold sans-serif",
            "Where is the legend positioned?": "Bottom-left corner",
            "Which shapes can appear inside each cell?": "Triangle, square, or circle",
            "What colors fill the shapes?": "Red, blue, and green",
            "What is the outline thickness of the shapes?": "0.5 mm",
            "How are the cells labeled?": "Each cell is labeled with its row and column coordinates in a small font",
            "What is the uniform size of each shape?": "They fit within a 2 cm by 2 cm bounding box"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001306",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing an arrangement of various geometric shapes in a radial design.\n\nFeature Requirements:\n- Display exactly 7 shapes consisting of 3 circles, 2 squares, and 2 triangles.\n- Arrange the shapes in a circular pattern around a central point with equal angular spacing.\n- Each circle must have a radius of 0.7 cm, each square a side length of 1.0 cm, and each triangle an altitude of 1.2 cm.\n- Draw all shapes with solid outlines of 1pt thickness.\n- Fill the circles with light blue, the squares with light red, and the triangles with light green.\n- Label each shape with a unique letter (A to G) placed at the center of the shape.\n- Position the entire diagram centered within a canvas of 14 cm by 14 cm.\n- Include a centered title above the diagram with the text \"Radial Geometric Layout\" in bold italic font.\n- Display dashed guide lines from the center extending outward to each shape to highlight the radial symmetry.",
        "raw_output_metric": [
            "tikzpicture",
            "Radial Geometric Layout",
            "circle",
            "rectangle",
            "regular polygon, regular polygon sides=3",
            "0.7cm",
            "1.0cm",
            "1.2cm",
            "1pt",
            "light blue",
            "light red",
            "light green",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "14cm",
            "dashed"
        ],
        "VQA": {
            "How many shapes are displayed and what types are they?": "7 shapes: 3 circles, 2 squares, and 2 triangles",
            "How are the shapes arranged around the diagram?": "They are arranged in a circular pattern with equal angular spacing around the center",
            "What are the fill colors for the circles, squares, and triangles?": "Circles are light blue, squares are light red, and triangles are light green",
            "What specific dimensions are given for each shape?": "Circles have a radius of 0.7 cm, squares have a side length of 1.0 cm, and triangles have an altitude of 1.2 cm",
            "What is the appearance of the shape outlines?": "All shapes have solid outlines with a thickness of 1pt",
            "How are the shapes labeled?": "Each shape is centered with a unique letter from A to G",
            "What is displayed above the diagram and how is it styled?": "The title 'Radial Geometric Layout' is displayed in bold italic font, centered above the diagram",
            "What extra visual guides are included in the layout?": "Dashed guide lines extend from the center outward to each shape"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001307",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a schematic for a small garden layout.\n\nFeature Requirements:\n- The diagram must include exactly 6 garden elements: 2 trees, 2 flower beds, 1 pond, and 1 bench.\n- Each tree should be depicted as a circle with a radius of 0.7 cm and labeled \"Tree 1\" and \"Tree 2\" respectively.\n- Each flower bed must be drawn as an ellipse with a horizontal axis of 1.5 cm and a vertical axis of 1 cm, labeled \"Flower Bed 1\" and \"Flower Bed 2\" accordingly.\n- The pond needs to be represented as a rectangle measuring 3 cm in width and 2 cm in height with its label \"Pond\" centered inside.\n- The bench should be illustrated as a rectangle of dimensions 2 cm by 0.5 cm and placed in a clearly defined area of the layout.\n- Arrange all elements symmetrically within a canvas that is 12 cm wide and 12 cm high.\n- Connect selected elements with thin, dotted lines to indicate walking paths between adjacent garden features.\n- Include a title centered above the diagram with the text \"Garden Layout Schematic\" in italic font.\n- Ensure all shapes have a visible boundary with a stroke width of 0.5 mm.\n- Use only solid shapes and standard line styles; do not include any pattern fills, gradients, or external assets.",
        "raw_output_metric": [
            "Tree 1",
            "Tree 2",
            "Flower Bed 1",
            "Flower Bed 2",
            "Pond",
            "Garden Layout Schematic"
        ],
        "VQA": {
            "What is the title of the diagram?": "Garden Layout Schematic (in italic font)",
            "How many garden elements are included in the layout?": "6",
            "How many trees are present and how are they labeled?": "2 trees labeled Tree 1 and Tree 2",
            "What shape represents each tree and what is its size?": "Circle with a radius of 0.7 cm",
            "How many flower beds are there and what shape are they drawn in?": "2 flower beds drawn as ellipses",
            "What are the dimensions of each flower bed?": "1.5 cm horizontal axis, 1 cm vertical axis",
            "How is the pond depicted in the diagram?": "As a rectangle measuring 3 cm by 2 cm with label centered inside",
            "What are the dimensions of the bench?": "2 cm by 0.5 cm",
            "How are the garden elements connected?": "With thin, dotted lines indicating walking paths",
            "What is the size of the canvas for the layout?": "12 cm by 12 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001308",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram illustrating an organizational chart for a small team.\n\nFeature Requirements:\n- Create a top-level node labeled \"Manager\" placed at coordinate (0,4) on a canvas of width 12 cm and height 8 cm.\n- Below the Manager node, display exactly three subordinate nodes labeled \"Team Lead 1\", \"Team Lead 2\", and \"Team Lead 3\", arranged horizontally with equal spacing.\n- From each Team Lead node, draw two subordinate nodes representing team members, each labeled with unique names (e.g., \"Member A\", \"Member B\" for Team Lead 1; \"Member C\", \"Member D\" for Team Lead 2; \"Member E\", \"Member F\" for Team Lead 3).\n- Connect nodes with solid straight-line edges, ensuring every connection is clearly visible.\n- Represent all nodes as rectangles of the same dimensions: 1.5 cm width and 1 cm height, with a thin border.\n- Place a centered title above the diagram reading \"Small Team Organizational Chart\" in bold font.",
        "raw_output_metric": [
            "Manager",
            "Team Lead 1",
            "Team Lead 2",
            "Team Lead 3",
            "Member A",
            "Member B",
            "Member C",
            "Member D",
            "Member E",
            "Member F",
            "Small Team Organizational Chart"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Small Team Organizational Chart (in bold)",
            "What are the dimensions of each node's rectangle?": "1.5 cm width and 1 cm height",
            "Where is the Manager node positioned on the canvas?": "(0,4)",
            "How many Team Lead nodes appear below the Manager?": "3",
            "How are the Team Lead nodes arranged?": "Horizontally with equal spacing",
            "How many subordinate member nodes does each Team Lead have?": "2",
            "What are the labels of the subordinate nodes for Team Lead 1?": "Member A and Member B",
            "Are the connections between the nodes represented as solid straight lines?": "Yes"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001309",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical family tree structure.\n\nFeature Requirements:\n- Depict exactly 7 nodes labeled as follows: \"Grandparent\", \"Parent1\", \"Parent2\", \"Child1\", \"Child2\", \"Child3\", and \"Child4\".\n- Arrange the nodes in a tree layout with the \"Grandparent\" at the top, the two parents directly below, and the four children evenly distributed at the bottom.\n- Use dashed lines to connect the \"Grandparent\" to both \"Parent1\" and \"Parent2\", and use solid lines to link each parent to their respective children.\n- Represent each node as a rectangle with a fixed size of 1.5 cm in width and 0.8 cm in height.\n- Place the entire diagram centered within a canvas of 12 cm in width and 10 cm in height.\n- Ensure the vertical spacing between each hierarchy level is exactly 2 cm.\n- Ensure a horizontal spacing of 1.5 cm is maintained between adjacent nodes at the same level.\n- Include a subtitle centered below the diagram with the text \"Family Hierarchy\" in italic font.\n- Label and position each node clearly to indicate the family relationship hierarchy.",
        "raw_output_metric": [
            "tikzpicture",
            "Grandparent",
            "Parent1",
            "Parent2",
            "Child1",
            "Child2",
            "Child3",
            "Child4",
            "Family Hierarchy",
            "rectangle",
            "1.5 cm",
            "0.8 cm",
            "2 cm",
            "12 cm",
            "10 cm",
            "dashed",
            "solid"
        ],
        "VQA": {
            "How many nodes are depicted in the diagram?": "7",
            "What label is assigned to the top node?": "Grandparent",
            "Which nodes are directly below the 'Grandparent'?": "Parent1 and Parent2",
            "How many nodes appear at the bottom level of the diagram?": "4",
            "What style of lines is used to connect the 'Grandparent' to 'Parent1' and 'Parent2'?": "Dashed lines",
            "What style of lines connects each parent to their respective children?": "Solid lines",
            "What are the dimensions of each node rectangle?": "1.5 cm by 0.8 cm",
            "What is the vertical spacing between each hierarchy level?": "2 cm",
            "What is the horizontal spacing between adjacent nodes at the same level?": "1.5 cm",
            "What subtitle is shown below the diagram and how is it styled?": "Family Hierarchy in italic font"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001310",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical flowchart of a school day schedule.\n\nFeature Requirements:\n- Construct exactly 7 nodes, each labeled with one of the following distinct periods: \"Arrival\", \"Homeroom\", \"Math\", \"Science\", \"Lunch\", \"Recess\", \"Dismissal\".\n- Arrange the nodes in a vertical layout with uniform spacing, starting from the top with \"Arrival\" and ending at the bottom with \"Dismissal\".\n- Connect each consecutive pair of nodes with a downward arrow to indicate the progression of the schedule.\n- Use solid arrows with clear arrowheads to define the direction between nodes.\n- Represent each node as a rounded rectangle with a width of 3 cm and a height of 1.2 cm.\n- Position the entire diagram centered within a canvas that is 15 cm wide and 20 cm tall.\n- Place a centered bold title reading \"School Day Schedule\" above the diagram.\n- Add a subtle background grid behind the flowchart covering the entire canvas for reference.\n- Ensure all textual labels are clearly readable with a font size of 10 pt.",
        "raw_output_metric": [
            "tikzpicture",
            "Arrival",
            "Homeroom",
            "Math",
            "Science",
            "Lunch",
            "Recess",
            "Dismissal",
            "School Day Schedule",
            "15 cm",
            "20 cm",
            "3 cm",
            "1.2 cm",
            "rounded rectangle",
            "->",
            "grid"
        ],
        "VQA": {
            "How many period nodes are present in the diagram?": "7",
            "Which period label is at the very top of the flowchart?": "Arrival",
            "Which period label is shown at the bottom of the flowchart?": "Dismissal",
            "What are the shape and dimensions of each node?": "Rounded rectangle, 3 cm wide and 1.2 cm high",
            "How are the nodes arranged in the diagram?": "In a vertical layout with uniform spacing",
            "How are consecutive nodes connected?": "With downward solid arrows featuring clear arrowheads",
            "What title is displayed above the diagram and how is it styled?": "School Day Schedule, centered and bold",
            "What are the dimensions of the canvas and how is the diagram positioned within it?": "15 cm wide by 20 cm tall and centered",
            "Is there a background feature included in the diagram?": "Yes, a subtle grid covering the entire canvas"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001311",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a decision-making flowchart for a business process.\n\nFeature Requirements:\n- Create exactly 7 nodes labeled \"Start\", \"Step 1\", \"Decision\", \"Step 2\", \"Alternative\", \"Step 3\", and \"End\".\n- Arrange the nodes vertically along a central axis with equal vertical spacing.\n- Display the \"Decision\" node as a diamond shape while all other nodes are rectangles.\n- Connect the nodes with directed arrows, ensuring each arrow has a clear arrowhead.\n- Draw a branching arrow from the \"Decision\" node to both \"Step 2\" and \"Alternative\" nodes.\n- Use solid lines for all connecting arrows with a uniform stroke width.\n- Ensure each node has a fixed size of 3 cm width and 1.5 cm height.\n- Center the entire diagram within a canvas of width 12 cm and height 14 cm.\n- Place a bold, centered title above the diagram with the text \"Business Decision Flowchart\" in a 12 pt sans-serif font.\n- Use a consistent color for all node outlines and a different, contrasting color for the arrow lines.",
        "raw_output_metric": [
            "Start",
            "Step 1",
            "Decision",
            "Step 2",
            "Alternative",
            "Step 3",
            "End",
            "Business Decision Flowchart",
            "tikzpicture",
            "node",
            "rectangle",
            "diamond",
            "3 cm",
            "1.5 cm",
            "12 cm",
            "14 cm",
            "12 pt",
            "sans-serif",
            "->",
            "line width"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Business Decision Flowchart",
            "What font style and size is used for the title?": "12 pt sans-serif, bold and centered",
            "How many nodes are there in the diagram?": "7",
            "Which node is represented by a diamond shape?": "Decision",
            "How are the nodes arranged in the diagram?": "Vertically along a central axis with equal vertical spacing",
            "What are the fixed dimensions of each node?": "3 cm width and 1.5 cm height",
            "From the 'Decision' node, which two nodes receive branching arrows?": "Step 2 and Alternative",
            "What is consistent about the arrow style throughout the diagram?": "Directed arrows with clear arrowheads, solid lines, and uniform stroke width",
            "How is the overall diagram positioned on the canvas?": "Centered within a canvas of 12 cm width and 14 cm height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001312",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram illustrating a miniature solar system with orbits and planets.\n\nFeature Requirements:\n- Place a central sun depicted as a yellow circle with a radius of 1 cm at the center of a 15 cm by 15 cm canvas.\n- Draw exactly 5 planets as circles with radii ranging between 0.3 cm and 0.7 cm, each in a different color.\n- Position each planet along a unique elliptical orbit around the sun; the orbits must have varying eccentricities.\n- Render the orbital paths using dashed lines with varying dash patterns corresponding to each planet's distance from the sun.\n- Label each planet with a unique number from 1 to 5, placing the label directly above each planet.\n- Differentiate the sun from the planets by outlining it with a thicker border line.\n- Include horizontal grid lines across the background with a spacing of 1 cm for both axes.\n- Add a centered bold title above the diagram reading \"Mini Solar System\" to clearly indicate the theme.\n- Place a small legend in the bottom right corner that maps each planet's color to its corresponding number.",
        "raw_output_metric": [
            "tikzpicture",
            "Mini Solar System",
            "15cm",
            "1cm",
            "yellow",
            "circle",
            "thick",
            "dashed",
            "ellipse",
            "0.3cm",
            "0.7cm",
            "1",
            "2",
            "3",
            "4",
            "5",
            "legend",
            "grid"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Mini Solar System",
            "How many planets are drawn around the sun?": "5",
            "What is unique about the sun's border compared to the planets?": "It has a thicker border",
            "What is the canvas size for the diagram?": "15 cm by 15 cm",
            "What spacing is used for the horizontal grid lines?": "1 cm",
            "How are the orbital paths rendered?": "Dashed lines with varying dash patterns",
            "Where is the legend located in the diagram?": "Bottom right",
            "How are the planet labels placed relative to each planet?": "Directly above each planet"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001313",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting a vertical flowchart representing a sequential processing pipeline.\n\nFeature Requirements:\n- Create exactly 7 rectangular nodes, each with a width of 2 cm and a height of 1 cm.\n- Label the nodes sequentially from top to bottom as \"Start\", \"Input\", \"Process A\", \"Decision\", \"Process B\", \"Process C\", and \"End\".\n- Arrange the nodes vertically and centered within the canvas, maintaining a uniform vertical spacing of 1.5 cm between the centers of consecutive nodes.\n- Connect each node to its immediate lower neighbor with straight arrows, ensuring the arrows have a consistent arrowhead style.\n- Use a blue border for all nodes and fill them with a light gray background.\n- Place the entire diagram centered on a canvas of width 12 cm and height 15 cm.\n- Include a centered title above the diagram with the text \"Sequential Processing Pipeline\" in bold sans-serif font.",
        "raw_output_metric": [
            "tikzpicture",
            "Sequential Processing Pipeline",
            "node",
            "rectangle",
            "2 cm",
            "1 cm",
            "1.5 cm",
            "Start",
            "Input",
            "Process A",
            "Decision",
            "Process B",
            "Process C",
            "End",
            "blue",
            "light gray",
            "12 cm",
            "15 cm",
            "->"
        ],
        "VQA": {
            "How many rectangular nodes are present in the diagram?": "7",
            "What are the exact dimensions of each node?": "Each node is 2 cm wide and 1 cm high",
            "What labels appear on the nodes from top to bottom?": "Start, Input, Process A, Decision, Process B, Process C, End",
            "How are the nodes arranged vertically?": "They are centered with a uniform vertical spacing of 1.5 cm between their centers",
            "What are the border and fill colors of the nodes?": "Blue border with light gray fill",
            "How are the nodes connected?": "Each node is connected to the one immediately below it with straight arrows",
            "What are the dimensions of the canvas on which the diagram is centered?": "12 cm x 15 cm",
            "What is the text and style of the title above the diagram?": "Sequential Processing Pipeline in bold sans-serif font"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001314",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a star network layout with a central hub connected to multiple peripheral nodes.\n\nFeature Requirements:\n- Draw exactly 7 nodes: one central node labeled \"Hub\" and six peripheral nodes labeled \"A\", \"B\", \"C\", \"D\", \"E\", and \"F\".\n- Position the central node at the center of a canvas sized 12 cm by 12 cm, and arrange the six peripheral nodes evenly in a circular layout around the hub.\n- Connect the central node to each peripheral node with solid lines.\n- Render all nodes as circles with a fixed radius of 0.4 cm; fill the central node with a distinct color, such as light blue, while keeping peripheral nodes white.\n- Place clear, centered labels inside each node using the same font style.\n- Include a title \"Star Network Diagram\" centered above the diagram in bold text with a font size of 14 pt.",
        "raw_output_metric": [
            "Star Network Diagram",
            "Hub",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "12 cm",
            "0.4 cm",
            "light blue"
        ],
        "VQA": {
            "How many nodes are displayed in the diagram?": "7",
            "What label is displayed inside the central node?": "Hub",
            "What labels are used for the peripheral nodes?": "A, B, C, D, E, and F",
            "Is the central node filled with a color distinct from the peripheral nodes? If so, what is it?": "Yes, light blue",
            "How are the peripheral nodes arranged around the central hub?": "Evenly in a circular layout",
            "How many connections (lines) are drawn from the central node to the peripheral nodes?": "6",
            "What is the title displayed above the diagram?": "Star Network Diagram",
            "How is the title styled in terms of text?": "Centered, bold, 14 pt",
            "What is the radius of each node that is drawn as a circle?": "0.4 cm",
            "What are the overall canvas dimensions for the diagram?": "12 cm by 12 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001315",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple electrical circuit layout.\n\nFeature Requirements:\n- Display exactly 6 components, each represented by a square node with side lengths of 1 cm.\n- Label each component with a unique letter from A to F.\n- Arrange the components in two horizontal rows with three nodes per row, equally spaced.\n- Connect each node in the top row to the corresponding node in the bottom row using dashed lines to represent resistors.\n- Connect adjacent nodes in the same row with solid lines to represent wires.\n- Ensure all nodes are aligned on a grid with clear horizontal and vertical spacing.\n- Center the entire diagram within a canvas of width 12 cm and height 8 cm.\n- Include a title above the diagram that reads \"Simple Circuit Layout\" using an italicized font.\n- Place a legend in the bottom-right corner detailing the connection types (solid lines for wires, dashed lines for resistors).",
        "raw_output_metric": [
            "tikzpicture",
            "Simple Circuit Layout",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "rectangle",
            "1 cm",
            "12 cm",
            "8 cm",
            "dashed",
            "solid",
            "legend"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Simple Circuit Layout (italicized)",
            "How many components (nodes) are shown in the diagram?": "6",
            "What labels are assigned to the components?": "A, B, C, D, E, F",
            "How are the components arranged?": "In two horizontal rows with three nodes per row, equally spaced",
            "What are the visual characteristics of each component node?": "Square nodes with side lengths of 1 cm",
            "How are the top and bottom nodes connected?": "Connected with dashed lines to represent resistors",
            "How are the adjacent nodes within the same row connected?": "Connected with solid lines to represent wires",
            "What is the overall canvas size for the diagram?": "12 cm in width and 8 cm in height",
            "Where is the legend placed and what information does it include?": "Placed in the bottom-right corner; it details that solid lines represent wires and dashed lines represent resistors"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001316",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a binary tree with three hierarchical levels.\n\nFeature Requirements:\n- Create exactly 7 nodes: one root node at the top, two nodes on the second level, and four nodes on the third level.\n- Arrange the nodes in a tree layout with the root centered at the top and the subsequent levels evenly spaced horizontally.\n- Use rectangular nodes with dimensions of 1.5 cm by 0.75 cm for all nodes.\n- Label the nodes with unique identifiers: label the root as \"1\", the second-level nodes as \"2\" and \"3\", and the third-level nodes as \"4\", \"5\", \"6\", and \"7\".\n- Connect each parent node to its two direct child nodes with dotted lines.\n- Fill each node with a light gray color and outline them in black.\n- Center the entire tree within a 15 cm by 20 cm canvas.\n- Place a bold, centered title reading \"Binary Tree Structure\" above the diagram.",
        "raw_output_metric": [
            "tikzpicture",
            "Binary Tree Structure",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "dotted",
            "rectangle",
            "1.5cm",
            "0.75cm",
            "lightgray",
            "black",
            "15cm",
            "20cm"
        ],
        "VQA": {
            "What is the title text displayed at the top of the diagram?": "Binary Tree Structure",
            "How many nodes are present in the tree?": "7",
            "What label is assigned to the root node?": "1",
            "Which labels are given to the second-level nodes?": "2 and 3",
            "What labels are assigned to the third-level nodes?": "4, 5, 6, and 7",
            "What are the dimensions and shape of each node?": "Rectangular with dimensions 1.5 cm by 0.75 cm",
            "How are the connections between parent and child nodes styled?": "Dotted lines",
            "What are the fill and outline colors used for the nodes?": "Light gray fill with a black outline",
            "How is the tree positioned within the canvas?": "Centered on a 15 cm by 20 cm canvas"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001317",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a solar system model with a central sun and six orbiting planets.\n\nFeature Requirements:\n- Place the sun as a yellow circle at the center of the canvas, designated at coordinates (0, 0), with a radius of 0.7 cm.\n- Arrange exactly six planets, each represented as a circle with a radius of 0.3 cm, and assign each a unique label from \"A\" to \"F\".\n- Draw six circular orbits using dashed lines, each centered at (0, 0) with radii increasing by 2 cm increments, starting from 2 cm up to 12 cm.\n- Position each planet exactly on its corresponding orbit at an angle of 45 degrees from the positive x-axis.\n- Ensure that all celestial body labels are placed inside the circles in a centered and legible font size.\n- Center the entire diagram within a canvas of width 14 cm and height 14 cm.\n- Include a title centered above the diagram with the text \"Simplified Solar System\" in bold font.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "0,0",
            "0.7",
            "0.3",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "dashed",
            "2 cm",
            "4 cm",
            "6 cm",
            "8 cm",
            "10 cm",
            "12 cm",
            "45",
            "\\textbf{Simplified Solar System}",
            "14 cm"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Simplified Solar System",
            "How many orbit paths (dashed circles) are present?": "Six",
            "What are the radii of the orbit paths?": "2 cm, 4 cm, 6 cm, 8 cm, 10 cm, and 12 cm",
            "What is the color and position of the sun?": "Yellow circle at the center (0, 0)",
            "What is the radius of the sun?": "0.7 cm",
            "How many planets are depicted?": "Six",
            "What labels are assigned to these planets?": "A, B, C, D, E, F",
            "At what angle are the planets positioned on their orbits?": "45 degrees from the positive x-axis",
            "What is the radius of each planet?": "0.3 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001318",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a schematic of a manufacturing assembly line.\n\nFeature Requirements:\n- Display exactly 7 rectangles representing workstations, each labeled uniquely from A to G.\n- Arrange the workstations in a horizontal line with a 1 cm gap between each consecutive rectangle.\n- Connect each adjacent workstation with an arrow indicating the direction of workflow.\n- Use dashed lines for the arrows connecting workstations.\n- Ensure every workstation has dimensions of 2 cm in width and 1 cm in height with rounded corners.\n- Position the entire diagram centered within a canvas of width 15 cm and height 5 cm.\n- Include a subtitle centered below the diagram with the text \"Manufacturing Line Flow\" in italic font.",
        "raw_output_metric": [
            "tikzpicture",
            "rectangle",
            "rounded corners",
            "2cm",
            "1cm",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "->",
            "dashed",
            "15cm",
            "5cm",
            "Manufacturing Line Flow"
        ],
        "VQA": {
            "How many workstations (rectangles) are displayed in the diagram?": "7",
            "What labels are assigned to the workstations?": "A, B, C, D, E, F, G",
            "What is the gap between each consecutive workstation?": "1 cm",
            "How many arrows connect the adjacent workstations?": "6",
            "What style are the arrows connecting the workstations?": "Dashed lines",
            "What are the dimensions of each workstation rectangle?": "2 cm by 1 cm",
            "What are the characteristics of the workstation rectangles' corners?": "Rounded corners",
            "What is the subtitle below the diagram and its styling?": "\"Manufacturing Line Flow\" in italic",
            "What is the size of the canvas within which the diagram is centered?": "15 cm in width and 5 cm in height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001319",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a radar screen with multiple concentric circles and radial lines.\n\nFeature Requirements:\n- Draw exactly 6 concentric circles with radii of 1 cm, 2 cm, 3 cm, 4 cm, 5 cm, and 6 cm.\n- Create 12 radial lines evenly spaced around the center, each extending from the center to the outermost circle.\n- Mark a small red circle at the center with a radius of 0.2 cm.\n- Place 4 small black dots on the circumference of the outermost circle at angles of 45°, 135°, 225°, and 315°, each with a radius of 0.1 cm.\n- Use dashed lines for the radial lines and solid lines for the concentric circles.\n- Set the entire diagram centered within a 14 cm by 14 cm canvas.\n- Include a title centered above the diagram with the text \"Radar Display\" in a bold font.\n- Ensure all lines and circles have a line thickness of 1 pt.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Radar Display",
            "line width=1pt",
            "dashed",
            "fill=red",
            "fill=black",
            "1 cm",
            "2 cm",
            "3 cm",
            "4 cm",
            "5 cm",
            "6 cm",
            "0.2cm",
            "0.1cm",
            "45",
            "135",
            "225",
            "315",
            "14cm",
            "circle"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Radar Display",
            "How many concentric circles are drawn?": "6",
            "What are the radii of the concentric circles?": "1 cm, 2 cm, 3 cm, 4 cm, 5 cm, 6 cm",
            "How many radial lines extend from the center?": "12",
            "What style are the radial lines drawn in?": "Dashed",
            "What is the radius of the small red circle at the center?": "0.2 cm",
            "How many black dots are placed on the outermost circle?": "4",
            "At which angles are the black dots located?": "45°, 135°, 225°, and 315°",
            "What are the dimensions of the canvas?": "14 cm by 14 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001320",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a futuristic plaza featuring statues, curved walkways, and overhead light fixtures.\n\nFeature Requirements:\n- Include exactly 6 statue nodes, each depicted as a square with a side length of 0.8 cm.\n- Arrange all statues in a horizontal line at y-coordinate 0 cm, evenly spaced along a canvas width of 12 cm.\n- Draw exactly 4 curved walkways connecting adjacent statues, forming graceful arches below the statues.\n- Represent each walkway with a dashed line style and assign a contrasting color.\n- Place 3 circular light fixtures above the central statue, each with a radius of 0.3 cm, positioned on an arc.\n- Position the entire layout centrally within a canvas of width 15 cm and height 10 cm.\n- Include a title centered at the top with the text \"Futuristic Plaza Layout\" in bold font.\n- Use a consistent line thickness of 1 pt for all elements in the diagram.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Futuristic Plaza Layout",
            "node",
            "square",
            "circle",
            "0.8cm",
            "12cm",
            "0cm",
            "6",
            "4",
            "dashed",
            "0.3cm",
            "3",
            "arc",
            "15cm",
            "10cm",
            "1pt"
        ],
        "VQA": {
            "What is the title text displayed at the top of the layout?": "Futuristic Plaza Layout",
            "How many statues are there in the diagram?": "6",
            "What shape are each of the statues depicted as?": "Square",
            "What is the side length of each statue?": "0.8 cm",
            "How are the statues arranged on the canvas?": "Horizontally along y = 0 cm, evenly spread across a 12 cm width",
            "How many curved walkways connect the statues?": "4",
            "What style are the walkways drawn in?": "Dashed lines with a contrasting color",
            "How many light fixtures are placed above the central statue?": "3",
            "What is the shape and size of each light fixture?": "Circular with a radius of 0.3 cm",
            "What are the overall dimensions of the canvas?": "15 cm in width and 10 cm in height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001321",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram illustrating a process flowchart with multiple sequential steps.\n\nFeature Requirements:\n- Create exactly 6 process nodes represented as rectangles labeled \"Step 1\" through \"Step 6\".\n- Arrange the rectangles in a vertical column centered horizontally on the canvas with equal spacing between them.\n- Ensure each rectangle measures exactly 3 cm in width and 1 cm in height.\n- Connect each rectangle to the one directly below it using a single straight downward arrow with a 1pt line thickness.\n- Position the top rectangle exactly 1 cm from the top edge and the bottom rectangle exactly 1 cm from the bottom edge of the canvas.\n- Use solid lines for both the rectangle borders and the connecting arrows.\n- Set the overall canvas dimensions to a width of 6 cm and a height of 12 cm.\n- Center a bold title \"Process Flowchart\" above the diagram at the top of the canvas.",
        "raw_output_metric": [
            "Process Flowchart",
            "Step 1",
            "Step 2",
            "Step 3",
            "Step 4",
            "Step 5",
            "Step 6",
            "3cm",
            "1cm",
            "6cm",
            "12cm",
            "1pt",
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Process Flowchart (bold)",
            "How many process nodes are included in the diagram?": "6",
            "What labels are used on the process nodes?": "Step 1, Step 2, Step 3, Step 4, Step 5, Step 6",
            "What are the dimensions of each rectangle?": "3 cm in width and 1 cm in height",
            "How are the nodes arranged within the canvas?": "In a vertical column centered horizontally with equal spacing",
            "What type of lines connect the nodes?": "Solid arrows with a 1pt line thickness",
            "How far is the top process node from the top edge of the canvas?": "1 cm",
            "How far is the bottom process node from the bottom edge of the canvas?": "1 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001322",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical family tree structure.\n\nFeature Requirements:\n- Create exactly 7 nodes, each labeled with one of the following: \"Grandparent\", \"Parent1\", \"Parent2\", \"Child1\", \"Child2\", \"Child3\", \"Child4\".\n- Position the \"Grandparent\" node at the top center of the canvas.\n- Arrange the \"Parent1\" and \"Parent2\" nodes directly beneath the \"Grandparent\", spaced evenly along a horizontal line.\n- Place \"Child1\" and \"Child2\" beneath \"Parent1\", and \"Child3\" and \"Child4\" beneath \"Parent2\", each pair arranged in a horizontal row.\n- Connect \"Grandparent\" to both \"Parent1\" and \"Parent2\" with solid lines.\n- Connect \"Parent1\" to both \"Child1\" and \"Child2\", and \"Parent2\" to both \"Child3\" and \"Child4\" using solid lines.\n- Represent all nodes as rectangles with dimensions 2 cm by 1 cm.\n- Center the entire diagram within a canvas of width 12 cm and height 12 cm.\n- Include a title centered above the diagram with the text \"Family Tree Diagram\" in italic font.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Family Tree Diagram",
            "Grandparent",
            "Parent1",
            "Parent2",
            "Child1",
            "Child2",
            "Child3",
            "Child4",
            "rectangle",
            "2 cm",
            "1 cm",
            "12 cm"
        ],
        "VQA": {
            "What is the title displayed above the diagram and how is it styled?": "Family Tree Diagram in italic font",
            "How many nodes are present in the diagram?": "7",
            "Which node is positioned at the top center?": "Grandparent",
            "Which two nodes are directly beneath the Grandparent, and how are they arranged?": "Parent1 and Parent2, arranged evenly on a horizontal line",
            "What nodes are shown beneath each parent?": "Child1 and Child2 beneath Parent1; Child3 and Child4 beneath Parent2",
            "How are the nodes represented in terms of shape and dimensions?": "Rectangles with dimensions 2 cm by 1 cm",
            "What are the overall canvas dimensions?": "12 cm by 12 cm",
            "What type of lines connects the nodes?": "Solid lines"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001323",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a multi-level organization chart.\n\nFeature Requirements:\n- Create exactly 8 nodes: one at the top labeled \"CEO\", two in the second level labeled \"Manager1\" and \"Manager2\", three in the third level labeled \"Team1\", \"Team2\", \"Team3\", and two at the bottom labeled \"Staff1\" and \"Staff2\".\n- Use rectangular nodes with a fixed width of 2 cm and a height of 1 cm for all nodes.\n- Set the top \"CEO\" node at the center of the top border of a 12 cm by 12 cm canvas, and position the remaining nodes in evenly spaced horizontal rows below.\n- Connect the nodes with directed arrows: draw arrows from the \"CEO\" node to each manager, from each manager to the corresponding team nodes, and from team nodes to their respective staff nodes.\n- Use solid lines with clearly visible arrowheads for all connections.\n- Ensure all nodes have a light gray fill and a dark border.\n- Include the title \"Company Structure\" in bold text, centered above the diagram and aligned with the canvas top.\n- Position all elements using precise coordinate specifications within the Tikz environment.",
        "raw_output_metric": [
            "tikzpicture",
            "node",
            "CEO",
            "Manager1",
            "Manager2",
            "Team1",
            "Team2",
            "Team3",
            "Staff1",
            "Staff2",
            "textbf{Company Structure}",
            "rectangle",
            "fill=lightgray",
            "draw=black",
            "2 cm",
            "1 cm",
            "12 cm",
            "->"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Company Structure",
            "How many nodes are present in the diagram?": "8",
            "What is the label of the top node?": "CEO",
            "Which nodes appear in the second level?": "Manager1 and Manager2",
            "Which nodes are shown in the third level?": "Team1, Team2, and Team3",
            "Which labels can be found at the bottom level?": "Staff1 and Staff2",
            "What are the fixed dimensions of each node?": "2 cm by 1 cm",
            "What fill color is used for all the nodes?": "light gray",
            "What style is used for the border of each node?": "dark border",
            "How many rows of nodes are arranged in the diagram?": "4 rows"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001324",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical organizational chart with three levels.\n\nFeature Requirements:\n- Display exactly 8 nodes; one central node labeled \"CEO\", three second-level nodes labeled \"CTO\", \"CFO\", \"COO\", and four third-level nodes labeled \"CMO\", \"HR\", \"IT\", and \"Sales\".\n- Arrange the nodes in three horizontal levels: the top level with \"CEO\", the middle level with \"CTO\", \"CFO\", and \"COO\" evenly spaced, and the bottom level with \"CMO\", \"HR\", \"IT\", and \"Sales\" evenly spaced.\n- Draw solid arrows connecting the \"CEO\" node to each of the three second-level nodes, and from each second-level node to two distinct third-level nodes.\n- Set all nodes to be rectangles with rounded corners (radius 0.3 cm) and a fixed size of 2 cm in width and 1 cm in height.\n- Position the entire diagram centered within a canvas of width 15 cm and height 12 cm.\n- Ensure arrows are drawn with a line width of 1 pt and without any additional styling.\n- Maintain consistent vertical spacing of 3 cm between levels and horizontal spacing of 2 cm between nodes in each level.\n- Include a centered title above the diagram with the text \"Organizational Chart\" in bold.",
        "raw_output_metric": [
            "CEO",
            "CTO",
            "CFO",
            "COO",
            "CMO",
            "HR",
            "IT",
            "Sales",
            "Organizational Chart",
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "node",
            "rectangle",
            "rounded corners=0.3cm",
            "minimum width=2cm",
            "minimum height=1cm",
            "line width=1pt",
            "15cm",
            "12cm",
            "3cm",
            "2cm",
            "->"
        ],
        "VQA": {
            "What is the title text displayed above the diagram?": "Organizational Chart (in bold)",
            "How many nodes are depicted in the chart?": "8 nodes",
            "What is the label of the top-level node?": "CEO",
            "What are the labels of the second-level nodes?": "CTO, CFO, COO",
            "What are the labels of the third-level nodes?": "CMO, HR, IT, Sales",
            "What is the fixed size of each node?": "2 cm wide by 1 cm high",
            "What shape and style are the nodes?": "Rectangles with rounded corners (0.3 cm radius)",
            "How many arrows connect the CEO to second-level nodes?": "3 arrows",
            "What is the vertical spacing between the levels?": "3 cm, with a 15 cm by 12 cm centered canvas"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001325",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a botanical garden layout plan.\n\nFeature Requirements:\n- Display exactly 8 circular plots, each with a radius of 0.7 cm and labeled uniquely with numbers from 1 to 8.\n- Arrange the plots in two horizontal rows of four, with the centers in each row spaced 2 cm apart.\n- Draw a winding path that connects the plots sequentially in a snaking pattern using solid lines.\n- Outline each circular plot with a 1mm thick border.\n- Position the entire diagram at the center of a canvas measuring 16 cm in width and 8 cm in height.\n- Add a bold title \"Botanical Garden Layout\" centered above the diagram.\n- Include a legend positioned in the bottom right corner that explains the symbols for the plots and the path.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "Botanical Garden Layout",
            "circle",
            "0.7cm",
            "1mm",
            "2cm",
            "16cm",
            "8cm",
            "legend",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
        ],
        "VQA": {
            "How many circular plots are displayed?": "8",
            "What labels are used on the plots?": "Numbers from 1 to 8",
            "How are the plots arranged?": "In two horizontal rows of four",
            "What is the radius of each circular plot?": "0.7 cm",
            "What is the distance between the centers of the plots in each row?": "2 cm",
            "How is the connecting path drawn?": "A winding snaking pattern with solid lines",
            "What is the thickness of the borders outlining each plot?": "1mm",
            "What is the title displayed above the diagram?": "Botanical Garden Layout (in bold, centered)",
            "Where is the legend placed and what does it explain?": "Bottom right; it explains the symbols for the plots and the path",
            "What are the dimensions of the canvas?": "16 cm in width and 8 cm in height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001326",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a flowchart of a coffee brewing process.\n\nFeature Requirements:\n- Include exactly 6 rectangular nodes labeled sequentially with the texts \"Start\", \"Heat Water\", \"Add Coffee\", \"Brew\", \"Pour\", and \"Finish\".\n- Arrange the nodes in a vertical layout with a uniform gap of 1 cm between each rectangle.\n- Design each rectangle to have a fixed width of 3 cm and a height of 1.5 cm.\n- Use solid lines for the borders of all rectangles.\n- Connect each node to the next with a rightward arrow to indicate the flow from top to bottom.\n- Position the entire flowchart centered within a canvas of width 12 cm and height 16 cm.\n- Include a bold title \"Coffee Brewing Workflow\" centered above the diagram.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "Coffee Brewing Workflow",
            "Start",
            "Heat Water",
            "Add Coffee",
            "Brew",
            "Pour",
            "Finish",
            "rectangle",
            "draw",
            "->",
            "3cm",
            "1.5cm",
            "1cm",
            "12cm",
            "16cm",
            "\\end{tikzpicture}"
        ],
        "VQA": {
            "What is the bold title displayed above the diagram?": "Coffee Brewing Workflow",
            "How many rectangular nodes are shown in the flowchart?": "6",
            "What are the labels on the nodes from top to bottom?": "Start, Heat Water, Add Coffee, Brew, Pour, Finish",
            "What are the fixed dimensions of each rectangle?": "3 cm by 1.5 cm",
            "What is the uniform gap between each rectangle?": "1 cm",
            "How are the nodes connected to indicate flow?": "With rightward arrows",
            "What are the dimensions of the overall canvas?": "12 cm by 16 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001327",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical binary tree structure.\n\nFeature Requirements:\n- Create exactly 6 nodes arranged in a binary tree with one root, two children, and three grandchildren.\n- Position the root node at the top center of the canvas and distribute the remaining nodes in two lower levels with clear horizontal alignment.\n- Label each node with unique letters from A to F.\n- Draw all nodes as rectangles with a fixed width of 1 cm and height of 0.5 cm.\n- Connect the nodes using dashed lines to represent the tree branches.\n- Draw the connections so that the left child branches off at a 45-degree angle and the right child at a 135-degree angle from the parent.\n- Place the entire diagram within a canvas measuring 12 cm in width and 12 cm in height.\n- Include a title \"Binary Tree Structure\" centered above the diagram, displayed in an italic font.\n- Specify all node positions explicitly using the Tikz coordinate system.\n- Add a subtle background grid with lines spaced at 1 cm intervals.",
        "raw_output_metric": [
            "tikzpicture",
            "node",
            "rectangle",
            "dashed",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "Binary Tree Structure",
            "1 cm",
            "0.5 cm",
            "45",
            "135",
            "step=1cm",
            "grid"
        ],
        "VQA": {
            "What is the title shown above the diagram and how is it styled?": "Binary Tree Structure in italic",
            "How many nodes are displayed in the tree?": "6",
            "What unique labels are used for the nodes?": "A, B, C, D, E, F",
            "What shape and dimensions are the nodes?": "Rectangles with a width of 1 cm and a height of 0.5 cm",
            "How many levels are represented in the tree structure?": "Three levels (one root, two children, and three grandchildren)",
            "How are the nodes connected in the diagram?": "Using dashed lines with a 45° branch for left children and a 135° branch for right children",
            "What are the overall canvas dimensions of the diagram?": "12 cm by 12 cm",
            "What spacing is used for the background grid lines?": "1 cm intervals"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001328",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram illustrating a star-patterned network connecting a central node to outer nodes.\n\nFeature Requirements:\n- Display exactly 7 nodes with unique labels: \"City1\", \"City2\", \"City3\", \"City4\", \"City5\", \"City6\", and \"City7\".\n- Arrange the nodes in a star formation with one central node and six equally spaced outer nodes around it.\n- Represent the central node as a circle with a radius of 0.7 cm and each outer node as a circle with a radius of 0.5 cm.\n- Connect the central node to each outer node using dashed lines.\n- Include arrowheads on each connecting line to indicate directional flow from the central node to the outer nodes.\n- Place the entire diagram centered on a canvas of 12 cm in width by 12 cm in height.\n- Add a title centered at the top of the canvas with the text \"Star Network Configuration\" in italicized font.\n- Ensure that all nodes and lines are drawn with a black outline and no fill color.",
        "raw_output_metric": [
            "City1",
            "City2",
            "City3",
            "City4",
            "City5",
            "City6",
            "City7",
            "Star Network Configuration",
            "0.7cm",
            "0.5cm",
            "dashed",
            "->",
            "tikzpicture",
            "node",
            "circle",
            "12cm",
            "draw=black",
            "fill=none"
        ],
        "VQA": {
            "What is the title text centered at the top of the canvas?": "Star Network Configuration",
            "Is the title displayed in an italicized font?": "Yes",
            "How many nodes are present in the diagram?": "7",
            "How many outer nodes are arranged around the central node?": "6",
            "What are the unique labels assigned to the nodes?": "City1, City2, City3, City4, City5, City6, City7",
            "What is the radius of the central node?": "0.7 cm",
            "What is the radius of each outer node?": "0.5 cm",
            "How are the lines connecting the central node to the outer nodes styled?": "Dashed with arrowheads indicating directional flow",
            "Is the diagram drawn with a black outline and no fill color?": "Yes"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001329",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a stylized solar system with a central sun and orbiting planets.\n\nFeature Requirements:\n- Draw a central sun positioned at the center of the canvas as a filled yellow circle with a radius of 1 cm.\n- Add exactly 4 planets, each depicted as a filled circle with a radius of 0.4 cm and colored uniquely (e.g., red, blue, green, purple).\n- Surround the sun with 4 concentric circular orbits having radii of 3 cm, 5 cm, 7 cm, and 9 cm respectively, ensuring the orbits are perfectly centered.\n- Connect each planet to the sun using a thin dashed line that follows the respective orbital path.\n- Position the entire diagram on a canvas of width 12 cm and height 12 cm, with all components centered within this canvas.\n- Place a label beside each planet indicating its name (e.g., Planet A, Planet B, etc.) using a small, legible font.\n- Include a centered title above the diagram reading \"Stylized Solar System\" in bold with a font size of 14 pt.\n- Ensure all drawn elements use a consistent line thickness of 0.5 mm.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "12cm",
            "line width=0.5mm",
            "fill=yellow",
            "radius=1cm",
            "3cm",
            "5cm",
            "7cm",
            "9cm",
            "fill=red",
            "fill=blue",
            "fill=green",
            "fill=purple",
            "radius=0.4cm",
            "dashed",
            "Planet A",
            "Planet B",
            "Planet C",
            "Planet D",
            "Stylized Solar System",
            "14pt"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Stylized Solar System",
            "What shape and color represent the sun at the center?": "A filled yellow circle with a radius of 1 cm",
            "How many planets are shown and what are their unique colors?": "4 planets: red, blue, green, and purple",
            "What are the radii of the concentric circular orbits around the sun?": "3 cm, 5 cm, 7 cm, and 9 cm",
            "What is the radius of each planet?": "0.4 cm",
            "How are the planets connected to the sun?": "By thin dashed lines that follow the orbital paths",
            "What additional element is placed beside each planet?": "A label indicating its name (e.g., Planet A, Planet B, etc.) in a small, legible font"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001330",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a basic circuit board layout with several connected components.\n\nFeature Requirements:\n- Display exactly 8 components labeled uniquely from A to H.\n- Arrange the components in two rows with 4 components per row aligned in a rectangular grid.\n- Represent each component as a rectangle with a width of 1 cm and a height of 0.5 cm.\n- Connect adjacent components in the same row using straight solid lines.\n- Connect vertically aligned components between the two rows using dashed lines.\n- Mark the four corners of each component with a small circle of 0.1 cm radius to indicate connection points.\n- Center the entire diagram within a canvas of width 12 cm and height 8 cm.\n- Place a title reading \"Circuit Board Layout\" centered above the diagram in an italic font.",
        "raw_output_metric": [
            "tikzpicture",
            "Circuit Board Layout",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "1 cm",
            "0.5 cm",
            "0.1 cm",
            "solid",
            "dashed",
            "12 cm",
            "8 cm",
            "rectangle",
            "circle",
            "\\textit"
        ],
        "VQA": {
            "What is the title text displayed above the diagram?": "Circuit Board Layout (italicized)",
            "How many components are present in the layout?": "8",
            "Which labels are assigned to the components?": "A, B, C, D, E, F, G, H",
            "How are the components arranged?": "In two rows with 4 components per row aligned in a rectangular grid",
            "What is the size of each component?": "1 cm wide and 0.5 cm high",
            "How are adjacent components in the same row connected?": "They are connected by straight solid lines",
            "How are vertically aligned components between rows connected?": "They are connected by dashed lines",
            "What feature indicates the connection points on each component?": "Small circles of 0.1 cm radius placed at the four corners",
            "What are the overall dimensions of the canvas?": "12 cm width and 8 cm height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001331",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing an urban park layout with a central fountain and surrounding park areas.\n\nFeature Requirements:\n- Create exactly 7 distinct park areas arranged evenly in a circular pattern around the center.\n- Draw a central fountain as a filled circle with a diameter of 1 cm positioned at the center.\n- Represent each park area as a square with a side length of 1.5 cm.\n- Connect the central fountain to each park area with a curved walking path depicted by smooth solid lines.\n- Position all elements within a canvas of 15 cm by 15 cm, ensuring the diagram is completely centered.\n- Color each park area square in a light green shade to distinguish them from other elements.\n- Place a bold, centered title reading \"Central Park Layout\" above the diagram.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Central Park Layout",
            "15cm",
            "1cm",
            "1.5cm",
            "light green",
            "circle",
            "square",
            "smooth"
        ],
        "VQA": {
            "What is the title text displayed above the diagram?": "Central Park Layout",
            "How many park areas are arranged around the central fountain?": "7",
            "What geometric shape is used to represent each park area?": "Square",
            "What is the side length of each park area square?": "1.5 cm",
            "What color are the park area squares filled with?": "Light green",
            "How is the central fountain depicted in the diagram?": "As a filled circle",
            "What is the diameter of the central fountain?": "1 cm",
            "How are the walking paths connecting the central fountain to the park areas drawn?": "Curved smooth solid lines",
            "What are the dimensions of the overall canvas?": "15 cm by 15 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001332",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simplified solar system model.\n\nFeature Requirements:\n- Create exactly 6 shapes: one central sun and five distinct planets.\n- Place the sun at the exact center of the diagram at coordinate (0,0) and represent it with a yellow circle of radius 0.8 cm.\n- Arrange the five planets on concentric circular orbits with radii of 2 cm, 4 cm, 6 cm, 8 cm, and 10 cm respectively.\n- Draw each orbit as a dashed circle with a dash pattern of 1 mm on and 1 mm off.\n- Represent each planet as a circle of radius 0.3 cm and assign each a unique color.\n- Label the sun with the text \"Sun\" and each planet with \"Planet 1\", \"Planet 2\", etc., ensuring the labels are clearly readable near the corresponding objects.\n- Center the entire diagram within a canvas of width 22 cm and height 22 cm and place a bold title \"Simplified Solar System\" centered above the diagram.",
        "raw_output_metric": [
            "Simplified Solar System",
            "Sun",
            "Planet 1",
            "Planet 2",
            "Planet 3",
            "Planet 4",
            "Planet 5",
            "(0,0)",
            "22 cm",
            "yellow",
            "0.8 cm",
            "0.3 cm",
            "2 cm",
            "4 cm",
            "6 cm",
            "8 cm",
            "10 cm",
            "dashed",
            "1 mm on",
            "1 mm off",
            "tikzpicture"
        ],
        "VQA": {
            "What is the overall canvas size of the diagram?": "22 cm by 22 cm",
            "What is the title at the top of the diagram?": "Simplified Solar System (in bold)",
            "How many shapes represent the solar system objects?": "6",
            "Where is the Sun located and how is it styled?": "At (0,0) as a yellow circle with a radius of 0.8 cm and labeled 'Sun'",
            "How many planets are depicted and how are they labeled?": "5, labeled 'Planet 1' to 'Planet 5'",
            "What are the radii of the planetary orbits?": "2 cm, 4 cm, 6 cm, 8 cm, and 10 cm",
            "How are the orbital paths drawn?": "Dashed circles with a pattern of 1 mm on and 1 mm off",
            "What is the appearance of each planet?": "Each planet is a circle of radius 0.3 cm with a unique color"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001333",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical family tree.\n\nFeature Requirements:\n- Include exactly 7 nodes representing three generations: a top-generation ancestor, two middle-generation children, and four bottom-generation grandchildren.\n- Position the top-generation node at the center top, with the two middle-generation nodes directly below it, evenly spaced horizontally.\n- Place each middle-generation node above two bottom-generation nodes, aligned horizontally and connected by vertical lines.\n- Use rectangular nodes with a width of 1.5 cm and a height of 0.75 cm; label the top node \"Grandparent\", the middle nodes \"Parent 1\" and \"Parent 2\", and the bottom nodes \"Child 1\", \"Child 2\", \"Child 3\", and \"Child 4\".\n- Connect parent and child nodes using arrows with a line thickness of 1 pt to indicate the direction of inheritance.\n- Ensure all nodes are uniformly styled with a solid black border of 0.5 pt and a light fill color.\n- Center the entire diagram on a canvas of width 14 cm and height 10 cm, and include a title above the diagram with the text \"Family Tree Diagram\" in bold font.",
        "raw_output_metric": [
            "tikzpicture",
            "Family Tree Diagram",
            "Grandparent",
            "Parent 1",
            "Parent 2",
            "Child 1",
            "Child 2",
            "Child 3",
            "Child 4",
            "rectangle",
            "1.5 cm",
            "0.75 cm",
            "0.5 pt",
            "1 pt",
            "14 cm",
            "10 cm"
        ],
        "VQA": {
            "What is the title text displayed above the diagram?": "Family Tree Diagram",
            "How many nodes are present in the diagram?": "7",
            "What label does the top node display?": "Grandparent",
            "Which labels are used for the two middle-generation nodes?": "Parent 1 and Parent 2",
            "What labels are assigned to the four bottom-generation nodes?": "Child 1, Child 2, Child 3, and Child 4",
            "Are the nodes rectangular with dimensions of 1.5 cm by 0.75 cm?": "Yes",
            "What type and thickness is the border around each node?": "Solid black border of 0.5 pt",
            "How are parent and child nodes connected in the diagram?": "By arrows with a line thickness of 1 pt",
            "Is the top-generation node centered at the top of the canvas?": "Yes",
            "Does each middle-generation node have two bottom-generation nodes directly below it aligned horizontally?": "Yes"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001334",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a radial geometric art piece composed of multiple regular polygons.\n\nFeature Requirements:\n- Create exactly 7 polygons, each being a regular polygon.\n- Use a unique number of sides for each polygon, ranging sequentially from 3 to 9 sides.\n- Arrange the polygons evenly in a circular layout around the center point (0,0) with equal angular separation.\n- Ensure each polygon is drawn with dashed lines of 1pt thickness.\n- Color each polygon with a distinct shade of blue from a predefined set of 7 specific blue hues.\n- Draw a decorative circle with a radius of 4 cm centered at (0,0) and ensure one vertex of each polygon touches the circle's circumference.\n- Label each polygon at its center with the corresponding number of its sides.\n- Include a title above the diagram reading \"Radial Polygon Art\" in a bold sans-serif font and centered horizontally.\n- Position the entire diagram within a canvas of width 12 cm and height 12 cm.\n- Ensure all graphical elements are accurately positioned relative to a Cartesian coordinate system centered at (0,0).",
        "raw_output_metric": [
            "Radial Polygon Art",
            "regular polygon",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "dashed",
            "1pt",
            "4cm",
            "12cm",
            "(0,0)",
            "tikzpicture",
            "node",
            "circle",
            "\\textbf",
            "\\sffamily"
        ],
        "VQA": {
            "What is the title text printed above the diagram?": "Radial Polygon Art",
            "How many regular polygons are displayed in the diagram?": "7",
            "What are the numbers of sides of the polygons?": "3, 4, 5, 6, 7, 8, and 9",
            "What line style is used for drawing each polygon?": "Dashed lines of 1pt thickness",
            "Which geometric element touches one vertex of each polygon?": "A decorative circle with a 4 cm radius centered at (0,0)",
            "How are the polygons arranged around the center?": "Evenly in a circular layout with equal angular separation",
            "What color scheme is applied to the polygons?": "Distinct shades of blue from a set of 7 blue hues",
            "What label is displayed at the center of each polygon?": "The number of its sides"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001335",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting an underwater ecosystem scene with various marine life elements.\n\nFeature Requirements:\n- Include exactly 7 elements: 3 fish, 2 corals, 1 seahorse, and 1 starfish, each with a unique label.\n- Position the fish near the center of the canvas, ensuring their shapes are defined using smooth curved lines.\n- Place the corals along the bottom edge of the canvas, using straight line branches to illustrate them.\n- Arrange the seahorse and starfish on the left and right sides respectively, making sure they differ in size from the fish.\n- Define the entire scene on a canvas measuring 12 cm in width and 8 cm in height.\n- Draw a background rectangle that covers the whole canvas and fill it with a blue color to represent water.\n- Ensure all elements are clearly labeled with their names, such as “Fish 1”, “Coral A”, etc.\n- Use basic shapes and lines to maintain simplicity and clarity in the visual representation.\n- Center a title \"Underwater Scene\" above the diagram in italic font.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "Underwater Scene",
            "Fish 1",
            "Fish 2",
            "Fish 3",
            "Coral A",
            "Coral B",
            "Seahorse",
            "Starfish",
            "12cm",
            "8cm",
            "blue",
            "rectangle",
            "smooth"
        ],
        "VQA": {
            "How many fish elements are present in the scene?": "3",
            "What is the label of the central title above the diagram?": "Underwater Scene (in italic)",
            "How many coral elements are drawn along the bottom edge?": "2",
            "Which style of lines is used to depict the fish?": "Smooth curved lines",
            "Where is the seahorse positioned on the canvas?": "Left side",
            "Where is the starfish positioned on the canvas?": "Right side",
            "What are the dimensions of the canvas?": "12 cm by 8 cm",
            "What color fills the background rectangle representing water?": "Blue"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001336",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram illustrating a mini solar system with a sun and five orbiting planets.\n\nFeature Requirements:\n- Place a central circle representing the sun, with a radius of 1 cm, filled in bright yellow.\n- Create exactly 5 orbiting planets, each drawn as a circle of radius 0.4 cm, using five distinct fill colors (such as blue, red, green, purple, and orange).\n- Arrange the planets along a circular orbit around the sun with equal angular separation, starting at an orbit radius of 3 cm.\n- Draw each planet's orbit as a dotted circle with a stroke width of 0.5 pt.\n- Connect each planet to the sun with a thin solid line to represent gravitational lines.\n- Label each planet with its name (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\") positioned just outside of the planet's circle.\n- Ensure the entire diagram is centered on a canvas of 12 cm by 12 cm.\n- Include a title centered above the diagram with the text \"Mini Solar System\" in italicized font.",
        "raw_output_metric": [
            "tikzpicture",
            "Mini Solar System",
            "Mercury",
            "Venus",
            "Earth",
            "Mars",
            "Jupiter",
            "fill=yellow",
            "radius=1cm",
            "radius=0.4cm",
            "blue",
            "red",
            "green",
            "purple",
            "orange",
            "dotted",
            "line width=0.5pt",
            "3cm",
            "12cm"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Mini Solar System (in italicized font)",
            "How many orbiting planets are depicted in the diagram?": "5",
            "What is the radius of the sun shown at the center?": "1 cm",
            "What is the fill color of the sun?": "Bright yellow",
            "What is the radius of each orbiting planet?": "0.4 cm",
            "What distinct fill colors are used for the planets?": "Blue, red, green, purple, and orange",
            "At what distance from the sun are the planets positioned along their circular orbit?": "3 cm",
            "How are the planets' orbit lines drawn?": "Dotted circles with a stroke width of 0.5 pt"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001337",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a radial floral pattern with petals arranged around a central circle.\n\nFeature Requirements:\n- Draw exactly 8 petals evenly distributed around a central circle.\n- Place a central circle with a radius of 1 cm at the center of the canvas.\n- Create each petal as an ellipse with a horizontal radius of 2 cm and a vertical radius of 0.8 cm, rotated by multiples of 45 degrees.\n- Connect each petal to the central circle using a thin solid line.\n- Fill each petal with a unique color to distinguish them from one another.\n- Ensure all elements are positioned symmetrically within the diagram.\n- Center the entire illustration on a canvas measuring 15 cm by 15 cm.\n- Include a title \"Radial Floral Pattern\" in bold font centered above the diagram.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "Radial Floral Pattern",
            "15cm",
            "circle (0,0) circle (1cm)",
            "ellipse",
            "rotate=",
            "2cm",
            "0.8cm",
            "45"
        ],
        "VQA": {
            "How many petals are drawn around the central circle?": "8",
            "What is the radius of the central circle at the center?": "1 cm",
            "How are the petals rotated relative to the center?": "They are rotated by multiples of 45 degrees.",
            "What are the dimensions of each petal (ellipse)?": "Horizontal radius 2 cm and vertical radius 0.8 cm",
            "How is each petal connected to the central circle?": "With a thin solid line",
            "Does each petal have a unique fill color?": "Yes",
            "What are the canvas dimensions for the entire diagram?": "15 cm by 15 cm",
            "What is the title displayed above the diagram and how is it styled?": "\"Radial Floral Pattern\" in bold font"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001338",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a three-tier organizational chart.\n\nFeature Requirements:\n- Create exactly 9 nodes using rectangular shapes with dimensions of 2 cm by 1 cm.\n- Arrange the nodes into three levels: one node at the top for \"CEO\", three nodes in the middle for \"Managers\", and five nodes at the bottom for \"Team Members\".\n- Position the top node centered at the top, with the three middle nodes evenly spaced horizontally below it, and the five bottom nodes aligned in a horizontal row beneath the middle level.\n- Connect the top node to each of the three middle nodes with solid straight lines.\n- Connect each middle node to exactly two distinct bottom nodes using dashed straight lines.\n- Fill all nodes with a white background and outline them with a black border.\n- Include a bold title \"Company Structure\" centered above the diagram.\n- Ensure the entire diagram is centered within a canvas measuring 15 cm in width and 12 cm in height.",
        "raw_output_metric": [
            "tikzpicture",
            "Company Structure",
            "CEO",
            "Managers",
            "Team Members",
            "2cm",
            "1cm",
            "15cm",
            "12cm",
            "dashed"
        ],
        "VQA": {
            "What is the bold title centered above the diagram?": "Company Structure",
            "How many total nodes are created in the diagram?": "9",
            "How are the nodes distributed across the three levels?": "1 at the top, 3 in the middle, and 5 at the bottom",
            "What are the dimensions of each rectangular node?": "2 cm by 1 cm",
            "Which text label is inside the top-level node?": "CEO",
            "What type of lines connect the top node to the middle nodes?": "Solid straight lines",
            "What type of lines connect the middle nodes to the bottom nodes?": "Dashed straight lines",
            "How many bottom nodes are connected to each middle node?": "2",
            "What are the dimensions of the canvas that contains the diagram?": "15 cm by 12 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001339",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing an abstract schematic of interconnected computer system components.\n\nFeature Requirements:\n- Display exactly 6 nodes, each labeled uniquely with the letters A, B, C, D, E, and F.\n- Arrange the nodes in a hexagonal layout with equal angular separation around a circle of radius 3 cm.\n- Designate node C as the central hub and position it at the center of the canvas.\n- Connect node C to every other node with solid straight lines.\n- Draw additional dashed edges to connect each pair of adjacent peripheral nodes.\n- Represent all nodes as uniform squares with sides measuring 1 cm.\n- Center the entire diagram within a canvas of width 12 cm and height 12 cm.\n- Place a subtitle below the diagram with the text \"System Components Network\" in an italicized font.",
        "raw_output_metric": [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "3cm",
            "12cm",
            "System Components Network",
            "tikzpicture",
            "node",
            "rectangle",
            "dashed"
        ],
        "VQA": {
            "How many nodes are displayed in the diagram?": "6",
            "Which node is positioned at the center of the canvas?": "C",
            "What shape is used to represent each node?": "Square",
            "What is the side length of each square node?": "1 cm",
            "How are the peripheral nodes arranged around the central node?": "Hexagonal layout on a circle of 3 cm radius",
            "How is node C connected to the other nodes?": "Solid straight lines",
            "What type of lines connect each pair of adjacent peripheral nodes?": "Dashed edges",
            "What are the labels of the peripheral nodes?": "A, B, D, E, F",
            "What is the subtitle text under the diagram and how is it styled?": "System Components Network, italicized"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001340",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting an organizational hierarchy as a tree structure.\n\nFeature Requirements:\n- Create exactly 7 nodes labeled: \"CEO\", \"CFO\", \"CTO\", \"COO\", \"Manager1\", \"Manager2\", and \"Manager3\".\n- Position the \"CEO\" node at the top center of the diagram.\n- Arrange the \"CFO\", \"CTO\", and \"COO\" nodes directly below the \"CEO\", spaced evenly horizontally.\n- Place \"Manager1\", \"Manager2\", and \"Manager3\" below the mid-level nodes, each connected to one of the upper nodes to form a clear tree.\n- Draw arrows from the \"CEO\" to each of the three nodes immediately below it and from each mid-level node to its connected manager.\n- Use rectangular nodes with rounded corners measuring 2 cm wide and 1 cm high.\n- Space nodes with a horizontal and vertical gap of exactly 1 cm between them.\n- Center the entire diagram within a canvas of width 12 cm and height 12 cm.\n- Include a centered title above the diagram with the text \"Company Organizational Chart\" in bold font.",
        "raw_output_metric": [
            "tikzpicture",
            "Company Organizational Chart",
            "CEO",
            "CFO",
            "CTO",
            "COO",
            "Manager1",
            "Manager2",
            "Manager3",
            "rounded corners",
            "2 cm",
            "1 cm",
            "12 cm",
            "->",
            "node"
        ],
        "VQA": {
            "What is the bold title displayed above the diagram?": "Company Organizational Chart",
            "Is the diagram centered within a 12 cm by 12 cm canvas?": "Yes",
            "How many nodes in total are present in the diagram?": "7",
            "Which node is positioned at the top center of the tree?": "CEO",
            "How many nodes are directly connected to the CEO by arrows?": "3",
            "What are the labels of the nodes immediately below the CEO?": "CFO, CTO, and COO",
            "What are the labels of the manager nodes connected to the mid-level nodes?": "Manager1, Manager2, and Manager3",
            "What are the dimensions of each node and the spacing between them?": "Each node is 2 cm wide and 1 cm high, with a 1 cm gap horizontally and vertically"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001341",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing an astronomical constellation.\n\nFeature Requirements:\n- Display exactly 6 five-pointed star shapes, each with a radius of 0.3 cm.\n- Label each star consecutively with the letters A, B, C, D, E, and F.\n- Arrange the stars at fixed coordinates: A at (-2,1), B at (0,3), C at (2,1), D at (2,-1), E at (0,-3), and F at (-2,-1).\n- Connect the stars with dotted lines to form a closed hexagonal pattern.\n- Use thick (1pt) solid lines for the edges that define each star and the constellation outline.\n- Include a centered title above the diagram reading \"Celestial Constellation\" in a bold, 14pt font.\n- Position the entire diagram within a canvas that is exactly 12 cm in width and 12 cm in height, ensuring it is centered within the canvas.",
        "raw_output_metric": [
            "Celestial Constellation",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "(-2,1)",
            "(0,3)",
            "(2,1)",
            "(2,-1)",
            "(0,-3)",
            "(-2,-1)",
            "0.3cm",
            "1pt",
            "dotted",
            "tikzpicture",
            "cycle"
        ],
        "VQA": {
            "How many five-pointed stars are shown in the diagram?": "6",
            "What labels are assigned to the stars?": "A, B, C, D, E, F",
            "What is the radius of each star?": "0.3 cm",
            "What type of lines connect the stars to form the pattern?": "Dotted lines",
            "What line style is used for the star edges and the constellation outline?": "Thick 1pt solid lines",
            "What is the title displayed above the diagram?": "Celestial Constellation",
            "What are the dimensions of the canvas of the diagram?": "12 cm by 12 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001342",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram that depicts a star-shaped communication network featuring one central hub and six evenly distributed peripheral nodes.\n\nFeature Requirements:\n- Include exactly 7 nodes; one central node labeled \"Hub\" and six peripheral nodes labeled \"A\", \"B\", \"C\", \"D\", \"E\", and \"F\".\n- Position the central hub at the exact center of a 12 cm by 12 cm canvas.\n- Arrange the six peripheral nodes evenly around the central hub in a circular layout with an angular separation of 60° between consecutive nodes.\n- Connect the central hub to each of the peripheral nodes using straight, dashed lines.\n- Draw the central node as a circle with a 0.6 cm radius and all peripheral nodes as squares with side lengths of 0.7 cm.\n- Color all node outlines in blue and all connecting edges in red.\n- Place a title at the top center of the canvas reading \"Star Network Diagram\" in italic font.\n- Ensure each node label is centered within its respective shape and clearly visible.\n- Use an underlying grid to help position the nodes accurately.\n- Maintain uniform node size and edge thickness throughout the diagram.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Star Network Diagram",
            "Hub",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "circle",
            "square",
            "0.6cm",
            "0.7cm",
            "blue",
            "red",
            "dashed",
            "60°",
            "grid",
            "12cm"
        ],
        "VQA": {
            "What is the title displayed at the top center of the canvas?": "Star Network Diagram",
            "How many nodes in total can be seen in the diagram?": "7",
            "What is the label of the central node?": "Hub",
            "What are the labels of the peripheral nodes?": "A, B, C, D, E, F",
            "What shape is used for the central hub and what is its size?": "A circle with a 0.6 cm radius",
            "How are the peripheral nodes depicted and what are their dimensions?": "As squares with a side length of 0.7 cm",
            "How are the central hub and peripheral nodes connected?": "With straight, dashed red lines",
            "Is a grid visible in the diagram to help position the nodes accurately?": "Yes",
            "Where is the central hub positioned on the canvas?": "At the exact center of a 12 cm by 12 cm canvas"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001343",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting a hierarchical organizational chart.\n\nFeature Requirements:\n- Display exactly 7 nodes representing positions in an organization, each labeled with a distinct title (e.g., CEO, CTO, CFO, Manager, Supervisor, Lead, Intern).\n- Arrange the nodes in a tree-like hierarchy with the CEO at the top, CTO and CFO directly beneath, and the remaining positions branching out accordingly.\n- Use rectangles for all nodes with a fixed size of 3 cm width and 1.2 cm height.\n- Connect the nodes with arrows featuring clear arrowheads to indicate the reporting relationships.\n- Ensure all nodes have a light gray fill with a darker border.\n- Position the entire diagram centered on a canvas of width 14 cm and height 10 cm.\n- Include a centered title above the diagram reading \"Company Hierarchy\" in a bold italic font.",
        "raw_output_metric": [
            "tikzpicture",
            "Company Hierarchy",
            "CEO",
            "CTO",
            "CFO",
            "Manager",
            "Supervisor",
            "Lead",
            "Intern",
            "3 cm",
            "1.2 cm",
            "14 cm",
            "10 cm",
            "rectangle",
            "->"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Company Hierarchy",
            "What font style is used for the title?": "bold italic",
            "How many nodes (positions) are depicted in the diagram?": "7",
            "Which position is shown at the top of the hierarchy?": "CEO",
            "Which two positions are directly beneath the CEO?": "CTO and CFO",
            "What are the dimensions of each rectangle node?": "3 cm by 1.2 cm",
            "What fill color is used for all nodes?": "light gray"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001344",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical family tree with clear generational placements.\n\nFeature Requirements:\n- Display exactly 7 nodes, each labeled with unique two-letter initials representing a family member.\n- Arrange the nodes in a top-down tree layout with one ancestor node at the top, two children in the second level, and four grandchildren in the third level.\n- Connect each parent node to its children using solid lines that are 1 pt thick.\n- Use rounded rectangular boxes for each node with dimensions of 1.5 cm in width and 1 cm in height.\n- Position the entire diagram centered within a canvas of 12 cm width and 12 cm height.\n- Include a title centered above the diagram with the text \"Family Tree\" in bold, serif font.\n- Color the ancestor node in light blue, the children nodes in light green, and the grandchildren nodes in light yellow.\n- Ensure each node has a 0.2 cm margin around the text content within its box.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\textbf{Family Tree}",
            "AA",
            "BB",
            "CC",
            "DD",
            "EE",
            "FF",
            "GG",
            "rounded rectangle",
            "1.5cm",
            "1cm",
            "0.2cm",
            "lightblue",
            "lightgreen",
            "lightyellow",
            "line width=1pt",
            "12cm"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Family Tree",
            "In what font style is the title rendered?": "Bold, serif",
            "How many nodes are present in the diagram?": "7",
            "How is the family hierarchy structured in terms of generations?": "1 ancestor, 2 children, 4 grandchildren",
            "What shape and dimensions are used for each node?": "Rounded rectangular boxes, 1.5 cm x 1 cm",
            "What color is the ancestor node?": "Light blue",
            "What color are the children nodes?": "Light green",
            "What color are the grandchildren nodes?": "Light yellow",
            "What is the thickness of the lines connecting the nodes?": "1 pt",
            "What margin is applied around the text inside each node?": "0.2 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001345",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a flowchart of a software development process.\n\nFeature Requirements:\n- Display exactly 6 nodes labeled sequentially with the following text: \"Plan\", \"Design\", \"Develop\", \"Test\", \"Deploy\", \"Maintain\".\n- Arrange the nodes in a vertical column with equal vertical spacing and aligned at the center.\n- Represent each node as a rectangle with rounded corners measuring 3 cm in width and 1.5 cm in height.\n- Connect each consecutive node with a solid arrow that starts from the bottom center of the upper node and points to the top center of the lower node.\n- Use arrows with a line thickness of 1 pt and clearly defined arrowheads.\n- Include a bold title \"Software Development Flowchart\" centered above the diagram.\n- Position the entire diagram within a canvas set to 12 cm in width and 16 cm in height, ensuring the diagram itself is centered on the canvas.",
        "raw_output_metric": [
            "tikzpicture",
            "node",
            "Plan",
            "Design",
            "Develop",
            "Test",
            "Deploy",
            "Maintain",
            "Software Development Flowchart",
            "rectangle",
            "rounded corners",
            "3 cm",
            "1.5 cm",
            "12 cm",
            "16 cm",
            "1 pt",
            "->"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Software Development Flowchart",
            "How many nodes are present in the flowchart?": "6",
            "What are the text labels on the nodes from top to bottom?": "Plan, Design, Develop, Test, Deploy, Maintain",
            "How are the nodes arranged on the canvas?": "Vertically in a column, centered with equal vertical spacing",
            "What are the dimensions of each node?": "3 cm in width and 1.5 cm in height",
            "How are the nodes connected?": "Each consecutive node is connected by a solid arrow from the bottom center of the upper node to the top center of the lower node",
            "What is the thickness and style of the arrows?": "1 pt thick with clearly defined arrowheads",
            "What are the dimensions of the canvas containing the diagram?": "12 cm in width and 16 cm in height"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001346",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simplified city intersection map.\n\nFeature Requirements:\n- Display exactly 6 nodes, each labeled uniquely with the letters A through F.\n- Arrange the nodes at the vertices of a regular hexagon with equal spacing.\n- Use dashed lines to connect each node to its two immediate neighbors, forming a closed loop.\n- Ensure each node is drawn as a square with a side length of 0.7 cm.\n- Set the canvas size to have a width of 12 cm and a height of 12 cm, with the diagram centered.\n- Draw a bold border around each node, with a distinct fill color for all nodes.\n- Include a centered title above the diagram with the text \"City Intersection Map\" in an italic font.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "City Intersection Map",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "0.7cm",
            "12cm",
            "dashed",
            "rectangle",
            "fill",
            "bold"
        ],
        "VQA": {
            "What is the text of the centered title above the diagram?": "City Intersection Map (italicized)",
            "How many nodes are displayed in the diagram?": "6",
            "What unique labels are used for the nodes?": "A, B, C, D, E, F",
            "How are the nodes arranged in the diagram?": "At the vertices of a regular hexagon with equal spacing",
            "How are the nodes connected?": "Each node is connected to its two immediate neighbors with dashed lines forming a closed loop",
            "What shape and size are each of the nodes?": "Each node is drawn as a square with a side length of 0.7 cm",
            "What styling is applied to the border of each node?": "Each node has a bold border",
            "How is the diagram canvas sized?": "The canvas is 12 cm by 12 cm with the diagram centered"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001347",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram depicting a hierarchical tree structure with one main root and two levels of subordinate nodes.\n\nFeature Requirements:\n- Create exactly 7 nodes: one central root at the top, two mid-level nodes directly beneath the root, and four leaf nodes (two for each mid-level node).\n- Position the central root node at the horizontal center of the canvas, with the mid-level nodes directly below it, spaced evenly.\n- Place the four leaf nodes below the mid-level nodes, with two aligned under each mid-level node.\n- Connect nodes using solid directed arrows, with arrows pointing downward from the root to mid-level nodes and from mid-level nodes to their corresponding leaf nodes.\n- Use a uniform circular shape for all nodes with a fixed radius of 0.5 cm.\n- Set the entire diagram within a canvas of width 12 cm and height 12 cm, ensuring all nodes and edges are clearly visible.\n- Include a centered title above the diagram reading \"Hierarchical Tree Diagram\" in a bold font.",
        "raw_output_metric": [
            "begin{tikzpicture}",
            "end{tikzpicture}",
            "\\textbf{Hierarchical Tree Diagram}",
            "node",
            "child",
            "circle",
            "0.5cm",
            "12cm",
            "->"
        ],
        "VQA": {
            "What is the title displayed above the diagram?": "Hierarchical Tree Diagram",
            "Is the title styled in a bold font?": "Yes",
            "How many total nodes are in the diagram?": "7",
            "How many mid-level nodes appear directly under the root?": "2",
            "How many leaf nodes are present beneath the mid-level nodes?": "4",
            "What is the fixed radius of each circular node?": "0.5 cm",
            "In which direction do the arrows between the nodes point?": "Downward",
            "What are the three hierarchical levels represented in the tree?": "Root, mid-level, and leaf-level",
            "What are the canvas dimensions for the overall diagram?": "12 cm x 12 cm"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001348",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a set of nested geometric shapes with textual annotations.\n\nFeature Requirements:\n- Draw exactly 7 shapes: 3 circles, 2 rectangles, and 2 triangles.\n- Arrange the shapes concentrically within a canvas of width 12 cm and height 12 cm.\n- Label each shape with a unique letter from A to G placed at its center.\n- Use dashed lines for the circles, solid lines for the rectangles, and dotted lines for the triangles.\n- Ensure all circles have a radius of 0.8 cm, all rectangles have dimensions of 1.6 cm by 1.0 cm, and all triangles are equilateral with a side length of 1.4 cm.\n- Position the shapes so that each smaller shape is nested inside a larger one without overlapping their boundaries.\n- Place a descriptive label next to each shape specifying its type (e.g., “Circle”, “Rectangle”, “Triangle”) in italicized text with a font size of 10pt.\n- Center the entire diagram on the canvas, ensuring equal margins on all sides.\n- Include an overall title above the diagram in bold font with the text “Nested Shapes Diagram” centered on the canvas.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Nested Shapes Diagram",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "Circle",
            "Rectangle",
            "Triangle",
            "dashed",
            "solid",
            "dotted",
            "12 cm",
            "0.8 cm",
            "1.6 cm",
            "1.0 cm",
            "1.4 cm",
            "\\textit",
            "\\textbf"
        ],
        "VQA": {
            "What is the overall title displayed above the diagram?": "Nested Shapes Diagram",
            "How many shapes in total are drawn in the diagram?": "7",
            "Which shape type is drawn with dashed lines?": "Circles",
            "What are the dimensions of each rectangle?": "1.6 cm by 1.0 cm",
            "What is the radius used for all circles?": "0.8 cm",
            "How many triangles are included in the diagram?": "2",
            "Which border style is used for the triangles?": "Dotted lines",
            "What unique labels are placed at the centers of the shapes?": "A, B, C, D, E, F, G",
            "How is the descriptive label next to each shape styled?": "Italicized text with a font size of 10pt",
            "Are the shapes arranged concentrically with equal margins on the canvas?": "Yes"
        }
    },
    {
        "task_name": "Text to Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "task_id": "001349",
        "input_type": "Text",
        "output_type": "Tikz",
        "rendering": true,
        "query": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a hierarchical tree structure with clearly defined levels.\n\nFeature Requirements:\n- Display exactly 7 nodes, each labeled with a unique letter from A to G.\n- Position the root node labeled \"A\" at the top center of the canvas as a rectangle with a width of 1 cm and a height of 0.5 cm.\n- Arrange the two child nodes (B and C) directly below the root, equally spaced horizontally, and connect them to \"A\" with dashed lines.\n- Place the remaining nodes (D, E, F, G) as grandchildren: nodes D and E under \"B\", and nodes F and G under \"C\", evenly distributed horizontally.\n- Use circles with a radius of 0.4 cm for all non-root nodes.\n- Include arrowheads on each edge indicating the direction from parent to child.\n- Center the entire tree diagram within a canvas of width 12 cm and height 12 cm.\n- Add a centered title \"Tree Structure\" in bold font above the diagram.\n- Place a centered subtitle \"Hierarchical Tree Diagram\" in italic font directly below the title.",
        "raw_output_metric": [
            "\\begin{tikzpicture}",
            "\\end{tikzpicture}",
            "Tree Structure",
            "Hierarchical Tree Diagram",
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "rectangle",
            "circle",
            "1cm",
            "0.5cm",
            "0.4cm",
            "12cm",
            "dashed",
            "->"
        ],
        "VQA": {
            "What is the title displayed at the top of the canvas?": "Tree Structure (in bold font)",
            "What is the subtitle placed directly below the title?": "Hierarchical Tree Diagram (in italic font)",
            "How many nodes are visible in the diagram?": "7",
            "What shape and dimensions are used for the root node labeled 'A'?": "A rectangle with a width of 1 cm and a height of 0.5 cm",
            "What shape is used for the other nodes (B to G)?": "Circles with a radius of 0.4 cm",
            "How are the edges connecting the root node 'A' to its child nodes 'B' and 'C' styled?": "Dashed lines with arrowheads indicating direction",
            "How are nodes B and C positioned relative to the root node and how are the grandchild nodes arranged?": "B and C are directly below A and equally spaced; D, E are under B and F, G are under C, evenly distributed horizontally"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001400",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text description into a Typst document that simulates a structured technical report with multiple sections and lists.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Technical Report\".\n- Insert a section with a level-2 heading titled \"Overview\" followed by a paragraph containing placeholder text.\n- Create exactly three subsections under \"Overview\", each with a level-3 heading and a numbered list of exactly two items with placeholder content.\n- Insert a horizontal line immediately after the \"Overview\" section to visually separate the subsequent content.\n- Add a section labeled \"Details\" using a level-2 heading containing a single paragraph of placeholder text.\n- Under the \"Details\" section, include a bullet list with exactly four items displaying dummy data.\n- Conclude the document with a footer area that has a single line of centered text reading \"Report Generated\", using a smaller font size than the main content.",
        "raw_output_metric": [
            "Technical Report",
            "Overview",
            "Details",
            "Report Generated"
        ],
        "VQA": {
            "What is the main title displayed at the top of the report?": "Technical Report",
            "What is the section heading immediately below the main title?": "Overview",
            "How many subsections are under the 'Overview' section?": "3",
            "What is the number of items in each numbered list in the 'Overview' subsections?": "2",
            "Which visual separator appears after the 'Overview' section?": "Horizontal line",
            "What is the heading of the section following the horizontal line?": "Details",
            "How many bullet points are in the 'Details' section?": "4",
            "What text is displayed in the centered footer area?": "Report Generated"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001401",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a brief text description into a Typst document representing a sample magazine layout.\n\nFeature Requirements:\n- Display a main title using a level-1 heading with the text \"Magazine Feature\" at the top of the document.\n- Create a section with a level-2 heading titled \"Article Summary\" followed by a paragraph containing placeholder text.\n- Add two subsections under \"Article Summary\": one with a level-3 heading \"Interview\" and the other with a level-3 heading \"Insights\", each followed by a list of exactly four bullet points with placeholder content.\n- Insert a horizontal line between the two subsections to separate them visually.\n- Create a secondary section with a level-2 heading \"Additional Details\" that includes two paragraphs of different placeholder text.\n- Format the content so that each bullet point in the lists is indented uniformly beneath its respective heading.\n- Place a centered divider at the bottom of the page using a horizontal line.\n- Include a footer area at the very end with a smaller font size containing centered text reading \"© 2023 Magazine\".",
        "raw_output_metric": [
            "Magazine Feature",
            "Article Summary",
            "Interview",
            "Insights",
            "Additional Details",
            "© 2023 Magazine"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Magazine Feature",
            "What is the level-2 heading in the first section?": "Article Summary",
            "How many bullet points are listed under the 'Interview' subsection?": "4",
            "How many bullet points are listed under the 'Insights' subsection?": "4",
            "What visual element separates the 'Interview' and 'Insights' subsections?": "Horizontal line",
            "What is the level-2 heading of the secondary section?": "Additional Details",
            "What divider is placed at the bottom of the page?": "Centered horizontal line",
            "What text is displayed in the footer area?": "© 2023 Magazine"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001402",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Transform a textual description of a two-day conference into a Typst document that clearly outlines the event's schedule and sessions.\n\nFeature Requirements:\n- Create a level-1 heading with the text \"Conference Schedule Overview\".\n- Generate a section titled \"Day 1\" with a level-2 heading, followed by a bullet list of exactly three session items.\n- Each of the three session items should include a level-3 heading for the session title and an accompanying paragraph with placeholder text describing the session details.\n- Create a second section titled \"Day 2\" with a level-2 heading, and list exactly two sessions using a numbered list.\n- For each session under \"Day 2\", include a level-3 heading for the session title and a paragraph containing placeholder text.\n- Insert a horizontal line between the \"Day 1\" and \"Day 2\" sections to separate them visually.\n- At the bottom of the document, add a centered quotation in italics reading \"Innovate, Learn, Evolve\".\n- Include a footer area with a smaller font size, centered, displaying the text \"Schedule updated as of [date]\".",
        "raw_output_metric": [
            "Conference Schedule Overview",
            "Day 1",
            "Day 2",
            "Innovate, Learn, Evolve",
            "Schedule updated as of [date]"
        ],
        "VQA": {
            "What is the text of the level-1 heading displayed at the top of the document?": "Conference Schedule Overview",
            "How many session items are listed under Day 1?": "3",
            "What type of list is used for Day 1 sessions?": "Bullet list",
            "How many session items are listed under Day 2?": "2",
            "What type of list is used for Day 2 sessions?": "Numbered list",
            "What separates the Day 1 and Day 2 sections visually?": "Horizontal line",
            "What is the visible text of the centered quotation displayed at the bottom?": "Innovate, Learn, Evolve",
            "What font styling is applied to the centered quotation?": "Italics",
            "What is displayed in the footer area at the bottom of the document?": "Schedule updated as of [date]"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001403",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text description into a Typst document outlining the structure and elements of a music festival schedule.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Festival Schedule\".\n- Create a section with a level-2 heading titled \"Day One\" followed by a paragraph containing placeholder descriptive text.\n- Under \"Day One\", implement exactly two subsections, each with a level-3 heading labeled \"Morning Session\" and \"Evening Session\", respectively, and each subsection must include a bullet list with exactly four items of placeholder text.\n- Insert a horizontal line immediately after the \"Day One\" section to visually separate it from subsequent content.\n- Add another section with a level-2 heading titled \"Day Two\" that includes two separate lists: one bullet list titled \"Performers\" with exactly five placeholder names and another bullet list titled \"Activities\" with exactly three placeholder items.\n- Place a centered section with a level-2 heading labeled \"End of Festival\" followed by a single paragraph of placeholder text.\n- Conclude with a footer area that contains a centered line of text reading \"Schedule provided by Festival Organizers\" in a font size smaller than the main text.",
        "raw_output_metric": [
            "Festival Schedule",
            "Day One",
            "Morning Session",
            "Evening Session",
            "Day Two",
            "Performers",
            "Activities",
            "End of Festival",
            "Schedule provided by Festival Organizers"
        ],
        "VQA": {
            "What is the main title at the top of the document?": "Festival Schedule",
            "How many subsections are under 'Day One'?": "2",
            "What are the headings of the subsections under 'Day One'?": "Morning Session and Evening Session",
            "How many bullet items are included in each subsections under 'Day One'?": "4",
            "What element is used to visually separate the 'Day One' section from the rest of the document?": "Horizontal line",
            "How many placeholder names are listed under the 'Performers' bullet list in 'Day Two'?": "5",
            "How many placeholder items are included in the 'Activities' bullet list in 'Day Two'?": "3",
            "What is the level-2 heading for the centered section at the end?": "End of Festival",
            "What does the footer display?": "Schedule provided by Festival Organizers"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001404",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document outlining a business report structure.\n\nFeature Requirements:\n- Insert a level-1 heading at the top with the text \"Annual Business Review\".\n- Add a level-2 heading labeled \"Executive Summary\" immediately following the main heading, and include one paragraph of placeholder text.\n- Introduce a section with a level-2 heading titled \"Financial Overview\", containing two paragraphs of sample content.\n- Under \"Financial Overview\", add exactly two subsections with level-3 headings named \"Income Statement\" and \"Balance Sheet\", each followed by a bullet list of four items with placeholder text.\n- Draw a horizontal line directly after the \"Financial Overview\" section.\n- Create a level-2 heading for a section named \"Market Trends\", followed by a paragraph of placeholder details.\n- Place a footer at the bottom of the document that contains centered text reading \"Report Confidential\" in a smaller font size.",
        "raw_output_metric": [
            "Annual Business Review",
            "Executive Summary",
            "Financial Overview",
            "Income Statement",
            "Balance Sheet",
            "Market Trends",
            "Report Confidential"
        ],
        "VQA": {
            "What is the main heading at the top of the document?": "Annual Business Review",
            "What is the text of the first level-2 heading immediately following the main heading?": "Executive Summary",
            "How many paragraphs of placeholder text appear under the 'Executive Summary' section?": "One",
            "What is the title of the level-2 heading that introduces the financial information?": "Financial Overview",
            "How many paragraphs of sample content does the 'Financial Overview' section contain?": "Two",
            "What are the titles of the two level-3 headings under the 'Financial Overview' section?": "Income Statement and Balance Sheet",
            "How many bullet points are included under each of the 'Income Statement' and 'Balance Sheet' subsections?": "4",
            "What visual element is placed directly after the 'Financial Overview' section?": "A horizontal line",
            "What is the title of the level-2 heading that follows the horizontal line?": "Market Trends",
            "What is displayed in the footer of the document?": "Centered text saying 'Report Confidential' in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001405",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a description of a fictional museum exhibition layout into a Typst document that outlines the sections, details, and formatting of the exhibition guide.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Museum Exhibition Guide\".\n- Create an introductory section with a level-2 heading titled \"Exhibition Overview\" followed by a paragraph containing placeholder descriptive text.\n- Under the \"Exhibition Overview\" section, add three distinct exhibit categories using level-3 headings labeled \"Ancient Artifacts\", \"Modern Installations\", and \"Interactive Displays\".\n- For each exhibit category, include exactly a bullet-point list of three specific features or facts represented by placeholder text.\n- Add a separate section with a level-2 heading titled \"Visitor Instructions\" and a paragraph of placeholder text that provides guidance to attendees.\n- Insert a horizontal line between the \"Exhibition Overview\" section and the \"Visitor Instructions\" section.\n- Add a footer area containing a centered line of small text reading \"Venue: City Museum\".",
        "raw_output_metric": [
            "Museum Exhibition Guide",
            "Exhibition Overview",
            "Ancient Artifacts",
            "Modern Installations",
            "Interactive Displays",
            "Visitor Instructions",
            "Venue: City Museum"
        ],
        "VQA": {
            "What is the text of the main title displayed at the top of the document?": "Museum Exhibition Guide",
            "What is the heading text for the introductory section?": "Exhibition Overview",
            "What are the three exhibit category headings listed under 'Exhibition Overview'?": "Ancient Artifacts, Modern Installations, Interactive Displays",
            "How many bullet points are included under each exhibit category?": "3",
            "What is the heading text for the section that provides guidance to attendees?": "Visitor Instructions",
            "What separates the 'Exhibition Overview' section from the 'Visitor Instructions' section?": "A horizontal line",
            "What text is centered in the footer area of the document?": "Venue: City Museum"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001406",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Transform a narrative outline of a fictional novel into a Typst document that clearly delineates its structure and key sections.\n\nFeature Requirements:\n- Begin with a level-1 heading titled \"Fictional Novel Summary\".\n- Create a section with a level-2 heading labeled \"Overview\" that contains a paragraph summarizing the main plot.\n- Under \"Overview\", add a subsection with a level-3 heading titled \"Setting\" and follow it with a numbered list of four distinct locations mentioned in the narrative.\n- Add another section with a level-2 heading \"Characters\" which includes multiple paragraphs detailing key figures of the story.\n- Within the \"Characters\" section, create exactly three subsections using level-3 headings: \"Protagonist\", \"Antagonist\", and \"Supporting\". Each of these subsections must include a bullet list containing exactly two characteristics.\n- Insert a horizontal line to clearly separate the \"Overview\" section from the \"Characters\" section.\n- Conclude with a footer area represented by a centered paragraph in a smaller font size containing the text \"Document End\".",
        "raw_output_metric": [
            "Fictional Novel Summary",
            "Overview",
            "Setting",
            "Characters",
            "Protagonist",
            "Antagonist",
            "Supporting",
            "Document End"
        ],
        "VQA": {
            "What is the level-1 heading at the top of the document?": "Fictional Novel Summary",
            "What is the title of the level-2 heading introducing the main plot?": "Overview",
            "What is the level-3 heading under the Overview section?": "Setting",
            "How many items are in the numbered list under the Setting subsection?": "4",
            "What is the level-2 heading for the section that describes the story's key figures?": "Characters",
            "What are the three level-3 heading titles under the Characters section?": "Protagonist, Antagonist, Supporting",
            "How many bullet points are in each character subsection?": "2",
            "What element is used to separate the Overview section from the Characters section?": "Horizontal line",
            "What text is displayed in the centered footer area with a smaller font size?": "Document End"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001407",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a text outline into a Typst document that presents a detailed conference agenda for a technology summit.\n\nFeature Requirements:\n- Create a primary level-1 heading at the top with the title \"Tech Summit 2024\".\n- Begin with a brief introductory paragraph under a level-2 heading \"Welcome Note\" containing placeholder text.\n- Generate three main sections for the agenda titled \"Morning Session\", \"Afternoon Session\", and \"Evening Session\", each as a level-2 heading.\n- For the \"Morning Session\", list exactly three schedule items with a level-3 heading for each and a short description paragraph following the heading.\n- In the \"Afternoon Session\", include two schedule blocks as level-3 headings; each block should have a numbered list of two bullet points describing sub-events.\n- Under the \"Evening Session\", include one level-3 heading titled \"Keynote Speech\" followed by a blockquote element containing a short placeholder quote.\n- Divide the document with a horizontal line placed between the \"Welcome Note\" section and the first agenda section.\n- Conclude the document with a footer section that features a centered, italicized text \"Thank you for attending!\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Tech Summit 2024",
            "Welcome Note",
            "Morning Session",
            "Afternoon Session",
            "Evening Session",
            "Keynote Speech",
            "Thank you for attending!"
        ],
        "VQA": {
            "What is the primary title at the top of the document?": "Tech Summit 2024",
            "Under which heading level is the 'Welcome Note' presented?": "Level 2",
            "What visual element separates the 'Welcome Note' section from the agenda?": "Horizontal line",
            "How many schedule items are listed under the 'Morning Session'?": "Three",
            "What heading level is used for each schedule item in the 'Morning Session'?": "Level 3",
            "How many schedule blocks are contained within the 'Afternoon Session'?": "Two",
            "How many bullet points are in each schedule block under the 'Afternoon Session'?": "Two",
            "What is the label of the schedule item under the 'Evening Session'?": "Keynote Speech",
            "What styling is applied to the footer text at the end of the document?": "Centered, italicized text in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001408",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text description into a Typst document that outlines the structure and components of a recipe page.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Delicious Recipes\".\n- Create a section with a level-2 heading titled \"Ingredients\" followed by a paragraph containing placeholder text for a list of items.\n- Add exactly three individual list points under \"Ingredients\", each as bullet points with placeholder names of ingredients.\n- Insert a section titled \"Preparation Steps\" as a level-2 heading with exactly four numbered steps, each step being a separate paragraph with placeholder instructions.\n- Use a horizontal line to separate the \"Ingredients\" section from the \"Preparation Steps\" section.\n- Append a concluding section with a level-2 centered heading \"Enjoy Your Meal\" and a single paragraph of placeholder text beneath it.\n- Place a footer area with a line of centered text \"Bon Appétit\" formatted in a smaller font than the rest of the document.",
        "raw_output_metric": [
            "Delicious Recipes",
            "Ingredients",
            "Preparation Steps",
            "Enjoy Your Meal",
            "Bon Appétit"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Delicious Recipes",
            "Which section heading is used for listing the ingredients?": "Ingredients",
            "How many bullet points appear under the Ingredients section?": "3",
            "What is the section heading for the preparation steps?": "Preparation Steps",
            "How many numbered steps are provided under the Preparation Steps section?": "4",
            "What visual element separates the Ingredients and Preparation Steps sections?": "A horizontal line",
            "What is the text of the concluding centered section heading?": "Enjoy Your Meal",
            "What centered footer text is displayed in a smaller font?": "Bon Appétit"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001409",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into a Typst document that outlines a detailed plan for a scientific research paper on marine biology.\n\nFeature Requirements:\n- Begin with a centered level-1 heading titled \"Marine Biology Research\" with bold styling.\n- Add a level-2 heading \"Overview\" followed by exactly one paragraph containing placeholder text describing the purpose and scope of the research.\n- Insert a level-2 heading \"Objectives\" and include exactly three bullet points, each with distinct placeholder text outlining a specific research objective.\n- Create a level-2 heading \"Methodology\" with two subsections: a level-3 heading \"Sample Collection\" and a level-3 heading \"Analysis Techniques\". Under each subsection, include exactly three bullet points with placeholder content.\n- Place a horizontal line immediately after the \"Objectives\" section to visually separate it from the \"Methodology\" section.\n- Add a level-2 heading \"Findings\" followed by two paragraphs of placeholder text summarizing hypothetical research results.\n- Include a level-2 heading \"Conclusion\" and attach a centered paragraph of placeholder text emphasizing the main takeaway.\n- Conclude the document with a footer area comprising a single line of centered text \"Document End\" in a font size smaller than the main content.",
        "raw_output_metric": [
            "Marine Biology Research",
            "Overview",
            "Objectives",
            "Methodology",
            "Sample Collection",
            "Analysis Techniques",
            "Findings",
            "Conclusion",
            "Document End"
        ],
        "VQA": {
            "What is the text content of the centered level-1 heading at the top?": "Marine Biology Research",
            "Is the level-1 heading styled in bold?": "Yes",
            "How many paragraphs are contained under the 'Overview' section?": "One",
            "How many bullet points are listed in the 'Objectives' section?": "Three",
            "Is there a horizontal line immediately following the 'Objectives' section?": "Yes",
            "What are the titles of the two subsections under 'Methodology'?": "Sample Collection and Analysis Techniques",
            "How many bullet points does each 'Methodology' subsection include?": "Three each",
            "How many paragraphs does the 'Findings' section contain?": "Two",
            "Is the paragraph under the 'Conclusion' section centered?": "Yes",
            "What text is displayed in the footer area?": "Document End"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001410",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Generate a Typst document that outlines the structure of a scientific journal article.\n\nFeature Requirements:\n- Create a cover section with a level-1 heading titled \"Scientific Journal Article\" displayed at the top of the document.\n- Insert a section titled \"Abstract\" with a level-2 heading immediately below the cover, followed by a paragraph containing placeholder text describing the article summary.\n- Add a horizontal line directly after the \"Abstract\" section to visually separate it from subsequent sections.\n- Include a \"Methods\" section with a level-2 heading that contains exactly one paragraph of placeholder text detailing the research approach.\n- Under the \"Methods\" section, incorporate a numbered list with exactly three items representing distinct experimental steps.\n- Create a \"Results\" section marked by a level-2 heading, featuring two subsections each with a level-3 heading and a bullet list of exactly four items with placeholder text.\n- Conclude the document with a \"References\" section that includes a level-2 heading, followed by a centered paragraph listing two placeholder citations in a smaller font size compared to the main text.",
        "raw_output_metric": [
            "Scientific Journal Article",
            "Abstract",
            "Methods",
            "Results",
            "References"
        ],
        "VQA": {
            "What is the text of the level-1 cover heading at the top of the document?": "Scientific Journal Article",
            "Which level-2 section immediately follows the cover and includes article summary placeholder text?": "Abstract",
            "What visual element is used directly after the Abstract section to separate it from later content?": "Horizontal line",
            "How many items are included in the numbered list under the Methods section?": "Three",
            "How many bullet points does each subsection under the Results section contain?": "Four",
            "How many subsections are present within the Results section?": "Two",
            "What distinguishes the layout of the References section's paragraph from the main text?": "It is centered and uses a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001411",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document that outlines the structure of a miniature blog page with a header, content sections, and a concluding footer.\n\nFeature Requirements:\n- Include a level-1 heading at the very top with the text \"My Mini Blog\".\n- Create an \"About This Blog\" section using a level-2 heading followed by a single paragraph of placeholder text.\n- Introduce a \"Posts\" section with a level-2 heading that houses exactly three posts.\n- For each post, include a level-3 heading for the title, a horizontal line immediately below the title, and one paragraph of placeholder content.\n- Within the \"Posts\" section, under the third post, add an unordered list with exactly two bullet points, each containing distinct placeholder text.\n- End the document with a \"Footer\" section that uses a centered level-2 heading \"Thank You for Visiting\" followed by a paragraph of placeholder text.\n- Ensure all sections and elements are clearly separated by appropriate spacing or horizontal lines.",
        "raw_output_metric": [
            "My Mini Blog",
            "About This Blog",
            "Posts",
            "Thank You for Visiting"
        ],
        "VQA": {
            "What is the level-1 heading text at the very top of the page?": "My Mini Blog",
            "What is the header text for the about section?": "About This Blog",
            "What immediately follows the 'About This Blog' heading?": "A paragraph of placeholder text",
            "What is the heading used for the posts section?": "Posts",
            "How many posts are included in the Posts section?": "3",
            "What element is displayed immediately below each post title?": "A horizontal line",
            "How many bullet points are found under the third post?": "2",
            "What is the text of the footer's centered level-2 heading?": "Thank You for Visiting"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001412",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into a Typst document that outlines a simple annual report format.\n\nFeature Requirements:\n- Create a level-1 heading at the top with the text \"Annual Report 2023\".\n- Add a level-2 heading titled \"Executive Summary\" immediately below, followed by a paragraph containing generic placeholder text.\n- Insert a level-2 heading named \"Financial Overview\" with a paragraph describing financial metrics in placeholder text.\n- Under \"Financial Overview\", include exactly one level-3 subheading called \"Revenue Analysis\" followed by an unordered list with four bullet points, each containing placeholder text.\n- Add another level-2 heading titled \"Future Projections\" with a centered paragraph of placeholder text.\n- Draw a horizontal line immediately before the \"Future Projections\" section.\n- Place a footer at the bottom with centered text \"Report Compiled by Finance Dept\" in a smaller font size than the main content.\n- Ensure that all sections and lists are constructed using clearly identified Typst heading or list elements.",
        "raw_output_metric": [
            "Annual Report 2023",
            "Executive Summary",
            "Financial Overview",
            "Revenue Analysis",
            "Future Projections",
            "Report Compiled by Finance Dept"
        ],
        "VQA": {
            "What is the level-1 heading at the top of the document?": "Annual Report 2023",
            "What is the title of the first level-2 heading immediately after the main title?": "Executive Summary",
            "What type of text follows the 'Executive Summary' heading?": "A paragraph with generic placeholder text",
            "What is the title of the second level-2 heading?": "Financial Overview",
            "Under 'Financial Overview', what level-3 subheading is shown?": "Revenue Analysis",
            "How many bullet points are listed under 'Revenue Analysis'?": "4",
            "What element is drawn immediately before the 'Future Projections' section?": "A horizontal line",
            "How is the paragraph under 'Future Projections' aligned?": "Centered",
            "What is displayed in the footer at the bottom of the document?": "Report Compiled by Finance Dept"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001413",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document that outlines a conference schedule with structured sections.\n\nFeature Requirements:\n- Start the document with a level-1 heading \"Tech Conference 2023\" centered at the top.\n- Insert a section with a level-2 heading titled \"Schedule Overview\" immediately following the main title, with a paragraph of placeholder text describing the conference layout.\n- Under \"Schedule Overview\", create exactly three time-slot subsections, each with a level-3 heading displaying a different time interval (e.g., \"09:00 AM - 10:30 AM\"), and include an unordered list with exactly three bullet points, each listing a session title using placeholder text.\n- Place a horizontal line immediately after the time-slot subsections to visually separate them from subsequent sections.\n- Add a section titled \"Keynote Sessions\" using a level-2 heading, followed by exactly two paragraphs of placeholder text describing the keynote speakers and their topics.\n- Include a subsection with a level-3 heading \"Panel Discussion\" containing a single paragraph of placeholder text outlining the panel details.\n- Conclude with a footer that centers a level-2 heading \"Thank You for Joining Us\" in a smaller font size compared to the main body text.",
        "raw_output_metric": [
            "Tech Conference 2023",
            "Schedule Overview",
            "09:00 AM - 10:30 AM",
            "10:45 AM - 12:15 PM",
            "01:15 PM - 02:45 PM",
            "Keynote Sessions",
            "Panel Discussion",
            "Thank You for Joining Us"
        ],
        "VQA": {
            "What is the level-1 centered heading at the top of the document?": "Tech Conference 2023",
            "What is the level-2 heading immediately following the main title?": "Schedule Overview",
            "How many time-slot subsections are listed under 'Schedule Overview'?": "Three",
            "How many bullet points does each time-slot subsection contain?": "Three",
            "What visual element is placed immediately after the time-slot subsections?": "A horizontal line",
            "What is the heading text for the 'Keynote Sessions' section?": "Keynote Sessions",
            "How many paragraphs of placeholder text follow the 'Keynote Sessions' heading?": "Two",
            "What is the level-3 heading contained within the 'Keynote Sessions' section?": "Panel Discussion",
            "Describe the content of the 'Panel Discussion' subsection.": "A single paragraph of placeholder text outlining the panel details",
            "What does the footer contain?": "A centered level-2 heading 'Thank You for Joining Us' in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001414",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text summary into a Typst document that displays a structured menu card for a restaurant.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Restaurant Menu Card\" at the top of the document.\n- Create a section with a level-2 heading titled \"Appetizers\" followed by an unordered list containing exactly three dishes, each with a dish name and a brief description.\n- Add a section with a level-2 heading titled \"Main Courses\" that features a table with two rows; each row must display the dish name on the left and the price on the right.\n- Insert a centered section with a level-2 heading named \"Daily Specials\" directly after the \"Main Courses\" section, along with a single paragraph of descriptive placeholder text.\n- Implement a horizontal line clearly separating the \"Appetizers\" section from the \"Main Courses\" section.\n- Add a footer area with a single line of centered text \"Thank You for Dining!\" using a smaller font size than the main document text.",
        "raw_output_metric": [
            "Restaurant Menu Card",
            "Appetizers",
            "Main Courses",
            "Daily Specials",
            "Thank You for Dining!"
        ],
        "VQA": {
            "What is the main page title displayed as a level-1 heading?": "Restaurant Menu Card",
            "Which section lists three appetizers with dish names and descriptions?": "Appetizers",
            "How many dishes are listed under the Appetizers section?": "3",
            "What is the title of the section that contains a table of main courses?": "Main Courses",
            "How many rows does the Main Courses table contain?": "2",
            "What is the section immediately following Main Courses with centered text called?": "Daily Specials",
            "Is the Daily Specials section centered on the page?": "Yes",
            "What does the footer area display and how is it formatted?": "Thank You for Dining! (centered and in a smaller font)"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001415",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a narrative about a university course syllabus into a Typst document detailing the key components of the course.\n\nFeature Requirements:\n- Begin with a level-1 heading centered on the page containing the text \"Course Syllabus\".\n- Add a section with a level-2 heading titled \"Course Overview\" that includes a multi-paragraph description summarizing the course aims and learning outcomes.\n- Create a section labeled \"Schedule\" with a level-2 heading, followed by a bulleted list of exactly four session topics.\n- Under the \"Schedule\" section, include a subsection with a level-3 heading \"Assignments\" that features a numbered list of three assignment descriptions.\n- Insert a horizontal line immediately below the \"Schedule\" section to visually separate it from the following content.\n- Append a section with a level-2 heading \"Grading Policy\" that describes the evaluation criteria in a clear table with two columns and exactly three rows.\n- Conclude with a footer area displaying a single line of centered text \"University of Learning\" in a smaller font size than the main document text.",
        "raw_output_metric": [
            "Course Syllabus",
            "Course Overview",
            "Schedule",
            "Assignments",
            "Grading Policy",
            "University of Learning"
        ],
        "VQA": {
            "What is the centered level-1 heading text at the top of the page?": "Course Syllabus",
            "How many session topics are listed as bullet points under the 'Schedule' section?": "4",
            "Does the 'Course Overview' section contain a multi-paragraph description?": "Yes",
            "What is the title of the level-3 subsection under 'Schedule'?": "Assignments",
            "How many items are included in the numbered list under 'Assignments'?": "3",
            "What visual element is placed immediately below the 'Schedule' section?": "A horizontal line",
            "How many rows and columns are in the table within the 'Grading Policy' section?": "3 rows and 2 columns",
            "What is the footer text centered at the bottom of the document?": "University of Learning"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001416",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nTransform a text description into a Typst document that outlines the structure of an academic paper.\n\nFeature Requirements:\n- Insert a main heading at level-1 titled \"Academic Paper\".\n- Create an \"Abstract\" section with a level-2 heading followed by a paragraph containing placeholder text.\n- Add a \"Methodology\" section with a level-2 heading that contains exactly three subsections, each with a level-3 heading and a list of two bullet points with dummy content.\n- Construct a \"Results\" section with a level-2 heading that includes one table with two columns and three rows displaying placeholder data.\n- Place a horizontal line between the \"Methodology\" section and the \"Results\" section.\n- Incorporate a \"Discussion\" section with a level-2 heading followed by a paragraph of placeholder text.\n- Form a \"References\" section at the end with a level-2 heading and an ordered list of four items with placeholder text.\n- Add a footer at the bottom with centered text \"Confidential Document\" in a smaller font size.\n- Ensure that each heading level is distinctly formatted to clearly represent the hierarchy of the document.",
        "raw_output_metric": [
            "Academic Paper",
            "Abstract",
            "Methodology",
            "Results",
            "Discussion",
            "References",
            "Confidential Document"
        ],
        "VQA": {
            "What is the main level-1 heading on the page?": "Academic Paper",
            "What is the title of the abstract section (level-2 heading)?": "Abstract",
            "How many subsections are under the 'Methodology' section?": "3",
            "How many bullet points are listed in each Methodology subsection?": "2",
            "Is there a horizontal line between the Methodology section and the Results section?": "Yes",
            "What are the dimensions of the table in the Results section?": "2 columns and 3 rows",
            "How many items are in the ordered list in the References section?": "4",
            "What is the centered footer text at the bottom of the document?": "Confidential Document"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001417",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document representing the layout and components of a scientific research article.\n\nFeature Requirements:\n- Include a main title using a level-1 heading with the text \"Scientific Study Overview\".\n- Create an \"Abstract\" section with a level-2 heading followed by a paragraph containing placeholder text.\n- Insert a \"Methodology\" section with a level-2 heading that includes a numbered list of three detailed steps, each step described in its own paragraph.\n- Add a \"Results\" section with a level-2 heading that contains a table having exactly three columns and three rows filled with placeholder content.\n- Place a horizontal line between the \"Methodology\" and \"Results\" sections.\n- Generate a \"References\" section with a level-2 heading that lists exactly four bullet points, each referencing a fictitious article.\n- Include a footer area with a centered line stating \"Published 2023\" in a smaller font size.\n- Ensure that at least one paragraph or list is indented to clearly indicate hierarchy in the document.",
        "raw_output_metric": [
            "Scientific Study Overview",
            "Abstract",
            "Methodology",
            "Results",
            "References",
            "Published 2023"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Scientific Study Overview",
            "How is the 'Abstract' section indicated visually in the document?": "It has a level-2 heading followed by a paragraph with placeholder text",
            "How many steps are listed under the 'Methodology' section?": "3",
            "How many columns and rows does the table in the 'Results' section have?": "3 columns and 3 rows",
            "Is there a horizontal line visible between the 'Methodology' and 'Results' sections?": "Yes",
            "How many bullet points are present in the 'References' section?": "4",
            "What text is centered in the footer area?": "Published 2023",
            "Is there an indented element (paragraph or list) in the document to indicate hierarchy?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001418",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document that simulates a brief scientific research poster layout.\n\nFeature Requirements:\n- Include a main title using a level-1 heading with the text \"Research Poster\".\n- Add a subtitle directly below the title using a level-2 heading stating \"Findings & Discussion\".\n- Create exactly three primary sections with level-2 headings titled \"Abstract\", \"Methodology\", and \"Results\".\n- In the \"Abstract\" section, insert one paragraph containing placeholder text.\n- Under the \"Methodology\" section, feature a numbered list of four items representing key steps.\n- Within the \"Results\" section, construct exactly two subsections using level-3 headings, each followed by a paragraph of placeholder data.\n- Insert a table after the \"Results\" section with exactly two rows and three columns, where each cell contains placeholder content.\n- Use horizontal lines to clearly separate the \"Abstract\", \"Methodology\", and \"Results\" sections.\n- Add a centered section at the end with a level-2 heading labeled \"References\", accompanied by a bullet list of three placeholder items.\n- Conclude the document with a centered footer line reading \"Poster End\" in a smaller font size than the main text.",
        "raw_output_metric": [
            "Research Poster",
            "Findings & Discussion",
            "Abstract",
            "Methodology",
            "Results",
            "References",
            "Poster End"
        ],
        "VQA": {
            "What text is used in the main title (level-1 heading)?": "Research Poster",
            "What text appears right below the main title as a subtitle (level-2 heading)?": "Findings & Discussion",
            "How many primary sections with level-2 headings are displayed?": "3",
            "What are the titles of these primary sections?": "Abstract, Methodology, and Results",
            "How many items are in the numbered list within the Methodology section?": "4",
            "How many level-3 subsections are present in the Results section?": "2",
            "What are the dimensions of the table included after the Results section?": "2 rows and 3 columns",
            "What is the text of the centered level-2 heading at the end of the document?": "References",
            "How many items are in the bullet list under the References section?": "3",
            "What does the centered footer line display?": "Poster End"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001419",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a detailed scientific research summary into a Typst document outlining the structure and components of a research report.\n\nFeature Requirements:\n- Create a main title using a level-1 heading element with the text \"Scientific Research Report\".\n- Include a section with a level-2 heading titled \"Abstract\" followed by a paragraph of placeholder text summarizing the report.\n- Insert a section titled \"Methodology\" with a level-2 heading and include two bullet lists: the first with exactly three points describing research methods, and the second with exactly three points listing data collection techniques.\n- Add a \"Results\" section with a level-2 heading that contains a numbered list of four outcomes, each described with a brief placeholder sentence.\n- Place a horizontal rule immediately after the \"Methodology\" section to visually separate it from the \"Results\" section.\n- Construct a \"Discussion\" section with a level-2 heading and include exactly two nested subsections (each with a level-3 heading) discussing implications and future work, respectively, each followed by a short paragraph of placeholder text.\n- Conclude with a \"References\" footer area using a centered, smaller text paragraph that reads \"References available upon request\".",
        "raw_output_metric": [
            "Scientific Research Report",
            "Abstract",
            "Methodology",
            "Results",
            "Discussion",
            "Implications",
            "Future Work",
            "References available upon request"
        ],
        "VQA": {
            "What is the main title displayed as the level-1 heading?": "Scientific Research Report",
            "What is the title of the section that summarizes the report?": "Abstract",
            "How many bullet points are in the first list under 'Methodology'?": "3",
            "How many bullet points are in the second list under 'Methodology'?": "3",
            "How many numbered items are listed in the 'Results' section?": "4",
            "What visual element separates the 'Methodology' and 'Results' sections?": "Horizontal rule",
            "What are the titles of the two nested subsections under 'Discussion'?": "Implications and Future Work",
            "What text is displayed in the footer area regarding references?": "References available upon request"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001420",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into a Typst document representing the layout of a technical report.\n\nFeature Requirements:\n- Start the document with a level-1 heading titled \"Technical Report\".\n- Create a section with a level-2 heading \"Executive Summary\" followed by a paragraph with placeholder text.\n- Under the \"Executive Summary\" section, add a level-3 heading \"Project Overview\" and include a bullet list containing three items with placeholder text.\n- Insert a horizontal line immediately after the \"Executive Summary\" section.\n- Generate a section with a level-2 heading \"Data Analysis\" that contains two separate paragraphs of placeholder text.\n- Within the \"Data Analysis\" section, add a level-3 heading \"Key Findings\" and include a numbered list of exactly four items with placeholder content.\n- Add another horizontal line to separate the \"Data Analysis\" section from the remaining content.\n- Create a section titled \"Conclusion\" using a level-2 heading and follow it with a paragraph of placeholder text.\n- Place a footer at the bottom of the document containing centered, smaller font text reading \"Report Prepared by Your Name\".\n- Ensure that all section titles and list items are clearly defined and consistently formatted throughout the document.",
        "raw_output_metric": [
            "Technical Report",
            "Executive Summary",
            "Project Overview",
            "Data Analysis",
            "Key Findings",
            "Conclusion",
            "Report Prepared by Your Name"
        ],
        "VQA": {
            "What is the main title at the top of the document?": "Technical Report",
            "What level heading is used for the 'Executive Summary' section?": "Level-2",
            "How many items are present in the bullet list under 'Project Overview'?": "3",
            "What element is placed immediately after the 'Executive Summary' section?": "Horizontal line",
            "How many paragraphs are included in the 'Data Analysis' section?": "2",
            "What is the number of items in the numbered list under 'Key Findings'?": "4",
            "What level heading is used for the 'Conclusion' section?": "Level-2",
            "How is the footer text formatted regarding alignment and font size?": "Centered and smaller font",
            "What is the exact text in the footer?": "Report Prepared by Your Name"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001421",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document that outlines a travel itinerary with distinct sections for each day of the trip.\n\nFeature Requirements:\n- Include a main title formatted as a level-1 heading with the text \"Travel Itinerary\".\n- Create a section with a level-2 heading titled \"Overview\" containing a paragraph of placeholder text describing the journey.\n- Add exactly three day-specific sections, each with a level-2 heading labeled \"Day 1\", \"Day 2\", and \"Day 3\" respectively.\n- Within each day section, include a level-3 heading for \"Morning\", followed by a bullet list of two itinerary items.\n- Under each day section, also add a level-3 heading for \"Evening\", followed by a bullet list of two different itinerary items.\n- Insert a horizontal line between the \"Overview\" section and the first day section.\n- Place a footer area at the end with centered text \"Bon Voyage!\" using a smaller font size than the main body.",
        "raw_output_metric": [
            "Travel Itinerary",
            "Overview",
            "Day 1",
            "Day 2",
            "Day 3",
            "Morning",
            "Evening",
            "Bon Voyage!"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Travel Itinerary",
            "What is the heading of the first content section below the main title?": "Overview",
            "Where is the horizontal line located?": "Between the Overview section and the first day section (Day 1)",
            "How many day-specific sections are included?": "3",
            "What are the labels for the day-specific sections?": "Day 1, Day 2, Day 3",
            "What time-of-day headings are included in each day section?": "Morning and Evening",
            "How many bullet points are listed under the Morning section of each day?": "2",
            "How many bullet points are listed under the Evening section of each day?": "2",
            "What is the text in the footer area and how is it styled?": "Bon Voyage! centered with a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001422",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document that outlines a research agenda with clearly defined sections and structured content.\n\nFeature Requirements:\n- Insert a level-1 heading at the top of the document with the text \"Research Agenda\".\n- Create a section titled \"Overview\" using a level-2 heading, and follow it with a paragraph of placeholder text.\n- Add another section using a level-2 heading labeled \"Objectives\" that includes an unordered list of exactly four bullet points, each representing an objective.\n- Place a horizontal line immediately after the \"Objectives\" section to clearly separate it from subsequent content.\n- Introduce a section named \"Methodology\" with a level-2 heading, followed by exactly two subsections; each subsection must use a level-3 heading and include a numbered list of three steps.\n- Include a section titled \"Summary\" with a centered level-2 heading and a paragraph of placeholder text immediately after the \"Methodology\" section.\n- Conclude the document with a footer area containing a single line of centered text \"Confidential\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Research Agenda",
            "Overview",
            "Objectives",
            "Methodology",
            "Summary",
            "Confidential"
        ],
        "VQA": {
            "What is the main heading at the very top of the document?": "Research Agenda",
            "How many bullet points are listed in the 'Objectives' section?": "4",
            "Is there a horizontal line immediately after the 'Objectives' section?": "Yes",
            "How many level-2 heading sections are present (e.g., Overview, Objectives, Methodology, Summary)?": "4",
            "How many subsections under 'Methodology' (using level-3 headings) are visible?": "2",
            "How many steps are listed in each numbered list within the 'Methodology' subsections?": "3",
            "How is the 'Summary' section's level-2 heading aligned?": "Centered",
            "What is the text shown in the footer area?": "Confidential"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001423",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a detailed description of a scientific research report into a well-organized Typst document.\n\nFeature Requirements:\n- Include a main title using a level-1 heading with the text \"Scientific Research Report\".\n- Add a section with a level-2 heading titled \"Abstract\" that contains one paragraph of placeholder text in italics.\n- Create a section titled \"Methodology\" with a level-2 heading that is followed by exactly two subsections, each having a level-3 heading and containing a list of three bullet points with placeholder descriptions.\n- Include a section with a level-2 heading titled \"Results\" that features a numbered list of four items with placeholder content.\n- Insert a horizontal line to separate the \"Methodology\" section from the \"Results\" section.\n- Conclude with a section called \"Future Directions\" using a level-2 heading and a concluding paragraph in a smaller font size than the main content.\n- Add a footer area at the end with a single line of centered text reading \"End of Report\" in a contrasting style.",
        "raw_output_metric": [
            "Scientific Research Report",
            "Abstract",
            "Methodology",
            "Results",
            "Future Directions",
            "End of Report"
        ],
        "VQA": {
            "What is the main title text at the top of the document?": "Scientific Research Report",
            "What styling is applied to the paragraph in the 'Abstract' section?": "Italics",
            "How many subsections are included under the 'Methodology' section?": "2",
            "How many bullet points does each subsection under 'Methodology' contain?": "3",
            "How many numbered items are present in the 'Results' section?": "4",
            "What visual element separates the 'Methodology' section from the 'Results' section?": "Horizontal line",
            "What is the font size characteristic of the concluding paragraph in the 'Future Directions' section?": "Smaller than the main content",
            "What is the text shown in the footer at the end of the report?": "End of Report"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001424",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document that outlines a university course syllabus overview.\n\nFeature Requirements:\n- Add a main title using a level-1 heading with the text \"Course Syllabus\".\n- Create a section with a level-2 heading titled \"Course Description\" followed by a paragraph containing placeholder text.\n- Insert a horizontal line immediately after the \"Course Description\" section.\n- Build a \"Modules\" section with a level-2 heading that is followed by exactly three subsections; each subsection should have a level-3 heading and an ordered list containing two bullet points with placeholder text.\n- Develop a \"Schedule\" section with a level-2 heading where a table of three columns and two rows is shown, with each cell containing placeholder text.\n- Append a footer area with a centered line of text reading \"End of Syllabus\" in a font size noticeably smaller than the main text.",
        "raw_output_metric": [
            "Course Syllabus",
            "Course Description",
            "Modules",
            "Schedule",
            "End of Syllabus"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Course Syllabus",
            "Which section is immediately followed by a horizontal line?": "Course Description",
            "How many modules (subsections) are listed under the 'Modules' section?": "3",
            "How many bullet points are contained in the ordered list of each module subsection?": "2",
            "How many columns does the table in the 'Schedule' section have?": "3",
            "How many rows does the table in the 'Schedule' section have?": "2",
            "What is the text displayed in the centered footer area?": "End of Syllabus",
            "How is the font size of the footer text described compared to the main text?": "Noticeably smaller",
            "What heading level is used for the 'Course Description' section?": "Level-2",
            "What heading level is used for each module subsection under 'Modules'?": "Level-3"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001425",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document that outlines an event invitation with detailed sections and clear structure.\n\nFeature Requirements:\n- Begin the document with a level-1 heading \"Event Invitation\" prominently displayed at the top.\n- Include a section with a level-2 heading \"About the Event\" followed by a paragraph with placeholder text describing event details.\n- Create a subsections under \"About the Event\" with a level-3 heading \"Schedule\" and include a bullet list of four items representing different time slots.\n- Add another subsection under \"About the Event\" with a level-3 heading \"Location\" and insert a paragraph with placeholder text describing the event venue.\n- Insert a horizontal line to visually separate the \"About the Event\" section from the next section.\n- Present a new section with a level-2 heading \"RSVP\", and place a paragraph with centered alignment indicating how to confirm attendance.\n- Conclude the document with a footer area containing a single line of centered text \"Thank you for reading\" rendered in a smaller font size than the main content.",
        "raw_output_metric": [
            "Event Invitation",
            "About the Event",
            "Schedule",
            "Location",
            "RSVP",
            "Thank you for reading"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Event Invitation",
            "Which heading introduces the event details section?": "About the Event (Level 2)",
            "What heading marks the start of the schedule subsection?": "Schedule (Level 3)",
            "How many bullet points are listed under the 'Schedule' subsection?": "4",
            "What heading is used for the venue description subsection?": "Location (Level 3)",
            "What element is used to separate the 'About the Event' section from the next section?": "Horizontal line",
            "What is the heading for the RSVP section?": "RSVP (Level 2)",
            "How is the RSVP confirmation text styled?": "Centered alignment",
            "What text is displayed in the footer area?": "Thank you for reading",
            "How does the footer text size compare to the main content?": "Smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001426",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Generate a Typst document that outlines the detailed schedule and information for a technology conference.\n\nFeature Requirements:\n- Include a primary title using a level-1 heading with the text \"Tech Summit 2024\" centered at the top.\n- Create a section with a level-2 heading \"Morning Sessions\" followed by two paragraphs; each paragraph must describe a session with a title and a designated time slot.\n- Add a table under a level-2 heading \"Workshop Details\" listing three workshops; each row must have exactly three columns labeled \"Workshop Title\", \"Lead Speaker\", and \"Time\".\n- Create a section with a level-2 heading \"Breakout Tracks\" that contains exactly three subsections, each using a level-3 heading with a distinct track name and accompanied by a bullet list of two topics.\n- Insert a horizontal line to separate the \"Breakout Tracks\" section from the final information.\n- End with a footer area using a centered level-4 heading that contains the italicized text \"Location: City Convention Centre\".",
        "raw_output_metric": [
            "Tech Summit 2024",
            "Morning Sessions",
            "Workshop Details",
            "Workshop Title",
            "Lead Speaker",
            "Time",
            "Breakout Tracks",
            "Location: City Convention Centre"
        ],
        "VQA": {
            "What is the primary title displayed at the top of the document?": "Tech Summit 2024",
            "How is the primary title formatted in the document?": "Centered level-1 heading",
            "Under which heading are the morning sessions listed?": "A level-2 heading titled 'Morning Sessions'",
            "How many paragraphs describe the morning sessions?": "Two",
            "How many workshops are listed in the 'Workshop Details' table?": "Three",
            "What are the column headers shown in the 'Workshop Details' table?": "Workshop Title, Lead Speaker, Time",
            "How many breakout track subsections are included under 'Breakout Tracks'?": "Three",
            "How many bullet points does each breakout track subsection contain?": "Two",
            "What visual element separates the 'Breakout Tracks' section from the final information?": "A horizontal line",
            "What is displayed in the document footer?": "A centered level-4 heading with the italicized text 'Location: City Convention Centre'"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001427",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document that represents a fictional scientific article summarizing a climate research study.\n\nFeature Requirements:\n- Add a main title using a level-1 heading element with the text \"Climate Study Report\".\n- Include an abstract section with a level-2 heading \"Abstract\" followed by a single paragraph of placeholder text summarizing the study.\n- Create a section labeled \"Main Findings\" with a level-2 heading that precedes three subsections; each subsection must use a level-3 heading and contain exactly two bullet points listing placeholder results.\n- Insert a horizontal line between the \"Main Findings\" section and the citation section.\n- Add a \"References\" section using a level-2 heading, followed by an ordered list containing exactly five reference placeholders.\n- Include a sidebar located on the right side of the document with a block element that displays an italicized note reading \"Preliminary Data\".\n- Place a footer at the bottom of the document containing centered small-sized text stating \"This is a preliminary report\".",
        "raw_output_metric": [
            "Climate Study Report",
            "Abstract",
            "Main Findings",
            "References",
            "Preliminary Data",
            "This is a preliminary report"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Climate Study Report",
            "What is the heading label for the abstract section?": "Abstract",
            "How many bullet points does each subsection under 'Main Findings' contain?": "2",
            "How many subsections are under the 'Main Findings' section?": "3",
            "Where is the horizontal line positioned in the document?": "Between the 'Main Findings' section and the 'References' section",
            "How many reference items are listed in the ordered list under 'References'?": "5",
            "What text is displayed in the right-side sidebar in italic style?": "Preliminary Data",
            "What does the footer at the bottom of the document state?": "This is a preliminary report",
            "How is the footer text styled?": "Centered and small-sized"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001428",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document outlining the layout and elements of a simple restaurant menu.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Restaurant Menu Overview\".\n- Display a section with a level-2 heading titled \"Appetizers\" followed by a paragraph containing placeholder text describing this section.\n- Create exactly three subsections under \"Appetizers\", each with a level-3 heading labeled \"Starter A\", \"Starter B\", and \"Starter C\" respectively, and include a bullet list of two placeholder food items in each subsection.\n- Insert a separate section titled \"Main Courses\" using a level-2 heading with a following paragraph of placeholder text describing the main course selections.\n- Implement a horizontal line that clearly separates the \"Appetizers\" section from the \"Main Courses\" section.\n- Add another section titled \"Desserts\" using a level-2 heading, which contains exactly two subsections with level-3 headings and corresponding paragraphs of placeholder descriptions.\n- Include a footer area with centered text stating \"Thank You for Visiting\" in a font size noticeably smaller than the rest of the document.",
        "raw_output_metric": [
            "Restaurant Menu Overview",
            "Appetizers",
            "Starter A",
            "Starter B",
            "Starter C",
            "Main Courses",
            "Desserts",
            "Thank You for Visiting"
        ],
        "VQA": {
            "What is the main title at the top of the document?": "Restaurant Menu Overview",
            "Which section follows a level-2 heading and contains a paragraph describing appetizers?": "Appetizers",
            "How many appetizer subsections are provided under the Appetizers section?": "3",
            "What are the labels of the appetizer subsections?": "Starter A, Starter B, Starter C",
            "How many bullet points are included in each appetizer subsection?": "2",
            "Is there a horizontal line in the document? If yes, what does it separate?": "Yes, it separates the Appetizers section from the Main Courses section",
            "What is the title of the section that describes main course selections?": "Main Courses",
            "How many dessert subsections are present under the Desserts section?": "2",
            "What content is displayed in the footer area?": "Thank You for Visiting",
            "Is the footer text styled with a noticeably smaller font size compared to the rest of the document?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001429",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given personal introduction text into a Typst document illustrating a structured resume layout.\n\nFeature Requirements:\n- Add a main title using a level-1 heading with the text \"My Resume\".\n- Create a section with a level-2 heading titled \"Profile\" followed by a paragraph containing placeholder text introducing the subject.\n- Add two main sections titled \"Experience\" and \"Education\", each with a level-2 heading.\n- Under \"Experience\", include exactly three bullet points listing placeholder job titles and durations.\n- Under \"Education\", create two numbered items representing placeholder degree details with institution names and graduation years.\n- Insert a horizontal line between the \"Profile\" section and the \"Experience\" section.\n- Add a subsection under \"Experience\" with a level-3 heading titled \"Projects\" followed by a paragraph with placeholder text.\n- End the document with a footer area containing a single line of centered text reading \"Resume Complete\" in a smaller font size than the main content.\n- Ensure all elements (headings, paragraphs, bullet points, horizontal line, and footer) are distinctly visible and clearly structured in the output.",
        "raw_output_metric": [
            "My Resume",
            "Profile",
            "Experience",
            "Projects",
            "Education",
            "Resume Complete"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "My Resume",
            "Which section contains a paragraph introducing the subject?": "Profile",
            "Is there a horizontal line between the Profile and Experience sections?": "Yes",
            "How many bullet points are listed under the Experience section?": "3",
            "What is the title of the subsection under the Experience section?": "Projects",
            "How many numbered items are provided in the Education section?": "2",
            "What text is shown in the footer area?": "Resume Complete",
            "Is the footer text centered and in a smaller font size than the rest of the content?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001430",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a detailed description of a basic scientific experiment proposal into a Typst document.\n\nFeature Requirements:\n- Create a main title using a level-1 heading element with the text \"Experiment Proposal Overview\".\n- Insert a section with a level-2 heading titled \"Objective\" followed by a paragraph containing placeholder text describing the experiment's aim.\n- Add a section with a level-2 heading \"Methodology\" containing two subsections: one with a level-3 heading \"Materials\" that includes a bullet list of four items with placeholder text, and one with a level-3 heading \"Procedure\" that features a numbered list of three steps with placeholder text.\n- Include a level-2 heading titled \"Expected Results\" followed by a paragraph of placeholder text.\n- Implement a horizontal line immediately following the \"Methodology\" section to visually separate it from the \"Expected Results\" section.\n- Append a footer area with a single centered line of text reading \"Document Ends\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Experiment Proposal Overview",
            "Objective",
            "Methodology",
            "Materials",
            "Procedure",
            "Expected Results",
            "Document Ends"
        ],
        "VQA": {
            "What is the text of the main title at the top of the document?": "Experiment Proposal Overview",
            "How many level-2 headings are present in the document?": "3",
            "How many level-3 headings are found under the Methodology section?": "2",
            "How many items are listed in the bullet list under the Materials subsection?": "4",
            "How many steps are shown in the numbered list under the Procedure subsection?": "3",
            "Is there a horizontal line separating the Methodology and Expected Results sections?": "Yes",
            "What text is displayed in the footer area and how is it formatted?": "Document Ends (centered with a smaller font size)"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001431",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Generate a Typst document that presents the detailed schedule of a fictional academic conference.\n\nFeature Requirements:\n- Begin with a level-1 heading titled \"Academic Conference 2024\" clearly visible at the top of the document.\n- Include a level-2 heading labeled \"Opening Session\" followed by a paragraph with placeholder text describing the welcome address.\n- Insert a horizontal line immediately after the \"Opening Session\" section to visually separate it from the following sections.\n- Create a level-2 heading titled \"Presentation Sessions\" that introduces the main schedule for the conference.\n- Under \"Presentation Sessions\", add exactly three level-3 subsections titled \"Session Alpha\", \"Session Beta\", and \"Session Gamma\"; each subsection must contain a bullet list of exactly two items representing scheduled talks with placeholder text.\n- Ensure each bullet point in the session lists specifies a \"Talk Title\" and a \"Scheduled Time\" using concise placeholder content.\n- Following the sessions, include a level-2 heading named \"Closing Remarks\" accompanied by a paragraph of placeholder text summarizing the event wrap-up.\n- Add a footer area with a single line of centered text reading \"Conference Schedule Finalized\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Academic Conference 2024",
            "Opening Session",
            "Presentation Sessions",
            "Session Alpha",
            "Session Beta",
            "Session Gamma",
            "Closing Remarks",
            "Conference Schedule Finalized",
            "Talk Title",
            "Scheduled Time"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001432",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a prose description into a Typst document that formats an academic research summary.\n\nFeature Requirements:\n- Start with a level-1 heading titled \"Research Summary\" centered at the top.\n- Include a \"Background\" section using a level-2 heading, immediately followed by a paragraph of filler text describing the context.\n- Create a \"Methodology\" section with a level-2 heading that contains exactly three subsections, each introduced by a level-3 heading and followed by one numbered list with exactly three items.\n- Add a \"Results\" section using a level-2 heading and insert two paragraphs: the first paragraph contains placeholder text and the second is visually separated by a horizontal line.\n- End with a \"References\" section using a level-2 heading, which should include a single paragraph formatted in italics with a list of three citation placeholders separated by semicolons.\n- Ensure that all paragraphs are left-aligned except the main title, and that the horizontal line spans the full text width of the document.",
        "raw_output_metric": [
            "Research Summary",
            "Background",
            "Methodology",
            "Results",
            "References",
            "1.",
            "2.",
            "3.",
            ";"
        ],
        "VQA": {
            "What is the centered main title at the top of the document?": "Research Summary",
            "What is the heading label for the background section?": "Background",
            "How many level-3 subsections are present under the Methodology section?": "3",
            "How many items are there in each numbered list under the Methodology subsections?": "3",
            "How many paragraphs are visible in the Results section?": "2",
            "What visual element separates the two paragraphs in the Results section?": "A full-width horizontal line",
            "How is the References section formatted?": "It is a single italicized paragraph containing three citation placeholders separated by semicolons",
            "What alignment is used for all paragraphs except the centered main title?": "Left aligned"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001433",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Create a Typst document that simulates the structure of a basic scientific report.\n\nFeature Requirements:\n- Insert a main title using a level-1 heading with the text \"Research Summary\" at the top of the document.\n- Add a section with a level-2 heading titled \"Abstract\" followed by a paragraph containing placeholder text describing the study.\n- Under the \"Abstract\" section, create two subsections with level-3 headings titled \"Methodology\" and \"Findings\", each accompanied by a bullet list containing exactly three items of placeholder text.\n- Place a horizontal line after the \"Abstract\" section to visually separate it from the subsequent content.\n- Introduce a section with a level-2 heading titled \"Discussion\" that includes a single paragraph of placeholder text.\n- Include a right-aligned block at the end of the document that contains a short note \"Report Completed\" in a smaller font size than the main text.",
        "raw_output_metric": [
            "Research Summary",
            "Abstract",
            "Methodology",
            "Findings",
            "Discussion",
            "Report Completed"
        ],
        "VQA": {
            "What is the text of the main title at the top of the document?": "Research Summary",
            "What is the title of the level-2 section that contains the study's description?": "Abstract",
            "How many level-3 subsections are found under the Abstract section and what are their titles?": "2; titled 'Methodology' and 'Findings'",
            "How many bullet points does each subsection (Methodology and Findings) contain?": "3",
            "What visual element is placed after the Abstract section?": "A horizontal line",
            "What is the title of the section that follows the horizontal line?": "Discussion",
            "What is the text of the right-aligned note at the end, and how is its font size described relative to the main text?": "Report Completed; the font is smaller"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001434",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a detailed text description into a Typst document outlining the structure and components of a research paper.\n\nFeature Requirements:\n- Include a centered level-1 heading with the title \"A Study on Quantum Computing\" at the top of the document.\n- Present a section with a level-2 heading titled \"Abstract\" immediately followed by a single paragraph of placeholder text.\n- Create a section with a level-2 heading titled \"Introduction\" that contains two consecutive paragraphs of placeholder text.\n- Insert a section with a level-2 heading titled \"Methodology\" which includes exactly two subsections; each subsection must have a level-3 heading and a bullet list containing exactly four placeholder items.\n- Place a horizontal line immediately after the \"Methodology\" section to visually separate it from the subsequent sections.\n- Add a section with a level-2 heading titled \"Results\" that contains one paragraph of placeholder text describing the findings.\n- Create a concluding section with a level-2 heading labeled \"Conclusion\" followed by one paragraph summarizing the outcomes using placeholder text.\n- Append a footer at the end of the document containing a single line of centered text, \"Document generated by Typst\", displayed in a font size smaller than the main content.",
        "raw_output_metric": [
            "A Study on Quantum Computing",
            "Abstract",
            "Introduction",
            "Methodology",
            "Results",
            "Conclusion",
            "Document generated by Typst"
        ],
        "VQA": {
            "What is the centered level-1 heading at the top of the document?": "A Study on Quantum Computing",
            "Where is the title 'A Study on Quantum Computing' positioned?": "Centered",
            "Which sections are indicated by level-2 headings?": "Abstract, Introduction, Methodology, Results, Conclusion",
            "How many paragraphs immediately follow the 'Abstract' heading?": "One",
            "How many paragraphs are found in the 'Introduction' section?": "Two",
            "How many subsections are included in the 'Methodology' section?": "Two",
            "How many bullet list items appear in each Methodology subsection?": "Four",
            "What visual element is placed immediately after the 'Methodology' section?": "A horizontal line",
            "What does the 'Results' section contain?": "One paragraph of placeholder text describing the findings",
            "What is displayed in the footer at the end of the document?": "Centered text saying 'Document generated by Typst' in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001435",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into a Typst document outlining the schedule of a fictional music festival.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Music Festival Schedule\".\n- Create a section with a level-2 heading titled \"Day 1\" followed by a paragraph containing placeholder summary text.\n- Under \"Day 1\", include exactly three time slots, each with a level-3 heading indicating the time (e.g., \"10:00 AM\", \"2:00 PM\", \"6:00 PM\") and a list of four bullet points with placeholder band names.\n- Insert a horizontal line directly below the \"Day 1\" section to visually separate it from the following content.\n- Create a new section with a level-2 heading titled \"Day 2\" that is followed by a paragraph of placeholder text describing the day's events.\n- Within the \"Day 2\" section, add exactly two time slots, each with a level-3 heading indicating the performance time and a corresponding list of three bullet points with placeholder band names.\n- At the bottom of the document, include a centered footer with a smaller font size containing the text \"Schedule provided by Festival Organizers\".",
        "raw_output_metric": [
            "Music Festival Schedule",
            "Day 1",
            "10:00 AM",
            "2:00 PM",
            "6:00 PM",
            "hrule",
            "Day 2",
            "Schedule provided by Festival Organizers"
        ],
        "VQA": {
            "What is the main title at the top of the document?": "Music Festival Schedule",
            "How many main sections (level-2 headings) are there?": "2",
            "What is the title of the first section?": "Day 1",
            "How many time slots are listed under Day 1?": "3",
            "How many bullet points are included under each time slot in Day 1?": "4",
            "Is there a horizontal line separating Day 1 from the following content?": "Yes",
            "How many time slots are present in the Day 2 section?": "2",
            "How many bullet points are listed under each time slot in Day 2?": "3",
            "What is the text displayed in the footer?": "Schedule provided by Festival Organizers",
            "Is the footer centered and set in a smaller font size?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001436",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text description into a Typst document that outlines an event schedule.\n\nFeature Requirements:\n- Create a level-1 heading with the text \"Event Timeline\" as the document header.\n- Add a level-2 heading titled \"Morning Sessions\" followed by a list of three bullet points, each representing a distinct morning event with placeholder names.\n- Follow with a level-2 heading labeled \"Afternoon Sessions\" and include a list of three bullet points, each describing an afternoon activity.\n- Insert a horizontal line immediately after the \"Morning Sessions\" section to visually separate content.\n- Include a level-3 heading called \"Break Times\" with a table featuring two columns labeled \"Time\" and \"Activity\", and populate it with exactly three rows of sample data.\n- Add a level-2 heading titled \"Venue Information\" with a centered paragraph that states \"Location details to be confirmed.\"\n- Conclude the document with a footer area containing a centered line of text \"Document Generated by LLM\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Event Timeline",
            "Morning Sessions",
            "Afternoon Sessions",
            "Break Times",
            "Time",
            "Activity",
            "Venue Information",
            "Location details to be confirmed.",
            "Document Generated by LLM"
        ],
        "VQA": {
            "What is the main title of the document?": "Event Timeline",
            "What is the heading of the first session section?": "Morning Sessions",
            "How many bullet points are listed under 'Morning Sessions'?": "3",
            "Which visual element separates the 'Morning Sessions' from the rest of the content?": "Horizontal line",
            "What is the heading for the table that includes break information?": "Break Times",
            "What are the column headers in the table under 'Break Times'?": "Time and Activity",
            "What does the centered paragraph under 'Venue Information' state?": "Location details to be confirmed.",
            "What is the text content of the footer area?": "Document Generated by LLM"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001437",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text outline into a Typst document that models the layout of a simple blog post with header, main content, sidebar, and footer sections.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Blog Title\".\n- Add a subtitle below the main title using a level-2 heading with the text \"By Author Name\".\n- Create a content section starting with a level-2 heading titled \"Main Article\", followed by exactly two paragraphs of placeholder text.\n- Insert a horizontal line directly below the header area that separates it from the content.\n- Construct a sidebar section with a level-2 heading titled \"Sidebar\" and a vertical list containing exactly four bullet points with placeholder items.\n- Position the sidebar to be clearly separate from the main article, ensuring its content is visually distinguishable.\n- Append a footer containing a single line of centered text \"© 2023 Blog Post\" using a smaller font size than the body text.\n- Ensure all sections are clearly labeled and their respective typographic elements (headings, paragraphs, lists, horizontal line) are implemented as separate, visible components in the document.",
        "raw_output_metric": [
            "Blog Title",
            "By Author Name",
            "Main Article",
            "Sidebar",
            "© 2023 Blog Post"
        ],
        "VQA": {
            "What is the text of the main title?": "Blog Title",
            "What is the subtitle text below the main title?": "By Author Name",
            "What heading labels the main article section?": "Main Article",
            "How many paragraphs of placeholder text follow the main article heading?": "2",
            "What visual element separates the header from the content?": "Horizontal line",
            "What is the heading text for the sidebar section?": "Sidebar",
            "How many bullet points are listed in the sidebar?": "4",
            "What is the centered footer text?": "© 2023 Blog Post"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001438",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given text description into a Typst document that presents a structured blog post reviewing a restaurant.\n\nFeature Requirements:\n- Begin with a main title using a level-1 heading element with the text \"Restaurant Reveal\".\n- Create a section titled \"Overview\" using a level-2 heading followed by a single paragraph of placeholder text summarizing the restaurant's concept.\n- Add a section titled \"Signature Dishes\" with a level-2 heading, then subdivide this section into exactly three subsections; each subsection must use a level-3 heading naming a dish and be followed by a numbered list outlining two key ingredients.\n- Insert a horizontal line immediately before the \"Signature Dishes\" section and another horizontal line immediately after it.\n- Create a section titled \"Customer Reviews\" using a level-2 heading and incorporate two bullet points, each containing a brief testimonial.\n- Add a final centered section titled \"Closing Thoughts\" using a level-2 heading with one paragraph of concluding remarks positioned directly below.\n- End the document with a footer area consisting of one centered line of text \"Thank you for reading!\" in a font size noticeably smaller than the main content.",
        "raw_output_metric": [
            "Restaurant Reveal",
            "Overview",
            "Signature Dishes",
            "Customer Reviews",
            "Closing Thoughts",
            "Thank you for reading!"
        ],
        "VQA": {
            "What is the main title at the top of the document?": "Restaurant Reveal",
            "Which level-2 heading follows the main title?": "Overview",
            "How many horizontal lines are placed around the 'Signature Dishes' section?": "2",
            "How many subsections are included in the 'Signature Dishes' section?": "3",
            "How many key ingredients are listed in each dish's numbered list?": "2",
            "What type of list is used for displaying the key ingredients of each dish?": "Numbered list",
            "How many bullet points are shown under the 'Customer Reviews' section?": "2",
            "Is the 'Closing Thoughts' section centered?": "Yes",
            "What text is displayed in the footer area?": "Thank you for reading!"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001439",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a given product description text into a Typst document representing an e-commerce product information page.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Product Showcase\".\n- Add a section with a level-2 heading titled \"Overview\" followed by a paragraph of placeholder text summarizing the product.\n- Create a subsection under \"Overview\" with a level-3 heading labeled \"Features\" and include an unordered list with exactly four bullet points, each containing placeholder feature descriptions.\n- Insert a horizontal line immediately after the \"Features\" subsection.\n- Create a section with a level-2 heading titled \"Specifications\" that contains two paragraphs: the first with an introductory placeholder text and the second with an enumerated list of exactly three technical details.\n- Add a section with a level-2 heading titled \"Pricing\" featuring a centered paragraph that displays a placeholder price value.\n- Include a footer area at the end using a centered level-3 heading with the text \"End of Product Info\" styled in an italicized font.",
        "raw_output_metric": [
            "Product Showcase",
            "Overview",
            "Features",
            "Specifications",
            "Pricing",
            "End of Product Info"
        ],
        "VQA": {
            "What is the main page title shown as a level-1 heading?": "Product Showcase",
            "What is the heading text for the overview section (level-2)?": "Overview",
            "What is the heading label for the subsection under Overview?": "Features",
            "How many bullet points are included in the Features list?": "4",
            "What element is inserted immediately after the Features subsection?": "Horizontal line",
            "Under Specifications, how many technical details are listed in the enumerated list?": "3",
            "What is the heading text for the Pricing section?": "Pricing",
            "How is the price paragraph aligned in the Pricing section?": "Centered",
            "What is the text in the footer area and how is it styled?": "End of Product Info in italicized font"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001440",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a detailed narrative into a Typst document that simulates the layout of a research report.\n\nFeature Requirements:\n- Begin the document with a centered level-1 title reading \"Research Insights\".\n- Start an \"Abstract\" section with a level-2 heading, followed by a paragraph enclosed in a subtle shaded block that contains placeholder text.\n- Create a \"Methodology\" section with a level-2 heading and include exactly two paragraphs detailing the research process with generic placeholder descriptions.\n- Add a \"Data Analysis\" subsection under \"Methodology\" marked by a level-3 heading, and construct a table with three columns and two rows filled with placeholder entries.\n- Insert a horizontal line to clearly separate the \"Methodology\" section from the \"Results\" section.\n- Conclude with a \"Summary\" section that uses a level-2 heading and a concluding paragraph, with a centered footer displaying the text \"Report End\" in a smaller font size.",
        "raw_output_metric": [
            "Research Insights",
            "Abstract",
            "Methodology",
            "Data Analysis",
            "Results",
            "Summary",
            "Report End"
        ],
        "VQA": {
            "What is the centered level-1 title at the top of the document?": "Research Insights",
            "Is there a level-2 heading for the Abstract section?": "Yes, labeled 'Abstract'",
            "Does the Abstract section include a paragraph in a subtle shaded block?": "Yes, with placeholder text",
            "How many paragraphs are included in the Methodology section?": "Two",
            "What is the level of the 'Data Analysis' subsection under Methodology?": "Level-3",
            "How many columns and rows are in the Data Analysis table?": "Three columns and two rows",
            "Is there a horizontal line separating the Methodology section from the Results section?": "Yes",
            "Is there a Summary section with a level-2 heading?": "Yes",
            "What is the text in the centered footer at the conclusion?": "Report End",
            "Is the 'Report End' footer displayed in a smaller font size?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001441",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into Typst code that designs an academic research paper layout.\n\nFeature Requirements:\n- Create a main title using a level-1 heading centered on the page with the text \"Research Analysis\".\n- Include an abstract section with a level-2 heading titled \"Abstract\" followed by a justified paragraph containing placeholder text.\n- Add exactly three sections with level-2 headings named \"Introduction\", \"Methodology\", and \"Results\" respectively.\n- Under the \"Methodology\" section, include exactly two subsections each with a level-3 heading and a bullet list of exactly three items detailing research techniques.\n- Insert a page break immediately after the \"Introduction\" section before beginning the \"Methodology\" section.\n- In the \"Results\" section, include a numbered list with exactly four items of placeholder text.\n- Conclude the document with a level-2 heading \"Conclusion\" and a centered paragraph of placeholder summary text.\n- Ensure all headings, paragraphs, lists, and page breaks are visibly distinct in the output.\n- Format the abstract and conclusion paragraphs differently by applying text alignment and spacing adjustments.",
        "raw_output_metric": [
            "Research Analysis",
            "Abstract",
            "Introduction",
            "Methodology",
            "Results",
            "Conclusion"
        ],
        "VQA": {
            "What is the centered main title displayed at the top of the document?": "Research Analysis",
            "What is the title of the abstract section?": "Abstract",
            "What text alignment is applied to the paragraph following the 'Abstract' heading?": "Justified",
            "How many level-2 section headings (excluding the abstract and conclusion) are used and what are their names?": "3 sections: Introduction, Methodology, Results",
            "What visible element is inserted immediately after the 'Introduction' section?": "A page break",
            "Under the 'Methodology' section, how many level-3 subsections are present?": "2",
            "How many bullet points does each subsection under 'Methodology' include?": "3",
            "In the 'Results' section, how many items are shown in the numbered list?": "4",
            "What text alignment is used for the concluding paragraph under the 'Conclusion' heading?": "Centered"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001442",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Generate a Typst document that outlines the details of a music festival brochure with multiple structured content sections.\n\nFeature Requirements:\n- Include a main title using a level-1 heading with the text \"Harmony Fest 2024\" at the top of the document.\n- Create exactly three primary sections using level-2 headings titled \"Event Schedule\", \"Artist Lineup\", and \"Venue Information\".\n- Under \"Event Schedule,\" include a numbered list with exactly four items, each detailing a specific date, time, venue stage, and performance highlight.\n- In the \"Artist Lineup\" section, add two subsections with level-3 headings named \"Headliners\" and \"Supporting Acts\", where each subsection features a bullet list with exactly two items.\n- Insert a horizontal line between the \"Event Schedule\" and \"Artist Lineup\" sections to separate them visually.\n- Under \"Venue Information,\" include a single paragraph with placeholder text covering details such as transportation options, location specifics, and times.\n- At the end of the document, add a footer with a centered line of text \"Copyright 2024 Harmony Fest\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Harmony Fest 2024",
            "Event Schedule",
            "Artist Lineup",
            "Venue Information",
            "Headliners",
            "Supporting Acts",
            "Copyright 2024 Harmony Fest"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Harmony Fest 2024",
            "What are the titles of the three primary sections (level-2 headings)?": "Event Schedule, Artist Lineup, Venue Information",
            "How many items are contained in the numbered list under 'Event Schedule'?": "4",
            "What are the names of the two level-3 subsections in the 'Artist Lineup' section?": "Headliners and Supporting Acts",
            "What type and how many items are present in each bullet list under the 'Artist Lineup' subsections?": "A bullet list with exactly 2 items each",
            "What visual element is placed between the 'Event Schedule' and 'Artist Lineup' sections?": "A horizontal line",
            "What content is included in the 'Venue Information' section?": "A single paragraph with placeholder text covering transportation options, location specifics, and times",
            "What does the footer display and how is it styled compared to the main content?": "Copyright 2024 Harmony Fest, centered and in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001443",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a description of a day-long conference agenda into a Typst document that outlines the event schedule and details.\n\nFeature Requirements:\n- Use a main level-1 heading to display the conference title \"Tech Innovators Conference 2023\".\n- Insert a level-2 heading under the title to indicate the conference date \"July 20, 2023\", aligned to the right.\n- Create a section titled \"Agenda\" using a level-2 heading and include a table with exactly three columns labeled \"Time\", \"Session\", and \"Speaker\".\n- Populate the table with exactly four rows of sample session data including appropriate times, session topics, and speaker names.\n- Add a horizontal line immediately following the \"Agenda\" section.\n- Include a section with a level-2 heading labeled \"Location\" that contains a paragraph detailing the venue address.\n- Create a separate section called \"Conference Guidelines\" using a level-2 heading and list exactly three rules as bullet points.\n- Conclude the document with a footnote in a smaller font size showing the text \"Schedule subject to change\".",
        "raw_output_metric": [
            "Tech Innovators Conference 2023",
            "July 20, 2023",
            "Agenda",
            "Time",
            "Session",
            "Speaker",
            "Location",
            "Conference Guidelines",
            "Schedule subject to change"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Tech Innovators Conference 2023",
            "What is the conference date and how is it aligned?": "July 20, 2023, aligned to the right",
            "What are the column headers of the agenda table?": "Time, Session, Speaker",
            "How many rows of sample session data are included in the table?": "4",
            "Is there a horizontal line after the 'Agenda' section?": "Yes",
            "What does the 'Location' section contain?": "A paragraph detailing the venue address",
            "How many rules are listed under 'Conference Guidelines'?": "3",
            "What is the text displayed in the footnote at the end of the document?": "Schedule subject to change"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001444",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Convert a text description into a Typst document that outlines the structure and elements of a simple blog post.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Daily Musings\".\n- Create a section with a level-2 heading titled \"Overview\" followed by a paragraph that introduces the content with a brief description.\n- Under \"Overview\", add exactly three subsections, each with a level-3 heading labeled \"Morning Thoughts\", \"Afternoon Reflections\", and \"Evening Insights\", respectively.\n- In each subsection under \"Overview\", include a bullet list with exactly four items that contain placeholder text.\n- Insert a horizontal line immediately after the subsections and before the next major section.\n- Add a centered section with a level-2 heading titled \"Summary\" followed by a single paragraph of placeholder text.\n- Conclude the document with a footer area that contains one line of centered text \"Blog Entry End\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "Daily Musings",
            "Overview",
            "Morning Thoughts",
            "Afternoon Reflections",
            "Evening Insights",
            "Summary",
            "Blog Entry End"
        ],
        "VQA": {
            "What is the main title displayed at the top of the document?": "Daily Musings",
            "Which heading level is used for the main title 'Daily Musings'?": "Level-1",
            "How many subsections are under the 'Overview' section?": "3",
            "What are the names of the subsections under 'Overview'?": "Morning Thoughts, Afternoon Reflections, Evening Insights",
            "How many bullet list items does each subsection contain?": "4",
            "What visual element appears immediately after the subsections?": "Horizontal line",
            "What is the heading of the centered section following the horizontal line?": "Summary",
            "What text does the footer area display at the bottom of the document?": "Blog Entry End",
            "Is the footer text styled in a smaller font size than the main content?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001445",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Transform a given product launch description into a Typst document formatted as a marketing brochure.\n\nFeature Requirements:\n- Add a main level-1 heading at the top with the text \"Product Launch\" to serve as the brochure title.\n- Insert a section with a level-2 heading labeled \"Overview\" immediately below the main title, followed by a paragraph of placeholder text.\n- Under the \"Overview\" section, include an unordered bullet list containing exactly four items, each displaying generic placeholder content.\n- Create a new section with a level-2 heading titled \"Features\" and organize it into two distinct subsections.\n- For the first subsection, use a level-3 heading with the text \"Innovative Design\" and follow it with a single paragraph of placeholder text.\n- For the second subsection, use a level-3 heading with the text \"Advanced Performance\" and include a single paragraph of placeholder text beneath it.\n- Insert a horizontal line that clearly separates the \"Features\" section from the subsequent content.\n- Add a centered section with a level-2 heading labeled \"Contact Us\" accompanied by a paragraph of placeholder text.\n- At the end of the document, include a footer area with a single line of centered text stating \"Thank you for your interest\" in a smaller font size than the rest of the content.",
        "raw_output_metric": [
            "Product Launch",
            "Overview",
            "Innovative Design",
            "Advanced Performance",
            "Features",
            "Contact Us",
            "Thank you for your interest"
        ],
        "VQA": {
            "What is the main title text at the top of the brochure?": "Product Launch",
            "What is the level-2 heading immediately below the main title?": "Overview",
            "How many bullet points are displayed under the Overview section?": "4",
            "What are the two sub-section headings under the Features section?": "Innovative Design and Advanced Performance",
            "Which graphical element separates the Features section from the subsequent content?": "A horizontal line",
            "What is the centered section heading after the horizontal line?": "Contact Us",
            "What is the footer text displayed at the end of the document?": "Thank you for your interest",
            "Is the footer text shown in a smaller font size compared to the other content?": "Yes"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001446",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a given text description into a Typst document that represents a minimalist digital resume.\n\nFeature Requirements:\n- Include a main title as a level-1 heading with the text \"Digital Resume\".\n- Create a \"Profile\" section using a level-2 heading, followed by one paragraph containing placeholder text for a short biography.\n- Construct an \"Education\" section with a level-2 heading, and list exactly three bullet points, each describing a distinct educational achievement with placeholder text.\n- Develop an \"Experience\" section with a level-2 heading that contains exactly two subsections, each defined by a level-3 heading (\"Job Position 1\" and \"Job Position 2\") and followed by a paragraph with placeholder content.\n- Insert a horizontal line to visually separate the \"Education\" section from the \"Experience\" section.\n- Add a footer area with centered text \"Resume Last Updated: [Date]\" displayed in a smaller font size than the main content.\n- Ensure that the layout maintains clear and distinct separations between sections as described.",
        "raw_output_metric": [
            "Digital Resume",
            "Profile",
            "Education",
            "Experience",
            "Job Position 1",
            "Job Position 2",
            "Resume Last Updated: [Date]"
        ],
        "VQA": {
            "What is the main title displayed as a level-1 heading?": "Digital Resume",
            "What is the title of the section that contains a short biography?": "Profile",
            "How many bullet points are listed in the Education section?": "Three",
            "What do the bullet points under the Education section describe?": "Distinct educational achievements with placeholder text",
            "How many job positions are shown in the Experience section?": "Two",
            "What are the labels of the job positions in the Experience section?": "Job Position 1 and Job Position 2",
            "What visual element separates the Education section from the Experience section?": "A horizontal line",
            "What text is displayed in the footer area?": "Resume Last Updated: [Date]",
            "How is the footer text styled compared to the main content?": "Centered and in a smaller font size"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001447",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nConvert a textual blueprint into a Typst document that models a minimalist portfolio page layout.\n\nFeature Requirements:\n- Begin the document with a level-1 heading titled \"My Portfolio Showcase\".\n- Follow the main heading with a section featuring a level-2 heading named \"About Me\" and a paragraph containing placeholder text about the individual's background.\n- Include a section titled \"Projects\" with a level-2 heading, and under this section, create exactly three entries, each entry featuring a level-3 heading with a project title and a bullet list of two project highlights.\n- Insert a horizontal line separating the \"About Me\" section from the \"Projects\" section.\n- Add a final section with a level-2 heading titled \"Contact\" containing a single centered paragraph with placeholder text.\n- Conclude the document with a footer area that displays centered text reading \"Portfolio End\" in a smaller font size than the main content.",
        "raw_output_metric": [
            "My Portfolio Showcase",
            "About Me",
            "Projects",
            "Contact",
            "Portfolio End"
        ],
        "VQA": {
            "What is the main title of the page?": "My Portfolio Showcase",
            "Which section heading comes directly after the main title?": "About Me",
            "What element visually separates the 'About Me' section from the 'Projects' section?": "Horizontal line",
            "How many project entries are listed under the 'Projects' section?": "Three",
            "How many bullet points are included for each project entry?": "Two",
            "What is the heading of the section containing the contact information?": "Contact",
            "What text is displayed in the centered footer area with a smaller font size?": "Portfolio End"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001448",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask:\nGenerate a Typst document that illustrates a conceptual project dashboard layout.\n\nFeature Requirements:\n- Include a main level-1 heading with the text \"Project Dashboard\" positioned at the top of the document.\n- Create a sub-header with a level-2 heading titled \"Overview\" immediately under the main heading, followed by a brief descriptive paragraph.\n- Under \"Overview\", include two separate sections with level-3 headings labeled \"Progress\" and \"Statistics\", each containing a sample paragraph of text.\n- Under the \"Statistics\" section, insert a table with exactly two columns and three rows to display sample numerical data.\n- Place a horizontal line directly after the \"Overview\" section to visibly separate it from the following content.\n- Include a level-2 heading titled \"Team Updates\" after the horizontal line, followed by a bullet list of four items representing sample team announcements.\n- End with a footer that centers the text \"Powered by AI\" using a font size smaller than that of the main content.",
        "raw_output_metric": [
            "Project Dashboard",
            "Overview",
            "Progress",
            "Statistics",
            "Team Updates",
            "Powered by AI"
        ],
        "VQA": {
            "What is the text of the main level-1 heading at the top of the document?": "Project Dashboard",
            "What is the level-2 sub-header immediately below the main heading?": "Overview",
            "How many level-3 sections are provided under 'Overview'?": "2",
            "What are the labels of the two level-3 sections under 'Overview'?": "Progress and Statistics",
            "How many rows and columns does the table under 'Statistics' have?": "3 rows and 2 columns",
            "What is the text of the level-2 heading after the horizontal line?": "Team Updates",
            "How many bullet list items are displayed under 'Team Updates'?": "4",
            "What is the footer text centered at the bottom of the document, and how is its font size described relative to the main content?": "Powered by AI; the font size is smaller than that of the main content"
        }
    },
    {
        "task_name": "Text to Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "task_id": "001449",
        "input_type": "Text",
        "output_type": "Typst",
        "rendering": true,
        "query": "Please output Typst:\n\nTask: Generate a Typst document that represents a travel itinerary breakdown for a multi-day trip.\n\nFeature Requirements:\n- Display a main title as a level-1 heading with the text \"Travel Itinerary Plan\".\n- Create a section with a level-2 heading titled \"Destination Overview\" followed by a single paragraph of placeholder text describing the overall destination.\n- Define exactly three daily itinerary sections labeled \"Day One\", \"Day Two\", and \"Day Three\" using level-3 headings, each followed by a bullet list containing exactly two placeholder items representing planned activities.\n- Insert a horizontal line immediately after the daily itinerary sections.\n- Add a closing section with a level-2 heading titled \"Additional Notes\" and include one paragraph of placeholder content under this heading.\n- Include a footer area that presents a centered line of text reading \"Plan Confirmed\" in a smaller font size than the main body text.",
        "raw_output_metric": [
            "Travel Itinerary Plan",
            "Destination Overview",
            "Day One",
            "Day Two",
            "Day Three",
            "Additional Notes",
            "Plan Confirmed"
        ],
        "VQA": {
            "What is the text of the main title in the document?": "Travel Itinerary Plan",
            "What level heading is used for the main title?": "Level-1",
            "What title is given to the destination overview section?": "Destination Overview",
            "How many daily itinerary sections are there, and what are their labels?": "Three: Day One, Day Two, and Day Three",
            "How many bullet list items does each daily itinerary section contain?": "Two",
            "What is inserted immediately after the daily itinerary sections?": "A horizontal line",
            "What is the title of the closing section that follows the horizontal line?": "Additional Notes",
            "What footer text is displayed and how is it styled?": "A centered line of text reading 'Plan Confirmed' in a smaller font size"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001500",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional daily temperature data for a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Daily Temperature Trend\" centered at the top of the visualization.\n- Display exactly 7 data points, each representing a unique day of the week starting from Monday.\n- Connect the data points with a smooth line to illustrate the temperature trend.\n- Mark each data point with a distinct circular shape and annotate the exact temperature value directly next to it.\n- Use the x-axis to clearly label the days of the week (Mon, Tue, Wed, Thu, Fri, Sat, Sun) ensuring no label overlaps.\n- Format the y-axis to display temperature values in degrees, with tick marks placed at every 5-degree interval.\n- Include horizontal grid lines corresponding to each y-axis tick mark to improve visual readability of the chart.",
        "raw_output_metric": [
            "Fictional Daily Temperature Trend",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "line",
            "circle",
            "text",
            "grid",
            "5"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Fictional Daily Temperature Trend",
            "How many data points are plotted on the chart?": "7",
            "Which days are labeled on the x-axis?": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
            "Are the data points connected by a smooth line?": "Yes",
            "What shape is used to mark each data point?": "Circular shape",
            "What additional information is directly annotated next to each data point?": "The exact temperature value",
            "At what interval are the tick marks placed on the y-axis?": "Every 5 degrees",
            "Are horizontal grid lines drawn corresponding to each y-axis tick mark?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001501",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional climate data.\n\nFeature Requirements:\n- Include a title at the top with the text \"Climate Trends Overview\" in bold and centered.\n- Plot a line chart with exactly 6 data points representing average monthly temperatures from January to June.\n- Use the x-axis to label each month (January, February, March, April, May, June) with labels angled at 45 degrees.\n- Display the y-axis to show temperature values in degrees Celsius, with tick marks at every 5-degree interval.\n- Render the line in a color gradient transitioning smoothly from blue at the lowest temperature to red at the highest.\n- Add circular markers at each data point with a fixed diameter of 6 pixels.\n- Implement tooltips that display both the month and the corresponding temperature when hovering over each marker.\n- Set the chart's background to white with a subtle light gray border surrounding the plot area.",
        "raw_output_metric": [
            "Climate Trends Overview",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "45",
            "5",
            "blue",
            "red",
            "tooltip",
            "6",
            "white",
            "lightgray",
            "circle"
        ],
        "VQA": {
            "What is the title text displayed at the top of the chart?": "Climate Trends Overview",
            "Is the title text centered and in bold?": "Yes",
            "How many data points are there on the line chart?": "6",
            "Which months are shown on the x-axis?": "January, February, March, April, May, June",
            "At what angle are the month labels on the x-axis displayed?": "45 degrees",
            "How often do tick marks appear on the y-axis?": "Every 5 degrees",
            "Describe the color gradient used for the line in the chart.": "Transitions smoothly from blue at the lowest temperature to red at the highest temperature",
            "What shape and size are the markers at each data point?": "Circular with a fixed diameter of 6 pixels",
            "What background and border styling is applied to the chart?": "White background with a subtle light gray border surrounding the plot area"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001502",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization tracking the monthly average temperatures in several fictional cities.\n\nFeature Requirements:\n- Include a title with the text \"Fictional City Temperature Trends\" displayed at the top of the visualization.\n- Plot exactly 3 distinct lines, each representing a different fictional city.\n- Assign a unique color to each line, ensuring no two lines share the same color.\n- Label the x-axis with the months of the year, ensuring that each month is fully visible and evenly spaced.\n- Set the y-axis to display temperature values in Celsius, with tick marks at every 5-degree increment.\n- Place a distinct marker (e.g., a circle) on every data point along each line to emphasize the exact monthly values.\n- Include a legend on the right side of the chart that maps each line color to its corresponding fictional city.\n- Overlay horizontal grid lines corresponding to each y-axis tick to improve readability.\n- Display numerical temperature values next to each data point for precise value representation.",
        "raw_output_metric": [
            "Fictional City Temperature Trends",
            "City A",
            "City B",
            "City C",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "Celsius",
            "5",
            "circle",
            "legend",
            "grid"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Fictional City Temperature Trends",
            "How many distinct lines representing fictional cities are plotted?": "3",
            "Are the colors for each line unique?": "Yes",
            "How are the x-axis labels formatted?": "Each month of the year is fully visible and evenly spaced",
            "What temperature unit is shown on the y-axis and how are tick marks arranged?": "Temperature is in Celsius with tick marks at every 5-degree increment",
            "Is a marker placed on every data point along the lines?": "Yes, a distinct circle marker is used",
            "Where is the legend located and what does it map?": "On the right side; it maps each line color to its corresponding fictional city",
            "Are horizontal grid lines included in the visualization?": "Yes, corresponding to each y-axis tick",
            "Are numerical temperature values displayed next to each data point?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001503",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of mythical city demographic data.\n\nFeature Requirements:\n- Include a title with the text \"Mythical City Demographics\" centered at the top of the visualization.\n- Plot exactly 7 points, each representing a different district of the mythical city.\n- Assign a unique color to each district so that no two points share the same color.\n- Map the x-axis to display district names and ensure each label is fully visible without overlapping.\n- Map the y-axis to display population numbers formatted with commas and labeled in increments of 5,000.\n- Vary the size of each plot point based on the population density, with larger circles indicating higher density.\n- Include a legend at the top right that clearly associates each color with its corresponding district.\n- Add tooltips for each point that reveal both the district name and its exact population when hovered over.",
        "raw_output_metric": [
            "Mythical City Demographics",
            "7",
            "district",
            "population",
            "population_density",
            "tooltip",
            "legend",
            "5000",
            "circle",
            "Vega"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the visualization?": "Mythical City Demographics",
            "How many points representing city districts are plotted?": "7",
            "How is each district visually distinguished from one another?": "Each district is represented with a unique color.",
            "What labels are used on the x-axis?": "District names that are fully visible without overlapping.",
            "How are the y-axis population numbers formatted?": "They are formatted with commas and marked in increments of 5,000.",
            "How does the plot indicate varying population densities?": "By varying the size of each point, with larger circles for higher densities.",
            "Where is the legend located in the visualization?": "At the top right.",
            "What details are shown in the tooltips for each point?": "The district name and its exact population."
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001504",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a pie chart visualization of fictional survey data on favorite types of cuisine.\n\nFeature Requirements:\n- Include a title at the top reading \"Fictional Cuisine Survey Results\".\n- Display exactly 5 pie sectors, each representing a different cuisine option.\n- Assign a unique color to each pie sector from a predetermined set, ensuring no colors are repeated.\n- Label each sector with the percentage of votes it received, positioned near the edge of its slice.\n- Include a legend below the pie chart that maps each unique color to its corresponding cuisine.\n- Arrange the sectors in descending order based on vote count.\n- Add an interactive tooltip that displays the exact number of votes when hovering over any sector.\n- Animate the drawing of the pie chart slices so they expand smoothly from the center when the chart loads.\n- Place a central label inside the pie chart with the text \"Cuisine Choices\" displayed clearly.\n- Set the visualization on a square canvas measuring 600 by 600 pixels.",
        "raw_output_metric": [
            "Fictional Cuisine Survey Results",
            "Cuisine Choices",
            "600",
            "tooltip",
            "legend",
            "arc"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Fictional Cuisine Survey Results",
            "How many pie sectors are visible in the pie chart?": "5",
            "Are the pie sectors arranged in descending order based on vote count?": "Yes",
            "What unique label is displayed in the center of the pie chart?": "Cuisine Choices",
            "Is there a legend below the pie chart mapping each unique color to a cuisine option?": "Yes",
            "Does each pie sector have a unique color from a predetermined set?": "Yes",
            "What text is used to label each pie sector near its edge?": "Percentage of votes",
            "What are the dimensions of the canvas for the visualization?": "600 by 600 pixels",
            "Does the visualization include animations when the pie slices expand from the center?": "Yes",
            "Is there an interactive tooltip present that shows the exact number of votes on hover?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001505",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature data over a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Trends\" centered at the top of the visualization.\n- Plot exactly 7 data points, one for each day of the week, representing average daily temperatures.\n- Connect the data points with a solid, blue line to indicate temperature progression.\n- Mark each data point with a distinct circular marker filled with a contrasting color.\n- Display the exact temperature values directly adjacent to each data point.\n- Configure the x-axis to label the days of the week (Monday through Sunday) with labels fully visible and evenly spaced.\n- Format the y-axis to show temperature values in degrees Celsius, with tick marks at every 5-degree increment.\n- Include grid lines corresponding to both the x-axis and y-axis to improve data readability.\n- Ensure the visualization has a background color of light gray.\n- Position all axis labels and titles clearly, avoiding overlap with the data points or lines.",
        "raw_output_metric": [
            "Fictional Weather Trends",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "line",
            "blue",
            "circle",
            "text",
            "5",
            "lightgray",
            "grid"
        ],
        "VQA": {
            "What is the title text at the top of the visualization?": "Fictional Weather Trends",
            "How many data points are plotted on the chart?": "7",
            "What color is the line connecting the data points?": "Blue",
            "What shape are the markers at each data point?": "Circular",
            "Are the exact temperature values shown adjacent to the data points?": "Yes",
            "How are the days of the week labeled on the x-axis?": "Monday through Sunday, evenly spaced",
            "At what intervals are the y-axis tick marks set?": "Every 5 degrees Celsius",
            "What is the background color of the visualization?": "Light gray"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001506",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a pie chart visualization of fictional renewable energy consumption percentages across different sectors.\n\nFeature Requirements:\n- Include a centered title with the text \"Renewable Energy Consumption\" at the top of the visualization.\n- The pie chart must be divided into exactly 6 slices, each corresponding to a different energy source: Solar, Wind, Hydro, Geothermal, Biomass, and Fossil Fuels.\n- Each slice should have a unique and clearly distinguishable color.\n- Display the percentage value inside or adjacent to each slice in a readable font.\n- Position a legend at the bottom of the chart that maps each color to the corresponding energy source.\n- Use tooltips that display both the energy source name and its percentage when the user hovers over a slice.\n- Ensure the chart is sized appropriately so that all labels and the legend are fully visible without overlap.",
        "raw_output_metric": [
            "Renewable Energy Consumption",
            "Solar",
            "Wind",
            "Hydro",
            "Geothermal",
            "Biomass",
            "Fossil Fuels",
            "tooltip",
            "legend"
        ],
        "VQA": {
            "What is the title text displayed at the top of the visualization?": "Renewable Energy Consumption",
            "How many slices are there in the pie chart?": "6",
            "Which energy sources are represented in the pie chart?": "Solar, Wind, Hydro, Geothermal, Biomass, Fossil Fuels",
            "Are percentage values shown on or adjacent to each slice?": "Yes",
            "Where is the legend positioned in the chart?": "At the bottom",
            "Does each slice have a unique and clearly distinguishable color?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001507",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a multi-line chart visualizing hypothetical temperature trends over a week.\n\nFeature Requirements:\n- Include a title with the text \"Hypothetical Temperature Trends\" displayed at the top center of the visualization.\n- Display exactly 6 distinct lines, each representing a different city.\n- Each line must have a unique color and line style (e.g., dashed, dotted) so they are clearly distinguishable.\n- Include a legend at the bottom of the chart that maps each line color and style to its corresponding city.\n- Plot individual data points on each line with circular markers, and display the corresponding temperature value next to each point.\n- Use the x-axis to label the days of the week (Monday through Sunday) ensuring that each label is non-overlapping and evenly spaced.\n- Format the y-axis to display temperature in degrees Celsius with tick marks at every 2°C increment.\n- Introduce an interactive tooltip that appears on hover, displaying detailed information including city name, day, and temperature.\n- Ensure the visualization includes gridlines across both axes for better readability.\n- Allocate sufficient padding around the chart area to avoid any label or marker clipping.",
        "raw_output_metric": [],
        "VQA": {
            "Is the chart title 'Hypothetical Temperature Trends' displayed at the top center?": "Yes",
            "How many distinct lines representing different cities are shown?": "6",
            "Does each line use a unique color and line style to differentiate the cities?": "Yes",
            "Are circular markers plotted on each data point with temperature values displayed next to them?": "Yes",
            "What labels are shown on the x-axis?": "The days of the week from Monday through Sunday",
            "Does the y-axis display temperature in degrees Celsius with tick marks every 2°C?": "Yes",
            "Is there a legend at the bottom mapping each line's style and color to its city?": "Yes",
            "Are gridlines visible across both the x-axis and y-axis?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001508",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature data over a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Temperature Overview\" centered at the top of the visualization.\n- Plot exactly 7 data points, each corresponding to a day of the week.\n- Connect the data points with a smooth continuous line displayed in a single distinct color.\n- Mark each data point with a filled circle symbol, ensuring the markers are clearly visible.\n- Add horizontal grid lines corresponding to each y-axis tick for enhanced readability.\n- Label the x-axis with weekday names ensuring all labels are fully visible and non-overlapping.\n- Format the y-axis to display temperature values in degrees Celsius with tick marks every 5 degrees.\n- Display numeric temperature values directly adjacent to each data point marker.\n- Place a legend at the bottom of the chart that associates the line color with the label \"Temperature (°C)\".",
        "raw_output_metric": [
            "Fictional Temperature Overview",
            "Temperature (°C)",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "line",
            "circle",
            "grid"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Fictional Temperature Overview",
            "Is the title centered at the top of the visualization?": "Yes",
            "How many data points are plotted for the week?": "7",
            "What shape is used to mark each data point?": "Filled circle",
            "How are the data points connected?": "By a smooth continuous line of a distinct color",
            "Are horizontal grid lines present for the y-axis ticks?": "Yes",
            "What labels are shown on the x-axis?": "Weekday names",
            "How is the y-axis formatted?": "Tick marks every 5 degrees with temperature values in °C",
            "Where is the legend placed and what does it indicate?": "At the bottom, associating the line color with 'Temperature (°C)'"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001509",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of imaginary monthly temperature change data.\n\nFeature Requirements:\n- Include a title with the text \"Imaginary Monthly Temperature Trends\" positioned at the top-center of the visualization.\n- Plot exactly 6 lines, each representing a different fictional city.\n- Each line should use a distinct dash pattern and color combination, ensuring no two lines share the same style.\n- Integrate a legend at the bottom of the chart that maps each combination of color and dash pattern to its corresponding fictional city.\n- Display numerical temperature values as labeled data points along each line, placed above the corresponding point.\n- Use the x-axis to denote the months of a year, with labels rotated at a 45-degree angle to prevent overlapping.\n- Format the y-axis to display temperature in degrees Celsius, with ticks incrementing by 5 degrees.\n- Add gridlines for both axes to assist in reading the values accurately.\n- Incorporate tooltips that reveal the exact month and temperature when hovering over any data point.",
        "raw_output_metric": [
            "Imaginary Monthly Temperature Trends",
            "month",
            "temperature",
            "6",
            "legend",
            "tooltip",
            "strokeDash",
            "rotate",
            "45",
            "5",
            "Celsius",
            "line"
        ],
        "VQA": {
            "What is the title displayed at the top center of the visualization?": "Imaginary Monthly Temperature Trends",
            "How many line charts representing different fictional cities are plotted?": "Six",
            "What unique combinations are used to differentiate each city's line?": "Distinct color and dash pattern",
            "Where is the legend that maps the color and dash patterns to the cities located?": "At the bottom of the chart",
            "What details are shown with each data point along the lines?": "Numerical temperature values above each point",
            "How are the month labels on the x-axis oriented to avoid overlap?": "Rotated at a 45-degree angle",
            "What unit is displayed on the y-axis and what is the tick increment?": "Degrees Celsius with ticks incrementing by 5",
            "Are gridlines included in the visualization, and if so, on which axes?": "Gridlines are displayed for both the x-axis and the y-axis"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001510",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature trends over a week.\n\nFeature Requirements:\n- Include a title \"Weekly Temperature Trends\" centered at the top of the chart.\n- Plot exactly 7 data points, each representing one day of the week, connected by a smooth line.\n- Use circular markers for each data point, each with a unique color to differentiate the days.\n- Annotate each marker with the corresponding temperature value displayed just above the marker.\n- Label the x-axis with day abbreviations (Mon, Tue, Wed, Thu, Fri, Sat, Sun) ensuring the labels do not overlap.\n- Scale the y-axis to represent temperature in degrees Celsius with tick marks at every 5-degree increment.\n- Draw dashed gridlines aligned with both the x-axis and y-axis ticks to enhance data readability.\n- Include an interactive tooltip that shows the day and the corresponding temperature when a user hovers over a data point.",
        "raw_output_metric": [
            "Weekly Temperature Trends",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "tooltip",
            "circle",
            "monotone",
            "dashed",
            "temperature"
        ],
        "VQA": {
            "What is the title text displayed at the top of the chart?": "Weekly Temperature Trends",
            "How many data points are plotted on the chart?": "7",
            "How are the data points connected?": "By a smooth line",
            "What shape is used for each data point marker?": "Circular",
            "Are the markers uniquely colored for each day?": "Yes",
            "What labels are used on the x-axis?": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
            "What is the y-axis increment for the tick marks?": "5 degrees Celsius",
            "What style are the gridlines drawn in?": "Dashed"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001511",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization illustrating fictional temperature fluctuations observed over a one-week period.\n\nFeature Requirements:\n- The chart must include a title reading \"Weekly Temperature Trends\" centered at the top of the visualization.\n- There should be exactly 7 data points, one for each day of the week from Monday through Sunday.\n- The data points must be connected by a smooth line that transitions in color from blue to red across the week.\n- Each data point should be marked with a circular symbol that has a distinct fill color selected from a preset list of seven colors.\n- Display the exact temperature value directly above each circular marker.\n- The x-axis must label each day of the week with clearly visible, non-overlapping text.\n- The y-axis should be scaled to display temperatures in degrees Celsius with tick marks set at 5-degree intervals.\n- Horizontal gridlines must be added at every y-axis tick to enhance readability.",
        "raw_output_metric": [
            "Weekly Temperature Trends",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "blue",
            "red",
            "circle",
            "5",
            "°C"
        ],
        "VQA": {
            "What is the centered chart title?": "Weekly Temperature Trends",
            "How many data points are plotted on the line chart?": "7",
            "What does the x-axis label represent?": "Days of the week (Monday through Sunday)",
            "What color gradient is applied to the smooth connecting line?": "From blue to red",
            "Are temperature values displayed above each circular marker?": "Yes",
            "How many distinct fill colors are used for the circular markers?": "7",
            "What is the tick interval on the y-axis?": "5 degrees Celsius",
            "Are horizontal gridlines shown at every y-axis tick?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001512",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a dual-axis line chart visualization displaying fictional weather data over a seven-day period.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Trends\" centered at the top of the visualization.\n- Plot exactly two lines: one representing temperature in degrees Fahrenheit and the other representing humidity in percentage.\n- Align the left y-axis to display temperature with labels at every 10°F increment, and the right y-axis for humidity with labels at every 20% increment.\n- Use distinct colors and marker shapes for each line to clearly differentiate the temperature and humidity data points.\n- Represent the x-axis with the days of the week as evenly spaced labels that are fully visible and not overlapping.\n- Place a legend at the bottom of the chart mapping each line's color and marker shape to either temperature or humidity.\n- Configure interactive tooltips to show detailed data (day, temperature, and humidity) when hovering over each data point.",
        "raw_output_metric": [
            "Fictional Weather Trends",
            "temperature",
            "humidity",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "legend",
            "tooltip"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Fictional Weather Trends",
            "Is the title centered at the top of the chart?": "Yes",
            "How many lines are plotted in the visualization?": "2",
            "What does the left y-axis represent and what is its label increment?": "Temperature in °F with ticks every 10°F",
            "What does the right y-axis represent and what is its label increment?": "Humidity in % with ticks every 20%",
            "What labels are shown along the x-axis?": "The days of the week",
            "Where is the legend positioned in the chart?": "At the bottom of the chart",
            "Do the plotted lines use distinct colors and marker shapes?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001513",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nGenerate a Vega specification for a line chart visualization of fictional monthly average temperatures for various cities.\n\nFeature Requirements:\n- The chart title must read \"Fictional Monthly Average Temperatures\" and be centered at the top of the visualization.\n- Represent data for exactly 6 distinct cities, each with a uniquely colored line.\n- Use the x-axis to display the months from January through December, ensuring labels are horizontally aligned and fully visible.\n- The y-axis should display temperature values with a grid line at every 5°C increment and labels formatted to one decimal place.\n- Mark each data point with a circular marker on the lines.\n- Position a legend in the top-right corner that maps each colored line to its corresponding city.\n- Implement tooltips that, on hover, display the city name, month, and exact temperature for the data point.\n- Ensure that axis labels and tick marks are clearly legible with a font size of 12px.",
        "raw_output_metric": [
            "Fictional Monthly Average Temperatures",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "tooltip",
            "legend",
            "circle",
            "12px",
            "line"
        ],
        "VQA": {
            "What is the chart title at the top?": "Fictional Monthly Average Temperatures",
            "How many cities are represented in the chart?": "6",
            "How many months are displayed along the x-axis?": "12",
            "What type of marker is used to highlight each data point?": "Circular markers",
            "What is the font size for the axis labels and tick marks?": "12px",
            "Where is the legend positioned?": "Top-right corner",
            "How are the temperature values formatted on the y-axis?": "One decimal place",
            "At what intervals are the y-axis grid lines set?": "Every 5°C increment",
            "Do the tooltips display the city name, month, and temperature on hover?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001514",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a multi-line chart visualization that shows annual average temperature trends for three fictional cities.\n\nFeature Requirements:\n- Include a centered title with the text \"Annual Temperature Trends\" displayed at the top of the visualization.\n- Render exactly 3 different lines, each representing a fictional city: City Alpha, City Beta, and City Gamma.\n- Use a unique color for each line, ensuring that no two lines share the same color.\n- Display a legend on the right side of the chart that maps each line's color to its corresponding city name.\n- Use the x-axis to represent years from 1990 to 2020, with tick marks and labels every 5 years.\n- Format the y-axis to display temperature values in degrees Celsius and include grid lines at every 2°C interval.\n- Enable a tooltip that shows the exact year and temperature value when hovering over any data point.",
        "raw_output_metric": [
            "Annual Temperature Trends",
            "City Alpha",
            "City Beta",
            "City Gamma",
            "1990",
            "2020",
            "tooltip",
            "legend",
            "°C"
        ],
        "VQA": {
            "What is the centered title at the top of the chart?": "Annual Temperature Trends",
            "How many lines are rendered in the visualization?": "Three",
            "Which cities are represented by the lines?": "City Alpha, City Beta, and City Gamma",
            "Where is the legend located on the chart?": "On the right side",
            "What years are displayed on the x-axis and at what interval are tick marks shown?": "From 1990 to 2020 with tick marks every 5 years",
            "How are the y-axis grid lines configured?": "They appear at every 2°C interval",
            "What information is shown in the tooltip when hovering over a data point?": "The exact year and temperature value"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001515",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional daily temperature trends over a month.\n\nFeature Requirements:\n- Include a prominent title at the top with the text \"Monthly Temperature Trends in Fictionland\".\n- Use a continuous line that connects 30 distinct data points, each representing a day in the month.\n- Add a small circle marker at each of the 30 data points to indicate individual daily temperature readings.\n- Configure the x-axis as a time-scale labeled with dates in the \"MM-DD\" format, with labels rotated 45 degrees for clarity.\n- Configure the y-axis as a linear scale displaying temperatures in degrees Celsius with ticks every 5 degrees.\n- Apply a color gradient to the line that gradually transitions from blue at lower temperatures to red at higher temperatures.\n- Include grid lines for both the x-axis and y-axis to aid in reading the data values.\n- Implement a tooltip that displays the exact date and temperature when hovering over each marker.",
        "raw_output_metric": [
            "Monthly Temperature Trends in Fictionland",
            "line",
            "circle",
            "30",
            "%m-%d",
            "blue",
            "red",
            "tooltip",
            "grid",
            "5",
            "Temperature",
            "°C",
            "time",
            "x",
            "y"
        ],
        "VQA": {
            "What is the prominent title displayed at the top of the chart?": "Monthly Temperature Trends in Fictionland",
            "How many data points (days) are plotted on the chart?": "30",
            "How are individual temperature readings indicated on the chart?": "Small circle markers at each data point",
            "What format is used for the x-axis date labels?": "MM-DD",
            "At what angle are the x-axis labels rotated for clarity?": "45 degrees",
            "What is the interval between tick marks on the y-axis?": "Every 5 degrees Celsius",
            "What color gradient is applied to the line?": "Gradually transitions from blue at lower temperatures to red at higher temperatures",
            "Are grid lines included in the visualization?": "Yes, for both the x-axis and y-axis"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001516",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of imaginary weather data.\n\nFeature Requirements:\n- Include a title with the text \"Imaginary Weather Patterns Scatter Plot\" positioned at the top center of the visualization.\n- Plot exactly 6 data points, each representing a different fictional city.\n- Assign each data point a unique color so that no two points share the same color.\n- Include a legend in the top right corner that maps each point's color to its corresponding city name.\n- Display numerical temperature values directly next to each data point.\n- Use the x-axis to represent dates formatted as MM/DD, ensuring all date labels are clear and non-overlapping.\n- Use the y-axis to represent temperature in Celsius with tick marks at every 5-degree increment, including horizontal grid lines across the chart.",
        "raw_output_metric": [
            "Imaginary Weather Patterns Scatter Plot",
            "6",
            "%m/%d",
            "legend",
            "color",
            "text",
            "Celsius",
            "grid",
            "5"
        ],
        "VQA": {
            "What is the title text of the scatter plot?": "Imaginary Weather Patterns Scatter Plot",
            "How many data points are plotted?": "6",
            "Do the data points use unique colors?": "Yes",
            "Where is the legend located in the visualization?": "Top right corner",
            "What mapping does the legend show?": "Each point's color to its corresponding city name",
            "What is displayed next to each data point?": "Numerical temperature values",
            "How are dates formatted on the x-axis?": "MM/DD",
            "What does the y-axis represent?": "Temperature in Celsius",
            "At what interval do tick marks appear on the y-axis?": "Every 5 degrees",
            "Are horizontal grid lines included in the chart?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001517",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional weekly temperature data for several cities.\n\nFeature Requirements:\n- Include a title with the text \"Fictional City Temperature Trends\" displayed prominently at the top of the chart.\n- Display exactly 3 distinct lines, each representing the temperature trends of a unique city throughout the week.\n- Place data points on each line for exactly 7 days, with the x-axis labels as \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", and \"Sun\".\n- Ensure that each line is rendered in a unique and clearly distinguishable color.\n- Add a legend on the left side of the chart that maps each city to its corresponding line color.\n- Display a marker (such as a circle) at each data point along the lines.\n- Configure the y-axis to display temperature values with tick marks at every 5-degree increment.\n- Include interactive tooltips that reveal the city name, day of the week, and temperature when hovering over each data point.",
        "raw_output_metric": [
            "Fictional City Temperature Trends",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "line",
            "circle",
            "left",
            "tooltip",
            "temperature",
            "city"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Fictional City Temperature Trends",
            "How many distinct city lines are shown in the chart?": "3",
            "How many days are represented along the x-axis?": "7",
            "What are the labels on the x-axis?": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
            "How are data points marked on each line?": "Circles",
            "Where is the legend positioned on the chart?": "Left side",
            "What information does the legend provide?": "It maps each city to its line color",
            "At what interval do the y-axis tick marks appear?": "Every 5 degrees"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001518",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization that displays experimental monthly rainfall data.\n\nFeature Requirements:\n- Include a title with the text \"Experimental Rainfall Data Line Chart\" positioned at the top center of the visualization.\n- Use the x-axis to represent the months of a year, displaying full month names (e.g., January, February) without overlap.\n- Format the y-axis to display rainfall in millimeters, with tick labels increasing by 20 mm.\n- Include exactly 6 data points corresponding to 6 consecutive months.\n- Draw a line connecting all data points, ensuring a smooth transition between points.\n- Plot a distinct red circle marker at each data point on the line.\n- Incorporate tooltips that display both the month and the rainfall value when hovering over any data point.",
        "raw_output_metric": [
            "Experimental Rainfall Data Line Chart",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "millimeters",
            "20",
            "line",
            "circle",
            "red",
            "tooltip",
            "interpolate",
            "monotone"
        ],
        "VQA": {
            "What is the title text displayed on the chart?": "Experimental Rainfall Data Line Chart",
            "Where is the chart title positioned?": "Top center",
            "How many data points are plotted on the line chart?": "6",
            "What labels are shown on the x-axis?": "Full names of 6 consecutive months",
            "What is the style of the markers at the data points?": "Distinct red circles",
            "Does the line connecting the data points appear smooth?": "Yes, it has a smooth transition",
            "What is the increment used for the y-axis tick labels?": "20 mm"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001519",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional daily temperature readings for one month.\n\nFeature Requirements:\n- Include a title at the top of the visualization that reads \"Monthly Temperature Fluctuations\".\n- Use the x-axis to represent the days of the month, numbered consecutively from 1 to 30.\n- Format the y-axis to display temperature values in degrees Celsius with tick marks every 5 degrees.\n- Plot a single line that connects exactly 30 data points, each representing a day's temperature.\n- Mark each data point with a small circle symbol using a unique color for the line and markers.\n- Display the numeric temperature value directly above each marker.\n- Add gridlines along both axes to improve data readability.\n- Place a legend at the bottom of the chart that clarifies the line and marker representations.",
        "raw_output_metric": [
            "Monthly Temperature Fluctuations",
            "$schema",
            "https://vega.github.io/schema/vega/v5.json",
            "data",
            "day",
            "temperature",
            "line",
            "circle",
            "legend",
            "30",
            "5",
            "degrees Celsius",
            "grid"
        ],
        "VQA": {
            "What is the title at the top of the visualization?": "Monthly Temperature Fluctuations",
            "How many days are represented on the x-axis?": "30",
            "What does the y-axis display?": "Temperature values in degrees Celsius with tick marks every 5 degrees",
            "How many data points are connected in the line chart?": "30",
            "What shape is used to mark each data point?": "A small circle",
            "Is the numeric temperature value visible for each marker?": "Yes, displayed directly above each marker",
            "Are there gridlines in the chart?": "Yes, gridlines are shown along both axes",
            "Where is the legend placed?": "At the bottom of the chart",
            "What does the legend explain?": "It clarifies the representations of the line and marker symbols"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001520",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional demographic data.\n\nFeature Requirements:\n- Include a title with the text \"Demographic Scatter Plot\" displayed at the top of the visualization.\n- Plot exactly 6 points on the chart, each representing a different age group.\n- Use the x-axis to label age groups with evenly spaced tick marks and ensure labels are rotated 45 degrees.\n- Use the y-axis to display median income values formatted as dollars with thousands separators, with tick intervals set at $10k.\n- Each plotted point must have a unique color, ensuring that no two points share the same color.\n- Incorporate a tooltip that appears when hovering over a point, showing both the age group and the income value.\n- Display numerical income values adjacent to each point, positioned slightly above and to the right.\n- Include grid lines on the y-axis corresponding to every $10k increment.\n- Add a legend positioned at the bottom that maps each unique color to its corresponding age group.\n- Scale the size of each point according to an associated fictional population count, ensuring larger points represent higher counts.",
        "raw_output_metric": [
            "Demographic Scatter Plot",
            "6",
            "45",
            "$10k",
            "tooltip",
            "legend",
            "age group",
            "median income",
            "population",
            "point"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Demographic Scatter Plot",
            "How many points representing age groups are plotted on the chart?": "6",
            "How are the x-axis labels for age groups styled?": "Evenly spaced tick marks with labels rotated 45 degrees",
            "How are the y-axis income values formatted and what is the tick interval?": "Formatted as dollars with thousands separators, with tick intervals of $10k",
            "Does each plotted point have a unique color?": "Yes",
            "What information is shown in the tooltip for each point?": "The age group and the income value",
            "How are numerical income values displayed relative to each point?": "Displayed adjacent to each point, slightly above and to the right",
            "What determines the size of each plotted point?": "An associated fictional population count, where larger points represent higher counts"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001521",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a multi-line chart visualization of fictional average monthly temperatures for various cities over a year.\n\nFeature Requirements:\n- Include a title at the top with the text \"Monthly Average Temperatures for Fictional Cities\".\n- Display exactly 3 distinct lines, each representing a different city from the dataset.\n- Each line must have a uniquely defined color, ensuring clear differentiation between the cities.\n- Each data point on the lines must be marked with a circle and have the temperature value displayed adjacent to it.\n- Use the x-axis to represent months with labels abbreviated from \"Jan\" to \"Dec\", ensuring equal spacing for all months.\n- Use the y-axis to represent temperatures in degrees Celsius and include ticks at every 5-degree interval within an appropriate range.\n- Provide a legend at the top right of the chart that maps each line color to its corresponding city name.",
        "raw_output_metric": [
            "Monthly Average Temperatures for Fictional Cities",
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            "legend",
            "line",
            "circle",
            "color",
            "temperature",
            "city"
        ],
        "VQA": {
            "What is the title at the top of the chart?": "Monthly Average Temperatures for Fictional Cities",
            "How many distinct city lines are displayed in the chart?": "3",
            "Are data points on the lines marked with circles?": "Yes",
            "Is the temperature value shown next to each data point?": "Yes",
            "What labels are displayed on the x-axis?": "Abbreviated month names from Jan to Dec",
            "What does the y-axis represent and how are the ticks spaced?": "Temperatures in degrees Celsius with ticks every 5 degrees",
            "Where is the legend located and what does it map?": "Top right, mapping each line color to its corresponding city name"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001522",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Scatter Plot\" displayed prominently at the top of the visualization.\n- Plot exactly 6 data points, each representing a unique weather station with specific coordinate values.\n- Render each data point as a circle with a fixed size and assign a distinct color to each so that no two circles share the same color.\n- Use the x-axis to display temperature values in Celsius, labeling it \"Temperature (°C)\" with tick labels formatted to one decimal place and ensuring no overlaps.\n- Use the y-axis to display humidity percentages, labeling it \"Humidity (%)\" with grid lines drawn at every 10% interval.\n- Provide a tooltip that displays both the temperature and humidity values when hovering over each data point.\n- Include a legend positioned at the bottom of the chart that maps the unique circle colors to the corresponding weather station IDs.\n- Set fixed axis ranges with the x-axis ranging from -10 to 40 and the y-axis ranging from 0% to 100%.\n- Ensure each data point is clearly visible and accurately plotted on the chart.\n- Include markers only in the form of circles for each data point with no additional shapes or icons.",
        "raw_output_metric": [
            "Fictional Weather Scatter Plot",
            "Temperature (°C)",
            "Humidity (%)",
            "circle",
            "tooltip",
            "-10",
            "40",
            "0",
            "100",
            ".1f",
            "bottom",
            "station"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Fictional Weather Scatter Plot",
            "How many data points (weather stations) are plotted?": "6",
            "What shape is used to represent each data point?": "Circle",
            "How many distinct colors are assigned to the data points?": "6",
            "What is the label displayed on the x-axis?": "Temperature (°C)",
            "What is the fixed range for the x-axis?": "-10 to 40",
            "What is the label displayed on the y-axis?": "Humidity (%)",
            "What is the fixed range for the y-axis?": "0% to 100%",
            "How are the tick labels on the x-axis formatted?": "One decimal place",
            "Where is the legend, mapping circle colors to weather station IDs, positioned?": "At the bottom of the chart"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001523",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional city weather data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional City Weather Data Scatterplot\" positioned at the top of the chart.\n- Plot exactly 6 data points, each representing a distinct city with corresponding temperature (x-axis) and humidity (y-axis) values.\n- Use the x-axis labeled \"Temperature (°C)\" and the y-axis labeled \"Humidity (%)\" with tick increments of 5 and 10 respectively.\n- Color-code each data point with a unique color so that no two cities share the same marker color.\n- Display a label next to each point showing the city name clearly without overlapping the marker.\n- Add gridlines along both axes to enhance visual reference of the data points.\n- Ensure the axes are scaled appropriately to accommodate the full range of the provided temperature and humidity values.",
        "raw_output_metric": [
            "Fictional City Weather Data Scatterplot",
            "Temperature (°C)",
            "Humidity (%)",
            "tickIncrement",
            "5",
            "10",
            "grid",
            "city"
        ],
        "VQA": {
            "What is the title text displayed at the top of the chart?": "Fictional City Weather Data Scatterplot",
            "How many data points are plotted on the scatterplot?": "6",
            "What label is shown on the x-axis?": "Temperature (°C)",
            "What label is shown on the y-axis?": "Humidity (%)",
            "What is the tick increment for the x-axis?": "5",
            "What is the tick increment for the y-axis?": "10",
            "Is a unique color used for each data point?": "Yes",
            "Are city names displayed as labels next to each data point?": "Yes",
            "Are gridlines visible along both the x-axis and the y-axis?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001524",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional air quality data over a seven-day period.\n\nFeature Requirements:\n- Include a title at the top with the text \"Fictional Air Quality Line Chart.\"\n- Display exactly 5 distinct data series, each representing a different type of air quality sensor.\n- Each data series line must use a unique dash pattern (e.g., solid, dashed, dotted) to differentiate them.\n- Place a legend in the top-right corner mapping each sensor type to its corresponding line style.\n- Plot circular markers at every data point along each line.\n- Label the x-axis with the seven consecutive days of the week, ensuring the labels are evenly spaced and fully visible.\n- Scale the y-axis from 0 to 300 with tick marks at every 50-unit increment.\n- Include horizontal and vertical gridlines corresponding to the tick marks on both axes.\n- Use smooth interpolation for connecting data points within each sensor series.\n- Configure tooltips to display the exact numeric air quality measurement for each data point when hovered over.",
        "raw_output_metric": [
            "Fictional Air Quality Line Chart.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "0",
            "300",
            "50",
            "legend",
            "tooltip",
            "circle",
            "solid",
            "dashed",
            "dotted",
            "dashdot",
            "longdash",
            "grid",
            "monotone"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Fictional Air Quality Line Chart",
            "How many sensor series are represented in the visualization?": "5",
            "Does each sensor series use a different dash pattern?": "Yes",
            "Where is the legend located in the chart?": "Top-right corner",
            "What shape is used for the markers at each data point?": "Circular",
            "How many days are labeled on the x-axis?": "7",
            "What do the x-axis labels represent?": "Seven consecutive days of the week",
            "What is the range of the y-axis?": "0 to 300",
            "At what interval are the y-axis tick marks placed?": "Every 50 units",
            "Are gridlines visible on the chart and in which directions?": "Yes, both horizontal and vertical gridlines are shown"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001525",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization that displays fictional wizard test scores over a series of 8 monthly exams.\n\nFeature Requirements:\n- Include a centered title at the top that reads \"Wizard Test Scores Over Time\".\n- Plot exactly 8 data points, each representing a different monthly exam.\n- Connect the data points with a continuous line and mark each data point with a distinct circle marker.\n- Color the connecting line in vibrant blue and the markers in contrasting bright orange.\n- Display a tooltip when hovering over each data point that shows both the exam month and the corresponding test score.\n- Format the x-axis to show month labels, rotated 45 degrees for clarity, to prevent label overlapping.\n- Scale the y-axis from 0 to 100 with tick marks at every 10 unit interval.",
        "raw_output_metric": [
            "Wizard Test Scores Over Time",
            "8",
            "line",
            "circle",
            "vibrant blue",
            "bright orange",
            "tooltip",
            "45",
            "0",
            "100",
            "10",
            "month",
            "test score"
        ],
        "VQA": {
            "What is the centered title displayed at the top?": "Wizard Test Scores Over Time",
            "How many data points are plotted on the chart?": "8",
            "What shape is used to mark each data point?": "Circle",
            "What color is the line connecting the data points?": "Vibrant blue",
            "What is the color of the markers on the data points?": "Bright orange",
            "How are the x-axis month labels formatted?": "Rotated 45 degrees",
            "What is the y-axis scale and tick interval?": "0 to 100 with ticks every 10"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001526",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization depicting fictional average monthly temperatures in a made-up region.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Average Monthly Temperatures\" centered at the top of the visualization.\n- Use exactly 12 data points corresponding to each month of the year, plotted in sequential order.\n- Draw a continuous bold line connecting all data points using a vibrant color that contrasts with the background.\n- Place circular markers at each data point, ensuring each marker is filled with a color distinct from the line.\n- Label the x-axis with the full names of the months, rotated 45 degrees to prevent label overlap.\n- Configure the y-axis to display temperature values in degrees Celsius, with tick marks at every 5-degree increment.\n- Enable interactive tooltips that reveal the precise temperature value when hovering over a data point.",
        "raw_output_metric": [
            "Fictional Average Monthly Temperatures",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "tooltip",
            "°C",
            "45"
        ],
        "VQA": {
            "What is the title text displayed at the top of the visualization?": "Fictional Average Monthly Temperatures",
            "How many data points representing months are shown in the chart?": "12",
            "What type of line connects the data points in the chart?": "A continuous bold line",
            "What shape are the markers at each data point?": "Circular",
            "How are the x-axis labels formatted?": "Full month names rotated 45 degrees",
            "What is the interval between tick marks on the y-axis?": "Every 5 degrees",
            "What information is revealed in the tooltips when hovering over a point?": "Precise temperature value"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001527",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional daily temperature data across multiple cities.\n\nFeature Requirements:\n- Add a centered title at the top with the text \"City Temperature Records Scatterplot\".\n- Plot exactly 7 data points, each representing a unique city.\n- Use circles to mark each data point, ensuring each circle has a unique color.\n- Position city names as labels next to each corresponding data point.\n- Configure the x-axis to represent the days of the month (from 1 to 31) with tick marks for every 5 days.\n- Configure the y-axis to represent temperature in °C with grid lines at every 5°C increment.\n- Include an interactive tooltip that displays the city name and exact temperature when hovering over a point.",
        "raw_output_metric": [
            "City Temperature Records Scatterplot",
            "circle",
            "tooltip",
            "day",
            "temperature",
            "°C",
            "city",
            "5",
            "31",
            "7"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the scatterplot?": "City Temperature Records Scatterplot",
            "How many data points (cities) are plotted on the scatterplot?": "7",
            "What geometric shape is used to represent each data point?": "Circles",
            "What distinguishes the appearance of each circle?": "Each circle has a unique color",
            "What text is positioned next to each data point?": "City names",
            "How are the tick marks on the x-axis configured?": "Tick marks for every 5 days (within days 1 to 31)",
            "What is the spacing for the grid lines on the y-axis?": "Every 5°C increment",
            "What information is revealed in the tooltip when a data point is hovered over?": "City name and exact temperature"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001528",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional weather data comparing temperature and humidity.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Conditions\" displayed at the top center of the visualization.\n- Plot exactly 7 data points, each representing a distinct weather observation.\n- Represent each data point as a circle with a consistent radius, and use a gradient color scale to reflect humidity values.\n- Display the temperature value as a label adjacent to each corresponding data point.\n- Configure the x-axis to show temperature values with labels rotated 45 degrees to ensure they are fully readable.\n- Configure the y-axis to quantify humidity values with grid lines at every 5-unit increment.\n- Include tooltips that reveal both temperature and humidity values when hovering over each data point.\n- Position a legend at the bottom that explains the gradient color scale corresponding to humidity levels.",
        "raw_output_metric": [
            "Fictional Weather Conditions",
            "temperature",
            "humidity",
            "7",
            "circle",
            "gradient",
            "tooltip",
            "45",
            "5",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top center of the visualization?": "Fictional Weather Conditions",
            "How many data points are plotted on the scatter plot?": "7",
            "What shape is used to represent each weather observation?": "Circle",
            "How is the color of each data point determined?": "By a gradient color scale reflecting humidity values",
            "Is the temperature value shown as a label near each data point?": "Yes",
            "At what angle are the x-axis temperature labels rotated?": "45 degrees",
            "What increment is used for grid lines on the y-axis?": "Every 5 units",
            "Where is the legend explaining the gradient color scale for humidity placed?": "At the bottom",
            "What information does the legend provide?": "It explains the gradient color scale corresponding to humidity levels"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001529",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional astronomical data showing relationships between planet diameters and their distances from the star.\n\nFeature Requirements:\n- Include a title with the text \"Astronomical Scatter Plot\" centered at the top of the visualization.\n- Display exactly 6 data points, each representing a unique planet, with circle markers.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Position the x-axis to represent planet diameters (in thousands of kilometers) with tick marks every 5 units, ensuring labels are fully visible.\n- Position the y-axis to represent orbital distances (in millions of kilometers) with grid lines appearing at every 10 million kilometer increment.\n- Incorporate labels directly next to each data point showing the planet name.\n- Add a tooltip that displays both the planet diameter and orbital distance when hovering over any data point.\n- Include a legend on the left side mapping each point's color to its corresponding planet name.",
        "raw_output_metric": [],
        "VQA": {
            "What is the title at the top of the visualization?": "Astronomical Scatter Plot",
            "How many data points are plotted in the scatter plot?": "6",
            "What shape is used for each data point marker?": "Circle",
            "Does each data point have a unique and distinct color?": "Yes",
            "What does the x-axis represent and what is the tick interval?": "Planet diameters in thousands of kilometers with ticks every 5 units",
            "What does the y-axis represent and what is the grid line interval?": "Orbital distances in millions of kilometers with grid lines every 10 units",
            "Are the planet names displayed next to the data points?": "Yes",
            "What information is provided in the tooltip for each data point?": "Planet diameter and orbital distance",
            "Where is the legend located and what does it map?": "On the left side, mapping each point's color to its corresponding planet name"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001530",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of imaginary temperature data over one week.\n\nFeature Requirements:\n- Include a title with the text \"Imaginary Temperature Trends\" centered at the top of the chart.\n- Plot a smooth curved line that represents temperature values for 7 consecutive days.\n- Use small circular markers (with a fixed radius of 5 pixels) positioned at each data point.\n- Display the precise temperature value above each marker.\n- Use the x-axis to denote days of the week with abbreviated weekday labels (e.g., Mon, Tue, etc.), ensuring labels are fully legible.\n- Format the y-axis to show temperature values with one decimal place and tick marks at every 2-degree interval.\n- Incorporate horizontal gridlines aligned with the y-axis tick marks.\n- Animate the drawing of the line over a duration of 1.5 seconds when the chart loads.\n- Include axis labels explicitly stating \"Day of Week\" for the x-axis and \"Temperature (°C)\" for the y-axis.",
        "raw_output_metric": [
            "Imaginary Temperature Trends",
            "Day of Week",
            "Temperature (°C)",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat",
            "Sun",
            "radius",
            "5",
            "monotone",
            "1500",
            "2",
            "grid",
            "circle",
            "text"
        ],
        "VQA": {
            "What is the title of the chart?": "Imaginary Temperature Trends",
            "How many data points (markers) are shown on the curve?": "7",
            "What is the fixed radius of each circular marker?": "5 pixels",
            "Is a precise temperature value displayed above each marker?": "Yes",
            "How are the days listed on the x-axis?": "Abbreviated weekdays (e.g., Mon, Tue, etc.)",
            "What is the interval between tick marks on the y-axis?": "2 degrees",
            "What is the label on the x-axis?": "Day of Week",
            "What is the label on the y-axis?": "Temperature (°C)"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001531",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a pie chart visualization of hypothetical energy consumption data across regions.\n\nFeature Requirements:\n- Include a title with the text \"Hypothetical Energy Consumption\" displayed at the top of the visualization.\n- Display exactly 5 pie segments, each representing energy consumption for a unique region.\n- Assign each segment a distinct pastel color, ensuring no two segments share the same color.\n- Display a legend positioned at the bottom of the chart, mapping each color to its corresponding region.\n- Include percentage labels placed inside each pie segment.\n- Center the pie chart automatically on the canvas and ensure it maintains a perfect circular shape.\n- Provide segment borders with a thickness of 1px and a solid color defined as #333.\n- Add tooltip interactivity that displays the region name and its consumption percentage when hovered over.\n- Format the data values to one decimal place in the displayed percentage labels.",
        "raw_output_metric": [
            "Hypothetical Energy Consumption",
            "#333",
            "tooltip",
            ".1f",
            "legend",
            "arc"
        ],
        "VQA": {
            "What is the title text displayed at the top of the visualization?": "Hypothetical Energy Consumption",
            "How many pie segments representing regions are shown in the chart?": "5",
            "Where is the legend located in the chart?": "At the bottom",
            "What information is displayed inside each pie segment?": "Percentage labels formatted to one decimal place",
            "What type of border is applied to each pie segment?": "A 1px solid border with color #333",
            "Are the colors of the pie segments distinct pastel shades?": "Yes",
            "Is the pie chart centered and rendered as a perfect circle?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001532",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature trends over a week.\n\nFeature Requirements:\n- Set the chart title to \"Week-long Temperature Trends\" and display it centered at the top of the visualization.\n- Plot exactly 7 data points, each representing one day of the week from Monday to Sunday.\n- Configure the x-axis to display day names with evenly spaced intervals and ensure all labels are fully visible.\n- Configure the y-axis to show temperature values in degrees Celsius with tick marks every 5 units and a range that fits the data.\n- Use a bright, distinct color for the line connecting the data points to ensure high contrast against the background.\n- Add circular markers at each data point, each with a contrasting border color to make them stand out.\n- Include tooltips that display the exact day and temperature value when hovering over each marker.\n- Display the numerical temperature value directly above each marker on the chart.\n- Add grid lines corresponding to each tick mark on the y-axis to help indicate temperature increments.",
        "raw_output_metric": [
            "Week-long Temperature Trends",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "°C",
            "5",
            "line",
            "circle",
            "tooltip",
            "grid",
            "text"
        ],
        "VQA": {
            "What is the main title displayed at the top of the chart?": "Week-long Temperature Trends",
            "How is the title positioned?": "Centered at the top",
            "How many data points are shown in the line chart?": "7",
            "What do the plotted data points represent?": "Days of the week (Monday to Sunday)",
            "What labels appear along the x-axis?": "Day names from Monday to Sunday",
            "At what interval are the tick marks on the y-axis set?": "Every 5 units",
            "Where is the numerical temperature value displayed for each data point?": "Directly above each marker",
            "Are there grid lines corresponding to the y-axis tick marks?": "Yes",
            "Do the markers at each data point have a contrasting border?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001533",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental monitoring data.\n\nFeature Requirements:\n- Include a title with the text \"Environmental Monitoring Scatter Plot\" centered at the top of the visualization.\n- Plot exactly 5 measurement points, each representing a different sensor location.\n- Assign each data point a unique shape (circle, square, triangle, diamond, and cross) with a consistent color palette across points.\n- Use the x-axis to represent temperature values ranging from 0°C to 50°C, with tick marks placed every 10 degrees.\n- Use the y-axis to represent humidity percentages from 0% to 100%, with tick marks at every 20% increment.\n- Provide tooltips for each data point that display the sensor location, temperature, and humidity information when hovered over.\n- Incorporate grid lines in a light gray shade along both axes to enhance readability.",
        "raw_output_metric": [
            "Environmental Monitoring Scatter Plot",
            "circle",
            "square",
            "triangle",
            "diamond",
            "cross",
            "temperature",
            "humidity",
            "sensor",
            "location",
            "0",
            "50",
            "10",
            "100",
            "20",
            "tooltip",
            "lightgray"
        ],
        "VQA": {
            "What is the title text displayed at the top of the visualization?": "Environmental Monitoring Scatter Plot",
            "Is the title centered at the top of the visualization?": "Yes",
            "How many measurement points are plotted?": "5",
            "Which unique shapes are assigned to the measurement points?": "Circle, Square, Triangle, Diamond, and Cross",
            "What is the range and tick interval of the x-axis representing temperature?": "0°C to 50°C with ticks every 10 degrees",
            "What is the range and tick interval of the y-axis representing humidity?": "0% to 100% with ticks every 20 percent",
            "What color are the grid lines along both axes?": "Light gray",
            "Do the data points include tooltips, and what information do they display?": "Yes; they display the sensor location, temperature, and humidity information"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001534",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature data for four different cities.\n\nFeature Requirements:\n- Include a title with the text \"City Temperature Trends\" displayed at the top center of the visualization.\n- Plot a separate line for each of the four cities, with each line having a unique color.\n- Represent data for exactly 12 months (January through December) along the x-axis.\n- Rotate the month labels on the x-axis by 45 degrees to ensure they do not overlap.\n- Display temperature values on the y-axis formatted in degrees Celsius, with tick marks every 5-degree increment.\n- Place circular markers on every data point along each city's line.\n- Add a tooltip to show the city name, the specific month, and the temperature value when hovering over a data point.\n- Include a legend below the chart that lists the cities, each paired with its corresponding line color.\n- Ensure grid lines are visible for both axes to enhance readability of the data points.\n- Use a light background color to enhance contrast and highlight the colored lines and markers.",
        "raw_output_metric": [
            "City Temperature Trends",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "45",
            "5",
            "°C",
            "circle",
            "tooltip",
            "legend",
            "line",
            "grid",
            "background"
        ],
        "VQA": {
            "What is the title displayed at the top center of the chart?": "City Temperature Trends",
            "How many distinct cities are represented by separate lines?": "4",
            "How many months are shown along the x-axis?": "12",
            "By what angle are the month labels on the x-axis rotated?": "45 degrees",
            "How are temperature values on the y-axis incremented?": "Every 5 degrees Celsius",
            "What shape is used for markers at each data point along the lines?": "Circular markers",
            "Where is the legend located in the visualization?": "Below the chart",
            "Does the legend display the cities paired with their corresponding line colors?": "Yes",
            "Are grid lines visible on both the x and y axes?": "Yes",
            "Is the background color of the chart light to enhance the contrast of the colored lines and markers?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001535",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional temperature readings collected from different urban sensor stations over a 24-hour period.\n\nFeature Requirements:\n- Include a title with the text \"Urban Temperature Sensor Data\" at the top of the visualization.\n- Plot exactly 3 different sensor stations, each represented by a unique set of data points.\n- Use a circle mark for each data point, where each sensor station's points have a distinct color.\n- Display temperature values next to each data point as labels.\n- Use the x-axis to represent time in hours (ranging from 0 to 24) with ticks at every 4-hour interval.\n- Use the y-axis to represent temperature in degrees Celsius, with a range that adapts to the provided temperature values.\n- Include a legend on the right-hand side mapping each color to the corresponding sensor station.\n- Format the x-axis labels to prevent overlapping, ensuring clear readability.\n- Incorporate grid lines along both axes to enhance visual clarity.\n- Ensure tooltips are available for each point, displaying the sensor station name, reading time, and temperature value.",
        "raw_output_metric": [
            "Urban Temperature Sensor Data",
            "circle",
            "Sensor Station 1",
            "Sensor Station 2",
            "Sensor Station 3",
            "time",
            "temperature",
            "0",
            "24",
            "4",
            "legend",
            "grid",
            "tooltip"
        ],
        "VQA": {
            "What is the title text at the top of the visualization?": "Urban Temperature Sensor Data",
            "How many sensor stations are represented in the plot?": "3",
            "What shape is used to mark each data point?": "Circle",
            "What additional information is displayed next to each data point?": "Temperature value label",
            "What is shown on the x-axis?": "Time in hours (0 to 24) with ticks every 4 hours",
            "Where is the legend placed in the visualization?": "Right-hand side",
            "What does the legend map?": "Each sensor station's unique color",
            "How are the x-axis labels formatted for readability?": "They are formatted to prevent overlapping",
            "Are grid lines included, and if so, where?": "Yes, along both the x-axis and y-axis",
            "What information do tooltips provide for each data point?": "Sensor station name, reading time, and temperature value"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001536",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature records over a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Temperature Trends\" displayed prominently at the top center of the chart.\n- Use the x-axis to represent days of the week, labeled \"Monday\" through \"Sunday\", ensuring each label is clearly spaced and fully visible.\n- Configure the y-axis to display temperature in degrees Celsius, scaled from 0°C to 40°C with tick marks at every 5°C interval.\n- Plot a continuous line that connects 7 data points, each representing the average temperature for one day.\n- Display a circular marker at each data point, using a contrasting red color to differentiate from the blue line.\n- Annotate each marker with its corresponding temperature value, positioned slightly above the marker for clarity.\n- Include horizontal grid lines corresponding to the y-axis ticks to improve the readability of the temperature scale.",
        "raw_output_metric": [
            "Fictional Temperature Trends",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "°C",
            "0",
            "5",
            "40",
            "red",
            "blue"
        ],
        "VQA": {
            "What is the title text displayed at the top center of the chart?": "Fictional Temperature Trends",
            "What does the x-axis represent?": "Days of the week labeled Monday through Sunday",
            "How many data points are plotted on the line chart?": "7",
            "What is the range of the y-axis and how are the tick marks spaced?": "0°C to 40°C with ticks every 5°C",
            "What color are the circular markers at each data point?": "Red",
            "How are the data markers annotated?": "Each marker displays its corresponding temperature value just above it",
            "What color is the continuous line connecting the data points?": "Blue",
            "Are horizontal grid lines included and what do they correspond to?": "Yes, they correspond to the y-axis ticks"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001537",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental sensor data.\n\nFeature Requirements:\n- Include a chart title with the text \"Imaginary Environmental Sensor Observations\" centered at the top.\n- Display exactly 6 data points, each representing a different sensor's reading.\n- Use distinct shapes (e.g., circle, square, triangle, diamond, cross, star) for each data point, ensuring no shape is repeated.\n- Add a legend on the left side of the chart mapping each unique shape to its corresponding sensor.\n- Place numerical sensor reading values directly next to each data point.\n- Position the x-axis to represent time in hours, ensuring labels appear at every hourly interval without overlapping.\n- Format the y-axis to display measurement values with one decimal precision, including ticks at intervals of 2.5 units.\n- Incorporate gridlines for both x and y axes to enhance data readability.",
        "raw_output_metric": [
            "Imaginary Environmental Sensor Observations",
            "circle",
            "square",
            "triangle",
            "diamond",
            "cross",
            "star",
            "legend",
            "time",
            "hours",
            ".1f",
            "2.5",
            "grid"
        ],
        "VQA": {
            "What is the chart title displayed at the top of the visualization?": "Imaginary Environmental Sensor Observations",
            "How many sensor data points are shown in the scatter plot?": "6",
            "Are unique shapes used for each sensor data point?": "Yes",
            "Which sensor marker shapes are used in the plot?": "circle, square, triangle, diamond, cross, star",
            "Where is the legend, mapping sensor names to shapes, positioned?": "Left side",
            "How are the numerical sensor readings displayed in relation to the data points?": "They are placed directly next to each data point",
            "What does the x-axis represent and how are its labels formatted?": "Time in hours with labels at every hourly interval",
            "How are the y-axis measurement values formatted and what is the tick interval?": "They are formatted with one decimal precision and ticks are at intervals of 2.5 units",
            "Are gridlines visible for both the x-axis and the y-axis?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001538",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of mythical creature population trends over time.\n\nFeature Requirements:\n- Include a title with the text \"Mythical Creature Populations Over Time\" centered at the top of the visualization.\n- Use a time-based x-axis representing years ranging from 1850 to 2050 with tick marks every 20 years.\n- Set the y-axis to display population counts with tick intervals of 500 units.\n- Plot two distinct lines: one representing \"Dragons\" and one representing \"Unicorns\", each with a unique solid color.\n- Represent each data point on the lines as circles with a fixed radius of 4 pixels.\n- Display a legend at the bottom right of the chart mapping each line color to its corresponding creature type.\n- Annotate the highest value point on each line with its numerical population count.\n- Include horizontal grid lines across the chart aligned with each y-axis tick mark.\n- Define the overall chart dimensions to be exactly 800 pixels wide and 500 pixels high.",
        "raw_output_metric": [
            "Mythical Creature Populations Over Time",
            "1850",
            "2050",
            "20",
            "500",
            "Dragons",
            "Unicorns",
            "4",
            "bottom-right",
            "800"
        ],
        "VQA": {
            "What is the title of the visualization?": "Mythical Creature Populations Over Time",
            "Is the title centered at the top of the chart?": "Yes",
            "What is the time range on the x-axis?": "1850 to 2050",
            "What is the tick interval on the x-axis?": "Every 20 years",
            "What is the tick interval on the y-axis?": "500 units",
            "How many lines are plotted in the chart?": "2",
            "How are individual data points represented along the lines?": "Circles with a fixed radius of 4 pixels",
            "Where is the legend positioned on the chart?": "Bottom right",
            "What creature types are shown in the legend?": "Dragons and Unicorns",
            "What annotation is used on the highest value point of each line?": "The numerical population count"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001539",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional climate data.\n\nFeature Requirements:\n- Include a title with the text \"Climate Data Scatterplot\" centered at the top of the visualization.\n- Plot exactly 7 data points, each representing a unique city.\n- Use circle markers for each data point, ensuring that each circle has a distinct color.\n- Display a numerical label directly next to each circle indicating the city's average temperature in Celsius.\n- Configure the x-axis to represent average temperature and the y-axis to represent average rainfall, with both axes clearly labeled.\n- Include grid lines on both axes, with temperature increments of 5 and rainfall increments of 10.\n- Add a legend positioned at the bottom right that maps each circle color to its corresponding city.\n- Implement tooltips that display the city name, average temperature, and average rainfall when hovering over any data point.",
        "raw_output_metric": [
            "$schema",
            "Climate Data Scatterplot",
            "average temperature",
            "average rainfall",
            "data",
            "values",
            "city",
            "circle",
            "color",
            "tooltip",
            "legend",
            "grid",
            "5",
            "10"
        ],
        "VQA": {
            "What is the centered title displayed at the top of the visualization?": "Climate Data Scatterplot",
            "How many data points are visible on the scatter plot?": "7",
            "What shape is used to represent each data point?": "Circle",
            "Does each circle have a distinct color?": "Yes",
            "What numerical label is shown next to each circle?": "The city's average temperature in Celsius",
            "What does the x-axis represent and what are its grid increments?": "Average temperature with increments of 5",
            "What does the y-axis represent and what are its grid increments?": "Average rainfall with increments of 10",
            "Where is the legend located and what does it map?": "Bottom right; it maps each circle color to its corresponding city"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001540",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature trends for three cities.\n\nFeature Requirements:\n- Include a title with the text \"Yearly Temperature Trends\" centered at the top of the visualization.\n- Plot exactly 3 distinct lines, each representing a different city, labeled \"City Alpha\", \"City Beta\", and \"City Gamma\".\n- Each line must have a unique color and display circular markers at each monthly data point.\n- Include a legend in the top right corner that maps each line color to the corresponding city label.\n- Display the x-axis with month names (January to December) ensuring that labels are rotated 45 degrees to prevent overlap.\n- Format the y-axis to display temperature in degrees Celsius, with tick marks at every 5-degree increment.\n- Incorporate horizontal grid lines across the chart for each y-axis tick mark.\n- Enable tooltips that reveal the exact month and temperature value when hovering over any data point.\n- Set the overall chart dimensions to a width of 700 pixels and a height of 450 pixels.",
        "raw_output_metric": [
            "Yearly Temperature Trends",
            "City Alpha",
            "City Beta",
            "City Gamma",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "700",
            "450",
            "tooltip",
            "circle",
            "legend"
        ],
        "VQA": {
            "What is the title text displayed at the top of the chart?": "Yearly Temperature Trends",
            "Is the chart title centered?": "Yes",
            "How many lines are shown in the chart?": "3",
            "Which city names appear in the legend?": "City Alpha, City Beta, City Gamma",
            "What shape is used as a marker at each monthly data point?": "Circular",
            "How many month labels are shown on the x-axis?": "12",
            "Are the month labels on the x-axis rotated, and if so, by how many degrees?": "45 degrees",
            "What unit is displayed on the y-axis for the temperature values?": "Degrees Celsius",
            "How are the y-axis tick marks indicated on the chart?": "Horizontal grid lines are shown for every y-axis tick mark",
            "What are the overall dimensions of the chart?": "700 pixels wide and 450 pixels high"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001541",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional student study hours versus exam scores.\n\nFeature Requirements:\n- The visualization must include a title that reads \"Study Hours vs Exam Scores Scatter Plot\" centered at the top.\n- The plot should consist of exactly 50 data points representing individual student records.\n- Each data point must be drawn as a circle, with its x-coordinate corresponding to study hours and its y-coordinate corresponding to exam scores.\n- Map the x-axis to study hours with labels in increments of 5, starting at 0 and ending at 50, ensuring all labels are fully visible.\n- Map the y-axis to exam scores with tick marks at every 10 points, formatted to display the score.\n- Use two distinct colors to differentiate between students who passed (score ≥ 60) and students who failed (score < 60), and include a legend on the right that clearly indicates the color mapping.\n- Display gridlines for both axes to help identify each data point's position accurately.\n- Enable tooltips that show the numerical values of study hours and exam scores when a user hovers over any data point.\n- Ensure the visual design allocates sufficient margins so that no graphic elements overlap the axes or border of the visualization.",
        "raw_output_metric": [
            "Study Hours vs Exam Scores Scatter Plot",
            "circle",
            "50",
            "study hours",
            "exam scores",
            "0",
            "5",
            "10",
            "60",
            "passed",
            "failed",
            "legend",
            "gridlines",
            "tooltip"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Study Hours vs Exam Scores Scatter Plot",
            "How many data points are represented in the scatter plot?": "50",
            "What shape is used to represent each student record?": "Circle",
            "How are the x-axis labels configured?": "In increments of 5, starting at 0 and ending at 50",
            "What is the interval for the y-axis tick marks?": "Every 10 points",
            "What does the legend on the right indicate?": "Color mapping for students who passed (score ≥ 60) and failed (score < 60)",
            "Are gridlines visible on the axes?": "Yes",
            "How are the students' results differentiated by color?": "Distinct colors for passed and failed students"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001542",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bubble chart visualization of fictional city pollution levels.\n\nFeature Requirements:\n- Include a title at the top reading \"City Pollution Overview\" with a large, bold font.\n- Display exactly 6 bubbles, each representing a unique fictional city.\n- Size each bubble proportionally based on a pollution index value ranging from 20 to 100.\n- Assign a distinct color to each bubble, selecting from a set of 6 predefined colors.\n- Use the x-axis to label the fictional city names with evenly spaced and clearly visible labels.\n- Configure the y-axis to represent numerical pollution index values, scaled from 0 to 150 with regular intervals.\n- Enable tooltips that appear on hover to display the city's name along with its exact pollution index.",
        "raw_output_metric": [
            "City Pollution Overview",
            "circle",
            "tooltip",
            "6",
            "20",
            "100",
            "0",
            "150",
            "x",
            "y",
            "color",
            "size"
        ],
        "VQA": {
            "What is the title text at the top of the visualization?": "City Pollution Overview",
            "How is the title styled?": "Large, bold font",
            "How many bubbles are displayed in the chart?": "6",
            "Does each bubble represent a unique fictional city?": "Yes",
            "What determines the size of each bubble?": "Pollution index values ranging from 20 to 100",
            "Are the bubble colors distinct and chosen from a predefined set?": "Yes, from a set of 6 predefined colors",
            "What labels are shown along the x-axis?": "Fictional city names",
            "What is the scale range of the y-axis?": "0 to 150",
            "What information is provided in tooltips on hover?": "City name and its pollution index"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001543",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of simulated meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Simulated Meteorological Data Scatter Plot\" centered at the top of the visualization.\n- Display exactly 8 data points, each representing recorded meteorological measurements.\n- Map the x-axis to temperature values in degrees Celsius and set the tick marks to appear in 5-degree increments.\n- Map the y-axis to humidity percentages, ensuring tick marks are labeled every 10% increment.\n- Color each data point based on a wind speed category (Low, Medium, High) using three distinct colors and include a legend at the top-right that clearly matches each color to its category.\n- Use circular markers with a fixed size and visible border for each data point.\n- Enable tooltips that show the temperature, humidity, and wind speed category when hovering over each marker.",
        "raw_output_metric": [
            "Simulated Meteorological Data Scatter Plot",
            "8",
            "temperature",
            "degrees Celsius",
            "5",
            "humidity",
            "10",
            "Low",
            "Medium",
            "High",
            "legend",
            "circle",
            "tooltip"
        ],
        "VQA": {
            "What is the title text displayed at the top of the visualization?": "Simulated Meteorological Data Scatter Plot",
            "How is the title aligned?": "Centered",
            "How many data points are displayed in the scatter plot?": "8",
            "Which variable is mapped to the x-axis?": "Temperature in degrees Celsius",
            "At what intervals are the x-axis tick marks set?": "5-degree increments",
            "Which variable is mapped to the y-axis?": "Humidity percentages",
            "At what increments are the y-axis tick labels placed?": "Every 10%",
            "How many wind speed categories are represented by color?": "3",
            "Where is the legend for wind speed categories located?": "Top-right",
            "What shape and style are used for the data markers?": "Circular markers with a fixed size and visible border"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001544",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional global temperature anomalies from 1880 to 2020.\n\nFeature Requirements:\n- Include a centered title at the top of the chart with the text \"Global Temperature Anomalies\".\n- Display exactly 7 data points, each representing a distinct decade between 1880 and 2020.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Label each point with the corresponding decade number, placing the label slightly above the point.\n- Configure the x-axis to represent years with tick marks every 20 years, and the y-axis to represent temperature anomaly values in Celsius.\n- Add horizontal and vertical gridlines aligned with the tick marks on both axes.\n- Incorporate a tooltip that displays both the decade and its corresponding temperature anomaly when hovering over any data point.",
        "raw_output_metric": [
            "Global Temperature Anomalies",
            "1880",
            "2020",
            "data",
            "tooltip",
            "Celsius",
            "decade",
            "color",
            "grid",
            "20",
            "text"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Global Temperature Anomalies",
            "How many data points are shown on the scatter plot?": "7",
            "Are all data points uniquely colored?": "Yes, each data point has a distinct color.",
            "Where are the decade labels positioned relative to each point?": "Slightly above each data point.",
            "What is the time interval used for the x-axis tick marks?": "Every 20 years.",
            "What does the y-axis represent?": "Temperature anomaly values in Celsius.",
            "Are gridlines present on the chart?": "Yes, horizontal and vertical gridlines align with the tick marks.",
            "What information does the tooltip display when hovering over a data point?": "The corresponding decade and its temperature anomaly."
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001545",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature data over a seven-day period.\n\nFeature Requirements:\n- Include a title with the text \"Weekly Temperature Trends\" at the top center of the visualization.\n- Plot exactly 7 data points, one for each day of the week, with each point representing the average temperature.\n- Use a line to connect the data points in chronological order, ensuring the line is clearly visible.\n- Display a circular marker at each data point with a unique shade of blue varying gradually from light to dark.\n- Include x-axis labels for the days of the week, ensuring they are evenly spaced and fully legible.\n- Format the y-axis to display temperature values in Celsius with tick marks at every 5-degree increment.\n- Add a tooltip that shows the exact temperature value and corresponding day when hovering over any data point.\n- Include gridlines for both axes, with horizontal lines in light gray and vertical lines in light gray as well.\n- Provide a caption below the chart summarizing the data as \"Average daily temperatures recorded over one week.\"",
        "raw_output_metric": [
            "Weekly Temperature Trends",
            "Average daily temperatures recorded over one week.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "line",
            "circle",
            "tooltip",
            "Celsius",
            "blue",
            "lightgray"
        ],
        "VQA": {
            "What is the title text at the top center of the visualization?": "Weekly Temperature Trends",
            "How many data points are plotted on the chart?": "7",
            "Are the data points connected by a visible line in chronological order?": "Yes",
            "Do the circular markers at each data point display a unique shade of blue varying from light to dark?": "Yes",
            "What type of labels are shown on the x-axis?": "Days of the week",
            "How are the y-axis tick marks spaced?": "Every 5 degrees",
            "Is there a caption below the chart summarizing the data, and if so, what does it say?": "Average daily temperatures recorded over one week",
            "Are gridlines displayed on both the horizontal and vertical axes in light gray?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001546",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional population data across various regions.\n\nFeature Requirements:\n- The chart must have a title displayed at the top reading \"Fictional Population Scatter Plot\".\n- Include exactly 6 distinct data points, each representing a unique region.\n- Represent each data point as a circle with a unique fill color so that no two circles share the same color.\n- Scale the size of each circle according to its population value to visually differentiate between high and low populations.\n- Label the x-axis with region names and ensure that all names are fully legible and evenly spaced.\n- Format the y-axis to display population figures in millions with tick intervals of 2 million.\n- Display the numerical population value adjacent to each data point, positioned above or beside the circle.",
        "raw_output_metric": [
            "Fictional Population Scatter Plot",
            "data",
            "encoding",
            "mark",
            "circle",
            "region",
            "population",
            "fill",
            "size",
            "axis",
            "text",
            "2"
        ],
        "VQA": {
            "What is the chart title displayed at the top?": "Fictional Population Scatter Plot",
            "How many distinct data points (regions) are shown in the scatter plot?": "6",
            "Are the data points represented as circles?": "Yes",
            "Do all the circles have unique fill colors?": "Yes",
            "How is the size of each circle determined?": "It is scaled according to the population value",
            "What labels are used on the x-axis?": "Region names",
            "How are the region names on the x-axis arranged?": "Evenly spaced and fully legible",
            "How is the y-axis formatted?": "Population figures in millions with tick intervals of 2 million",
            "Is the numerical population value displayed near each data point?": "Yes"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001547",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization displaying temperature trends for three fictional cities over a week.\n\nFeature Requirements:\n- Include a title with \"Weekly Temperature Trends\" displayed at the top of the visualization.\n- Plot exactly three lines, each representing a unique city.\n- Use distinct line styles (such as solid, dashed, and dotted) to differentiate the temperature trends of each city.\n- Display markers as circles on every data point along each line.\n- Include a legend below the chart that correlates each line style with its corresponding city.\n- Label the x-axis with the days of the week, ensuring that each label is clearly visible.\n- Label the y-axis with temperature values in Celsius with evenly spaced increments.\n- Incorporate interactive tooltips that reveal the day and temperature value when hovering over each data point.",
        "raw_output_metric": [
            "Weekly Temperature Trends",
            "City A",
            "City B",
            "City C",
            "solid",
            "dashed",
            "dotted",
            "circle",
            "legend",
            "tooltip",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
            "Celsius"
        ],
        "VQA": {
            "What is the title displayed at the top of the visualization?": "Weekly Temperature Trends",
            "How many lines are plotted in the chart?": "3",
            "How are the temperature trends for the three cities differentiated?": "Distinct line styles: solid, dashed, and dotted",
            "What shape is used to mark each data point on the lines?": "Circles",
            "Where is the legend located in the chart?": "Below the chart",
            "What information does the legend provide?": "It correlates each line style with its corresponding city",
            "What labels are shown on the x-axis and y-axis?": "x-axis: days of the week; y-axis: temperature values in Celsius"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001548",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization representing fictional meteorological data for various cities.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Data Scatter\" centered at the top of the visualization.\n- Visualize exactly 6 data points, each representing a unique city.\n- Use the x-axis to display temperature values ranging from -10°C to 40°C and the y-axis to display humidity percentages ranging from 10% to 100%.\n- Represent each data point with a circle that has a distinct fill color; ensure there are 6 different colors with no repeats.\n- Display the name of each city as a label adjacent to its corresponding data point, positioned so that labels do not overlap with the circles.\n- Implement tooltips that reveal the exact temperature and humidity values when users hover over each data point.\n- Add gridlines with tick marks on the x-axis at every 10°C interval and on the y-axis at every 20% interval.\n- Include a legend positioned below the chart that maps each circle color to the corresponding city name.",
        "raw_output_metric": [
            "Fictional Weather Data Scatter",
            "-10",
            "40",
            "10",
            "100",
            "City A",
            "City B",
            "City C",
            "City D",
            "City E",
            "City F",
            "circle",
            "tooltip",
            "legend"
        ],
        "VQA": {
            "What is the title displayed at the top of the chart?": "Fictional Weather Data Scatter",
            "How many data points (cities) are represented in the chart?": "6",
            "What range of temperature values is shown on the x-axis?": "-10°C to 40°C",
            "What range of humidity values is shown on the y-axis?": "10% to 100%",
            "How many distinct fill colors are used for the circles?": "6",
            "Where is the legend positioned in the visualization?": "Below the chart",
            "At what intervals are tick marks shown on the x-axis gridlines?": "Every 10°C",
            "At what intervals are tick marks shown on the y-axis gridlines?": "Every 20%"
        }
    },
    {
        "task_name": "Text to Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "task_id": "001549",
        "input_type": "Text",
        "output_type": "Vega",
        "rendering": true,
        "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a donut chart visualization of fictional website traffic data.\n\nFeature Requirements:\n- Include a title with the text \"Website Traffic Analytics Donut Chart\" prominently at the top.\n- Create a donut chart with exactly 3 segments, each representing a distinct device type (Desktop, Mobile, Tablet).\n- Ensure each segment has a unique color with no duplication among segments.\n- Position a legend on the right side of the chart that clearly maps each color to its corresponding device type.\n- Display the percentage value for each segment positioned inside the corresponding donut slice.\n- Configure tooltips to show detailed values, including both percentage and raw traffic numbers, when hovering over each segment.\n- Set the donut chart inner radius to 30 percent of the total chart area to clearly reveal a hollow center.\n- Use a layout that ensures all chart elements (title, donut slices, legend, and tooltips) are fully visible and do not overlap.",
        "raw_output_metric": [
            "Website Traffic Analytics Donut Chart",
            "Desktop",
            "Mobile",
            "Tablet",
            "innerRadius",
            "30%",
            "legend",
            "right",
            "tooltip",
            "percentage"
        ],
        "VQA": {
            "What is the chart title at the top?": "Website Traffic Analytics Donut Chart",
            "How many segments are in the donut chart?": "3",
            "Which device types are represented in the donut chart?": "Desktop, Mobile, Tablet",
            "Where is the legend positioned in the chart layout?": "On the right side",
            "Are percentage values displayed inside each donut slice?": "Yes",
            "What information is shown in the tooltip on hover?": "Percentage and raw traffic numbers",
            "What is the inner radius of the donut chart?": "30% of the total chart area",
            "Do all donut segments have a unique color?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001600",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays a timeline of events.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Timeline\" at the top of the component.\n- Create an array in the data property containing event objects, each with a title and a time property.\n- Use a v-for loop to iterate over the events array and display each event inside a <div> container.\n- Each <div> should include a <p> element for the event title and a <span> element for the event time.\n- Apply a CSS class named \"event-item\" to each event container for styling.\n- Render a button with the text \"Remove Event\" inside each event container that, when clicked, removes that specific event from the list.\n- Provide an <input> element with the placeholder \"Enter event title\" and another with the placeholder \"Enter event time\" above the list.\n- Include an \"Add Event\" button next to the inputs that appends a new event, using the values from the input fields, to the events array.\n- Define a computed property that keeps track of and displays the total number of events currently in the schedule.",
        "raw_output_metric": [
            "Event Timeline",
            "event-item",
            "Remove Event",
            "Enter event title",
            "Enter event time",
            "Add Event",
            "v-for",
            "title",
            "time",
            "computed"
        ],
        "VQA": {
            "What does the header at the top of the component display?": "Event Timeline",
            "What is the placeholder text for the event title input?": "Enter event title",
            "What is the placeholder text for the event time input?": "Enter event time",
            "What label is shown on the button placed next to the input fields?": "Add Event",
            "What text is visible on the button inside each event container?": "Remove Event",
            "Which CSS class is applied to each event container?": "event-item",
            "How are each event’s title and time visually presented?": "The title appears in a paragraph and the time in a span",
            "Is there an element that displays the total number of events currently in the schedule?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001601",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text conference schedule into a Vue component that displays session details and enables filtering based on session track.\n\nFeature Requirements:\n- Render an <h2> element with the text \"Conference Schedule\" as the title.\n- Display each session inside a <div> element with a CSS class named \"session-card\".\n- Within each session-card, include an <h3> element for the session title and a <p> element for the session description.\n- Utilize v-for to iterate over an array containing session objects from the component's data.\n- Include a <select> element that allows users to filter sessions by their \"track\" property, with dynamic options generated from the session data.\n- Provide a \"Reset Filter\" button that, when clicked, restores the full list of sessions.\n- Add a data property to track and display the total number of sessions rendered, shown in a <p> element formatted as \"Total Sessions: [count]\".",
        "raw_output_metric": [
            "Conference Schedule",
            "session-card",
            "h3",
            "p",
            "v-for",
            "select",
            "option",
            "track",
            "Reset Filter",
            "Total Sessions:"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Conference Schedule",
            "How is each session visually represented?": "A session card that includes a session title and description",
            "Which element is used to display the session title?": "A level-three heading",
            "Which element is used for the session description?": "A paragraph",
            "What type of control is used to filter sessions by track?": "A dropdown select with dynamic options",
            "Is there an option to reset the session filter?": "Yes, a Reset Filter button",
            "How is the number of sessions rendered displayed?": "In a paragraph formatted as 'Total Sessions: [count]'",
            "Are the filtering options generated from the session data?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001602",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text checklist into a Vue component that displays tasks along with completion statuses.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\".\n- Display each task as an <li> element within a <ul> by iterating over a predefined tasks array using v-for.\n- Each <li> should include the task name followed by a checkbox that reflects the task's completion state.\n- Apply a CSS class named \"task-item\" to each <li> element to enable distinct styling.\n- Render an <input> element with a placeholder text \"Enter new task\" positioned above the tasks list.\n- Provide an \"Add Task\" button adjacent to the input field that appends new tasks to the list.\n- Include a \"Reset Tasks\" button below the list that sets all tasks to an incomplete state.\n- Create a data property to track and display the current count of incomplete tasks.",
        "raw_output_metric": [
            "Task Manager",
            "<h2>",
            "<ul>",
            "<li>",
            "v-for",
            "task-item",
            "<input",
            "Enter new task",
            "Add Task",
            "Reset Tasks"
        ],
        "VQA": {
            "What is the text displayed in the main title?": "Task Manager",
            "What placeholder text appears in the new task input field?": "Enter new task",
            "What is the label shown on the button used to add a task?": "Add Task",
            "What is the label on the button that resets the tasks?": "Reset Tasks",
            "How are the tasks presented in the list?": "Each task is shown as a list item (li)",
            "Does each task item include a checkbox that reflects its completion status?": "Yes",
            "What CSS class is applied to each task item for styling?": "task-item",
            "Is there a visible display that shows the current count of incomplete tasks?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001603",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text local festival schedule into a Vue component that displays event details including names, times, and venues.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Festival Schedule\".\n- Display each festival event as a <div> element with a CSS class \"festival-event\" inside a main container.\n- Each <div> must show the event name in bold, followed by a hyphen, the event start time in regular text, and the event location in parentheses.\n- Utilize v-for to iterate over a predefined data array where each object contains \"name\", \"time\", and \"location\" properties.\n- Include a \"Delete Event\" button within each event <div> that, when clicked, removes that specific event from the list.\n- Render an <input> element with the placeholder text \"New event name\" for adding additional event names, positioned above the event list.\n- Add an <input> element with the placeholder text \"HH:MM\" next to the event name input for entering the event time.\n- Provide an additional <input> element with the placeholder text \"Event Venue\" to capture the location of a new event.\n- Include an \"Add Event\" button next to the input fields that, when clicked, appends a new event object to the festival events array and updates the display.\n- Define a data property within the Vue component that dynamically tracks the total number of festival events currently listed.",
        "raw_output_metric": [
            "<h1>",
            "Festival Schedule",
            "<div",
            "class=\"festival-event\"",
            "v-for",
            "name",
            "time",
            "location",
            "Delete Event",
            "New event name",
            "HH:MM",
            "Event Venue",
            "Add Event"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Festival Schedule",
            "How many input fields are visible for adding a new event?": "Three",
            "What placeholder text is shown in the first input field?": "New event name",
            "What placeholder text is shown in the input field for event time?": "HH:MM",
            "What placeholder text is shown in the input field for event location?": "Event Venue",
            "How is each festival event visually formatted?": "Event name in bold, followed by a hyphen, the event time, and the event location in parentheses",
            "What text is displayed on the button used to remove an event?": "Delete Event",
            "What text is displayed on the button used to add a new event?": "Add Event"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001604",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of conference sessions into a Vue component that displays session details and allows users to add or remove sessions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Conference Schedule\".\n- Display each session as an <li> element within a <ul> using v-for to iterate over a predefined array of sessions.\n- Each <li> must clearly show the session title, speaker name, and time slot separated by dashes.\n- Apply a CSS class named \"session-item\" to each <li> element for consistent styling.\n- Place three separate <input> elements above the list with placeholder texts \"Session Title\", \"Speaker Name\", and \"Time Slot\" for entering new session details.\n- Render an \"Add Session\" button next to the input fields that appends the new session details to the session list when clicked.\n- Include a \"Clear Sessions\" button that, when clicked, removes all sessions from the list.\n- Maintain a data property that tracks the current number of sessions and display this count below the session list.",
        "raw_output_metric": [
            "Conference Schedule",
            "v-for",
            "session-item",
            "Session Title",
            "Speaker Name",
            "Time Slot",
            "Add Session",
            "Clear Sessions"
        ],
        "VQA": {
            "What is the text displayed at the top of the component?": "Conference Schedule",
            "What is the placeholder text in the first input field?": "Session Title",
            "What is the placeholder text in the second input field?": "Speaker Name",
            "What is the placeholder text in the third input field?": "Time Slot",
            "How is each session detail presented in the list?": "They show the session title, speaker name, and time slot separated by dashes",
            "What CSS class is used for each session list item?": "session-item",
            "Which button adds a new session to the list?": "Add Session",
            "Which button removes all sessions from the list?": "Clear Sessions",
            "Where is the count of the current sessions displayed?": "Below the session list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001605",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast with temperatures and additional details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Forecast\".\n- Iterate over a data array of forecast objects using the v-for directive, where each object contains the day, high temperature, and low temperature.\n- Display each forecast item as an <li> element within a <ul>, applying a CSS class named \"forecast-item\" to wrap each forecast.\n- Format each <li> to show the day in bold, followed by the high and low temperatures in a span formatted as \"High: [value], Low: [value]\".\n- Include a button labeled \"Toggle Details\" that, when clicked, toggles the display of additional weather details for each day.\n- Use conditional rendering to show a <div> with a message \"No forecast data available\" when the forecast array is empty.\n- Implement a computed property that calculates the average high temperature from all forecast items.\n- Add an input field with the placeholder \"Enter new forecast\" and a button labeled \"Add Forecast\" to allow users to append new forecast data.\n- Create a data property for managing both the forecast array and the visibility state of the detailed weather information.",
        "raw_output_metric": [
            "Weekly Forecast",
            "v-for",
            "forecast-item",
            "High:",
            "Low:",
            "Toggle Details",
            "No forecast data available",
            "Enter new forecast",
            "Add Forecast",
            "computed",
            "averageHigh"
        ],
        "VQA": {
            "What is the header text displayed at the top of the component?": "Weekly Forecast",
            "How is each forecast item visually formatted?": "The day is in bold followed by a span showing 'High: [value], Low: [value]'.",
            "What visual indicator shows that each forecast item is styled consistently?": "Each forecast item is wrapped with a CSS class named 'forecast-item'.",
            "What label is shown on the button that allows toggling of additional weather details?": "Toggle Details",
            "What message is displayed when there is no forecast data available?": "No forecast data available",
            "What placeholder text is shown in the input field for adding a new forecast?": "Enter new forecast",
            "What label appears on the button that adds new forecast data?": "Add Forecast"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001606",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text travel itinerary into a Vue component that displays a day-by-day schedule with detailed plans.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Travel Itinerary\".\n- Display each day of the itinerary in its own section, using an <h2> element for the day title and a <p> element for the corresponding details.\n- Use v-for to iterate over a predefined data array containing objects with properties for \"day\", \"date\", and \"description\".\n- Include an <input> element with the placeholder text \"Add new day\" placed above the itinerary sections.\n- Provide an \"Add Day\" button next to the input field that, when clicked, appends a new day object to the itinerary.\n- Render a footer element that clearly shows the total count of days in the itinerary, updating dynamically as items are added.",
        "raw_output_metric": [
            "Travel Itinerary",
            "<h1>",
            "<h2>",
            "<p>",
            "v-for",
            "day",
            "date",
            "description",
            "<input",
            "placeholder=\"Add new day\"",
            "Add Day",
            "<footer>"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the itinerary?": "Travel Itinerary",
            "What placeholder text is visible in the input field above the itinerary details?": "Add new day",
            "What text is shown on the button next to the input field?": "Add Day",
            "How is each day’s title visually indicated?": "It uses an h2 element for the day title",
            "How are the detailed plans for each day rendered?": "Each day’s details are shown in a paragraph element",
            "Is each day’s itinerary shown in its own section?": "Yes",
            "What dynamic information is shown in the footer?": "The footer displays the total count of days in the itinerary"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001607",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text daily task list into a Vue component that presents tasks with their due times and allows users to mark tasks as complete.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Daily Tasks\".\n- Display each task as an <li> element within an <ol> and include both the task name and its due time in double quotes.\n- Use v-for to iterate over a predefined data array where each task object contains \"name\", \"dueTime\", and \"completed\" properties.\n- Include a checkbox inside each <li> element that is bound to the task's \"completed\" property to enable marking the task as complete.\n- Place an <input> element with the placeholder \"Enter new task\" above the ordered list for task names.\n- Place a second <input> element with the placeholder \"Enter due time\" right next to the task input field for specifying the task due time.\n- Provide an \"Add Task\" button adjacent to the input fields that, when clicked, appends a new task with \"completed\" set to false to the tasks array.\n- Render a \"Remove Completed\" button below the task list that removes all tasks that have been marked as complete.\n- Include a data property that tracks the total number of tasks currently displayed in the component.",
        "raw_output_metric": [
            "Daily Tasks",
            "<h1>",
            "<ol>",
            "<li>",
            "v-for",
            "name",
            "dueTime",
            "completed",
            "Enter new task",
            "Enter due time",
            "Add Task",
            "Remove Completed"
        ],
        "VQA": {
            "What is the heading at the top of the component?": "Daily Tasks",
            "What type of list is used to display the tasks?": "Ordered list",
            "How are the task details formatted in each list item?": "Task name and due time in double quotes",
            "What interactive element is provided with each task?": "Checkbox",
            "What placeholder text is shown on the task input field?": "Enter new task",
            "What placeholder text is shown for the due time input field?": "Enter due time",
            "What label is displayed on the button used to add a new task?": "Add Task",
            "What label is on the button that removes completed tasks?": "Remove Completed"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001608",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe with its ingredients and preparation instructions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Collection\".\n- Display each recipe within a <div> container using a CSS class \"recipe-card\" for visual separation.\n- Use a v-for directive to iterate over an array of recipe objects, each containing properties for name, ingredients, and instructions.\n- Render the recipe name as an <h2> element, immediately followed by a <p> element containing the preparation instructions.\n- Display the list of ingredients using a <ul> element, where each ingredient is rendered as an <li> element with a CSS class \"ingredient-item\".\n- Place an <input> element above the recipe list with a placeholder text \"Search recipes\" to allow filtering of the displayed recipes.\n- Render a button labeled \"Add Recipe\" next to the input field that triggers a method to add a new recipe to the array.\n- Include a data property in the Vue component that tracks the total number of recipes currently displayed.\n- Provide a method for filtering recipes dynamically based on the search input.\n- Make sure that all methods and data properties are clearly defined within the component’s script section.",
        "raw_output_metric": [
            "Recipe Collection",
            "recipe-card",
            "v-for",
            "<h2>",
            "<p>",
            "ingredient-item",
            "Search recipes",
            "Add Recipe",
            "data",
            "methods",
            "<template>",
            "<script>"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Recipe Collection",
            "What CSS class is applied to each recipe's container?": "recipe-card",
            "Which heading element is used to show each recipe's name?": "h2",
            "What immediately follows the recipe name in each recipe card?": "A paragraph with preparation instructions",
            "How are the recipe ingredients visually presented?": "As a bullet list, with each item styled as an ingredient-item",
            "What text is shown as the placeholder in the search input field?": "Search recipes",
            "What label appears on the button next to the search field?": "Add Recipe",
            "How is the number of recipes displayed tracked?": "Through a data property in the Vue component"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001609",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nDevelop a Vue component that manages and displays a catalog of books with options to add new entries and remove existing ones.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Book Catalog\".\n- Display each book as a row within a <table> element, with columns for the title, author, and publication year.\n- Use a v-for directive to iterate over an array of book objects defined in the component's data.\n- Apply a CSS class named \"book-row\" to each table row (<tr>) for consistent styling.\n- Include a form containing three separate <input> elements for entering the book's title, author, and publication year, each with appropriate placeholder text.\n- Place an \"Add Book\" button next to the input fields that appends the new book to the catalog when clicked.\n- Provide a \"Remove\" button within each table row that, when clicked, deletes the corresponding book from the list.\n- Manage a data property that tracks the current count of books, displaying this number above the catalog table.\n- Ensure that all interactive elements have corresponding event handlers within the Vue component for adding and removing books.",
        "raw_output_metric": [
            "Book Catalog",
            "<h2>",
            "<table>",
            "v-for",
            "book-row",
            "<tr",
            "<input",
            "placeholder=\"Title\"",
            "placeholder=\"Author\"",
            "placeholder=\"Publication Year\"",
            "Add Book",
            "Remove",
            "@click",
            "data()",
            "methods",
            "books"
        ],
        "VQA": {
            "What is the header text at the top of the page?": "Book Catalog",
            "What number appears above the catalog table indicating the count of books?": "0",
            "How many columns are displayed for each book entry?": "3",
            "What placeholder text is shown in the first input field?": "Title",
            "What placeholder text is shown in the second input field?": "Author",
            "What placeholder text is shown in the third input field?": "Publication Year",
            "What text is displayed on the button used to add a new book?": "Add Book",
            "What label appears on the button that allows users to remove a book?": "Remove"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001610",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text meeting schedule into a Vue component that displays scheduled meetings and provides functionality to add and remove meetings.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Meeting Schedule\" at the top of the component.\n- Display the meetings in a table structure where each meeting is represented by a table row (<tr>) and details are shown in table cells (<td>).\n- Use v-for to iterate over a predefined data array containing meeting objects with properties for time and description.\n- Create an input text field with a placeholder \"Enter meeting details\" and an adjacent input field for time with a placeholder \"HH:MM\" positioned above the table.\n- Include an \"Add Meeting\" button next to the input fields that, when clicked, appends a new meeting to the meetings array based on the input values.\n- Provide a \"Delete\" button within each table row that, when clicked, removes the corresponding meeting from the list.\n- Apply a CSS class named \"meeting-row\" to each table row to facilitate consistent styling.\n- Add a data property in the Vue component that stores and displays the total number of meetings currently scheduled.\n- Render the total count of meetings in a paragraph element below the table with the text \"Total Meetings:\" followed by the count.\n- Ensure that clearing the inputs after adding a meeting is part of the component’s logic.",
        "raw_output_metric": [
            "Meeting Schedule",
            "v-for",
            "Enter meeting details",
            "HH:MM",
            "Add Meeting",
            "Delete",
            "meeting-row",
            "Total Meetings:"
        ],
        "VQA": {
            "What text is displayed in the header at the top of the component?": "Meeting Schedule",
            "What placeholder text is shown in the meeting details input field?": "Enter meeting details",
            "What placeholder text is shown in the time input field?": "HH:MM",
            "What is the text on the button used to add a meeting?": "Add Meeting",
            "What label appears on the button within each meeting row for removal?": "Delete",
            "How are the meetings visually organized?": "In a table with rows and cells",
            "What CSS class is applied to each meeting row?": "meeting-row",
            "What line of text is displayed below the table indicating the number of meetings?": "Total Meetings: followed by the count"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001611",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays upcoming events with their times and allows users to add and remove events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, showing the event name followed by its scheduled time in parentheses.\n- Implement v-for to iterate over a predefined data array of event objects containing \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to each <li> element for styling purposes.\n- Include an <input> element above the list with a placeholder \"Enter event name\" for users to input the event title.\n- Provide another <input> element with a placeholder \"Enter event time\" next to the event name input for entering the time.\n- Render an \"Add Event\" button that appends a new event to the data array when clicked.\n- Create a button labeled \"Remove Past Events\" that, upon clicking, filters out events that have a time value earlier than the current time.\n- Include a data property within the Vue component to track the total count of upcoming events displayed.",
        "raw_output_metric": [
            "Event Schedule",
            "<h1>",
            "<ul>",
            "<li",
            "event-item",
            "v-for",
            "placeholder=\"Enter event name\"",
            "placeholder=\"Enter event time\"",
            "Add Event",
            "Remove Past Events",
            "name",
            "time",
            "data",
            "count"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Event Schedule",
            "How are events listed on the page?": "Each event is shown as a list item with the event name followed by its time in parentheses",
            "What placeholder text appears for the event name input field?": "Enter event name",
            "What placeholder text appears for the event time input field?": "Enter event time",
            "What label is shown on the button for adding events?": "Add Event",
            "What label is shown on the button for removing past events?": "Remove Past Events",
            "What CSS class is assigned to each event list item?": "event-item"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001612",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nCreate a Vue component that manages a simple daily task board.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Tasks\".\n- Display each task as a <div> element within a main container.\n- Each <div> should show the task description and its due time inside separate <span> elements.\n- Utilize v-for to iterate over a predefined array of tasks stored in the component's data.\n- Include a checkbox inside each <div> that, when clicked, toggles a Boolean property indicating if the task is completed.\n- Provide a button labeled \"Archive Completed\" that, when clicked, removes all tasks marked as completed.\n- Apply a CSS class named \"task-item\" to each task <div> for styling.\n- Display the total count of uncompleted tasks in a <p> element at the bottom of the component.\n- Add an <input> element with a placeholder \"Enter new task\" above the list.\n- Include an \"Add Task\" button next to the input that, when clicked, appends a new task with a default due time of \"5:00 PM\" to the task array.",
        "raw_output_metric": [
            "Daily Tasks",
            "v-for",
            "task-item",
            "Archive Completed",
            "Enter new task",
            "Add Task",
            "5:00 PM"
        ],
        "VQA": {
            "What is the title text displayed at the top of the task board?": "Daily Tasks",
            "What placeholder text is visible in the input field for adding a new task?": "Enter new task",
            "What label is shown on the button used to add a new task?": "Add Task",
            "What is the default due time displayed for a newly added task?": "5:00 PM",
            "What label is shown on the button for archiving completed tasks?": "Archive Completed",
            "Which two pieces of information are visually presented for each task?": "The task description and its due time",
            "Where is the count of uncompleted tasks displayed in the component?": "In a paragraph at the bottom",
            "What visual indicator is provided for toggling a task’s completion status?": "A checkbox"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001613",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text recipe description into a Vue component that displays recipe details and manages a list of ingredients.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Details\".\n- Display each ingredient as an <li> element within a <ul>, showing both the ingredient name and its quantity.\n- Utilize v-for to iterate over an array of ingredient objects containing \"name\" and \"quantity\" properties.\n- Include an <input> element for the ingredient name and another <input> element for the ingredient quantity, each with a placeholder (\"Enter ingredient\" and \"Enter quantity\" respectively).\n- Render a button labeled \"Add Ingredient\" that, when clicked, appends the new ingredient to the list.\n- Provide a button labeled \"Reset Recipe\" that clears the ingredients list and resets the component state.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Display a counter that shows the total number of ingredients currently in the list using a data property.\n- Ensure the Vue component initializes with a predefined array of at least two ingredient objects.\n- Include error handling in the logic to prevent adding an ingredient if either input field is empty.",
        "raw_output_metric": [
            "<h1>Recipe Details</h1>",
            "v-for",
            "ingredient-item",
            "Enter ingredient",
            "Enter quantity",
            "Add Ingredient",
            "Reset Recipe",
            "ingredients",
            "counter",
            "newIngredient",
            "name",
            "quantity"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Recipe Details",
            "How many ingredients are initially listed?": "At least 2",
            "What placeholders are visible in the input fields?": "Enter ingredient and Enter quantity",
            "Which labels can be seen on the buttons?": "Add Ingredient and Reset Recipe",
            "Which CSS class is applied to each ingredient list item?": "ingredient-item",
            "What information is shown for each ingredient in the list?": "Both the ingredient name and its quantity",
            "Is there a visible counter showing the total number of ingredients?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001614",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movies with their ratings and watch statuses.\n\nFeature Requirements:\n- Render a header with an <h1> element displaying the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, iterating over a predefined data array using v-for.\n- Each <li> must show the movie title in bold followed by its rating in parentheses.\n- Utilize a checkbox next to each movie to toggle its watched status, bound to a property in the data array.\n- Apply a CSS class named \"movie-item\" to each <li> element to enable targeted styling.\n- Incorporate a button labeled \"Reset Watchlist\" that, when clicked, sets all movies’ watched statuses to false.\n- Provide an input field with the placeholder \"Enter new movie title\" positioned above the list.\n- Include an \"Add Movie\" button adjacent to the input field that appends a new movie with a default rating and an initial watched status of false.\n- Maintain a Vue data property that tracks the total number of unwatched movies and updates dynamically.",
        "raw_output_metric": [
            "Movie Watchlist",
            "<h1>",
            "v-for",
            "<ul>",
            "<li",
            "movie-item",
            "checkbox",
            "v-model",
            "Reset Watchlist",
            "Enter new movie title",
            "Add Movie"
        ],
        "VQA": {
            "What is the header text shown at the top of the watchlist?": "Movie Watchlist",
            "How is each movie title styled in the list?": "Bold",
            "How is the movie rating displayed next to the title?": "In parentheses",
            "What interactive element is present next to each movie for toggling its watched status?": "Checkbox",
            "What CSS class is applied to each movie list item?": "movie-item",
            "What is the label on the button that resets all movies’ watched statuses?": "Reset Watchlist",
            "What placeholder text appears in the input field above the movie list?": "Enter new movie title",
            "What is the label on the button used to add a new movie?": "Add Movie"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001615",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays session details and timing.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each session as an <li> element within an unordered list (<ul>), where each <li> shows the session title followed by its start time in parentheses.\n- Utilize v-for to iterate over a predefined data array containing session objects with title and time properties.\n- Apply a CSS class named \"session\" to each <li> element to ensure a distinct styling for the session details.\n- Include a checkbox input next to each session item that allows marking a session as attended.\n- Render a button with the text \"Clear Sessions\" that, when clicked, removes all sessions from the list.\n- Provide an <input> element with a placeholder text \"Add new session\" above the list for entering new session titles.\n- Render an \"Add Session\" button adjacent to the input field to append the new session title along with a default start time to the list.\n- Include a data property in the Vue component to track the total number of sessions currently displayed.",
        "raw_output_metric": [
            "<h2>Event Schedule</h2>",
            "<ul>",
            "<li",
            "v-for",
            "class=\"session\"",
            "input type=\"checkbox\"",
            "Clear Sessions",
            "placeholder=\"Add new session\"",
            "Add Session",
            "sessions",
            "title",
            "time",
            "(",
            ")"
        ],
        "VQA": {
            "What is the header text displayed at the top?": "Event Schedule",
            "How is each session detail displayed?": "As a list item showing the session title followed by its start time in parentheses",
            "What CSS class is applied to each session item?": "session",
            "What type of input element is visible next to each session?": "A checkbox for marking the session as attended",
            "What placeholder text is shown in the input field for new sessions?": "Add new session",
            "What is the label on the button that clears all sessions?": "Clear Sessions",
            "What is the label on the button used to add a session?": "Add Session",
            "Is the session list rendered as an unordered list?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001616",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a recipe ingredients list into a Vue component that displays each ingredient with its measure and preparation step.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Ingredients\".\n- Display each ingredient as a <li> element inside a <ul>, where each <li> contains the ingredient name followed by its measure in brackets.\n- Use v-for to iterate over a predefined array of ingredient objects, each having properties for name, measure, and preparation.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Include a paragraph under each <li> displaying the preparation step from the ingredient data.\n- Provide a text input field labeled \"Filter ingredients\" at the top of the component that binds to a data property.\n- Render a button with the text \"Sort A-Z\" that, when clicked, orders the ingredients alphabetically by name.",
        "raw_output_metric": [
            "Recipe Ingredients",
            "ingredient-item",
            "v-for",
            "Filter ingredients",
            "Sort A-Z",
            "name",
            "measure",
            "preparation",
            "<h2>",
            "<ul>",
            "<li>"
        ],
        "VQA": {
            "What is the text displayed inside the header at the top of the component?": "Recipe Ingredients",
            "How is the measure of each ingredient shown next to the ingredient name?": "It is displayed in brackets after the ingredient name",
            "What label text appears with the text input field at the top?": "Filter ingredients",
            "What text is shown on the button used for ordering the ingredients?": "Sort A-Z",
            "Is there an additional paragraph displayed beneath each ingredient that details the preparation step?": "Yes",
            "What CSS class is applied to each ingredient list item?": "ingredient-item",
            "What happens to the ingredient list when the Sort A-Z button is clicked?": "The ingredients are ordered alphabetically by name"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001617",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast for a specified city.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Weekly Weather Forecast\".\n- Display each day's forecast as an <li> element within a <ul>, showing the day name, temperature with a degree symbol, and precipitation percentage.\n- Use v-for to iterate over a predefined data array that contains day names, temperatures, and precipitation chances.\n- Apply a CSS class named \"forecast-item\" to each <li> element.\n- Include an <input> element above the list with a placeholder text \"Enter city name\" and bind it to a Vue data property.\n- Render a button with the text \"Update Forecast\" that, when clicked, triggers an update of the weather data based on the entered city name.\n- Display a data-bound value below the forecast list using a <span> element to show the total count of forecast days.\n- Ensure each day's forecast includes clear labels for the temperature and precipitation values.",
        "raw_output_metric": [
            "Weekly Weather Forecast",
            "<h1>",
            "</h1>",
            "<ul>",
            "<li>",
            "</li>",
            "forecast-item",
            "v-for",
            "Enter city name",
            "<input",
            "v-model",
            "Update Forecast",
            "<button",
            "<span>",
            "Temperature:",
            "Precipitation:",
            "°"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Weekly Weather Forecast",
            "What placeholder text is shown in the input field above the list?": "Enter city name",
            "What text is on the button that updates the forecast?": "Update Forecast",
            "How many forecast items are expected to be displayed in the list for a weekly forecast?": "7",
            "What information is visibly included in each forecast item?": "Day name, Temperature with a degree symbol, and Precipitation percentage",
            "Where is the total count of forecast days displayed?": "In a span element below the forecast list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001618",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays book details and supports genre filtering.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Library Collection\".\n- Display each book as an <li> element within a <ul> that shows the book title in bold, the author in regular text, and the publication year in parentheses.\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, year, and genre properties.\n- Wrap each <li> element inside a <div> with a CSS class named \"book-item\" for styling.\n- Provide a dropdown (<select> element) above the list with options for genres (e.g., Fiction, Nonfiction, Science) to filter the displayed books.\n- Place an <input> element with the placeholder \"Search by title\" above the book list for text-based filtering.\n- Render a button labeled \"Apply Filters\" next to the input field that, when clicked, filters the list based on the selected genre and search input.\n- Render a separate button labeled \"Reset Filters\" that restores the full list of books.\n- Maintain a data property in the Vue component that tracks the current number of books displayed.",
        "raw_output_metric": [
            "Library Collection",
            "v-for",
            "class=\"book-item\"",
            "Fiction",
            "Nonfiction",
            "Science",
            "Search by title",
            "Apply Filters",
            "Reset Filters"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Library Collection",
            "How is the book title styled in each list item?": "It is shown in bold.",
            "How are the books organized on the page?": "They are listed as individual items in an unordered list, with each book enclosed in a styled container.",
            "What placeholder text is visible in the search input?": "Search by title",
            "What filtering controls are available above the book list?": "A genre dropdown, a search input, an 'Apply Filters' button, and a 'Reset Filters' button",
            "Which genre options can be selected from the dropdown?": "Fiction, Nonfiction, Science",
            "What visual indicator shows each book's container styling?": "Each book is wrapped inside a container with a specific CSS class ('book-item')",
            "Is there an element showing the current number of displayed books?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001619",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text outline of a weekly exercise routine into a Vue component that displays daily workout schedules.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Exercise Routine\".\n- Display each day of the week as a <section> element containing a subheader <h3> with the respective day name.\n- Use a <ul> element within each <section> to list workouts, with each workout rendered as an <li> element using v-for.\n- Each <li> must show the workout name followed by its duration in minutes inside parentheses.\n- Include a button labeled \"Reset Day\" inside each <section> that, when clicked, clears all workouts for that specific day.\n- Position two <input> fields above the workout list in each section: one with the placeholder \"New workout\" and another with the placeholder \"Duration (min)\".\n- Provide an \"Add Workout\" button next to the inputs to append a new workout entry to the day’s schedule.\n- Define a Vue data property to maintain and display the total count of workouts scheduled for the week.",
        "raw_output_metric": [
            "Weekly Exercise Routine",
            "<h2>",
            "<section>",
            "<h3>",
            "<ul>",
            "<li>",
            "v-for",
            "Reset Day",
            "New workout",
            "Duration (min)",
            "Add Workout",
            "data"
        ],
        "VQA": {
            "What is the text displayed in the main header?": "Weekly Exercise Routine",
            "How many daily sections are expected to be rendered?": "7",
            "What element type is used for each day’s title?": "h3",
            "What two placeholders appear in the input fields in each section?": "New workout and Duration (min)",
            "What is the label on the button that appends a new workout?": "Add Workout",
            "What does each workout list item show?": "Workout name followed by its duration in minutes inside parentheses",
            "What is the label on the button used to clear workouts for a day?": "Reset Day"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001620",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text daily workout routine into a Vue component that displays an exercise schedule.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Workout Routine\".\n- Display each exercise as an <li> element within an ordered list (<ol>).\n- Each <li> should show the exercise name followed by its duration in minutes, separated by a hyphen.\n- Utilize v-for to iterate over an array of exercise objects stored in the component's data.\n- Apply a CSS class named \"exercise-item\" to each <li> element.\n- Render a paragraph below the list showing the total workout duration calculated from the exercises.\n- Place an <input> element above the list with a placeholder text \"Add new exercise\".\n- Provide an \"Add Exercise\" button next to the input field to append a new exercise to the list.\n- Include a data property for tracking the number of exercises currently in the workout routine.",
        "raw_output_metric": [
            "Daily Workout Routine",
            "<h2>",
            "<ol>",
            "<li",
            "exercise-item",
            "v-for",
            "<input",
            "placeholder=\"Add new exercise\"",
            "Add Exercise",
            "<p>"
        ],
        "VQA": {
            "What is the title text displayed at the top of the component?": "Daily Workout Routine",
            "What type of list element is used to display the exercises?": "Ordered list",
            "How is each exercise formatted in the list?": "Exercise name followed by its duration in minutes, separated by a hyphen",
            "What CSS class is applied to each exercise item?": "exercise-item",
            "What placeholder text appears in the input field above the list?": "Add new exercise",
            "What is the label on the button next to the input field?": "Add Exercise",
            "What content is displayed below the exercise list?": "A paragraph showing the total workout duration"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001621",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of favorite quotes and their authors into a Vue component that displays the quotes with filtering capabilities.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Favorite Quotes\".\n- Utilize v-for to iterate over an array of quote objects, where each object contains the quote text and the author's name.\n- Display each quote inside a <blockquote> element and show the author's name in a <footer> element directly beneath it.\n- Place an <input> element above the quotes list with a placeholder labeled \"Search by author\" to allow filtering.\n- Render a button next to the input with the label \"Filter\" that initiates the filtering process.\n- Provide a \"Reset\" button that, when clicked, restores the original list of quotes and clears the search filter.\n- Apply a CSS class named \"quote-item\" to each <blockquote> element to allow targeted styling.\n- Include a computed property that dynamically tracks and displays the number of quotes currently shown.\n- Incorporate a conditional section that displays the text \"No matches found\" if the filter yields no results.\n- Define an initial data property that holds the complete list of quotes along with their associated authors.",
        "raw_output_metric": [
            "Favorite Quotes",
            "v-for",
            "<blockquote",
            "quote-item",
            "<footer",
            "input",
            "Search by author",
            "button",
            "Filter",
            "Reset",
            "No matches found",
            "computed",
            "data",
            "quotes"
        ],
        "VQA": {
            "What is the text displayed in the page header?": "Favorite Quotes",
            "What placeholder is shown in the search input box?": "Search by author",
            "What is the label on the button used to filter quotes?": "Filter",
            "What label is on the button used to reset the quote list?": "Reset",
            "How is each quote displayed in the component?": "Inside a blockquote element with a CSS class 'quote-item' and a footer for the author",
            "What text appears when no quotes match the filter?": "No matches found",
            "How is the dynamic count of displayed quotes provided?": "By a computed property tracking the number of visible quotes",
            "Which element is used to render the page header?": "An h2 element"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001622",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of book titles and authors into a Vue component that displays a library catalog.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Library Catalog\".\n- Display each book entry as an <li> element within a <ul>, where the book title is followed by the author in square brackets.\n- Use a v-for directive to iterate over a predefined data array containing book objects with 'title' and 'author' properties.\n- Apply a CSS class named \"book-item\" to each <li> element for styling.\n- Render two <input> elements, one with the placeholder \"New Book Title\" and another with the placeholder \"Author Name\", placed above the catalog list.\n- Include an \"Add Book\" button next to the inputs that, when clicked, validates the inputs and appends a new book to the list.\n- Display a separate section that shows the total count of books currently in the catalog, using a dedicated data property.\n- Ensure that an error message becomes visible if either input field is empty when the \"Add Book\" button is pressed.",
        "raw_output_metric": [
            "Library Catalog",
            "v-for",
            "book-item",
            "New Book Title",
            "Author Name",
            "Add Book",
            "title",
            "author"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the page?": "Library Catalog",
            "How are individual book entries displayed in the list?": "Each entry shows the book title followed by the author in square brackets.",
            "Which CSS class is assigned to each book list item?": "book-item",
            "What are the placeholders for the two input fields?": "New Book Title and Author Name",
            "What button is shown next to the input fields?": "Add Book",
            "Is there a visible section showing the total count of books in the catalog?": "Yes",
            "What visual feedback is given if the input fields are empty when the Add Book button is pressed?": "An error message is displayed"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001623",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of movie showtimes into a Vue component that displays movie titles, showtimes, and theater hall numbers.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Schedule\".\n- Display each movie as an <li> element within a <ul>, showing the movie title, showtime, and hall number.\n- Use v-for to iterate over a predefined array of movie objects that include properties for title, time, and hall.\n- Add a CSS class named \"movie-item\" to every <li> element.\n- Provide an <input> element above the list with a placeholder \"Enter movie title\".\n- Include a <select> element with three predefined options representing theater halls, positioned next to the input.\n- Render a button with the text \"Add Movie\" that, when clicked, appends a new movie from the input and the selected hall.\n- Display a dynamic count of movies displayed using a data property in a dedicated <p> element below the list.\n- Render a button with the text \"Clear Schedule\" that, when clicked, removes all entries from the movie list.\n- Show an error message in a <p> element with the text \"Please provide a movie title\" if trying to add a movie without a title.",
        "raw_output_metric": [
            "Movie Schedule",
            "movie-item",
            "Enter movie title",
            "Add Movie",
            "Clear Schedule",
            "Please provide a movie title",
            "v-for"
        ],
        "VQA": {
            "What is the text displayed in the header of the page?": "Movie Schedule",
            "What placeholder text is shown in the input element?": "Enter movie title",
            "How many options are provided in the theater hall select element?": "3",
            "What is the label on the button used to add a movie?": "Add Movie",
            "What CSS class is assigned to every movie list item?": "movie-item",
            "What are the three pieces of movie information shown in each list item?": "movie title, showtime, and hall number",
            "What is the error message displayed when trying to add a movie without a title?": "Please provide a movie title",
            "What is the label on the button that clears all movie entries?": "Clear Schedule",
            "Where is the dynamic movie count displayed?": "In a paragraph element below the movie list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001624",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nDesign a Vue component that serves as a personal reading list manager where users can add book titles, mark them as read, and filter the list based on their reading status.\n\nFeature Requirements:\n- Render a main title using an <h2> element with the text \"My Reading List\" at the top of the component.\n- Use a <ul> element to display each book title within an <li> element, generated via v-for from a predefined book array.\n- Next to each book title, include a checkbox to mark the book as read, updating its state in the component's data.\n- Place an <input> element with the placeholder \"Enter book title\" above the list for users to add new books.\n- Render a button labeled \"Add Book\" immediately adjacent to the input field to append a new book to the list when clicked.\n- Include two additional buttons below the list labeled \"Show Read\" and \"Show Unread\" to filter the displayed items accordingly.\n- Apply a CSS class named \"completed\" to <li> elements that represent books marked as read.\n- Maintain a data property to track and display the total number of books currently in the list.",
        "raw_output_metric": [
            "My Reading List",
            "Enter book title",
            "Add Book",
            "Show Read",
            "Show Unread",
            "completed",
            "v-for",
            "<h2>",
            "<ul>",
            "<li>"
        ],
        "VQA": {
            "What is the main title text displayed at the top of the component?": "My Reading List",
            "What text is shown as the input placeholder for adding a new book?": "Enter book title",
            "What label is on the button next to the input field?": "Add Book",
            "What are the labels of the two filter buttons displayed below the book list?": "Show Read and Show Unread",
            "What element is used to display the list of books?": "An unordered list with list items generated from the book array",
            "How is a book visually marked as read?": "A checkbox is checked and a CSS class named 'completed' is applied to its list item",
            "How can the total number of books be identified?": "It is displayed as a text count showing the current number in the reading list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001625",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe along with its ingredients and preparation steps.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Collection\".\n- Display each recipe name in an <h3> element.\n- For each recipe, list the ingredients inside a <ul> element with each ingredient in an <li> element.\n- Use a v-for directive to iterate over an array of recipe objects defined in the component’s data.\n- Show the preparation steps for each recipe inside an ordered list (<ol>), with each step as an <li> element.\n- Include an input field above the recipe list with a placeholder text \"Enter new recipe\" for adding additional recipes.\n- Provide an \"Add Recipe\" button next to the input that appends the new recipe to the array.\n- Render a \"Reset Recipes\" button that, when clicked, restores the recipe list to its original state.\n- Apply a CSS class named \"recipe-item\" to each recipe container for clear segmentation.\n- Include a data property in the Vue component that keeps track of the total number of recipes currently displayed.",
        "raw_output_metric": [
            "Recipe Collection",
            "<h2>",
            "<h3>",
            "v-for",
            "<ul>",
            "<li>",
            "<ol>",
            "Enter new recipe",
            "Add Recipe",
            "Reset Recipes",
            "recipe-item",
            "data",
            "totalRecipes"
        ],
        "VQA": {
            "What is the main header text displayed at the top of the page?": "Recipe Collection",
            "What placeholder text is visible in the input field above the recipe list?": "Enter new recipe",
            "What text is shown on the button next to the input for adding a new recipe?": "Add Recipe",
            "What text is shown on the button that restores the original recipe list?": "Reset Recipes",
            "How are recipe names visually displayed?": "They are shown as sub-headers (prominent headings) for each recipe",
            "In what format are the ingredients for each recipe listed?": "They are listed in a bullet-point (unordered) list",
            "How are the preparation steps for each recipe presented?": "They are displayed in a numbered (ordered) list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001626",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text movie list into a Vue component that displays movie titles and ratings in a table format.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Catalog\".\n- Display the movie list in a table where each row represents a movie.\n- Use v-for to iterate over a predefined data array of movies to generate each table row.\n- Each table row should have three cells: one for the index number, one for the movie title, and one for the movie rating.\n- Apply a CSS class named \"movie-row\" to each table row for consistent styling.\n- Display an <input> element with the placeholder \"Filter by rating\" above the table to allow users to filter movies by their rating.\n- Include a \"Reset Filters\" button that, when clicked, reverts any applied filters and displays all movies.\n- Provide a data property that tracks and displays the total number of movies currently visible in the component.",
        "raw_output_metric": [
            "Movie Catalog",
            "movie-row",
            "Filter by rating",
            "Reset Filters",
            "v-for"
        ],
        "VQA": {
            "What is the text displayed in the header at the top?": "Movie Catalog",
            "What placeholder text is shown in the input field above the table?": "Filter by rating",
            "What text is displayed on the button provided for filters?": "Reset Filters",
            "How many columns are displayed in each movie row of the table?": "3",
            "What information is shown in each row of the movie table?": "Index number, movie title, and movie rating",
            "What CSS class is applied to each row in the movie table?": "movie-row",
            "What user interface element is used to filter the movies?": "An input field with the placeholder 'Filter by rating'",
            "Which data property is displayed to show how many movies are currently visible?": "The total number of movies"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001627",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of upcoming events into a Vue component that displays an interactive event schedule.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, iterating over a predefined data array with v-for.\n- Each <li> should show the event name followed by the event date in the format \"Event Name - YYYY-MM-DD\".\n- Apply a CSS class named \"event-item\" to each <li> element for specific styling.\n- Render a button with the text \"Remove Past Events\" that removes all events with dates earlier than today when clicked.\n- Place an <input> element with a placeholder \"New Event Name\" and a second <input> with a placeholder \"YYYY-MM-DD\" above the list.\n- Provide an \"Add Event\" button next to the input fields to append new events to the schedule.\n- Include a data property to track and display the total number of upcoming events.\n- Use v-if to conditionally display a message \"No events scheduled\" when the events array is empty.",
        "raw_output_metric": [
            "Event Schedule",
            "<h1>",
            "<ul>",
            "<li>",
            "v-for",
            "event-item",
            "Remove Past Events",
            "New Event Name",
            "YYYY-MM-DD",
            "Add Event",
            "No events scheduled",
            "v-if"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Event Schedule",
            "What text is shown on the button that clears events with past dates?": "Remove Past Events",
            "How many input fields are visible above the event list?": "2",
            "What placeholder text does the first input field display?": "New Event Name",
            "What placeholder text does the second input field display?": "YYYY-MM-DD",
            "How is each event formatted in the list?": "Event Name - YYYY-MM-DD",
            "What CSS class is applied to each event item in the list?": "event-item",
            "What message is displayed when there are no events scheduled?": "No events scheduled"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001628",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays events with their corresponding times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\" at the top of the component.\n- Utilize a data property that holds an array of event objects, where each object contains an event name and a specific time.\n- Display the events in a table where each row represents an event; use a v-for directive to iterate over the events array.\n- In each table row, display the event name in the first cell with a CSS class called \"event-name\" and the event time in the second cell with a CSS class called \"event-time\".\n- Place two <input> elements above the table; one input should have a placeholder \"Event Name\" and the other \"Event Time\" to allow users to add new events.\n- Render a button labeled \"Add Event\" next to the inputs that, when clicked, appends the new event from the inputs to the events array.\n- Include a \"Delete Event\" button within each table row that, when clicked, removes that specific event from the schedule.\n- Provide a computed property that calculates and displays the total number of events currently in the schedule.\n- Position a footer <p> element at the bottom of the component that displays the text \"Total Events:\" followed by the computed total.",
        "raw_output_metric": [
            "Event Schedule",
            "Event Name",
            "Event Time",
            "Add Event",
            "Delete Event",
            "event-name",
            "event-time",
            "Total Events:",
            "v-for",
            "computed"
        ],
        "VQA": {
            "What is the header text displayed at the top of the component?": "Event Schedule",
            "How many input fields are shown above the table?": "2",
            "What placeholder text appears in the first input field?": "Event Name",
            "What placeholder text appears in the second input field?": "Event Time",
            "What is the label on the button next to the input fields?": "Add Event",
            "What text is displayed in each table row to remove an event?": "Delete Event",
            "What CSS class is used for the table cell showing the event name?": "event-name",
            "What CSS class is used for the table cell showing the event time?": "event-time",
            "What text is visible in the footer indicating the total number of events?": "Total Events:"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001629",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that displays each task along with its completion status.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Task Manager\".\n- Display each task as an <li> element contained within a <ul> element.\n- Each <li> should show the task description in plain text and, if the task is completed, append the text \" (Done)\".\n- Utilize v-for to iterate over a predefined data array of task objects containing a \"description\" and a \"completed\" boolean.\n- Apply a CSS class named \"task-item\" to each <li> element to enable styling.\n- Include a checkbox next to each task that toggles its completed status when clicked.\n- Render a button with the text \"Remove Completed\" that, when clicked, filters out all tasks marked as completed.\n- Provide an <input> element with the placeholder \"Enter new task\" above the list, accompanied by an \"Add Task\" button to allow the addition of new tasks.\n- Include a data property in the Vue component to track and display the total number of tasks currently in the list.",
        "raw_output_metric": [
            "Task Manager",
            "<h1>",
            "<ul>",
            "<li>",
            " (Done)",
            "v-for",
            "task-item",
            "Remove Completed",
            "Enter new task",
            "Add Task",
            "description",
            "completed"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Task Manager",
            "How are tasks visually listed on the page?": "Each task appears as a bullet point in an unordered list.",
            "What text is appended to a task’s description when it is completed?": "(Done)",
            "What placeholder text is shown in the input for adding a new task?": "Enter new task",
            "What label is shown on the button that removes completed tasks?": "Remove Completed",
            "What UI element is placed next to each task to allow toggling its completed status?": "Checkbox",
            "What is the CSS class applied to each task item?": "task-item",
            "How is the total number of tasks displayed?": "It is shown using a data property on the page.",
            "What label is used on the button for adding a new task?": "Add Task"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001630",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of podcast episodes into a Vue component that displays each episode with search and load functionality.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Podcast Episodes\".\n- Display each podcast episode inside a <div> element that utilizes a CSS class called \"episode-card\".\n- Within each \"episode-card\", include an <h3> element for the episode title, a <p> element for the episode description, and a <span> element for the published date.\n- Use v-for to iterate through a predefined data array named \"episodes\", where each element is an object containing title, description, and date fields.\n- Place an <input> element with a placeholder \"Search episodes\" above the episode list to allow filtering of episodes.\n- Include a button labeled \"Load More\" positioned below the episode list that, when clicked, adds additional episodes to the array.\n- Define a data property in the Vue component that tracks the current total number of episodes displayed.\n- Include a computed property that filters the episodes based on the text input from the search field.",
        "raw_output_metric": [
            "Podcast Episodes",
            "episode-card",
            "Search episodes",
            "Load More",
            "v-for",
            "episodes",
            "<h2>",
            "<h3>",
            "<p>",
            "<span>"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Podcast Episodes",
            "What placeholder text appears in the search input field?": "Search episodes",
            "What text is visible on the button below the list of episodes?": "Load More",
            "What CSS class is applied to each episode card?": "episode-card",
            "What three pieces of information are displayed inside each episode card?": "Episode title, episode description, and published date",
            "What mechanism is used to iterate over the episodes for display?": "v-for is used to iterate through the episodes array",
            "What data property is used to track the current total number of episodes displayed?": "A data property that tracks the current total number of episodes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001631",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that lists and organizes events with their corresponding dates and times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul> list, with the event title followed by its date and time in the format \"MM/DD/YYYY HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing event objects with properties for \"title\", \"date\", and \"time\".\n- Apply a CSS class named \"event-item\" to each <li> element.\n- Include an <input> element with a placeholder \"Enter event title\" and separate <input> elements for date and time above the list, all contained within a div.\n- Render an \"Add Event\" button next to the input fields that appends a new event to the list when clicked.\n- Create a data property that tracks the total number of events and display this count in a <span> element with the text \"Total Events:\" immediately below the <ul> list.",
        "raw_output_metric": [
            "<h2>",
            "Event Schedule",
            "<ul>",
            "<li>",
            "event-item",
            "v-for",
            "Enter event title",
            "<input>",
            "Add Event",
            "Total Events:",
            "<span>",
            "MM/DD/YYYY HH:MM"
        ],
        "VQA": {
            "What is the main header text displayed at the top?": "Event Schedule",
            "What is the format used to display each event's date and time?": "MM/DD/YYYY HH:MM",
            "What CSS class is applied to each event item in the list?": "event-item",
            "What placeholder text appears in the event title input field?": "Enter event title",
            "What text is shown on the button next to the input fields?": "Add Event",
            "What label is displayed below the list to show the total number of events?": "Total Events:",
            "How are the events visually organized on the page?": "As a bulleted list in a <ul> element"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001632",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that manages a to-do list.\n\nFeature Requirements:\n- Render a header using an <h1> element displaying the text \"To-Do Tasks\".\n- Display each task as an <li> element inside an ordered list (<ol>).\n- Use the v-for directive to iterate over a data array where each task object contains a description and a due date.\n- Show each task's description followed by its due date inside a <span> formatted as \"YYYY-MM-DD\".\n- Provide a text input with the placeholder \"New task description\" and a date input with the placeholder \"Due date\" above the list.\n- Render an \"Add Task\" button next to the inputs that appends the new task to the list.\n- Display a \"Remove Completed\" button that, when clicked, removes all tasks flagged as completed.\n- Maintain a data property that tracks the total number of tasks currently displayed.\n- Apply a CSS class named \"task-item\" to each <li> element for consistent styling.",
        "raw_output_metric": [
            "To-Do Tasks",
            "<h1>",
            "<ol>",
            "<li",
            "task-item",
            "v-for",
            "<span>",
            "YYYY-MM-DD",
            "New task description",
            "Due date",
            "Add Task",
            "Remove Completed",
            "data"
        ],
        "VQA": {
            "What is the text displayed in the header of the to-do list?": "To-Do Tasks",
            "What type of list is used to display the tasks?": "Ordered list",
            "What CSS class is applied to each task item?": "task-item",
            "How is each task’s description and due date shown?": "The description is followed by a due date formatted as YYYY-MM-DD inside a span",
            "What placeholder text is used for the text input field?": "New task description",
            "What placeholder text is used for the date input field?": "Due date",
            "What is the label on the button for adding a new task?": "Add Task",
            "What is the label on the button for removing completed tasks?": "Remove Completed"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001633",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert plain text recipe instructions into a Vue component that displays both cooking steps and ingredients.\n\nFeature Requirements:\n- Render the title \"Recipe Instructions\" using an <h2> element.\n- Display the ingredients in an ordered list (<ol>) where each ingredient is wrapped in an <li> element.\n- Render each cooking step inside a <div> element with the CSS class \"step\" for targeted styling.\n- Utilize v-for to loop through a predefined data array for the cooking steps.\n- Include a text input with a placeholder \"Enter additional ingredient\" above the ingredients list.\n- Provide a button labeled \"Add Ingredient\" adjacent to the input that appends the new ingredient to the list.\n- Display a paragraph (<p>) element below the ingredients list that reflects the current count of ingredients.\n- Incorporate a data property within the Vue component for tracking the number of cooking steps.",
        "raw_output_metric": [
            "Recipe Instructions",
            "<h2>",
            "<ol>",
            "<li>",
            "<div class=\"step\">",
            "v-for",
            "Enter additional ingredient",
            "Add Ingredient",
            "<p>",
            "data()"
        ],
        "VQA": {
            "What is the main heading displayed on the page?": "Recipe Instructions",
            "How are the ingredients presented?": "They are shown as items in an ordered (numbered) list.",
            "What placeholder text appears in the input field above the ingredients?": "Enter additional ingredient",
            "What label is shown on the button next to the input field?": "Add Ingredient",
            "How is the current count of ingredients communicated?": "A paragraph below the ingredients list shows the count.",
            "How are the cooking steps individually displayed?": "Each step is rendered inside a block with specific styling (using the 'step' class)."
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001634",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text project task overview into a Vue component that displays a list of tasks with deadlines and statuses.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Project Task Dashboard\".\n- Display each task as an <li> element within a <ul> container, iterating over a predefined tasks array using v-for.\n- Each <li> should show the task name, deadline, and status, where the deadline and status are wrapped in separate <span> elements.\n- Apply a CSS class named \"task-item\" to each <li> element.\n- Render a button with the text \"Update Tasks\" that, when clicked, triggers a method to update the status of all tasks.\n- Include an <input> element with the placeholder \"Enter new task\" positioned above the task list.\n- Provide an \"Add Task\" button placed next to the input field that appends a new task to the tasks array with a default deadline of \"TBD\" and status \"pending\".\n- Incorporate a data property for tracking the total number of tasks, labeled \"taskCount\".\n- Provide a computed property that returns only the tasks with a status of \"completed\".\n- Render an additional button with the text \"Reset Tasks\" that, when clicked, restores the original task list.",
        "raw_output_metric": [
            "Project Task Dashboard",
            "<h1>",
            "<ul>",
            "v-for",
            "<li class=\"task-item\">",
            "<span>",
            "Update Tasks",
            "Enter new task",
            "Add Task",
            "TBD",
            "pending",
            "taskCount",
            "completed",
            "Reset Tasks",
            "tasks"
        ],
        "VQA": {
            "What is the main title visible at the top of the component?": "Project Task Dashboard",
            "What placeholder text is shown in the input element above the task list?": "Enter new task",
            "Which three buttons are visible on the page and what texts do they display?": "Update Tasks, Add Task, and Reset Tasks",
            "How are individual tasks displayed in the list?": "Each task appears as a bullet point with the task name followed by deadline and status wrapped in separate elements",
            "What CSS class is applied to every task item in the list?": "task-item",
            "What default deadline and status are assigned when a new task is added?": "Deadline is 'TBD' and status is 'pending'",
            "What does the computed property display?": "Only tasks with a status of 'completed'"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001635",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of personal journal entries into a Vue component that displays each entry along with its timestamp.\n\nFeature Requirements:\n- Render a main title in an <h1> element with the text \"Journal Entries\".\n- Use a v-for directive to iterate over a data array of entry objects, and display each entry's title and timestamp inside a <div> element.\n- Render each journal entry within a <p> element that has a CSS class named \"entry-text\".\n- Place an <input> element with a placeholder \"Entry Title\" and a <textarea> element with a placeholder \"Write your thoughts\" above the list for adding new entries.\n- Include a button labeled \"Add Entry\" next to the input fields that appends the new entry to the list.\n- Provide a data property that tracks the total number of journal entries, and display this count within a <span> element adjacent to the main title.\n- Render another button with the text \"Delete All\" that, upon being clicked, clears all journal entries from the list.",
        "raw_output_metric": [
            "Journal Entries",
            "v-for",
            "entry-text",
            "Entry Title",
            "Write your thoughts",
            "Add Entry",
            "Delete All",
            "timestamp",
            "title"
        ],
        "VQA": {
            "What is the main title displayed on the page?": "Journal Entries",
            "What placeholder text is shown in the title input field?": "Entry Title",
            "What placeholder text is visible in the text area?": "Write your thoughts",
            "What is the label on the button that allows adding a new journal entry?": "Add Entry",
            "What text is seen on the button for clearing all journal entries?": "Delete All",
            "What additional information is displayed next to the main title?": "The total count of journal entries",
            "What details are presented for each journal entry in the list?": "Each entry shows its title and timestamp"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001636",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays titles, authors, and publication years.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Book Collection\".\n- Display each book as a <div> element inside a <section> with each <div> showing the book's title, author, and publication year.\n- Each book <div> must include a <p> element for the title and a separate <p> element combining the author and publication year in the format \"Author (Year)\".\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, and year properties.\n- Apply a CSS class named \"book-entry\" to each <div> element that represents a book.\n- Render two buttons: one with the text \"Remove All\" that clears the book list, and another with the text \"Sort by Year\" that orders the books from oldest to newest.\n- Include an <input> element with a placeholder \"Enter new book title\" above the list and another input with a placeholder \"Enter author name\".\n- Provide an additional <input> element with a placeholder \"Enter publication year\" next to the previous inputs.\n- Include an \"Add Book\" button that, when clicked, appends a new book to the list using the provided inputs.\n- Incorporate a data property in the Vue component to track the total count of books currently displayed.",
        "raw_output_metric": [
            "Book Collection",
            "<h1>",
            "<section>",
            "<div",
            "class=\"book-entry\"",
            "v-for",
            "<p>",
            "Remove All",
            "Sort by Year",
            "Enter new book title",
            "Enter author name",
            "Enter publication year",
            "Add Book",
            "title",
            "author",
            "year"
        ],
        "VQA": {
            "What is displayed as the main page title?": "Book Collection",
            "Which two buttons are provided for list operations?": "Remove All and Sort by Year",
            "What is the label of the button that adds a new book?": "Add Book",
            "How many input fields are shown above the book list and what do they indicate?": "Three inputs: one for new book title, one for author name, and one for publication year",
            "How is each book entry visually structured?": "Each book is shown as a container with a paragraph for the title and a separate paragraph displaying author and year in the format 'Author (Year)'",
            "What additional information is tracked in the component?": "The total count of books displayed",
            "What CSS class is applied to each book's container?": "book-entry"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001637",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movie details and allows users to add or remove entries interactively.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, showing both the movie title and its release year.\n- Utilize v-for to iterate over a predefined data array containing movie objects.\n- Apply a CSS class named \"movie-item\" to each <li> element for styling purposes.\n- Render a button with the text \"Remove All Movies\" that, when clicked, clears the entire movie list.\n- Place an <input> element with a placeholder text \"Add movie title\" above the list for user entry.\n- Include an \"Add Movie\" button positioned next to the input field that appends a new movie to the watchlist.\n- Define a data property within the Vue component to track the total number of movies currently displayed.\n- Display the current count in a <p> element below the list with text formatted as \"Total Movies: X\", where X is the count.",
        "raw_output_metric": [
            "Movie Watchlist",
            "<h1>",
            "<ul>",
            "v-for",
            "movie-item",
            "Remove All Movies",
            "Add movie title",
            "Add Movie",
            "Total Movies:"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Movie Watchlist",
            "What details are shown for each movie in the list?": "The movie title and its release year.",
            "What CSS class is applied to each movie list item?": "movie-item",
            "What is the label on the button that removes all movies?": "Remove All Movies",
            "What placeholder text appears in the movie title input field?": "Add movie title",
            "What is the label on the button used to add a new movie?": "Add Movie",
            "How is the movie count displayed on the page?": "In a paragraph below the list showing 'Total Movies: X'"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001638",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text weekly workout plan into a Vue component that organizes and displays daily exercise routines.\n\nFeature Requirements:\n- Render a page header using an <h2> element with the text \"Weekly Workout Plan\".\n- Organize workouts in a grid layout where each day is represented as a <div> element styled with the CSS class \"workout-card\".\n- Inside each day's <div>, display the day name in an <h3> element and a list of exercises using a <ul> with <li> elements for each exercise.\n- Use v-for to iterate over a pre-defined data array where each element contains the day name and its associated exercises.\n- Provide an <input> element with the placeholder \"Enter exercise\" above each day's list to allow the addition of new exercises.\n- Include an \"Add Exercise\" button next to each input field that appends the entered exercise to the day's list when clicked.\n- Render a \"Reset Workout\" button at the bottom of the component that resets all daily exercise lists to their initial state.\n- Maintain a data property in the Vue component to track the total number of exercises across all days.\n- Ensure each <li> element displaying an exercise is assigned a CSS class \"exercise-item\" for styling.",
        "raw_output_metric": [
            "Weekly Workout Plan",
            "workout-card",
            "v-for",
            "Enter exercise",
            "Add Exercise",
            "Reset Workout",
            "exercise-item"
        ],
        "VQA": {
            "What is the text displayed in the page header?": "Weekly Workout Plan",
            "How are the daily workout routines visually organized?": "In a grid layout where each day is in a container styled with 'workout-card'.",
            "What element displays the day’s name in each workout card?": "An h3 element.",
            "What placeholder text is shown in the input field above each exercise list?": "Enter exercise",
            "What label is visible on the button next to the input field for adding a new exercise?": "Add Exercise",
            "What type of list is used to display the exercises for each day?": "An unordered list (ul) with list items (li).",
            "What CSS class is applied to every exercise displayed in the list?": "exercise-item",
            "What button is rendered at the bottom of the component?": "Reset Workout"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001639",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text task list into a Vue component that displays tasks and allows users to add and mark tasks as completed.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\" at the top of the component.\n- Display each task as an <li> element within a <ul> list, using the v-for directive to loop through a predefined array of task objects.\n- For each task in the list, display the task description in bold followed by its priority level enclosed in parentheses.\n- Incorporate a data property to track the current count of tasks displayed and update it dynamically as tasks are added or removed.\n- Include a text input element above the list with a placeholder \"New Task\" and an adjacent button labeled \"Add Task\" to allow users to append new tasks.\n- Render a button labeled \"Complete All\" beneath the task list that, when clicked, marks all tasks as completed by triggering a specific method.",
        "raw_output_metric": [
            "Task Manager",
            "<h2>",
            "</h2>",
            "v-for",
            "<ul>",
            "<li>",
            "<strong>",
            "New Task",
            "Add Task",
            "Complete All",
            "completeAll"
        ],
        "VQA": {
            "What header element is used to display the title?": "h2",
            "What is the title text shown at the top of the component?": "Task Manager",
            "What is the placeholder text in the new task input field?": "New Task",
            "What is the label on the button next to the new task input?": "Add Task",
            "How is each task displayed in the list?": "Each task is shown as a list item with the description in bold followed by the priority level in parentheses",
            "What is the label on the button beneath the task list?": "Complete All",
            "Is the task description styled in bold?": "Yes",
            "Are the task priority levels enclosed in parentheses?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001640",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text concert lineup into a Vue component that displays performers, their set times, and allows users to filter by stage.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Concert Lineup\".\n- Display each performer in a table row within a <table> element, with separate <td> elements for the performer name, set time, and stage.\n- Use v-for to iterate over a predefined array of concert data in the component’s data property.\n- Apply a CSS class named \"lineup-row\" to each <tr> element for consistent styling.\n- Include an input element with a placeholder \"Filter by stage\" placed above the table.\n- Render a button with the text \"Apply Filter\" that, when clicked, filters the concert data based on the input value.\n- Add a data property to track the total number of performers currently displayed.\n- If no performers match the filter criteria, display a message in a <p> element stating \"No performers available for this stage\".",
        "raw_output_metric": [
            "Concert Lineup",
            "lineup-row",
            "Filter by stage",
            "Apply Filter",
            "No performers available for this stage",
            "v-for"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Concert Lineup",
            "What is the text on the button used to apply the filter?": "Apply Filter",
            "What placeholder text is shown in the input field above the table?": "Filter by stage",
            "What information is shown in each table row?": "Performer name, set time, and stage",
            "What CSS class is used on each row of the table?": "lineup-row",
            "What message appears if no performers match the filter criteria?": "No performers available for this stage",
            "Where does the user input the stage filter?": "In the input field above the table",
            "What visible element displays the count of performers currently shown?": "A data property tracking the total number of performers is rendered on the page"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001641",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays the details of upcoming events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Utilize a <ul> element to list events, where each event is rendered as an <li> element.\n- For each event, display the event name in bold followed by its scheduled time in parentheses.\n- Use v-for to iterate over a predefined data array containing objects with \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to every <li> element for consistent styling.\n- Provide an <input> element with the placeholder \"Add event name\" placed above the events list.\n- Include a second <input> element with the placeholder \"Add event time\" next to the event name input.\n- Render a button with the text \"Add Event\" that, when clicked, appends a new event to the events array.\n- Display a <p> element that shows \"Total Events:\" followed by the count of events, derived from a data property.\n- Add a button labeled \"Clear Events\" that, when clicked, removes all events from the list.",
        "raw_output_metric": [
            "Event Schedule",
            "<h1>",
            "<ul>",
            "<li",
            "event-item",
            "v-for",
            "name",
            "time",
            "Add event name",
            "Add event time",
            "Add Event",
            "Total Events:",
            "<p>",
            "Clear Events"
        ],
        "VQA": {
            "What is the title displayed at the top of the page?": "Event Schedule",
            "What placeholder text is shown for the event name input?": "Add event name",
            "What placeholder text is shown for the event time input?": "Add event time",
            "What text is displayed on the button used to add a new event?": "Add Event",
            "What is the CSS class assigned to each event list item?": "event-item",
            "How is each event's details displayed in the list?": "The event name is in bold, followed by its scheduled time in parentheses",
            "What text is shown to indicate the total count of events?": "Total Events:"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001642",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of favorite movies with titles and release years into a Vue component that displays the list and allows users to add and remove movies.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Favorite Movies\".\n- Display each movie as an <li> element within a <ul>, where the movie title and release year are separated by a comma.\n- Utilize v-for to iterate over a predefined array of movie objects defined in the component's data.\n- Apply a CSS class named \"movie-item\" to each <li> element.\n- Include two <input> elements above the list: one with the placeholder \"Enter movie title\" and another with \"Enter release year\".\n- Render a button labeled \"Add Movie\" next to the inputs that, when clicked, appends a new movie object to the list.\n- Render a button labeled \"Clear Movies\" that, when clicked, removes all movies from the list.\n- Include a data property to hold the current count of movies displayed.\n- Provide a computed property that returns a message such as \"Total Movies: [current count]\".",
        "raw_output_metric": [
            "Favorite Movies",
            "v-for",
            "movie-item",
            "Enter movie title",
            "Enter release year",
            "Add Movie",
            "Clear Movies",
            "Total Movies:"
        ],
        "VQA": {
            "What is the text of the main header on the page?": "Favorite Movies",
            "How are the movies visually arranged in the component?": "Displayed as list items in an unordered list with each item showing the movie title and release year separated by a comma",
            "What placeholder text appears in the first input field?": "Enter movie title",
            "What placeholder text is shown in the second input field?": "Enter release year",
            "What label is displayed on the button used to add a new movie?": "Add Movie",
            "What label is visible on the button that clears the movie list?": "Clear Movies",
            "What computed text indicates the total number of movies displayed?": "Total Movies: [current count]",
            "Which CSS class is applied to each movie item in the list?": "movie-item"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001643",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nTransform a plain text list of employees into a Vue component that displays a directory table with work hours and allows users to add and remove employees.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Employee Directory\" at the top of the component.\n- Create a table with headers \"Name\", \"Position\", and \"Hours Worked\", and use a <tr> for the column titles.\n- Use v-for to iterate over a predefined data array to populate table rows, where each row contains an employee's name, position, and hours worked.\n- Apply a CSS class named \"employee-row\" to each <tr> element in the table for styling.\n- Place two <input> elements above the table: one with a placeholder \"Employee Name\" and another with \"Position and Hours\" for entering new employee details.\n- Render an \"Add Employee\" button next to the inputs that appends a new employee to the list when clicked.\n- Include a \"Clear Directory\" button below the table that, when activated, removes all employee entries.\n- Maintain a data property in the Vue component to track and display the current count of employees in the directory.",
        "raw_output_metric": [
            "Employee Directory",
            "<h1>",
            "<table>",
            "<tr>",
            "Name",
            "Position",
            "Hours Worked",
            "employee-row",
            "<input",
            "Employee Name",
            "Position and Hours",
            "Add Employee",
            "Clear Directory",
            "v-for",
            "data"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Employee Directory",
            "What column headers are shown in the directory table?": "Name, Position, Hours Worked",
            "What CSS class is applied to each row in the table?": "employee-row",
            "What placeholder texts are visible in the input fields above the table?": "Employee Name and Position and Hours",
            "What text is shown on the button used to add a new employee?": "Add Employee",
            "What text is displayed on the button located below the table?": "Clear Directory",
            "How is the current count of employees indicated in the component?": "It is displayed using a data property"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001644",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text library catalog into a Vue component that displays a list of books and allows for managing the catalog entries.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Library Catalog\".\n- Use v-for to iterate over a predefined data array containing book objects with title and author properties.\n- Display each book as a row in a <table> with two columns: one for the title and one for the author.\n- Apply a CSS class \"book-title\" to the table cell that displays the book title and \"book-author\" to the cell for the author.\n- Render an input field above the table with placeholder text \"Enter book title\" for adding a new book.\n- Render a second input field beside the first with placeholder text \"Enter author name\" to capture the author's name.\n- Include an \"Add Book\" button next to the input fields that appends the new book to the data array when clicked.\n- Render a \"Remove Last Book\" button below the table that deletes the most recent book entry from the list when clicked.\n- Display a <p> element below the table that shows the current count of books, using a dedicated data property to track this number.",
        "raw_output_metric": [
            "Library Catalog",
            "v-for",
            "book-title",
            "book-author",
            "Enter book title",
            "Enter author name",
            "Add Book",
            "Remove Last Book"
        ],
        "VQA": {
            "What is the header text displayed at the top of the page?": "Library Catalog",
            "What is the placeholder text of the first input field above the table?": "Enter book title",
            "What is the placeholder text of the second input field beside the first?": "Enter author name",
            "How many columns does the table displaying the books have?": "Two",
            "What CSS classes are applied to the cells displaying the book title and author?": "book-title and book-author",
            "What are the labels on the buttons shown on the page?": "Add Book and Remove Last Book",
            "Where is the current count of books displayed?": "In a paragraph element below the table"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001645",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text weekly workout schedule into a Vue component that displays days, exercises, and interactive controls.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Weekly Workout Schedule\" at the top.\n- Create a <ul> element where each <li> element represents a day of the week, rendered using a v-for loop.\n- Display each day name followed by a colon and a comma-separated list of exercises within each <li> element.\n- Apply a CSS class named \"day-info\" to every <li> element for consistent styling.\n- Place an <input> element with a placeholder \"Add exercise\" above the list to allow addition of new exercises.\n- Render an \"Add Exercise\" button next to the input field that appends the entered exercise to a specified day.\n- Include a data property to track the total number of exercises scheduled across the week.\n- Provide a \"Show Active Days\" button that, when clicked, filters and displays only days with at least one scheduled exercise.\n- Initialize the component with a predefined data array that maps each day of the week to its list of exercises.\n- Include a \"Reset Schedule\" button that clears all exercises from every day in the schedule.",
        "raw_output_metric": [
            "Weekly Workout Schedule",
            "<h2>",
            "<ul>",
            "<li>",
            "v-for",
            "day-info",
            "placeholder=\"Add exercise\"",
            "Add Exercise",
            "Show Active Days",
            "Reset Schedule",
            "export default",
            "data()"
        ],
        "VQA": {
            "What is the title displayed at the top of the component?": "Weekly Workout Schedule",
            "How are the days of the week listed?": "As bullet points in a list",
            "What CSS class is applied to each day entry in the list?": "day-info",
            "What placeholder text appears in the input field above the list?": "Add exercise",
            "What button is shown next to the input field?": "Add Exercise",
            "How is the exercise information displayed for each day?": "Day name followed by a colon and a comma-separated list of exercises",
            "What button filters the list to show only days with at least one exercise?": "Show Active Days",
            "What button clears all exercises from the schedule?": "Reset Schedule",
            "How many days (initially) are expected to be shown in the list?": "Seven",
            "What overall count is tracked in the component?": "The total number of exercises scheduled across the week"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001646",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of daily workout routines into a Vue component that displays each exercise with its name and duration.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Schedule\".\n- Display each workout routine as a <div> element inside a parent <section> container.\n- Each <div> must include the exercise name in a <p> element and the duration in another <p> element, with the duration enclosed in parentheses.\n- Use v-for to iterate over a predefined data array containing objects for exercise name and duration.\n- Apply a CSS class named \"exercise\" to each workout routine's <div> for styling purposes.\n- Render a button with the text \"Start Workout\" that, when clicked, toggles a Boolean data property indicating if the workout is active.\n- Include an <input> element above the list with a placeholder text \"Enter new exercise\" for adding new routines.\n- Provide an \"Add Exercise\" button next to the input field to append new exercise entries to the list.\n- Include a data property in the Vue component for tracking the total workout duration, updated dynamically when new exercises are added.",
        "raw_output_metric": [
            "Workout Schedule",
            "v-for",
            "exercise",
            "Start Workout",
            "Enter new exercise",
            "Add Exercise",
            "totalWorkoutDuration"
        ],
        "VQA": {
            "What is the header text displayed at the top of the component?": "Workout Schedule",
            "What placeholder text is shown in the input field above the exercise list?": "Enter new exercise",
            "What is the text on the button that toggles the workout state?": "Start Workout",
            "What is the label on the button used to add a new exercise?": "Add Exercise",
            "What two pieces of information are displayed for each workout routine?": "Exercise name and duration (in parentheses)",
            "What container element visually wraps all the workout routines?": "A section element",
            "Is a CSS class named 'exercise' visibly applied to each routine's container?": "Yes"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001647",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of movie recommendations into a Vue component that displays details for each movie.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Movie Picks\".\n- Display each movie as an <li> element within a <ul>, including the movie title, genre, and rating in parentheses.\n- Use a v-for directive to iterate over a predefined data array containing movie objects with properties for title, genre, rating, and description.\n- Apply a CSS class named \"movie-item\" to each <li> element to style the individual movies.\n- Render a button labeled \"Remove Movie\" next to each movie item that, when clicked, deletes that movie from the list.\n- Place an <input> element with a placeholder text \"Enter movie title\" above the list for adding new movies.\n- Provide an \"Add Movie\" button adjacent to the input field that appends a new movie to the array when clicked.\n- Include a data property that tracks the total number of movies currently displayed.\n- At the bottom of the component, display a <p> element containing the text \"Total Movies: [count]\", with [count] dynamically reflecting the movie count.",
        "raw_output_metric": [
            "Movie Picks",
            "movie-item",
            "v-for",
            "Remove Movie",
            "Enter movie title",
            "Add Movie",
            "Total Movies:"
        ],
        "VQA": {
            "What is the main title displayed at the top of the page?": "Movie Picks",
            "What placeholder text does the input field display?": "Enter movie title",
            "What label is shown on the button used to add a new movie?": "Add Movie",
            "How are each movie's details presented in the list?": "Movie title, genre, and rating in parentheses",
            "Which CSS class is applied to each movie item?": "movie-item",
            "What text is visible on the button provided next to each movie?": "Remove Movie",
            "What text does the footer p element display regarding the movie count?": "Total Movies: [count]"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001648",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text workout planner into a Vue component that displays a list of workout sessions and their details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Planner\".\n- Display each workout session as an <li> element within a <ul>, showing the session name followed by its duration in minutes (e.g., \"Cardio: 30 mins\").\n- Utilize v-for to loop over a predefined data array that includes properties for workout name and duration.\n- Apply a CSS class named \"session\" to each <li> element to format the workout sessions.\n- Render a button labeled \"Reset Schedule\" that, when clicked, clears the list of workout sessions.\n- Insert an <input> element above the list with a placeholder text \"Add workout session\" that accepts the session name.\n- Include another <input> element for entering the session duration next to the workout input.\n- Render an \"Add Session\" button adjacent to the inputs that adds the new workout session to the list.\n- Include a data property in the Vue component that tracks the total number of workout sessions currently displayed.",
        "raw_output_metric": [
            "Workout Planner",
            "v-for",
            "session",
            "Reset Schedule",
            "Add workout session",
            "Add Session"
        ],
        "VQA": {
            "What is the text displayed in the header?": "Workout Planner",
            "How is each workout session presented in the list?": "Each session is shown as 'Session Name: Duration mins' (for example, 'Cardio: 30 mins').",
            "Which CSS class is applied to every workout session listed?": "session",
            "What text is shown on the button that clears all workout sessions?": "Reset Schedule",
            "What placeholder text appears in the workout session input field?": "Add workout session",
            "What label is visible on the button that adds a new session?": "Add Session",
            "Where is the list of workout sessions located on the page?": "Below the input fields within an unordered list"
        }
    },
    {
        "task_name": "Text to Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "task_id": "001649",
        "input_type": "Text",
        "output_type": "Vue",
        "rendering": true,
        "query": "Please output Vue:\n\nTask:\nConvert a plain text list of daily tasks with start times into a Vue component that displays each task along with its scheduled time.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Agenda\".\n- Display each task in a <div> element with the CSS class \"task-item\".\n- Each task should be presented inside a <p> element that shows the task name followed by its start time in the format \"HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing the task details.\n- Place a text input element above the task list with a placeholder \"Enter task description\" for adding new tasks.\n- Provide a second text input element next to the first with a placeholder \"Enter start time (HH:MM)\" for specifying the task time.\n- Include an \"Add Task\" button that appends the new task and time to the list when clicked.\n- Render a \"Mark as Done\" button next to each task that, when clicked, toggles a completed status for that task.\n- Include a \"Clear Completed\" button at the bottom that removes all tasks marked as completed.\n- Include a data property in the Vue component for tracking the current count of tasks in the list.",
        "raw_output_metric": [
            "Daily Agenda",
            "task-item",
            "v-for",
            "Enter task description",
            "Enter start time (HH:MM)",
            "Add Task",
            "Mark as Done",
            "Clear Completed"
        ],
        "VQA": {
            "What is the title displayed at the top of the agenda?": "Daily Agenda",
            "How many text input fields are shown above the task list?": "Two",
            "What are the placeholder texts of the two input fields?": "Enter task description and Enter start time (HH:MM)",
            "How is each task visually presented in the task list?": "Inside a container with the task-item class and a paragraph element showing task name and time",
            "In what format is the time displayed next to each task?": "HH:MM",
            "What button is placed next to each task for marking it as completed?": "Mark as Done",
            "Which button is located at the bottom for removing completed tasks?": "Clear Completed",
            "What additional information related to tasks is tracked in the component?": "The current count of tasks"
        }
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001700",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional movie festival schedule based on the given input text description of festival movie events.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <duration> element formatted as \"HH:MM\" representing the movie's running time.\n- Every <movie> element must include a <screening_date> element with the date in the \"YYYY-MM-DD\" format.\n- Include a <venue> element under each <movie> element, which specifies the screening location as text.\n- Ensure proper nesting and closing of all XML elements.",
        "raw_output_metric": [
            "festival",
            "festival[movie]",
            "festival[movie][title]",
            "festival[movie][director]",
            "festival[movie][duration]",
            "festival[movie][screening_date]",
            "festival[movie][venue]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001701",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music album library based on a text description of various albums.\n\nFeature Requirements:\n- The root element must be <library>.\n- The <library> element must contain at least three <album> elements.\n- Each <album> element should include a <name> element with the album's title in text.\n- Each <album> element must have an <artist> element with the artist’s name in text.\n- Every <album> element must include a <releaseYear> element containing a four-digit number representing the release year.\n- Each <album> element should contain a <tracks> element that wraps multiple <track> elements.\n- Every <track> element must include a <title> element with the track’s name and a <duration> element formatted as minutes and seconds (mm:ss).\n- Ensure that the XML structure is properly nested and all tags are correctly closed.\n- Numeric values and durations must strictly follow the specified formats.",
        "raw_output_metric": [
            "library",
            "library[album]",
            "library[album][name]",
            "library[album][artist]",
            "library[album][releaseYear]",
            "library[album][tracks]",
            "library[album][tracks][track]",
            "library[album][tracks][track][title]",
            "library[album][tracks][track][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001702",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie library catalog based on an input description of movies.\n\nFeature Requirements:\n- Include a root element named <movies>.\n- Within the <movies> element, have at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with a four-digit number representing the release year.\n- Each <movie> element must include a <rating> element with a numerical value between 0.0 and 10.0, formatted to one decimal place.\n- Each <movie> element must include a <genre> element specifying the movie's genre in text.\n- Ensure that the <movies> element is properly closed after all <movie> elements.",
        "raw_output_metric": [
            "movies",
            "movies[movie]",
            "movies[movie][title]",
            "movies[movie][director]",
            "movies[movie][year]",
            "movies[movie][rating]",
            "movies[movie][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001703",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local culinary recipe directory based on a provided text description of recipes.\n\nFeature Requirements:\n- The XML document must have a root element named <recipes>.\n- Within the <recipes> root, include at least 3 <recipe> elements.\n- Each <recipe> element should contain a <name> element with the recipe's name in text.\n- Each <recipe> element must include a <chef> element with the chef's name in text.\n- Each <recipe> element should have a <cookingTime> element with a three-digit numerical value representing the time in minutes.\n- Every <recipe> element must contain a <difficulty> element with one of the text values: \"Easy\", \"Medium\", or \"Hard\".\n- Each <recipe> element should include an <ingredients> element containing at least 2 <ingredient> elements, each holding the ingredient name in text.\n- The <ingredients> element must be directly nested within its respective <recipe> element.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
        "raw_output_metric": [
            "recipes",
            "recipes[recipe]",
            "recipes[recipe][name]",
            "recipes[recipe][chef]",
            "recipes[recipe][cookingTime]",
            "recipes[recipe][difficulty]",
            "recipes[recipe][ingredients]",
            "recipes[recipe][ingredients][ingredient]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001704",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital film archive based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <FilmArchive>.\n- Within <FilmArchive>, have at least 2 <Film> elements.\n- Each <Film> element should contain a <Title> element with the film's title in text.\n- Each <Film> element should include a <Director> element with the director's name in text.\n- Each <Film> element must have a <ReleaseYear> element with four numeric digits representing the year.\n- Each <Film> element should include a <Duration> element with the film's running time expressed in minutes as an integer.\n- Each <Film> element must contain a <Rating> element with a numerical value formatted to one decimal place.",
        "raw_output_metric": [
            "FilmArchive",
            "FilmArchive[Film]",
            "FilmArchive[Film][Title]",
            "FilmArchive[Film][Director]",
            "FilmArchive[Film][ReleaseYear]",
            "FilmArchive[Film][Duration]",
            "FilmArchive[Film][Rating]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001705",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a detailed restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must have an attribute \"id\" with a unique identifier.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include an <ingredients> element listing at least 2 ingredients, separated by commas.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <category> element that specifies one of the following: \"Appetizer\", \"Main Course\", or \"Dessert\".\n- Each <dish> element must contain a <calories> element with a numeric value expressing the calorie count.\n- Ensure the <menu> element is properly closed after all <dish> elements.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][@id]",
            "menu[dish][name]",
            "menu[dish][ingredients]",
            "menu[dish][price]",
            "menu[dish][category]",
            "menu[dish][calories]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001706",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary based on the provided description of various destinations.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, include at least 3 <destination> elements.\n- Each <destination> element should contain a <name> element with the destination's name in plain text.\n- Each <destination> element must include an <arrival> element with the arrival date formatted as YYYY-MM-DD.\n- Each <destination> element should have a <duration> element representing the number of days as an integer.\n- Ensure each <destination> element includes an <activities> element that contains one or more <activity> sub-elements, each with the activity name in plain text.\n- At least one <destination> element should include an optional <notes> element with additional comments in text.\n- The <itinerary> element must be properly closed after listing all <destination> elements.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[destination]",
            "itinerary[destination][name]",
            "itinerary[destination][arrival]",
            "itinerary[destination][duration]",
            "itinerary[destination][activities]",
            "itinerary[destination][activities][activity]",
            "itinerary[destination][notes]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001707",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music festival schedule based on the given input text description of stages and performances.\n\nFeature Requirements:\n- The root element must be named <festival>.\n- Within the <festival>, include at least 3 <stage> elements.\n- Each <stage> element must have a <name> element containing the stage's name as text.\n- Each <stage> element should contain at least 2 <performance> elements.\n- Each <performance> element must include a <band> element with the band's name as text.\n- Each <performance> element must include a <time> element with a performance start time in 24-hour notation (e.g., 21:15).\n- Each <performance> element should include a <duration> element specifying the performance length in minutes as an integer.\n- Each <performance> element must include a <genre> element with the musical genre specified in text.\n- All XML elements must be correctly opened and closed in a proper hierarchical structure.\n- Elements containing textual content should have unique values to reflect different stages and performances.",
        "raw_output_metric": [
            "festival",
            "festival[stage]",
            "festival[stage][name]",
            "festival[stage][performance]",
            "festival[stage][performance][band]",
            "festival[stage][performance][time]",
            "festival[stage][performance][duration]",
            "festival[stage][performance][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001708",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a museum art collection based on the input text description of various artworks.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <artwork> elements.\n- Each <artwork> element must have a <title> element containing the artwork's title in text.\n- Each <artwork> element must have an <artist> element with the artist's name in text.\n- Each <artwork> element should have a <yearCreated> element with exactly four numeric digits representing the creation year.\n- Each <artwork> element should contain a <medium> element that specifies the material or technique used, in text.\n- Each <artwork> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <artwork> element should include a <location> element that indicates the room or section where the artwork is displayed.\n- Ensure that all elements are properly opened and closed within the XML structure.",
        "raw_output_metric": [
            "collection",
            "collection[artwork]",
            "collection[artwork][title]",
            "collection[artwork][artist]",
            "collection[artwork][yearCreated]",
            "collection[artwork][medium]",
            "collection[artwork][price]",
            "collection[artwork][location]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001709",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a company's team directory based on the given input text description of employees.\n\nFeature Requirements:\n- Include a root element named <team>.\n- Within the <team>, include at least 3 <employee> elements.\n- Each <employee> element must contain a <name> element with the employee's full name in text.\n- Each <employee> element must include an <employeeID> element formatted as a 5-digit numeric string.\n- Each <employee> element must have a <department> element with the department name in text.\n- Include a <position> element in each <employee> with the job title in text.\n- Each <employee> element must include a <joiningDate> element with a date in YYYY-MM-DD format.\n- Include a <salary> element in each <employee> with a numerical value formatted to two decimal places.\n- Ensure the <team> element is properly closed after all <employee> elements are added.",
        "raw_output_metric": [
            "team",
            "team[employee]",
            "team[employee][name]",
            "team[employee][employeeID]",
            "team[employee][department]",
            "team[employee][position]",
            "team[employee][joiningDate]",
            "team[employee][salary]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001710",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a festive recipe collection based on the given text description of seasonal dishes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <chef> element with the chef's name in text.\n- Each <dish> element must have a <prepTime> element with a positive integer representing preparation time in minutes.\n- Each <dish> element should include an <ingredients> element with a comma-separated list of ingredients.\n- Each <dish> element should contain a <cuisine> element with the cuisine type in text.\n- Ensure that the XML is properly structured with every opening tag having a corresponding closing tag",
        "raw_output_metric": [
            "recipes",
            "recipes[dish][name]",
            "recipes[dish][chef]",
            "recipes[dish][prepTime]",
            "recipes[dish][ingredients]",
            "recipes[dish][cuisine]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001711",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie repository based on a description of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, include at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in plain text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element should include a <releaseYear> element containing exactly four numeric characters representing the year of release.\n- Each <movie> element must have a <duration> element with an integer value denoting the movie's length in minutes.\n- Each <movie> element should also contain a <genre> element with the genre name in text.\n- Ensure that the <archive> element is properly closed after all <movie> elements.",
        "raw_output_metric": [
            "archive",
            "archive[movie]",
            "archive[movie][title]",
            "archive[movie][director]",
            "archive[movie][releaseYear]",
            "archive[movie][duration]",
            "archive[movie][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001712",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a car dealership inventory based on the given input text description of various cars.\n\nFeature Requirements:\n- Include a root element named <inventory>.\n- Within the <inventory>, create at least 3 <car> elements.\n- Each <car> element should contain a <make> element with the manufacturer's name in text.\n- Each <car> element must include a <model> element with the model name in text.\n- Each <car> element should have a <year> element with exactly four numeric characters representing the manufacturing year.\n- Each <car> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <car> element should also include a <color> element with the color description in text.\n- Ensure that all elements are properly nested and closed within the XML structure.",
        "raw_output_metric": [
            "inventory",
            "inventory[car]",
            "inventory[car][make]",
            "inventory[car][model]",
            "inventory[car][year]",
            "inventory[car][price]",
            "inventory[car][color]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001713",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on a text description of film showtimes and details.\n\nFeature Requirements:\n- The root element must be named <schedule>.\n- Include at least 3 <movie> elements as children of the <schedule>.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the movie's length in minutes.\n- Each <movie> element should have a <date> element with the release or screening date formatted as YYYY-MM-DD.\n- Every <movie> element must include a <rating> element with a numeric value formatted to one decimal place.\n- Ensure that the <schedule> root element is properly closed after all <movie> elements.",
        "raw_output_metric": [
            "schedule",
            "schedule[movie]",
            "schedule[movie][title]",
            "schedule[movie][director]",
            "schedule[movie][duration]",
            "schedule[movie][date]",
            "schedule[movie][rating]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001714",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a summer music festival schedule with detailed information about each performance.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element must contain a <band> element with the name of the performing group.\n- Each <performance> element must include a <time> element formatted as HH:MM to represent the start time.\n- Each <performance> element should have a <stage> element indicating the stage name where the performance occurs.\n- Each <performance> element must contain a <duration> element with a numeric value representing the performance length in minutes.\n- Each <performance> element should include a <genre> element with the music genre of the performance.\n- Ensure the <festival> element is properly closed after listing all <performance> elements.",
        "raw_output_metric": [
            "festival",
            "festival[performance]",
            "festival[performance][band]",
            "festival[performance][time]",
            "festival[performance][stage]",
            "festival[performance][duration]",
            "festival[performance][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001715",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional restaurant guide based on a provided text description of various dining establishments.\n\nFeature Requirements:\n- Include a root element named <restaurants>.\n- Within the <restaurants>, have at least 3 <restaurant> elements.\n- Each <restaurant> element must contain a <name> element with the restaurant's name in text.\n- Each <restaurant> element should include a <cuisine> element specifying the type of food served.\n- Each <restaurant> element must have a <location> element that encloses two child elements: <city> and <state>, both containing text.\n- Each <restaurant> element must include a <rating> element with a numerical value formatted to one decimal place.\n- Each <restaurant> element should have a <priceRange> element containing a string of dollar signs (e.g., $, $$, $$$) indicating the price level.\n- The <restaurants> element should be properly closed after all <restaurant> elements.",
        "raw_output_metric": [
            "restaurants",
            "restaurants[restaurant]",
            "restaurants[restaurant][name]",
            "restaurants[restaurant][cuisine]",
            "restaurants[restaurant][location]",
            "restaurants[restaurant][location][city]",
            "restaurants[restaurant][location][state]",
            "restaurants[restaurant][rating]",
            "restaurants[restaurant][priceRange]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001716",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on the given description of songs.\n\nFeature Requirements:\n- Include a root element named <playlist>.\n- Within <playlist>, create at least three <song> elements.\n- Each <song> element must have a <title> element containing the song title in plain text.\n- Each <song> element must contain an <artist> element with the artist's full name.\n- Each <song> element should include a <duration> element displaying the song length in the mm:ss format.\n- Each <song> element must include a <genre> element reflecting the music genre in text.\n- Optionally, each <song> element may include a <releaseYear> element with a four-digit numerical year.\n- Ensure that the XML structure is well-formed with all elements properly opened and closed.\n- Do not include any extra elements or attributes beyond those specified.",
        "raw_output_metric": [
            "playlist",
            "playlist[song]",
            "playlist[song][title]",
            "playlist[song][artist]",
            "playlist[song][duration]",
            "playlist[song][genre]",
            "playlist[song][releaseYear]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001717",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of an animal shelter listing available pets for adoption based on the provided text description.\n\nFeature Requirements:\n- The root element must be <shelter>.\n- Within the <shelter>, include at least 3 <pet> elements.\n- Each <pet> element must have a <name> element containing the pet’s name in text.\n- Each <pet> element must include a <species> element indicating the type of animal (e.g., dog, cat, rabbit) in text.\n- Each <pet> element should contain a <breed> element specifying the pet's breed in text.\n- Each <pet> element must have an <age> element with an integer value representing the pet's age in years.\n- Each <pet> element must include an <adoptionFee> element with a numerical value formatted to two decimal places.\n- The XML structure must include proper opening and closing tags for every element.",
        "raw_output_metric": [
            "shelter",
            "shelter[pet]",
            "shelter[pet][name]",
            "shelter[pet][species]",
            "shelter[pet][breed]",
            "shelter[pet][age]",
            "shelter[pet][adoptionFee]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001718",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a brief text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish's title.\n- Each <dish> element must include a <description> element with a brief textual description.\n- Each <dish> element must have a <price> element displaying a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element that specifies if the dish is an appetizer, main course, or dessert.\n- Include a <lastUpdated> element within the <menu> that contains a date in YYYY-MM-DD format.\n- Ensure all XML elements are properly opened and closed.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][description]",
            "menu[dish][price]",
            "menu[dish][category]",
            "menu[lastUpdated]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001719",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie archive based on the provided text synopsis of films.\n\nFeature Requirements:\n- Include a root element named <archive>.\n- Within the <archive>, have at least 3 <film> elements.\n- Each <film> element should contain a <name> element with the film's title in text.\n- Each <film> element should include a <director> element with the director's full name in text.\n- Each <film> element must have a <year> element with a four-digit numerical value representing the release year.\n- Ensure each <film> element includes a <duration> element displaying the film's length in minutes as an integer.\n- Each <film> element should feature a <rating> element with a numerical value formatted to one decimal place.\n- The <archive> element should be properly closed after all <film> elements.",
        "raw_output_metric": [
            "archive",
            "archive[film]",
            "archive[film][name]",
            "archive[film][director]",
            "archive[film][year]",
            "archive[film][duration]",
            "archive[film][rating]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001720",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a zoo animal exhibit guide based on the given input text description of animals.\n\nFeature Requirements:\n- Include a root element named <zoo>.\n- Within the <zoo>, have exactly 3 <exhibit> elements.\n- Each <exhibit> element should include an <animalName> element containing the animal's name in text.\n- Each <exhibit> element must include a <species> element with the species name in text.\n- Each <exhibit> element should have an <age> element with the animal's age as a whole number.\n- Ensure each <exhibit> element includes a <dateAcquired> element formatted as YYYY-MM-DD.\n- Each <exhibit> element must include a <habitat> element with text describing the animal's living environment.\n- The <zoo> element must be properly closed after all the <exhibit> elements.",
        "raw_output_metric": [
            "zoo",
            "zoo[exhibit]",
            "zoo[exhibit][animalName]",
            "zoo[exhibit][species]",
            "zoo[exhibit][age]",
            "zoo[exhibit][dateAcquired]",
            "zoo[exhibit][habitat]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001721",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital museum tour guide for an art exhibition.\n\nFeature Requirements:\n- The XML must have a root element named <tourGuide> with an attribute \"city\" set to a textual value.\n- Within the <tourGuide>, include at least 3 <exhibit> elements.\n- Each <exhibit> element must have a <title> element containing the name of the exhibit.\n- Each <exhibit> element must include a <location> element with an attribute \"roomNumber\" which is a numeric value.\n- Each <exhibit> element should contain a <description> element with a brief textual description of the exhibit.\n- Each <exhibit> element must include a <yearCreated> element with exactly four numeric characters representing the creation year.\n- Each <exhibit> element should include a <ticketPrice> element with a numerical value formatted to two decimal places.",
        "raw_output_metric": [
            "tourGuide[@city]",
            "tourGuide[exhibit]",
            "tourGuide[exhibit][title]",
            "tourGuide[exhibit][location][@roomNumber]",
            "tourGuide[exhibit][description]",
            "tourGuide[exhibit][yearCreated]",
            "tourGuide[exhibit][ticketPrice]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001722",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a recipe collection based on the provided text description of various recipes.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the root, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include an <ingredients> element that contains one or more <ingredient> sub-elements, each with a name attribute and text content representing the ingredient.\n- Each <recipe> element must have a <cookTime> element with the cooking duration expressed as a number followed by \"min\" (e.g., 30min).\n- Each <recipe> element should include a <difficulty> element with a value of \"easy\", \"moderate\", or \"hard\".\n- Every <recipe> element must include a <servings> element with a numerical value indicating the number of servings.",
        "raw_output_metric": [
            "recipes",
            "recipes[recipe]",
            "recipes[recipe][name]",
            "recipes[recipe][ingredients]",
            "recipes[recipe][ingredients][ingredient(@name)]",
            "recipes[recipe][cookTime]",
            "recipes[recipe][difficulty]",
            "recipes[recipe][servings]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001723",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on the given input text description.\n\nFeature Requirements:\n- The XML must have a root element named <festival>.\n- Within the <festival>, there should be at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element that provides the movie's title as text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <screening> element which itself contains a <date> element (formatted as YYYY-MM-DD) and a <time> element (in 24-hour format, HH:MM).\n- Each <movie> element should contain a <duration> element with an integer representing the movie's duration in minutes.\n- Ensure that the <festival> element is properly closed after listing all <movie> elements.",
        "raw_output_metric": [
            "festival",
            "festival[movie]",
            "festival[movie][title]",
            "festival[movie][director]",
            "festival[movie][screening]",
            "festival[movie][screening][date]",
            "festival[movie][screening][time]",
            "festival[movie][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001724",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary for a vacation trip based on the provided text description.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <day> elements, each representing a day of the trip.\n- Each <day> element must contain a <date> element with a date formatted as YYYY-MM-DD.\n- Each <day> element should include a <destination> element with the name of the travel location.\n- Each <day> element must have an <activity> element describing the planned main activity for the day.\n- Every <day> element should include a <budget> element with a numerical value formatted to two decimal places.\n- Each <day> element must also include a <notes> element containing additional text details about that day.\n- Ensure that all elements are properly nested and that the XML is well-formed.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[day]",
            "itinerary[day][date]",
            "itinerary[day][destination]",
            "itinerary[day][activity]",
            "itinerary[day][budget]",
            "itinerary[day][notes]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001725",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music library based on the given input text description of albums and their tracks.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within <library>, include at least 3 <album> elements.\n- Each <album> element should contain a <title> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name in text.\n- Each <album> element should include a <releaseYear> element with four numeric characters representing the publication year.\n- Each <album> element must include at least 2 <track> elements.\n- Every <track> element should contain a <name> element with the track's name in text.\n- Every <track> element must include a <duration> element displaying the track length in mm:ss format.\n- Ensure all elements are properly nested and the <library> element is correctly closed.",
        "raw_output_metric": [
            "library",
            "library[album]",
            "library[album][title]",
            "library[album][artist]",
            "library[album][releaseYear]",
            "library[album][track]",
            "library[album][track][name]",
            "library[album][track][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001726",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music playlist based on a given list of songs.\n\nFeature Requirements:\n- Create a root element named <playlist> that contains all song entries.\n- Within the <playlist>, include at least 3 <song> elements.\n- Each <song> element must include a <title> element containing the song's title in plain text.\n- Each <song> element should include an <artist> element containing the artist's full name in plain text.\n- Each <song> element must have a <duration> element representing the song's length in the mm:ss format.\n- Each <song> element must include a <release> element with a four-digit year indicating the song's release year.\n- Each <song> element should also contain a <genre> element with the genre name in plain text (e.g., Pop, Rock, Jazz).\n- Ensure that the XML structure is well-formed with all elements properly closed.\n- Do not include any attributes; all information must be within the element text content.\n- The order of the elements inside each <song> should be: <title>, <artist>, <duration>, <release>, then <genre>.",
        "raw_output_metric": [
            "playlist",
            "playlist[song]",
            "playlist[song][title]",
            "playlist[song][artist]",
            "playlist[song][duration]",
            "playlist[song][release]",
            "playlist[song][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001727",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie schedule based on the provided text description of films.\n\nFeature Requirements:\n- Include a root element named <movieschedule>.\n- Within the <movieschedule>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with exactly four numeric characters representing the release year.\n- Each <movie> element should include a <rating> element with a numerical value formatted to two decimal places.\n- Each <movie> element should also contain a <genre> element with the movie genre in text.\n- The XML should be properly structured and closed with matching opening and closing tags.",
        "raw_output_metric": [
            "movieschedule",
            "movieschedule[movie]",
            "movieschedule[movie][title]",
            "movieschedule[movie][director]",
            "movieschedule[movie][year]",
            "movieschedule[movie][rating]",
            "movieschedule[movie][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001728",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a film festival schedule based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <filmFestival>.\n- Within the <filmFestival>, have at least 3 <movie> elements.\n- Each <movie> element should contain a <name> element with the movie title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <releaseYear> element with four numeric characters representing the production year.\n- Each <movie> element should include a <screeningTime> element showing the time in 24-hour format (e.g., \"20:15\").\n- Each <movie> element must have a <duration> element indicating the film's running time in minutes as an integer.\n- Each <movie> element should also include a <genre> element with the movie genre in text.\n- Ensure the <filmFestival> element is properly closed after listing all <movie> elements.",
        "raw_output_metric": [
            "filmFestival",
            "filmFestival[movie]",
            "filmFestival[movie][name]",
            "filmFestival[movie][director]",
            "filmFestival[movie][releaseYear]",
            "filmFestival[movie][screeningTime]",
            "filmFestival[movie][duration]",
            "filmFestival[movie][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001729",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on a textual description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that wraps the entire structure.\n- Within the <menu>, include at least 3 distinct <dish> elements representing individual menu items.\n- Each <dish> element must have a <name> element containing the dish’s name as plain text.\n- Each <dish> element must include a <description> element detailing the ingredients and preparation in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must have a <category> element specifying the dish type (such as \"appetizer\", \"entree\", or \"dessert\") in text.\n- Each <dish> element should include an attribute named \"spicy\" with a value of either \"true\" or \"false\" to indicate its spiciness level.\n- Ensure that all opened elements have appropriate closing tags, properly nesting the XML structure.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][@spicy]",
            "menu[dish][name]",
            "menu[dish][description]",
            "menu[dish][price]",
            "menu[dish][category]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001730",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element should include a <category> element specifying the dish type (e.g., appetizer, main course, dessert).\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <calories> element with a numeric value representing the calorie count.\n- Each <dish> element should also have a <description> element listing its ingredients, separated by commas.\n- The <menu> root element must be properly closed after all <dish> elements.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][category]",
            "menu[dish][price]",
            "menu[dish][calories]",
            "menu[dish][description]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001731",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple movie collection based on given text descriptions of films.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element displaying the film's title.\n- Each <movie> element should include a <director> element showing the director's name.\n- Each <movie> element must also include a <year> element with exactly four numeric characters representing the release year.\n- Every <movie> element should have a <rating> element containing a numerical value formatted with one decimal place.\n- Each <movie> element must include a <duration> element indicating the runtime in minutes as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
        "raw_output_metric": [
            "collection",
            "collection[movie]",
            "collection[movie][title]",
            "collection[movie][director]",
            "collection[movie][year]",
            "collection[movie][rating]",
            "collection[movie][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001732",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on a given text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 3 <performance> elements.\n- Each <performance> element should contain a <band> element with the band's name in text.\n- Each <performance> element must include a <stage> element with the stage location in text.\n- Each <performance> element should have a <time> element with the performance start time in HH:MM 24-hour format.\n- Each <performance> element must include a <date> element with the performance date in YYYY-MM-DD format.\n- Each <performance> element should provide a <ticketPrice> element with a numerical value formatted to two decimal places.\n- Optionally, include a <genre> element inside each <performance> that specifies the music genre in text.\n- Ensure all XML elements are properly opened and closed without any extra attributes.",
        "raw_output_metric": [
            "festival",
            "festival[performance]",
            "festival[performance][band]",
            "festival[performance][stage]",
            "festival[performance][time]",
            "festival[performance][date]",
            "festival[performance][ticketPrice]",
            "festival[performance][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001733",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a unique music album collection based on an input text description of various music albums.\n\nFeature Requirements:\n- Include a root element named <library>.\n- Within the <library>, have at least 3 <album> elements.\n- Each <album> element must contain a <title> element with the album's title in text.\n- Each <album> element should include an <artist> element with the performing artist's name in text.\n- Each <album> element must have a <release_year> element with exactly four numeric characters representing the release year.\n- Each <album> element should include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element must contain a <tracks> element that lists the album's tracks.\n- Within each <tracks> element, include at least two <track> elements, each having:\n  - a <track_title> element with the name of the track in text, and\n  - a <duration> element with the track's duration in the \"MM:SS\" format.\n- Ensure that the XML structure is properly closed after all elements.",
        "raw_output_metric": [
            "library",
            "library[album]",
            "library[album][title]",
            "library[album][artist]",
            "library[album][release_year]",
            "library[album][price]",
            "library[album][genre]",
            "library[album][tracks]",
            "library[album][tracks][track]",
            "library[album][tracks][track][track_title]",
            "library[album][tracks][track][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001734",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element specifying the dish's name in text.\n- Each <dish> element must have a <description> element providing a brief text description of the dish.\n- Each <dish> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element must include a <category> element with the type of dish (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element should contain a <spiceLevel> element with a numerical value between 1 and 5, represented by digits.\n- The XML output must be well-formed with all elements properly opened and closed.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][description]",
            "menu[dish][price]",
            "menu[dish][category]",
            "menu[dish][spiceLevel]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001735",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music album collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, have at least 3 <album> elements.\n- Each <album> element should contain an <albumTitle> element with the album's title in text.\n- Each <album> element must include an <artist> element with the artist's name articulated in text.\n- Each <album> element must have a <releaseYear> element containing exactly four numeric digits to represent the year of release.\n- Each <album> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <album> element must include a <genre> element with the genre name in text.\n- Each <album> element should include a <trackCount> element with an integer value representing the number of tracks.\n- The <collection> must be properly closed after all <album> elements.",
        "raw_output_metric": [
            "collection",
            "collection[album]",
            "collection[album][albumTitle]",
            "collection[album][artist]",
            "collection[album][releaseYear]",
            "collection[album][price]",
            "collection[album][genre]",
            "collection[album][trackCount]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001736",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a multi-city travel itinerary based on a given descriptive text about planned visits and activities.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, have at least 3 <city> elements representing different travel destinations.\n- Each <city> element must contain a <name> element with the city's name as text.\n- Each <city> element should include a <visitDate> element with a date formatted as YYYY-MM-DD.\n- Each <city> element must contain one or more <activity> sub-elements describing planned activities.\n- Every <activity> element must include a <description> element with text detailing the activity.\n- Each <activity> element requires a <cost> element with a numerical value formatted to two decimal places.\n- Ensure that the XML structure is properly nested and that every opening tag has a corresponding closing tag.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[city]",
            "itinerary[city][name]",
            "itinerary[city][visitDate]",
            "itinerary[city][activity]",
            "itinerary[city][activity][description]",
            "itinerary[city][activity][cost]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001737",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of cooking recipes based on a given text description.\n\nFeature Requirements:\n- Include a root element named <recipes>.\n- Within the <recipes> element, have at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the recipe's name in text.\n- Each <recipe> element should include a <time> element with the cooking time expressed in minutes as a numeric value.\n- Each <recipe> element must have a <servings> element containing the number of servings as a numeric value.\n- Each <recipe> element must include an <ingredients> element that contains several <ingredient> elements, each with a \"quantity\" attribute and plain text for the ingredient name.\n- Each <recipe> element should include an <instructions> element with the step-by-step cooking instructions in plain text.\n- The <recipes> element must be properly closed after all <recipe> elements.",
        "raw_output_metric": [
            "recipes",
            "recipes[recipe]",
            "recipes[recipe][name]",
            "recipes[recipe][time]",
            "recipes[recipe][servings]",
            "recipes[recipe][ingredients]",
            "recipes[recipe][ingredients][ingredient]@quantity",
            "recipes[recipe][ingredients][ingredient]",
            "recipes[recipe][instructions]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001738",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music collection based on the given text description of albums.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <album> elements.\n- Each <album> element must contain a <name> element with the album's title in text.\n- Each <album> element should include an <artist> element with the artist's name in text.\n- Each <album> element must have a <releaseYear> element with exactly four numeric characters representing the year.\n- Each <album> element must include a <trackCount> element with an integer value indicating the number of tracks.\n- Each <album> element should include a <genre> element with the music genre in text.\n- Ensure that all numerical elements are represented without any additional symbols beside the numbers.\n- The <collection> root element must be properly closed after all <album> elements.",
        "raw_output_metric": [
            "collection",
            "collection[album]",
            "collection[album][name]",
            "collection[album][artist]",
            "collection[album][releaseYear]",
            "collection[album][trackCount]",
            "collection[album][genre]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001739",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, have at least 3 <dish> elements.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include a <category> element with the dish type (e.g., appetizer, main course, dessert) in text.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <description> element with a brief text summary of the dish.\n- Each <dish> element must include a <calories> element with an integer representing the estimated calorie count.\n- Include an optional <spicy> element in each <dish> with the text \"yes\" or \"no\" to indicate if the dish is spicy.\n- Ensure the <menu> element is properly closed after all <dish> elements.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][category]",
            "menu[dish][price]",
            "menu[dish][description]",
            "menu[dish][calories]",
            "menu[dish][spicy]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001740",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a bustling neighborhood café menu based on provided input text descriptions of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu>.\n- Within the <menu>, include at least three <dish> elements representing different menu items.\n- Each <dish> element must contain a <name> element with the dish's name as text.\n- Each <dish> element must include a <description> element with a brief text description of the dish.\n- Each <dish> element must have a <price> element displaying the cost as a numerical value with exactly two decimal places.\n- Each <dish> element must include a <category> element indicating the type of dish such as appetizer, main course, or dessert.\n- Include an optional <spiceLevel> element within each <dish> that specifies the spice intensity (e.g., mild, medium, hot).\n- Ensure that all elements are properly nested and closed within the XML structure.\n- Order the <dish> elements according to the sequence provided in the input text description.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][description]",
            "menu[dish][price]",
            "menu[dish][category]",
            "menu[dish][spiceLevel]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001741",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local farmers market schedule based on a given text description of vendor stalls and their operating times.\n\nFeature Requirements:\n- Include a single root element named <market>.\n- Within the <market> element, include at least 3 <stall> elements.\n- Each <stall> must contain a <vendor> element providing the vendor's name as plain text.\n- Each <stall> must include an <item> element indicating the primary product sold by the vendor.\n- Each <stall> must have an <openTime> element with the time formatted in 24-hour notation (HH:MM).\n- Each <stall> must include a <duration> element that indicates the operating duration in minutes as a numeric value.\n- Each <stall> element must include a <priceRange> element specifying a price range in the format \"min-max\" where both min and max are numeric values formatted with two decimal places.\n- Ensure that the <market> element is properly closed after all <stall> elements.",
        "raw_output_metric": [
            "market",
            "market[stall]",
            "market[stall][vendor]",
            "market[stall][item]",
            "market[stall][openTime]",
            "market[stall][duration]",
            "market[stall][priceRange]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001742",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a train timetable based on the given input text description of train schedules.\n\nFeature Requirements:\n- The XML must have a root element named <timetable>.\n- Inside the <timetable>, include at least 3 <train> elements.\n- Each <train> element must contain an <id> element that holds the train's unique identifier as text.\n- Within each <train> element, include a <departureTime> element with the time in a HH:MM format.\n- Within each <train> element, include an <arrivalTime> element with the time in a HH:MM format.\n- Each <train> element must also have an <origin> element with the departure station name as text.\n- Each <train> element must include a <destination> element with the arrival station name as text.",
        "raw_output_metric": [
            "timetable",
            "timetable[train]",
            "timetable[train][id]",
            "timetable[train][departureTime]",
            "timetable[train][arrivalTime]",
            "timetable[train][origin]",
            "timetable[train][destination]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001743",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local music festival schedule based on the given text description of performances.\n\nFeature Requirements:\n- The XML must have a root element called <schedule>.\n- Within the <schedule>, include at least 3 <performance> elements.\n- Each <performance> element must contain an <artist> element with the performance artist's name in text.\n- Each <performance> element must include a <stage> element with the stage's name in text.\n- Each <performance> element must have a <time> element showing the performance time in a 24-hour format (HH:MM).\n- Each <performance> element must include a <day> element with the specific day of the festival written in full.\n- The <schedule> element should be properly closed after all <performance> elements.",
        "raw_output_metric": [
            "schedule",
            "schedule[performance]",
            "schedule[performance][artist]",
            "schedule[performance][stage]",
            "schedule[performance][time]",
            "schedule[performance][day]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001744",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary catalog based on the given input description of vacation packages.\n\nFeature Requirements:\n- Include a root element named <itineraries>.\n- Within <itineraries>, include at least 3 <package> elements.\n- Each <package> element should contain a <destination> element with the name of the city or location.\n- Each <package> element must include a <departureDate> element with the date formatted as YYYY-MM-DD.\n- Each <package> element should include a <duration> element representing the number of days as an integer.\n- Each <package> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <package> element should include a <description> element with a brief summary of the vacation.\n- Ensure all elements are properly nested and the root element is correctly closed after all <package> elements.",
        "raw_output_metric": [
            "itineraries",
            "itineraries[package]",
            "itineraries[package][destination]",
            "itineraries[package][departureDate]",
            "itineraries[package][duration]",
            "itineraries[package][price]",
            "itineraries[package][description]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001745",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a movie festival schedule based on an overview of various film screenings.\n\nFeature Requirements:\n- The XML must contain a root element named <festival>.\n- Within the <festival> element, include at least 3 <movie> elements.\n- Each <movie> element must have a <title> element with the name of the film in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must contain a <duration> element with an integer value representing the runtime in minutes.\n- Each <movie> element should include a <genre> element with the film genre in text.\n- Each <movie> element must have a <time> element with the screening start time formatted as HH:MM.\n- The XML structure must close the <festival> element properly after listing all <movie> entries.",
        "raw_output_metric": [
            "festival",
            "festival[movie]",
            "festival[movie][title]",
            "festival[movie][director]",
            "festival[movie][duration]",
            "festival[movie][genre]",
            "festival[movie][time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001746",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a diverse collection of cooking recipes based on a descriptive text input.\n\nFeature Requirements:\n- Include a root element named <recipes> that encloses all recipe entries.\n- Each recipe must be represented by a <recipe> element appearing as a direct child of the root.\n- Every <recipe> element should contain a <name> element with the recipe title in plain text.\n- Include a <prepTime> element for each recipe with the preparation time specified as an integer followed by the unit \"min\".\n- Include a <cookTime> element for each recipe with the cooking time specified as an integer followed by the unit \"min\".\n- Ensure each recipe includes an <ingredients> element that contains at least three <ingredient> sub-elements, each with the ingredient name as text.\n- Every recipe must conclude with an <instructions> element that provides detailed step-by-step directions in plain text.",
        "raw_output_metric": [
            "recipes",
            "recipes[recipe]",
            "recipes[recipe][name]",
            "recipes[recipe][prepTime]",
            "recipes[recipe][cookTime]",
            "recipes[recipe][ingredients]",
            "recipes[recipe][ingredients][ingredient]",
            "recipes[recipe][instructions]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001747",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a theater festival schedule based on the given input text description of performances.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, include at least 3 <performance> elements.\n- Each <performance> element should have a <name> element containing the title of the performance.\n- Each <performance> element must have a <director> element with the director's name.\n- Each <performance> element should contain a <date> element with the date in YYYY-MM-DD format.\n- Provide a <time> element in each <performance> element with the performance's start time in HH:MM format using a 24-hour clock.\n- Each <performance> element must include a <duration> element specifying the length in minutes as a whole number.\n- Within each <performance> element, include a <venue> element with text describing the location of the performance.\n- Ensure the XML structure is complete and that all elements are properly opened and closed.",
        "raw_output_metric": [
            "festival",
            "festival[performance]",
            "festival[performance][name]",
            "festival[performance][director]",
            "festival[performance][date]",
            "festival[performance][time]",
            "festival[performance][duration]",
            "festival[performance][venue]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001748",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a collection of recipes based on the given input text description of various dishes.\n\nFeature Requirements:\n- Create a root element named <recipeCollection> that encloses all recipe entries.\n- Within <recipeCollection>, include at least 3 <recipe> elements.\n- Each <recipe> element must contain a <name> element with the dish's name in plain text.\n- Each <recipe> element must include a <chef> element with the name of the chef in plain text.\n- Each <recipe> element must have a <duration> element displaying the preparation time in minutes as a numerical value.\n- Each <recipe> element must include a <servings> element with a numeric value representing the number of servings.\n- Within each <recipe> element, include an <ingredients> element that contains one or more <ingredient> child elements with the ingredient names in plain text.\n- Ensure all XML elements are properly opened and closed.",
        "raw_output_metric": [
            "recipeCollection",
            "recipeCollection[recipe]",
            "recipeCollection[recipe][name]",
            "recipeCollection[recipe][chef]",
            "recipeCollection[recipe][duration]",
            "recipeCollection[recipe][servings]",
            "recipeCollection[recipe][ingredients]",
            "recipeCollection[recipe][ingredients][ingredient]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "task_id": "001749",
        "input_type": "Text",
        "output_type": "XML",
        "rendering": false,
        "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a restaurant menu based on an input text description of various dishes offered.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, create at least 3 <dish> elements.\n- Each <dish> element must contain a <name> element with the dish’s name as text.\n- Each <dish> element should include a <category> element indicating the dish category (e.g., appetizer, main course, or dessert).\n- Each <dish> element must have a <price> element that holds a numerical value formatted to two decimal places.\n- Include a <description> element within every <dish> element to provide a brief text detail about the dish.\n- Each <dish> element must feature a <calories> element displaying the calorie count as an integer.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
        "raw_output_metric": [
            "menu",
            "menu[dish]",
            "menu[dish][name]",
            "menu[dish][category]",
            "menu[dish][price]",
            "menu[dish][description]",
            "menu[dish][calories]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001800",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted travel itinerary.\n\nFeature Requirements:\n- The YAML output must contain a top-level key named itinerary.\n- Under itinerary, include exactly three destination entries.\n- Each destination entry should be a mapping with three keys: city, stay_duration, and notes.\n- The city key must have a non-empty string value representing the destination city.\n- The stay_duration key must have an integer value greater than zero representing the number of days.\n- The notes key must have a non-empty string that describes a unique aspect of the destination.\n- Include a top-level comment that reads \"Generated Travel Itinerary\".\n- Use exactly two spaces for indentation of nested elements.\n- Ensure there are no extra newline characters or additional whitespace between items.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[0][city]",
            "itinerary[0][stay_duration]",
            "itinerary[0][notes]",
            "itinerary[1][city]",
            "itinerary[1][stay_duration]",
            "itinerary[1][notes]",
            "itinerary[2][city]",
            "itinerary[2][stay_duration]",
            "itinerary[2][notes]",
            "comment: Generated Travel Itinerary"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001801",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided travel itinerary details into a YAML format representing a multi-destination journey.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 destinations as children under itinerary.\n- Each destination must have four keys: destination, arrival_date, departure_date, and activities.\n- The destination key should hold a non-empty string value.\n- The arrival_date and departure_date keys should have string values formatted as \"YYYY-MM-DD\".\n- The activities key should contain an array of exactly 3 non-empty string values describing planned activities.\n- Ensure that the YAML output is properly indented with two spaces per nested level.\n- Provide a top-level comment at the beginning stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between elements.\n- Do not include any references to images, icons, or external links.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[0][destination]",
            "itinerary[0][arrival_date]",
            "itinerary[0][departure_date]",
            "itinerary[0][activities]",
            "itinerary[1][destination]",
            "itinerary[1][arrival_date]",
            "itinerary[1][departure_date]",
            "itinerary[1][activities]",
            "itinerary[2][destination]",
            "itinerary[2][arrival_date]",
            "itinerary[2][departure_date]",
            "itinerary[2][activities]",
            "itinerary[3][destination]",
            "itinerary[3][arrival_date]",
            "itinerary[3][departure_date]",
            "itinerary[3][activities]",
            "itinerary[4][destination]",
            "itinerary[4][arrival_date]",
            "itinerary[4][departure_date]",
            "itinerary[4][activities]",
            "itinerary[5][destination]",
            "itinerary[5][arrival_date]",
            "itinerary[5][departure_date]",
            "itinerary[5][activities]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001802",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- List exactly 6 meetings as children under \"daily_schedule\", each using a unique numeric key starting from 1.\n- Each meeting entry must include three keys: \"time\", \"topic\", and \"leader\".\n- The \"time\" values must be strings in HH:MM 24-hour format representing valid times.\n- Every \"topic\" value must be a unique, non-empty string describing the meeting subject.\n- Each \"leader\" value must be a non-empty string containing a full name (first and last name).\n- Use exactly two spaces for indentation for all nested structures.\n- Begin the YAML output with a top-level comment stating \"Generated Daily Meeting Schedule\".\n- Include no additional keys, comments, or blank lines beyond what is specified.",
        "raw_output_metric": [
            "daily_schedule",
            "daily_schedule[1]",
            "daily_schedule[1][time]",
            "daily_schedule[1][topic]",
            "daily_schedule[1][leader]",
            "daily_schedule[2]",
            "daily_schedule[2][time]",
            "daily_schedule[2][topic]",
            "daily_schedule[2][leader]",
            "daily_schedule[3]",
            "daily_schedule[3][time]",
            "daily_schedule[3][topic]",
            "daily_schedule[3][leader]",
            "daily_schedule[4]",
            "daily_schedule[4][time]",
            "daily_schedule[4][topic]",
            "daily_schedule[4][leader]",
            "daily_schedule[5]",
            "daily_schedule[5][time]",
            "daily_schedule[5][topic]",
            "daily_schedule[5][leader]",
            "daily_schedule[6]",
            "daily_schedule[6][time]",
            "daily_schedule[6][topic]",
            "daily_schedule[6][leader]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001803",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key called \"conference\".\n- Include exactly 3 main keys under \"conference\": \"title\", \"date\", and \"sessions\".\n- The value for \"title\" must be a non-empty string.\n- The value for \"date\" must strictly follow the \"YYYY-MM-DD\" format.\n- \"Sessions\" must be a list containing exactly 3 session items.\n- Each session item must be a mapping with exactly 3 keys: \"topic\", \"speaker\", and \"time\".\n- The \"time\" key in each session must be formatted in a 24-hour \"HH:MM\" style.\n- Provide a top-level comment at the beginning indicating \"Auto-generated Conference Schedule\".",
        "raw_output_metric": [
            "conference",
            "conference[title]",
            "conference[date]",
            "conference[sessions]",
            "conference[sessions][0][topic]",
            "conference[sessions][0][speaker]",
            "conference[sessions][0][time]",
            "conference[sessions][1][topic]",
            "conference[sessions][1][speaker]",
            "conference[sessions][1][time]",
            "conference[sessions][2][topic]",
            "conference[sessions][2][speaker]",
            "conference[sessions][2][time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001804",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a top-level comment that says \"Generated Weekly Meal Plan\".\n- Use a single root key named meal_plan.\n- Include exactly 7 keys under meal_plan, each representing a day of the week (e.g., Monday, Tuesday, etc.).\n- Under each day, include exactly 3 keys: breakfast, lunch, and dinner.\n- Each meal (breakfast, lunch, dinner) must be a mapping with two keys: dish and calories.\n- The dish key must have a non-empty string value, and the calories key must have an integer value greater than zero.\n- Ensure all nested structures are indented with two spaces per level.\n- Do not include any extra whitespace or empty lines between entries.",
        "raw_output_metric": [
            "meal_plan",
            "meal_plan[Monday]",
            "meal_plan[Monday][breakfast]",
            "meal_plan[Monday][breakfast][dish]",
            "meal_plan[Monday][breakfast][calories]",
            "meal_plan[Monday][lunch]",
            "meal_plan[Monday][lunch][dish]",
            "meal_plan[Monday][lunch][calories]",
            "meal_plan[Monday][dinner]",
            "meal_plan[Monday][dinner][dish]",
            "meal_plan[Monday][dinner][calories]",
            "meal_plan[Tuesday]",
            "meal_plan[Tuesday][breakfast]",
            "meal_plan[Tuesday][breakfast][dish]",
            "meal_plan[Tuesday][breakfast][calories]",
            "meal_plan[Tuesday][lunch]",
            "meal_plan[Tuesday][lunch][dish]",
            "meal_plan[Tuesday][lunch][calories]",
            "meal_plan[Tuesday][dinner]",
            "meal_plan[Tuesday][dinner][dish]",
            "meal_plan[Tuesday][dinner][calories]",
            "meal_plan[Wednesday]",
            "meal_plan[Wednesday][breakfast]",
            "meal_plan[Wednesday][breakfast][dish]",
            "meal_plan[Wednesday][breakfast][calories]",
            "meal_plan[Wednesday][lunch]",
            "meal_plan[Wednesday][lunch][dish]",
            "meal_plan[Wednesday][lunch][calories]",
            "meal_plan[Wednesday][dinner]",
            "meal_plan[Wednesday][dinner][dish]",
            "meal_plan[Wednesday][dinner][calories]",
            "meal_plan[Thursday]",
            "meal_plan[Thursday][breakfast]",
            "meal_plan[Thursday][breakfast][dish]",
            "meal_plan[Thursday][breakfast][calories]",
            "meal_plan[Thursday][lunch]",
            "meal_plan[Thursday][lunch][dish]",
            "meal_plan[Thursday][lunch][calories]",
            "meal_plan[Thursday][dinner]",
            "meal_plan[Thursday][dinner][dish]",
            "meal_plan[Thursday][dinner][calories]",
            "meal_plan[Friday]",
            "meal_plan[Friday][breakfast]",
            "meal_plan[Friday][breakfast][dish]",
            "meal_plan[Friday][breakfast][calories]",
            "meal_plan[Friday][lunch]",
            "meal_plan[Friday][lunch][dish]",
            "meal_plan[Friday][lunch][calories]",
            "meal_plan[Friday][dinner]",
            "meal_plan[Friday][dinner][dish]",
            "meal_plan[Friday][dinner][calories]",
            "meal_plan[Saturday]",
            "meal_plan[Saturday][breakfast]",
            "meal_plan[Saturday][breakfast][dish]",
            "meal_plan[Saturday][breakfast][calories]",
            "meal_plan[Saturday][lunch]",
            "meal_plan[Saturday][lunch][dish]",
            "meal_plan[Saturday][lunch][calories]",
            "meal_plan[Saturday][dinner]",
            "meal_plan[Saturday][dinner][dish]",
            "meal_plan[Saturday][dinner][calories]",
            "meal_plan[Sunday]",
            "meal_plan[Sunday][breakfast]",
            "meal_plan[Sunday][breakfast][dish]",
            "meal_plan[Sunday][breakfast][calories]",
            "meal_plan[Sunday][lunch]",
            "meal_plan[Sunday][lunch][dish]",
            "meal_plan[Sunday][lunch][calories]",
            "meal_plan[Sunday][dinner]",
            "meal_plan[Sunday][dinner][dish]",
            "meal_plan[Sunday][dinner][calories]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001805",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meal_plan\".\n- Include exactly 4 meals: breakfast, lunch, snack, and dinner.\n- Each meal must be a mapping with the keys \"meal_name\", \"time\", and \"menu\".\n- The \"meal_name\" value must be a non-empty string.\n- The \"time\" value must follow the HH:MM 24-hour format.\n- The \"menu\" must be a list containing exactly 3 food items.\n- Each food item in \"menu\" should include two keys: \"dish\" and \"calories\", where \"calories\" is an integer greater than zero.\n- The YAML must be indented with two spaces per nested level.\n- Provide a top-level comment stating \"Generated Daily Meal Plan\".\n- Avoid any extraneous whitespace or blank lines between items.",
        "raw_output_metric": [
            "meal_plan",
            "meal_plan[breakfast]",
            "meal_plan[breakfast][meal_name]",
            "meal_plan[breakfast][time]",
            "meal_plan[breakfast][menu]",
            "meal_plan[breakfast][menu][][dish]",
            "meal_plan[breakfast][menu][][calories]",
            "meal_plan[lunch]",
            "meal_plan[lunch][meal_name]",
            "meal_plan[lunch][time]",
            "meal_plan[lunch][menu]",
            "meal_plan[lunch][menu][][dish]",
            "meal_plan[lunch][menu][][calories]",
            "meal_plan[snack]",
            "meal_plan[snack][meal_name]",
            "meal_plan[snack][time]",
            "meal_plan[snack][menu]",
            "meal_plan[snack][menu][][dish]",
            "meal_plan[snack][menu][][calories]",
            "meal_plan[dinner]",
            "meal_plan[dinner][meal_name]",
            "meal_plan[dinner][time]",
            "meal_plan[dinner][menu]",
            "meal_plan[dinner][menu][][dish]",
            "meal_plan[dinner][menu][][calories]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001806",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the provided narrative into a YAML format representing a roster of fantasy tournament competitors.\n\nFeature Requirements:\n- Begin with a top-level key named \"tournament_roster\".\n- Under \"tournament_roster\", include exactly 8 competitor entries.\n- Each competitor entry must have three keys: \"name\", \"rank\", and \"weapon\".\n- The \"name\" key must contain a non-empty string representing the competitor’s name.\n- The \"rank\" key must contain an integer between 1 and 100.\n- The \"weapon\" key must contain a non-empty string describing the competitor’s chosen weapon.\n- The YAML output must use exactly two spaces for each level of indentation.\n- Include a top-level comment stating \"Fantasy Tournament Roster\".\n- Ensure there is no extra whitespace or empty lines between entries.",
        "raw_output_metric": [
            "tournament_roster",
            "tournament_roster[*][name]",
            "tournament_roster[*][rank]",
            "tournament_roster[*][weapon]",
            "top-level comment: Fantasy Tournament Roster"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001807",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a film schedule for a cinema program.\n\nFeature Requirements:\n- Begin with a top-level key named \"schedule\".\n- Include exactly 6 films under the \"schedule\" key.\n- Each film must be represented as a mapping with three keys: \"title\", \"director\", and \"duration\".\n- The \"title\" and \"director\" keys should have non-empty string values.\n- The \"duration\" key must hold an integer value that is between 60 and 240, inclusive.\n- Use exactly two spaces for each indentation level in the YAML.\n- Include a top-level YAML comment at the very beginning stating \"Generated Film Schedule\".",
        "raw_output_metric": [
            "schedule",
            "schedule[0][title]",
            "schedule[0][director]",
            "schedule[0][duration]",
            "schedule[1][title]",
            "schedule[1][director]",
            "schedule[1][duration]",
            "schedule[2][title]",
            "schedule[2][director]",
            "schedule[2][duration]",
            "schedule[3][title]",
            "schedule[3][director]",
            "schedule[3][duration]",
            "schedule[4][title]",
            "schedule[4][director]",
            "schedule[4][duration]",
            "schedule[5][title]",
            "schedule[5][director]",
            "schedule[5][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001808",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nGenerate a YAML file representing a fictional event schedule for a community day festival.\n\nFeature Requirements:\n- The top-level key must be named \"community_festival\".\n- Include exactly three session keys: \"morning_session\", \"afternoon_session\", and \"evening_session\".\n- Each session must be a list containing exactly 3 event objects.\n- Every event object must include two keys: \"title\" and \"time\".\n- The \"title\" key must have a non-empty string value, and the \"time\" key must have a value in the \"HH:MM\" 24-hour format.\n- Include a top-level comment stating \"Generated Community Festival Schedule\".\n- Ensure each event within a session has a unique \"time\" value.\n- Use exactly two spaces for indentation for all nested structures.\n- Avoid any extra whitespace or blank lines between items.",
        "raw_output_metric": [
            "community_festival",
            "community_festival[morning_session]",
            "community_festival[morning_session][0][title]",
            "community_festival[morning_session][0][time]",
            "community_festival[morning_session][1][title]",
            "community_festival[morning_session][1][time]",
            "community_festival[morning_session][2][title]",
            "community_festival[morning_session][2][time]",
            "community_festival[afternoon_session]",
            "community_festival[afternoon_session][0][title]",
            "community_festival[afternoon_session][0][time]",
            "community_festival[afternoon_session][1][title]",
            "community_festival[afternoon_session][1][time]",
            "community_festival[afternoon_session][2][title]",
            "community_festival[afternoon_session][2][time]",
            "community_festival[evening_session]",
            "community_festival[evening_session][0][title]",
            "community_festival[evening_session][0][time]",
            "community_festival[evening_session][1][title]",
            "community_festival[evening_session][1][time]",
            "community_festival[evening_session][2][title]",
            "community_festival[evening_session][2][time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001809",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a top-level key named \"library_catalog\".\n- Include exactly 8 book entries as children under \"library_catalog\".\n- Each book entry must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" and \"author\" keys must contain non-empty string values.\n- All \"year\" values must be integers ranging from 1900 to 2023.\n- List the book entries as a numbered sequence, starting from 1.\n- Provide a top-level comment stating \"Generated Book Catalog\".\n- Ensure all nested structures are indented with exactly two spaces.\n- Do not include any extraneous whitespace or additional comments beyond the top-level comment.",
        "raw_output_metric": [
            "# Generated Book Catalog",
            "library_catalog",
            "library_catalog[1][title]",
            "library_catalog[1][author]",
            "library_catalog[1][year]",
            "library_catalog[2][title]",
            "library_catalog[2][author]",
            "library_catalog[2][year]",
            "library_catalog[3][title]",
            "library_catalog[3][author]",
            "library_catalog[3][year]",
            "library_catalog[4][title]",
            "library_catalog[4][author]",
            "library_catalog[4][year]",
            "library_catalog[5][title]",
            "library_catalog[5][author]",
            "library_catalog[5][year]",
            "library_catalog[6][title]",
            "library_catalog[6][author]",
            "library_catalog[6][year]",
            "library_catalog[7][title]",
            "library_catalog[7][author]",
            "library_catalog[7][year]",
            "library_catalog[8][title]",
            "library_catalog[8][author]",
            "library_catalog[8][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001810",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meditation schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named \"meditation_schedule\".\n- Include exactly 7 entries under \"meditation_schedule\", each corresponding to a day of the week starting from Monday.\n- Each day's entry must be an object with two keys: \"duration\" and \"technique\".\n- The \"duration\" key must have an integer value representing minutes, and this value must be at least 10.\n- The \"technique\" key must contain a non-empty string describing the meditation method for that day.\n- Each day's entry should be ordered sequentially from Monday to Sunday, with proper indentation using two spaces.\n- Include a top-level comment at the beginning of the YAML output stating \"Generated Weekly Meditation Schedule\".",
        "raw_output_metric": [
            "meditation_schedule",
            "meditation_schedule[Monday]",
            "meditation_schedule[Monday][duration]",
            "meditation_schedule[Monday][technique]",
            "meditation_schedule[Tuesday]",
            "meditation_schedule[Tuesday][duration]",
            "meditation_schedule[Tuesday][technique]",
            "meditation_schedule[Wednesday]",
            "meditation_schedule[Wednesday][duration]",
            "meditation_schedule[Wednesday][technique]",
            "meditation_schedule[Thursday]",
            "meditation_schedule[Thursday][duration]",
            "meditation_schedule[Thursday][technique]",
            "meditation_schedule[Friday]",
            "meditation_schedule[Friday][duration]",
            "meditation_schedule[Friday][technique]",
            "meditation_schedule[Saturday]",
            "meditation_schedule[Saturday][duration]",
            "meditation_schedule[Saturday][technique]",
            "meditation_schedule[Sunday]",
            "meditation_schedule[Sunday][duration]",
            "meditation_schedule[Sunday][technique]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001811",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily weather report.\n\nFeature Requirements:\n- Begin with a top-level key named \"weather_report\".\n- Under \"weather_report\", include subkeys \"location\", \"date\", \"forecast\", and \"alerts\".\n- The \"location\" key must have two keys: \"city\" and \"country\", each with non-empty string values.\n- The \"date\" key must contain a string following the ISO 8601 date format (YYYY-MM-DD).\n- The \"forecast\" key must be a list containing exactly 3 items, where each item includes the keys \"time\" (formatted as HH:MM) and \"temperature\" (an integer representing degrees).\n- The \"alerts\" key must be a list with at least one element, where each element is a non-empty string describing a specific weather condition.\n- Ensure all YAML nested blocks are indented with two spaces.\n- Include a top-level comment at the very beginning of the YAML output stating \"Daily Weather Report\".\n- Do not include any additional keys, extra lines, or content beyond what is specified.",
        "raw_output_metric": [
            "weather_report",
            "weather_report[location]",
            "weather_report[location][city]",
            "weather_report[location][country]",
            "weather_report[date]",
            "weather_report[forecast]",
            "weather_report[forecast][0][time]",
            "weather_report[forecast][0][temperature]",
            "weather_report[forecast][1][time]",
            "weather_report[forecast][1][temperature]",
            "weather_report[forecast][2][time]",
            "weather_report[forecast][2][temperature]",
            "weather_report[alerts]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001812",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary for a multi-day adventure.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 days as children under itinerary.\n- Each day must have a key named day_number with an integer value from 1 to 4.\n- Under each day, include a list named activities with exactly 3 items.\n- Each activity must contain two keys: activity_name (a non-empty string) and time (a string in HH:MM 24-hour format).\n- Ensure the YAML uses two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Travel Itinerary\".\n- Avoid any additional whitespace or empty lines between defined items.\n- Do not include any elements beyond the specified keys and structure.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[*][day_number]",
            "itinerary[*][activities]",
            "itinerary[*][activities][*][activity_name]",
            "itinerary[*][activities][*][time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001813",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a company meeting schedule.\n\nFeature Requirements:\n- Begin with a top-level key named conference_schedule.\n- Include exactly 6 meeting entries as children under conference_schedule.\n- Each meeting must have three keys: title, time, and room.\n- Each title key must be a non-empty string clearly describing the meeting topic.\n- Each time key must be formatted as HH:MM using 24-hour time notation.\n- Each room key must be a non-empty string indicating a specific meeting room.\n- Ensure that nested keys are indented with exactly two spaces per level.\n- Provide a top-level comment line that reads \"Generated Company Meeting Schedule\".\n- Do not include any extra keys or unnecessary whitespace in the output.\n- Output the YAML strictly as specified without using triple backticks or additional formatting.",
        "raw_output_metric": [
            "conference_schedule",
            "conference_schedule[*][title]",
            "conference_schedule[*][time]",
            "conference_schedule[*][room]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001814",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing an inventory of musical instruments for a band.\n\nFeature Requirements:\n- Begin with a single key named \"band_inventory\".\n- Include exactly 7 instruments as children under \"band_inventory\".\n- Each instrument entry must have three keys: \"instrument\", \"brand\", and \"year\".\n- The \"instrument\" key must contain a non-empty string value describing the type of instrument.\n- The \"brand\" key must contain a non-empty string value with a minimum of three characters.\n- The \"year\" key must contain an integer value between 1900 and 2023, inclusive.\n- Ensure the YAML is properly indented using two spaces for nested structures.\n- Provide a top-level comment stating \"Band Inventory Data\".\n- Avoid any extra keys, whitespace, or additional empty lines between entries.",
        "raw_output_metric": [
            "band_inventory",
            "band_inventory[0][instrument]",
            "band_inventory[0][brand]",
            "band_inventory[0][year]",
            "band_inventory[1][instrument]",
            "band_inventory[1][brand]",
            "band_inventory[1][year]",
            "band_inventory[2][instrument]",
            "band_inventory[2][brand]",
            "band_inventory[2][year]",
            "band_inventory[3][instrument]",
            "band_inventory[3][brand]",
            "band_inventory[3][year]",
            "band_inventory[4][instrument]",
            "band_inventory[4][brand]",
            "band_inventory[4][year]",
            "band_inventory[5][instrument]",
            "band_inventory[5][brand]",
            "band_inventory[5][year]",
            "band_inventory[6][instrument]",
            "band_inventory[6][brand]",
            "band_inventory[6][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001815",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a mini conference schedule.\n\nFeature Requirements:\n- Begin with a single key named conference_schedule.\n- Include exactly 3 sessions as children under conference_schedule.\n- Each session must have four keys: session_title, start_time, duration_minutes, and presenter.\n- The session_title and presenter keys must have non-empty string values.\n- The start_time key must follow a 24-hour time format (HH:MM).\n- The duration_minutes key must contain an integer value greater than zero.\n- Provide a top-level comment indicating \"Generated Conference Schedule\" at the very beginning of the output.\n- Ensure the output is properly indented using exactly two spaces for nested structures.\n- Avoid any extra whitespace or empty lines between the sessions.",
        "raw_output_metric": [
            "conference_schedule",
            "conference_schedule[0][session_title]",
            "conference_schedule[0][start_time]",
            "conference_schedule[0][duration_minutes]",
            "conference_schedule[0][presenter]",
            "conference_schedule[1][session_title]",
            "conference_schedule[1][start_time]",
            "conference_schedule[1][duration_minutes]",
            "conference_schedule[1][presenter]",
            "conference_schedule[2][session_title]",
            "conference_schedule[2][start_time]",
            "conference_schedule[2][duration_minutes]",
            "conference_schedule[2][presenter]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001816",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a digital recipe collection.\n\nFeature Requirements:\n- Begin with a single key named \"recipe_collection\".\n- Include exactly 7 recipes as items under \"recipe_collection\".\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"prep_time\".\n- \"title\" must have a unique non-empty string value for each recipe.\n- \"ingredients\" must be a list containing at least 3 non-empty string values per recipe.\n- \"prep_time\" must be a positive integer indicating preparation time in minutes.\n- Ensure that the YAML structure uses two spaces for each level of indentation.\n- Include a top-level comment stating \"Digital Recipe Collection\".\n- Do not include any extra keys or unnecessary whitespace in the output.",
        "raw_output_metric": [
            "top-level comment (\"Digital Recipe Collection\")",
            "recipe_collection",
            "recipe_collection[*][title]",
            "recipe_collection[*][ingredients]",
            "recipe_collection[*][prep_time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001817",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the provided travel plan details into a YAML formatted daily itinerary.\n\nFeature Requirements:\n- Begin with a single key named travel_itinerary.\n- Include exactly 3 entries under travel_itinerary representing individual travel days.\n- Each entry must have two keys: destination and activities.\n- The destination key should have a non-empty string value describing the location.\n- The activities key should contain a list of exactly 2 non-empty string values detailing planned activities for the day.\n- The YAML output must be indented with exactly two spaces per level.\n- Include a top-level comment that reads \"Itinerary for Vacation\".\n- Ensure there is no extra whitespace or empty lines between the entries.\n- All values must be clearly structured as described and conform to valid YAML syntax.",
        "raw_output_metric": [
            "travel_itinerary",
            "travel_itinerary[0].destination",
            "travel_itinerary[0].activities",
            "travel_itinerary[0].activities[0]",
            "travel_itinerary[0].activities[1]",
            "travel_itinerary[1].destination",
            "travel_itinerary[1].activities",
            "travel_itinerary[1].activities[0]",
            "travel_itinerary[1].activities[1]",
            "travel_itinerary[2].destination",
            "travel_itinerary[2].activities",
            "travel_itinerary[2].activities[0]",
            "travel_itinerary[2].activities[1]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001818",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly conference schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"conference_schedule\".\n- Include exactly 7 child keys under \"conference_schedule\", each representing a day of the week.\n- Under each day, include a list key named \"sessions\".\n- Each session must be an object with two keys: \"topic\" and \"time\".\n- The \"topic\" key should hold a non-empty string describing the session.\n- The \"time\" key should hold a string indicating the starting time in 24-hour format (HH:MM).\n- Ensure that each day's schedule includes at least one session.\n- Format the YAML using exactly 2 spaces for each level of indentation.\n- Precede the YAML content with a top-level comment stating \"Generated Conference Itinerary\".\n- Avoid any extra whitespace or blank lines between items.",
        "raw_output_metric": [
            "conference_schedule",
            "conference_schedule[Monday]",
            "conference_schedule[Monday][sessions]",
            "conference_schedule[Monday][sessions][*][topic]",
            "conference_schedule[Monday][sessions][*][time]",
            "conference_schedule[Tuesday]",
            "conference_schedule[Tuesday][sessions]",
            "conference_schedule[Tuesday][sessions][*][topic]",
            "conference_schedule[Tuesday][sessions][*][time]",
            "conference_schedule[Wednesday]",
            "conference_schedule[Wednesday][sessions]",
            "conference_schedule[Wednesday][sessions][*][topic]",
            "conference_schedule[Wednesday][sessions][*][time]",
            "conference_schedule[Thursday]",
            "conference_schedule[Thursday][sessions]",
            "conference_schedule[Thursday][sessions][*][topic]",
            "conference_schedule[Thursday][sessions][*][time]",
            "conference_schedule[Friday]",
            "conference_schedule[Friday][sessions]",
            "conference_schedule[Friday][sessions][*][topic]",
            "conference_schedule[Friday][sessions][*][time]",
            "conference_schedule[Saturday]",
            "conference_schedule[Saturday][sessions]",
            "conference_schedule[Saturday][sessions][*][topic]",
            "conference_schedule[Saturday][sessions][*][time]",
            "conference_schedule[Sunday]",
            "conference_schedule[Sunday][sessions]",
            "conference_schedule[Sunday][sessions][*][topic]",
            "conference_schedule[Sunday][sessions][*][time]",
            "# Generated Conference Itinerary"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001819",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal reading log.\n\nFeature Requirements:\n- The output must begin with a top-level key named \"reading_log\".\n- Include exactly 7 entries as children under \"reading_log\".\n- Each entry must have three keys: \"book_title\", \"author\", and \"pages_read\".\n- All \"book_title\" keys must contain non-empty string values.\n- All \"author\" keys must contain non-empty string values.\n- All \"pages_read\" keys must include integer values strictly greater than zero.\n- Use two spaces for indentation at every nested level.\n- Include a top-level comment that reads \"Generated Reading Log\".\n- Avoid any additional whitespace or empty lines between entries.\n- Do NOT wrap any content in triple backticks or any other code block formatting.",
        "raw_output_metric": [
            "reading_log",
            "reading_log[0][book_title]",
            "reading_log[0][author]",
            "reading_log[0][pages_read]",
            "reading_log[1][book_title]",
            "reading_log[1][author]",
            "reading_log[1][pages_read]",
            "reading_log[2][book_title]",
            "reading_log[2][author]",
            "reading_log[2][pages_read]",
            "reading_log[3][book_title]",
            "reading_log[3][author]",
            "reading_log[3][pages_read]",
            "reading_log[4][book_title]",
            "reading_log[4][author]",
            "reading_log[4][pages_read]",
            "reading_log[5][book_title]",
            "reading_log[5][author]",
            "reading_log[5][pages_read]",
            "reading_log[6][book_title]",
            "reading_log[6][author]",
            "reading_log[6][pages_read]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001820",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a road trip itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment indicating \"Road Trip Itinerary\".\n- Use a single top-level key named itinerary.\n- Include exactly 7 stops as children under itinerary.\n- Each stop must have three keys: location, arrival_time, and departure_time.\n- The location key must have a non-empty string value representing the city or landmark.\n- Both arrival_time and departure_time keys must have string values formatted as HH:MM using a 24-hour clock.\n- Arrange the stops in the order of travel from the first to the last destination.\n- Ensure all nested structures use exactly two spaces for indentation.\n- Do not include any additional whitespace or empty lines between stops.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[0][location]",
            "itinerary[0][arrival_time]",
            "itinerary[0][departure_time]",
            "itinerary[1][location]",
            "itinerary[1][arrival_time]",
            "itinerary[1][departure_time]",
            "itinerary[2][location]",
            "itinerary[2][arrival_time]",
            "itinerary[2][departure_time]",
            "itinerary[3][location]",
            "itinerary[3][arrival_time]",
            "itinerary[3][departure_time]",
            "itinerary[4][location]",
            "itinerary[4][arrival_time]",
            "itinerary[4][departure_time]",
            "itinerary[5][location]",
            "itinerary[5][arrival_time]",
            "itinerary[5][departure_time]",
            "itinerary[6][location]",
            "itinerary[6][arrival_time]",
            "itinerary[6][departure_time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001821",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly gardening task schedule.\n\nFeature Requirements:\n- Begin with a single key named gardening_schedule.\n- Include exactly 7 tasks as children under gardening_schedule.\n- Each task must have three keys: activity, day, and duration.\n- The activity key must contain a non-empty string describing the gardening task.\n- The day key must be one of the following exact values: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, or Sunday.\n- The duration key must be a positive integer representing the time in minutes.\n- Include a top-level comment at the very beginning that reads \"Generated Weekly Gardening Tasks\".\n- Format the YAML with two spaces per level of indentation and no additional whitespace between tasks.",
        "raw_output_metric": [
            "gardening_schedule",
            "gardening_schedule[0][activity]",
            "gardening_schedule[0][day]",
            "gardening_schedule[0][duration]",
            "gardening_schedule[1][activity]",
            "gardening_schedule[1][day]",
            "gardening_schedule[1][duration]",
            "gardening_schedule[2][activity]",
            "gardening_schedule[2][day]",
            "gardening_schedule[2][duration]",
            "gardening_schedule[3][activity]",
            "gardening_schedule[3][day]",
            "gardening_schedule[3][duration]",
            "gardening_schedule[4][activity]",
            "gardening_schedule[4][day]",
            "gardening_schedule[4][duration]",
            "gardening_schedule[5][activity]",
            "gardening_schedule[5][day]",
            "gardening_schedule[5][duration]",
            "gardening_schedule[6][activity]",
            "gardening_schedule[6][day]",
            "gardening_schedule[6][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001822",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML document representing a digital library catalog.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library_catalog\".\n- Under \"library_catalog\", include exactly 6 book entries.\n- Each book entry must be a mapping with three keys: \"title\", \"author\", and \"year\".\n- The \"title\" and \"author\" keys should have non-empty string values.\n- The \"year\" key should have an integer value between 1900 and the current year.\n- Indent all nested structures with exactly two spaces per level.\n- Include a top-level comment that reads \"Library Catalog Data\".\n- Do not include any additional keys or extra whitespace between entries.",
        "raw_output_metric": [
            "library_catalog",
            "library_catalog[0]",
            "library_catalog[0][title]",
            "library_catalog[0][author]",
            "library_catalog[0][year]",
            "library_catalog[1]",
            "library_catalog[1][title]",
            "library_catalog[1][author]",
            "library_catalog[1][year]",
            "library_catalog[2]",
            "library_catalog[2][title]",
            "library_catalog[2][author]",
            "library_catalog[2][year]",
            "library_catalog[3]",
            "library_catalog[3][title]",
            "library_catalog[3][author]",
            "library_catalog[3][year]",
            "library_catalog[4]",
            "library_catalog[4][title]",
            "library_catalog[4][author]",
            "library_catalog[4][year]",
            "library_catalog[5]",
            "library_catalog[5][title]",
            "library_catalog[5][author]",
            "library_catalog[5][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001823",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie screening schedule.\n\nFeature Requirements:\n- The YAML output must begin with a single top-level key named \"film_schedule\".\n- Under \"film_schedule\", include exactly 6 film entries.\n- Each film entry must include exactly three keys: \"title\", \"duration\", and \"director\".\n- All \"title\" values must be non-empty strings.\n- All \"duration\" values must be integer numbers greater than zero, representing the film length in minutes.\n- All \"director\" values must be non-empty strings.\n- The output must use two spaces for indentation at each nested level.\n- Provide a top-level comment that reads \"Movie Screening Schedule\".\n- Do not include any extra keys, additional whitespace, or empty lines between film entries.",
        "raw_output_metric": [
            "film_schedule",
            "film_schedule[0][title]",
            "film_schedule[0][duration]",
            "film_schedule[0][director]",
            "film_schedule[1][title]",
            "film_schedule[1][duration]",
            "film_schedule[1][director]",
            "film_schedule[2][title]",
            "film_schedule[2][duration]",
            "film_schedule[2][director]",
            "film_schedule[3][title]",
            "film_schedule[3][duration]",
            "film_schedule[3][director]",
            "film_schedule[4][title]",
            "film_schedule[4][duration]",
            "film_schedule[4][director]",
            "film_schedule[5][title]",
            "film_schedule[5][duration]",
            "film_schedule[5][director]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001824",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_catalog.\n- Include exactly 6 movies as children under movie_catalog.\n- Each movie must have three keys: title, director, and year.\n- All title and director values must be non-empty strings.\n- All year values must be four-digit integers between 1900 and 2099.\n- Ensure the movies are listed in the order they appear in the text.\n- Use exactly two spaces for indentation at each level of nesting.\n- Include a top-level comment stating \"Generated Movie Collection\" before any data.\n- Do not include any extra whitespace or empty lines between entries.",
        "raw_output_metric": [
            "movie_catalog",
            "movie_catalog[0][title]",
            "movie_catalog[0][director]",
            "movie_catalog[0][year]",
            "movie_catalog[1][title]",
            "movie_catalog[1][director]",
            "movie_catalog[1][year]",
            "movie_catalog[2][title]",
            "movie_catalog[2][director]",
            "movie_catalog[2][year]",
            "movie_catalog[3][title]",
            "movie_catalog[3][director]",
            "movie_catalog[3][year]",
            "movie_catalog[4][title]",
            "movie_catalog[4][director]",
            "movie_catalog[4][year]",
            "movie_catalog[5][title]",
            "movie_catalog[5][director]",
            "movie_catalog[5][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001825",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a detailed conference schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named conference_schedule.\n- Include exactly 6 event entries as children under conference_schedule.\n- Each event entry must contain three keys: title, time, and room.\n- The title must be a non-empty string describing the event name.\n- The time must be a string formatted in 24-hour notation (HH:MM) indicating when the event starts.\n- The room must be a string containing an alphanumeric room identifier.\n- Ensure proper indentation using exactly two spaces for nested structures.\n- Place a top-level comment at the beginning of the YAML output stating \"Generated Conference Schedule\".\n- Do not add any extra keys, comments, or blank lines between events.\n- All keys and values should strictly adhere to the described format without any additional formatting.",
        "raw_output_metric": [
            "conference_schedule",
            "conference_schedule[0][title]",
            "conference_schedule[0][time]",
            "conference_schedule[0][room]",
            "conference_schedule[1][title]",
            "conference_schedule[1][time]",
            "conference_schedule[1][room]",
            "conference_schedule[2][title]",
            "conference_schedule[2][time]",
            "conference_schedule[2][room]",
            "conference_schedule[3][title]",
            "conference_schedule[3][time]",
            "conference_schedule[3][room]",
            "conference_schedule[4][title]",
            "conference_schedule[4][time]",
            "conference_schedule[4][room]",
            "conference_schedule[5][title]",
            "conference_schedule[5][time]",
            "conference_schedule[5][room]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001826",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily schedule for a conference.\n\nFeature Requirements:\n- Use a top-level key named \"conference_schedule\".\n- Include exactly 6 entries as children under \"conference_schedule\".\n- Each entry must include three keys: \"time\", \"topic\", and \"speaker\".\n- The \"time\" key should hold a string formatted as \"HH:MM AM/PM\".\n- The \"topic\" key must hold a non-empty string describing the subject.\n- The \"speaker\" key must hold a non-empty string identifying the presenter.\n- Sort all entries in chronological order based on the \"time\" values.\n- Structure the YAML with an indentation of two spaces for nested elements.\n- Provide a top-level comment stating \"Plan for Daily Conference Agenda\".\n- Ensure there is no additional whitespace or empty lines between entries.",
        "raw_output_metric": [
            "conference_schedule",
            "conference_schedule[].time",
            "conference_schedule[].topic",
            "conference_schedule[].speaker"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001827",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a daily sightseeing itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 3 sightseeing locations as children under itinerary.\n- Each location must have exactly three keys: location, visit_time, and duration.\n- All location keys should have non-empty string values representing the destination names.\n- All visit_time keys should follow the 24-hour format (HH:MM) and be valid times.\n- All duration keys must contain integer values greater than zero to represent minutes.\n- Ensure the output is properly indented with two spaces for all nested structures, without extra lines.\n- Provide a top-level comment indicating \"Daily Sightseeing Itinerary\".",
        "raw_output_metric": [
            "# Daily Sightseeing Itinerary",
            "itinerary",
            "itinerary[0][location]",
            "itinerary[0][visit_time]",
            "itinerary[0][duration]",
            "itinerary[1][location]",
            "itinerary[1][visit_time]",
            "itinerary[1][duration]",
            "itinerary[2][location]",
            "itinerary[2][visit_time]",
            "itinerary[2][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001828",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a garden maintenance schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"garden_schedule\".\n- Include exactly three subsections under \"garden_schedule\": \"morning\", \"afternoon\", and \"evening\".\n- Each subsection must contain exactly two tasks listed as nested items.\n- Each task must have two keys: \"description\" (a non-empty string) and \"duration\" (an integer greater than zero representing minutes).\n- Order the tasks within each subsection exactly as described (first task followed by second task).\n- Use exactly two spaces for each level of indentation to structure the nested lists.\n- Start the YAML output with a top-level comment stating \"Automated Garden Schedule\".\n- Ensure there is no extra whitespace or blank lines between tasks and sections.\n- All keys and values must be correctly formatted according to valid YAML syntax.",
        "raw_output_metric": [
            "garden_schedule",
            "garden_schedule[morning]",
            "garden_schedule[morning][0][description]",
            "garden_schedule[morning][0][duration]",
            "garden_schedule[morning][1][description]",
            "garden_schedule[morning][1][duration]",
            "garden_schedule[afternoon]",
            "garden_schedule[afternoon][0][description]",
            "garden_schedule[afternoon][0][duration]",
            "garden_schedule[afternoon][1][description]",
            "garden_schedule[afternoon][1][duration]",
            "garden_schedule[evening]",
            "garden_schedule[evening][0][description]",
            "garden_schedule[evening][0][duration]",
            "garden_schedule[evening][1][description]",
            "garden_schedule[evening][1][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001829",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a collection of cooking recipes.\n\nFeature Requirements:\n- Start with a top-level key named \"recipes\".\n- Include exactly 3 recipe entries under \"recipes\", each represented as a mapping.\n- Each recipe must have three keys: \"title\", \"ingredients\", and \"steps\".\n- The \"title\" must be a non-empty string specifying the recipe name.\n- \"ingredients\" must be a list containing at least 3 non-empty string items.\n- \"steps\" must be a list of instructions with at least 3 items, each represented as a non-empty string.\n- Use exactly two spaces for indentation at every nested level.\n- Include a top-level comment saying \"Generated Recipe Collection\" at the beginning of the document.\n- Avoid any extra blank lines or trailing whitespace in the output.",
        "raw_output_metric": [
            "# Generated Recipe Collection",
            "recipes",
            "recipes[0][title]",
            "recipes[0][ingredients]",
            "recipes[0][steps]",
            "recipes[1][title]",
            "recipes[1][ingredients]",
            "recipes[1][steps]",
            "recipes[2][title]",
            "recipes[2][ingredients]",
            "recipes[2][steps]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001830",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the provided text into a YAML formatted guide for a fictional art gallery tour.\n\nFeature Requirements:\n- Begin with a single top-level key named art_gallery.\n- Include exactly 6 exhibits as items under art_gallery.\n- Each exhibit must have three keys: title, artist, and year.\n- All title and artist keys must include non-empty string values.\n- The year key must contain an integer value between 1500 and 2020.\n- Ensure that the exhibits are ordered alphabetically based on the artist field.\n- Use exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Art Gallery Guide\".\n- Do not include any additional whitespace or empty lines in the YAML output.\n- Avoid any extraneous keys beyond the specified structure.",
        "raw_output_metric": [
            "art_gallery",
            "art_gallery[0][title]",
            "art_gallery[0][artist]",
            "art_gallery[0][year]",
            "art_gallery[1][title]",
            "art_gallery[1][artist]",
            "art_gallery[1][year]",
            "art_gallery[2][title]",
            "art_gallery[2][artist]",
            "art_gallery[2][year]",
            "art_gallery[3][title]",
            "art_gallery[3][artist]",
            "art_gallery[3][year]",
            "art_gallery[4][title]",
            "art_gallery[4][artist]",
            "art_gallery[4][year]",
            "art_gallery[5][title]",
            "art_gallery[5][artist]",
            "art_gallery[5][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001831",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a weekly meal plan.\n\nFeature Requirements:\n- Begin with a single top-level key named meal_plan.\n- Include exactly 7 entries under meal_plan, each corresponding to a day of the week.\n- Each day entry must have exactly three keys: breakfast, lunch, and dinner.\n- All meal keys must have non-empty string values describing the meal.\n- Use two spaces for indentation for nested structures.\n- Provide a top-level comment indicating \"Generated Weekly Meal Plan\".\n- Ensure there is no extra whitespace or empty lines between entries.\n- The days must be in the order: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- All keys and values must be in lowercase letters where applicable.",
        "raw_output_metric": [
            "meal_plan",
            "meal_plan[monday]",
            "meal_plan[monday][breakfast]",
            "meal_plan[monday][lunch]",
            "meal_plan[monday][dinner]",
            "meal_plan[tuesday]",
            "meal_plan[tuesday][breakfast]",
            "meal_plan[tuesday][lunch]",
            "meal_plan[tuesday][dinner]",
            "meal_plan[wednesday]",
            "meal_plan[wednesday][breakfast]",
            "meal_plan[wednesday][lunch]",
            "meal_plan[wednesday][dinner]",
            "meal_plan[thursday]",
            "meal_plan[thursday][breakfast]",
            "meal_plan[thursday][lunch]",
            "meal_plan[thursday][dinner]",
            "meal_plan[friday]",
            "meal_plan[friday][breakfast]",
            "meal_plan[friday][lunch]",
            "meal_plan[friday][dinner]",
            "meal_plan[saturday]",
            "meal_plan[saturday][breakfast]",
            "meal_plan[saturday][lunch]",
            "meal_plan[saturday][dinner]",
            "meal_plan[sunday]",
            "meal_plan[sunday][breakfast]",
            "meal_plan[sunday][lunch]",
            "meal_plan[sunday][dinner]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001832",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the described underwater expedition event into a YAML format representing the event itinerary and clues.\n\nFeature Requirements:\n- Begin with a single top-level key named \"expedition\".\n- Under \"expedition\", include exactly two keys: \"routes\" and \"clues\".\n- The \"routes\" key must contain a list of exactly three items; each item should be a map with keys \"location\" and \"depth\", where \"location\" is a non-empty string and \"depth\" is an integer indicating meters below sea level.\n- The \"clues\" key must contain a list of exactly four string elements providing hints for the expedition.\n- Each string in the \"clues\" list must be non-empty and descriptive.\n- Indent all nested structures with exactly two spaces per level.\n- Start the YAML output with a top-level comment reading \"Generated Underwater Expedition Itinerary\".\n- Do not include any keys or data beyond what is specified.\n- Ensure there is no extra whitespace or empty lines between the keys and list items.",
        "raw_output_metric": [
            "expedition",
            "expedition[routes]",
            "expedition[routes][*][location]",
            "expedition[routes][*][depth]",
            "expedition[clues]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001833",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level key named \"travel_itinerary\".\n- Include exactly 4 entries under \"travel_itinerary\", each representing a planned trip segment.\n- Each entry must include three keys: \"destination\", \"departure_time\", and \"arrival_time\".\n- The \"destination\" key must have a non-empty string value representing a city name.\n- Both \"departure_time\" and \"arrival_time\" keys must contain string values in a 24-hour \"HH:MM\" format.\n- Ensure that for every entry, the \"departure_time\" is earlier than the \"arrival_time\".\n- The YAML must be indented with exactly two spaces per level.\n- Provide a top-level comment stating \"Auto-generated Travel Itinerary\".\n- Do not include any additional keys or empty lines between entries.\n- All values must strictly adhere to the specified formats and structure.",
        "raw_output_metric": [
            "# Auto-generated Travel Itinerary",
            "travel_itinerary",
            "travel_itinerary[0][destination]",
            "travel_itinerary[0][departure_time]",
            "travel_itinerary[0][arrival_time]",
            "travel_itinerary[1][destination]",
            "travel_itinerary[1][departure_time]",
            "travel_itinerary[1][arrival_time]",
            "travel_itinerary[2][destination]",
            "travel_itinerary[2][departure_time]",
            "travel_itinerary[2][arrival_time]",
            "travel_itinerary[3][destination]",
            "travel_itinerary[3][departure_time]",
            "travel_itinerary[3][arrival_time]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001834",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a local music festival event schedule.\n\nFeature Requirements:\n- Begin with a single top-level key named event_schedule.\n- Include exactly 6 events listed as children under event_schedule.\n- Each event must contain three keys: title, time, and venue.\n- All title and venue values must be non-empty strings.\n- Each time value must follow the 24-hour HH:MM format.\n- Ensure nested structures are indented with exactly two spaces per level.\n- Include a top-level comment at the beginning stating \"Festival Schedule\".",
        "raw_output_metric": [
            "event_schedule",
            "event_schedule[0][title]",
            "event_schedule[0][time]",
            "event_schedule[0][venue]",
            "event_schedule[1][title]",
            "event_schedule[1][time]",
            "event_schedule[1][venue]",
            "event_schedule[2][title]",
            "event_schedule[2][time]",
            "event_schedule[2][venue]",
            "event_schedule[3][title]",
            "event_schedule[3][time]",
            "event_schedule[3][venue]",
            "event_schedule[4][title]",
            "event_schedule[4][time]",
            "event_schedule[4][venue]",
            "event_schedule[5][title]",
            "event_schedule[5][time]",
            "event_schedule[5][venue]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001835",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an event itinerary for a city tour.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 4 events as children under the itinerary key.\n- Each event must contain exactly four keys: event_title, start_time, end_time, and location.\n- All event_title values must be non-empty strings describing the event.\n- Both start_time and end_time must be formatted as HH:MM in 24-hour time, with end_time occurring later than start_time.\n- Each location value must be a non-empty string indicating the venue of the event.\n- Indent nested structures using exactly two spaces.\n- Include a top-level comment reading \"City Tour Itinerary\" at the very beginning, with no extra whitespace or blank lines.",
        "raw_output_metric": [
            "itinerary",
            "itinerary[0][event_title]",
            "itinerary[0][start_time]",
            "itinerary[0][end_time]",
            "itinerary[0][location]",
            "itinerary[1][event_title]",
            "itinerary[1][start_time]",
            "itinerary[1][end_time]",
            "itinerary[1][location]",
            "itinerary[2][event_title]",
            "itinerary[2][start_time]",
            "itinerary[2][end_time]",
            "itinerary[2][location]",
            "itinerary[3][event_title]",
            "itinerary[3][start_time]",
            "itinerary[3][end_time]",
            "itinerary[3][location]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001836",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a movie collection.\n\nFeature Requirements:\n- Begin with a single top-level key named movie_collection.\n- Under movie_collection, include exactly 7 movie items as children.\n- Each movie item must contain three keys: title, director, and year.\n- The title and director keys should each have non-empty string values.\n- The year key must have an integer value representing a release year between 1900 and the current year.\n- Include a top-level YAML comment stating \"Generated Movie Catalog\" at the very beginning.\n- Ensure the YAML output is properly indented using two spaces for nested elements and contains no extra blank lines.",
        "raw_output_metric": [
            "movie_collection",
            "movie_collection[0][title]",
            "movie_collection[0][director]",
            "movie_collection[0][year]",
            "movie_collection[1][title]",
            "movie_collection[1][director]",
            "movie_collection[1][year]",
            "movie_collection[2][title]",
            "movie_collection[2][director]",
            "movie_collection[2][year]",
            "movie_collection[3][title]",
            "movie_collection[3][director]",
            "movie_collection[3][year]",
            "movie_collection[4][title]",
            "movie_collection[4][director]",
            "movie_collection[4][year]",
            "movie_collection[5][title]",
            "movie_collection[5][director]",
            "movie_collection[5][year]",
            "movie_collection[6][title]",
            "movie_collection[6][director]",
            "movie_collection[6][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001837",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a detailed daily schedule.\n\nFeature Requirements:\n- Begin with a top-level key named \"daily_schedule\".\n- Include exactly 6 schedule entries under \"daily_schedule\".\n- Each entry must have the keys \"time\", \"activity\", and \"duration\".\n- The \"time\" key should have a string value formatted as \"HH:MM\" in 24-hour notation.\n- The \"activity\" key should hold a non-empty string describing the task.\n- The \"duration\" key must have an integer value representing the length of the activity in minutes.\n- Ensure the output is indented with two spaces per nested level.\n- Include a top-level YAML comment stating \"Generated Daily Schedule\".\n- Do not include any extra keys, comments, or formatting outside the defined structure.\n- Arrange the schedule entries sequentially in the order of occurrence throughout the day.",
        "raw_output_metric": [
            "daily_schedule",
            "daily_schedule[0][time]",
            "daily_schedule[0][activity]",
            "daily_schedule[0][duration]",
            "daily_schedule[1][time]",
            "daily_schedule[1][activity]",
            "daily_schedule[1][duration]",
            "daily_schedule[2][time]",
            "daily_schedule[2][activity]",
            "daily_schedule[2][duration]",
            "daily_schedule[3][time]",
            "daily_schedule[3][activity]",
            "daily_schedule[3][duration]",
            "daily_schedule[4][time]",
            "daily_schedule[4][activity]",
            "daily_schedule[4][duration]",
            "daily_schedule[5][time]",
            "daily_schedule[5][activity]",
            "daily_schedule[5][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001838",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a restaurant menu.\n\nFeature Requirements:\n- Begin with a single top-level key named \"menu\".\n- Include exactly 6 dishes as children under \"menu\".\n- Each dish must have three keys: \"dish\", \"price\", and \"description\".\n- The \"dish\" key should have a non-empty string as its value.\n- The \"price\" key should have an integer value greater than zero.\n- The \"description\" key should have a non-empty string value.\n- Use two spaces for each level of indentation in the YAML structure.\n- Provide a top-level comment indicating \"Generated Restaurant Menu\".\n- Do not insert any extra whitespace or blank lines between items.\n- Ensure the YAML output does not include any additional keys or data.",
        "raw_output_metric": [
            "menu",
            "menu[0][dish]",
            "menu[0][price]",
            "menu[0][description]",
            "menu[1][dish]",
            "menu[1][price]",
            "menu[1][description]",
            "menu[2][dish]",
            "menu[2][price]",
            "menu[2][description]",
            "menu[3][dish]",
            "menu[3][price]",
            "menu[3][description]",
            "menu[4][dish]",
            "menu[4][price]",
            "menu[4][description]",
            "menu[5][dish]",
            "menu[5][price]",
            "menu[5][description]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001839",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a personal book library.\n\nFeature Requirements:\n- Begin with a single top-level key named \"library\".\n- Include exactly 6 items under \"library\", each representing an individual book.\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- The values for \"title\" and \"author\" must be non-empty strings.\n- The value for \"year\" must be an integer between 1900 and 2023.\n- Ensure the YAML output uses two spaces for indentation at every level.\n- Provide a top-level comment stating \"Library Books Collection\".\n- Do not include any additional keys or whitespace outside the defined structure.\n- All items must be listed consecutively without any blank lines between them.",
        "raw_output_metric": [
            "library",
            "library[0][title]",
            "library[0][author]",
            "library[0][year]",
            "library[1][title]",
            "library[1][author]",
            "library[1][year]",
            "library[2][title]",
            "library[2][author]",
            "library[2][year]",
            "library[3][title]",
            "library[3][author]",
            "library[3][year]",
            "library[4][title]",
            "library[4][author]",
            "library[4][year]",
            "library[5][title]",
            "library[5][author]",
            "library[5][year]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001840",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a book reading list.\n\nFeature Requirements:\n- Begin with a single key named \"reading_list\".\n- Include exactly 6 books as entries under \"reading_list\".\n- Each book entry must contain three keys: \"title\", \"author\", and \"pages\".\n- All \"title\" and \"author\" values must be non-empty strings.\n- Each \"pages\" value must be an integer greater than 50.\n- Use a list format with a dash (-) for each book entry, indented with two spaces.\n- Include a top-level comment stating \"Generated Book Reading List\" at the very beginning.\n- Do not add any keys or values other than those specified.\n- Ensure there is no extra whitespace or blank lines between book entries.\n- Write all YAML content exactly as outlined without any additional formatting.",
        "raw_output_metric": [
            "reading_list",
            "reading_list[0][title]",
            "reading_list[0][author]",
            "reading_list[0][pages]",
            "reading_list[1][title]",
            "reading_list[1][author]",
            "reading_list[1][pages]",
            "reading_list[2][title]",
            "reading_list[2][author]",
            "reading_list[2][pages]",
            "reading_list[3][title]",
            "reading_list[3][author]",
            "reading_list[3][pages]",
            "reading_list[4][title]",
            "reading_list[4][author]",
            "reading_list[4][pages]",
            "reading_list[5][title]",
            "reading_list[5][author]",
            "reading_list[5][pages]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001841",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a library's book catalog.\n\nFeature Requirements:\n- Begin with a single key named \"library_catalog\".\n- Include exactly 7 books as children under \"library_catalog\".\n- Each book must have three keys: \"title\", \"author\", and \"year\".\n- All \"title\" values must be non-empty strings.\n- All \"author\" values must be non-empty strings.\n- All \"year\" values must be integers between 1900 and 2023.\n- Ensure the output is properly indented with two spaces per nested level.\n- Provide a top-level comment indicating \"Generated Library Catalog\".\n- Avoid any additional whitespace or empty lines between items.",
        "raw_output_metric": [
            "# comment: Generated Library Catalog",
            "library_catalog",
            "library_catalog[0].title",
            "library_catalog[0].author",
            "library_catalog[0].year",
            "library_catalog[1].title",
            "library_catalog[1].author",
            "library_catalog[1].year",
            "library_catalog[2].title",
            "library_catalog[2].author",
            "library_catalog[2].year",
            "library_catalog[3].title",
            "library_catalog[3].author",
            "library_catalog[3].year",
            "library_catalog[4].title",
            "library_catalog[4].author",
            "library_catalog[4].year",
            "library_catalog[5].title",
            "library_catalog[5].author",
            "library_catalog[5].year",
            "library_catalog[6].title",
            "library_catalog[6].author",
            "library_catalog[6].year"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001842",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a weekly exercise plan.\n\nFeature Requirements:\n- Begin with a top-level key named exercise_plan.\n- Include exactly 7 entries under exercise_plan corresponding to each day of the week.\n- Each entry must contain 3 keys: day, activity, and duration_minutes.\n- The day value must be a non-empty string and one of the following unique options: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n- The activity value must be a non-empty string describing a physical exercise.\n- The duration_minutes value must be an integer between 15 and 120.\n- Ensure that all nested structures are indented with exactly two spaces.\n- Provide a top-level comment stating \"Weekly Exercise Plan\".\n- The entries must be ordered sequentially starting from Monday.\n- Avoid any additional keys, comments, or extra whitespace between entries.",
        "raw_output_metric": [
            "exercise_plan",
            "exercise_plan[0][day]",
            "exercise_plan[0][activity]",
            "exercise_plan[0][duration_minutes]",
            "exercise_plan[1][day]",
            "exercise_plan[1][activity]",
            "exercise_plan[1][duration_minutes]",
            "exercise_plan[2][day]",
            "exercise_plan[2][activity]",
            "exercise_plan[2][duration_minutes]",
            "exercise_plan[3][day]",
            "exercise_plan[3][activity]",
            "exercise_plan[3][duration_minutes]",
            "exercise_plan[4][day]",
            "exercise_plan[4][activity]",
            "exercise_plan[4][duration_minutes]",
            "exercise_plan[5][day]",
            "exercise_plan[5][activity]",
            "exercise_plan[5][duration_minutes]",
            "exercise_plan[6][day]",
            "exercise_plan[6][activity]",
            "exercise_plan[6][duration_minutes]",
            "# Weekly Exercise Plan"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001843",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nTransform the given text into a YAML formatted fantasy character roster for a role-playing game.\n\nFeature Requirements:\n- Begin with a single key named character_roster.\n- Include exactly 3 character entries as children under character_roster.\n- Each character entry must have four keys: name, class, level, and weapon.\n- All name keys should include non-empty strings without any whitespace.\n- The level key must include an integer value between 1 and 100.\n- The class key should be one of the following fixed values: Warrior, Mage, or Rogue.\n- The weapon key must contain a non-empty string starting with a capital letter.\n- Include a top-level comment stating \"Fantasy RPG Character Roster\".\n- Ensure the YAML output is properly indented with two spaces for each level of nesting.\n- Do not include extra whitespace or empty lines between entries.",
        "raw_output_metric": [
            "character_roster",
            "character_roster[].name",
            "character_roster[].class",
            "character_roster[].level",
            "character_roster[].weapon"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001844",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given narrative into a YAML format representing a fictional detective report.\n\nFeature Requirements:\n- Begin with a single top-level key named \"detective_report\".\n- Under \"detective_report\", include exactly three keys: \"case_id\", \"description\", and \"evidence\".\n- The \"case_id\" value must be a string following the pattern \"CASE-####\" where \"####\" are digits.\n- The \"description\" must be a non-empty string summarizing the case details.\n- The \"evidence\" must be a list containing exactly 4 items, with each item including two keys: \"item_name\" (non-empty string) and \"verified\" (boolean).\n- Ensure the output is indented with exactly two spaces per level and contains no extra blank lines between items.",
        "raw_output_metric": [
            "detective_report",
            "detective_report[case_id]",
            "detective_report[description]",
            "detective_report[evidence]",
            "detective_report[evidence][0][item_name]",
            "detective_report[evidence][0][verified]",
            "detective_report[evidence][1][item_name]",
            "detective_report[evidence][1][verified]",
            "detective_report[evidence][2][item_name]",
            "detective_report[evidence][2][verified]",
            "detective_report[evidence][3][item_name]",
            "detective_report[evidence][3][verified]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001845",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nGenerate a YAML document that represents a detailed itinerary for a weekend camping trip.\n\nFeature Requirements:\n- Begin with a single top-level key named \"camping_itinerary\".\n- The itinerary must include exactly three days: Day1, Day2, and Day3.\n- Each day should have two sub-keys: \"location\" and \"activities\".\n- The \"location\" value must be a non-empty string indicating the campsite.\n- The \"activities\" value must be an array containing exactly three non-empty string entries detailing planned activities.\n- Ensure the document uses two spaces for indentation in nested structures.\n- Add a top-level comment at the beginning saying \"Generated Camping Itinerary\".\n- Do not include any additional keys or extra whitespace beyond the specified structure.",
        "raw_output_metric": [
            "camping_itinerary",
            "camping_itinerary[Day1]",
            "camping_itinerary[Day1][location]",
            "camping_itinerary[Day1][activities]",
            "camping_itinerary[Day2]",
            "camping_itinerary[Day2][location]",
            "camping_itinerary[Day2][activities]",
            "camping_itinerary[Day3]",
            "camping_itinerary[Day3][location]",
            "camping_itinerary[Day3][activities]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001846",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the provided text into a YAML format representing a daily agenda.\n\nFeature Requirements:\n- Begin with a single key named \"agenda\".\n- Under \"agenda\", include exactly 3 event entries.\n- Each event entry must include three keys: \"title\", \"time\", and \"duration\".\n- The \"title\" key must hold a non-empty string describing the event.\n- The \"time\" key must hold a string in 24-hour HH:MM format.\n- The \"duration\" key must hold a positive integer representing the event's duration in minutes.\n- All nested structures must be indented with two spaces.\n- Include a top-level comment stating \"Generated Daily Agenda\" without any additional whitespace or blank lines.",
        "raw_output_metric": [
            "# Generated Daily Agenda",
            "agenda",
            "agenda[0]",
            "agenda[0][title]",
            "agenda[0][time]",
            "agenda[0][duration]",
            "agenda[1]",
            "agenda[1][title]",
            "agenda[1][time]",
            "agenda[1][duration]",
            "agenda[2]",
            "agenda[2][title]",
            "agenda[2][time]",
            "agenda[2][duration]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001847",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a top-level comment stating \"Travel Itinerary Details\".\n- Start with a single key named \"destinations\".\n- Ensure the \"destinations\" key contains exactly 6 entries.\n- Each entry must include three keys: \"city\", \"country\", and \"days\".\n- The \"city\" and \"country\" keys must have non-empty string values.\n- The \"days\" key must have an integer value greater than zero.\n- All nested structures must be indented using exactly two spaces.\n- Do not include any extra keys, comments, or blank lines beyond what is specified.\n- Ensure there is no additional whitespace other than required for proper indentation.",
        "raw_output_metric": [
            "destinations",
            "destinations[0][city]",
            "destinations[0][country]",
            "destinations[0][days]",
            "destinations[1][city]",
            "destinations[1][country]",
            "destinations[1][days]",
            "destinations[2][city]",
            "destinations[2][country]",
            "destinations[2][days]",
            "destinations[3][city]",
            "destinations[3][country]",
            "destinations[3][days]",
            "destinations[4][city]",
            "destinations[4][country]",
            "destinations[4][days]",
            "destinations[5][city]",
            "destinations[5][country]",
            "destinations[5][days]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001848",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a travel itinerary.\n\nFeature Requirements:\n- Begin with a single key named itinerary.\n- Include exactly 6 stops as children under itinerary.\n- Each stop must have three keys: location, date, and activities.\n- The location key must have a non-empty string value.\n- The date key must contain a valid ISO 8601 date in the format YYYY-MM-DD.\n- The activities key must be a list containing at least one non-empty string.\n- Each activity list must have unique values—no duplicates are allowed.\n- Ensure the output is properly indented with exactly two spaces for each nested level.\n- Provide a top-level comment indicating \"Generated Vacation Itinerary\".\n- Avoid any additional whitespace or empty lines between stops.",
        "raw_output_metric": [
            "# Generated Vacation Itinerary",
            "itinerary",
            "itinerary[0][location]",
            "itinerary[0][date]",
            "itinerary[0][activities]",
            "itinerary[1][location]",
            "itinerary[1][date]",
            "itinerary[1][activities]",
            "itinerary[2][location]",
            "itinerary[2][date]",
            "itinerary[2][activities]",
            "itinerary[3][location]",
            "itinerary[3][date]",
            "itinerary[3][activities]",
            "itinerary[4][location]",
            "itinerary[4][date]",
            "itinerary[4][activities]",
            "itinerary[5][location]",
            "itinerary[5][date]",
            "itinerary[5][activities]"
        ],
        "VQA": {}
    },
    {
        "task_name": "Text to YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "task_id": "001849",
        "input_type": "Text",
        "output_type": "YAML",
        "rendering": false,
        "query": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing an outdoor adventure itinerary.\n\nFeature Requirements:\n- Begin with a single top-level key named \"adventure_itinerary\".\n- Include exactly 4 planned stops as children under \"adventure_itinerary\".\n- Each stop must have three keys: \"location\", \"activity\", and \"duration\".\n- All \"location\" keys must contain non-empty string values indicating a scenic spot.\n- All \"activity\" keys must contain non-empty string values describing an adventure activity.\n- All \"duration\" keys must contain integer values greater than 30, representing minutes.\n- Ensure the YAML output uses exactly two spaces for each level of indentation.\n- Provide a top-level comment stating \"Generated Adventure Itinerary\".\n- Do not include any extra whitespace or empty lines between items.\n- Ensure the sequence of stops is preserved in their original order.",
        "raw_output_metric": [
            "adventure_itinerary",
            "adventure_itinerary[0][location]",
            "adventure_itinerary[0][activity]",
            "adventure_itinerary[0][duration]",
            "adventure_itinerary[1][location]",
            "adventure_itinerary[1][activity]",
            "adventure_itinerary[1][duration]",
            "adventure_itinerary[2][location]",
            "adventure_itinerary[2][activity]",
            "adventure_itinerary[2][duration]",
            "adventure_itinerary[3][location]",
            "adventure_itinerary[3][activity]",
            "adventure_itinerary[3][duration]"
        ],
        "VQA": {}
    }
]