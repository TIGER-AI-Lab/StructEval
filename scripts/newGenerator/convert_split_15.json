[
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nSettingID,Name,Category,Attributes,Items\nS001,\"Mystic Forest\",\"Enchanted\",\"color:green;weather:misty;depth:ancient\",\"tree:oak,tree:birch,creature:deer\"\nS002,\"Old Town\",\"Medieval\",\"color:gray;weather:rainy;era:renaissance\",\"building:castle,building:market,figure:merchant\"\nS003,\"Space Outpost\",\"Sci-Fi\",\"color:blue;environment:orbital;crew:diverse\",\"module:habitat,module:lab,figure:astronaut\"\n</code>",
            "feature_requirements": "• The output must be in XML format with a single root element that encapsulates all the settings.\n• Each row from the CSV must be represented as a distinct child element (for example, a \"Setting\" element) within the root.\n• Every setting element must include sub-elements corresponding to each CSV column: SettingID, Name, Category, Attributes, and Items.\n• The text values for SettingID, Name, and Category must be directly transferred from the CSV into their respective sub-elements.\n• The Attributes field must be broken into sub-elements or nested elements representing each key-value pair (e.g., an element for \"color\" with the value \"green\") as defined by the semicolon delimiters in the CSV.\n• The Items field must be separated by commas and each item must be represented as an individual sub-element within a parent Items element.\n• The conversion must produce exactly three distinct setting entries, each corresponding to one of the CSV data rows.",
            "task_id": "021707",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[Setting]",
                "root[Setting][SettingID]",
                "root[Setting][Name]",
                "root[Setting][Category]",
                "root[Setting][Attributes]",
                "root[Setting][Attributes][<attribute_key>]",
                "root[Setting][Items]",
                "root[Setting][Items][Item]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021707_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nSettingID,Name,Category,Attributes,Items\nS001,\"Mystic Forest\",\"Enchanted\",\"color:green;weather:misty;depth:ancient\",\"tree:oak,tree:birch,creature:deer\"\nS002,\"Old Town\",\"Medieval\",\"color:gray;weather:rainy;era:renaissance\",\"building:castle,building:market,figure:merchant\"\nS003,\"Space Outpost\",\"Sci-Fi\",\"color:blue;environment:orbital;crew:diverse\",\"module:habitat,module:lab,figure:astronaut\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021707_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[Setting]",
                                "root[Setting][SettingID]",
                                "root[Setting][Name]",
                                "root[Setting][Category]",
                                "root[Setting][Attributes]",
                                "root[Setting][Attributes][<attribute_key>]",
                                "root[Setting][Items]",
                                "root[Setting][Items][Item]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\n\"EmployeeID\",\"FullName\",\"Email\",\"Phone\",\"Skills\",\"Projects\"\n\"001\",\"Alice Johnson\",\"alice.johnson@example.com\",\"555-1234\",\"[\"\"Python\"\", \"\"Data Analysis\"\", \"\"Communication\"\"]\",\"[{\"\"projectName\"\": \"\"Sales Dashboard\"\", \"\"duration\"\": \"\"6 months\"\", \"\"technologies\"\": [\"\"Python\"\", \"\"Tableau\"\"]}, {\"\"projectName\"\": \"\"Customer Insights\"\", \"\"duration\"\": \"\"4 months\"\", \"\"technologies\"\": [\"\"SQL\"\", \"\"R\"\"]}]\"\n\"002\",\"Bob Smith\",\"bob.smith@example.com\",\"555-5678\",\"[\"\"Java\"\", \"\"Spring Boot\"\", \"\"Team Leadership\"\"]\",\"[{\"\"projectName\"\": \"\"Backend Revamp\"\", \"\"duration\"\": \"\"8 months\"\", \"\"technologies\"\": [\"\"Java\"\", \"\"Docker\"\"]}, {\"\"projectName\"\": \"\"API Development\"\", \"\"duration\"\": \"\"5 months\"\", \"\"technologies\"\": [\"\"Java\"\", \"\"REST\"\"]}]\"\n\"003\",\"Carol Davis\",\"carol.davis@example.com\",\"555-9012\",\"[\"\"JavaScript\"\", \"\"React\"\", \"\"Agile\"\"]\",\"[{\"\"projectName\"\": \"\"Web Portal\"\", \"\"duration\"\": \"\"7 months\"\", \"\"technologies\"\": [\"\"JavaScript\"\", \"\"React\"\", \"\"Node.js\"\"]}]\"\n</code>",
            "feature_requirements": "- The XML output must have a single root element (e.g., <Employees>) that encapsulates all employee records.\n- Each CSV row (excluding the header) must be converted into an individual <Employee> element under the root.\n- Each <Employee> element must contain child elements for EmployeeID, FullName, Email, and Phone, directly mapping the CSV values.\n- The Skills CSV field must be converted into an XML structure that represents a list of individual skill elements (e.g., multiple <Skill> elements within a <Skills> container).\n- The Projects CSV field must be converted into an XML structure that contains a <Projects> element with one or more <Project> sub-elements.\n- Each <Project> element must include child elements corresponding to the keys found in the JSON-like structure (e.g., <projectName>, <duration>, and <technologies>).\n- The technologies list within each project must be represented as a series of individual elements (e.g., multiple <Technology> elements within a <technologies> container).\n- The XML structure must preserve all data values exactly as provided in the CSV without modification or loss.",
            "task_id": "021708",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "Employees",
                "Employees[Employee]",
                "Employees[Employee][EmployeeID]",
                "Employees[Employee][FullName]",
                "Employees[Employee][Email]",
                "Employees[Employee][Phone]",
                "Employees[Employee][Skills]",
                "Employees[Employee][Skills][Skill]",
                "Employees[Employee][Projects]",
                "Employees[Employee][Projects][Project]",
                "Employees[Employee][Projects][Project][projectName]",
                "Employees[Employee][Projects][Project][duration]",
                "Employees[Employee][Projects][Project][technologies]",
                "Employees[Employee][Projects][Project][technologies][Technology]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021708_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\n\"EmployeeID\",\"FullName\",\"Email\",\"Phone\",\"Skills\",\"Projects\"\n\"001\",\"Alice Johnson\",\"alice.johnson@example.com\",\"555-1234\",\"[\"\"Python\"\", \"\"Data Analysis\"\", \"\"Communication\"\"]\",\"[{\"\"projectName\"\": \"\"Sales Dashboard\"\", \"\"duration\"\": \"\"6 months\"\", \"\"technologies\"\": [\"\"Python\"\", \"\"Tableau\"\"]}, {\"\"projectName\"\": \"\"Customer Insights\"\", \"\"duration\"\": \"\"4 months\"\", \"\"technologies\"\": [\"\"SQL\"\", \"\"R\"\"]}]\"\n\"002\",\"Bob Smith\",\"bob.smith@example.com\",\"555-5678\",\"[\"\"Java\"\", \"\"Spring Boot\"\", \"\"Team Leadership\"\"]\",\"[{\"\"projectName\"\": \"\"Backend Revamp\"\", \"\"duration\"\": \"\"8 months\"\", \"\"technologies\"\": [\"\"Java\"\", \"\"Docker\"\"]}, {\"\"projectName\"\": \"\"API Development\"\", \"\"duration\"\": \"\"5 months\"\", \"\"technologies\"\": [\"\"Java\"\", \"\"REST\"\"]}]\"\n\"003\",\"Carol Davis\",\"carol.davis@example.com\",\"555-9012\",\"[\"\"JavaScript\"\", \"\"React\"\", \"\"Agile\"\"]\",\"[{\"\"projectName\"\": \"\"Web Portal\"\", \"\"duration\"\": \"\"7 months\"\", \"\"technologies\"\": [\"\"JavaScript\"\", \"\"React\"\", \"\"Node.js\"\"]}]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021708_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Employees",
                                "Employees[Employee]",
                                "Employees[Employee][EmployeeID]",
                                "Employees[Employee][FullName]",
                                "Employees[Employee][Email]",
                                "Employees[Employee][Phone]",
                                "Employees[Employee][Skills]",
                                "Employees[Employee][Skills][Skill]",
                                "Employees[Employee][Projects]",
                                "Employees[Employee][Projects][Project]",
                                "Employees[Employee][Projects][Project][projectName]",
                                "Employees[Employee][Projects][Project][duration]",
                                "Employees[Employee][Projects][Project][technologies]",
                                "Employees[Employee][Projects][Project][technologies][Technology]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,facility,sector,sensors,active_alerts\n001,Deep Sea Lab,Alpha-3,\"{\"\"temperature\"\": 19, \"\"salinity\"\": 34, \"\"pressure\"\": 1023}\",\"[]\"\n002,Deep Sea Lab,Beta-1,\"{\"\"temperature\"\": 18, \"\"salinity\"\": 32, \"\"pressure\"\": 1021}\",\"[\"\"oxygen_low\"\",\"\"intruder_detected\"\"]\"\n003,Deep Sea Lab,Gamma-2,\"{\"\"temperature\"\": 20, \"\"salinity\"\": 36, \"\"pressure\"\": 1025}\",\"[\"\"power_fluctuation\"\"]\"\n</code>",
            "feature_requirements": "• The output must be a well-formed XML document.\n\n• There should be a top-level (root) element that contains all the individual record elements.\n\n• Each row from the CSV (excluding the header) must be converted into a distinct XML element representing a record.\n\n• Every record element must include child elements corresponding to each field in the CSV: id, facility, sector, sensors, and active_alerts.\n\n• The id, facility, and sector fields must appear as individual XML elements with their respective text values exactly as given in the CSV.\n\n• The sensors field must be converted into a nested element containing sub-elements for each sensor parameter (e.g., temperature, salinity, pressure) with their numeric values.\n\n• The active_alerts field must be converted into a nested list structure. If there are alert strings provided, each must be represented as a separate child element under the alerts container; if the list is empty, it must be reflected accordingly.\n\n• The conversion must accurately preserve and represent numeric values and string data as provided in the CSV without alteration.",
            "task_id": "021709",
            "task_name": "Convert CSV to XML",
            "input_type": "CSV",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[record]",
                "root[record][id]",
                "root[record][facility]",
                "root[record][sector]",
                "root[record][sensors]",
                "root[record][sensors][temperature]",
                "root[record][sensors][salinity]",
                "root[record][sensors][pressure]",
                "root[record][active_alerts]",
                "root[record][active_alerts][alert]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021709_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following CSV code to XML code.\n\n<code>\nid,facility,sector,sensors,active_alerts\n001,Deep Sea Lab,Alpha-3,\"{\"\"temperature\"\": 19, \"\"salinity\"\": 34, \"\"pressure\"\": 1023}\",\"[]\"\n002,Deep Sea Lab,Beta-1,\"{\"\"temperature\"\": 18, \"\"salinity\"\": 32, \"\"pressure\"\": 1021}\",\"[\"\"oxygen_low\"\",\"\"intruder_detected\"\"]\"\n003,Deep Sea Lab,Gamma-2,\"{\"\"temperature\"\": 20, \"\"salinity\"\": 36, \"\"pressure\"\": 1025}\",\"[\"\"power_fluctuation\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021709_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[record]",
                                "root[record][id]",
                                "root[record][facility]",
                                "root[record][sector]",
                                "root[record][sensors]",
                                "root[record][sensors][temperature]",
                                "root[record][sensors][salinity]",
                                "root[record][sensors][pressure]",
                                "root[record][active_alerts]",
                                "root[record][active_alerts][alert]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n  <General>\n    <AppName>DataConverter</AppName>\n    <Version>1.3.5</Version>\n    <Language>en</Language>\n  </General>\n  <Logging>\n    <Level>Info</Level>\n    <Output>Console</Output>\n    <Archive>\n      <Enabled>true</Enabled>\n      <RetentionDays>30</RetentionDays>\n    </Archive>\n  </Logging>\n  <DataSources>\n    <Source type=\"XML\">\n      <FilePath>/data/input.xml</FilePath>\n      <Delimiter>,</Delimiter>\n    </Source>\n    <Source type=\"JSON\">\n      <FilePath>/data/input.json</FilePath>\n    </Source>\n  </DataSources>\n  <Transformations>\n    <RuleSets>\n      <RuleSet name=\"Normalization\">\n        <Rules>\n          <Rule field=\"price\" type=\"rounding\">2</Rule>\n          <Rule field=\"timestamp\" format=\"ISO8601\">true</Rule>\n        </Rules>\n      </RuleSet>\n      <RuleSet name=\"Validation\">\n        <Rules>\n          <Rule field=\"email\" regex=\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\" />\n          <Rule field=\"phone\" regex=\"^\\d{10}$\" />\n        </Rules>\n      </RuleSet>\n    </RuleSets>\n  </Transformations>\n</Configuration>\n</code>",
            "feature_requirements": "• The output must have a top-level dictionary with keys corresponding to the XML elements: General, Logging, DataSources, and Transformations.\n\n• Under General, the YAML must contain keys for AppName, Version, and Language with the corresponding string values \"DataConverter\", \"1.3.5\", and \"en\".\n\n• Under Logging, the YAML must include keys for Level and Output with their string values \"Info\" and \"Console\", and a nested Archive section containing Enabled with the boolean value true and RetentionDays with the numeric value 30.\n\n• The DataSources section must be represented as a list (or sequence) of Source entries where each entry includes a type attribute, a FilePath key, and an optional Delimiter key (present only for the XML source with value \",\").\n\n• Under Transformations, there must be a nested RuleSets section containing multiple RuleSet entries, each identified by a name attribute and containing a nested list of Rules. Each Rule must include a field attribute; the rules in the \"Normalization\" set must include an additional type (or format) attribute with the corresponding value (\"rounding\" or \"ISO8601\") and a text value (\"2\" for price and \"true\" for timestamp), while the \"Validation\" set rules must include a regex attribute with the specified regular expressions.",
            "task_id": "171800",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "General",
                "General[AppName]",
                "General[Version]",
                "General[Language]",
                "Logging",
                "Logging[Level]",
                "Logging[Output]",
                "Logging[Archive]",
                "Logging[Archive][Enabled]",
                "Logging[Archive][RetentionDays]",
                "DataSources",
                "DataSources[*][type]",
                "DataSources[*][FilePath]",
                "DataSources[*][Delimiter]",
                "Transformations",
                "Transformations[RuleSets]",
                "Transformations[RuleSets][*][name]",
                "Transformations[RuleSets][*][Rules]",
                "Transformations[RuleSets][*][Rules][*][field]",
                "Transformations[RuleSets][*][Rules][*][type]",
                "Transformations[RuleSets][*][Rules][*][text]",
                "Transformations[RuleSets][*][Rules][*][regex]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171800_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n  <General>\n    <AppName>DataConverter</AppName>\n    <Version>1.3.5</Version>\n    <Language>en</Language>\n  </General>\n  <Logging>\n    <Level>Info</Level>\n    <Output>Console</Output>\n    <Archive>\n      <Enabled>true</Enabled>\n      <RetentionDays>30</RetentionDays>\n    </Archive>\n  </Logging>\n  <DataSources>\n    <Source type=\"XML\">\n      <FilePath>/data/input.xml</FilePath>\n      <Delimiter>,</Delimiter>\n    </Source>\n    <Source type=\"JSON\">\n      <FilePath>/data/input.json</FilePath>\n    </Source>\n  </DataSources>\n  <Transformations>\n    <RuleSets>\n      <RuleSet name=\"Normalization\">\n        <Rules>\n          <Rule field=\"price\" type=\"rounding\">2</Rule>\n          <Rule field=\"timestamp\" format=\"ISO8601\">true</Rule>\n        </Rules>\n      </RuleSet>\n      <RuleSet name=\"Validation\">\n        <Rules>\n          <Rule field=\"email\" regex=\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\" />\n          <Rule field=\"phone\" regex=\"^\\d{10}$\" />\n        </Rules>\n      </RuleSet>\n    </RuleSets>\n  </Transformations>\n</Configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171800_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "General",
                                "General[AppName]",
                                "General[Version]",
                                "General[Language]",
                                "Logging",
                                "Logging[Level]",
                                "Logging[Output]",
                                "Logging[Archive]",
                                "Logging[Archive][Enabled]",
                                "Logging[Archive][RetentionDays]",
                                "DataSources",
                                "DataSources[*][type]",
                                "DataSources[*][FilePath]",
                                "DataSources[*][Delimiter]",
                                "Transformations",
                                "Transformations[RuleSets]",
                                "Transformations[RuleSets][*][name]",
                                "Transformations[RuleSets][*][Rules]",
                                "Transformations[RuleSets][*][Rules][*][field]",
                                "Transformations[RuleSets][*][Rules][*][type]",
                                "Transformations[RuleSets][*][Rules][*][text]",
                                "Transformations[RuleSets][*][Rules][*][regex]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n    <metadata>\n        <version>1.0.0</version>\n        <timestamp>2023-10-22T12:34:56</timestamp>\n    </metadata>\n    <users>\n        <user>\n            <id>001</id>\n            <name>Alice Johnson</name>\n            <roles>\n                <role>Admin</role>\n                <role>Editor</role>\n            </roles>\n        </user>\n        <user>\n            <id>002</id>\n            <name>Bob Smith</name>\n            <roles>\n                <role>Viewer</role>\n            </roles>\n        </user>\n    </users>\n    <config>\n        <theme>light</theme>\n        <refreshRate>30</refreshRate>\n        <notifications>\n            <email>true</email>\n            <sms>false</sms>\n        </notifications>\n    </config>\n    <logs>\n        <log>\n            <entryId>log_001</entryId>\n            <message>System initialization complete.</message>\n            <severity>info</severity>\n        </log>\n        <log>\n            <entryId>log_002</entryId>\n            <message>User Alice logged in.</message>\n            <severity>info</severity>\n        </log>\n    </logs>\n    <settings>\n        <language>en_US</language>\n        <timezone>America/New_York</timezone>\n        <preferences>\n            <preference>\n                <key>autoUpdate</key>\n                <value>true</value>\n            </preference>\n            <preference>\n                <key>backupFrequency</key>\n                <value>daily</value>\n            </preference>\n        </preferences>\n    </settings>\n</data>\n</code>",
            "feature_requirements": "• The output must include a main data container with separate sections for metadata, users, config, logs, and settings.  \n• The metadata section must contain both a version and a timestamp element with corresponding values.  \n• The users section must represent multiple user entries, each having an id, name, and a list of roles.  \n• Each user’s roles must be structured as a list containing one or more role values.  \n• The config section must include elements for theme and refreshRate, as well as a notifications subgroup that contains both email and sms settings.  \n• The logs section must contain a list of log entries where each log includes an entryId, message, and severity value.  \n• The settings section must include language, timezone, and a preferences subgroup, where preferences is represented as a list of key-value pairs.  \n• Each preference in the settings must have a key and a corresponding value.",
            "task_id": "171801",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "metadata",
                "metadata[version]",
                "metadata[timestamp]",
                "users",
                "users[].id",
                "users[].name",
                "users[].roles",
                "config",
                "config[theme]",
                "config[refreshRate]",
                "config[notifications]",
                "config[notifications][email]",
                "config[notifications][sms]",
                "logs",
                "logs[].entryId",
                "logs[].message",
                "logs[].severity",
                "settings",
                "settings[language]",
                "settings[timezone]",
                "settings[preferences]",
                "settings[preferences][][key]",
                "settings[preferences][][value]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171801_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n    <metadata>\n        <version>1.0.0</version>\n        <timestamp>2023-10-22T12:34:56</timestamp>\n    </metadata>\n    <users>\n        <user>\n            <id>001</id>\n            <name>Alice Johnson</name>\n            <roles>\n                <role>Admin</role>\n                <role>Editor</role>\n            </roles>\n        </user>\n        <user>\n            <id>002</id>\n            <name>Bob Smith</name>\n            <roles>\n                <role>Viewer</role>\n            </roles>\n        </user>\n    </users>\n    <config>\n        <theme>light</theme>\n        <refreshRate>30</refreshRate>\n        <notifications>\n            <email>true</email>\n            <sms>false</sms>\n        </notifications>\n    </config>\n    <logs>\n        <log>\n            <entryId>log_001</entryId>\n            <message>System initialization complete.</message>\n            <severity>info</severity>\n        </log>\n        <log>\n            <entryId>log_002</entryId>\n            <message>User Alice logged in.</message>\n            <severity>info</severity>\n        </log>\n    </logs>\n    <settings>\n        <language>en_US</language>\n        <timezone>America/New_York</timezone>\n        <preferences>\n            <preference>\n                <key>autoUpdate</key>\n                <value>true</value>\n            </preference>\n            <preference>\n                <key>backupFrequency</key>\n                <value>daily</value>\n            </preference>\n        </preferences>\n    </settings>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171801_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "metadata",
                                "metadata[version]",
                                "metadata[timestamp]",
                                "users",
                                "users[].id",
                                "users[].name",
                                "users[].roles",
                                "config",
                                "config[theme]",
                                "config[refreshRate]",
                                "config[notifications]",
                                "config[notifications][email]",
                                "config[notifications][sms]",
                                "logs",
                                "logs[].entryId",
                                "logs[].message",
                                "logs[].severity",
                                "settings",
                                "settings[language]",
                                "settings[timezone]",
                                "settings[preferences]",
                                "settings[preferences][][key]",
                                "settings[preferences][][value]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n  <database>\n    <driver>PostgreSQL</driver>\n    <host>127.0.0.1</host>\n    <port>5432</port>\n    <username>admin</username>\n    <password>secret</password>\n  </database>\n  <logging>\n    <level>DEBUG</level>\n    <output>console</output>\n    <format>%d{yyyy-MM-dd HH:mm:ss} %-5level - %msg%n</format>\n  </logging>\n  <modules>\n    <module>\n      <name>UserManagement</name>\n      <enabled>true</enabled>\n      <roles>\n        <role>admin</role>\n        <role>editor</role>\n      </roles>\n    </module>\n    <module>\n      <name>Inventory</name>\n      <enabled>false</enabled>\n      <roles>\n        <role>viewer</role>\n      </roles>\n    </module>\n    <module>\n      <name>Analytics</name>\n      <enabled>true</enabled>\n      <roles>\n        <role>analyst</role>\n        <role>manager</role>\n      </roles>\n    </module>\n  </modules>\n  <features>\n    <feature name=\"auto_backup\">true</feature>\n    <feature name=\"real_time_sync\">false</feature>\n    <feature name=\"multi_language_support\">true</feature>\n  </features>\n</configuration>\n</code>",
            "feature_requirements": "• The output must be structured as a top-level mapping with keys corresponding to the sections: \"database\", \"logging\", \"modules\", and \"features\".  \n• Under the \"database\" section, there should be keys for \"driver\", \"host\", \"port\", \"username\", and \"password\", with each key associated with its respective value from the XML.  \n• The \"logging\" section must contain keys for \"level\", \"output\", and \"format\" with their corresponding string values.  \n• The \"modules\" section must be represented as a list where each item is a mapping containing a \"name\", an \"enabled\" flag, and a nested \"roles\" list.  \n• Each module's \"roles\" must be a list containing the role strings as provided in the XML.  \n• The \"features\" section must reflect the XML features by mapping each feature (using its \"name\" attribute) to its corresponding value.  \n• All values must be preserved exactly as specified (including booleans and numbers) to allow for objective verification of the conversion.",
            "task_id": "171802",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "database",
                "database[driver]",
                "database[host]",
                "database[port]",
                "database[username]",
                "database[password]",
                "logging",
                "logging[level]",
                "logging[output]",
                "logging[format]",
                "modules",
                "modules[].name",
                "modules[].enabled",
                "modules[].roles",
                "modules[].roles[]",
                "features"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171802_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n  <database>\n    <driver>PostgreSQL</driver>\n    <host>127.0.0.1</host>\n    <port>5432</port>\n    <username>admin</username>\n    <password>secret</password>\n  </database>\n  <logging>\n    <level>DEBUG</level>\n    <output>console</output>\n    <format>%d{yyyy-MM-dd HH:mm:ss} %-5level - %msg%n</format>\n  </logging>\n  <modules>\n    <module>\n      <name>UserManagement</name>\n      <enabled>true</enabled>\n      <roles>\n        <role>admin</role>\n        <role>editor</role>\n      </roles>\n    </module>\n    <module>\n      <name>Inventory</name>\n      <enabled>false</enabled>\n      <roles>\n        <role>viewer</role>\n      </roles>\n    </module>\n    <module>\n      <name>Analytics</name>\n      <enabled>true</enabled>\n      <roles>\n        <role>analyst</role>\n        <role>manager</role>\n      </roles>\n    </module>\n  </modules>\n  <features>\n    <feature name=\"auto_backup\">true</feature>\n    <feature name=\"real_time_sync\">false</feature>\n    <feature name=\"multi_language_support\">true</feature>\n  </features>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171802_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "database",
                                "database[driver]",
                                "database[host]",
                                "database[port]",
                                "database[username]",
                                "database[password]",
                                "logging",
                                "logging[level]",
                                "logging[output]",
                                "logging[format]",
                                "modules",
                                "modules[].name",
                                "modules[].enabled",
                                "modules[].roles",
                                "modules[].roles[]",
                                "features"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<document>\n  <customers>\n    <customer id=\"C001\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <address>\n        <street>123 Maple Street</street>\n        <city>Springfield</city>\n        <state>IL</state>\n        <postalCode>62704</postalCode>\n      </address>\n      <orders>\n        <order id=\"O1001\">\n          <date>2023-10-10</date>\n          <total>89.99</total>\n          <items>\n            <item>\n              <productId>P001</productId>\n              <quantity>2</quantity>\n              <price>29.99</price>\n            </item>\n            <item>\n              <productId>P002</productId>\n              <quantity>1</quantity>\n              <price>29.99</price>\n            </item>\n          </items>\n        </order>\n        <order id=\"O1002\">\n          <date>2023-10-12</date>\n          <total>49.99</total>\n          <items>\n            <item>\n              <productId>P003</productId>\n              <quantity>1</quantity>\n              <price>49.99</price>\n            </item>\n          </items>\n        </order>\n      </orders>\n    </customer>\n    <customer id=\"C002\">\n      <name>Robert Johnson</name>\n      <email>robert.johnson@example.com</email>\n      <address>\n        <street>456 Oak Avenue</street>\n        <city>Lincoln</city>\n        <state>NE</state>\n        <postalCode>68508</postalCode>\n      </address>\n      <orders>\n        <order id=\"O1003\">\n          <date>2023-10-15</date>\n          <total>39.99</total>\n          <items>\n            <item>\n              <productId>P004</productId>\n              <quantity>3</quantity>\n              <price>13.33</price>\n            </item>\n          </items>\n        </order>\n      </orders>\n    </customer>\n  </customers>\n  <products>\n    <product id=\"P001\">\n      <name>Wireless Mouse</name>\n      <category>Electronics</category>\n      <price>29.99</price>\n    </product>\n    <product id=\"P002\">\n      <name>Keyboard</name>\n      <category>Electronics</category>\n      <price>29.99</price>\n    </product>\n    <product id=\"P003\">\n      <name>USB-C Hub</name>\n      <category>Accessories</category>\n      <price>49.99</price>\n    </product>\n    <product id=\"P004\">\n      <name>Portable Charger</name>\n      <category>Gadgets</category>\n      <price>13.33</price>\n    </product>\n  </products>\n  <settings>\n    <option name=\"currency\">USD</option>\n    <option name=\"language\">en-US</option>\n    <option name=\"taxRate\">0.07</option>\n  </settings>\n  <logs>\n    <log>\n      <timestamp>2023-10-10T09:15:30Z</timestamp>\n      <level>Info</level>\n      <message>System initialized.</message>\n    </log>\n    <log>\n      <timestamp>2023-10-12T14:42:00Z</timestamp>\n      <level>Warning</level>\n      <message>Payment processing delayed.</message>\n    </log>\n    <log>\n      <timestamp>2023-10-15T18:23:45Z</timestamp>\n      <level>Error</level>\n      <message>Database connection failed.</message>\n    </log>\n  </logs>\n</document>\n</code>",
            "feature_requirements": "• The output must have a top-level structure representing the XML \"document\" that contains sections for customers, products, settings, and logs.  \n• The customers section must convert each <customer> into an entry that includes an id, name, email, an address, and orders.  \n• Each customer's address must include keys for street, city, state, and postalCode, reflecting the nested XML structure.  \n• The orders for each customer must be represented as a list where each order entry includes its id, date, total, and a list of items.  \n• Each order's items must be represented as a list with each item containing keys for productId, quantity, and price.  \n• The products section must convert each <product> into a list entry with an id, name, category, and price.  \n• The settings section must list each option as a key-value pair where the key is the name attribute (e.g., currency, language, taxRate) and the value is the associated text.  \n• The logs section must represent each <log> as an entry in a list with keys for timestamp, level, and message.",
            "task_id": "171803",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "document[customers]",
                "document[customers][].id",
                "document[customers][].name",
                "document[customers][].email",
                "document[customers][].address[street]",
                "document[customers][].address[city]",
                "document[customers][].address[state]",
                "document[customers][].address[postalCode]",
                "document[customers][].orders",
                "document[customers][].orders[].id",
                "document[customers][].orders[].date",
                "document[customers][].orders[].total",
                "document[customers][].orders[].items",
                "document[customers][].orders[].items[].productId",
                "document[customers][].orders[].items[].quantity",
                "document[customers][].orders[].items[].price",
                "document[products]",
                "document[products][].id",
                "document[products][].name",
                "document[products][].category",
                "document[products][].price",
                "document[settings]",
                "document[logs]",
                "document[logs][].timestamp",
                "document[logs][].level",
                "document[logs][].message"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171803_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<document>\n  <customers>\n    <customer id=\"C001\">\n      <name>Jane Smith</name>\n      <email>jane.smith@example.com</email>\n      <address>\n        <street>123 Maple Street</street>\n        <city>Springfield</city>\n        <state>IL</state>\n        <postalCode>62704</postalCode>\n      </address>\n      <orders>\n        <order id=\"O1001\">\n          <date>2023-10-10</date>\n          <total>89.99</total>\n          <items>\n            <item>\n              <productId>P001</productId>\n              <quantity>2</quantity>\n              <price>29.99</price>\n            </item>\n            <item>\n              <productId>P002</productId>\n              <quantity>1</quantity>\n              <price>29.99</price>\n            </item>\n          </items>\n        </order>\n        <order id=\"O1002\">\n          <date>2023-10-12</date>\n          <total>49.99</total>\n          <items>\n            <item>\n              <productId>P003</productId>\n              <quantity>1</quantity>\n              <price>49.99</price>\n            </item>\n          </items>\n        </order>\n      </orders>\n    </customer>\n    <customer id=\"C002\">\n      <name>Robert Johnson</name>\n      <email>robert.johnson@example.com</email>\n      <address>\n        <street>456 Oak Avenue</street>\n        <city>Lincoln</city>\n        <state>NE</state>\n        <postalCode>68508</postalCode>\n      </address>\n      <orders>\n        <order id=\"O1003\">\n          <date>2023-10-15</date>\n          <total>39.99</total>\n          <items>\n            <item>\n              <productId>P004</productId>\n              <quantity>3</quantity>\n              <price>13.33</price>\n            </item>\n          </items>\n        </order>\n      </orders>\n    </customer>\n  </customers>\n  <products>\n    <product id=\"P001\">\n      <name>Wireless Mouse</name>\n      <category>Electronics</category>\n      <price>29.99</price>\n    </product>\n    <product id=\"P002\">\n      <name>Keyboard</name>\n      <category>Electronics</category>\n      <price>29.99</price>\n    </product>\n    <product id=\"P003\">\n      <name>USB-C Hub</name>\n      <category>Accessories</category>\n      <price>49.99</price>\n    </product>\n    <product id=\"P004\">\n      <name>Portable Charger</name>\n      <category>Gadgets</category>\n      <price>13.33</price>\n    </product>\n  </products>\n  <settings>\n    <option name=\"currency\">USD</option>\n    <option name=\"language\">en-US</option>\n    <option name=\"taxRate\">0.07</option>\n  </settings>\n  <logs>\n    <log>\n      <timestamp>2023-10-10T09:15:30Z</timestamp>\n      <level>Info</level>\n      <message>System initialized.</message>\n    </log>\n    <log>\n      <timestamp>2023-10-12T14:42:00Z</timestamp>\n      <level>Warning</level>\n      <message>Payment processing delayed.</message>\n    </log>\n    <log>\n      <timestamp>2023-10-15T18:23:45Z</timestamp>\n      <level>Error</level>\n      <message>Database connection failed.</message>\n    </log>\n  </logs>\n</document>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171803_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "document[customers]",
                                "document[customers][].id",
                                "document[customers][].name",
                                "document[customers][].email",
                                "document[customers][].address[street]",
                                "document[customers][].address[city]",
                                "document[customers][].address[state]",
                                "document[customers][].address[postalCode]",
                                "document[customers][].orders",
                                "document[customers][].orders[].id",
                                "document[customers][].orders[].date",
                                "document[customers][].orders[].total",
                                "document[customers][].orders[].items",
                                "document[customers][].orders[].items[].productId",
                                "document[customers][].orders[].items[].quantity",
                                "document[customers][].orders[].items[].price",
                                "document[products]",
                                "document[products][].id",
                                "document[products][].name",
                                "document[products][].category",
                                "document[products][].price",
                                "document[settings]",
                                "document[logs]",
                                "document[logs][].timestamp",
                                "document[logs][].level",
                                "document[logs][].message"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<order>\n  <orderId>12345</orderId>\n  <customer>\n    <customerId>C001</customerId>\n    <name>John Doe</name>\n    <email>john.doe@example.com</email>\n    <phone>555-1234</phone>\n  </customer>\n  <orderDate>2023-10-01</orderDate>\n  <items>\n    <item>\n      <productId>P1001</productId>\n      <productName>Wireless Mouse</productName>\n      <quantity>2</quantity>\n      <price>25.99</price>\n    </item>\n    <item>\n      <productId>P1002</productId>\n      <productName>Mechanical Keyboard</productName>\n      <quantity>1</quantity>\n      <price>79.99</price>\n    </item>\n    <item>\n      <productId>P1003</productId>\n      <productName>HD Monitor</productName>\n      <quantity>1</quantity>\n      <price>199.99</price>\n    </item>\n  </items>\n  <shipping>\n    <address>\n      <street>123 Main St</street>\n      <city>Springfield</city>\n      <state>IL</state>\n      <postalCode>62704</postalCode>\n      <country>USA</country>\n    </address>\n    <method>Express</method>\n    <trackingNumber>EXP123456789</trackingNumber>\n  </shipping>\n</order>\n</code>",
            "feature_requirements": "• The output must present a top-level key representing the \"order\" element, encapsulating all other elements.  \n• There should be a key for \"orderId\" holding the order number (e.g., \"12345\") as its value.  \n• The \"customer\" element must be converted into a mapping that includes keys for \"customerId\", \"name\", \"email\", and \"phone\", each paired with their corresponding values.  \n• The \"orderDate\" element should be directly represented with its date value (e.g., \"2023-10-01\").  \n• The \"items\" element must be represented as a list, where each item in the list is a mapping containing keys \"productId\", \"productName\", \"quantity\", and \"price\" with their respective values.  \n• The \"shipping\" element needs to be converted into a mapping that includes an \"address\" mapping and additional keys \"method\" and \"trackingNumber\".  \n• The \"address\" mapping should include keys for \"street\", \"city\", \"state\", \"postalCode\", and \"country\", each with its respective content.",
            "task_id": "171804",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "order",
                "order[orderId]",
                "order[orderDate]",
                "order[customer][customerId]",
                "order[customer][name]",
                "order[customer][email]",
                "order[customer][phone]",
                "order[items]",
                "order[items][*][productId]",
                "order[items][*][productName]",
                "order[items][*][quantity]",
                "order[items][*][price]",
                "order[shipping][address][street]",
                "order[shipping][address][city]",
                "order[shipping][address][state]",
                "order[shipping][address][postalCode]",
                "order[shipping][address][country]",
                "order[shipping][method]",
                "order[shipping][trackingNumber]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171804_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<order>\n  <orderId>12345</orderId>\n  <customer>\n    <customerId>C001</customerId>\n    <name>John Doe</name>\n    <email>john.doe@example.com</email>\n    <phone>555-1234</phone>\n  </customer>\n  <orderDate>2023-10-01</orderDate>\n  <items>\n    <item>\n      <productId>P1001</productId>\n      <productName>Wireless Mouse</productName>\n      <quantity>2</quantity>\n      <price>25.99</price>\n    </item>\n    <item>\n      <productId>P1002</productId>\n      <productName>Mechanical Keyboard</productName>\n      <quantity>1</quantity>\n      <price>79.99</price>\n    </item>\n    <item>\n      <productId>P1003</productId>\n      <productName>HD Monitor</productName>\n      <quantity>1</quantity>\n      <price>199.99</price>\n    </item>\n  </items>\n  <shipping>\n    <address>\n      <street>123 Main St</street>\n      <city>Springfield</city>\n      <state>IL</state>\n      <postalCode>62704</postalCode>\n      <country>USA</country>\n    </address>\n    <method>Express</method>\n    <trackingNumber>EXP123456789</trackingNumber>\n  </shipping>\n</order>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171804_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "order",
                                "order[orderId]",
                                "order[orderDate]",
                                "order[customer][customerId]",
                                "order[customer][name]",
                                "order[customer][email]",
                                "order[customer][phone]",
                                "order[items]",
                                "order[items][*][productId]",
                                "order[items][*][productName]",
                                "order[items][*][quantity]",
                                "order[items][*][price]",
                                "order[shipping][address][street]",
                                "order[shipping][address][city]",
                                "order[shipping][address][state]",
                                "order[shipping][address][postalCode]",
                                "order[shipping][address][country]",
                                "order[shipping][method]",
                                "order[shipping][trackingNumber]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n    <homeAutomation>\n        <system>\n            <name>SmartHome Central</name>\n            <version>2.0.1</version>\n            <status>active</status>\n        </system>\n        <rooms>\n            <room>\n                <name>Living Room</name>\n                <devices>\n                    <device>\n                        <id>device001</id>\n                        <type>thermostat</type>\n                        <status>operational</status>\n                    </device>\n                    <device>\n                        <id>device002</id>\n                        <type>light</type>\n                        <status>off</status>\n                    </device>\n                </devices>\n            </room>\n            <room>\n                <name>Kitchen</name>\n                <devices>\n                    <device>\n                        <id>device003</id>\n                        <type>smokeDetector</type>\n                        <status>operational</status>\n                    </device>\n                </devices>\n            </room>\n            <room>\n                <name>Bedroom</name>\n                <devices>\n                    <device>\n                        <id>device004</id>\n                        <type>airPurifier</type>\n                        <status>standby</status>\n                    </device>\n                </devices>\n            </room>\n        </rooms>\n        <schedules>\n            <schedule>\n                <id>schedule_morning</id>\n                <time>07:00</time>\n                <actions>\n                    <action>openBlinds</action>\n                    <action>startCoffeeMaker</action>\n                </actions>\n            </schedule>\n            <schedule>\n                <id>schedule_evening</id>\n                <time>21:30</time>\n                <actions>\n                    <action>dimLights</action>\n                    <action>lockDoors</action>\n                </actions>\n            </schedule>\n        </schedules>\n        <alerts>\n            <alert>\n                <id>alert100</id>\n                <level>warning</level>\n                <message>Temperature threshold exceeded in Living Room</message>\n            </alert>\n            <alert>\n                <id>alert101</id>\n                <level>critical</level>\n                <message>Smoke detected in Kitchen</message>\n            </alert>\n        </alerts>\n    </homeAutomation>\n</data>\n</code>",
            "feature_requirements": "• The output must have a top-level structure that represents the XML root element (data) containing a sub-section for homeAutomation.\n\n• The homeAutomation section must include a system section with keys for name, version, and status that match the XML data explicitly.\n\n• The homeAutomation section must include a rooms section which is a list where each room has a name and a devices list, with each device entry containing an id, type, and status.\n\n• The homeAutomation section must include a schedules section which is a list where each schedule contains an id, time, and an actions list with multiple action entries.\n\n• The homeAutomation section must include an alerts section which is a list where each alert contains an id, level, and a message.\n\n• Each list (rooms, devices, schedules, alerts, and actions) in the YAML must maintain the same ordering as provided in the XML input.\n\n• All keys and values in the YAML output must directly reflect the values found in the XML code, ensuring consistency and traceability.",
            "task_id": "171805",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "data",
                "data[homeAutomation]",
                "data[homeAutomation][system]",
                "data[homeAutomation][system][name]",
                "data[homeAutomation][system][version]",
                "data[homeAutomation][system][status]",
                "data[homeAutomation][rooms]",
                "data[homeAutomation][rooms][0][name]",
                "data[homeAutomation][rooms][0][devices]",
                "data[homeAutomation][rooms][0][devices][0][id]",
                "data[homeAutomation][rooms][0][devices][0][type]",
                "data[homeAutomation][rooms][0][devices][0][status]",
                "data[homeAutomation][schedules]",
                "data[homeAutomation][schedules][0][id]",
                "data[homeAutomation][schedules][0][time]",
                "data[homeAutomation][schedules][0][actions]",
                "data[homeAutomation][alerts]",
                "data[homeAutomation][alerts][0][id]",
                "data[homeAutomation][alerts][0][level]",
                "data[homeAutomation][alerts][0][message]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171805_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n    <homeAutomation>\n        <system>\n            <name>SmartHome Central</name>\n            <version>2.0.1</version>\n            <status>active</status>\n        </system>\n        <rooms>\n            <room>\n                <name>Living Room</name>\n                <devices>\n                    <device>\n                        <id>device001</id>\n                        <type>thermostat</type>\n                        <status>operational</status>\n                    </device>\n                    <device>\n                        <id>device002</id>\n                        <type>light</type>\n                        <status>off</status>\n                    </device>\n                </devices>\n            </room>\n            <room>\n                <name>Kitchen</name>\n                <devices>\n                    <device>\n                        <id>device003</id>\n                        <type>smokeDetector</type>\n                        <status>operational</status>\n                    </device>\n                </devices>\n            </room>\n            <room>\n                <name>Bedroom</name>\n                <devices>\n                    <device>\n                        <id>device004</id>\n                        <type>airPurifier</type>\n                        <status>standby</status>\n                    </device>\n                </devices>\n            </room>\n        </rooms>\n        <schedules>\n            <schedule>\n                <id>schedule_morning</id>\n                <time>07:00</time>\n                <actions>\n                    <action>openBlinds</action>\n                    <action>startCoffeeMaker</action>\n                </actions>\n            </schedule>\n            <schedule>\n                <id>schedule_evening</id>\n                <time>21:30</time>\n                <actions>\n                    <action>dimLights</action>\n                    <action>lockDoors</action>\n                </actions>\n            </schedule>\n        </schedules>\n        <alerts>\n            <alert>\n                <id>alert100</id>\n                <level>warning</level>\n                <message>Temperature threshold exceeded in Living Room</message>\n            </alert>\n            <alert>\n                <id>alert101</id>\n                <level>critical</level>\n                <message>Smoke detected in Kitchen</message>\n            </alert>\n        </alerts>\n    </homeAutomation>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171805_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "data",
                                "data[homeAutomation]",
                                "data[homeAutomation][system]",
                                "data[homeAutomation][system][name]",
                                "data[homeAutomation][system][version]",
                                "data[homeAutomation][system][status]",
                                "data[homeAutomation][rooms]",
                                "data[homeAutomation][rooms][0][name]",
                                "data[homeAutomation][rooms][0][devices]",
                                "data[homeAutomation][rooms][0][devices][0][id]",
                                "data[homeAutomation][rooms][0][devices][0][type]",
                                "data[homeAutomation][rooms][0][devices][0][status]",
                                "data[homeAutomation][schedules]",
                                "data[homeAutomation][schedules][0][id]",
                                "data[homeAutomation][schedules][0][time]",
                                "data[homeAutomation][schedules][0][actions]",
                                "data[homeAutomation][alerts]",
                                "data[homeAutomation][alerts][0][id]",
                                "data[homeAutomation][alerts][0][level]",
                                "data[homeAutomation][alerts][0][message]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n  <users>\n    <user id=\"101\">\n      <name>John Doe</name>\n      <role>Administrator</role>\n      <contact>\n        <email>john.doe@example.com</email>\n        <phone>+1234567890</phone>\n      </contact>\n    </user>\n    <user id=\"102\">\n      <name>Jane Smith</name>\n      <role>Editor</role>\n      <contact>\n        <email>jane.smith@example.com</email>\n        <phone>+0987654321</phone>\n      </contact>\n    </user>\n  </users>\n  <settings>\n    <theme>dark</theme>\n    <language>en-US</language>\n    <privacy>\n      <tracking>false</tracking>\n      <ads>true</ads>\n    </privacy>\n  </settings>\n  <products>\n    <product id=\"P001\">\n      <name>Widget</name>\n      <category>Gadgets</category>\n      <price currency=\"USD\">19.99</price>\n    </product>\n    <product id=\"P002\">\n      <name>Gizmo</name>\n      <category>Gizmos</category>\n      <price currency=\"USD\">29.99</price>\n    </product>\n  </products>\n  <orders>\n    <order id=\"O1001\">\n      <userId>101</userId>\n      <productIds>\n        <productId>P001</productId>\n        <productId>P002</productId>\n      </productIds>\n      <total>49.98</total>\n    </order>\n    <order id=\"O1002\">\n      <userId>102</userId>\n      <productIds>\n        <productId>P002</productId>\n      </productIds>\n      <total>29.99</total>\n    </order>\n  </orders>\n  <logs>\n    <logEntry id=\"L01\">\n      <timestamp>2023-10-10T10:00:00Z</timestamp>\n      <event>User login</event>\n      <userId>101</userId>\n    </logEntry>\n    <logEntry id=\"L02\">\n      <timestamp>2023-10-10T10:05:00Z</timestamp>\n      <event>Order placed</event>\n      <userId>102</userId>\n    </logEntry>\n  </logs>\n</data>\n</code>",
            "feature_requirements": "• The YAML output must contain a top-level key representing the XML root element (\"data\") that encapsulates all subsequent sections.  \n• Within \"data\", there must be distinct sections for \"users\", \"settings\", \"products\", \"orders\", and \"logs\".  \n• The \"users\" section must list each user with properties: a unique \"id\" (sourced from the XML attribute), \"name\", \"role\", and a nested \"contact\" containing \"email\" and \"phone\".  \n• The \"settings\" section must include keys \"theme\" and \"language\", as well as a nested \"privacy\" section with \"tracking\" and \"ads\" as subkeys, reflecting the XML structure.  \n• The \"products\" section must list each product with properties: a unique \"id\" (from the XML attribute), \"name\", \"category\", and a \"price\" that includes its numeric value along with an associated \"currency\" attribute.  \n• The \"orders\" section must list each order with properties: a unique \"id\" (from the XML attribute), \"userId\", a list named \"productIds\" capturing one or more product identifiers, and a \"total\" value.  \n• The \"logs\" section must comprise entries each with an \"id\" (from the XML attribute), \"timestamp\", \"event\", and \"userId\".  \n• All XML attributes (such as \"id\" and \"currency\") must be represented explicitly as key-value pairs in the YAML, preserving their original associations.",
            "task_id": "171806",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "data",
                "data[users]",
                "data[users][][id]",
                "data[users][][name]",
                "data[users][][role]",
                "data[users][][contact][email]",
                "data[users][][contact][phone]",
                "data[settings]",
                "data[settings][theme]",
                "data[settings][language]",
                "data[settings][privacy][tracking]",
                "data[settings][privacy][ads]",
                "data[products]",
                "data[products][][id]",
                "data[products][][name]",
                "data[products][][category]",
                "data[products][][price]",
                "data[products][][price][currency]",
                "data[orders]",
                "data[orders][][id]",
                "data[orders][][userId]",
                "data[orders][][productIds]",
                "data[orders][][total]",
                "data[logs]",
                "data[logs][][id]",
                "data[logs][][timestamp]",
                "data[logs][][event]",
                "data[logs][][userId]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171806_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n  <users>\n    <user id=\"101\">\n      <name>John Doe</name>\n      <role>Administrator</role>\n      <contact>\n        <email>john.doe@example.com</email>\n        <phone>+1234567890</phone>\n      </contact>\n    </user>\n    <user id=\"102\">\n      <name>Jane Smith</name>\n      <role>Editor</role>\n      <contact>\n        <email>jane.smith@example.com</email>\n        <phone>+0987654321</phone>\n      </contact>\n    </user>\n  </users>\n  <settings>\n    <theme>dark</theme>\n    <language>en-US</language>\n    <privacy>\n      <tracking>false</tracking>\n      <ads>true</ads>\n    </privacy>\n  </settings>\n  <products>\n    <product id=\"P001\">\n      <name>Widget</name>\n      <category>Gadgets</category>\n      <price currency=\"USD\">19.99</price>\n    </product>\n    <product id=\"P002\">\n      <name>Gizmo</name>\n      <category>Gizmos</category>\n      <price currency=\"USD\">29.99</price>\n    </product>\n  </products>\n  <orders>\n    <order id=\"O1001\">\n      <userId>101</userId>\n      <productIds>\n        <productId>P001</productId>\n        <productId>P002</productId>\n      </productIds>\n      <total>49.98</total>\n    </order>\n    <order id=\"O1002\">\n      <userId>102</userId>\n      <productIds>\n        <productId>P002</productId>\n      </productIds>\n      <total>29.99</total>\n    </order>\n  </orders>\n  <logs>\n    <logEntry id=\"L01\">\n      <timestamp>2023-10-10T10:00:00Z</timestamp>\n      <event>User login</event>\n      <userId>101</userId>\n    </logEntry>\n    <logEntry id=\"L02\">\n      <timestamp>2023-10-10T10:05:00Z</timestamp>\n      <event>Order placed</event>\n      <userId>102</userId>\n    </logEntry>\n  </logs>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171806_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "data",
                                "data[users]",
                                "data[users][][id]",
                                "data[users][][name]",
                                "data[users][][role]",
                                "data[users][][contact][email]",
                                "data[users][][contact][phone]",
                                "data[settings]",
                                "data[settings][theme]",
                                "data[settings][language]",
                                "data[settings][privacy][tracking]",
                                "data[settings][privacy][ads]",
                                "data[products]",
                                "data[products][][id]",
                                "data[products][][name]",
                                "data[products][][category]",
                                "data[products][][price]",
                                "data[products][][price][currency]",
                                "data[orders]",
                                "data[orders][][id]",
                                "data[orders][][userId]",
                                "data[orders][][productIds]",
                                "data[orders][][total]",
                                "data[logs]",
                                "data[logs][][id]",
                                "data[logs][][timestamp]",
                                "data[logs][][event]",
                                "data[logs][][userId]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n  <profile>\n    <id>12345</id>\n    <name>John Doe</name>\n    <role>Administrator</role>\n  </profile>\n  <settings>\n    <theme>Dark</theme>\n    <language>en-US</language>\n    <notifications>\n      <email>true</email>\n      <sms>false</sms>\n    </notifications>\n  </settings>\n  <contacts>\n    <contact>\n      <type>phone</type>\n      <number>+123456789</number>\n    </contact>\n    <contact>\n      <type>email</type>\n      <address>john.doe@example.com</address>\n    </contact>\n  </contacts>\n  <preferences>\n    <option key=\"autosave\">true</option>\n    <option key=\"backupInterval\">15</option>\n    <option key=\"defaultView\">grid</option>\n  </preferences>\n  <history>\n    <entry>\n      <action>login</action>\n      <timestamp>2023-10-14T08:30:00Z</timestamp>\n    </entry>\n    <entry>\n      <action>updateProfile</action>\n      <timestamp>2023-10-14T09:00:00Z</timestamp>\n    </entry>\n    <entry>\n      <action>logout</action>\n      <timestamp>2023-10-14T10:15:00Z</timestamp>\n    </entry>\n  </history>\n</data>\n</code>",
            "feature_requirements": "• The YAML output must have a top-level key representing the XML's root element (e.g., \"data\") that encapsulates all other elements.  \n• Under the \"data\" key, there must be a \"profile\" section containing keys for \"id\", \"name\", and \"role\" with their associated text values.  \n• Under the \"data\" key, there must be a \"settings\" section, which includes keys such as \"theme\" and \"language\", and a nested \"notifications\" section with keys for \"email\" and \"sms\".  \n• The YAML output must include a \"contacts\" section under the \"data\" key that represents a list; each item in the list must have key-value pairs corresponding to the XML \"contact\" elements (e.g., one with \"type\" and \"number\", and another with \"type\" and \"address\").  \n• Under the \"data\" key, there must be a \"preferences\" section that converts each XML \"option\" element into key-value pairs using the XML attribute \"key\" as the YAML key and the element's text as the value.  \n• The YAML output must include a \"history\" section under the \"data\" key that is a list of entries, where each entry contains keys for \"action\" and \"timestamp\" with their corresponding values.  \n• Each section or list in the YAML output must mirror the hierarchical structure of the XML input, ensuring that nested XML elements are represented as nested YAML mappings or sequences.",
            "task_id": "171807",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "data",
                "data[profile]",
                "data[profile][id]",
                "data[profile][name]",
                "data[profile][role]",
                "data[settings]",
                "data[settings][theme]",
                "data[settings][language]",
                "data[settings][notifications]",
                "data[settings][notifications][email]",
                "data[settings][notifications][sms]",
                "data[contacts]",
                "data[contacts][*][type]",
                "data[contacts][*][number]",
                "data[contacts][*][address]",
                "data[preferences]",
                "data[history]",
                "data[history][*][action]",
                "data[history][*][timestamp]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171807_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<data>\n  <profile>\n    <id>12345</id>\n    <name>John Doe</name>\n    <role>Administrator</role>\n  </profile>\n  <settings>\n    <theme>Dark</theme>\n    <language>en-US</language>\n    <notifications>\n      <email>true</email>\n      <sms>false</sms>\n    </notifications>\n  </settings>\n  <contacts>\n    <contact>\n      <type>phone</type>\n      <number>+123456789</number>\n    </contact>\n    <contact>\n      <type>email</type>\n      <address>john.doe@example.com</address>\n    </contact>\n  </contacts>\n  <preferences>\n    <option key=\"autosave\">true</option>\n    <option key=\"backupInterval\">15</option>\n    <option key=\"defaultView\">grid</option>\n  </preferences>\n  <history>\n    <entry>\n      <action>login</action>\n      <timestamp>2023-10-14T08:30:00Z</timestamp>\n    </entry>\n    <entry>\n      <action>updateProfile</action>\n      <timestamp>2023-10-14T09:00:00Z</timestamp>\n    </entry>\n    <entry>\n      <action>logout</action>\n      <timestamp>2023-10-14T10:15:00Z</timestamp>\n    </entry>\n  </history>\n</data>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171807_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "data",
                                "data[profile]",
                                "data[profile][id]",
                                "data[profile][name]",
                                "data[profile][role]",
                                "data[settings]",
                                "data[settings][theme]",
                                "data[settings][language]",
                                "data[settings][notifications]",
                                "data[settings][notifications][email]",
                                "data[settings][notifications][sms]",
                                "data[contacts]",
                                "data[contacts][*][type]",
                                "data[contacts][*][number]",
                                "data[contacts][*][address]",
                                "data[preferences]",
                                "data[history]",
                                "data[history][*][action]",
                                "data[history][*][timestamp]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n    <userProfile>\n        <username>jdoe</username>\n        <fullName>John Doe</fullName>\n        <email>jdoe@example.com</email>\n    </userProfile>\n    <preferences>\n        <language>en</language>\n        <theme>dark</theme>\n        <notifications enabled=\"true\"/>\n    </preferences>\n    <projects>\n        <project id=\"101\">\n            <name>Alpha Initiative</name>\n            <status>active</status>\n            <members>\n                <member>jdoe</member>\n                <member>asmith</member>\n            </members>\n        </project>\n        <project id=\"102\">\n            <name>Beta Expansion</name>\n            <status>in-progress</status>\n            <members>\n                <member>mjane</member>\n                <member>jdoe</member>\n            </members>\n        </project>\n    </projects>\n    <logs>\n        <log timestamp=\"2023-09-15T10:15:30\">User logged in</log>\n        <log timestamp=\"2023-09-15T10:20:45\">Password updated</log>\n        <log timestamp=\"2023-09-15T10:30:00\">Logged out</log>\n    </logs>\n    <serverConfig>\n        <host>127.0.0.1</host>\n        <port>8080</port>\n        <protocol>http</protocol>\n    </serverConfig>\n</configuration>\n</code>",
            "feature_requirements": "• The YAML output must have a top-level mapping with a key \"configuration\" that encloses all other sections.  \n• Under \"configuration\", there must be a \"userProfile\" section containing keys \"username\", \"fullName\", and \"email\" with their respective text values.  \n• Under \"configuration\", a \"preferences\" section must be included with keys \"language\", \"theme\", and \"notifications\"; the \"notifications\" element must reflect the attribute \"enabled\" with a value of \"true\".  \n• There must be a \"projects\" section under \"configuration\" that contains a list of project items, where each project includes an \"id\" (sourced from the XML attribute), \"name\", \"status\", and \"members\" (a list of member identifiers).  \n• The \"logs\" section must be present under \"configuration\" and contain a list of log entries; each log entry should have a \"timestamp\" (from the XML attribute) and the log message text.  \n• The \"serverConfig\" section must be included under \"configuration\" with keys \"host\", \"port\", and \"protocol\" holding the respective values.",
            "task_id": "171808",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "configuration",
                "configuration[userProfile][username]",
                "configuration[userProfile][fullName]",
                "configuration[userProfile][email]",
                "configuration[preferences][language]",
                "configuration[preferences][theme]",
                "configuration[preferences][notifications][enabled]",
                "configuration[projects][][id]",
                "configuration[projects][][name]",
                "configuration[projects][][status]",
                "configuration[projects][][members]",
                "configuration[logs][][timestamp]",
                "configuration[logs][][message]",
                "configuration[serverConfig][host]",
                "configuration[serverConfig][port]",
                "configuration[serverConfig][protocol]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171808_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n    <userProfile>\n        <username>jdoe</username>\n        <fullName>John Doe</fullName>\n        <email>jdoe@example.com</email>\n    </userProfile>\n    <preferences>\n        <language>en</language>\n        <theme>dark</theme>\n        <notifications enabled=\"true\"/>\n    </preferences>\n    <projects>\n        <project id=\"101\">\n            <name>Alpha Initiative</name>\n            <status>active</status>\n            <members>\n                <member>jdoe</member>\n                <member>asmith</member>\n            </members>\n        </project>\n        <project id=\"102\">\n            <name>Beta Expansion</name>\n            <status>in-progress</status>\n            <members>\n                <member>mjane</member>\n                <member>jdoe</member>\n            </members>\n        </project>\n    </projects>\n    <logs>\n        <log timestamp=\"2023-09-15T10:15:30\">User logged in</log>\n        <log timestamp=\"2023-09-15T10:20:45\">Password updated</log>\n        <log timestamp=\"2023-09-15T10:30:00\">Logged out</log>\n    </logs>\n    <serverConfig>\n        <host>127.0.0.1</host>\n        <port>8080</port>\n        <protocol>http</protocol>\n    </serverConfig>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171808_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "configuration",
                                "configuration[userProfile][username]",
                                "configuration[userProfile][fullName]",
                                "configuration[userProfile][email]",
                                "configuration[preferences][language]",
                                "configuration[preferences][theme]",
                                "configuration[preferences][notifications][enabled]",
                                "configuration[projects][][id]",
                                "configuration[projects][][name]",
                                "configuration[projects][][status]",
                                "configuration[projects][][members]",
                                "configuration[logs][][timestamp]",
                                "configuration[logs][][message]",
                                "configuration[serverConfig][host]",
                                "configuration[serverConfig][port]",
                                "configuration[serverConfig][protocol]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n  <applicationName>DataConverter</applicationName>\n  <version>1.0</version>\n  <environment>production</environment>\n  <settings>\n    <database>\n      <host>localhost</host>\n      <port>5432</port>\n      <username>admin</username>\n      <password>secret</password>\n    </database>\n    <features>\n      <feature name=\"logging\" enabled=\"true\"/>\n      <feature name=\"analytics\" enabled=\"false\"/>\n      <feature name=\"caching\" enabled=\"true\"/>\n    </features>\n  </settings>\n  <users>\n    <user>\n      <id>101</id>\n      <name>John Doe</name>\n      <email>johndoe@example.com</email>\n    </user>\n    <user>\n      <id>102</id>\n      <name>Jane Smith</name>\n      <email>janesmith@example.com</email>\n    </user>\n  </users>\n  <metadata>\n    <creationDate>2023-10-15</creationDate>\n    <modifiedDate>2023-10-20</modifiedDate>\n    <author>System Admin</author>\n  </metadata>\n</configuration>\n</code>",
            "feature_requirements": "• The output must have a top-level section that represents the overall configuration.  \n• The output must include keys for applicationName, version, and environment, each with their respective values (\"DataConverter\", \"1.0\", \"production\").  \n• The output must contain a settings section that includes a database subsection with keys for host, port, username, and password.  \n• The output must have a features list under the settings section where each feature entry includes a name and an enabled status.  \n• The output must include a users list where each user entry contains keys for id, name, and email.  \n• The output must contain a metadata section with keys for creationDate, modifiedDate, and author.",
            "task_id": "171809",
            "task_name": "Convert XML to YAML",
            "input_type": "XML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "applicationName",
                "version",
                "environment",
                "settings[database][host]",
                "settings[database][port]",
                "settings[database][username]",
                "settings[database][password]",
                "settings[features][][name]",
                "settings[features][][enabled]",
                "users[][id]",
                "users[][name]",
                "users[][email]",
                "metadata[creationDate]",
                "metadata[modifiedDate]",
                "metadata[author]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "171809_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following XML code to YAML code.\n\n<code>\n<configuration>\n  <applicationName>DataConverter</applicationName>\n  <version>1.0</version>\n  <environment>production</environment>\n  <settings>\n    <database>\n      <host>localhost</host>\n      <port>5432</port>\n      <username>admin</username>\n      <password>secret</password>\n    </database>\n    <features>\n      <feature name=\"logging\" enabled=\"true\"/>\n      <feature name=\"analytics\" enabled=\"false\"/>\n      <feature name=\"caching\" enabled=\"true\"/>\n    </features>\n  </settings>\n  <users>\n    <user>\n      <id>101</id>\n      <name>John Doe</name>\n      <email>johndoe@example.com</email>\n    </user>\n    <user>\n      <id>102</id>\n      <name>Jane Smith</name>\n      <email>janesmith@example.com</email>\n    </user>\n  </users>\n  <metadata>\n    <creationDate>2023-10-15</creationDate>\n    <modifiedDate>2023-10-20</modifiedDate>\n    <author>System Admin</author>\n  </metadata>\n</configuration>\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "171809_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "applicationName",
                                "version",
                                "environment",
                                "settings[database][host]",
                                "settings[database][port]",
                                "settings[database][username]",
                                "settings[database][password]",
                                "settings[features][][name]",
                                "settings[features][][enabled]",
                                "users[][id]",
                                "users[][name]",
                                "users[][email]",
                                "metadata[creationDate]",
                                "metadata[modifiedDate]",
                                "metadata[author]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ncolony:\n  name: \"Aurora Station\"\n  location: \"Gamma Quadrant\"\n  established: \"2078-05-17\"\n  purpose: \"Research and Exploration\"\n\nmodules:\n  - name: \"Habitation Module\"\n    capacity: 150\n    status: \"operational\"\n  - name: \"Laboratory Module\"\n    capacity: 50\n    status: \"maintenance\"\n  - name: \"Engineering Module\"\n    capacity: 75\n    status: \"operational\"\n\nresources:\n  energy: 35000\n  water: 15000\n  food: 8000\n\nlogistics:\n  supply_routes:\n    - route: \"Alpha Belt Axis\"\n      frequency: \"weekly\"\n    - route: \"Beta Stream Corridor\"\n      frequency: \"bi-weekly\"\n  inventory:\n    - item: \"Solar Panels\"\n      count: 45\n    - item: \"Oxygen Tanks\"\n      count: 100\n\nenvironment:\n  atmosphere:\n    composition:\n      - \"Nitrogen\"\n      - \"Oxygen\"\n      - \"Argon\"\n  gravity: \"0.87g\"\n  radiation: \"low\"\n</code>",
            "feature_requirements": "• The output must be in valid XML, with a single root element that encapsulates all sections.\n• There must be a \"colony\" element containing sub-elements for \"name\", \"location\", \"established\", and \"purpose\" with the corresponding values.\n• There must be a \"modules\" section that contains multiple \"module\" elements (or equivalent) for each module with child elements for \"name\", \"capacity\", and \"status\".\n• A \"resources\" element must exist, containing child elements for \"energy\", \"water\", and \"food\" with their corresponding numeric values.\n• The XML must include a \"logistics\" element that wraps two sections: one for \"supply_routes\" and one for \"inventory\".\n• Within the \"supply_routes\" section, each route must be represented by an element with nested data for \"route\" and \"frequency\".\n• The \"inventory\" section must include elements for each item with child elements for \"item\" and \"count\".\n• There must be an \"environment\" element that contains an \"atmosphere\" element with a nested \"composition\" list representing each atmospheric component.\n• The \"environment\" element must also include sub-elements for \"gravity\" and \"radiation\" with the appropriate values.",
            "task_id": "181700",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "colony[name]",
                "colony[location]",
                "colony[established]",
                "colony[purpose]",
                "modules[module][name]",
                "modules[module][capacity]",
                "modules[module][status]",
                "resources[energy]",
                "resources[water]",
                "resources[food]",
                "logistics[supply_routes][route]",
                "logistics[supply_routes][frequency]",
                "logistics[inventory][item]",
                "logistics[inventory][count]",
                "environment[atmosphere][composition]",
                "environment[gravity]",
                "environment[radiation]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181700_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ncolony:\n  name: \"Aurora Station\"\n  location: \"Gamma Quadrant\"\n  established: \"2078-05-17\"\n  purpose: \"Research and Exploration\"\n\nmodules:\n  - name: \"Habitation Module\"\n    capacity: 150\n    status: \"operational\"\n  - name: \"Laboratory Module\"\n    capacity: 50\n    status: \"maintenance\"\n  - name: \"Engineering Module\"\n    capacity: 75\n    status: \"operational\"\n\nresources:\n  energy: 35000\n  water: 15000\n  food: 8000\n\nlogistics:\n  supply_routes:\n    - route: \"Alpha Belt Axis\"\n      frequency: \"weekly\"\n    - route: \"Beta Stream Corridor\"\n      frequency: \"bi-weekly\"\n  inventory:\n    - item: \"Solar Panels\"\n      count: 45\n    - item: \"Oxygen Tanks\"\n      count: 100\n\nenvironment:\n  atmosphere:\n    composition:\n      - \"Nitrogen\"\n      - \"Oxygen\"\n      - \"Argon\"\n  gravity: \"0.87g\"\n  radiation: \"low\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181700_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "colony[name]",
                                "colony[location]",
                                "colony[established]",
                                "colony[purpose]",
                                "modules[module][name]",
                                "modules[module][capacity]",
                                "modules[module][status]",
                                "resources[energy]",
                                "resources[water]",
                                "resources[food]",
                                "logistics[supply_routes][route]",
                                "logistics[supply_routes][frequency]",
                                "logistics[inventory][item]",
                                "logistics[inventory][count]",
                                "environment[atmosphere][composition]",
                                "environment[gravity]",
                                "environment[radiation]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ngeneral:\n  app_name: \"Data Converter\"\n  version: \"1.2.3\"\n  active: true\n\nnetwork:\n  host: \"127.0.0.1\"\n  port: 8080\n\ndatabase:\n  type: \"postgresql\"\n  connection:\n    user: \"admin\"\n    password: \"secret\"\n    host: \"db.local\"\n    port: 5432\n\nlogging:\n  level: \"debug\"\n  files:\n    - \"/var/log/app.log\"\n    - \"/var/log/app_error.log\"\n\ntools:\n  enabled: true\n  list:\n    - \"converter\"\n    - \"analyzer\"\n    - \"reporter\"\n</code>",
            "feature_requirements": "• The XML output must include a root element that contains separate child elements for \"general\", \"network\", \"database\", \"logging\", and \"tools\".  \n• The \"general\" element must include sub-elements for \"app_name\", \"version\", and \"active\", with the values \"Data Converter\", \"1.2.3\", and a true value respectively.  \n• The \"network\" element must include sub-elements for \"host\" with value \"127.0.0.1\" and \"port\" with the numeric value 8080.  \n• The \"database\" element must include a \"type\" sub-element with the value \"postgresql\" and a nested \"connection\" element containing sub-elements for \"user\" (\"admin\"), \"password\" (\"secret\"), \"host\" (\"db.local\"), and \"port\" (5432).  \n• The \"logging\" element must include a \"level\" sub-element with the value \"debug\" and a \"files\" element that contains multiple entries corresponding to the file paths \"/var/log/app.log\" and \"/var/log/app_error.log\".  \n• The \"tools\" element must include an \"enabled\" sub-element with a true value and a \"list\" element that contains multiple entries for \"converter\", \"analyzer\", and \"reporter\".",
            "task_id": "181701",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "general",
                "general[app_name]",
                "general[version]",
                "general[active]",
                "network",
                "network[host]",
                "network[port]",
                "database",
                "database[type]",
                "database[connection]",
                "database[connection][user]",
                "database[connection][password]",
                "database[connection][host]",
                "database[connection][port]",
                "logging",
                "logging[level]",
                "logging[files]",
                "tools",
                "tools[enabled]",
                "tools[list]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181701_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ngeneral:\n  app_name: \"Data Converter\"\n  version: \"1.2.3\"\n  active: true\n\nnetwork:\n  host: \"127.0.0.1\"\n  port: 8080\n\ndatabase:\n  type: \"postgresql\"\n  connection:\n    user: \"admin\"\n    password: \"secret\"\n    host: \"db.local\"\n    port: 5432\n\nlogging:\n  level: \"debug\"\n  files:\n    - \"/var/log/app.log\"\n    - \"/var/log/app_error.log\"\n\ntools:\n  enabled: true\n  list:\n    - \"converter\"\n    - \"analyzer\"\n    - \"reporter\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181701_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "general",
                                "general[app_name]",
                                "general[version]",
                                "general[active]",
                                "network",
                                "network[host]",
                                "network[port]",
                                "database",
                                "database[type]",
                                "database[connection]",
                                "database[connection][user]",
                                "database[connection][password]",
                                "database[connection][host]",
                                "database[connection][port]",
                                "logging",
                                "logging[level]",
                                "logging[files]",
                                "tools",
                                "tools[enabled]",
                                "tools[list]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nenvironment:\n  name: \"Production\"\n  region: \"us-east-1\"\n  debug: false\n\napplication:\n  name: \"DataConverter\"\n  version: \"2.5.1\"\n  components:\n    - name: \"Parser\"\n      enabled: true\n      settings:\n        timeout: 30\n        retries: 3\n    - name: \"Formatter\"\n      enabled: true\n      settings:\n        style: \"compact\"\n        date_format: \"YYYY-MM-DD\"\n\ndatabase:\n  type: \"PostgreSQL\"\n  host: \"db.production.example.com\"\n  port: 5432\n  credentials:\n    username: \"dbuser\"\n    password: \"securepassword\"\n\nlogging:\n  level: \"INFO\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  file_config:\n    path: \"/var/log/dataconverter.log\"\n    max_size_mb: 50\n\nfeatures:\n  enabled:\n    - \"conversion\"\n    - \"validation\"\n    - \"reporting\"\n  experimental: false\n</code>",
            "feature_requirements": "• The XML output must have a structure that reflects the original top-level keys: \"environment\", \"application\", \"database\", \"logging\", and \"features\" as separate elements.  \n• The \"environment\" element must contain child elements for \"name\", \"region\", and \"debug\", with their values matching those in the YAML.  \n• The \"application\" element must include child elements for \"name\" and \"version\", and a \"components\" element that contains a collection of component items.  \n• Each component item under the \"components\" element must have its own child elements for \"name\", \"enabled\", and a \"settings\" element.  \n• The \"settings\" element for the component named \"Parser\" must include elements for \"timeout\" and \"retries\", and for the component named \"Formatter\" must include elements for \"style\" and \"date_format\".  \n• The \"database\" element must include child elements for \"type\", \"host\", \"port\", and a \"credentials\" element that in turn contains \"username\" and \"password\".  \n• The \"logging\" element must have child elements for \"level\", an \"outputs\" element that lists items (such as \"console\" and \"file\"), and a \"file_config\" element with child elements \"path\" and \"max_size_mb\".  \n• The \"features\" element must contain an \"enabled\" element that lists the values \"conversion\", \"validation\", and \"reporting\", as well as an \"experimental\" element with the corresponding boolean value.",
            "task_id": "181702",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "environment[name]",
                "environment[region]",
                "environment[debug]",
                "application[name]",
                "application[version]",
                "application[components][component][name]",
                "application[components][component][enabled]",
                "application[components][component][settings]",
                "application[components][component][settings][timeout]",
                "application[components][component][settings][retries]",
                "application[components][component][settings][style]",
                "application[components][component][settings][date_format]",
                "database[type]",
                "database[host]",
                "database[port]",
                "database[credentials][username]",
                "database[credentials][password]",
                "logging[level]",
                "logging[outputs]",
                "logging[file_config][path]",
                "logging[file_config][max_size_mb]",
                "features[enabled]",
                "features[experimental]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181702_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nenvironment:\n  name: \"Production\"\n  region: \"us-east-1\"\n  debug: false\n\napplication:\n  name: \"DataConverter\"\n  version: \"2.5.1\"\n  components:\n    - name: \"Parser\"\n      enabled: true\n      settings:\n        timeout: 30\n        retries: 3\n    - name: \"Formatter\"\n      enabled: true\n      settings:\n        style: \"compact\"\n        date_format: \"YYYY-MM-DD\"\n\ndatabase:\n  type: \"PostgreSQL\"\n  host: \"db.production.example.com\"\n  port: 5432\n  credentials:\n    username: \"dbuser\"\n    password: \"securepassword\"\n\nlogging:\n  level: \"INFO\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  file_config:\n    path: \"/var/log/dataconverter.log\"\n    max_size_mb: 50\n\nfeatures:\n  enabled:\n    - \"conversion\"\n    - \"validation\"\n    - \"reporting\"\n  experimental: false\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181702_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "environment[name]",
                                "environment[region]",
                                "environment[debug]",
                                "application[name]",
                                "application[version]",
                                "application[components][component][name]",
                                "application[components][component][enabled]",
                                "application[components][component][settings]",
                                "application[components][component][settings][timeout]",
                                "application[components][component][settings][retries]",
                                "application[components][component][settings][style]",
                                "application[components][component][settings][date_format]",
                                "database[type]",
                                "database[host]",
                                "database[port]",
                                "database[credentials][username]",
                                "database[credentials][password]",
                                "logging[level]",
                                "logging[outputs]",
                                "logging[file_config][path]",
                                "logging[file_config][max_size_mb]",
                                "features[enabled]",
                                "features[experimental]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\napp: InventoryService\nenvironment:\n  stage: production\n  region: us-east-1\n  enabled: true\nlogging:\n  level: info\n  rotation:\n    maxSizeMB: 100\n    count: 5\nfeatures:\n  - authentication\n  - rate-limiting\n  - caching\ndatabase:\n  type: postgres\n  connection:\n    host: localhost\n    port: 5432\n    credentials:\n      username: dbuser\n      password: securepass\n</code>",
            "feature_requirements": "• The XML output must consist of a hierarchical structure that preserves the nested relationships found in the YAML file.  \n• There must be a distinct XML element representing the \"app\" key with its text content set to \"InventoryService\".  \n• An \"environment\" element must exist containing child elements for \"stage\", \"region\", and \"enabled\", with their respective text values \"production\", \"us-east-1\", and \"true\".  \n• A \"logging\" element must contain a \"level\" child element with the value \"info\" and a nested \"rotation\" element with child elements \"maxSizeMB\" and \"count\", set to \"100\" and \"5\" respectively.  \n• The \"features\" key must be converted into an element representing a list, with individual XML elements for each feature: \"authentication\", \"rate-limiting\", and \"caching\".  \n• There must be a \"database\" element that includes a \"type\" element with the value \"postgres\" and a nested \"connection\" element, which itself contains \"host\" (with value \"localhost\"), \"port\" (with value \"5432\"), and a \"credentials\" element.  \n• Inside \"credentials\", there should be child elements for \"username\" and \"password\" with text values \"dbuser\" and \"securepass\" respectively.",
            "task_id": "181703",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app",
                "environment[stage]",
                "environment[region]",
                "environment[enabled]",
                "logging[level]",
                "logging[rotation][maxSizeMB]",
                "logging[rotation][count]",
                "features[authentication]",
                "features[rate-limiting]",
                "features[caching]",
                "database[type]",
                "database[connection][host]",
                "database[connection][port]",
                "database[connection][credentials][username]",
                "database[connection][credentials][password]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181703_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\napp: InventoryService\nenvironment:\n  stage: production\n  region: us-east-1\n  enabled: true\nlogging:\n  level: info\n  rotation:\n    maxSizeMB: 100\n    count: 5\nfeatures:\n  - authentication\n  - rate-limiting\n  - caching\ndatabase:\n  type: postgres\n  connection:\n    host: localhost\n    port: 5432\n    credentials:\n      username: dbuser\n      password: securepass\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181703_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app",
                                "environment[stage]",
                                "environment[region]",
                                "environment[enabled]",
                                "logging[level]",
                                "logging[rotation][maxSizeMB]",
                                "logging[rotation][count]",
                                "features[authentication]",
                                "features[rate-limiting]",
                                "features[caching]",
                                "database[type]",
                                "database[connection][host]",
                                "database[connection][port]",
                                "database[connection][credentials][username]",
                                "database[connection][credentials][password]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nmetadata:\n  project: \"Data Converter\"\n  version: \"1.2.3\"\n  creation_date: \"2023-10-05\"\n  active: true\n\nconfiguration:\n  max_items: 50\n  output_format: \"JSON\"\n  enable_logging: false\n\nusers:\n  - username: \"alice\"\n    role: \"admin\"\n    permissions:\n      - \"read\"\n      - \"write\"\n      - \"delete\"\n  - username: \"bob\"\n    role: \"user\"\n    permissions:\n      - \"read\"\n\nsettings:\n  theme: \"dark\"\n  notifications:\n    email: true\n    sms: false\n  refresh_interval: 15\n\nlogs:\n  errors: []\n  warnings:\n    - \"Low disk space\"\n    - \"High memory usage\"\n</code>",
            "feature_requirements": "• The XML output must have a root element that contains five primary child elements: metadata, configuration, users, settings, and logs.  \n• The metadata element must include child elements for project, version, creation_date, and active with text content exactly matching the YAML values.  \n• The configuration element must include child elements for max_items, output_format, and enable_logging, each containing their respective values from the YAML code.  \n• The users element must contain a list of individual user elements; each user element must include child elements for username and role, and a subelement for permissions.  \n• Within each user’s permissions subelement, each permission from the YAML list must be represented as separate permission elements.  \n• The settings element must include child elements for theme, notifications, and refresh_interval; within notifications, there must be separate child elements for email and sms.  \n• The logs element must include child elements for errors and warnings; errors should represent an empty list while warnings must include individual elements for each warning message.  \n• All element text contents must exactly reflect the corresponding values from the YAML input, ensuring exact mapping of true/false and numbers as string values in XML.",
            "task_id": "181704",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root[metadata][project]",
                "root[metadata][version]",
                "root[metadata][creation_date]",
                "root[metadata][active]",
                "root[configuration][max_items]",
                "root[configuration][output_format]",
                "root[configuration][enable_logging]",
                "root[users][user][username]",
                "root[users][user][role]",
                "root[users][user][permissions][permission]",
                "root[settings][theme]",
                "root[settings][notifications][email]",
                "root[settings][notifications][sms]",
                "root[settings][refresh_interval]",
                "root[logs][errors]",
                "root[logs][warnings][warning]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181704_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nmetadata:\n  project: \"Data Converter\"\n  version: \"1.2.3\"\n  creation_date: \"2023-10-05\"\n  active: true\n\nconfiguration:\n  max_items: 50\n  output_format: \"JSON\"\n  enable_logging: false\n\nusers:\n  - username: \"alice\"\n    role: \"admin\"\n    permissions:\n      - \"read\"\n      - \"write\"\n      - \"delete\"\n  - username: \"bob\"\n    role: \"user\"\n    permissions:\n      - \"read\"\n\nsettings:\n  theme: \"dark\"\n  notifications:\n    email: true\n    sms: false\n  refresh_interval: 15\n\nlogs:\n  errors: []\n  warnings:\n    - \"Low disk space\"\n    - \"High memory usage\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181704_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root[metadata][project]",
                                "root[metadata][version]",
                                "root[metadata][creation_date]",
                                "root[metadata][active]",
                                "root[configuration][max_items]",
                                "root[configuration][output_format]",
                                "root[configuration][enable_logging]",
                                "root[users][user][username]",
                                "root[users][user][role]",
                                "root[users][user][permissions][permission]",
                                "root[settings][theme]",
                                "root[settings][notifications][email]",
                                "root[settings][notifications][sms]",
                                "root[settings][refresh_interval]",
                                "root[logs][errors]",
                                "root[logs][warnings][warning]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\napplication:\n  name: \"DataConverter\"\n  version: \"2.1.0\"\n  environment: \"production\"\n  \nsettings:\n  format: \"YAML\"\n  conversion_mode: \"structured\"\n  supported_types:\n    - \"XML\"\n    - \"JSON\"\n    - \"CSV\"\n  \nlogging:\n  level: \"INFO\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  \nusers:\n  - id: 101\n    username: \"jdoe\"\n    permissions:\n      - \"read\"\n      - \"write\"\n  - id: 102\n    username: \"asmith\"\n    permissions:\n      - \"read\"\n  \ndatabase:\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    user: \"dbadmin\"\n    password: \"securePass123\"\n</code>",
            "feature_requirements": "• The XML output must include distinct sections corresponding to the top-level YAML keys: application, settings, logging, users, and database.  \n• The application section must contain child elements for name, version, and environment with their respective text values.  \n• The settings section must include elements for format and conversion_mode, along with a sub-section for supported_types that lists each type as a separate element.  \n• The logging section must feature a level element and an outputs list, where each output is represented as an individual element.  \n• The users section must be structured as a sequence of elements (one per user), with each user element containing child elements for id, username, and a sub-section for multiple permissions.  \n• The database section must contain elements for host and port, as well as a nested credentials element that holds sub-elements for user and password.  \n• All list items in the YAML (e.g., supported_types, outputs, permissions) must be represented as repeated XML elements within their respective parent container.",
            "task_id": "181705",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "application[name]",
                "application[version]",
                "application[environment]",
                "settings[format]",
                "settings[conversion_mode]",
                "settings[supported_types]",
                "logging[level]",
                "logging[outputs]",
                "users[user]",
                "users[user][id]",
                "users[user][username]",
                "users[user][permissions]",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][user]",
                "database[credentials][password]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181705_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\napplication:\n  name: \"DataConverter\"\n  version: \"2.1.0\"\n  environment: \"production\"\n  \nsettings:\n  format: \"YAML\"\n  conversion_mode: \"structured\"\n  supported_types:\n    - \"XML\"\n    - \"JSON\"\n    - \"CSV\"\n  \nlogging:\n  level: \"INFO\"\n  outputs:\n    - \"console\"\n    - \"file\"\n  \nusers:\n  - id: 101\n    username: \"jdoe\"\n    permissions:\n      - \"read\"\n      - \"write\"\n  - id: 102\n    username: \"asmith\"\n    permissions:\n      - \"read\"\n  \ndatabase:\n  host: \"localhost\"\n  port: 5432\n  credentials:\n    user: \"dbadmin\"\n    password: \"securePass123\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181705_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "application[name]",
                                "application[version]",
                                "application[environment]",
                                "settings[format]",
                                "settings[conversion_mode]",
                                "settings[supported_types]",
                                "logging[level]",
                                "logging[outputs]",
                                "users[user]",
                                "users[user][id]",
                                "users[user][username]",
                                "users[user][permissions]",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][user]",
                                "database[credentials][password]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\norganization:\n  name: \"Tech Innovators Inc.\"\n  departments:\n    - name: \"Research and Development\"\n      head: \"Dr. Smith\"\n      teams:\n        - name: \"AI Research\"\n          projects:\n            - \"Deep Learning\"\n            - \"Natural Language Processing\"\n        - name: \"Robotics\"\n          projects:\n            - \"Automated Systems\"\n            - \"Surgical Robots\"\n    - name: \"Marketing\"\n      head: \"Ms. Johnson\"\n      teams:\n        - name: \"Digital Marketing\"\n          projects:\n            - \"SEO\"\n            - \"Social Media Campaign\"\n        - name: \"Brand Strategy\"\n          projects:\n            - \"Rebranding\"\n            - \"Market Analysis\"\nemployees:\n  - id: 1001\n    name: \"Alice\"\n    role: \"Software Engineer\"\n    skills:\n      - \"Python\"\n      - \"Java\"\n      - \"C++\"\n  - id: 1002\n    name: \"Bob\"\n    role: \"Data Scientist\"\n    skills:\n      - \"R\"\n      - \"Python\"\n      - \"Machine Learning\"\nsettings:\n  theme: \"light\"\n  notifications: true\n  backup: \"daily\"\nmetadata:\n  created: \"2023-10-01\"\n  version: \"1.0.3\"\n</code>",
            "feature_requirements": "• The XML output must contain a top-level element that wraps all content, organizing the data into sections for organization, employees, settings, and metadata.  \n• The organization section must include a child element for the organization name with the value \"Tech Innovators Inc.\"  \n• Within the organization section, the departments must be represented as a collection of department elements; each department element must include sub-elements for the department's name and head.  \n• Each department element must contain a nested section for teams, with each team represented as its own element that includes a team name sub-element and a further nested section for projects, where each project is represented as an individual element.  \n• The employees section must be structured as a list of employee elements; each employee element must include sub-elements for id, name, and role, as well as a sub-section for skills where each skill is an individual element.  \n• The settings section must include distinct sub-elements for theme, notifications, and backup, with their respective values (e.g., \"light\", true, \"daily\").  \n• The metadata section of the XML must include sub-elements for the created date and version, using the provided values (\"2023-10-01\" and \"1.0.3\").  \n• All lists (departments, teams, projects, employees, skills) must be represented as repeated XML elements, ensuring that each list item is separately identifiable.  \n• The hierarchical structure of the XML output must mirror the nested relationships presented in the YAML input, making each section and sub-section logically nested under its parent element.",
            "task_id": "181706",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[organization]",
                "root[organization][name]",
                "root[organization][department]",
                "root[organization][department][name]",
                "root[organization][department][head]",
                "root[organization][department][teams]",
                "root[organization][department][teams][team]",
                "root[organization][department][teams][team][name]",
                "root[organization][department][teams][team][projects]",
                "root[organization][department][teams][team][projects][project]",
                "root[employees]",
                "root[employees][employee]",
                "root[employees][employee][id]",
                "root[employees][employee][name]",
                "root[employees][employee][role]",
                "root[employees][employee][skills]",
                "root[employees][employee][skills][skill]",
                "root[settings]",
                "root[settings][theme]",
                "root[settings][notifications]",
                "root[settings][backup]",
                "root[metadata]",
                "root[metadata][created_date]",
                "root[metadata][version]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181706_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\norganization:\n  name: \"Tech Innovators Inc.\"\n  departments:\n    - name: \"Research and Development\"\n      head: \"Dr. Smith\"\n      teams:\n        - name: \"AI Research\"\n          projects:\n            - \"Deep Learning\"\n            - \"Natural Language Processing\"\n        - name: \"Robotics\"\n          projects:\n            - \"Automated Systems\"\n            - \"Surgical Robots\"\n    - name: \"Marketing\"\n      head: \"Ms. Johnson\"\n      teams:\n        - name: \"Digital Marketing\"\n          projects:\n            - \"SEO\"\n            - \"Social Media Campaign\"\n        - name: \"Brand Strategy\"\n          projects:\n            - \"Rebranding\"\n            - \"Market Analysis\"\nemployees:\n  - id: 1001\n    name: \"Alice\"\n    role: \"Software Engineer\"\n    skills:\n      - \"Python\"\n      - \"Java\"\n      - \"C++\"\n  - id: 1002\n    name: \"Bob\"\n    role: \"Data Scientist\"\n    skills:\n      - \"R\"\n      - \"Python\"\n      - \"Machine Learning\"\nsettings:\n  theme: \"light\"\n  notifications: true\n  backup: \"daily\"\nmetadata:\n  created: \"2023-10-01\"\n  version: \"1.0.3\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181706_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[organization]",
                                "root[organization][name]",
                                "root[organization][department]",
                                "root[organization][department][name]",
                                "root[organization][department][head]",
                                "root[organization][department][teams]",
                                "root[organization][department][teams][team]",
                                "root[organization][department][teams][team][name]",
                                "root[organization][department][teams][team][projects]",
                                "root[organization][department][teams][team][projects][project]",
                                "root[employees]",
                                "root[employees][employee]",
                                "root[employees][employee][id]",
                                "root[employees][employee][name]",
                                "root[employees][employee][role]",
                                "root[employees][employee][skills]",
                                "root[employees][employee][skills][skill]",
                                "root[settings]",
                                "root[settings][theme]",
                                "root[settings][notifications]",
                                "root[settings][backup]",
                                "root[metadata]",
                                "root[metadata][created_date]",
                                "root[metadata][version]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ntrip:\n  name: \"Mountain Adventure\"\n  destination: \"Rocky Peaks\"\n  dates:\n    start: \"2023-11-05\"\n    end: \"2023-11-12\"\n\nitinerary:\n  - day: 1\n    activity: \"Arrival and Orientation\"\n    details:\n      time: \"14:00\"\n      location: \"Base Camp\"\n      notes: \"Check-in and equipment briefing\"\n  - day: 2\n    activity: \"Hiking and Exploration\"\n    details:\n      time: \"08:00\"\n      location: \"Trailhead\"\n      notes: \"Pack lunch and water\"\n  - day: 3\n    activity: \"Summit Attempt\"\n    details:\n      time: \"05:00\"\n      location: \"North Route\"\n      notes: \"Start early to catch sunrise\"\n\ntraveler:\n  name: \"Jordan Lee\"\n  contact:\n    email: \"jordan.lee@example.com\"\n    phone: \"555-0199\"\n  preferences:\n    accommodation: \"Tent\"\n    meals: \"Vegetarian\"\n\nlogistics:\n  transportation: \n    - \"rental vehicle\"\n    - \"on-foot\"\n  emergency_contacts:\n    - role: \"local guide\"\n      name: \"Sam Rivera\"\n      phone: \"555-0222\"\n    - role: \"medical services\"\n      phone: \"911\"\n\nnotes:\n  weather_forecast: \"Cool with scattered clouds\"\n  packing_list:\n    - \"hiking boots\"\n    - \"jacket\"\n    - \"map and compass\"\n</code>",
            "feature_requirements": "• The XML output must contain a root element that encapsulates the entire structure of the trip information.  \n• A \"trip\" element must exist with child elements for \"name\", \"destination\", and \"dates\", where \"dates\" further contains \"start\" and \"end\" elements.  \n• An \"itinerary\" element must be present that includes multiple sub-elements (one per day), each containing \"day\", \"activity\", and a nested \"details\" element holding \"time\", \"location\", and \"notes\".  \n• A \"traveler\" element should appear with nested child elements \"name\", \"contact\", and \"preferences\", where \"contact\" includes \"email\" and \"phone\", and \"preferences\" includes \"accommodation\" and \"meals\".  \n• A \"logistics\" element must be included with a \"transportation\" element containing multiple transportation options, and an \"emergency_contacts\" element containing multiple contact entries, each with \"role\", \"name\" (optional for some), and \"phone\".  \n• A \"notes\" element is required with child elements \"weather_forecast\" and \"packing_list\", where the \"packing_list\" comprises multiple items.",
            "task_id": "181707",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[trip]",
                "root[trip][name]",
                "root[trip][destination]",
                "root[trip][dates]",
                "root[trip][dates][start]",
                "root[trip][dates][end]",
                "root[itinerary]",
                "root[itinerary][day]",
                "root[itinerary][day][activity]",
                "root[itinerary][day][details]",
                "root[itinerary][day][details][time]",
                "root[itinerary][day][details][location]",
                "root[itinerary][day][details][notes]",
                "root[traveler]",
                "root[traveler][name]",
                "root[traveler][contact]",
                "root[traveler][contact][email]",
                "root[traveler][contact][phone]",
                "root[traveler][preferences]",
                "root[traveler][preferences][accommodation]",
                "root[traveler][preferences][meals]",
                "root[logistics]",
                "root[logistics][transportation]",
                "root[logistics][emergency_contacts]",
                "root[logistics][emergency_contacts][contact]",
                "root[logistics][emergency_contacts][contact][role]",
                "root[logistics][emergency_contacts][contact][phone]",
                "root[logistics][emergency_contacts][contact][name]",
                "root[notes]",
                "root[notes][weather_forecast]",
                "root[notes][packing_list]",
                "root[notes][packing_list][item]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181707_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\ntrip:\n  name: \"Mountain Adventure\"\n  destination: \"Rocky Peaks\"\n  dates:\n    start: \"2023-11-05\"\n    end: \"2023-11-12\"\n\nitinerary:\n  - day: 1\n    activity: \"Arrival and Orientation\"\n    details:\n      time: \"14:00\"\n      location: \"Base Camp\"\n      notes: \"Check-in and equipment briefing\"\n  - day: 2\n    activity: \"Hiking and Exploration\"\n    details:\n      time: \"08:00\"\n      location: \"Trailhead\"\n      notes: \"Pack lunch and water\"\n  - day: 3\n    activity: \"Summit Attempt\"\n    details:\n      time: \"05:00\"\n      location: \"North Route\"\n      notes: \"Start early to catch sunrise\"\n\ntraveler:\n  name: \"Jordan Lee\"\n  contact:\n    email: \"jordan.lee@example.com\"\n    phone: \"555-0199\"\n  preferences:\n    accommodation: \"Tent\"\n    meals: \"Vegetarian\"\n\nlogistics:\n  transportation: \n    - \"rental vehicle\"\n    - \"on-foot\"\n  emergency_contacts:\n    - role: \"local guide\"\n      name: \"Sam Rivera\"\n      phone: \"555-0222\"\n    - role: \"medical services\"\n      phone: \"911\"\n\nnotes:\n  weather_forecast: \"Cool with scattered clouds\"\n  packing_list:\n    - \"hiking boots\"\n    - \"jacket\"\n    - \"map and compass\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181707_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[trip]",
                                "root[trip][name]",
                                "root[trip][destination]",
                                "root[trip][dates]",
                                "root[trip][dates][start]",
                                "root[trip][dates][end]",
                                "root[itinerary]",
                                "root[itinerary][day]",
                                "root[itinerary][day][activity]",
                                "root[itinerary][day][details]",
                                "root[itinerary][day][details][time]",
                                "root[itinerary][day][details][location]",
                                "root[itinerary][day][details][notes]",
                                "root[traveler]",
                                "root[traveler][name]",
                                "root[traveler][contact]",
                                "root[traveler][contact][email]",
                                "root[traveler][contact][phone]",
                                "root[traveler][preferences]",
                                "root[traveler][preferences][accommodation]",
                                "root[traveler][preferences][meals]",
                                "root[logistics]",
                                "root[logistics][transportation]",
                                "root[logistics][emergency_contacts]",
                                "root[logistics][emergency_contacts][contact]",
                                "root[logistics][emergency_contacts][contact][role]",
                                "root[logistics][emergency_contacts][contact][phone]",
                                "root[logistics][emergency_contacts][contact][name]",
                                "root[notes]",
                                "root[notes][weather_forecast]",
                                "root[notes][packing_list]",
                                "root[notes][packing_list][item]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nversion: \"1.0\"\nstore:\n  name: \"Fictional Bookstore\"\n  address:\n    street: \"123 Book St\"\n    city: \"Novel City\"\n    state: \"Imagination\"\n    zip: \"54321\"\n  contact:\n    phone: \"555-123-4567\"\n    email: \"info@fictionalbookstore.com\"\ninventory:\n  books:\n    - id: 101\n      title: \"Mystery of the Old Manor\"\n      author: \"Alice Walker\"\n      genre: \"Mystery\"\n      price: 12.99\n      availability: \"in-stock\"\n    - id: 102\n      title: \"Space and Beyond\"\n      author: \"George Star\"\n      genre: \"Science Fiction\"\n      price: 15.50\n      availability: \"pre-order\"\n    - id: 103\n      title: \"The History of Magic\"\n      author: \"Luna Spell\"\n      genre: \"Fantasy\"\n      price: 18.75\n      availability: \"in-stock\"\nsales:\n  last_update: \"2023-10-01\"\n  records:\n    - transaction_id: 5001\n      date: \"2023-09-29\"\n      total: 47.25\n      items:\n        - id: 101\n          quantity: 2\n        - id: 103\n          quantity: 1\n    - transaction_id: 5002\n      date: \"2023-09-30\"\n      total: 15.50\n      items:\n        - id: 102\n          quantity: 1\nemployees:\n  - id: 1\n    name: \"John Doe\"\n    role: \"Manager\"\n    email: \"john.doe@fictionalbookstore.com\"\n  - id: 2\n    name: \"Jane Smith\"\n    role: \"Sales Associate\"\n    email: \"jane.smith@fictionalbookstore.com\"\n</code>",
            "feature_requirements": "• The output must have a single root element that encapsulates all the converted data from the YAML input.  \n• There must be an element for the version, with its value set as \"1.0\".  \n• The output must include a \"store\" element containing child elements for \"name\", \"address\", and \"contact\". The \"address\" element must have child elements \"street\", \"city\", \"state\", and \"zip\", and the \"contact\" element must have child elements \"phone\" and \"email\".  \n• There must be an \"inventory\" element that contains a \"books\" section. This \"books\" section must include multiple book elements, where each book element has child elements for \"id\", \"title\", \"author\", \"genre\", \"price\", and \"availability\".  \n• The output must have a \"sales\" element that contains a \"last_update\" element and a \"records\" section. The \"records\" section must consist of multiple transaction elements, each with child elements \"transaction_id\", \"date\", \"total\", and an \"items\" section. The \"items\" section within each transaction must include multiple item elements with child elements \"id\" and \"quantity\".  \n• There must be an \"employees\" element that contains a list of employee elements, each having child elements for \"id\", \"name\", \"role\", and \"email\".  \n• List structures in the YAML (such as books, sales records, items, and employees) must be represented as repeated XML child elements under their respective parent elements.",
            "task_id": "181708",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "root",
                "root[version]",
                "root[store]",
                "root[store][name]",
                "root[store][address]",
                "root[store][address][street]",
                "root[store][address][city]",
                "root[store][address][state]",
                "root[store][address][zip]",
                "root[store][contact]",
                "root[store][contact][phone]",
                "root[store][contact][email]",
                "root[inventory]",
                "root[inventory][books]",
                "root[inventory][books][book]",
                "root[inventory][books][book][id]",
                "root[inventory][books][book][title]",
                "root[inventory][books][book][author]",
                "root[inventory][books][book][genre]",
                "root[inventory][books][book][price]",
                "root[inventory][books][book][availability]",
                "root[sales]",
                "root[sales][last_update]",
                "root[sales][records]",
                "root[sales][records][transaction]",
                "root[sales][records][transaction][transaction_id]",
                "root[sales][records][transaction][date]",
                "root[sales][records][transaction][total]",
                "root[sales][records][transaction][items]",
                "root[sales][records][transaction][items][item]",
                "root[sales][records][transaction][items][item][id]",
                "root[sales][records][transaction][items][item][quantity]",
                "root[employees]",
                "root[employees][employee]",
                "root[employees][employee][id]",
                "root[employees][employee][name]",
                "root[employees][employee][role]",
                "root[employees][employee][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181708_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nversion: \"1.0\"\nstore:\n  name: \"Fictional Bookstore\"\n  address:\n    street: \"123 Book St\"\n    city: \"Novel City\"\n    state: \"Imagination\"\n    zip: \"54321\"\n  contact:\n    phone: \"555-123-4567\"\n    email: \"info@fictionalbookstore.com\"\ninventory:\n  books:\n    - id: 101\n      title: \"Mystery of the Old Manor\"\n      author: \"Alice Walker\"\n      genre: \"Mystery\"\n      price: 12.99\n      availability: \"in-stock\"\n    - id: 102\n      title: \"Space and Beyond\"\n      author: \"George Star\"\n      genre: \"Science Fiction\"\n      price: 15.50\n      availability: \"pre-order\"\n    - id: 103\n      title: \"The History of Magic\"\n      author: \"Luna Spell\"\n      genre: \"Fantasy\"\n      price: 18.75\n      availability: \"in-stock\"\nsales:\n  last_update: \"2023-10-01\"\n  records:\n    - transaction_id: 5001\n      date: \"2023-09-29\"\n      total: 47.25\n      items:\n        - id: 101\n          quantity: 2\n        - id: 103\n          quantity: 1\n    - transaction_id: 5002\n      date: \"2023-09-30\"\n      total: 15.50\n      items:\n        - id: 102\n          quantity: 1\nemployees:\n  - id: 1\n    name: \"John Doe\"\n    role: \"Manager\"\n    email: \"john.doe@fictionalbookstore.com\"\n  - id: 2\n    name: \"Jane Smith\"\n    role: \"Sales Associate\"\n    email: \"jane.smith@fictionalbookstore.com\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181708_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "root",
                                "root[version]",
                                "root[store]",
                                "root[store][name]",
                                "root[store][address]",
                                "root[store][address][street]",
                                "root[store][address][city]",
                                "root[store][address][state]",
                                "root[store][address][zip]",
                                "root[store][contact]",
                                "root[store][contact][phone]",
                                "root[store][contact][email]",
                                "root[inventory]",
                                "root[inventory][books]",
                                "root[inventory][books][book]",
                                "root[inventory][books][book][id]",
                                "root[inventory][books][book][title]",
                                "root[inventory][books][book][author]",
                                "root[inventory][books][book][genre]",
                                "root[inventory][books][book][price]",
                                "root[inventory][books][book][availability]",
                                "root[sales]",
                                "root[sales][last_update]",
                                "root[sales][records]",
                                "root[sales][records][transaction]",
                                "root[sales][records][transaction][transaction_id]",
                                "root[sales][records][transaction][date]",
                                "root[sales][records][transaction][total]",
                                "root[sales][records][transaction][items]",
                                "root[sales][records][transaction][items][item]",
                                "root[sales][records][transaction][items][item][id]",
                                "root[sales][records][transaction][items][item][quantity]",
                                "root[employees]",
                                "root[employees][employee]",
                                "root[employees][employee][id]",
                                "root[employees][employee][name]",
                                "root[employees][employee][role]",
                                "root[employees][employee][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nlibrary:\n  name: \"Downtown Library\"\n  location: \"123 Main St, Cityville\"\n  established: 1950\n  staff:\n    - name: \"Alice Johnson\"\n      position: \"Librarian\"\n      years_of_experience: 10\n    - name: \"Bob Smith\"\n      position: \"Assistant Librarian\"\n      years_of_experience: 5\n  sections:\n    - name: \"Fiction\"\n      floor: 1\n    - name: \"Non-Fiction\"\n      floor: 2\n    - name: \"Children's Books\"\n      floor: 1\n  books:\n    - title: \"The Great Gatsby\"\n      author: \"F. Scott Fitzgerald\"\n      genre: \"Fiction\"\n      year: 1925\n    - title: \"Sapiens: A Brief History of Humankind\"\n      author: \"Yuval Noah Harari\"\n      genre: \"Non-Fiction\"\n      year: 2011\n    - title: \"Harry Potter and the Sorcerer's Stone\"\n      author: \"J.K. Rowling\"\n      genre: \"Children's Fantasy\"\n      year: 1997\n</code>",
            "feature_requirements": "• The XML output must have a single root element named \"library\".  \n• Within the \"library\" element, there must be child elements for \"name\", \"location\", and \"established\" with their corresponding text values.  \n• There must be a \"staff\" element under the \"library\" element that contains multiple child elements representing individual staff members.  \n• Each staff member element must include sub-elements for \"name\", \"position\", and \"years_of_experience\" with the correct values for each person.  \n• The XML must include a \"sections\" element under the \"library\" element that contains multiple child elements representing individual library sections.  \n• Each section element must include sub-elements for \"name\" and \"floor\" with the appropriate values.  \n• There must be a \"books\" element under the \"library\" element that contains multiple child elements representing individual books.  \n• Each book element must include sub-elements for \"title\", \"author\", \"genre\", and \"year\" with the correct corresponding values.  \n• The order and grouping of elements should reflect the logical structure of the original YAML code, preserving the hierarchy (library info, then staff, sections, and books).",
            "task_id": "181709",
            "task_name": "Convert YAML to XML",
            "input_type": "YAML",
            "output_type": "XML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[name]",
                "library[location]",
                "library[established]",
                "library[staff]",
                "library[staff][name]",
                "library[staff][position]",
                "library[staff][years_of_experience]",
                "library[sections]",
                "library[sections][name]",
                "library[sections][floor]",
                "library[books]",
                "library[books][title]",
                "library[books][author]",
                "library[books][genre]",
                "library[books][year]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "181709_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nConvert the following YAML code to XML code.\n\n<code>\nlibrary:\n  name: \"Downtown Library\"\n  location: \"123 Main St, Cityville\"\n  established: 1950\n  staff:\n    - name: \"Alice Johnson\"\n      position: \"Librarian\"\n      years_of_experience: 10\n    - name: \"Bob Smith\"\n      position: \"Assistant Librarian\"\n      years_of_experience: 5\n  sections:\n    - name: \"Fiction\"\n      floor: 1\n    - name: \"Non-Fiction\"\n      floor: 2\n    - name: \"Children's Books\"\n      floor: 1\n  books:\n    - title: \"The Great Gatsby\"\n      author: \"F. Scott Fitzgerald\"\n      genre: \"Fiction\"\n      year: 1925\n    - title: \"Sapiens: A Brief History of Humankind\"\n      author: \"Yuval Noah Harari\"\n      genre: \"Non-Fiction\"\n      year: 2011\n    - title: \"Harry Potter and the Sorcerer's Stone\"\n      author: \"J.K. Rowling\"\n      genre: \"Children's Fantasy\"\n      year: 1997\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "181709_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[name]",
                                "library[location]",
                                "library[established]",
                                "library[staff]",
                                "library[staff][name]",
                                "library[staff][position]",
                                "library[staff][years_of_experience]",
                                "library[sections]",
                                "library[sections][name]",
                                "library[sections][floor]",
                                "library[books]",
                                "library[books][title]",
                                "library[books][author]",
                                "library[books][genre]",
                                "library[books][year]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nproject:\n  name: \"Inventory Management System\"\n  version: \"1.2.0\"\n  releaseDate: \"2023-11-05\"\n\nmetadata:\n  author: \"Jane Doe\"\n  license: \"MIT\"\n  contributors:\n    - name: \"John Smith\"\n      role: \"Developer\"\n    - name: \"Emily Johnson\"\n      role: \"Tester\"\n\nconfiguration:\n  environment: \"production\"\n  debug: false\n  features:\n    - name: \"Real-time Alerts\"\n      enabled: true\n    - name: \"Automated Reporting\"\n      enabled: false\n\ndata:\n  records:\n    - id: 101\n      type: \"order\"\n      status: \"completed\"\n    - id: 102\n      type: \"order\"\n      status: \"pending\"\n  count: 2\n\nusers:\n  admins:\n    - username: \"admin01\"\n      permissions:\n        - \"read\"\n        - \"write\"\n        - \"execute\"\n  viewers:\n    - username: \"user07\"\n      permissions:\n        - \"read\"\n\nlimits:\n  maxRecords: 1000\n  timeout: 30\n</code>",
            "feature_requirements": "• The CSV output must include separate rows and columns representing each top-level section (project, metadata, configuration, data, users, limits).  \n• The CSV must contain a header row with column names that clearly label the type of data being represented (e.g., \"project_name\", \"version\", \"releaseDate\", etc.).  \n• For the \"project\" section, the output must include columns for name, version, and releaseDate with their corresponding values.  \n• The \"metadata\" section must include columns for author and license, and it must represent each contributor as a separate row or as concatenated data with clearly delineated name and role.  \n• The \"configuration\" section must have columns for environment and debug, and it must represent each feature including its name and whether it is enabled in distinct entries or combined in a reportable format.  \n• The \"data\" section must include a table where each record is represented with columns for id, type, and status, along with a separate field or row indicating the total count.  \n• The \"users\" section must be output with distinct entries for admins and viewers, including a username column and an associated permissions column that lists all permissions for each user.  \n• The \"limits\" section must include columns for maxRecords and timeout with their corresponding numeric values.  \n• All nested lists (contributors, features, records, permissions) must be flattened appropriately so that each individual data point is verifiable in a single CSV row or through a concatenated, clearly separable value.",
            "task_id": "180200",
            "task_name": "Convert YAML to CSV",
            "input_type": "YAML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][project_name]",
                "rows[0][project_version]",
                "rows[0][project_releaseDate]",
                "rows[0][metadata_author]",
                "rows[0][metadata_license]",
                "rows[*][metadata_contributor_name]",
                "rows[*][metadata_contributor_role]",
                "rows[0][configuration_environment]",
                "rows[0][configuration_debug]",
                "rows[*][configuration_feature_name]",
                "rows[*][configuration_feature_enabled]",
                "rows[*][data_id]",
                "rows[*][data_type]",
                "rows[*][data_status]",
                "rows[0][data_totalCount]",
                "rows[*][users_username]",
                "rows[*][users_permissions]",
                "rows[0][limits_maxRecords]",
                "rows[0][limits_timeout]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180200_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nproject:\n  name: \"Inventory Management System\"\n  version: \"1.2.0\"\n  releaseDate: \"2023-11-05\"\n\nmetadata:\n  author: \"Jane Doe\"\n  license: \"MIT\"\n  contributors:\n    - name: \"John Smith\"\n      role: \"Developer\"\n    - name: \"Emily Johnson\"\n      role: \"Tester\"\n\nconfiguration:\n  environment: \"production\"\n  debug: false\n  features:\n    - name: \"Real-time Alerts\"\n      enabled: true\n    - name: \"Automated Reporting\"\n      enabled: false\n\ndata:\n  records:\n    - id: 101\n      type: \"order\"\n      status: \"completed\"\n    - id: 102\n      type: \"order\"\n      status: \"pending\"\n  count: 2\n\nusers:\n  admins:\n    - username: \"admin01\"\n      permissions:\n        - \"read\"\n        - \"write\"\n        - \"execute\"\n  viewers:\n    - username: \"user07\"\n      permissions:\n        - \"read\"\n\nlimits:\n  maxRecords: 1000\n  timeout: 30\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180200_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][project_name]",
                                "rows[0][project_version]",
                                "rows[0][project_releaseDate]",
                                "rows[0][metadata_author]",
                                "rows[0][metadata_license]",
                                "rows[*][metadata_contributor_name]",
                                "rows[*][metadata_contributor_role]",
                                "rows[0][configuration_environment]",
                                "rows[0][configuration_debug]",
                                "rows[*][configuration_feature_name]",
                                "rows[*][configuration_feature_enabled]",
                                "rows[*][data_id]",
                                "rows[*][data_type]",
                                "rows[*][data_status]",
                                "rows[0][data_totalCount]",
                                "rows[*][users_username]",
                                "rows[*][users_permissions]",
                                "rows[0][limits_maxRecords]",
                                "rows[0][limits_timeout]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nfestival:\n  name: \"Autumn Fest 2023\"\n  location:\n    city: \"Portland\"\n    venue: \"Riverfront Park\"\n    coordinates:\n      latitude: 45.523\n      longitude: -122.676\n  dates:\n    start: \"2023-10-01\"\n    end: \"2023-10-07\"\n  events:\n    - title: \"Open Mic Night\"\n      schedule: \"2023-10-02T19:00:00\"\n      type: \"performance\"\n    - title: \"Artisan Market\"\n      schedule: \"2023-10-03T10:00:00\"\n      type: \"marketplace\"\n    - title: \"Film Screening\"\n      schedule: \"2023-10-05T18:00:00\"\n      type: \"screening\"\n  team:\n    coordinator: \"Alice Johnson\"\n    volunteers:\n      - \"Bob Carter\"\n      - \"Diane Keating\"\n      - \"Eli Turner\"\n  tickets:\n    general:\n      price: 25\n      availability: 200\n    vip:\n      price: 75\n      availability: 50\n</code>",
            "feature_requirements": "• The CSV output must include a header row with column names that represent the festival's main keys and subkeys (e.g., festival name, city, venue, latitude, longitude, start date, end date, etc.).  \n• There must be separate columns for the primary festival details such as the festival name, location details (city and venue), and geographical coordinates (latitude and longitude).  \n• The dates section from the YAML should be converted into two separate CSV columns representing the start and end dates of the festival.  \n• Event details must be incorporated, meaning that each event’s title, schedule, and type should appear in the CSV; if multiple events exist, they should be represented either as multiple rows or in a clearly delimited fashion within fields.  \n• The team information must be included, with a distinct column for the coordinator’s name and another column that contains the list of volunteer names (the volunteers should be combined into one field using a recognizable delimiter).  \n• The tickets information should be captured in the CSV through columns that reflect the pricing and availability for both general and VIP tickets, with clear labels indicating the type.  \n• Overall, the CSV must accurately flatten the nested YAML hierarchy into a structured, tabular form where each key (and its nested keys) is represented as a distinct, measurable CSV column header.",
            "task_id": "180201",
            "task_name": "Convert YAML to CSV",
            "input_type": "YAML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][festival name]",
                "rows[0][city]",
                "rows[0][venue]",
                "rows[0][latitude]",
                "rows[0][longitude]",
                "rows[0][start date]",
                "rows[0][end date]",
                "rows[0][event title]",
                "rows[0][event schedule]",
                "rows[0][event type]",
                "rows[0][coordinator]",
                "rows[0][volunteers]",
                "rows[0][tickets general price]",
                "rows[0][tickets general availability]",
                "rows[0][tickets vip price]",
                "rows[0][tickets vip availability]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180201_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nfestival:\n  name: \"Autumn Fest 2023\"\n  location:\n    city: \"Portland\"\n    venue: \"Riverfront Park\"\n    coordinates:\n      latitude: 45.523\n      longitude: -122.676\n  dates:\n    start: \"2023-10-01\"\n    end: \"2023-10-07\"\n  events:\n    - title: \"Open Mic Night\"\n      schedule: \"2023-10-02T19:00:00\"\n      type: \"performance\"\n    - title: \"Artisan Market\"\n      schedule: \"2023-10-03T10:00:00\"\n      type: \"marketplace\"\n    - title: \"Film Screening\"\n      schedule: \"2023-10-05T18:00:00\"\n      type: \"screening\"\n  team:\n    coordinator: \"Alice Johnson\"\n    volunteers:\n      - \"Bob Carter\"\n      - \"Diane Keating\"\n      - \"Eli Turner\"\n  tickets:\n    general:\n      price: 25\n      availability: 200\n    vip:\n      price: 75\n      availability: 50\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180201_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][festival name]",
                                "rows[0][city]",
                                "rows[0][venue]",
                                "rows[0][latitude]",
                                "rows[0][longitude]",
                                "rows[0][start date]",
                                "rows[0][end date]",
                                "rows[0][event title]",
                                "rows[0][event schedule]",
                                "rows[0][event type]",
                                "rows[0][coordinator]",
                                "rows[0][volunteers]",
                                "rows[0][tickets general price]",
                                "rows[0][tickets general availability]",
                                "rows[0][tickets vip price]",
                                "rows[0][tickets vip availability]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nlibrary:\n  name: City Central Library\n  location: \"123 Library Lane\"\n  established: 1920\n  sections:\n    - name: Fiction\n      floor: 1\n      shelfCount: 12\n    - name: Non-Fiction\n      floor: 2\n      shelfCount: 15\n    - name: Children's\n      floor: 1\n      shelfCount: 8\n  events:\n    - id: E001\n      title: Book Reading\n      date: \"2023-11-25\"\n      participants:\n        - name: Alice Smith\n          role: Host\n        - name: Bob Lee\n          role: Speaker\n    - id: E002\n      title: Author Meet & Greet\n      date: \"2023-12-05\"\n      participants:\n        - name: Carol White\n          role: Author\n        - name: John Doe\n          role: Moderator\nmetadata:\n  createdBy: SystemAdmin\n  lastUpdated: \"2023-10-01\"\ncontacts:\n  - type: phone\n    value: \"555-1234\"\n  - type: email\n    value: \"info@citylibrary.org\"\n</code>",
            "feature_requirements": "• The CSV output must include a row (or rows) representing the library’s basic information: name, location, and established year.  \n• The CSV output must contain a section for library sections, with each row listing the section’s name, floor, and shelf count.  \n• The CSV output must include a section for events, with each row detailing the event’s id, title, and date.  \n• The CSV output must represent the nested participants data for each event, with rows including the associated event id, participant name, and participant role.  \n• The CSV output must include metadata information rows that capture the keys createdBy and lastUpdated along with their values.  \n• The CSV output must include contacts information, with each row showing the contact type and its corresponding value.  \n• The CSV output must preserve the data types and values (such as numbers and dates) as they appear in the original YAML.",
            "task_id": "180202",
            "task_name": "Convert YAML to CSV",
            "input_type": "YAML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[*][name]",
                "rows[*][location]",
                "rows[*][established_year]",
                "rows[*][section_name]",
                "rows[*][floor]",
                "rows[*][shelf_count]",
                "rows[*][event_id]",
                "rows[*][title]",
                "rows[*][date]",
                "rows[*][participants][event_id]",
                "rows[*][participants][participant_name]",
                "rows[*][participants][participant_role]",
                "rows[*][createdBy]",
                "rows[*][lastUpdated]",
                "rows[*][contact_type]",
                "rows[*][contact_value]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180202_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nlibrary:\n  name: City Central Library\n  location: \"123 Library Lane\"\n  established: 1920\n  sections:\n    - name: Fiction\n      floor: 1\n      shelfCount: 12\n    - name: Non-Fiction\n      floor: 2\n      shelfCount: 15\n    - name: Children's\n      floor: 1\n      shelfCount: 8\n  events:\n    - id: E001\n      title: Book Reading\n      date: \"2023-11-25\"\n      participants:\n        - name: Alice Smith\n          role: Host\n        - name: Bob Lee\n          role: Speaker\n    - id: E002\n      title: Author Meet & Greet\n      date: \"2023-12-05\"\n      participants:\n        - name: Carol White\n          role: Author\n        - name: John Doe\n          role: Moderator\nmetadata:\n  createdBy: SystemAdmin\n  lastUpdated: \"2023-10-01\"\ncontacts:\n  - type: phone\n    value: \"555-1234\"\n  - type: email\n    value: \"info@citylibrary.org\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180202_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[*][name]",
                                "rows[*][location]",
                                "rows[*][established_year]",
                                "rows[*][section_name]",
                                "rows[*][floor]",
                                "rows[*][shelf_count]",
                                "rows[*][event_id]",
                                "rows[*][title]",
                                "rows[*][date]",
                                "rows[*][participants][event_id]",
                                "rows[*][participants][participant_name]",
                                "rows[*][participants][participant_role]",
                                "rows[*][createdBy]",
                                "rows[*][lastUpdated]",
                                "rows[*][contact_type]",
                                "rows[*][contact_value]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nconference:\n  name: \"International Tech Forum 2023\"\n  location: \"Berlin, Germany\"\n  dates:\n    start: \"2023-11-20\"\n    end: \"2023-11-22\"\n  topics:\n    - \"Artificial Intelligence\"\n    - \"Cloud Computing\"\n    - \"Cybersecurity\"\n  sessions:\n    keynote:\n      speaker: \"Dr. Jane Smith\"\n      topic: \"Future of Robotics\"\n      duration: 90\n    panel:\n      moderators:\n        - name: \"John Doe\"\n          title: \"CTO, Tech Innovators\"\n        - name: \"Alice Johnson\"\n          title: \"VP R&D, FutureTech\"\n  sponsors:\n    platinum:\n      - \"GlobalTech\"\n      - \"InnovateNow\"\n    gold:\n      - \"NextGen Solutions\"\n      - \"SoftCorp\"\n</code>",
            "feature_requirements": "• The CSV output must include a header row with clear column labels representing each major data attribute (e.g., Conference Name, Location, Start Date, End Date, Topics, Keynote Speaker, Keynote Topic, Keynote Duration, Panel Moderators, Platinum Sponsors, Gold Sponsors).  \n• The CSV must contain a row (or rows) dedicated to the conference metadata, including the conference’s name (\"International Tech Forum 2023\") and location (\"Berlin, Germany\").  \n• The CSV output must include separate columns for the start and end dates of the conference, populated with \"2023-11-20\" and \"2023-11-22\" respectively.  \n• The CSV must represent the topics as a single cell entry that contains all topics (e.g., \"Artificial Intelligence, Cloud Computing, Cybersecurity\") separated by a consistent delimiter such as a comma.  \n• The CSV must contain columns specific to the keynote session details, recording the speaker (\"Dr. Jane Smith\"), topic (\"Future of Robotics\"), and duration (90).  \n• The CSV must capture the panel session information by including a column that aggregates the moderator details (each moderator’s name and title, e.g., \"John Doe - CTO, Tech Innovators; Alice Johnson - VP R&D, FutureTech\") in a single cell using a consistent separator.  \n• The CSV must include columns for sponsor information grouped by their levels — one column for platinum sponsors and another for gold sponsors — with each cell listing the sponsor names as comma-separated values (e.g., platinum: \"GlobalTech, InnovateNow\"; gold: \"NextGen Solutions, SoftCorp\").",
            "task_id": "180203",
            "task_name": "Convert YAML to CSV",
            "input_type": "YAML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][Conference Name]",
                "rows[0][Location]",
                "rows[0][Start Date]",
                "rows[0][End Date]",
                "rows[0][Topics]",
                "rows[0][Keynote Speaker]",
                "rows[0][Keynote Topic]",
                "rows[0][Keynote Duration]",
                "rows[0][Panel Moderators]",
                "rows[0][Platinum Sponsors]",
                "rows[0][Gold Sponsors]",
                "rows[*][Conference Name]",
                "rows[*][Location]",
                "rows[*][Start Date]",
                "rows[*][End Date]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180203_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nconference:\n  name: \"International Tech Forum 2023\"\n  location: \"Berlin, Germany\"\n  dates:\n    start: \"2023-11-20\"\n    end: \"2023-11-22\"\n  topics:\n    - \"Artificial Intelligence\"\n    - \"Cloud Computing\"\n    - \"Cybersecurity\"\n  sessions:\n    keynote:\n      speaker: \"Dr. Jane Smith\"\n      topic: \"Future of Robotics\"\n      duration: 90\n    panel:\n      moderators:\n        - name: \"John Doe\"\n          title: \"CTO, Tech Innovators\"\n        - name: \"Alice Johnson\"\n          title: \"VP R&D, FutureTech\"\n  sponsors:\n    platinum:\n      - \"GlobalTech\"\n      - \"InnovateNow\"\n    gold:\n      - \"NextGen Solutions\"\n      - \"SoftCorp\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180203_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][Conference Name]",
                                "rows[0][Location]",
                                "rows[0][Start Date]",
                                "rows[0][End Date]",
                                "rows[0][Topics]",
                                "rows[0][Keynote Speaker]",
                                "rows[0][Keynote Topic]",
                                "rows[0][Keynote Duration]",
                                "rows[0][Panel Moderators]",
                                "rows[0][Platinum Sponsors]",
                                "rows[0][Gold Sponsors]",
                                "rows[*][Conference Name]",
                                "rows[*][Location]",
                                "rows[*][Start Date]",
                                "rows[*][End Date]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nproject:\n  name: \"Data Conversion Tool\"\n  version: \"1.0.3\"\n  description: \"Converts input from various formats to structured YAML output.\"\n  parameters:\n    timeout: 120\n    retries: 3\n    safe_mode: true\n\nenvironment:\n  os: \"Ubuntu 20.04\"\n  architecture: \"x86_64\"\n  installed_packages:\n    - \"python3\"\n    - \"libyaml\"\n    - \"jq\"\n\nservices:\n  - name: \"Conversion API\"\n    port: 8080\n    status: \"running\"\n  - name: \"Monitoring Service\"\n    port: 9090\n    status: \"offline\"\n\nmetadata:\n  created_date: \"2023-10-15\"\n  author: \"DevOps Team\"\n  license: \"MIT\"\n</code>",
            "feature_requirements": "• The CSV output must include a header row that labels each field derived from the YAML keys.\n• There should be columns representing the 'project' section, including fields for name, version, and description.\n• The CSV must include fields for the 'project parameters', specifically including numeric timeout, integer retries, and boolean safe_mode.\n• The CSV output must contain columns for the 'environment' section, with fields for os and architecture.\n• The installed_packages list from the 'environment' section must be represented in a single CSV cell using a consistent delimiter.\n• Each service entry in the 'services' list must be represented, including separate fields for service name, port, and status.\n• The CSV must include columns for the 'metadata' section, covering fields for created_date, author, and license.\n• The conversion must flatten hierarchical keys in a measurable manner (for example by combining parent and child key names) to ensure traceability between the original YAML and CSV fields.",
            "task_id": "180204",
            "task_name": "Convert YAML to CSV",
            "input_type": "YAML",
            "output_type": "CSV",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][project][name]",
                "rows[0][project][version]",
                "rows[0][project][description]",
                "rows[0][project_parameters][timeout]",
                "rows[0][project_parameters][retries]",
                "rows[0][project_parameters][safe_mode]",
                "rows[0][environment][os]",
                "rows[0][environment][architecture]",
                "rows[0][environment][installed_packages]",
                "rows[0][services][name]",
                "rows[0][services][port]",
                "rows[0][services][status]",
                "rows[0][metadata][created_date]",
                "rows[0][metadata][author]",
                "rows[0][metadata][license]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "180204_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output CSV:\n\nTask:\nConvert the following YAML code to CSV code.\n\n<code>\nproject:\n  name: \"Data Conversion Tool\"\n  version: \"1.0.3\"\n  description: \"Converts input from various formats to structured YAML output.\"\n  parameters:\n    timeout: 120\n    retries: 3\n    safe_mode: true\n\nenvironment:\n  os: \"Ubuntu 20.04\"\n  architecture: \"x86_64\"\n  installed_packages:\n    - \"python3\"\n    - \"libyaml\"\n    - \"jq\"\n\nservices:\n  - name: \"Conversion API\"\n    port: 8080\n    status: \"running\"\n  - name: \"Monitoring Service\"\n    port: 9090\n    status: \"offline\"\n\nmetadata:\n  created_date: \"2023-10-15\"\n  author: \"DevOps Team\"\n  license: \"MIT\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "180204_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][project][name]",
                                "rows[0][project][version]",
                                "rows[0][project][description]",
                                "rows[0][project_parameters][timeout]",
                                "rows[0][project_parameters][retries]",
                                "rows[0][project_parameters][safe_mode]",
                                "rows[0][environment][os]",
                                "rows[0][environment][architecture]",
                                "rows[0][environment][installed_packages]",
                                "rows[0][services][name]",
                                "rows[0][services][port]",
                                "rows[0][services][status]",
                                "rows[0][metadata][created_date]",
                                "rows[0][metadata][author]",
                                "rows[0][metadata][license]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[server]\nip = \"192.168.1.1\"\nport = 8080\nenabled = true\n\n[database]\nuser = \"db_admin\"\npassword = \"secure1234\"\nhosts = [\"db1.example.com\", \"db2.example.com\"]\nports = [5432, 5433]\n\n[database.settings]\nmax_connections = 100\ntimeout = 30.5\n\n[application]\nname = \"ConfigApp\"\nversion = \"1.2.3\"\nfeatures = [\"logging\", \"data_caching\", \"api_support\"]\n\n[[plugins]]\nname = \"authentication\"\nenabled = true\nconfig = { method = \"oauth\", token_expiry = 3600 }\n\n[[plugins]]\nname = \"analytics\"\nenabled = false\nconfig = { tracking_id = \"UA-123456\", sample_rate = 0.5 }\n</code>",
            "feature_requirements": "• The output must use a hierarchical JSON structure with top‐level keys corresponding to the sections: \"server\", \"database\", \"application\", and \"plugins\".  \n• The \"server\" object must include keys: \"ip\" (with the string value \"192.168.1.1\"), \"port\" (with the number value 8080), and \"enabled\" (with the boolean value true).  \n• The \"database\" object must include keys: \"user\" (with the string value \"db_admin\"), \"password\" (with the string value \"secure1234\"), \"hosts\" (an array of strings [\"db1.example.com\", \"db2.example.com\"]), and \"ports\" (an array of numbers [5432, 5433]).  \n• Within the \"database\" object, there must be a nested \"settings\" object containing the keys \"max_connections\" (with the number value 100) and \"timeout\" (with the numeric value 30.5).  \n• The \"application\" object must include keys: \"name\" (with the string value \"ConfigApp\"), \"version\" (with the string value \"1.2.3\"), and \"features\" (an array of strings [\"logging\", \"data_caching\", \"api_support\"]).  \n• The \"plugins\" key must be an array containing two objects; each object must include keys \"name\", \"enabled\", and \"config\". For the first object, \"config\" must be an object with keys \"method\" (string \"oauth\") and \"token_expiry\" (number 3600); for the second object, \"config\" must be an object with keys \"tracking_id\" (string \"UA-123456\") and \"sample_rate\" (number 0.5).",
            "task_id": "100500",
            "task_name": "Convert TOML to JSON",
            "input_type": "TOML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "server",
                "server[ip]",
                "server[port]",
                "server[enabled]",
                "database",
                "database[user]",
                "database[password]",
                "database[hosts]",
                "database[ports]",
                "database[settings]",
                "database[settings][max_connections]",
                "database[settings][timeout]",
                "application",
                "application[name]",
                "application[version]",
                "application[features]",
                "plugins",
                "plugins[0]",
                "plugins[0][name]",
                "plugins[0][enabled]",
                "plugins[0][config]",
                "plugins[0][config][method]",
                "plugins[0][config][token_expiry]",
                "plugins[1]",
                "plugins[1][name]",
                "plugins[1][enabled]",
                "plugins[1][config]",
                "plugins[1][config][tracking_id]",
                "plugins[1][config][sample_rate]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "100500_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[server]\nip = \"192.168.1.1\"\nport = 8080\nenabled = true\n\n[database]\nuser = \"db_admin\"\npassword = \"secure1234\"\nhosts = [\"db1.example.com\", \"db2.example.com\"]\nports = [5432, 5433]\n\n[database.settings]\nmax_connections = 100\ntimeout = 30.5\n\n[application]\nname = \"ConfigApp\"\nversion = \"1.2.3\"\nfeatures = [\"logging\", \"data_caching\", \"api_support\"]\n\n[[plugins]]\nname = \"authentication\"\nenabled = true\nconfig = { method = \"oauth\", token_expiry = 3600 }\n\n[[plugins]]\nname = \"analytics\"\nenabled = false\nconfig = { tracking_id = \"UA-123456\", sample_rate = 0.5 }\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "100500_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "server",
                                "server[ip]",
                                "server[port]",
                                "server[enabled]",
                                "database",
                                "database[user]",
                                "database[password]",
                                "database[hosts]",
                                "database[ports]",
                                "database[settings]",
                                "database[settings][max_connections]",
                                "database[settings][timeout]",
                                "application",
                                "application[name]",
                                "application[version]",
                                "application[features]",
                                "plugins",
                                "plugins[0]",
                                "plugins[0][name]",
                                "plugins[0][enabled]",
                                "plugins[0][config]",
                                "plugins[0][config][method]",
                                "plugins[0][config][token_expiry]",
                                "plugins[1]",
                                "plugins[1][name]",
                                "plugins[1][enabled]",
                                "plugins[1][config]",
                                "plugins[1][config][tracking_id]",
                                "plugins[1][config][sample_rate]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\ntitle = \"Config for Data Conversion Task\"\nversion = \"1.2.3\"\nenabled = true\ntags = [\"conversion\", \"TOML\", \"structured data\"]\n\n[metadata]\ndescription = \"Configuration file for a structured data conversion process.\"\nauthor = \"Data Converter Team\"\nrelease_date = \"2023-10-15\"\ncomments = [\"initial release\", \"stable version\"]\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nprotocols = [\"http\", \"https\"]\ntimeouts = { connection = 30, read = 60, write = 45 }\n\n[database]\nengine = \"SQLite\"\nfilepath = \"/var/data/convert.db\"\nreplicas = []\nbackup_enabled = false\n\n[rules]\nallow_empty_fields = true\nmax_conversion_attempts = 5\nsupported_formats = [\"json\", \"xml\", \"csv\"]\n</code>",
            "feature_requirements": "• The output must be in a structured data format containing a top-level collection of key-value pairs.\n• The top-level keys must include \"title\", \"version\", \"enabled\", \"tags\", \"metadata\", \"server\", \"database\", and \"rules\".\n• The \"title\" key must have a string value (\"Config for Data Conversion Task\") and \"version\" a string (\"1.2.3\").\n• The \"enabled\" key must have a boolean value (true) and the \"tags\" key must hold an array of strings.\n• The \"metadata\" object must include the keys \"description\", \"author\", \"release_date\", and \"comments\", with \"comments\" being an array of strings.\n• The \"server\" object must include keys \"host\", \"port\", \"protocols\", and \"timeouts\", where \"protocols\" is an array of strings.\n• Inside the \"server\" object, the \"timeouts\" must be a structured data with keys \"connection\", \"read\", and \"write\", each holding numerical values.\n• The \"database\" object must include keys \"engine\", \"filepath\", \"replicas\", and \"backup_enabled\", with \"replicas\" as an empty array and \"backup_enabled\" as a boolean value (false).\n• The \"rules\" object must include keys \"allow_empty_fields\", \"max_conversion_attempts\", and \"supported_formats\", with \"supported_formats\" as an array of strings and \"max_conversion_attempts\" as a number.",
            "task_id": "100501",
            "task_name": "Convert TOML to JSON",
            "input_type": "TOML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "version",
                "enabled",
                "tags",
                "metadata",
                "metadata[description]",
                "metadata[author]",
                "metadata[release_date]",
                "metadata[comments]",
                "server",
                "server[host]",
                "server[port]",
                "server[protocols]",
                "server[timeouts]",
                "server[timeouts][connection]",
                "server[timeouts][read]",
                "server[timeouts][write]",
                "database",
                "database[engine]",
                "database[filepath]",
                "database[replicas]",
                "database[backup_enabled]",
                "rules",
                "rules[allow_empty_fields]",
                "rules[max_conversion_attempts]",
                "rules[supported_formats]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "100501_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\ntitle = \"Config for Data Conversion Task\"\nversion = \"1.2.3\"\nenabled = true\ntags = [\"conversion\", \"TOML\", \"structured data\"]\n\n[metadata]\ndescription = \"Configuration file for a structured data conversion process.\"\nauthor = \"Data Converter Team\"\nrelease_date = \"2023-10-15\"\ncomments = [\"initial release\", \"stable version\"]\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nprotocols = [\"http\", \"https\"]\ntimeouts = { connection = 30, read = 60, write = 45 }\n\n[database]\nengine = \"SQLite\"\nfilepath = \"/var/data/convert.db\"\nreplicas = []\nbackup_enabled = false\n\n[rules]\nallow_empty_fields = true\nmax_conversion_attempts = 5\nsupported_formats = [\"json\", \"xml\", \"csv\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "100501_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "version",
                                "enabled",
                                "tags",
                                "metadata",
                                "metadata[description]",
                                "metadata[author]",
                                "metadata[release_date]",
                                "metadata[comments]",
                                "server",
                                "server[host]",
                                "server[port]",
                                "server[protocols]",
                                "server[timeouts]",
                                "server[timeouts][connection]",
                                "server[timeouts][read]",
                                "server[timeouts][write]",
                                "database",
                                "database[engine]",
                                "database[filepath]",
                                "database[replicas]",
                                "database[backup_enabled]",
                                "rules",
                                "rules[allow_empty_fields]",
                                "rules[max_conversion_attempts]",
                                "rules[supported_formats]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[database]\nserver = \"192.168.1.1\"\nports = [8001, 8001, 8002]\nconnection_max = 5000\nenabled = true\n\n[server]\nhostname = \"example.org\"\nip = \"192.168.1.10\"\nroles = [\"admin\", \"user\", \"guest\"]\n\n[logging]\nlevel = \"debug\"\nfile_path = \"/var/log/app.log\"\nrotation = { count = 10, size = \"5MB\" }\n\n[settings]\ntheme = \"dark\"\nfeatures = [\"login\", \"signup\", \"notifications\"]\ntime_zone = \"UTC\"\n</code>",
            "feature_requirements": "• The JSON output must have four top-level keys corresponding to the TOML sections: \"database\", \"server\", \"logging\", and \"settings\".\n• Under the \"database\" section, there must be keys for \"server\" (a string), \"ports\" (an array of numbers), \"connection_max\" (a number), and \"enabled\" (a boolean).\n• The \"server\" section must include keys for \"hostname\" (a string), \"ip\" (a string), and \"roles\" (an array of strings).\n• The \"logging\" section is required to include a \"level\" key (a string), a \"file_path\" key (a string), and a \"rotation\" key that is an object.\n• The \"rotation\" object within \"logging\" must contain a \"count\" key (a number) and a \"size\" key (a string).\n• Under the \"settings\" section, there must be keys for \"theme\" (a string), \"features\" (an array of strings), and \"time_zone\" (a string).",
            "task_id": "100502",
            "task_name": "Convert TOML to JSON",
            "input_type": "TOML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "database",
                "database[server]",
                "database[ports]",
                "database[connection_max]",
                "database[enabled]",
                "server",
                "server[hostname]",
                "server[ip]",
                "server[roles]",
                "logging",
                "logging[level]",
                "logging[file_path]",
                "logging[rotation]",
                "logging[rotation][count]",
                "logging[rotation][size]",
                "settings",
                "settings[theme]",
                "settings[features]",
                "settings[time_zone]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "100502_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[database]\nserver = \"192.168.1.1\"\nports = [8001, 8001, 8002]\nconnection_max = 5000\nenabled = true\n\n[server]\nhostname = \"example.org\"\nip = \"192.168.1.10\"\nroles = [\"admin\", \"user\", \"guest\"]\n\n[logging]\nlevel = \"debug\"\nfile_path = \"/var/log/app.log\"\nrotation = { count = 10, size = \"5MB\" }\n\n[settings]\ntheme = \"dark\"\nfeatures = [\"login\", \"signup\", \"notifications\"]\ntime_zone = \"UTC\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "100502_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "database",
                                "database[server]",
                                "database[ports]",
                                "database[connection_max]",
                                "database[enabled]",
                                "server",
                                "server[hostname]",
                                "server[ip]",
                                "server[roles]",
                                "logging",
                                "logging[level]",
                                "logging[file_path]",
                                "logging[rotation]",
                                "logging[rotation][count]",
                                "logging[rotation][size]",
                                "settings",
                                "settings[theme]",
                                "settings[features]",
                                "settings[time_zone]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[database]\nserver = \"192.168.1.100\"\nports = [ 5432, 5433, 5434 ]\nconnection_max = 100\nenabled = true\n\n[owner]\nname = \"Alice Johnson\"\ndob = 1985-04-12T15:30:00Z\nroles = [\"admin\", \"editor\"]\n\n[servers.alpha]\nip = \"10.1.0.1\"\nrole = \"web\"\nload = 0.75\n\n[servers.beta]\nip = \"10.1.0.2\"\nrole = \"database\"\nload = 0.65\n\n[clients]\naccounts = [\n  {id = 101, name = \"Client One\", active = true},\n  {id = 102, name = \"Client Two\", active = false},\n  {id = 103, name = \"Client Three\", active = true}\n]\n</code>",
            "feature_requirements": "• The output JSON must have a top-level structure containing exactly the keys: \"database\", \"owner\", \"servers\", and \"clients\".\n\n• The \"database\" object must include keys with corresponding values: \"server\" (a string), \"ports\" (an array of numbers), \"connection_max\" (a number), and \"enabled\" (a boolean).\n\n• The \"owner\" object must include the keys: \"name\" (a string), \"dob\" (a date/time represented in ISO 8601 string format), and \"roles\" (an array of strings).\n\n• The \"servers\" object must contain nested objects for \"alpha\" and \"beta\", each with keys: \"ip\" (a string), \"role\" (a string), and \"load\" (a number).\n\n• The \"clients\" object must include a key \"accounts\" that maps to an array of objects, each with keys: \"id\" (a number), \"name\" (a string), and \"active\" (a boolean).\n\n• Each array in the JSON output should preserve the order of its elements as defined in the input code.\n\n• The conversion must maintain the data types of values (string, number, boolean, and array) exactly as specified in the input code.",
            "task_id": "100503",
            "task_name": "Convert TOML to JSON",
            "input_type": "TOML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "database",
                "database[server]",
                "database[ports]",
                "database[connection_max]",
                "database[enabled]",
                "owner",
                "owner[name]",
                "owner[dob]",
                "owner[roles]",
                "servers",
                "servers[alpha]",
                "servers[alpha][ip]",
                "servers[alpha][role]",
                "servers[alpha][load]",
                "servers[beta]",
                "servers[beta][ip]",
                "servers[beta][role]",
                "servers[beta][load]",
                "clients",
                "clients[accounts]",
                "clients[accounts][][id]",
                "clients[accounts][][name]",
                "clients[accounts][][active]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "100503_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\n[database]\nserver = \"192.168.1.100\"\nports = [ 5432, 5433, 5434 ]\nconnection_max = 100\nenabled = true\n\n[owner]\nname = \"Alice Johnson\"\ndob = 1985-04-12T15:30:00Z\nroles = [\"admin\", \"editor\"]\n\n[servers.alpha]\nip = \"10.1.0.1\"\nrole = \"web\"\nload = 0.75\n\n[servers.beta]\nip = \"10.1.0.2\"\nrole = \"database\"\nload = 0.65\n\n[clients]\naccounts = [\n  {id = 101, name = \"Client One\", active = true},\n  {id = 102, name = \"Client Two\", active = false},\n  {id = 103, name = \"Client Three\", active = true}\n]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "100503_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "database",
                                "database[server]",
                                "database[ports]",
                                "database[connection_max]",
                                "database[enabled]",
                                "owner",
                                "owner[name]",
                                "owner[dob]",
                                "owner[roles]",
                                "servers",
                                "servers[alpha]",
                                "servers[alpha][ip]",
                                "servers[alpha][role]",
                                "servers[alpha][load]",
                                "servers[beta]",
                                "servers[beta][ip]",
                                "servers[beta][role]",
                                "servers[beta][load]",
                                "clients",
                                "clients[accounts]",
                                "clients[accounts][][id]",
                                "clients[accounts][][name]",
                                "clients[accounts][][active]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\ntitle = \"Random Setting Configuration\"\nversion = \"2.3.1\"\n\n[database]\nengine = \"mysql\"\nhost = \"127.0.0.1\"\nport = 3306\ncredentials = { user = \"dbuser\", password = \"dbpass123\" }\ntables = [\"customers\", \"transactions\", \"products\"]\n\n[server]\naddress = \"192.168.1.100\"\nport = 8080\nuse_tls = true\nallowed_origins = [\"https://example.com\", \"https://partner.com\"]\n\n[logging]\nlevel = \"info\"\noutputs = [\"console\", \"file\"]\nfile_path = \"/var/log/service.log\"\n\n[[users]]\nusername = \"jdoe\"\nroles = [\"admin\", \"editor\"]\nactive = true\n\n[[users]]\nusername = \"asmith\"\nroles = [\"viewer\"]\nactive = false\n\n[features]\nbeta_mode = false\nsupported_protocols = [\"http\", \"https\", \"ftp\"]\n</code>",
            "feature_requirements": "• The output must be valid JSON containing a top-level structure with keys: \"title\", \"version\", \"database\", \"server\", \"logging\", \"users\", and \"features\".  \n• The \"title\" key must map to the string \"Random Setting Configuration\" and the \"version\" key must map to the string \"2.3.1\".  \n• The \"database\" object must include keys \"engine\", \"host\", \"port\", \"credentials\", and \"tables\"; where \"engine\" is the string \"mysql\", \"host\" is the string \"127.0.0.1\", \"port\" is the number 3306, \"credentials\" is an object with keys \"user\" (string \"dbuser\") and \"password\" (string \"dbpass123\"), and \"tables\" is an array of strings ([\"customers\", \"transactions\", \"products\"]).  \n• The \"server\" object must include keys \"address\", \"port\", \"use_tls\", and \"allowed_origins\"; where \"address\" is the string \"192.168.1.100\", \"port\" is the number 8080, \"use_tls\" is a boolean true, and \"allowed_origins\" is an array of strings ([\"https://example.com\", \"https://partner.com\"]).  \n• The \"logging\" object must include keys \"level\", \"outputs\", and \"file_path\"; where \"level\" is the string \"info\", \"outputs\" is an array of strings ([\"console\", \"file\"]), and \"file_path\" is the string \"/var/log/service.log\".  \n• The \"users\" key must map to an array of objects; each object must contain keys \"username\", \"roles\", and \"active\" with the first object having username \"jdoe\", roles as an array of strings ([\"admin\", \"editor\"]), active as true, and the second object having username \"asmith\", roles as an array with the string \"viewer\", and active as false.  \n• The \"features\" object must include keys \"beta_mode\" and \"supported_protocols\"; where \"beta_mode\" is a boolean false and \"supported_protocols\" is an array of strings ([\"http\", \"https\", \"ftp\"]).  \n• All value types (strings, numbers, booleans, arrays, and objects) must be preserved accurately in the conversion.",
            "task_id": "100504",
            "task_name": "Convert TOML to JSON",
            "input_type": "TOML",
            "output_type": "JSON",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "version",
                "database",
                "database[engine]",
                "database[host]",
                "database[port]",
                "database[credentials]",
                "database[credentials][user]",
                "database[credentials][password]",
                "database[tables]",
                "server",
                "server[address]",
                "server[port]",
                "server[use_tls]",
                "server[allowed_origins]",
                "logging",
                "logging[level]",
                "logging[outputs]",
                "logging[file_path]",
                "users",
                "users[0][username]",
                "users[0][roles]",
                "users[0][active]",
                "users[1][username]",
                "users[1][roles]",
                "users[1][active]",
                "features",
                "features[beta_mode]",
                "features[supported_protocols]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "100504_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output JSON:\n\nTask:\nConvert the following TOML code to JSON code.\n\n<code>\ntitle = \"Random Setting Configuration\"\nversion = \"2.3.1\"\n\n[database]\nengine = \"mysql\"\nhost = \"127.0.0.1\"\nport = 3306\ncredentials = { user = \"dbuser\", password = \"dbpass123\" }\ntables = [\"customers\", \"transactions\", \"products\"]\n\n[server]\naddress = \"192.168.1.100\"\nport = 8080\nuse_tls = true\nallowed_origins = [\"https://example.com\", \"https://partner.com\"]\n\n[logging]\nlevel = \"info\"\noutputs = [\"console\", \"file\"]\nfile_path = \"/var/log/service.log\"\n\n[[users]]\nusername = \"jdoe\"\nroles = [\"admin\", \"editor\"]\nactive = true\n\n[[users]]\nusername = \"asmith\"\nroles = [\"viewer\"]\nactive = false\n\n[features]\nbeta_mode = false\nsupported_protocols = [\"http\", \"https\", \"ftp\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "100504_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "version",
                                "database",
                                "database[engine]",
                                "database[host]",
                                "database[port]",
                                "database[credentials]",
                                "database[credentials][user]",
                                "database[credentials][password]",
                                "database[tables]",
                                "server",
                                "server[address]",
                                "server[port]",
                                "server[use_tls]",
                                "server[allowed_origins]",
                                "logging",
                                "logging[level]",
                                "logging[outputs]",
                                "logging[file_path]",
                                "users",
                                "users[0][username]",
                                "users[0][roles]",
                                "users[0][active]",
                                "users[1][username]",
                                "users[1][roles]",
                                "users[1][active]",
                                "features",
                                "features[beta_mode]",
                                "features[supported_protocols]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nRecordID,Username,Interests,Skills,Preferences\n1,Alice,\"reading;gardening;traveling\",\"Python;Data Analysis\",\"{\"\"theme\"\":\"\"dark\"\", \"\"notifications\"\":true}\"\n2,Bob,\"gaming;cooking;fitness\",\"JavaScript;UI Design\",\"{\"\"theme\"\":\"\"light\"\", \"\"notifications\"\":false}\"\n3,Charlie,\"photography;cycling;music\",\"Project Management;Agile\",\"{\"\"theme\"\":\"\"dark\"\", \"\"notifications\"\":true}\"\n</code>",
            "feature_requirements": "• The output must contain a top-level key representing a collection of records.  \n• Each record must include keys for RecordID, Username, Interests, Skills, and Preferences.  \n• The RecordID should be represented as a numeric value for each record.  \n• The Interests and Skills fields must be converted from a semicolon-separated string into a list of items.  \n• The Preferences field must be converted from its original string representation into a mapping with keys (e.g., theme and notifications) and corresponding values.  \n• Each record in the output must correspond exactly to one row in the CSV input.  \n• All data items from the CSV must be preserved and organized within the YAML structured data.",
            "task_id": "021800",
            "task_name": "Convert CSV to YAML",
            "input_type": "CSV",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "records",
                "records[*][RecordID]",
                "records[*][Username]",
                "records[*][Interests]",
                "records[*][Skills]",
                "records[*][Preferences]",
                "records[*][Preferences][theme]",
                "records[*][Preferences][notifications]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021800_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nRecordID,Username,Interests,Skills,Preferences\n1,Alice,\"reading;gardening;traveling\",\"Python;Data Analysis\",\"{\"\"theme\"\":\"\"dark\"\", \"\"notifications\"\":true}\"\n2,Bob,\"gaming;cooking;fitness\",\"JavaScript;UI Design\",\"{\"\"theme\"\":\"\"light\"\", \"\"notifications\"\":false}\"\n3,Charlie,\"photography;cycling;music\",\"Project Management;Agile\",\"{\"\"theme\"\":\"\"dark\"\", \"\"notifications\"\":true}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021800_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "records",
                                "records[*][RecordID]",
                                "records[*][Username]",
                                "records[*][Interests]",
                                "records[*][Skills]",
                                "records[*][Preferences]",
                                "records[*][Preferences][theme]",
                                "records[*][Preferences][notifications]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n",
            "feature_requirements": "• The YAML output must represent the CSV data as structured, hierarchical data, where each row in the CSV is converted into a distinct entry (such as a mapping) in the YAML output.  \n• Each entry must have keys corresponding to the CSV header fields, ensuring that the header information is preserved as the labels for the values.  \n• The order of the keys within each entry should match the order of the columns as defined in the CSV file.  \n• The structure must be clearly delineated, where each CSV row is an individual element in a list or mapping that can be separately verified.  \n• All values from the CSV must be included as corresponding values in the YAML, ensuring a one-to-one mapping between CSV cells and YAML key-value pairs.",
            "task_id": "021801",
            "task_name": "Convert CSV to YAML",
            "input_type": "CSV",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows",
                "rows[<row_index>]",
                "rows[<row_index>][<CSV_header_field>]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021801_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021801_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows",
                                "rows[<row_index>]",
                                "rows[<row_index>][<CSV_header_field>]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nrecord_id,user_info,contact_info,tasks,settings\n001,\"{\"\"first_name\"\":\"\"John\"\",\"\"last_name\"\":\"\"Doe\"\",\"\"age\"\":30}\",\"{\"\"email\"\":\"\"john.doe@example.com\"\",\"\"phone\"\":\"\"555-0101\"\"}\",\"Task A|Task B|Task C\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"English\"\",\"\"Spanish\"\"]}\"\n002,\"{\"\"first_name\"\":\"\"Jane\"\",\"\"last_name\"\":\"\"Smith\"\",\"\"age\"\":28}\",\"{\"\"email\"\":\"\"jane.smith@example.com\"\",\"\"phone\"\":\"\"555-0202\"\",\"\"address\"\":\"\"123 Maple St\"\"}\",\"Review|Analysis|Report\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false,\"\"languages\"\":[\"\"French\"\",\"\"German\"\"]}\"\n</code>",
            "feature_requirements": "• The converted output must represent two separate records corresponding to the two rows in the CSV file.  \n• Each record must include a \"record_id\" field containing the unique identifier from the CSV.  \n• Each record must have a \"user_info\" section that is a mapping with keys for \"first_name\", \"last_name\", and \"age\", where \"age\" is a numeric value.  \n• Each record must have a \"contact_info\" section that is a mapping with keys such as \"email\" and \"phone\", and conditionally an \"address\" key if present in the CSV data.  \n• Each record’s \"tasks\" field must be represented as a list of task items, with each task extracted by splitting the CSV string by the \"|\" character.  \n• Each record must have a \"settings\" section that is a mapping containing keys \"theme\", \"notifications\", and \"languages\", where \"languages\" is a list of language strings and \"notifications\" is a boolean value.",
            "task_id": "021802",
            "task_name": "Convert CSV to YAML",
            "input_type": "CSV",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][record_id]",
                "rows[0][user_info][first_name]",
                "rows[0][user_info][last_name]",
                "rows[0][user_info][age]",
                "rows[0][contact_info][email]",
                "rows[0][contact_info][phone]",
                "rows[0][contact_info][address]",
                "rows[0][tasks]",
                "rows[0][settings][theme]",
                "rows[0][settings][notifications]",
                "rows[0][settings][languages]",
                "rows[1][record_id]",
                "rows[1][user_info][first_name]",
                "rows[1][user_info][last_name]",
                "rows[1][user_info][age]",
                "rows[1][contact_info][email]",
                "rows[1][contact_info][phone]",
                "rows[1][contact_info][address]",
                "rows[1][tasks]",
                "rows[1][settings][theme]",
                "rows[1][settings][notifications]",
                "rows[1][settings][languages]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021802_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nrecord_id,user_info,contact_info,tasks,settings\n001,\"{\"\"first_name\"\":\"\"John\"\",\"\"last_name\"\":\"\"Doe\"\",\"\"age\"\":30}\",\"{\"\"email\"\":\"\"john.doe@example.com\"\",\"\"phone\"\":\"\"555-0101\"\"}\",\"Task A|Task B|Task C\",\"{\"\"theme\"\":\"\"dark\"\",\"\"notifications\"\":true,\"\"languages\"\":[\"\"English\"\",\"\"Spanish\"\"]}\"\n002,\"{\"\"first_name\"\":\"\"Jane\"\",\"\"last_name\"\":\"\"Smith\"\",\"\"age\"\":28}\",\"{\"\"email\"\":\"\"jane.smith@example.com\"\",\"\"phone\"\":\"\"555-0202\"\",\"\"address\"\":\"\"123 Maple St\"\"}\",\"Review|Analysis|Report\",\"{\"\"theme\"\":\"\"light\"\",\"\"notifications\"\":false,\"\"languages\"\":[\"\"French\"\",\"\"German\"\"]}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021802_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][record_id]",
                                "rows[0][user_info][first_name]",
                                "rows[0][user_info][last_name]",
                                "rows[0][user_info][age]",
                                "rows[0][contact_info][email]",
                                "rows[0][contact_info][phone]",
                                "rows[0][contact_info][address]",
                                "rows[0][tasks]",
                                "rows[0][settings][theme]",
                                "rows[0][settings][notifications]",
                                "rows[0][settings][languages]",
                                "rows[1][record_id]",
                                "rows[1][user_info][first_name]",
                                "rows[1][user_info][last_name]",
                                "rows[1][user_info][age]",
                                "rows[1][contact_info][email]",
                                "rows[1][contact_info][phone]",
                                "rows[1][contact_info][address]",
                                "rows[1][tasks]",
                                "rows[1][settings][theme]",
                                "rows[1][settings][notifications]",
                                "rows[1][settings][languages]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nrecord_id,title,type,languages,metadata\n001,\"Sample Document\",\"report\",\"[\"\"English\"\", \"\"Spanish\"\"]\",\"{\"\"author\"\":\"\"Alice\"\",\"\"keywords\"\":[\"\"data\"\",\"\"CSV\"\",\"\"conversion\"\"]}\"\n002,\"Project Overview\",\"summary\",\"[\"\"English\"\", \"\"French\"\"]\",\"{\"\"author\"\":\"\"Bob\"\",\"\"keywords\"\":[\"\"overview\"\",\"\"project\"\"],\"\"revision\"\":2}\"\n</code>",
            "feature_requirements": "- The output must represent each CSV row as a separate record with keys corresponding to the CSV headers: record_id, title, type, languages, and metadata.\n- Each record must be structured as a mapping containing all its fields.\n- The value for the languages key must be a list of language strings extracted from the CSV, preserving the order given.\n- The metadata key must map to a nested dictionary extracted from the CSV JSON-like string.\n- Within the metadata dictionary, the author key must be represented as a string and the keywords key as a list of strings.\n- For records that include additional metadata fields (such as revision), these must be represented with their appropriate data types (e.g., integer for revision).",
            "task_id": "021803",
            "task_name": "Convert CSV to YAML",
            "input_type": "CSV",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "rows[0][record_id]",
                "rows[0][title]",
                "rows[0][type]",
                "rows[0][languages]",
                "rows[0][metadata]",
                "rows[0][metadata][author]",
                "rows[0][metadata][keywords]",
                "rows[0][metadata][revision]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021803_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nrecord_id,title,type,languages,metadata\n001,\"Sample Document\",\"report\",\"[\"\"English\"\", \"\"Spanish\"\"]\",\"{\"\"author\"\":\"\"Alice\"\",\"\"keywords\"\":[\"\"data\"\",\"\"CSV\"\",\"\"conversion\"\"]}\"\n002,\"Project Overview\",\"summary\",\"[\"\"English\"\", \"\"French\"\"]\",\"{\"\"author\"\":\"\"Bob\"\",\"\"keywords\"\":[\"\"overview\"\",\"\"project\"\"],\"\"revision\"\":2}\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021803_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "rows[0][record_id]",
                                "rows[0][title]",
                                "rows[0][type]",
                                "rows[0][languages]",
                                "rows[0][metadata]",
                                "rows[0][metadata][author]",
                                "rows[0][metadata][keywords]",
                                "rows[0][metadata][revision]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nproject_id,project_name,team_members,tech_stack,milestones\nP-001,\"Website Redesign\",\"[\"\"Alice\"\",\"\"Bob\"\",\"\"Charlie\"\"]\",\"[\"\"HTML\"\",\"\"CSS\"\",\"\"JavaScript\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Design\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-07-10\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Development\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-09-15\\\"\"}\"\"]\"\nP-002,\"Mobile App\",\"[\"\"David\"\",\"\"Eva\"\"]\",\"[\"\"Flutter\"\",\"\"Dart\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Prototype\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-08-01\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Beta Release\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-10-20\\\"\"}\"\"]\"\nP-003,\"Cloud Migration\",\"[\"\"Frank\"\",\"\"Grace\"\",\"\"Helen\"\",\"\"Ian\"\"]\",\"[\"\"AWS\"\",\"\"Docker\"\",\"\"Kubernetes\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Planning\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-06-15\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Execution\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-11-30\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Review\\\"\", \\\"\"due_date\\\"\": \\\"\"2024-01-10\\\"\"}\"\"]\"\n</code>",
            "feature_requirements": "• The output must represent the project data as a structured list of projects.  \n• Each project entry must include the keys: project_id, project_name, team_members, tech_stack, and milestones.  \n• The project_id must be represented as a string value.  \n• The project_name must be represented as a string value.  \n• The team_members must be converted into a list of strings.  \n• The tech_stack must be converted into a list of strings.  \n• The milestones must be converted into a list of dictionaries.  \n• Each milestone dictionary must contain two keys: name and due_date, each with string values.  \n• The YAML output must include all three project entries as defined by the input CSV data.",
            "task_id": "021804",
            "task_name": "Convert CSV to YAML",
            "input_type": "CSV",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "projects",
                "projects[*][project_id]",
                "projects[*][project_name]",
                "projects[*][team_members]",
                "projects[*][tech_stack]",
                "projects[*][milestones]",
                "projects[*][milestones][*][name]",
                "projects[*][milestones][*][due_date]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "021804_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following CSV code to YAML code.\n\n<code>\nproject_id,project_name,team_members,tech_stack,milestones\nP-001,\"Website Redesign\",\"[\"\"Alice\"\",\"\"Bob\"\",\"\"Charlie\"\"]\",\"[\"\"HTML\"\",\"\"CSS\"\",\"\"JavaScript\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Design\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-07-10\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Development\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-09-15\\\"\"}\"\"]\"\nP-002,\"Mobile App\",\"[\"\"David\"\",\"\"Eva\"\"]\",\"[\"\"Flutter\"\",\"\"Dart\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Prototype\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-08-01\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Beta Release\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-10-20\\\"\"}\"\"]\"\nP-003,\"Cloud Migration\",\"[\"\"Frank\"\",\"\"Grace\"\",\"\"Helen\"\",\"\"Ian\"\"]\",\"[\"\"AWS\"\",\"\"Docker\"\",\"\"Kubernetes\"\"]\",\"[\"\"{\\\"\"name\\\"\": \\\"\"Planning\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-06-15\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Execution\\\"\", \\\"\"due_date\\\"\": \\\"\"2023-11-30\\\"\"}\"\",\"\"{\\\"\"name\\\"\": \\\"\"Review\\\"\", \\\"\"due_date\\\"\": \\\"\"2024-01-10\\\"\"}\"\"]\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "021804_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "projects",
                                "projects[*][project_id]",
                                "projects[*][project_name]",
                                "projects[*][team_members]",
                                "projects[*][tech_stack]",
                                "projects[*][milestones]",
                                "projects[*][milestones][*][name]",
                                "projects[*][milestones][*][due_date]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\n[general]\napp_name = \"DataConverter\"\nversion = \"1.2.0\"\ndescription = \"A tool for converting structured data between formats.\"\nenabled = true\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nallowed_hosts = [\"localhost\", \"127.0.0.1\", \"192.168.1.10\"]\n\n[database]\nengine = \"postgresql\"\nhost = \"localhost\"\nport = 5432\nusername = \"converter_user\"\npassword = \"securepassword\"\ndatabase_name = \"converter_db\"\nbackup_days = [1, 15, 30]\n\n[logging]\nlevel = \"INFO\"\nfile = \"logs/app.log\"\nmax_size_kb = 10240\nbackup_count = 5\n\n[security]\nenable_ssl = true\ncertificate_file = \"config/cert.pem\"\nkey_file = \"config/key.pem\"\nallowed_ips = [\"192.168.1.10\", \"192.168.1.11\"]\n</code>",
            "feature_requirements": "• The output must be in a YAML format that organizes data into hierarchical sections corresponding to each TOML table: general, server, database, logging, and security.\n• Each top-level section must include key-value pairs that reflect the keys defined under the corresponding TOML table.\n• The YAML output must accurately represent string values (e.g., app_name, version, description, etc.) as plain text.\n• Boolean keys such as enabled and enable_ssl must appear as boolean values.\n• Numeric values, such as port numbers and backup_count, must be represented as numbers.\n• Lists (arrays) like allowed_hosts, backup_days, and allowed_ips must be converted to YAML lists.\n• The structure must preserve the grouping of related configuration settings into clearly defined sections, ensuring the relationships between keys are maintained.\n• All keys and values from the original TOML must be present in the YAML output, with no omissions.",
            "task_id": "101800",
            "task_name": "Convert TOML to YAML",
            "input_type": "TOML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "general[app_name]",
                "general[version]",
                "general[description]",
                "server[host]",
                "server[port]",
                "server[allowed_hosts]",
                "server[enable_ssl]",
                "database[user]",
                "database[password]",
                "database[name]",
                "database[port]",
                "logging[level]",
                "logging[file]",
                "logging[backup_count]",
                "logging[backup_days]",
                "security[enabled]",
                "security[allowed_ips]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "101800_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\n[general]\napp_name = \"DataConverter\"\nversion = \"1.2.0\"\ndescription = \"A tool for converting structured data between formats.\"\nenabled = true\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nallowed_hosts = [\"localhost\", \"127.0.0.1\", \"192.168.1.10\"]\n\n[database]\nengine = \"postgresql\"\nhost = \"localhost\"\nport = 5432\nusername = \"converter_user\"\npassword = \"securepassword\"\ndatabase_name = \"converter_db\"\nbackup_days = [1, 15, 30]\n\n[logging]\nlevel = \"INFO\"\nfile = \"logs/app.log\"\nmax_size_kb = 10240\nbackup_count = 5\n\n[security]\nenable_ssl = true\ncertificate_file = \"config/cert.pem\"\nkey_file = \"config/key.pem\"\nallowed_ips = [\"192.168.1.10\", \"192.168.1.11\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "101800_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "general[app_name]",
                                "general[version]",
                                "general[description]",
                                "server[host]",
                                "server[port]",
                                "server[allowed_hosts]",
                                "server[enable_ssl]",
                                "database[user]",
                                "database[password]",
                                "database[name]",
                                "database[port]",
                                "logging[level]",
                                "logging[file]",
                                "logging[backup_count]",
                                "logging[backup_days]",
                                "security[enabled]",
                                "security[allowed_ips]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Service Configuration\"\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nallowed_origins = [\"http://localhost\", \"https://example.com\"]\n\n[database]\nengine = \"postgresql\"\nhost = \"db.example.com\"\nport = 5432\nuser = \"dbuser\"\npassword = \"dbpassword\"\ndatabases = [\"users\", \"inventory\", \"analytics\"]\n\n[logging]\nlevel = \"DEBUG\"\noutput_formats = [\"json\", \"plain_text\"]\nfile_path = \"/var/log/myapp.log\"\n\n[components.web]\nenabled = true\nroutes = [\"/\", \"/status\", \"/metrics\"]\n\n[components.worker]\nenabled = false\nqueues = [\"default\", \"jobs\", \"emails\"]\n</code>",
            "feature_requirements": "• The output must have a top-level key \"title\" with the exact string value \"Service Configuration\".  \n• The output must include a \"server\" section containing keys \"host\" with the value \"127.0.0.1\", \"port\" with the value 8080, and \"allowed_origins\" as a list with the items \"http://localhost\" and \"https://example.com\".  \n• There must be a \"database\" section that contains keys \"engine\", \"host\", \"port\", \"user\", \"password\", and \"databases\"; the \"databases\" key should be a list with the items \"users\", \"inventory\", and \"analytics\".  \n• The output must include a \"logging\" section that contains the keys \"level\" with the value \"DEBUG\", \"output_formats\" as a list with \"json\" and \"plain_text\", and \"file_path\" with the value \"/var/log/myapp.log\".  \n• A \"components\" section must be present with two nested sections: \"web\" and \"worker\".  \n• Under the \"components.web\" section, there must be a key \"enabled\" with a boolean true value and a \"routes\" key containing a list with \"/\", \"/status\", and \"/metrics\".  \n• Under the \"components.worker\" section, there must be a key \"enabled\" with a boolean false value and a \"queues\" key containing a list with \"default\", \"jobs\", and \"emails\".",
            "task_id": "101801",
            "task_name": "Convert TOML to YAML",
            "input_type": "TOML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "server",
                "server[host]",
                "server[port]",
                "server[allowed_origins]",
                "database",
                "database[engine]",
                "database[host]",
                "database[port]",
                "database[user]",
                "database[password]",
                "database[databases]",
                "logging",
                "logging[level]",
                "logging[output_formats]",
                "logging[file_path]",
                "components",
                "components[web]",
                "components[web][enabled]",
                "components[web][routes]",
                "components[worker]",
                "components[worker][enabled]",
                "components[worker][queues]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "101801_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Service Configuration\"\n\n[server]\nhost = \"127.0.0.1\"\nport = 8080\nallowed_origins = [\"http://localhost\", \"https://example.com\"]\n\n[database]\nengine = \"postgresql\"\nhost = \"db.example.com\"\nport = 5432\nuser = \"dbuser\"\npassword = \"dbpassword\"\ndatabases = [\"users\", \"inventory\", \"analytics\"]\n\n[logging]\nlevel = \"DEBUG\"\noutput_formats = [\"json\", \"plain_text\"]\nfile_path = \"/var/log/myapp.log\"\n\n[components.web]\nenabled = true\nroutes = [\"/\", \"/status\", \"/metrics\"]\n\n[components.worker]\nenabled = false\nqueues = [\"default\", \"jobs\", \"emails\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "101801_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "server",
                                "server[host]",
                                "server[port]",
                                "server[allowed_origins]",
                                "database",
                                "database[engine]",
                                "database[host]",
                                "database[port]",
                                "database[user]",
                                "database[password]",
                                "database[databases]",
                                "logging",
                                "logging[level]",
                                "logging[output_formats]",
                                "logging[file_path]",
                                "components",
                                "components[web]",
                                "components[web][enabled]",
                                "components[web][routes]",
                                "components[worker]",
                                "components[worker][enabled]",
                                "components[worker][queues]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Configuration File\"\nversion = 1.0\nactive = true\ntags = [\"system\", \"data\", \"configuration\"]\n\n[database]\nhost = \"192.168.0.1\"\nports = [5432, 5433, 5434]\nconnection_max = 100\nenabled = true\n\n[logging]\nlevel = \"debug\"\nfile = \"/var/log/app.log\"\nrotate = true\n\n[users.admin]\nname = \"Alice\"\nemail = \"alice@example.com\"\nroles = [\"read\", \"write\", \"execute\"]\n\n[users.guest]\nname = \"Bob\"\nemail = \"bob@example.com\"\nroles = [\"read\"]\n</code>",
            "feature_requirements": "• The output must include a top-level section with keys for \"title\", \"version\", \"active\", and \"tags\", each carrying their respective values as provided in the TOML code.  \n• The \"tags\" key must be represented as a list containing the strings \"system\", \"data\", and \"configuration\".  \n• A \"database\" section must be present with keys \"host\", \"ports\", \"connection_max\", and \"enabled\", matching the values and types from the input.  \n• The \"ports\" key under \"database\" must be represented as a list of numbers [5432, 5433, 5434].  \n• A \"logging\" section must be included, containing the keys \"level\", \"file\", and \"rotate\" with their respective values from the TOML.  \n• A \"users\" section must be defined, with subsections for \"admin\" and \"guest\", each containing individual keys.  \n• Each user subsection (\"admin\" and \"guest\") must include the keys \"name\", \"email\", and \"roles\", where \"roles\" is a list of strings.  \n• The overall structure of the YAML output must reflect the hierarchical segmentation evident in the TOML, ensuring sections and subsections are clearly delineated.",
            "task_id": "101802",
            "task_name": "Convert TOML to YAML",
            "input_type": "TOML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "version",
                "active",
                "tags",
                "database[host]",
                "database[ports]",
                "database[connection_max]",
                "database[enabled]",
                "logging[level]",
                "logging[file]",
                "logging[rotate]",
                "users[admin][name]",
                "users[admin][email]",
                "users[admin][roles]",
                "users[guest][name]",
                "users[guest][email]",
                "users[guest][roles]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "101802_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Configuration File\"\nversion = 1.0\nactive = true\ntags = [\"system\", \"data\", \"configuration\"]\n\n[database]\nhost = \"192.168.0.1\"\nports = [5432, 5433, 5434]\nconnection_max = 100\nenabled = true\n\n[logging]\nlevel = \"debug\"\nfile = \"/var/log/app.log\"\nrotate = true\n\n[users.admin]\nname = \"Alice\"\nemail = \"alice@example.com\"\nroles = [\"read\", \"write\", \"execute\"]\n\n[users.guest]\nname = \"Bob\"\nemail = \"bob@example.com\"\nroles = [\"read\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "101802_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "version",
                                "active",
                                "tags",
                                "database[host]",
                                "database[ports]",
                                "database[connection_max]",
                                "database[enabled]",
                                "logging[level]",
                                "logging[file]",
                                "logging[rotate]",
                                "users[admin][name]",
                                "users[admin][email]",
                                "users[admin][roles]",
                                "users[guest][name]",
                                "users[guest][email]",
                                "users[guest][roles]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\n[app]\nname = \"Data Converter\"\nversion = \"1.4.2\"\nauthors = [\"Alice\", \"Bob\"]\n\n[database]\nhost = \"127.0.0.1\"\nport = 3306\nuser = \"admin\"\npassword = \"securepass\"\nname = \"converter_db\"\n\n[conversion]\ninput_format = \"json\"\noutput_format = \"toml\"\nsupported_formats = [\"xml\", \"yaml\", \"csv\", \"ini\"]\n\n[settings]\ndebug = true\nmax_threads = 8\nlog_level = \"INFO\"\nmodules = [\"parser\", \"validator\", \"exporter\"]\n</code>",
            "feature_requirements": "• The output must include four top-level sections named \"app\", \"database\", \"conversion\", and \"settings\".  \n• In the \"app\" section, there must be keys for \"name\" set to \"Data Converter\", \"version\" set to \"1.4.2\", and \"authors\" as a list containing exactly \"Alice\" and \"Bob\".  \n• The \"database\" section must include keys \"host\" set to \"127.0.0.1\", \"port\" set to 3306, \"user\" set to \"admin\", \"password\" set to \"securepass\", and \"name\" set to \"converter_db\".  \n• The \"conversion\" section must contain keys \"input_format\" with the value \"json\", \"output_format\" with the value \"toml\", and \"supported_formats\" as a list containing exactly \"xml\", \"yaml\", \"csv\", and \"ini\".  \n• In the \"settings\" section, the output must have a \"debug\" key with a boolean true, a \"max_threads\" key with the value 8, a \"log_level\" key set to \"INFO\", and a \"modules\" key as a list containing exactly \"parser\", \"validator\", and \"exporter\".",
            "task_id": "101803",
            "task_name": "Convert TOML to YAML",
            "input_type": "TOML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "app[name]",
                "app[version]",
                "app[authors][0]",
                "app[authors][1]",
                "database[host]",
                "database[port]",
                "database[user]",
                "database[password]",
                "database[name]",
                "conversion[input_format]",
                "conversion[output_format]",
                "conversion[supported_formats][0]",
                "conversion[supported_formats][1]",
                "conversion[supported_formats][2]",
                "conversion[supported_formats][3]",
                "settings[debug]",
                "settings[max_threads]",
                "settings[log_level]",
                "settings[modules][0]",
                "settings[modules][1]",
                "settings[modules][2]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "101803_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\n[app]\nname = \"Data Converter\"\nversion = \"1.4.2\"\nauthors = [\"Alice\", \"Bob\"]\n\n[database]\nhost = \"127.0.0.1\"\nport = 3306\nuser = \"admin\"\npassword = \"securepass\"\nname = \"converter_db\"\n\n[conversion]\ninput_format = \"json\"\noutput_format = \"toml\"\nsupported_formats = [\"xml\", \"yaml\", \"csv\", \"ini\"]\n\n[settings]\ndebug = true\nmax_threads = 8\nlog_level = \"INFO\"\nmodules = [\"parser\", \"validator\", \"exporter\"]\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "101803_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "app[name]",
                                "app[version]",
                                "app[authors][0]",
                                "app[authors][1]",
                                "database[host]",
                                "database[port]",
                                "database[user]",
                                "database[password]",
                                "database[name]",
                                "conversion[input_format]",
                                "conversion[output_format]",
                                "conversion[supported_formats][0]",
                                "conversion[supported_formats][1]",
                                "conversion[supported_formats][2]",
                                "conversion[supported_formats][3]",
                                "settings[debug]",
                                "settings[max_threads]",
                                "settings[log_level]",
                                "settings[modules][0]",
                                "settings[modules][1]",
                                "settings[modules][2]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Sample Configuration\"\nversion = \"1.0.0\"\n\n[metadata]\ndescription = \"Configuration settings for a conversion task\"\nauthors = [\"Alice\", \"Bob\", \"Charlie\"]\n\n[database]\nengine = \"PostgreSQL\"\nhost = \"localhost\"\nport = 5432\nusername = \"dbuser\"\npassword = \"secret\"\n\n[server]\nip = \"192.168.0.100\"\nport = 8080\nprotocol = \"http\"\nuse_ssl = false\n\n[features]\nenable_logging = true\nsupported_formats = [\"JSON\", \"TOML\", \"XML\"]\n\n[[admins]]\nname = \"Alice\"\nrole = \"Administrator\"\nemail = \"alice@example.com\"\n\n[[admins]]\nname = \"Bob\"\nrole = \"Moderator\"\nemail = \"bob@example.com\"\n</code>",
            "feature_requirements": "• The output must contain top-level keys \"title\" and \"version\" with values \"Sample Configuration\" and \"1.0.0\" respectively.  \n• The output must include a nested section for \"metadata\" containing a key \"description\" with the value \"Configuration settings for a conversion task\" and a key \"authors\" with a list of strings [\"Alice\", \"Bob\", \"Charlie\"].  \n• The output must include a nested section for \"database\" with keys \"engine\", \"host\", \"port\", \"username\", and \"password\", holding values \"PostgreSQL\", \"localhost\", 5432, \"dbuser\", and \"secret\" respectively.  \n• The output must include a nested section for \"server\" with keys \"ip\", \"port\", \"protocol\", and \"use_ssl\", where the values are \"192.168.0.100\", 8080, \"http\", and false respectively.  \n• The output must include a nested section for \"features\" with keys \"enable_logging\" set to true and \"supported_formats\" as a list containing [\"JSON\", \"TOML\", \"XML\"].  \n• The output must contain a key for \"admins\" that represents a list of entries, where each entry is a mapping that includes keys \"name\", \"role\", and \"email\" with the corresponding values for each admin (e.g., \"Alice\" with role \"Administrator\" and email \"alice@example.com\", and \"Bob\" with role \"Moderator\" and email \"bob@example.com\").",
            "task_id": "101804",
            "task_name": "Convert TOML to YAML",
            "input_type": "TOML",
            "output_type": "YAML",
            "query_example": "",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "title",
                "version",
                "metadata[description]",
                "metadata[authors]",
                "database[engine]",
                "database[host]",
                "database[port]",
                "database[username]",
                "database[password]",
                "server[ip]",
                "server[port]",
                "server[protocol]",
                "server[use_ssl]",
                "features[enable_logging]",
                "features[supported_formats]",
                "admins[][name]",
                "admins[][role]",
                "admins[][email]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "101804_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output YAML:\n\nTask:\nConvert the following TOML code to YAML code.\n\n<code>\ntitle = \"Sample Configuration\"\nversion = \"1.0.0\"\n\n[metadata]\ndescription = \"Configuration settings for a conversion task\"\nauthors = [\"Alice\", \"Bob\", \"Charlie\"]\n\n[database]\nengine = \"PostgreSQL\"\nhost = \"localhost\"\nport = 5432\nusername = \"dbuser\"\npassword = \"secret\"\n\n[server]\nip = \"192.168.0.100\"\nport = 8080\nprotocol = \"http\"\nuse_ssl = false\n\n[features]\nenable_logging = true\nsupported_formats = [\"JSON\", \"TOML\", \"XML\"]\n\n[[admins]]\nname = \"Alice\"\nrole = \"Administrator\"\nemail = \"alice@example.com\"\n\n[[admins]]\nname = \"Bob\"\nrole = \"Moderator\"\nemail = \"bob@example.com\"\n</code>"
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "101804_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "title",
                                "version",
                                "metadata[description]",
                                "metadata[authors]",
                                "database[engine]",
                                "database[host]",
                                "database[port]",
                                "database[username]",
                                "database[password]",
                                "server[ip]",
                                "server[port]",
                                "server[protocol]",
                                "server[use_ssl]",
                                "features[enable_logging]",
                                "features[supported_formats]",
                                "admins[][name]",
                                "admins[][role]",
                                "admins[][email]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]