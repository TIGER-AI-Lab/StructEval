[
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional demographic data.\n\nFeature Requirements:\n- Include a title with the text \"Demographic Scatter Plot\" displayed at the top of the visualization.\n- Plot exactly 6 points on the chart, each representing a different age group.\n- Use the x-axis to label age groups with evenly spaced tick marks and ensure labels are rotated 45 degrees.\n- Use the y-axis to display median income values formatted as dollars with thousands separators, with tick intervals set at $10k.\n- Each plotted point must have a unique color, ensuring that no two points share the same color.\n- Incorporate a tooltip that appears when hovering over a point, showing both the age group and the income value.\n- Display numerical income values adjacent to each point, positioned slightly above and to the right.\n- Include grid lines on the y-axis corresponding to every $10k increment.\n- Add a legend positioned at the bottom that maps each unique color to its corresponding age group.\n- Scale the size of each point according to an associated fictional population count, ensuring larger points represent higher counts.",
            "task_id": "001520",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the visualization?",
                "How many points representing age groups are plotted on the chart?",
                "How are the x-axis labels for age groups styled?",
                "How are the y-axis income values formatted and what is the tick interval?",
                "Does each plotted point have a unique color?",
                "What information is shown in the tooltip for each point?",
                "How are numerical income values displayed relative to each point?",
                "What determines the size of each plotted point?"
            ],
            "VQA_answers": [
                "Demographic Scatter Plot",
                "6",
                "Evenly spaced tick marks with labels rotated 45 degrees",
                "Formatted as dollars with thousands separators, with tick intervals of $10k",
                "Yes",
                "The age group and the income value",
                "Displayed adjacent to each point, slightly above and to the right",
                "An associated fictional population count, where larger points represent higher counts"
            ],
            "raw_output_metric": [
                "Demographic Scatter Plot",
                "6",
                "45",
                "$10k",
                "tooltip",
                "legend",
                "age group",
                "median income",
                "population",
                "point"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001520_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional demographic data.\n\nFeature Requirements:\n- Include a title with the text \"Demographic Scatter Plot\" displayed at the top of the visualization.\n- Plot exactly 6 points on the chart, each representing a different age group.\n- Use the x-axis to label age groups with evenly spaced tick marks and ensure labels are rotated 45 degrees.\n- Use the y-axis to display median income values formatted as dollars with thousands separators, with tick intervals set at $10k.\n- Each plotted point must have a unique color, ensuring that no two points share the same color.\n- Incorporate a tooltip that appears when hovering over a point, showing both the age group and the income value.\n- Display numerical income values adjacent to each point, positioned slightly above and to the right.\n- Include grid lines on the y-axis corresponding to every $10k increment.\n- Add a legend positioned at the bottom that maps each unique color to its corresponding age group.\n- Scale the size of each point according to an associated fictional population count, ensuring larger points represent higher counts."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001520_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Demographic Scatter Plot",
                                "6",
                                "45",
                                "$10k",
                                "tooltip",
                                "legend",
                                "age group",
                                "median income",
                                "population",
                                "point"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001520_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001520_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the visualization?",
                                "How many points representing age groups are plotted on the chart?",
                                "How are the x-axis labels for age groups styled?",
                                "How are the y-axis income values formatted and what is the tick interval?",
                                "Does each plotted point have a unique color?",
                                "What information is shown in the tooltip for each point?",
                                "How are numerical income values displayed relative to each point?",
                                "What determines the size of each plotted point?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001520_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Demographic Scatter Plot",
                                "6",
                                "Evenly spaced tick marks with labels rotated 45 degrees",
                                "Formatted as dollars with thousands separators, with tick intervals of $10k",
                                "Yes",
                                "The age group and the income value",
                                "Displayed adjacent to each point, slightly above and to the right",
                                "An associated fictional population count, where larger points represent higher counts"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a multi-line chart visualization of fictional average monthly temperatures for various cities over a year.\n\nFeature Requirements:\n- Include a title at the top with the text \"Monthly Average Temperatures for Fictional Cities\".\n- Display exactly 3 distinct lines, each representing a different city from the dataset.\n- Each line must have a uniquely defined color, ensuring clear differentiation between the cities.\n- Each data point on the lines must be marked with a circle and have the temperature value displayed adjacent to it.\n- Use the x-axis to represent months with labels abbreviated from \"Jan\" to \"Dec\", ensuring equal spacing for all months.\n- Use the y-axis to represent temperatures in degrees Celsius and include ticks at every 5-degree interval within an appropriate range.\n- Provide a legend at the top right of the chart that maps each line color to its corresponding city name.",
            "task_id": "001521",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title at the top of the chart?",
                "How many distinct city lines are displayed in the chart?",
                "Are data points on the lines marked with circles?",
                "Is the temperature value shown next to each data point?",
                "What labels are displayed on the x-axis?",
                "What does the y-axis represent and how are the ticks spaced?",
                "Where is the legend located and what does it map?"
            ],
            "VQA_answers": [
                "Monthly Average Temperatures for Fictional Cities",
                "3",
                "Yes",
                "Yes",
                "Abbreviated month names from Jan to Dec",
                "Temperatures in degrees Celsius with ticks every 5 degrees",
                "Top right, mapping each line color to its corresponding city name"
            ],
            "raw_output_metric": [
                "Monthly Average Temperatures for Fictional Cities",
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
                "legend",
                "line",
                "circle",
                "color",
                "temperature",
                "city"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001521_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a multi-line chart visualization of fictional average monthly temperatures for various cities over a year.\n\nFeature Requirements:\n- Include a title at the top with the text \"Monthly Average Temperatures for Fictional Cities\".\n- Display exactly 3 distinct lines, each representing a different city from the dataset.\n- Each line must have a uniquely defined color, ensuring clear differentiation between the cities.\n- Each data point on the lines must be marked with a circle and have the temperature value displayed adjacent to it.\n- Use the x-axis to represent months with labels abbreviated from \"Jan\" to \"Dec\", ensuring equal spacing for all months.\n- Use the y-axis to represent temperatures in degrees Celsius and include ticks at every 5-degree interval within an appropriate range.\n- Provide a legend at the top right of the chart that maps each line color to its corresponding city name."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001521_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Monthly Average Temperatures for Fictional Cities",
                                "Jan",
                                "Feb",
                                "Mar",
                                "Apr",
                                "May",
                                "Jun",
                                "Jul",
                                "Aug",
                                "Sep",
                                "Oct",
                                "Nov",
                                "Dec",
                                "legend",
                                "line",
                                "circle",
                                "color",
                                "temperature",
                                "city"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001521_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001521_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title at the top of the chart?",
                                "How many distinct city lines are displayed in the chart?",
                                "Are data points on the lines marked with circles?",
                                "Is the temperature value shown next to each data point?",
                                "What labels are displayed on the x-axis?",
                                "What does the y-axis represent and how are the ticks spaced?",
                                "Where is the legend located and what does it map?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001521_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Monthly Average Temperatures for Fictional Cities",
                                "3",
                                "Yes",
                                "Yes",
                                "Abbreviated month names from Jan to Dec",
                                "Temperatures in degrees Celsius with ticks every 5 degrees",
                                "Top right, mapping each line color to its corresponding city name"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Scatter Plot\" displayed prominently at the top of the visualization.\n- Plot exactly 6 data points, each representing a unique weather station with specific coordinate values.\n- Render each data point as a circle with a fixed size and assign a distinct color to each so that no two circles share the same color.\n- Use the x-axis to display temperature values in Celsius, labeling it \"Temperature (°C)\" with tick labels formatted to one decimal place and ensuring no overlaps.\n- Use the y-axis to display humidity percentages, labeling it \"Humidity (%)\" with grid lines drawn at every 10% interval.\n- Provide a tooltip that displays both the temperature and humidity values when hovering over each data point.\n- Include a legend positioned at the bottom of the chart that maps the unique circle colors to the corresponding weather station IDs.\n- Set fixed axis ranges with the x-axis ranging from -10 to 40 and the y-axis ranging from 0% to 100%.\n- Ensure each data point is clearly visible and accurately plotted on the chart.\n- Include markers only in the form of circles for each data point with no additional shapes or icons.",
            "task_id": "001522",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the visualization?",
                "How many data points (weather stations) are plotted?",
                "What shape is used to represent each data point?",
                "How many distinct colors are assigned to the data points?",
                "What is the label displayed on the x-axis?",
                "What is the fixed range for the x-axis?",
                "What is the label displayed on the y-axis?",
                "What is the fixed range for the y-axis?",
                "How are the tick labels on the x-axis formatted?",
                "Where is the legend, mapping circle colors to weather station IDs, positioned?"
            ],
            "VQA_answers": [
                "Fictional Weather Scatter Plot",
                "6",
                "Circle",
                "6",
                "Temperature (°C)",
                "-10 to 40",
                "Humidity (%)",
                "0% to 100%",
                "One decimal place",
                "At the bottom of the chart"
            ],
            "raw_output_metric": [
                "Fictional Weather Scatter Plot",
                "Temperature (°C)",
                "Humidity (%)",
                "circle",
                "tooltip",
                "-10",
                "40",
                "0",
                "100",
                ".1f",
                "bottom",
                "station"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001522_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Scatter Plot\" displayed prominently at the top of the visualization.\n- Plot exactly 6 data points, each representing a unique weather station with specific coordinate values.\n- Render each data point as a circle with a fixed size and assign a distinct color to each so that no two circles share the same color.\n- Use the x-axis to display temperature values in Celsius, labeling it \"Temperature (°C)\" with tick labels formatted to one decimal place and ensuring no overlaps.\n- Use the y-axis to display humidity percentages, labeling it \"Humidity (%)\" with grid lines drawn at every 10% interval.\n- Provide a tooltip that displays both the temperature and humidity values when hovering over each data point.\n- Include a legend positioned at the bottom of the chart that maps the unique circle colors to the corresponding weather station IDs.\n- Set fixed axis ranges with the x-axis ranging from -10 to 40 and the y-axis ranging from 0% to 100%.\n- Ensure each data point is clearly visible and accurately plotted on the chart.\n- Include markers only in the form of circles for each data point with no additional shapes or icons."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001522_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Scatter Plot",
                                "Temperature (°C)",
                                "Humidity (%)",
                                "circle",
                                "tooltip",
                                "-10",
                                "40",
                                "0",
                                "100",
                                ".1f",
                                "bottom",
                                "station"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001522_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001522_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the visualization?",
                                "How many data points (weather stations) are plotted?",
                                "What shape is used to represent each data point?",
                                "How many distinct colors are assigned to the data points?",
                                "What is the label displayed on the x-axis?",
                                "What is the fixed range for the x-axis?",
                                "What is the label displayed on the y-axis?",
                                "What is the fixed range for the y-axis?",
                                "How are the tick labels on the x-axis formatted?",
                                "Where is the legend, mapping circle colors to weather station IDs, positioned?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001522_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Scatter Plot",
                                "6",
                                "Circle",
                                "6",
                                "Temperature (°C)",
                                "-10 to 40",
                                "Humidity (%)",
                                "0% to 100%",
                                "One decimal place",
                                "At the bottom of the chart"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional city weather data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional City Weather Data Scatterplot\" positioned at the top of the chart.\n- Plot exactly 6 data points, each representing a distinct city with corresponding temperature (x-axis) and humidity (y-axis) values.\n- Use the x-axis labeled \"Temperature (°C)\" and the y-axis labeled \"Humidity (%)\" with tick increments of 5 and 10 respectively.\n- Color-code each data point with a unique color so that no two cities share the same marker color.\n- Display a label next to each point showing the city name clearly without overlapping the marker.\n- Add gridlines along both axes to enhance visual reference of the data points.\n- Ensure the axes are scaled appropriately to accommodate the full range of the provided temperature and humidity values.",
            "task_id": "001523",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the chart?",
                "How many data points are plotted on the scatterplot?",
                "What label is shown on the x-axis?",
                "What label is shown on the y-axis?",
                "What is the tick increment for the x-axis?",
                "What is the tick increment for the y-axis?",
                "Is a unique color used for each data point?",
                "Are city names displayed as labels next to each data point?",
                "Are gridlines visible along both the x-axis and the y-axis?"
            ],
            "VQA_answers": [
                "Fictional City Weather Data Scatterplot",
                "6",
                "Temperature (°C)",
                "Humidity (%)",
                "5",
                "10",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "Fictional City Weather Data Scatterplot",
                "Temperature (°C)",
                "Humidity (%)",
                "tickIncrement",
                "5",
                "10",
                "grid",
                "city"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001523_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional city weather data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional City Weather Data Scatterplot\" positioned at the top of the chart.\n- Plot exactly 6 data points, each representing a distinct city with corresponding temperature (x-axis) and humidity (y-axis) values.\n- Use the x-axis labeled \"Temperature (°C)\" and the y-axis labeled \"Humidity (%)\" with tick increments of 5 and 10 respectively.\n- Color-code each data point with a unique color so that no two cities share the same marker color.\n- Display a label next to each point showing the city name clearly without overlapping the marker.\n- Add gridlines along both axes to enhance visual reference of the data points.\n- Ensure the axes are scaled appropriately to accommodate the full range of the provided temperature and humidity values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001523_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional City Weather Data Scatterplot",
                                "Temperature (°C)",
                                "Humidity (%)",
                                "tickIncrement",
                                "5",
                                "10",
                                "grid",
                                "city"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001523_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001523_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the chart?",
                                "How many data points are plotted on the scatterplot?",
                                "What label is shown on the x-axis?",
                                "What label is shown on the y-axis?",
                                "What is the tick increment for the x-axis?",
                                "What is the tick increment for the y-axis?",
                                "Is a unique color used for each data point?",
                                "Are city names displayed as labels next to each data point?",
                                "Are gridlines visible along both the x-axis and the y-axis?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001523_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional City Weather Data Scatterplot",
                                "6",
                                "Temperature (°C)",
                                "Humidity (%)",
                                "5",
                                "10",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional air quality data over a seven-day period.\n\nFeature Requirements:\n- Include a title at the top with the text \"Fictional Air Quality Line Chart.\"\n- Display exactly 5 distinct data series, each representing a different type of air quality sensor.\n- Each data series line must use a unique dash pattern (e.g., solid, dashed, dotted) to differentiate them.\n- Place a legend in the top-right corner mapping each sensor type to its corresponding line style.\n- Plot circular markers at every data point along each line.\n- Label the x-axis with the seven consecutive days of the week, ensuring the labels are evenly spaced and fully visible.\n- Scale the y-axis from 0 to 300 with tick marks at every 50-unit increment.\n- Include horizontal and vertical gridlines corresponding to the tick marks on both axes.\n- Use smooth interpolation for connecting data points within each sensor series.\n- Configure tooltips to display the exact numeric air quality measurement for each data point when hovered over.",
            "task_id": "001524",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the chart title displayed at the top?",
                "How many sensor series are represented in the visualization?",
                "Does each sensor series use a different dash pattern?",
                "Where is the legend located in the chart?",
                "What shape is used for the markers at each data point?",
                "How many days are labeled on the x-axis?",
                "What do the x-axis labels represent?",
                "What is the range of the y-axis?",
                "At what interval are the y-axis tick marks placed?",
                "Are gridlines visible on the chart and in which directions?"
            ],
            "VQA_answers": [
                "Fictional Air Quality Line Chart",
                "5",
                "Yes",
                "Top-right corner",
                "Circular",
                "7",
                "Seven consecutive days of the week",
                "0 to 300",
                "Every 50 units",
                "Yes, both horizontal and vertical gridlines are shown"
            ],
            "raw_output_metric": [
                "Fictional Air Quality Line Chart.",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "0",
                "300",
                "50",
                "legend",
                "tooltip",
                "circle",
                "solid",
                "dashed",
                "dotted",
                "dashdot",
                "longdash",
                "grid",
                "monotone"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001524_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional air quality data over a seven-day period.\n\nFeature Requirements:\n- Include a title at the top with the text \"Fictional Air Quality Line Chart.\"\n- Display exactly 5 distinct data series, each representing a different type of air quality sensor.\n- Each data series line must use a unique dash pattern (e.g., solid, dashed, dotted) to differentiate them.\n- Place a legend in the top-right corner mapping each sensor type to its corresponding line style.\n- Plot circular markers at every data point along each line.\n- Label the x-axis with the seven consecutive days of the week, ensuring the labels are evenly spaced and fully visible.\n- Scale the y-axis from 0 to 300 with tick marks at every 50-unit increment.\n- Include horizontal and vertical gridlines corresponding to the tick marks on both axes.\n- Use smooth interpolation for connecting data points within each sensor series.\n- Configure tooltips to display the exact numeric air quality measurement for each data point when hovered over."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001524_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Air Quality Line Chart.",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                                "0",
                                "300",
                                "50",
                                "legend",
                                "tooltip",
                                "circle",
                                "solid",
                                "dashed",
                                "dotted",
                                "dashdot",
                                "longdash",
                                "grid",
                                "monotone"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001524_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001524_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the chart title displayed at the top?",
                                "How many sensor series are represented in the visualization?",
                                "Does each sensor series use a different dash pattern?",
                                "Where is the legend located in the chart?",
                                "What shape is used for the markers at each data point?",
                                "How many days are labeled on the x-axis?",
                                "What do the x-axis labels represent?",
                                "What is the range of the y-axis?",
                                "At what interval are the y-axis tick marks placed?",
                                "Are gridlines visible on the chart and in which directions?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001524_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Air Quality Line Chart",
                                "5",
                                "Yes",
                                "Top-right corner",
                                "Circular",
                                "7",
                                "Seven consecutive days of the week",
                                "0 to 300",
                                "Every 50 units",
                                "Yes, both horizontal and vertical gridlines are shown"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization that displays fictional wizard test scores over a series of 8 monthly exams.\n\nFeature Requirements:\n- Include a centered title at the top that reads \"Wizard Test Scores Over Time\".\n- Plot exactly 8 data points, each representing a different monthly exam.\n- Connect the data points with a continuous line and mark each data point with a distinct circle marker.\n- Color the connecting line in vibrant blue and the markers in contrasting bright orange.\n- Display a tooltip when hovering over each data point that shows both the exam month and the corresponding test score.\n- Format the x-axis to show month labels, rotated 45 degrees for clarity, to prevent label overlapping.\n- Scale the y-axis from 0 to 100 with tick marks at every 10 unit interval.",
            "task_id": "001525",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the centered title displayed at the top?",
                "How many data points are plotted on the chart?",
                "What shape is used to mark each data point?",
                "What color is the line connecting the data points?",
                "What is the color of the markers on the data points?",
                "How are the x-axis month labels formatted?",
                "What is the y-axis scale and tick interval?"
            ],
            "VQA_answers": [
                "Wizard Test Scores Over Time",
                "8",
                "Circle",
                "Vibrant blue",
                "Bright orange",
                "Rotated 45 degrees",
                "0 to 100 with ticks every 10"
            ],
            "raw_output_metric": [
                "Wizard Test Scores Over Time",
                "8",
                "line",
                "circle",
                "vibrant blue",
                "bright orange",
                "tooltip",
                "45",
                "0",
                "100",
                "10",
                "month",
                "test score"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001525_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization that displays fictional wizard test scores over a series of 8 monthly exams.\n\nFeature Requirements:\n- Include a centered title at the top that reads \"Wizard Test Scores Over Time\".\n- Plot exactly 8 data points, each representing a different monthly exam.\n- Connect the data points with a continuous line and mark each data point with a distinct circle marker.\n- Color the connecting line in vibrant blue and the markers in contrasting bright orange.\n- Display a tooltip when hovering over each data point that shows both the exam month and the corresponding test score.\n- Format the x-axis to show month labels, rotated 45 degrees for clarity, to prevent label overlapping.\n- Scale the y-axis from 0 to 100 with tick marks at every 10 unit interval."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001525_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Wizard Test Scores Over Time",
                                "8",
                                "line",
                                "circle",
                                "vibrant blue",
                                "bright orange",
                                "tooltip",
                                "45",
                                "0",
                                "100",
                                "10",
                                "month",
                                "test score"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001525_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001525_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top?",
                                "How many data points are plotted on the chart?",
                                "What shape is used to mark each data point?",
                                "What color is the line connecting the data points?",
                                "What is the color of the markers on the data points?",
                                "How are the x-axis month labels formatted?",
                                "What is the y-axis scale and tick interval?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001525_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Wizard Test Scores Over Time",
                                "8",
                                "Circle",
                                "Vibrant blue",
                                "Bright orange",
                                "Rotated 45 degrees",
                                "0 to 100 with ticks every 10"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization depicting fictional average monthly temperatures in a made-up region.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Average Monthly Temperatures\" centered at the top of the visualization.\n- Use exactly 12 data points corresponding to each month of the year, plotted in sequential order.\n- Draw a continuous bold line connecting all data points using a vibrant color that contrasts with the background.\n- Place circular markers at each data point, ensuring each marker is filled with a color distinct from the line.\n- Label the x-axis with the full names of the months, rotated 45 degrees to prevent label overlap.\n- Configure the y-axis to display temperature values in degrees Celsius, with tick marks at every 5-degree increment.\n- Enable interactive tooltips that reveal the precise temperature value when hovering over a data point.",
            "task_id": "001526",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the visualization?",
                "How many data points representing months are shown in the chart?",
                "What type of line connects the data points in the chart?",
                "What shape are the markers at each data point?",
                "How are the x-axis labels formatted?",
                "What is the interval between tick marks on the y-axis?",
                "What information is revealed in the tooltips when hovering over a point?"
            ],
            "VQA_answers": [
                "Fictional Average Monthly Temperatures",
                "12",
                "A continuous bold line",
                "Circular",
                "Full month names rotated 45 degrees",
                "Every 5 degrees",
                "Precise temperature value"
            ],
            "raw_output_metric": [
                "Fictional Average Monthly Temperatures",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "tooltip",
                "°C",
                "45"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001526_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization depicting fictional average monthly temperatures in a made-up region.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Average Monthly Temperatures\" centered at the top of the visualization.\n- Use exactly 12 data points corresponding to each month of the year, plotted in sequential order.\n- Draw a continuous bold line connecting all data points using a vibrant color that contrasts with the background.\n- Place circular markers at each data point, ensuring each marker is filled with a color distinct from the line.\n- Label the x-axis with the full names of the months, rotated 45 degrees to prevent label overlap.\n- Configure the y-axis to display temperature values in degrees Celsius, with tick marks at every 5-degree increment.\n- Enable interactive tooltips that reveal the precise temperature value when hovering over a data point."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001526_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Average Monthly Temperatures",
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December",
                                "tooltip",
                                "°C",
                                "45"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001526_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001526_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the visualization?",
                                "How many data points representing months are shown in the chart?",
                                "What type of line connects the data points in the chart?",
                                "What shape are the markers at each data point?",
                                "How are the x-axis labels formatted?",
                                "What is the interval between tick marks on the y-axis?",
                                "What information is revealed in the tooltips when hovering over a point?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001526_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Average Monthly Temperatures",
                                "12",
                                "A continuous bold line",
                                "Circular",
                                "Full month names rotated 45 degrees",
                                "Every 5 degrees",
                                "Precise temperature value"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional daily temperature data across multiple cities.\n\nFeature Requirements:\n- Add a centered title at the top with the text \"City Temperature Records Scatterplot\".\n- Plot exactly 7 data points, each representing a unique city.\n- Use circles to mark each data point, ensuring each circle has a unique color.\n- Position city names as labels next to each corresponding data point.\n- Configure the x-axis to represent the days of the month (from 1 to 31) with tick marks for every 5 days.\n- Configure the y-axis to represent temperature in °C with grid lines at every 5°C increment.\n- Include an interactive tooltip that displays the city name and exact temperature when hovering over a point.",
            "task_id": "001527",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the centered title displayed at the top of the scatterplot?",
                "How many data points (cities) are plotted on the scatterplot?",
                "What geometric shape is used to represent each data point?",
                "What distinguishes the appearance of each circle?",
                "What text is positioned next to each data point?",
                "How are the tick marks on the x-axis configured?",
                "What is the spacing for the grid lines on the y-axis?",
                "What information is revealed in the tooltip when a data point is hovered over?"
            ],
            "VQA_answers": [
                "City Temperature Records Scatterplot",
                "7",
                "Circles",
                "Each circle has a unique color",
                "City names",
                "Tick marks for every 5 days (within days 1 to 31)",
                "Every 5°C increment",
                "City name and exact temperature"
            ],
            "raw_output_metric": [
                "City Temperature Records Scatterplot",
                "circle",
                "tooltip",
                "day",
                "temperature",
                "°C",
                "city",
                "5",
                "31",
                "7"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001527_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatterplot visualization of fictional daily temperature data across multiple cities.\n\nFeature Requirements:\n- Add a centered title at the top with the text \"City Temperature Records Scatterplot\".\n- Plot exactly 7 data points, each representing a unique city.\n- Use circles to mark each data point, ensuring each circle has a unique color.\n- Position city names as labels next to each corresponding data point.\n- Configure the x-axis to represent the days of the month (from 1 to 31) with tick marks for every 5 days.\n- Configure the y-axis to represent temperature in °C with grid lines at every 5°C increment.\n- Include an interactive tooltip that displays the city name and exact temperature when hovering over a point."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001527_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Temperature Records Scatterplot",
                                "circle",
                                "tooltip",
                                "day",
                                "temperature",
                                "°C",
                                "city",
                                "5",
                                "31",
                                "7"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001527_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001527_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top of the scatterplot?",
                                "How many data points (cities) are plotted on the scatterplot?",
                                "What geometric shape is used to represent each data point?",
                                "What distinguishes the appearance of each circle?",
                                "What text is positioned next to each data point?",
                                "How are the tick marks on the x-axis configured?",
                                "What is the spacing for the grid lines on the y-axis?",
                                "What information is revealed in the tooltip when a data point is hovered over?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001527_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Temperature Records Scatterplot",
                                "7",
                                "Circles",
                                "Each circle has a unique color",
                                "City names",
                                "Tick marks for every 5 days (within days 1 to 31)",
                                "Every 5°C increment",
                                "City name and exact temperature"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional weather data comparing temperature and humidity.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Conditions\" displayed at the top center of the visualization.\n- Plot exactly 7 data points, each representing a distinct weather observation.\n- Represent each data point as a circle with a consistent radius, and use a gradient color scale to reflect humidity values.\n- Display the temperature value as a label adjacent to each corresponding data point.\n- Configure the x-axis to show temperature values with labels rotated 45 degrees to ensure they are fully readable.\n- Configure the y-axis to quantify humidity values with grid lines at every 5-unit increment.\n- Include tooltips that reveal both temperature and humidity values when hovering over each data point.\n- Position a legend at the bottom that explains the gradient color scale corresponding to humidity levels.",
            "task_id": "001528",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top center of the visualization?",
                "How many data points are plotted on the scatter plot?",
                "What shape is used to represent each weather observation?",
                "How is the color of each data point determined?",
                "Is the temperature value shown as a label near each data point?",
                "At what angle are the x-axis temperature labels rotated?",
                "What increment is used for grid lines on the y-axis?",
                "Where is the legend explaining the gradient color scale for humidity placed?",
                "What information does the legend provide?"
            ],
            "VQA_answers": [
                "Fictional Weather Conditions",
                "7",
                "Circle",
                "By a gradient color scale reflecting humidity values",
                "Yes",
                "45 degrees",
                "Every 5 units",
                "At the bottom",
                "It explains the gradient color scale corresponding to humidity levels"
            ],
            "raw_output_metric": [
                "Fictional Weather Conditions",
                "temperature",
                "humidity",
                "7",
                "circle",
                "gradient",
                "tooltip",
                "45",
                "5",
                "legend"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001528_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional weather data comparing temperature and humidity.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Conditions\" displayed at the top center of the visualization.\n- Plot exactly 7 data points, each representing a distinct weather observation.\n- Represent each data point as a circle with a consistent radius, and use a gradient color scale to reflect humidity values.\n- Display the temperature value as a label adjacent to each corresponding data point.\n- Configure the x-axis to show temperature values with labels rotated 45 degrees to ensure they are fully readable.\n- Configure the y-axis to quantify humidity values with grid lines at every 5-unit increment.\n- Include tooltips that reveal both temperature and humidity values when hovering over each data point.\n- Position a legend at the bottom that explains the gradient color scale corresponding to humidity levels."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001528_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Conditions",
                                "temperature",
                                "humidity",
                                "7",
                                "circle",
                                "gradient",
                                "tooltip",
                                "45",
                                "5",
                                "legend"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001528_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001528_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top center of the visualization?",
                                "How many data points are plotted on the scatter plot?",
                                "What shape is used to represent each weather observation?",
                                "How is the color of each data point determined?",
                                "Is the temperature value shown as a label near each data point?",
                                "At what angle are the x-axis temperature labels rotated?",
                                "What increment is used for grid lines on the y-axis?",
                                "Where is the legend explaining the gradient color scale for humidity placed?",
                                "What information does the legend provide?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001528_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Conditions",
                                "7",
                                "Circle",
                                "By a gradient color scale reflecting humidity values",
                                "Yes",
                                "45 degrees",
                                "Every 5 units",
                                "At the bottom",
                                "It explains the gradient color scale corresponding to humidity levels"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional astronomical data showing relationships between planet diameters and their distances from the star.\n\nFeature Requirements:\n- Include a title with the text \"Astronomical Scatter Plot\" centered at the top of the visualization.\n- Display exactly 6 data points, each representing a unique planet, with circle markers.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Position the x-axis to represent planet diameters (in thousands of kilometers) with tick marks every 5 units, ensuring labels are fully visible.\n- Position the y-axis to represent orbital distances (in millions of kilometers) with grid lines appearing at every 10 million kilometer increment.\n- Incorporate labels directly next to each data point showing the planet name.\n- Add a tooltip that displays both the planet diameter and orbital distance when hovering over any data point.\n- Include a legend on the left side mapping each point's color to its corresponding planet name.",
            "task_id": "001529",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title at the top of the visualization?",
                "How many data points are plotted in the scatter plot?",
                "What shape is used for each data point marker?",
                "Does each data point have a unique and distinct color?",
                "What does the x-axis represent and what is the tick interval?",
                "What does the y-axis represent and what is the grid line interval?",
                "Are the planet names displayed next to the data points?",
                "What information is provided in the tooltip for each data point?",
                "Where is the legend located and what does it map?"
            ],
            "VQA_answers": [
                "Astronomical Scatter Plot",
                "6",
                "Circle",
                "Yes",
                "Planet diameters in thousands of kilometers with ticks every 5 units",
                "Orbital distances in millions of kilometers with grid lines every 10 units",
                "Yes",
                "Planet diameter and orbital distance",
                "On the left side, mapping each point's color to its corresponding planet name"
            ],
            "raw_output_metric": []
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001529_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional astronomical data showing relationships between planet diameters and their distances from the star.\n\nFeature Requirements:\n- Include a title with the text \"Astronomical Scatter Plot\" centered at the top of the visualization.\n- Display exactly 6 data points, each representing a unique planet, with circle markers.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Position the x-axis to represent planet diameters (in thousands of kilometers) with tick marks every 5 units, ensuring labels are fully visible.\n- Position the y-axis to represent orbital distances (in millions of kilometers) with grid lines appearing at every 10 million kilometer increment.\n- Incorporate labels directly next to each data point showing the planet name.\n- Add a tooltip that displays both the planet diameter and orbital distance when hovering over any data point.\n- Include a legend on the left side mapping each point's color to its corresponding planet name."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001529_r",
                        "type": "textarea",
                        "value": {
                            "text": []
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001529_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001529_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title at the top of the visualization?",
                                "How many data points are plotted in the scatter plot?",
                                "What shape is used for each data point marker?",
                                "Does each data point have a unique and distinct color?",
                                "What does the x-axis represent and what is the tick interval?",
                                "What does the y-axis represent and what is the grid line interval?",
                                "Are the planet names displayed next to the data points?",
                                "What information is provided in the tooltip for each data point?",
                                "Where is the legend located and what does it map?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001529_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Astronomical Scatter Plot",
                                "6",
                                "Circle",
                                "Yes",
                                "Planet diameters in thousands of kilometers with ticks every 5 units",
                                "Orbital distances in millions of kilometers with grid lines every 10 units",
                                "Yes",
                                "Planet diameter and orbital distance",
                                "On the left side, mapping each point's color to its corresponding planet name"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of imaginary temperature data over one week.\n\nFeature Requirements:\n- Include a title with the text \"Imaginary Temperature Trends\" centered at the top of the chart.\n- Plot a smooth curved line that represents temperature values for 7 consecutive days.\n- Use small circular markers (with a fixed radius of 5 pixels) positioned at each data point.\n- Display the precise temperature value above each marker.\n- Use the x-axis to denote days of the week with abbreviated weekday labels (e.g., Mon, Tue, etc.), ensuring labels are fully legible.\n- Format the y-axis to show temperature values with one decimal place and tick marks at every 2-degree interval.\n- Incorporate horizontal gridlines aligned with the y-axis tick marks.\n- Animate the drawing of the line over a duration of 1.5 seconds when the chart loads.\n- Include axis labels explicitly stating \"Day of Week\" for the x-axis and \"Temperature (°C)\" for the y-axis.",
            "task_id": "001530",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title of the chart?",
                "How many data points (markers) are shown on the curve?",
                "What is the fixed radius of each circular marker?",
                "Is a precise temperature value displayed above each marker?",
                "How are the days listed on the x-axis?",
                "What is the interval between tick marks on the y-axis?",
                "What is the label on the x-axis?",
                "What is the label on the y-axis?"
            ],
            "VQA_answers": [
                "Imaginary Temperature Trends",
                "7",
                "5 pixels",
                "Yes",
                "Abbreviated weekdays (e.g., Mon, Tue, etc.)",
                "2 degrees",
                "Day of Week",
                "Temperature (°C)"
            ],
            "raw_output_metric": [
                "Imaginary Temperature Trends",
                "Day of Week",
                "Temperature (°C)",
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun",
                "radius",
                "5",
                "monotone",
                "1500",
                "2",
                "grid",
                "circle",
                "text"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001530_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of imaginary temperature data over one week.\n\nFeature Requirements:\n- Include a title with the text \"Imaginary Temperature Trends\" centered at the top of the chart.\n- Plot a smooth curved line that represents temperature values for 7 consecutive days.\n- Use small circular markers (with a fixed radius of 5 pixels) positioned at each data point.\n- Display the precise temperature value above each marker.\n- Use the x-axis to denote days of the week with abbreviated weekday labels (e.g., Mon, Tue, etc.), ensuring labels are fully legible.\n- Format the y-axis to show temperature values with one decimal place and tick marks at every 2-degree interval.\n- Incorporate horizontal gridlines aligned with the y-axis tick marks.\n- Animate the drawing of the line over a duration of 1.5 seconds when the chart loads.\n- Include axis labels explicitly stating \"Day of Week\" for the x-axis and \"Temperature (°C)\" for the y-axis."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001530_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Imaginary Temperature Trends",
                                "Day of Week",
                                "Temperature (°C)",
                                "Mon",
                                "Tue",
                                "Wed",
                                "Thu",
                                "Fri",
                                "Sat",
                                "Sun",
                                "radius",
                                "5",
                                "monotone",
                                "1500",
                                "2",
                                "grid",
                                "circle",
                                "text"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001530_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001530_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title of the chart?",
                                "How many data points (markers) are shown on the curve?",
                                "What is the fixed radius of each circular marker?",
                                "Is a precise temperature value displayed above each marker?",
                                "How are the days listed on the x-axis?",
                                "What is the interval between tick marks on the y-axis?",
                                "What is the label on the x-axis?",
                                "What is the label on the y-axis?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001530_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Imaginary Temperature Trends",
                                "7",
                                "5 pixels",
                                "Yes",
                                "Abbreviated weekdays (e.g., Mon, Tue, etc.)",
                                "2 degrees",
                                "Day of Week",
                                "Temperature (°C)"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a pie chart visualization of hypothetical energy consumption data across regions.\n\nFeature Requirements:\n- Include a title with the text \"Hypothetical Energy Consumption\" displayed at the top of the visualization.\n- Display exactly 5 pie segments, each representing energy consumption for a unique region.\n- Assign each segment a distinct pastel color, ensuring no two segments share the same color.\n- Display a legend positioned at the bottom of the chart, mapping each color to its corresponding region.\n- Include percentage labels placed inside each pie segment.\n- Center the pie chart automatically on the canvas and ensure it maintains a perfect circular shape.\n- Provide segment borders with a thickness of 1px and a solid color defined as #333.\n- Add tooltip interactivity that displays the region name and its consumption percentage when hovered over.\n- Format the data values to one decimal place in the displayed percentage labels.",
            "task_id": "001531",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the visualization?",
                "How many pie segments representing regions are shown in the chart?",
                "Where is the legend located in the chart?",
                "What information is displayed inside each pie segment?",
                "What type of border is applied to each pie segment?",
                "Are the colors of the pie segments distinct pastel shades?",
                "Is the pie chart centered and rendered as a perfect circle?"
            ],
            "VQA_answers": [
                "Hypothetical Energy Consumption",
                "5",
                "At the bottom",
                "Percentage labels formatted to one decimal place",
                "A 1px solid border with color #333",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "Hypothetical Energy Consumption",
                "#333",
                "tooltip",
                ".1f",
                "legend",
                "arc"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001531_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a pie chart visualization of hypothetical energy consumption data across regions.\n\nFeature Requirements:\n- Include a title with the text \"Hypothetical Energy Consumption\" displayed at the top of the visualization.\n- Display exactly 5 pie segments, each representing energy consumption for a unique region.\n- Assign each segment a distinct pastel color, ensuring no two segments share the same color.\n- Display a legend positioned at the bottom of the chart, mapping each color to its corresponding region.\n- Include percentage labels placed inside each pie segment.\n- Center the pie chart automatically on the canvas and ensure it maintains a perfect circular shape.\n- Provide segment borders with a thickness of 1px and a solid color defined as #333.\n- Add tooltip interactivity that displays the region name and its consumption percentage when hovered over.\n- Format the data values to one decimal place in the displayed percentage labels."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001531_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Hypothetical Energy Consumption",
                                "#333",
                                "tooltip",
                                ".1f",
                                "legend",
                                "arc"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001531_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001531_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the visualization?",
                                "How many pie segments representing regions are shown in the chart?",
                                "Where is the legend located in the chart?",
                                "What information is displayed inside each pie segment?",
                                "What type of border is applied to each pie segment?",
                                "Are the colors of the pie segments distinct pastel shades?",
                                "Is the pie chart centered and rendered as a perfect circle?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001531_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Hypothetical Energy Consumption",
                                "5",
                                "At the bottom",
                                "Percentage labels formatted to one decimal place",
                                "A 1px solid border with color #333",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature trends over a week.\n\nFeature Requirements:\n- Set the chart title to \"Week-long Temperature Trends\" and display it centered at the top of the visualization.\n- Plot exactly 7 data points, each representing one day of the week from Monday to Sunday.\n- Configure the x-axis to display day names with evenly spaced intervals and ensure all labels are fully visible.\n- Configure the y-axis to show temperature values in degrees Celsius with tick marks every 5 units and a range that fits the data.\n- Use a bright, distinct color for the line connecting the data points to ensure high contrast against the background.\n- Add circular markers at each data point, each with a contrasting border color to make them stand out.\n- Include tooltips that display the exact day and temperature value when hovering over each marker.\n- Display the numerical temperature value directly above each marker on the chart.\n- Add grid lines corresponding to each tick mark on the y-axis to help indicate temperature increments.",
            "task_id": "001532",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the main title displayed at the top of the chart?",
                "How is the title positioned?",
                "How many data points are shown in the line chart?",
                "What do the plotted data points represent?",
                "What labels appear along the x-axis?",
                "At what interval are the tick marks on the y-axis set?",
                "Where is the numerical temperature value displayed for each data point?",
                "Are there grid lines corresponding to the y-axis tick marks?",
                "Do the markers at each data point have a contrasting border?"
            ],
            "VQA_answers": [
                "Week-long Temperature Trends",
                "Centered at the top",
                "7",
                "Days of the week (Monday to Sunday)",
                "Day names from Monday to Sunday",
                "Every 5 units",
                "Directly above each marker",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "Week-long Temperature Trends",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "°C",
                "5",
                "line",
                "circle",
                "tooltip",
                "grid",
                "text"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001532_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature trends over a week.\n\nFeature Requirements:\n- Set the chart title to \"Week-long Temperature Trends\" and display it centered at the top of the visualization.\n- Plot exactly 7 data points, each representing one day of the week from Monday to Sunday.\n- Configure the x-axis to display day names with evenly spaced intervals and ensure all labels are fully visible.\n- Configure the y-axis to show temperature values in degrees Celsius with tick marks every 5 units and a range that fits the data.\n- Use a bright, distinct color for the line connecting the data points to ensure high contrast against the background.\n- Add circular markers at each data point, each with a contrasting border color to make them stand out.\n- Include tooltips that display the exact day and temperature value when hovering over each marker.\n- Display the numerical temperature value directly above each marker on the chart.\n- Add grid lines corresponding to each tick mark on the y-axis to help indicate temperature increments."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001532_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Week-long Temperature Trends",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                                "°C",
                                "5",
                                "line",
                                "circle",
                                "tooltip",
                                "grid",
                                "text"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001532_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001532_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the chart?",
                                "How is the title positioned?",
                                "How many data points are shown in the line chart?",
                                "What do the plotted data points represent?",
                                "What labels appear along the x-axis?",
                                "At what interval are the tick marks on the y-axis set?",
                                "Where is the numerical temperature value displayed for each data point?",
                                "Are there grid lines corresponding to the y-axis tick marks?",
                                "Do the markers at each data point have a contrasting border?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001532_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Week-long Temperature Trends",
                                "Centered at the top",
                                "7",
                                "Days of the week (Monday to Sunday)",
                                "Day names from Monday to Sunday",
                                "Every 5 units",
                                "Directly above each marker",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental monitoring data.\n\nFeature Requirements:\n- Include a title with the text \"Environmental Monitoring Scatter Plot\" centered at the top of the visualization.\n- Plot exactly 5 measurement points, each representing a different sensor location.\n- Assign each data point a unique shape (circle, square, triangle, diamond, and cross) with a consistent color palette across points.\n- Use the x-axis to represent temperature values ranging from 0°C to 50°C, with tick marks placed every 10 degrees.\n- Use the y-axis to represent humidity percentages from 0% to 100%, with tick marks at every 20% increment.\n- Provide tooltips for each data point that display the sensor location, temperature, and humidity information when hovered over.\n- Incorporate grid lines in a light gray shade along both axes to enhance readability.",
            "task_id": "001533",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the visualization?",
                "Is the title centered at the top of the visualization?",
                "How many measurement points are plotted?",
                "Which unique shapes are assigned to the measurement points?",
                "What is the range and tick interval of the x-axis representing temperature?",
                "What is the range and tick interval of the y-axis representing humidity?",
                "What color are the grid lines along both axes?",
                "Do the data points include tooltips, and what information do they display?"
            ],
            "VQA_answers": [
                "Environmental Monitoring Scatter Plot",
                "Yes",
                "5",
                "Circle, Square, Triangle, Diamond, and Cross",
                "0°C to 50°C with ticks every 10 degrees",
                "0% to 100% with ticks every 20 percent",
                "Light gray",
                "Yes; they display the sensor location, temperature, and humidity information"
            ],
            "raw_output_metric": [
                "Environmental Monitoring Scatter Plot",
                "circle",
                "square",
                "triangle",
                "diamond",
                "cross",
                "temperature",
                "humidity",
                "sensor",
                "location",
                "0",
                "50",
                "10",
                "100",
                "20",
                "tooltip",
                "lightgray"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001533_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental monitoring data.\n\nFeature Requirements:\n- Include a title with the text \"Environmental Monitoring Scatter Plot\" centered at the top of the visualization.\n- Plot exactly 5 measurement points, each representing a different sensor location.\n- Assign each data point a unique shape (circle, square, triangle, diamond, and cross) with a consistent color palette across points.\n- Use the x-axis to represent temperature values ranging from 0°C to 50°C, with tick marks placed every 10 degrees.\n- Use the y-axis to represent humidity percentages from 0% to 100%, with tick marks at every 20% increment.\n- Provide tooltips for each data point that display the sensor location, temperature, and humidity information when hovered over.\n- Incorporate grid lines in a light gray shade along both axes to enhance readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001533_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Environmental Monitoring Scatter Plot",
                                "circle",
                                "square",
                                "triangle",
                                "diamond",
                                "cross",
                                "temperature",
                                "humidity",
                                "sensor",
                                "location",
                                "0",
                                "50",
                                "10",
                                "100",
                                "20",
                                "tooltip",
                                "lightgray"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001533_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001533_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the visualization?",
                                "Is the title centered at the top of the visualization?",
                                "How many measurement points are plotted?",
                                "Which unique shapes are assigned to the measurement points?",
                                "What is the range and tick interval of the x-axis representing temperature?",
                                "What is the range and tick interval of the y-axis representing humidity?",
                                "What color are the grid lines along both axes?",
                                "Do the data points include tooltips, and what information do they display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001533_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Environmental Monitoring Scatter Plot",
                                "Yes",
                                "5",
                                "Circle, Square, Triangle, Diamond, and Cross",
                                "0°C to 50°C with ticks every 10 degrees",
                                "0% to 100% with ticks every 20 percent",
                                "Light gray",
                                "Yes; they display the sensor location, temperature, and humidity information"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature data for four different cities.\n\nFeature Requirements:\n- Include a title with the text \"City Temperature Trends\" displayed at the top center of the visualization.\n- Plot a separate line for each of the four cities, with each line having a unique color.\n- Represent data for exactly 12 months (January through December) along the x-axis.\n- Rotate the month labels on the x-axis by 45 degrees to ensure they do not overlap.\n- Display temperature values on the y-axis formatted in degrees Celsius, with tick marks every 5-degree increment.\n- Place circular markers on every data point along each city's line.\n- Add a tooltip to show the city name, the specific month, and the temperature value when hovering over a data point.\n- Include a legend below the chart that lists the cities, each paired with its corresponding line color.\n- Ensure grid lines are visible for both axes to enhance readability of the data points.\n- Use a light background color to enhance contrast and highlight the colored lines and markers.",
            "task_id": "001534",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top center of the chart?",
                "How many distinct cities are represented by separate lines?",
                "How many months are shown along the x-axis?",
                "By what angle are the month labels on the x-axis rotated?",
                "How are temperature values on the y-axis incremented?",
                "What shape is used for markers at each data point along the lines?",
                "Where is the legend located in the visualization?",
                "Does the legend display the cities paired with their corresponding line colors?",
                "Are grid lines visible on both the x and y axes?",
                "Is the background color of the chart light to enhance the contrast of the colored lines and markers?"
            ],
            "VQA_answers": [
                "City Temperature Trends",
                "4",
                "12",
                "45 degrees",
                "Every 5 degrees Celsius",
                "Circular markers",
                "Below the chart",
                "Yes",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "City Temperature Trends",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "45",
                "5",
                "°C",
                "circle",
                "tooltip",
                "legend",
                "line",
                "grid",
                "background"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001534_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature data for four different cities.\n\nFeature Requirements:\n- Include a title with the text \"City Temperature Trends\" displayed at the top center of the visualization.\n- Plot a separate line for each of the four cities, with each line having a unique color.\n- Represent data for exactly 12 months (January through December) along the x-axis.\n- Rotate the month labels on the x-axis by 45 degrees to ensure they do not overlap.\n- Display temperature values on the y-axis formatted in degrees Celsius, with tick marks every 5-degree increment.\n- Place circular markers on every data point along each city's line.\n- Add a tooltip to show the city name, the specific month, and the temperature value when hovering over a data point.\n- Include a legend below the chart that lists the cities, each paired with its corresponding line color.\n- Ensure grid lines are visible for both axes to enhance readability of the data points.\n- Use a light background color to enhance contrast and highlight the colored lines and markers."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001534_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Temperature Trends",
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December",
                                "45",
                                "5",
                                "°C",
                                "circle",
                                "tooltip",
                                "legend",
                                "line",
                                "grid",
                                "background"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001534_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001534_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top center of the chart?",
                                "How many distinct cities are represented by separate lines?",
                                "How many months are shown along the x-axis?",
                                "By what angle are the month labels on the x-axis rotated?",
                                "How are temperature values on the y-axis incremented?",
                                "What shape is used for markers at each data point along the lines?",
                                "Where is the legend located in the visualization?",
                                "Does the legend display the cities paired with their corresponding line colors?",
                                "Are grid lines visible on both the x and y axes?",
                                "Is the background color of the chart light to enhance the contrast of the colored lines and markers?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001534_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Temperature Trends",
                                "4",
                                "12",
                                "45 degrees",
                                "Every 5 degrees Celsius",
                                "Circular markers",
                                "Below the chart",
                                "Yes",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional temperature readings collected from different urban sensor stations over a 24-hour period.\n\nFeature Requirements:\n- Include a title with the text \"Urban Temperature Sensor Data\" at the top of the visualization.\n- Plot exactly 3 different sensor stations, each represented by a unique set of data points.\n- Use a circle mark for each data point, where each sensor station's points have a distinct color.\n- Display temperature values next to each data point as labels.\n- Use the x-axis to represent time in hours (ranging from 0 to 24) with ticks at every 4-hour interval.\n- Use the y-axis to represent temperature in degrees Celsius, with a range that adapts to the provided temperature values.\n- Include a legend on the right-hand side mapping each color to the corresponding sensor station.\n- Format the x-axis labels to prevent overlapping, ensuring clear readability.\n- Incorporate grid lines along both axes to enhance visual clarity.\n- Ensure tooltips are available for each point, displaying the sensor station name, reading time, and temperature value.",
            "task_id": "001535",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text at the top of the visualization?",
                "How many sensor stations are represented in the plot?",
                "What shape is used to mark each data point?",
                "What additional information is displayed next to each data point?",
                "What is shown on the x-axis?",
                "Where is the legend placed in the visualization?",
                "What does the legend map?",
                "How are the x-axis labels formatted for readability?",
                "Are grid lines included, and if so, where?",
                "What information do tooltips provide for each data point?"
            ],
            "VQA_answers": [
                "Urban Temperature Sensor Data",
                "3",
                "Circle",
                "Temperature value label",
                "Time in hours (0 to 24) with ticks every 4 hours",
                "Right-hand side",
                "Each sensor station's unique color",
                "They are formatted to prevent overlapping",
                "Yes, along both the x-axis and y-axis",
                "Sensor station name, reading time, and temperature value"
            ],
            "raw_output_metric": [
                "Urban Temperature Sensor Data",
                "circle",
                "Sensor Station 1",
                "Sensor Station 2",
                "Sensor Station 3",
                "time",
                "temperature",
                "0",
                "24",
                "4",
                "legend",
                "grid",
                "tooltip"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001535_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional temperature readings collected from different urban sensor stations over a 24-hour period.\n\nFeature Requirements:\n- Include a title with the text \"Urban Temperature Sensor Data\" at the top of the visualization.\n- Plot exactly 3 different sensor stations, each represented by a unique set of data points.\n- Use a circle mark for each data point, where each sensor station's points have a distinct color.\n- Display temperature values next to each data point as labels.\n- Use the x-axis to represent time in hours (ranging from 0 to 24) with ticks at every 4-hour interval.\n- Use the y-axis to represent temperature in degrees Celsius, with a range that adapts to the provided temperature values.\n- Include a legend on the right-hand side mapping each color to the corresponding sensor station.\n- Format the x-axis labels to prevent overlapping, ensuring clear readability.\n- Incorporate grid lines along both axes to enhance visual clarity.\n- Ensure tooltips are available for each point, displaying the sensor station name, reading time, and temperature value."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001535_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Urban Temperature Sensor Data",
                                "circle",
                                "Sensor Station 1",
                                "Sensor Station 2",
                                "Sensor Station 3",
                                "time",
                                "temperature",
                                "0",
                                "24",
                                "4",
                                "legend",
                                "grid",
                                "tooltip"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001535_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001535_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text at the top of the visualization?",
                                "How many sensor stations are represented in the plot?",
                                "What shape is used to mark each data point?",
                                "What additional information is displayed next to each data point?",
                                "What is shown on the x-axis?",
                                "Where is the legend placed in the visualization?",
                                "What does the legend map?",
                                "How are the x-axis labels formatted for readability?",
                                "Are grid lines included, and if so, where?",
                                "What information do tooltips provide for each data point?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001535_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Urban Temperature Sensor Data",
                                "3",
                                "Circle",
                                "Temperature value label",
                                "Time in hours (0 to 24) with ticks every 4 hours",
                                "Right-hand side",
                                "Each sensor station's unique color",
                                "They are formatted to prevent overlapping",
                                "Yes, along both the x-axis and y-axis",
                                "Sensor station name, reading time, and temperature value"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature records over a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Temperature Trends\" displayed prominently at the top center of the chart.\n- Use the x-axis to represent days of the week, labeled \"Monday\" through \"Sunday\", ensuring each label is clearly spaced and fully visible.\n- Configure the y-axis to display temperature in degrees Celsius, scaled from 0°C to 40°C with tick marks at every 5°C interval.\n- Plot a continuous line that connects 7 data points, each representing the average temperature for one day.\n- Display a circular marker at each data point, using a contrasting red color to differentiate from the blue line.\n- Annotate each marker with its corresponding temperature value, positioned slightly above the marker for clarity.\n- Include horizontal grid lines corresponding to the y-axis ticks to improve the readability of the temperature scale.",
            "task_id": "001536",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top center of the chart?",
                "What does the x-axis represent?",
                "How many data points are plotted on the line chart?",
                "What is the range of the y-axis and how are the tick marks spaced?",
                "What color are the circular markers at each data point?",
                "How are the data markers annotated?",
                "What color is the continuous line connecting the data points?",
                "Are horizontal grid lines included and what do they correspond to?"
            ],
            "VQA_answers": [
                "Fictional Temperature Trends",
                "Days of the week labeled Monday through Sunday",
                "7",
                "0°C to 40°C with ticks every 5°C",
                "Red",
                "Each marker displays its corresponding temperature value just above it",
                "Blue",
                "Yes, they correspond to the y-axis ticks"
            ],
            "raw_output_metric": [
                "Fictional Temperature Trends",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "°C",
                "0",
                "5",
                "40",
                "red",
                "blue"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001536_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature records over a week.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Temperature Trends\" displayed prominently at the top center of the chart.\n- Use the x-axis to represent days of the week, labeled \"Monday\" through \"Sunday\", ensuring each label is clearly spaced and fully visible.\n- Configure the y-axis to display temperature in degrees Celsius, scaled from 0°C to 40°C with tick marks at every 5°C interval.\n- Plot a continuous line that connects 7 data points, each representing the average temperature for one day.\n- Display a circular marker at each data point, using a contrasting red color to differentiate from the blue line.\n- Annotate each marker with its corresponding temperature value, positioned slightly above the marker for clarity.\n- Include horizontal grid lines corresponding to the y-axis ticks to improve the readability of the temperature scale."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001536_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Temperature Trends",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                                "°C",
                                "0",
                                "5",
                                "40",
                                "red",
                                "blue"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001536_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001536_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top center of the chart?",
                                "What does the x-axis represent?",
                                "How many data points are plotted on the line chart?",
                                "What is the range of the y-axis and how are the tick marks spaced?",
                                "What color are the circular markers at each data point?",
                                "How are the data markers annotated?",
                                "What color is the continuous line connecting the data points?",
                                "Are horizontal grid lines included and what do they correspond to?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001536_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Temperature Trends",
                                "Days of the week labeled Monday through Sunday",
                                "7",
                                "0°C to 40°C with ticks every 5°C",
                                "Red",
                                "Each marker displays its corresponding temperature value just above it",
                                "Blue",
                                "Yes, they correspond to the y-axis ticks"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental sensor data.\n\nFeature Requirements:\n- Include a chart title with the text \"Imaginary Environmental Sensor Observations\" centered at the top.\n- Display exactly 6 data points, each representing a different sensor's reading.\n- Use distinct shapes (e.g., circle, square, triangle, diamond, cross, star) for each data point, ensuring no shape is repeated.\n- Add a legend on the left side of the chart mapping each unique shape to its corresponding sensor.\n- Place numerical sensor reading values directly next to each data point.\n- Position the x-axis to represent time in hours, ensuring labels appear at every hourly interval without overlapping.\n- Format the y-axis to display measurement values with one decimal precision, including ticks at intervals of 2.5 units.\n- Incorporate gridlines for both x and y axes to enhance data readability.",
            "task_id": "001537",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the chart title displayed at the top of the visualization?",
                "How many sensor data points are shown in the scatter plot?",
                "Are unique shapes used for each sensor data point?",
                "Which sensor marker shapes are used in the plot?",
                "Where is the legend, mapping sensor names to shapes, positioned?",
                "How are the numerical sensor readings displayed in relation to the data points?",
                "What does the x-axis represent and how are its labels formatted?",
                "How are the y-axis measurement values formatted and what is the tick interval?",
                "Are gridlines visible for both the x-axis and the y-axis?"
            ],
            "VQA_answers": [
                "Imaginary Environmental Sensor Observations",
                "6",
                "Yes",
                "circle, square, triangle, diamond, cross, star",
                "Left side",
                "They are placed directly next to each data point",
                "Time in hours with labels at every hourly interval",
                "They are formatted with one decimal precision and ticks are at intervals of 2.5 units",
                "Yes"
            ],
            "raw_output_metric": [
                "Imaginary Environmental Sensor Observations",
                "circle",
                "square",
                "triangle",
                "diamond",
                "cross",
                "star",
                "legend",
                "time",
                "hours",
                ".1f",
                "2.5",
                "grid"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001537_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional environmental sensor data.\n\nFeature Requirements:\n- Include a chart title with the text \"Imaginary Environmental Sensor Observations\" centered at the top.\n- Display exactly 6 data points, each representing a different sensor's reading.\n- Use distinct shapes (e.g., circle, square, triangle, diamond, cross, star) for each data point, ensuring no shape is repeated.\n- Add a legend on the left side of the chart mapping each unique shape to its corresponding sensor.\n- Place numerical sensor reading values directly next to each data point.\n- Position the x-axis to represent time in hours, ensuring labels appear at every hourly interval without overlapping.\n- Format the y-axis to display measurement values with one decimal precision, including ticks at intervals of 2.5 units.\n- Incorporate gridlines for both x and y axes to enhance data readability."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001537_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Imaginary Environmental Sensor Observations",
                                "circle",
                                "square",
                                "triangle",
                                "diamond",
                                "cross",
                                "star",
                                "legend",
                                "time",
                                "hours",
                                ".1f",
                                "2.5",
                                "grid"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001537_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001537_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the chart title displayed at the top of the visualization?",
                                "How many sensor data points are shown in the scatter plot?",
                                "Are unique shapes used for each sensor data point?",
                                "Which sensor marker shapes are used in the plot?",
                                "Where is the legend, mapping sensor names to shapes, positioned?",
                                "How are the numerical sensor readings displayed in relation to the data points?",
                                "What does the x-axis represent and how are its labels formatted?",
                                "How are the y-axis measurement values formatted and what is the tick interval?",
                                "Are gridlines visible for both the x-axis and the y-axis?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001537_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Imaginary Environmental Sensor Observations",
                                "6",
                                "Yes",
                                "circle, square, triangle, diamond, cross, star",
                                "Left side",
                                "They are placed directly next to each data point",
                                "Time in hours with labels at every hourly interval",
                                "They are formatted with one decimal precision and ticks are at intervals of 2.5 units",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of mythical creature population trends over time.\n\nFeature Requirements:\n- Include a title with the text \"Mythical Creature Populations Over Time\" centered at the top of the visualization.\n- Use a time-based x-axis representing years ranging from 1850 to 2050 with tick marks every 20 years.\n- Set the y-axis to display population counts with tick intervals of 500 units.\n- Plot two distinct lines: one representing \"Dragons\" and one representing \"Unicorns\", each with a unique solid color.\n- Represent each data point on the lines as circles with a fixed radius of 4 pixels.\n- Display a legend at the bottom right of the chart mapping each line color to its corresponding creature type.\n- Annotate the highest value point on each line with its numerical population count.\n- Include horizontal grid lines across the chart aligned with each y-axis tick mark.\n- Define the overall chart dimensions to be exactly 800 pixels wide and 500 pixels high.",
            "task_id": "001538",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title of the visualization?",
                "Is the title centered at the top of the chart?",
                "What is the time range on the x-axis?",
                "What is the tick interval on the x-axis?",
                "What is the tick interval on the y-axis?",
                "How many lines are plotted in the chart?",
                "How are individual data points represented along the lines?",
                "Where is the legend positioned on the chart?",
                "What creature types are shown in the legend?",
                "What annotation is used on the highest value point of each line?"
            ],
            "VQA_answers": [
                "Mythical Creature Populations Over Time",
                "Yes",
                "1850 to 2050",
                "Every 20 years",
                "500 units",
                "2",
                "Circles with a fixed radius of 4 pixels",
                "Bottom right",
                "Dragons and Unicorns",
                "The numerical population count"
            ],
            "raw_output_metric": [
                "Mythical Creature Populations Over Time",
                "1850",
                "2050",
                "20",
                "500",
                "Dragons",
                "Unicorns",
                "4",
                "bottom-right",
                "800"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001538_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of mythical creature population trends over time.\n\nFeature Requirements:\n- Include a title with the text \"Mythical Creature Populations Over Time\" centered at the top of the visualization.\n- Use a time-based x-axis representing years ranging from 1850 to 2050 with tick marks every 20 years.\n- Set the y-axis to display population counts with tick intervals of 500 units.\n- Plot two distinct lines: one representing \"Dragons\" and one representing \"Unicorns\", each with a unique solid color.\n- Represent each data point on the lines as circles with a fixed radius of 4 pixels.\n- Display a legend at the bottom right of the chart mapping each line color to its corresponding creature type.\n- Annotate the highest value point on each line with its numerical population count.\n- Include horizontal grid lines across the chart aligned with each y-axis tick mark.\n- Define the overall chart dimensions to be exactly 800 pixels wide and 500 pixels high."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001538_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mythical Creature Populations Over Time",
                                "1850",
                                "2050",
                                "20",
                                "500",
                                "Dragons",
                                "Unicorns",
                                "4",
                                "bottom-right",
                                "800"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001538_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001538_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title of the visualization?",
                                "Is the title centered at the top of the chart?",
                                "What is the time range on the x-axis?",
                                "What is the tick interval on the x-axis?",
                                "What is the tick interval on the y-axis?",
                                "How many lines are plotted in the chart?",
                                "How are individual data points represented along the lines?",
                                "Where is the legend positioned on the chart?",
                                "What creature types are shown in the legend?",
                                "What annotation is used on the highest value point of each line?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001538_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Mythical Creature Populations Over Time",
                                "Yes",
                                "1850 to 2050",
                                "Every 20 years",
                                "500 units",
                                "2",
                                "Circles with a fixed radius of 4 pixels",
                                "Bottom right",
                                "Dragons and Unicorns",
                                "The numerical population count"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional climate data.\n\nFeature Requirements:\n- Include a title with the text \"Climate Data Scatterplot\" centered at the top of the visualization.\n- Plot exactly 7 data points, each representing a unique city.\n- Use circle markers for each data point, ensuring that each circle has a distinct color.\n- Display a numerical label directly next to each circle indicating the city's average temperature in Celsius.\n- Configure the x-axis to represent average temperature and the y-axis to represent average rainfall, with both axes clearly labeled.\n- Include grid lines on both axes, with temperature increments of 5 and rainfall increments of 10.\n- Add a legend positioned at the bottom right that maps each circle color to its corresponding city.\n- Implement tooltips that display the city name, average temperature, and average rainfall when hovering over any data point.",
            "task_id": "001539",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the centered title displayed at the top of the visualization?",
                "How many data points are visible on the scatter plot?",
                "What shape is used to represent each data point?",
                "Does each circle have a distinct color?",
                "What numerical label is shown next to each circle?",
                "What does the x-axis represent and what are its grid increments?",
                "What does the y-axis represent and what are its grid increments?",
                "Where is the legend located and what does it map?"
            ],
            "VQA_answers": [
                "Climate Data Scatterplot",
                "7",
                "Circle",
                "Yes",
                "The city's average temperature in Celsius",
                "Average temperature with increments of 5",
                "Average rainfall with increments of 10",
                "Bottom right; it maps each circle color to its corresponding city"
            ],
            "raw_output_metric": [
                "$schema",
                "Climate Data Scatterplot",
                "average temperature",
                "average rainfall",
                "data",
                "values",
                "city",
                "circle",
                "color",
                "tooltip",
                "legend",
                "grid",
                "5",
                "10"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001539_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional climate data.\n\nFeature Requirements:\n- Include a title with the text \"Climate Data Scatterplot\" centered at the top of the visualization.\n- Plot exactly 7 data points, each representing a unique city.\n- Use circle markers for each data point, ensuring that each circle has a distinct color.\n- Display a numerical label directly next to each circle indicating the city's average temperature in Celsius.\n- Configure the x-axis to represent average temperature and the y-axis to represent average rainfall, with both axes clearly labeled.\n- Include grid lines on both axes, with temperature increments of 5 and rainfall increments of 10.\n- Add a legend positioned at the bottom right that maps each circle color to its corresponding city.\n- Implement tooltips that display the city name, average temperature, and average rainfall when hovering over any data point."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001539_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "$schema",
                                "Climate Data Scatterplot",
                                "average temperature",
                                "average rainfall",
                                "data",
                                "values",
                                "city",
                                "circle",
                                "color",
                                "tooltip",
                                "legend",
                                "grid",
                                "5",
                                "10"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001539_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001539_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the centered title displayed at the top of the visualization?",
                                "How many data points are visible on the scatter plot?",
                                "What shape is used to represent each data point?",
                                "Does each circle have a distinct color?",
                                "What numerical label is shown next to each circle?",
                                "What does the x-axis represent and what are its grid increments?",
                                "What does the y-axis represent and what are its grid increments?",
                                "Where is the legend located and what does it map?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001539_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Climate Data Scatterplot",
                                "7",
                                "Circle",
                                "Yes",
                                "The city's average temperature in Celsius",
                                "Average temperature with increments of 5",
                                "Average rainfall with increments of 10",
                                "Bottom right; it maps each circle color to its corresponding city"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature trends for three cities.\n\nFeature Requirements:\n- Include a title with the text \"Yearly Temperature Trends\" centered at the top of the visualization.\n- Plot exactly 3 distinct lines, each representing a different city, labeled \"City Alpha\", \"City Beta\", and \"City Gamma\".\n- Each line must have a unique color and display circular markers at each monthly data point.\n- Include a legend in the top right corner that maps each line color to the corresponding city label.\n- Display the x-axis with month names (January to December) ensuring that labels are rotated 45 degrees to prevent overlap.\n- Format the y-axis to display temperature in degrees Celsius, with tick marks at every 5-degree increment.\n- Incorporate horizontal grid lines across the chart for each y-axis tick mark.\n- Enable tooltips that reveal the exact month and temperature value when hovering over any data point.\n- Set the overall chart dimensions to a width of 700 pixels and a height of 450 pixels.",
            "task_id": "001540",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the chart?",
                "Is the chart title centered?",
                "How many lines are shown in the chart?",
                "Which city names appear in the legend?",
                "What shape is used as a marker at each monthly data point?",
                "How many month labels are shown on the x-axis?",
                "Are the month labels on the x-axis rotated, and if so, by how many degrees?",
                "What unit is displayed on the y-axis for the temperature values?",
                "How are the y-axis tick marks indicated on the chart?",
                "What are the overall dimensions of the chart?"
            ],
            "VQA_answers": [
                "Yearly Temperature Trends",
                "Yes",
                "3",
                "City Alpha, City Beta, City Gamma",
                "Circular",
                "12",
                "45 degrees",
                "Degrees Celsius",
                "Horizontal grid lines are shown for every y-axis tick mark",
                "700 pixels wide and 450 pixels high"
            ],
            "raw_output_metric": [
                "Yearly Temperature Trends",
                "City Alpha",
                "City Beta",
                "City Gamma",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "700",
                "450",
                "tooltip",
                "circle",
                "legend"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001540_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional monthly temperature trends for three cities.\n\nFeature Requirements:\n- Include a title with the text \"Yearly Temperature Trends\" centered at the top of the visualization.\n- Plot exactly 3 distinct lines, each representing a different city, labeled \"City Alpha\", \"City Beta\", and \"City Gamma\".\n- Each line must have a unique color and display circular markers at each monthly data point.\n- Include a legend in the top right corner that maps each line color to the corresponding city label.\n- Display the x-axis with month names (January to December) ensuring that labels are rotated 45 degrees to prevent overlap.\n- Format the y-axis to display temperature in degrees Celsius, with tick marks at every 5-degree increment.\n- Incorporate horizontal grid lines across the chart for each y-axis tick mark.\n- Enable tooltips that reveal the exact month and temperature value when hovering over any data point.\n- Set the overall chart dimensions to a width of 700 pixels and a height of 450 pixels."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001540_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yearly Temperature Trends",
                                "City Alpha",
                                "City Beta",
                                "City Gamma",
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December",
                                "700",
                                "450",
                                "tooltip",
                                "circle",
                                "legend"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001540_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001540_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the chart?",
                                "Is the chart title centered?",
                                "How many lines are shown in the chart?",
                                "Which city names appear in the legend?",
                                "What shape is used as a marker at each monthly data point?",
                                "How many month labels are shown on the x-axis?",
                                "Are the month labels on the x-axis rotated, and if so, by how many degrees?",
                                "What unit is displayed on the y-axis for the temperature values?",
                                "How are the y-axis tick marks indicated on the chart?",
                                "What are the overall dimensions of the chart?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001540_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Yearly Temperature Trends",
                                "Yes",
                                "3",
                                "City Alpha, City Beta, City Gamma",
                                "Circular",
                                "12",
                                "45 degrees",
                                "Degrees Celsius",
                                "Horizontal grid lines are shown for every y-axis tick mark",
                                "700 pixels wide and 450 pixels high"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional student study hours versus exam scores.\n\nFeature Requirements:\n- The visualization must include a title that reads \"Study Hours vs Exam Scores Scatter Plot\" centered at the top.\n- The plot should consist of exactly 50 data points representing individual student records.\n- Each data point must be drawn as a circle, with its x-coordinate corresponding to study hours and its y-coordinate corresponding to exam scores.\n- Map the x-axis to study hours with labels in increments of 5, starting at 0 and ending at 50, ensuring all labels are fully visible.\n- Map the y-axis to exam scores with tick marks at every 10 points, formatted to display the score.\n- Use two distinct colors to differentiate between students who passed (score ≥ 60) and students who failed (score < 60), and include a legend on the right that clearly indicates the color mapping.\n- Display gridlines for both axes to help identify each data point's position accurately.\n- Enable tooltips that show the numerical values of study hours and exam scores when a user hovers over any data point.\n- Ensure the visual design allocates sufficient margins so that no graphic elements overlap the axes or border of the visualization.",
            "task_id": "001541",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the visualization?",
                "How many data points are represented in the scatter plot?",
                "What shape is used to represent each student record?",
                "How are the x-axis labels configured?",
                "What is the interval for the y-axis tick marks?",
                "What does the legend on the right indicate?",
                "Are gridlines visible on the axes?",
                "How are the students' results differentiated by color?"
            ],
            "VQA_answers": [
                "Study Hours vs Exam Scores Scatter Plot",
                "50",
                "Circle",
                "In increments of 5, starting at 0 and ending at 50",
                "Every 10 points",
                "Color mapping for students who passed (score ≥ 60) and failed (score < 60)",
                "Yes",
                "Distinct colors for passed and failed students"
            ],
            "raw_output_metric": [
                "Study Hours vs Exam Scores Scatter Plot",
                "circle",
                "50",
                "study hours",
                "exam scores",
                "0",
                "5",
                "10",
                "60",
                "passed",
                "failed",
                "legend",
                "gridlines",
                "tooltip"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001541_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nGenerate a Vega specification for a scatter plot visualization of fictional student study hours versus exam scores.\n\nFeature Requirements:\n- The visualization must include a title that reads \"Study Hours vs Exam Scores Scatter Plot\" centered at the top.\n- The plot should consist of exactly 50 data points representing individual student records.\n- Each data point must be drawn as a circle, with its x-coordinate corresponding to study hours and its y-coordinate corresponding to exam scores.\n- Map the x-axis to study hours with labels in increments of 5, starting at 0 and ending at 50, ensuring all labels are fully visible.\n- Map the y-axis to exam scores with tick marks at every 10 points, formatted to display the score.\n- Use two distinct colors to differentiate between students who passed (score ≥ 60) and students who failed (score < 60), and include a legend on the right that clearly indicates the color mapping.\n- Display gridlines for both axes to help identify each data point's position accurately.\n- Enable tooltips that show the numerical values of study hours and exam scores when a user hovers over any data point.\n- Ensure the visual design allocates sufficient margins so that no graphic elements overlap the axes or border of the visualization."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001541_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Study Hours vs Exam Scores Scatter Plot",
                                "circle",
                                "50",
                                "study hours",
                                "exam scores",
                                "0",
                                "5",
                                "10",
                                "60",
                                "passed",
                                "failed",
                                "legend",
                                "gridlines",
                                "tooltip"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001541_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001541_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the visualization?",
                                "How many data points are represented in the scatter plot?",
                                "What shape is used to represent each student record?",
                                "How are the x-axis labels configured?",
                                "What is the interval for the y-axis tick marks?",
                                "What does the legend on the right indicate?",
                                "Are gridlines visible on the axes?",
                                "How are the students' results differentiated by color?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001541_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Study Hours vs Exam Scores Scatter Plot",
                                "50",
                                "Circle",
                                "In increments of 5, starting at 0 and ending at 50",
                                "Every 10 points",
                                "Color mapping for students who passed (score ≥ 60) and failed (score < 60)",
                                "Yes",
                                "Distinct colors for passed and failed students"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bubble chart visualization of fictional city pollution levels.\n\nFeature Requirements:\n- Include a title at the top reading \"City Pollution Overview\" with a large, bold font.\n- Display exactly 6 bubbles, each representing a unique fictional city.\n- Size each bubble proportionally based on a pollution index value ranging from 20 to 100.\n- Assign a distinct color to each bubble, selecting from a set of 6 predefined colors.\n- Use the x-axis to label the fictional city names with evenly spaced and clearly visible labels.\n- Configure the y-axis to represent numerical pollution index values, scaled from 0 to 150 with regular intervals.\n- Enable tooltips that appear on hover to display the city's name along with its exact pollution index.",
            "task_id": "001542",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text at the top of the visualization?",
                "How is the title styled?",
                "How many bubbles are displayed in the chart?",
                "Does each bubble represent a unique fictional city?",
                "What determines the size of each bubble?",
                "Are the bubble colors distinct and chosen from a predefined set?",
                "What labels are shown along the x-axis?",
                "What is the scale range of the y-axis?",
                "What information is provided in tooltips on hover?"
            ],
            "VQA_answers": [
                "City Pollution Overview",
                "Large, bold font",
                "6",
                "Yes",
                "Pollution index values ranging from 20 to 100",
                "Yes, from a set of 6 predefined colors",
                "Fictional city names",
                "0 to 150",
                "City name and its pollution index"
            ],
            "raw_output_metric": [
                "City Pollution Overview",
                "circle",
                "tooltip",
                "6",
                "20",
                "100",
                "0",
                "150",
                "x",
                "y",
                "color",
                "size"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001542_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a bubble chart visualization of fictional city pollution levels.\n\nFeature Requirements:\n- Include a title at the top reading \"City Pollution Overview\" with a large, bold font.\n- Display exactly 6 bubbles, each representing a unique fictional city.\n- Size each bubble proportionally based on a pollution index value ranging from 20 to 100.\n- Assign a distinct color to each bubble, selecting from a set of 6 predefined colors.\n- Use the x-axis to label the fictional city names with evenly spaced and clearly visible labels.\n- Configure the y-axis to represent numerical pollution index values, scaled from 0 to 150 with regular intervals.\n- Enable tooltips that appear on hover to display the city's name along with its exact pollution index."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001542_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Pollution Overview",
                                "circle",
                                "tooltip",
                                "6",
                                "20",
                                "100",
                                "0",
                                "150",
                                "x",
                                "y",
                                "color",
                                "size"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001542_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001542_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text at the top of the visualization?",
                                "How is the title styled?",
                                "How many bubbles are displayed in the chart?",
                                "Does each bubble represent a unique fictional city?",
                                "What determines the size of each bubble?",
                                "Are the bubble colors distinct and chosen from a predefined set?",
                                "What labels are shown along the x-axis?",
                                "What is the scale range of the y-axis?",
                                "What information is provided in tooltips on hover?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001542_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "City Pollution Overview",
                                "Large, bold font",
                                "6",
                                "Yes",
                                "Pollution index values ranging from 20 to 100",
                                "Yes, from a set of 6 predefined colors",
                                "Fictional city names",
                                "0 to 150",
                                "City name and its pollution index"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of simulated meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Simulated Meteorological Data Scatter Plot\" centered at the top of the visualization.\n- Display exactly 8 data points, each representing recorded meteorological measurements.\n- Map the x-axis to temperature values in degrees Celsius and set the tick marks to appear in 5-degree increments.\n- Map the y-axis to humidity percentages, ensuring tick marks are labeled every 10% increment.\n- Color each data point based on a wind speed category (Low, Medium, High) using three distinct colors and include a legend at the top-right that clearly matches each color to its category.\n- Use circular markers with a fixed size and visible border for each data point.\n- Enable tooltips that show the temperature, humidity, and wind speed category when hovering over each marker.",
            "task_id": "001543",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text displayed at the top of the visualization?",
                "How is the title aligned?",
                "How many data points are displayed in the scatter plot?",
                "Which variable is mapped to the x-axis?",
                "At what intervals are the x-axis tick marks set?",
                "Which variable is mapped to the y-axis?",
                "At what increments are the y-axis tick labels placed?",
                "How many wind speed categories are represented by color?",
                "Where is the legend for wind speed categories located?",
                "What shape and style are used for the data markers?"
            ],
            "VQA_answers": [
                "Simulated Meteorological Data Scatter Plot",
                "Centered",
                "8",
                "Temperature in degrees Celsius",
                "5-degree increments",
                "Humidity percentages",
                "Every 10%",
                "3",
                "Top-right",
                "Circular markers with a fixed size and visible border"
            ],
            "raw_output_metric": [
                "Simulated Meteorological Data Scatter Plot",
                "8",
                "temperature",
                "degrees Celsius",
                "5",
                "humidity",
                "10",
                "Low",
                "Medium",
                "High",
                "legend",
                "circle",
                "tooltip"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001543_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of simulated meteorological data.\n\nFeature Requirements:\n- Include a title with the text \"Simulated Meteorological Data Scatter Plot\" centered at the top of the visualization.\n- Display exactly 8 data points, each representing recorded meteorological measurements.\n- Map the x-axis to temperature values in degrees Celsius and set the tick marks to appear in 5-degree increments.\n- Map the y-axis to humidity percentages, ensuring tick marks are labeled every 10% increment.\n- Color each data point based on a wind speed category (Low, Medium, High) using three distinct colors and include a legend at the top-right that clearly matches each color to its category.\n- Use circular markers with a fixed size and visible border for each data point.\n- Enable tooltips that show the temperature, humidity, and wind speed category when hovering over each marker."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001543_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Simulated Meteorological Data Scatter Plot",
                                "8",
                                "temperature",
                                "degrees Celsius",
                                "5",
                                "humidity",
                                "10",
                                "Low",
                                "Medium",
                                "High",
                                "legend",
                                "circle",
                                "tooltip"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001543_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001543_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the visualization?",
                                "How is the title aligned?",
                                "How many data points are displayed in the scatter plot?",
                                "Which variable is mapped to the x-axis?",
                                "At what intervals are the x-axis tick marks set?",
                                "Which variable is mapped to the y-axis?",
                                "At what increments are the y-axis tick labels placed?",
                                "How many wind speed categories are represented by color?",
                                "Where is the legend for wind speed categories located?",
                                "What shape and style are used for the data markers?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001543_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Simulated Meteorological Data Scatter Plot",
                                "Centered",
                                "8",
                                "Temperature in degrees Celsius",
                                "5-degree increments",
                                "Humidity percentages",
                                "Every 10%",
                                "3",
                                "Top-right",
                                "Circular markers with a fixed size and visible border"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional global temperature anomalies from 1880 to 2020.\n\nFeature Requirements:\n- Include a centered title at the top of the chart with the text \"Global Temperature Anomalies\".\n- Display exactly 7 data points, each representing a distinct decade between 1880 and 2020.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Label each point with the corresponding decade number, placing the label slightly above the point.\n- Configure the x-axis to represent years with tick marks every 20 years, and the y-axis to represent temperature anomaly values in Celsius.\n- Add horizontal and vertical gridlines aligned with the tick marks on both axes.\n- Incorporate a tooltip that displays both the decade and its corresponding temperature anomaly when hovering over any data point.",
            "task_id": "001544",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the chart?",
                "How many data points are shown on the scatter plot?",
                "Are all data points uniquely colored?",
                "Where are the decade labels positioned relative to each point?",
                "What is the time interval used for the x-axis tick marks?",
                "What does the y-axis represent?",
                "Are gridlines present on the chart?",
                "What information does the tooltip display when hovering over a data point?"
            ],
            "VQA_answers": [
                "Global Temperature Anomalies",
                "7",
                "Yes, each data point has a distinct color.",
                "Slightly above each data point.",
                "Every 20 years.",
                "Temperature anomaly values in Celsius.",
                "Yes, horizontal and vertical gridlines align with the tick marks.",
                "The corresponding decade and its temperature anomaly."
            ],
            "raw_output_metric": [
                "Global Temperature Anomalies",
                "1880",
                "2020",
                "data",
                "tooltip",
                "Celsius",
                "decade",
                "color",
                "grid",
                "20",
                "text"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001544_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional global temperature anomalies from 1880 to 2020.\n\nFeature Requirements:\n- Include a centered title at the top of the chart with the text \"Global Temperature Anomalies\".\n- Display exactly 7 data points, each representing a distinct decade between 1880 and 2020.\n- Assign a unique and distinct color to each data point so that no two points share the same color.\n- Label each point with the corresponding decade number, placing the label slightly above the point.\n- Configure the x-axis to represent years with tick marks every 20 years, and the y-axis to represent temperature anomaly values in Celsius.\n- Add horizontal and vertical gridlines aligned with the tick marks on both axes.\n- Incorporate a tooltip that displays both the decade and its corresponding temperature anomaly when hovering over any data point."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001544_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Global Temperature Anomalies",
                                "1880",
                                "2020",
                                "data",
                                "tooltip",
                                "Celsius",
                                "decade",
                                "color",
                                "grid",
                                "20",
                                "text"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001544_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001544_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the chart?",
                                "How many data points are shown on the scatter plot?",
                                "Are all data points uniquely colored?",
                                "Where are the decade labels positioned relative to each point?",
                                "What is the time interval used for the x-axis tick marks?",
                                "What does the y-axis represent?",
                                "Are gridlines present on the chart?",
                                "What information does the tooltip display when hovering over a data point?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001544_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Global Temperature Anomalies",
                                "7",
                                "Yes, each data point has a distinct color.",
                                "Slightly above each data point.",
                                "Every 20 years.",
                                "Temperature anomaly values in Celsius.",
                                "Yes, horizontal and vertical gridlines align with the tick marks.",
                                "The corresponding decade and its temperature anomaly."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature data over a seven-day period.\n\nFeature Requirements:\n- Include a title with the text \"Weekly Temperature Trends\" at the top center of the visualization.\n- Plot exactly 7 data points, one for each day of the week, with each point representing the average temperature.\n- Use a line to connect the data points in chronological order, ensuring the line is clearly visible.\n- Display a circular marker at each data point with a unique shade of blue varying gradually from light to dark.\n- Include x-axis labels for the days of the week, ensuring they are evenly spaced and fully legible.\n- Format the y-axis to display temperature values in Celsius with tick marks at every 5-degree increment.\n- Add a tooltip that shows the exact temperature value and corresponding day when hovering over any data point.\n- Include gridlines for both axes, with horizontal lines in light gray and vertical lines in light gray as well.\n- Provide a caption below the chart summarizing the data as \"Average daily temperatures recorded over one week.\"",
            "task_id": "001545",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title text at the top center of the visualization?",
                "How many data points are plotted on the chart?",
                "Are the data points connected by a visible line in chronological order?",
                "Do the circular markers at each data point display a unique shade of blue varying from light to dark?",
                "What type of labels are shown on the x-axis?",
                "How are the y-axis tick marks spaced?",
                "Is there a caption below the chart summarizing the data, and if so, what does it say?",
                "Are gridlines displayed on both the horizontal and vertical axes in light gray?"
            ],
            "VQA_answers": [
                "Weekly Temperature Trends",
                "7",
                "Yes",
                "Yes",
                "Days of the week",
                "Every 5 degrees",
                "Average daily temperatures recorded over one week",
                "Yes"
            ],
            "raw_output_metric": [
                "Weekly Temperature Trends",
                "Average daily temperatures recorded over one week.",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "line",
                "circle",
                "tooltip",
                "Celsius",
                "blue",
                "lightgray"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001545_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization of fictional temperature data over a seven-day period.\n\nFeature Requirements:\n- Include a title with the text \"Weekly Temperature Trends\" at the top center of the visualization.\n- Plot exactly 7 data points, one for each day of the week, with each point representing the average temperature.\n- Use a line to connect the data points in chronological order, ensuring the line is clearly visible.\n- Display a circular marker at each data point with a unique shade of blue varying gradually from light to dark.\n- Include x-axis labels for the days of the week, ensuring they are evenly spaced and fully legible.\n- Format the y-axis to display temperature values in Celsius with tick marks at every 5-degree increment.\n- Add a tooltip that shows the exact temperature value and corresponding day when hovering over any data point.\n- Include gridlines for both axes, with horizontal lines in light gray and vertical lines in light gray as well.\n- Provide a caption below the chart summarizing the data as \"Average daily temperatures recorded over one week.\""
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001545_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Temperature Trends",
                                "Average daily temperatures recorded over one week.",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                                "line",
                                "circle",
                                "tooltip",
                                "Celsius",
                                "blue",
                                "lightgray"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001545_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001545_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text at the top center of the visualization?",
                                "How many data points are plotted on the chart?",
                                "Are the data points connected by a visible line in chronological order?",
                                "Do the circular markers at each data point display a unique shade of blue varying from light to dark?",
                                "What type of labels are shown on the x-axis?",
                                "How are the y-axis tick marks spaced?",
                                "Is there a caption below the chart summarizing the data, and if so, what does it say?",
                                "Are gridlines displayed on both the horizontal and vertical axes in light gray?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001545_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Temperature Trends",
                                "7",
                                "Yes",
                                "Yes",
                                "Days of the week",
                                "Every 5 degrees",
                                "Average daily temperatures recorded over one week",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional population data across various regions.\n\nFeature Requirements:\n- The chart must have a title displayed at the top reading \"Fictional Population Scatter Plot\".\n- Include exactly 6 distinct data points, each representing a unique region.\n- Represent each data point as a circle with a unique fill color so that no two circles share the same color.\n- Scale the size of each circle according to its population value to visually differentiate between high and low populations.\n- Label the x-axis with region names and ensure that all names are fully legible and evenly spaced.\n- Format the y-axis to display population figures in millions with tick intervals of 2 million.\n- Display the numerical population value adjacent to each data point, positioned above or beside the circle.",
            "task_id": "001546",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the chart title displayed at the top?",
                "How many distinct data points (regions) are shown in the scatter plot?",
                "Are the data points represented as circles?",
                "Do all the circles have unique fill colors?",
                "How is the size of each circle determined?",
                "What labels are used on the x-axis?",
                "How are the region names on the x-axis arranged?",
                "How is the y-axis formatted?",
                "Is the numerical population value displayed near each data point?"
            ],
            "VQA_answers": [
                "Fictional Population Scatter Plot",
                "6",
                "Yes",
                "Yes",
                "It is scaled according to the population value",
                "Region names",
                "Evenly spaced and fully legible",
                "Population figures in millions with tick intervals of 2 million",
                "Yes"
            ],
            "raw_output_metric": [
                "Fictional Population Scatter Plot",
                "data",
                "encoding",
                "mark",
                "circle",
                "region",
                "population",
                "fill",
                "size",
                "axis",
                "text",
                "2"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001546_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization of fictional population data across various regions.\n\nFeature Requirements:\n- The chart must have a title displayed at the top reading \"Fictional Population Scatter Plot\".\n- Include exactly 6 distinct data points, each representing a unique region.\n- Represent each data point as a circle with a unique fill color so that no two circles share the same color.\n- Scale the size of each circle according to its population value to visually differentiate between high and low populations.\n- Label the x-axis with region names and ensure that all names are fully legible and evenly spaced.\n- Format the y-axis to display population figures in millions with tick intervals of 2 million.\n- Display the numerical population value adjacent to each data point, positioned above or beside the circle."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001546_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Population Scatter Plot",
                                "data",
                                "encoding",
                                "mark",
                                "circle",
                                "region",
                                "population",
                                "fill",
                                "size",
                                "axis",
                                "text",
                                "2"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001546_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001546_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the chart title displayed at the top?",
                                "How many distinct data points (regions) are shown in the scatter plot?",
                                "Are the data points represented as circles?",
                                "Do all the circles have unique fill colors?",
                                "How is the size of each circle determined?",
                                "What labels are used on the x-axis?",
                                "How are the region names on the x-axis arranged?",
                                "How is the y-axis formatted?",
                                "Is the numerical population value displayed near each data point?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001546_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Population Scatter Plot",
                                "6",
                                "Yes",
                                "Yes",
                                "It is scaled according to the population value",
                                "Region names",
                                "Evenly spaced and fully legible",
                                "Population figures in millions with tick intervals of 2 million",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization displaying temperature trends for three fictional cities over a week.\n\nFeature Requirements:\n- Include a title with \"Weekly Temperature Trends\" displayed at the top of the visualization.\n- Plot exactly three lines, each representing a unique city.\n- Use distinct line styles (such as solid, dashed, and dotted) to differentiate the temperature trends of each city.\n- Display markers as circles on every data point along each line.\n- Include a legend below the chart that correlates each line style with its corresponding city.\n- Label the x-axis with the days of the week, ensuring that each label is clearly visible.\n- Label the y-axis with temperature values in Celsius with evenly spaced increments.\n- Incorporate interactive tooltips that reveal the day and temperature value when hovering over each data point.",
            "task_id": "001547",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the visualization?",
                "How many lines are plotted in the chart?",
                "How are the temperature trends for the three cities differentiated?",
                "What shape is used to mark each data point on the lines?",
                "Where is the legend located in the chart?",
                "What information does the legend provide?",
                "What labels are shown on the x-axis and y-axis?"
            ],
            "VQA_answers": [
                "Weekly Temperature Trends",
                "3",
                "Distinct line styles: solid, dashed, and dotted",
                "Circles",
                "Below the chart",
                "It correlates each line style with its corresponding city",
                "x-axis: days of the week; y-axis: temperature values in Celsius"
            ],
            "raw_output_metric": [
                "Weekly Temperature Trends",
                "City A",
                "City B",
                "City C",
                "solid",
                "dashed",
                "dotted",
                "circle",
                "legend",
                "tooltip",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday",
                "Celsius"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001547_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a line chart visualization displaying temperature trends for three fictional cities over a week.\n\nFeature Requirements:\n- Include a title with \"Weekly Temperature Trends\" displayed at the top of the visualization.\n- Plot exactly three lines, each representing a unique city.\n- Use distinct line styles (such as solid, dashed, and dotted) to differentiate the temperature trends of each city.\n- Display markers as circles on every data point along each line.\n- Include a legend below the chart that correlates each line style with its corresponding city.\n- Label the x-axis with the days of the week, ensuring that each label is clearly visible.\n- Label the y-axis with temperature values in Celsius with evenly spaced increments.\n- Incorporate interactive tooltips that reveal the day and temperature value when hovering over each data point."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001547_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Temperature Trends",
                                "City A",
                                "City B",
                                "City C",
                                "solid",
                                "dashed",
                                "dotted",
                                "circle",
                                "legend",
                                "tooltip",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                                "Celsius"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001547_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001547_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the visualization?",
                                "How many lines are plotted in the chart?",
                                "How are the temperature trends for the three cities differentiated?",
                                "What shape is used to mark each data point on the lines?",
                                "Where is the legend located in the chart?",
                                "What information does the legend provide?",
                                "What labels are shown on the x-axis and y-axis?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001547_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Temperature Trends",
                                "3",
                                "Distinct line styles: solid, dashed, and dotted",
                                "Circles",
                                "Below the chart",
                                "It correlates each line style with its corresponding city",
                                "x-axis: days of the week; y-axis: temperature values in Celsius"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization representing fictional meteorological data for various cities.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Data Scatter\" centered at the top of the visualization.\n- Visualize exactly 6 data points, each representing a unique city.\n- Use the x-axis to display temperature values ranging from -10°C to 40°C and the y-axis to display humidity percentages ranging from 10% to 100%.\n- Represent each data point with a circle that has a distinct fill color; ensure there are 6 different colors with no repeats.\n- Display the name of each city as a label adjacent to its corresponding data point, positioned so that labels do not overlap with the circles.\n- Implement tooltips that reveal the exact temperature and humidity values when users hover over each data point.\n- Add gridlines with tick marks on the x-axis at every 10°C interval and on the y-axis at every 20% interval.\n- Include a legend positioned below the chart that maps each circle color to the corresponding city name.",
            "task_id": "001548",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the title displayed at the top of the chart?",
                "How many data points (cities) are represented in the chart?",
                "What range of temperature values is shown on the x-axis?",
                "What range of humidity values is shown on the y-axis?",
                "How many distinct fill colors are used for the circles?",
                "Where is the legend positioned in the visualization?",
                "At what intervals are tick marks shown on the x-axis gridlines?",
                "At what intervals are tick marks shown on the y-axis gridlines?"
            ],
            "VQA_answers": [
                "Fictional Weather Data Scatter",
                "6",
                "-10°C to 40°C",
                "10% to 100%",
                "6",
                "Below the chart",
                "Every 10°C",
                "Every 20%"
            ],
            "raw_output_metric": [
                "Fictional Weather Data Scatter",
                "-10",
                "40",
                "10",
                "100",
                "City A",
                "City B",
                "City C",
                "City D",
                "City E",
                "City F",
                "circle",
                "tooltip",
                "legend"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001548_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a scatter plot visualization representing fictional meteorological data for various cities.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Weather Data Scatter\" centered at the top of the visualization.\n- Visualize exactly 6 data points, each representing a unique city.\n- Use the x-axis to display temperature values ranging from -10°C to 40°C and the y-axis to display humidity percentages ranging from 10% to 100%.\n- Represent each data point with a circle that has a distinct fill color; ensure there are 6 different colors with no repeats.\n- Display the name of each city as a label adjacent to its corresponding data point, positioned so that labels do not overlap with the circles.\n- Implement tooltips that reveal the exact temperature and humidity values when users hover over each data point.\n- Add gridlines with tick marks on the x-axis at every 10°C interval and on the y-axis at every 20% interval.\n- Include a legend positioned below the chart that maps each circle color to the corresponding city name."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001548_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Data Scatter",
                                "-10",
                                "40",
                                "10",
                                "100",
                                "City A",
                                "City B",
                                "City C",
                                "City D",
                                "City E",
                                "City F",
                                "circle",
                                "tooltip",
                                "legend"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001548_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001548_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the chart?",
                                "How many data points (cities) are represented in the chart?",
                                "What range of temperature values is shown on the x-axis?",
                                "What range of humidity values is shown on the y-axis?",
                                "How many distinct fill colors are used for the circles?",
                                "Where is the legend positioned in the visualization?",
                                "At what intervals are tick marks shown on the x-axis gridlines?",
                                "At what intervals are tick marks shown on the y-axis gridlines?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001548_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Fictional Weather Data Scatter",
                                "6",
                                "-10°C to 40°C",
                                "10% to 100%",
                                "6",
                                "Below the chart",
                                "Every 10°C",
                                "Every 20%"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vega:\n\nTask:\nCreate a Vega specification for a donut chart visualization of fictional website traffic data.\n\nFeature Requirements:\n- Include a title with the text \"Website Traffic Analytics Donut Chart\" prominently at the top.\n- Create a donut chart with exactly 3 segments, each representing a distinct device type (Desktop, Mobile, Tablet).\n- Ensure each segment has a unique color with no duplication among segments.\n- Position a legend on the right side of the chart that clearly maps each color to its corresponding device type.\n- Display the percentage value for each segment positioned inside the corresponding donut slice.\n- Configure tooltips to show detailed values, including both percentage and raw traffic numbers, when hovering over each segment.\n- Set the donut chart inner radius to 30 percent of the total chart area to clearly reveal a hollow center.\n- Use a layout that ensures all chart elements (title, donut slices, legend, and tooltips) are fully visible and do not overlap.",
            "task_id": "001549",
            "task_name": "Text to Vega",
            "input_type": "Text",
            "output_type": "Vega",
            "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
            "VQA_questions": [
                "What is the chart title at the top?",
                "How many segments are in the donut chart?",
                "Which device types are represented in the donut chart?",
                "Where is the legend positioned in the chart layout?",
                "Are percentage values displayed inside each donut slice?",
                "What information is shown in the tooltip on hover?",
                "What is the inner radius of the donut chart?",
                "Do all donut segments have a unique color?"
            ],
            "VQA_answers": [
                "Website Traffic Analytics Donut Chart",
                "3",
                "Desktop, Mobile, Tablet",
                "On the right side",
                "Yes",
                "Percentage and raw traffic numbers",
                "30% of the total chart area",
                "Yes"
            ],
            "raw_output_metric": [
                "Website Traffic Analytics Donut Chart",
                "Desktop",
                "Mobile",
                "Tablet",
                "innerRadius",
                "30%",
                "legend",
                "right",
                "tooltip",
                "percentage"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001549_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vega:\n\nTask:\nCreate a Vega specification for a donut chart visualization of fictional website traffic data.\n\nFeature Requirements:\n- Include a title with the text \"Website Traffic Analytics Donut Chart\" prominently at the top.\n- Create a donut chart with exactly 3 segments, each representing a distinct device type (Desktop, Mobile, Tablet).\n- Ensure each segment has a unique color with no duplication among segments.\n- Position a legend on the right side of the chart that clearly maps each color to its corresponding device type.\n- Display the percentage value for each segment positioned inside the corresponding donut slice.\n- Configure tooltips to show detailed values, including both percentage and raw traffic numbers, when hovering over each segment.\n- Set the donut chart inner radius to 30 percent of the total chart area to clearly reveal a hollow center.\n- Use a layout that ensures all chart elements (title, donut slices, legend, and tooltips) are fully visible and do not overlap."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001549_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Website Traffic Analytics Donut Chart",
                                "Desktop",
                                "Mobile",
                                "Tablet",
                                "innerRadius",
                                "30%",
                                "legend",
                                "right",
                                "tooltip",
                                "percentage"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001549_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001549_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the chart title at the top?",
                                "How many segments are in the donut chart?",
                                "Which device types are represented in the donut chart?",
                                "Where is the legend positioned in the chart layout?",
                                "Are percentage values displayed inside each donut slice?",
                                "What information is shown in the tooltip on hover?",
                                "What is the inner radius of the donut chart?",
                                "Do all donut segments have a unique color?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001549_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Website Traffic Analytics Donut Chart",
                                "3",
                                "Desktop, Mobile, Tablet",
                                "On the right side",
                                "Yes",
                                "Percentage and raw traffic numbers",
                                "30% of the total chart area",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays a timeline of events.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Timeline\" at the top of the component.\n- Create an array in the data property containing event objects, each with a title and a time property.\n- Use a v-for loop to iterate over the events array and display each event inside a <div> container.\n- Each <div> should include a <p> element for the event title and a <span> element for the event time.\n- Apply a CSS class named \"event-item\" to each event container for styling.\n- Render a button with the text \"Remove Event\" inside each event container that, when clicked, removes that specific event from the list.\n- Provide an <input> element with the placeholder \"Enter event title\" and another with the placeholder \"Enter event time\" above the list.\n- Include an \"Add Event\" button next to the inputs that appends a new event, using the values from the input fields, to the events array.\n- Define a computed property that keeps track of and displays the total number of events currently in the schedule.",
            "task_id": "001600",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What does the header at the top of the component display?",
                "What is the placeholder text for the event title input?",
                "What is the placeholder text for the event time input?",
                "What label is shown on the button placed next to the input fields?",
                "What text is visible on the button inside each event container?",
                "Which CSS class is applied to each event container?",
                "How are each event’s title and time visually presented?",
                "Is there an element that displays the total number of events currently in the schedule?"
            ],
            "VQA_answers": [
                "Event Timeline",
                "Enter event title",
                "Enter event time",
                "Add Event",
                "Remove Event",
                "event-item",
                "The title appears in a paragraph and the time in a span",
                "Yes"
            ],
            "raw_output_metric": [
                "Event Timeline",
                "event-item",
                "Remove Event",
                "Enter event title",
                "Enter event time",
                "Add Event",
                "v-for",
                "title",
                "time",
                "computed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001600_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays a timeline of events.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Timeline\" at the top of the component.\n- Create an array in the data property containing event objects, each with a title and a time property.\n- Use a v-for loop to iterate over the events array and display each event inside a <div> container.\n- Each <div> should include a <p> element for the event title and a <span> element for the event time.\n- Apply a CSS class named \"event-item\" to each event container for styling.\n- Render a button with the text \"Remove Event\" inside each event container that, when clicked, removes that specific event from the list.\n- Provide an <input> element with the placeholder \"Enter event title\" and another with the placeholder \"Enter event time\" above the list.\n- Include an \"Add Event\" button next to the inputs that appends a new event, using the values from the input fields, to the events array.\n- Define a computed property that keeps track of and displays the total number of events currently in the schedule."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001600_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Timeline",
                                "event-item",
                                "Remove Event",
                                "Enter event title",
                                "Enter event time",
                                "Add Event",
                                "v-for",
                                "title",
                                "time",
                                "computed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001600_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001600_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What does the header at the top of the component display?",
                                "What is the placeholder text for the event title input?",
                                "What is the placeholder text for the event time input?",
                                "What label is shown on the button placed next to the input fields?",
                                "What text is visible on the button inside each event container?",
                                "Which CSS class is applied to each event container?",
                                "How are each event’s title and time visually presented?",
                                "Is there an element that displays the total number of events currently in the schedule?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001600_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Timeline",
                                "Enter event title",
                                "Enter event time",
                                "Add Event",
                                "Remove Event",
                                "event-item",
                                "The title appears in a paragraph and the time in a span",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text conference schedule into a Vue component that displays session details and enables filtering based on session track.\n\nFeature Requirements:\n- Render an <h2> element with the text \"Conference Schedule\" as the title.\n- Display each session inside a <div> element with a CSS class named \"session-card\".\n- Within each session-card, include an <h3> element for the session title and a <p> element for the session description.\n- Utilize v-for to iterate over an array containing session objects from the component's data.\n- Include a <select> element that allows users to filter sessions by their \"track\" property, with dynamic options generated from the session data.\n- Provide a \"Reset Filter\" button that, when clicked, restores the full list of sessions.\n- Add a data property to track and display the total number of sessions rendered, shown in a <p> element formatted as \"Total Sessions: [count]\".",
            "task_id": "001601",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed on the page?",
                "How is each session visually represented?",
                "Which element is used to display the session title?",
                "Which element is used for the session description?",
                "What type of control is used to filter sessions by track?",
                "Is there an option to reset the session filter?",
                "How is the number of sessions rendered displayed?",
                "Are the filtering options generated from the session data?"
            ],
            "VQA_answers": [
                "Conference Schedule",
                "A session card that includes a session title and description",
                "A level-three heading",
                "A paragraph",
                "A dropdown select with dynamic options",
                "Yes, a Reset Filter button",
                "In a paragraph formatted as 'Total Sessions: [count]'",
                "Yes"
            ],
            "raw_output_metric": [
                "Conference Schedule",
                "session-card",
                "h3",
                "p",
                "v-for",
                "select",
                "option",
                "track",
                "Reset Filter",
                "Total Sessions:"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001601_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text conference schedule into a Vue component that displays session details and enables filtering based on session track.\n\nFeature Requirements:\n- Render an <h2> element with the text \"Conference Schedule\" as the title.\n- Display each session inside a <div> element with a CSS class named \"session-card\".\n- Within each session-card, include an <h3> element for the session title and a <p> element for the session description.\n- Utilize v-for to iterate over an array containing session objects from the component's data.\n- Include a <select> element that allows users to filter sessions by their \"track\" property, with dynamic options generated from the session data.\n- Provide a \"Reset Filter\" button that, when clicked, restores the full list of sessions.\n- Add a data property to track and display the total number of sessions rendered, shown in a <p> element formatted as \"Total Sessions: [count]\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001601_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Conference Schedule",
                                "session-card",
                                "h3",
                                "p",
                                "v-for",
                                "select",
                                "option",
                                "track",
                                "Reset Filter",
                                "Total Sessions:"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001601_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001601_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed on the page?",
                                "How is each session visually represented?",
                                "Which element is used to display the session title?",
                                "Which element is used for the session description?",
                                "What type of control is used to filter sessions by track?",
                                "Is there an option to reset the session filter?",
                                "How is the number of sessions rendered displayed?",
                                "Are the filtering options generated from the session data?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001601_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Conference Schedule",
                                "A session card that includes a session title and description",
                                "A level-three heading",
                                "A paragraph",
                                "A dropdown select with dynamic options",
                                "Yes, a Reset Filter button",
                                "In a paragraph formatted as 'Total Sessions: [count]'",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text checklist into a Vue component that displays tasks along with completion statuses.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\".\n- Display each task as an <li> element within a <ul> by iterating over a predefined tasks array using v-for.\n- Each <li> should include the task name followed by a checkbox that reflects the task's completion state.\n- Apply a CSS class named \"task-item\" to each <li> element to enable distinct styling.\n- Render an <input> element with a placeholder text \"Enter new task\" positioned above the tasks list.\n- Provide an \"Add Task\" button adjacent to the input field that appends new tasks to the list.\n- Include a \"Reset Tasks\" button below the list that sets all tasks to an incomplete state.\n- Create a data property to track and display the current count of incomplete tasks.",
            "task_id": "001602",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the main title?",
                "What placeholder text appears in the new task input field?",
                "What is the label shown on the button used to add a task?",
                "What is the label on the button that resets the tasks?",
                "How are the tasks presented in the list?",
                "Does each task item include a checkbox that reflects its completion status?",
                "What CSS class is applied to each task item for styling?",
                "Is there a visible display that shows the current count of incomplete tasks?"
            ],
            "VQA_answers": [
                "Task Manager",
                "Enter new task",
                "Add Task",
                "Reset Tasks",
                "Each task is shown as a list item (li)",
                "Yes",
                "task-item",
                "Yes"
            ],
            "raw_output_metric": [
                "Task Manager",
                "<h2>",
                "<ul>",
                "<li>",
                "v-for",
                "task-item",
                "<input",
                "Enter new task",
                "Add Task",
                "Reset Tasks"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001602_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text checklist into a Vue component that displays tasks along with completion statuses.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\".\n- Display each task as an <li> element within a <ul> by iterating over a predefined tasks array using v-for.\n- Each <li> should include the task name followed by a checkbox that reflects the task's completion state.\n- Apply a CSS class named \"task-item\" to each <li> element to enable distinct styling.\n- Render an <input> element with a placeholder text \"Enter new task\" positioned above the tasks list.\n- Provide an \"Add Task\" button adjacent to the input field that appends new tasks to the list.\n- Include a \"Reset Tasks\" button below the list that sets all tasks to an incomplete state.\n- Create a data property to track and display the current count of incomplete tasks."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001602_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "<h2>",
                                "<ul>",
                                "<li>",
                                "v-for",
                                "task-item",
                                "<input",
                                "Enter new task",
                                "Add Task",
                                "Reset Tasks"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001602_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001602_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main title?",
                                "What placeholder text appears in the new task input field?",
                                "What is the label shown on the button used to add a task?",
                                "What is the label on the button that resets the tasks?",
                                "How are the tasks presented in the list?",
                                "Does each task item include a checkbox that reflects its completion status?",
                                "What CSS class is applied to each task item for styling?",
                                "Is there a visible display that shows the current count of incomplete tasks?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001602_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "Enter new task",
                                "Add Task",
                                "Reset Tasks",
                                "Each task is shown as a list item (li)",
                                "Yes",
                                "task-item",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text local festival schedule into a Vue component that displays event details including names, times, and venues.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Festival Schedule\".\n- Display each festival event as a <div> element with a CSS class \"festival-event\" inside a main container.\n- Each <div> must show the event name in bold, followed by a hyphen, the event start time in regular text, and the event location in parentheses.\n- Utilize v-for to iterate over a predefined data array where each object contains \"name\", \"time\", and \"location\" properties.\n- Include a \"Delete Event\" button within each event <div> that, when clicked, removes that specific event from the list.\n- Render an <input> element with the placeholder text \"New event name\" for adding additional event names, positioned above the event list.\n- Add an <input> element with the placeholder text \"HH:MM\" next to the event name input for entering the event time.\n- Provide an additional <input> element with the placeholder text \"Event Venue\" to capture the location of a new event.\n- Include an \"Add Event\" button next to the input fields that, when clicked, appends a new event object to the festival events array and updates the display.\n- Define a data property within the Vue component that dynamically tracks the total number of festival events currently listed.",
            "task_id": "001603",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the page?",
                "How many input fields are visible for adding a new event?",
                "What placeholder text is shown in the first input field?",
                "What placeholder text is shown in the input field for event time?",
                "What placeholder text is shown in the input field for event location?",
                "How is each festival event visually formatted?",
                "What text is displayed on the button used to remove an event?",
                "What text is displayed on the button used to add a new event?"
            ],
            "VQA_answers": [
                "Festival Schedule",
                "Three",
                "New event name",
                "HH:MM",
                "Event Venue",
                "Event name in bold, followed by a hyphen, the event time, and the event location in parentheses",
                "Delete Event",
                "Add Event"
            ],
            "raw_output_metric": [
                "<h1>",
                "Festival Schedule",
                "<div",
                "class=\"festival-event\"",
                "v-for",
                "name",
                "time",
                "location",
                "Delete Event",
                "New event name",
                "HH:MM",
                "Event Venue",
                "Add Event"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001603_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text local festival schedule into a Vue component that displays event details including names, times, and venues.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Festival Schedule\".\n- Display each festival event as a <div> element with a CSS class \"festival-event\" inside a main container.\n- Each <div> must show the event name in bold, followed by a hyphen, the event start time in regular text, and the event location in parentheses.\n- Utilize v-for to iterate over a predefined data array where each object contains \"name\", \"time\", and \"location\" properties.\n- Include a \"Delete Event\" button within each event <div> that, when clicked, removes that specific event from the list.\n- Render an <input> element with the placeholder text \"New event name\" for adding additional event names, positioned above the event list.\n- Add an <input> element with the placeholder text \"HH:MM\" next to the event name input for entering the event time.\n- Provide an additional <input> element with the placeholder text \"Event Venue\" to capture the location of a new event.\n- Include an \"Add Event\" button next to the input fields that, when clicked, appends a new event object to the festival events array and updates the display.\n- Define a data property within the Vue component that dynamically tracks the total number of festival events currently listed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001603_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>",
                                "Festival Schedule",
                                "<div",
                                "class=\"festival-event\"",
                                "v-for",
                                "name",
                                "time",
                                "location",
                                "Delete Event",
                                "New event name",
                                "HH:MM",
                                "Event Venue",
                                "Add Event"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001603_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001603_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the page?",
                                "How many input fields are visible for adding a new event?",
                                "What placeholder text is shown in the first input field?",
                                "What placeholder text is shown in the input field for event time?",
                                "What placeholder text is shown in the input field for event location?",
                                "How is each festival event visually formatted?",
                                "What text is displayed on the button used to remove an event?",
                                "What text is displayed on the button used to add a new event?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001603_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Festival Schedule",
                                "Three",
                                "New event name",
                                "HH:MM",
                                "Event Venue",
                                "Event name in bold, followed by a hyphen, the event time, and the event location in parentheses",
                                "Delete Event",
                                "Add Event"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of conference sessions into a Vue component that displays session details and allows users to add or remove sessions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Conference Schedule\".\n- Display each session as an <li> element within a <ul> using v-for to iterate over a predefined array of sessions.\n- Each <li> must clearly show the session title, speaker name, and time slot separated by dashes.\n- Apply a CSS class named \"session-item\" to each <li> element for consistent styling.\n- Place three separate <input> elements above the list with placeholder texts \"Session Title\", \"Speaker Name\", and \"Time Slot\" for entering new session details.\n- Render an \"Add Session\" button next to the input fields that appends the new session details to the session list when clicked.\n- Include a \"Clear Sessions\" button that, when clicked, removes all sessions from the list.\n- Maintain a data property that tracks the current number of sessions and display this count below the session list.",
            "task_id": "001604",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed at the top of the component?",
                "What is the placeholder text in the first input field?",
                "What is the placeholder text in the second input field?",
                "What is the placeholder text in the third input field?",
                "How is each session detail presented in the list?",
                "What CSS class is used for each session list item?",
                "Which button adds a new session to the list?",
                "Which button removes all sessions from the list?",
                "Where is the count of the current sessions displayed?"
            ],
            "VQA_answers": [
                "Conference Schedule",
                "Session Title",
                "Speaker Name",
                "Time Slot",
                "They show the session title, speaker name, and time slot separated by dashes",
                "session-item",
                "Add Session",
                "Clear Sessions",
                "Below the session list"
            ],
            "raw_output_metric": [
                "Conference Schedule",
                "v-for",
                "session-item",
                "Session Title",
                "Speaker Name",
                "Time Slot",
                "Add Session",
                "Clear Sessions"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001604_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of conference sessions into a Vue component that displays session details and allows users to add or remove sessions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Conference Schedule\".\n- Display each session as an <li> element within a <ul> using v-for to iterate over a predefined array of sessions.\n- Each <li> must clearly show the session title, speaker name, and time slot separated by dashes.\n- Apply a CSS class named \"session-item\" to each <li> element for consistent styling.\n- Place three separate <input> elements above the list with placeholder texts \"Session Title\", \"Speaker Name\", and \"Time Slot\" for entering new session details.\n- Render an \"Add Session\" button next to the input fields that appends the new session details to the session list when clicked.\n- Include a \"Clear Sessions\" button that, when clicked, removes all sessions from the list.\n- Maintain a data property that tracks the current number of sessions and display this count below the session list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001604_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Conference Schedule",
                                "v-for",
                                "session-item",
                                "Session Title",
                                "Speaker Name",
                                "Time Slot",
                                "Add Session",
                                "Clear Sessions"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001604_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001604_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed at the top of the component?",
                                "What is the placeholder text in the first input field?",
                                "What is the placeholder text in the second input field?",
                                "What is the placeholder text in the third input field?",
                                "How is each session detail presented in the list?",
                                "What CSS class is used for each session list item?",
                                "Which button adds a new session to the list?",
                                "Which button removes all sessions from the list?",
                                "Where is the count of the current sessions displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001604_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Conference Schedule",
                                "Session Title",
                                "Speaker Name",
                                "Time Slot",
                                "They show the session title, speaker name, and time slot separated by dashes",
                                "session-item",
                                "Add Session",
                                "Clear Sessions",
                                "Below the session list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast with temperatures and additional details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Forecast\".\n- Iterate over a data array of forecast objects using the v-for directive, where each object contains the day, high temperature, and low temperature.\n- Display each forecast item as an <li> element within a <ul>, applying a CSS class named \"forecast-item\" to wrap each forecast.\n- Format each <li> to show the day in bold, followed by the high and low temperatures in a span formatted as \"High: [value], Low: [value]\".\n- Include a button labeled \"Toggle Details\" that, when clicked, toggles the display of additional weather details for each day.\n- Use conditional rendering to show a <div> with a message \"No forecast data available\" when the forecast array is empty.\n- Implement a computed property that calculates the average high temperature from all forecast items.\n- Add an input field with the placeholder \"Enter new forecast\" and a button labeled \"Add Forecast\" to allow users to append new forecast data.\n- Create a data property for managing both the forecast array and the visibility state of the detailed weather information.",
            "task_id": "001605",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the component?",
                "How is each forecast item visually formatted?",
                "What visual indicator shows that each forecast item is styled consistently?",
                "What label is shown on the button that allows toggling of additional weather details?",
                "What message is displayed when there is no forecast data available?",
                "What placeholder text is shown in the input field for adding a new forecast?",
                "What label appears on the button that adds new forecast data?"
            ],
            "VQA_answers": [
                "Weekly Forecast",
                "The day is in bold followed by a span showing 'High: [value], Low: [value]'.",
                "Each forecast item is wrapped with a CSS class named 'forecast-item'.",
                "Toggle Details",
                "No forecast data available",
                "Enter new forecast",
                "Add Forecast"
            ],
            "raw_output_metric": [
                "Weekly Forecast",
                "v-for",
                "forecast-item",
                "High:",
                "Low:",
                "Toggle Details",
                "No forecast data available",
                "Enter new forecast",
                "Add Forecast",
                "computed",
                "averageHigh"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001605_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast with temperatures and additional details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Forecast\".\n- Iterate over a data array of forecast objects using the v-for directive, where each object contains the day, high temperature, and low temperature.\n- Display each forecast item as an <li> element within a <ul>, applying a CSS class named \"forecast-item\" to wrap each forecast.\n- Format each <li> to show the day in bold, followed by the high and low temperatures in a span formatted as \"High: [value], Low: [value]\".\n- Include a button labeled \"Toggle Details\" that, when clicked, toggles the display of additional weather details for each day.\n- Use conditional rendering to show a <div> with a message \"No forecast data available\" when the forecast array is empty.\n- Implement a computed property that calculates the average high temperature from all forecast items.\n- Add an input field with the placeholder \"Enter new forecast\" and a button labeled \"Add Forecast\" to allow users to append new forecast data.\n- Create a data property for managing both the forecast array and the visibility state of the detailed weather information."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001605_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Forecast",
                                "v-for",
                                "forecast-item",
                                "High:",
                                "Low:",
                                "Toggle Details",
                                "No forecast data available",
                                "Enter new forecast",
                                "Add Forecast",
                                "computed",
                                "averageHigh"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001605_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001605_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the component?",
                                "How is each forecast item visually formatted?",
                                "What visual indicator shows that each forecast item is styled consistently?",
                                "What label is shown on the button that allows toggling of additional weather details?",
                                "What message is displayed when there is no forecast data available?",
                                "What placeholder text is shown in the input field for adding a new forecast?",
                                "What label appears on the button that adds new forecast data?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001605_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Forecast",
                                "The day is in bold followed by a span showing 'High: [value], Low: [value]'.",
                                "Each forecast item is wrapped with a CSS class named 'forecast-item'.",
                                "Toggle Details",
                                "No forecast data available",
                                "Enter new forecast",
                                "Add Forecast"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text travel itinerary into a Vue component that displays a day-by-day schedule with detailed plans.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Travel Itinerary\".\n- Display each day of the itinerary in its own section, using an <h2> element for the day title and a <p> element for the corresponding details.\n- Use v-for to iterate over a predefined data array containing objects with properties for \"day\", \"date\", and \"description\".\n- Include an <input> element with the placeholder text \"Add new day\" placed above the itinerary sections.\n- Provide an \"Add Day\" button next to the input field that, when clicked, appends a new day object to the itinerary.\n- Render a footer element that clearly shows the total count of days in the itinerary, updating dynamically as items are added.",
            "task_id": "001606",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main header text displayed at the top of the itinerary?",
                "What placeholder text is visible in the input field above the itinerary details?",
                "What text is shown on the button next to the input field?",
                "How is each day’s title visually indicated?",
                "How are the detailed plans for each day rendered?",
                "Is each day’s itinerary shown in its own section?",
                "What dynamic information is shown in the footer?"
            ],
            "VQA_answers": [
                "Travel Itinerary",
                "Add new day",
                "Add Day",
                "It uses an h2 element for the day title",
                "Each day’s details are shown in a paragraph element",
                "Yes",
                "The footer displays the total count of days in the itinerary"
            ],
            "raw_output_metric": [
                "Travel Itinerary",
                "<h1>",
                "<h2>",
                "<p>",
                "v-for",
                "day",
                "date",
                "description",
                "<input",
                "placeholder=\"Add new day\"",
                "Add Day",
                "<footer>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001606_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text travel itinerary into a Vue component that displays a day-by-day schedule with detailed plans.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Travel Itinerary\".\n- Display each day of the itinerary in its own section, using an <h2> element for the day title and a <p> element for the corresponding details.\n- Use v-for to iterate over a predefined data array containing objects with properties for \"day\", \"date\", and \"description\".\n- Include an <input> element with the placeholder text \"Add new day\" placed above the itinerary sections.\n- Provide an \"Add Day\" button next to the input field that, when clicked, appends a new day object to the itinerary.\n- Render a footer element that clearly shows the total count of days in the itinerary, updating dynamically as items are added."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001606_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Travel Itinerary",
                                "<h1>",
                                "<h2>",
                                "<p>",
                                "v-for",
                                "day",
                                "date",
                                "description",
                                "<input",
                                "placeholder=\"Add new day\"",
                                "Add Day",
                                "<footer>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001606_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001606_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top of the itinerary?",
                                "What placeholder text is visible in the input field above the itinerary details?",
                                "What text is shown on the button next to the input field?",
                                "How is each day’s title visually indicated?",
                                "How are the detailed plans for each day rendered?",
                                "Is each day’s itinerary shown in its own section?",
                                "What dynamic information is shown in the footer?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001606_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Travel Itinerary",
                                "Add new day",
                                "Add Day",
                                "It uses an h2 element for the day title",
                                "Each day’s details are shown in a paragraph element",
                                "Yes",
                                "The footer displays the total count of days in the itinerary"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text daily task list into a Vue component that presents tasks with their due times and allows users to mark tasks as complete.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Daily Tasks\".\n- Display each task as an <li> element within an <ol> and include both the task name and its due time in double quotes.\n- Use v-for to iterate over a predefined data array where each task object contains \"name\", \"dueTime\", and \"completed\" properties.\n- Include a checkbox inside each <li> element that is bound to the task's \"completed\" property to enable marking the task as complete.\n- Place an <input> element with the placeholder \"Enter new task\" above the ordered list for task names.\n- Place a second <input> element with the placeholder \"Enter due time\" right next to the task input field for specifying the task due time.\n- Provide an \"Add Task\" button adjacent to the input fields that, when clicked, appends a new task with \"completed\" set to false to the tasks array.\n- Render a \"Remove Completed\" button below the task list that removes all tasks that have been marked as complete.\n- Include a data property that tracks the total number of tasks currently displayed in the component.",
            "task_id": "001607",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the heading at the top of the component?",
                "What type of list is used to display the tasks?",
                "How are the task details formatted in each list item?",
                "What interactive element is provided with each task?",
                "What placeholder text is shown on the task input field?",
                "What placeholder text is shown for the due time input field?",
                "What label is displayed on the button used to add a new task?",
                "What label is on the button that removes completed tasks?"
            ],
            "VQA_answers": [
                "Daily Tasks",
                "Ordered list",
                "Task name and due time in double quotes",
                "Checkbox",
                "Enter new task",
                "Enter due time",
                "Add Task",
                "Remove Completed"
            ],
            "raw_output_metric": [
                "Daily Tasks",
                "<h1>",
                "<ol>",
                "<li>",
                "v-for",
                "name",
                "dueTime",
                "completed",
                "Enter new task",
                "Enter due time",
                "Add Task",
                "Remove Completed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001607_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text daily task list into a Vue component that presents tasks with their due times and allows users to mark tasks as complete.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Daily Tasks\".\n- Display each task as an <li> element within an <ol> and include both the task name and its due time in double quotes.\n- Use v-for to iterate over a predefined data array where each task object contains \"name\", \"dueTime\", and \"completed\" properties.\n- Include a checkbox inside each <li> element that is bound to the task's \"completed\" property to enable marking the task as complete.\n- Place an <input> element with the placeholder \"Enter new task\" above the ordered list for task names.\n- Place a second <input> element with the placeholder \"Enter due time\" right next to the task input field for specifying the task due time.\n- Provide an \"Add Task\" button adjacent to the input fields that, when clicked, appends a new task with \"completed\" set to false to the tasks array.\n- Render a \"Remove Completed\" button below the task list that removes all tasks that have been marked as complete.\n- Include a data property that tracks the total number of tasks currently displayed in the component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001607_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Tasks",
                                "<h1>",
                                "<ol>",
                                "<li>",
                                "v-for",
                                "name",
                                "dueTime",
                                "completed",
                                "Enter new task",
                                "Enter due time",
                                "Add Task",
                                "Remove Completed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001607_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001607_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the heading at the top of the component?",
                                "What type of list is used to display the tasks?",
                                "How are the task details formatted in each list item?",
                                "What interactive element is provided with each task?",
                                "What placeholder text is shown on the task input field?",
                                "What placeholder text is shown for the due time input field?",
                                "What label is displayed on the button used to add a new task?",
                                "What label is on the button that removes completed tasks?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001607_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Tasks",
                                "Ordered list",
                                "Task name and due time in double quotes",
                                "Checkbox",
                                "Enter new task",
                                "Enter due time",
                                "Add Task",
                                "Remove Completed"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe with its ingredients and preparation instructions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Collection\".\n- Display each recipe within a <div> container using a CSS class \"recipe-card\" for visual separation.\n- Use a v-for directive to iterate over an array of recipe objects, each containing properties for name, ingredients, and instructions.\n- Render the recipe name as an <h2> element, immediately followed by a <p> element containing the preparation instructions.\n- Display the list of ingredients using a <ul> element, where each ingredient is rendered as an <li> element with a CSS class \"ingredient-item\".\n- Place an <input> element above the recipe list with a placeholder text \"Search recipes\" to allow filtering of the displayed recipes.\n- Render a button labeled \"Add Recipe\" next to the input field that triggers a method to add a new recipe to the array.\n- Include a data property in the Vue component that tracks the total number of recipes currently displayed.\n- Provide a method for filtering recipes dynamically based on the search input.\n- Make sure that all methods and data properties are clearly defined within the component’s script section.",
            "task_id": "001608",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What CSS class is applied to each recipe's container?",
                "Which heading element is used to show each recipe's name?",
                "What immediately follows the recipe name in each recipe card?",
                "How are the recipe ingredients visually presented?",
                "What text is shown as the placeholder in the search input field?",
                "What label appears on the button next to the search field?",
                "How is the number of recipes displayed tracked?"
            ],
            "VQA_answers": [
                "Recipe Collection",
                "recipe-card",
                "h2",
                "A paragraph with preparation instructions",
                "As a bullet list, with each item styled as an ingredient-item",
                "Search recipes",
                "Add Recipe",
                "Through a data property in the Vue component"
            ],
            "raw_output_metric": [
                "Recipe Collection",
                "recipe-card",
                "v-for",
                "<h2>",
                "<p>",
                "ingredient-item",
                "Search recipes",
                "Add Recipe",
                "data",
                "methods",
                "<template>",
                "<script>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001608_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe with its ingredients and preparation instructions.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Collection\".\n- Display each recipe within a <div> container using a CSS class \"recipe-card\" for visual separation.\n- Use a v-for directive to iterate over an array of recipe objects, each containing properties for name, ingredients, and instructions.\n- Render the recipe name as an <h2> element, immediately followed by a <p> element containing the preparation instructions.\n- Display the list of ingredients using a <ul> element, where each ingredient is rendered as an <li> element with a CSS class \"ingredient-item\".\n- Place an <input> element above the recipe list with a placeholder text \"Search recipes\" to allow filtering of the displayed recipes.\n- Render a button labeled \"Add Recipe\" next to the input field that triggers a method to add a new recipe to the array.\n- Include a data property in the Vue component that tracks the total number of recipes currently displayed.\n- Provide a method for filtering recipes dynamically based on the search input.\n- Make sure that all methods and data properties are clearly defined within the component’s script section."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001608_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Collection",
                                "recipe-card",
                                "v-for",
                                "<h2>",
                                "<p>",
                                "ingredient-item",
                                "Search recipes",
                                "Add Recipe",
                                "data",
                                "methods",
                                "<template>",
                                "<script>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001608_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001608_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What CSS class is applied to each recipe's container?",
                                "Which heading element is used to show each recipe's name?",
                                "What immediately follows the recipe name in each recipe card?",
                                "How are the recipe ingredients visually presented?",
                                "What text is shown as the placeholder in the search input field?",
                                "What label appears on the button next to the search field?",
                                "How is the number of recipes displayed tracked?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001608_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Collection",
                                "recipe-card",
                                "h2",
                                "A paragraph with preparation instructions",
                                "As a bullet list, with each item styled as an ingredient-item",
                                "Search recipes",
                                "Add Recipe",
                                "Through a data property in the Vue component"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nDevelop a Vue component that manages and displays a catalog of books with options to add new entries and remove existing ones.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Book Catalog\".\n- Display each book as a row within a <table> element, with columns for the title, author, and publication year.\n- Use a v-for directive to iterate over an array of book objects defined in the component's data.\n- Apply a CSS class named \"book-row\" to each table row (<tr>) for consistent styling.\n- Include a form containing three separate <input> elements for entering the book's title, author, and publication year, each with appropriate placeholder text.\n- Place an \"Add Book\" button next to the input fields that appends the new book to the catalog when clicked.\n- Provide a \"Remove\" button within each table row that, when clicked, deletes the corresponding book from the list.\n- Manage a data property that tracks the current count of books, displaying this number above the catalog table.\n- Ensure that all interactive elements have corresponding event handlers within the Vue component for adding and removing books.",
            "task_id": "001609",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text at the top of the page?",
                "What number appears above the catalog table indicating the count of books?",
                "How many columns are displayed for each book entry?",
                "What placeholder text is shown in the first input field?",
                "What placeholder text is shown in the second input field?",
                "What placeholder text is shown in the third input field?",
                "What text is displayed on the button used to add a new book?",
                "What label appears on the button that allows users to remove a book?"
            ],
            "VQA_answers": [
                "Book Catalog",
                "0",
                "3",
                "Title",
                "Author",
                "Publication Year",
                "Add Book",
                "Remove"
            ],
            "raw_output_metric": [
                "Book Catalog",
                "<h2>",
                "<table>",
                "v-for",
                "book-row",
                "<tr",
                "<input",
                "placeholder=\"Title\"",
                "placeholder=\"Author\"",
                "placeholder=\"Publication Year\"",
                "Add Book",
                "Remove",
                "@click",
                "data()",
                "methods",
                "books"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001609_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nDevelop a Vue component that manages and displays a catalog of books with options to add new entries and remove existing ones.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Book Catalog\".\n- Display each book as a row within a <table> element, with columns for the title, author, and publication year.\n- Use a v-for directive to iterate over an array of book objects defined in the component's data.\n- Apply a CSS class named \"book-row\" to each table row (<tr>) for consistent styling.\n- Include a form containing three separate <input> elements for entering the book's title, author, and publication year, each with appropriate placeholder text.\n- Place an \"Add Book\" button next to the input fields that appends the new book to the catalog when clicked.\n- Provide a \"Remove\" button within each table row that, when clicked, deletes the corresponding book from the list.\n- Manage a data property that tracks the current count of books, displaying this number above the catalog table.\n- Ensure that all interactive elements have corresponding event handlers within the Vue component for adding and removing books."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001609_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Catalog",
                                "<h2>",
                                "<table>",
                                "v-for",
                                "book-row",
                                "<tr",
                                "<input",
                                "placeholder=\"Title\"",
                                "placeholder=\"Author\"",
                                "placeholder=\"Publication Year\"",
                                "Add Book",
                                "Remove",
                                "@click",
                                "data()",
                                "methods",
                                "books"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001609_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001609_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text at the top of the page?",
                                "What number appears above the catalog table indicating the count of books?",
                                "How many columns are displayed for each book entry?",
                                "What placeholder text is shown in the first input field?",
                                "What placeholder text is shown in the second input field?",
                                "What placeholder text is shown in the third input field?",
                                "What text is displayed on the button used to add a new book?",
                                "What label appears on the button that allows users to remove a book?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001609_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Catalog",
                                "0",
                                "3",
                                "Title",
                                "Author",
                                "Publication Year",
                                "Add Book",
                                "Remove"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text meeting schedule into a Vue component that displays scheduled meetings and provides functionality to add and remove meetings.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Meeting Schedule\" at the top of the component.\n- Display the meetings in a table structure where each meeting is represented by a table row (<tr>) and details are shown in table cells (<td>).\n- Use v-for to iterate over a predefined data array containing meeting objects with properties for time and description.\n- Create an input text field with a placeholder \"Enter meeting details\" and an adjacent input field for time with a placeholder \"HH:MM\" positioned above the table.\n- Include an \"Add Meeting\" button next to the input fields that, when clicked, appends a new meeting to the meetings array based on the input values.\n- Provide a \"Delete\" button within each table row that, when clicked, removes the corresponding meeting from the list.\n- Apply a CSS class named \"meeting-row\" to each table row to facilitate consistent styling.\n- Add a data property in the Vue component that stores and displays the total number of meetings currently scheduled.\n- Render the total count of meetings in a paragraph element below the table with the text \"Total Meetings:\" followed by the count.\n- Ensure that clearing the inputs after adding a meeting is part of the component’s logic.",
            "task_id": "001610",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What text is displayed in the header at the top of the component?",
                "What placeholder text is shown in the meeting details input field?",
                "What placeholder text is shown in the time input field?",
                "What is the text on the button used to add a meeting?",
                "What label appears on the button within each meeting row for removal?",
                "How are the meetings visually organized?",
                "What CSS class is applied to each meeting row?",
                "What line of text is displayed below the table indicating the number of meetings?"
            ],
            "VQA_answers": [
                "Meeting Schedule",
                "Enter meeting details",
                "HH:MM",
                "Add Meeting",
                "Delete",
                "In a table with rows and cells",
                "meeting-row",
                "Total Meetings: followed by the count"
            ],
            "raw_output_metric": [
                "Meeting Schedule",
                "v-for",
                "Enter meeting details",
                "HH:MM",
                "Add Meeting",
                "Delete",
                "meeting-row",
                "Total Meetings:"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001610_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text meeting schedule into a Vue component that displays scheduled meetings and provides functionality to add and remove meetings.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Meeting Schedule\" at the top of the component.\n- Display the meetings in a table structure where each meeting is represented by a table row (<tr>) and details are shown in table cells (<td>).\n- Use v-for to iterate over a predefined data array containing meeting objects with properties for time and description.\n- Create an input text field with a placeholder \"Enter meeting details\" and an adjacent input field for time with a placeholder \"HH:MM\" positioned above the table.\n- Include an \"Add Meeting\" button next to the input fields that, when clicked, appends a new meeting to the meetings array based on the input values.\n- Provide a \"Delete\" button within each table row that, when clicked, removes the corresponding meeting from the list.\n- Apply a CSS class named \"meeting-row\" to each table row to facilitate consistent styling.\n- Add a data property in the Vue component that stores and displays the total number of meetings currently scheduled.\n- Render the total count of meetings in a paragraph element below the table with the text \"Total Meetings:\" followed by the count.\n- Ensure that clearing the inputs after adding a meeting is part of the component’s logic."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001610_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Meeting Schedule",
                                "v-for",
                                "Enter meeting details",
                                "HH:MM",
                                "Add Meeting",
                                "Delete",
                                "meeting-row",
                                "Total Meetings:"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001610_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001610_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What text is displayed in the header at the top of the component?",
                                "What placeholder text is shown in the meeting details input field?",
                                "What placeholder text is shown in the time input field?",
                                "What is the text on the button used to add a meeting?",
                                "What label appears on the button within each meeting row for removal?",
                                "How are the meetings visually organized?",
                                "What CSS class is applied to each meeting row?",
                                "What line of text is displayed below the table indicating the number of meetings?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001610_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Meeting Schedule",
                                "Enter meeting details",
                                "HH:MM",
                                "Add Meeting",
                                "Delete",
                                "In a table with rows and cells",
                                "meeting-row",
                                "Total Meetings: followed by the count"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays upcoming events with their times and allows users to add and remove events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, showing the event name followed by its scheduled time in parentheses.\n- Implement v-for to iterate over a predefined data array of event objects containing \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to each <li> element for styling purposes.\n- Include an <input> element above the list with a placeholder \"Enter event name\" for users to input the event title.\n- Provide another <input> element with a placeholder \"Enter event time\" next to the event name input for entering the time.\n- Render an \"Add Event\" button that appends a new event to the data array when clicked.\n- Create a button labeled \"Remove Past Events\" that, upon clicking, filters out events that have a time value earlier than the current time.\n- Include a data property within the Vue component to track the total count of upcoming events displayed.",
            "task_id": "001611",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How are events listed on the page?",
                "What placeholder text appears for the event name input field?",
                "What placeholder text appears for the event time input field?",
                "What label is shown on the button for adding events?",
                "What label is shown on the button for removing past events?",
                "What CSS class is assigned to each event list item?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "Each event is shown as a list item with the event name followed by its time in parentheses",
                "Enter event name",
                "Enter event time",
                "Add Event",
                "Remove Past Events",
                "event-item"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "<h1>",
                "<ul>",
                "<li",
                "event-item",
                "v-for",
                "placeholder=\"Enter event name\"",
                "placeholder=\"Enter event time\"",
                "Add Event",
                "Remove Past Events",
                "name",
                "time",
                "data",
                "count"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001611_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays upcoming events with their times and allows users to add and remove events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, showing the event name followed by its scheduled time in parentheses.\n- Implement v-for to iterate over a predefined data array of event objects containing \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to each <li> element for styling purposes.\n- Include an <input> element above the list with a placeholder \"Enter event name\" for users to input the event title.\n- Provide another <input> element with a placeholder \"Enter event time\" next to the event name input for entering the time.\n- Render an \"Add Event\" button that appends a new event to the data array when clicked.\n- Create a button labeled \"Remove Past Events\" that, upon clicking, filters out events that have a time value earlier than the current time.\n- Include a data property within the Vue component to track the total count of upcoming events displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001611_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "<h1>",
                                "<ul>",
                                "<li",
                                "event-item",
                                "v-for",
                                "placeholder=\"Enter event name\"",
                                "placeholder=\"Enter event time\"",
                                "Add Event",
                                "Remove Past Events",
                                "name",
                                "time",
                                "data",
                                "count"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001611_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001611_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How are events listed on the page?",
                                "What placeholder text appears for the event name input field?",
                                "What placeholder text appears for the event time input field?",
                                "What label is shown on the button for adding events?",
                                "What label is shown on the button for removing past events?",
                                "What CSS class is assigned to each event list item?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001611_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "Each event is shown as a list item with the event name followed by its time in parentheses",
                                "Enter event name",
                                "Enter event time",
                                "Add Event",
                                "Remove Past Events",
                                "event-item"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nCreate a Vue component that manages a simple daily task board.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Tasks\".\n- Display each task as a <div> element within a main container.\n- Each <div> should show the task description and its due time inside separate <span> elements.\n- Utilize v-for to iterate over a predefined array of tasks stored in the component's data.\n- Include a checkbox inside each <div> that, when clicked, toggles a Boolean property indicating if the task is completed.\n- Provide a button labeled \"Archive Completed\" that, when clicked, removes all tasks marked as completed.\n- Apply a CSS class named \"task-item\" to each task <div> for styling.\n- Display the total count of uncompleted tasks in a <p> element at the bottom of the component.\n- Add an <input> element with a placeholder \"Enter new task\" above the list.\n- Include an \"Add Task\" button next to the input that, when clicked, appends a new task with a default due time of \"5:00 PM\" to the task array.",
            "task_id": "001612",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title text displayed at the top of the task board?",
                "What placeholder text is visible in the input field for adding a new task?",
                "What label is shown on the button used to add a new task?",
                "What is the default due time displayed for a newly added task?",
                "What label is shown on the button for archiving completed tasks?",
                "Which two pieces of information are visually presented for each task?",
                "Where is the count of uncompleted tasks displayed in the component?",
                "What visual indicator is provided for toggling a task’s completion status?"
            ],
            "VQA_answers": [
                "Daily Tasks",
                "Enter new task",
                "Add Task",
                "5:00 PM",
                "Archive Completed",
                "The task description and its due time",
                "In a paragraph at the bottom",
                "A checkbox"
            ],
            "raw_output_metric": [
                "Daily Tasks",
                "v-for",
                "task-item",
                "Archive Completed",
                "Enter new task",
                "Add Task",
                "5:00 PM"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001612_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nCreate a Vue component that manages a simple daily task board.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Tasks\".\n- Display each task as a <div> element within a main container.\n- Each <div> should show the task description and its due time inside separate <span> elements.\n- Utilize v-for to iterate over a predefined array of tasks stored in the component's data.\n- Include a checkbox inside each <div> that, when clicked, toggles a Boolean property indicating if the task is completed.\n- Provide a button labeled \"Archive Completed\" that, when clicked, removes all tasks marked as completed.\n- Apply a CSS class named \"task-item\" to each task <div> for styling.\n- Display the total count of uncompleted tasks in a <p> element at the bottom of the component.\n- Add an <input> element with a placeholder \"Enter new task\" above the list.\n- Include an \"Add Task\" button next to the input that, when clicked, appends a new task with a default due time of \"5:00 PM\" to the task array."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001612_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Tasks",
                                "v-for",
                                "task-item",
                                "Archive Completed",
                                "Enter new task",
                                "Add Task",
                                "5:00 PM"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001612_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001612_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the task board?",
                                "What placeholder text is visible in the input field for adding a new task?",
                                "What label is shown on the button used to add a new task?",
                                "What is the default due time displayed for a newly added task?",
                                "What label is shown on the button for archiving completed tasks?",
                                "Which two pieces of information are visually presented for each task?",
                                "Where is the count of uncompleted tasks displayed in the component?",
                                "What visual indicator is provided for toggling a task’s completion status?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001612_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Tasks",
                                "Enter new task",
                                "Add Task",
                                "5:00 PM",
                                "Archive Completed",
                                "The task description and its due time",
                                "In a paragraph at the bottom",
                                "A checkbox"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text recipe description into a Vue component that displays recipe details and manages a list of ingredients.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Details\".\n- Display each ingredient as an <li> element within a <ul>, showing both the ingredient name and its quantity.\n- Utilize v-for to iterate over an array of ingredient objects containing \"name\" and \"quantity\" properties.\n- Include an <input> element for the ingredient name and another <input> element for the ingredient quantity, each with a placeholder (\"Enter ingredient\" and \"Enter quantity\" respectively).\n- Render a button labeled \"Add Ingredient\" that, when clicked, appends the new ingredient to the list.\n- Provide a button labeled \"Reset Recipe\" that clears the ingredients list and resets the component state.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Display a counter that shows the total number of ingredients currently in the list using a data property.\n- Ensure the Vue component initializes with a predefined array of at least two ingredient objects.\n- Include error handling in the logic to prevent adding an ingredient if either input field is empty.",
            "task_id": "001613",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed on the page?",
                "How many ingredients are initially listed?",
                "What placeholders are visible in the input fields?",
                "Which labels can be seen on the buttons?",
                "Which CSS class is applied to each ingredient list item?",
                "What information is shown for each ingredient in the list?",
                "Is there a visible counter showing the total number of ingredients?"
            ],
            "VQA_answers": [
                "Recipe Details",
                "At least 2",
                "Enter ingredient and Enter quantity",
                "Add Ingredient and Reset Recipe",
                "ingredient-item",
                "Both the ingredient name and its quantity",
                "Yes"
            ],
            "raw_output_metric": [
                "<h1>Recipe Details</h1>",
                "v-for",
                "ingredient-item",
                "Enter ingredient",
                "Enter quantity",
                "Add Ingredient",
                "Reset Recipe",
                "ingredients",
                "counter",
                "newIngredient",
                "name",
                "quantity"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001613_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text recipe description into a Vue component that displays recipe details and manages a list of ingredients.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Recipe Details\".\n- Display each ingredient as an <li> element within a <ul>, showing both the ingredient name and its quantity.\n- Utilize v-for to iterate over an array of ingredient objects containing \"name\" and \"quantity\" properties.\n- Include an <input> element for the ingredient name and another <input> element for the ingredient quantity, each with a placeholder (\"Enter ingredient\" and \"Enter quantity\" respectively).\n- Render a button labeled \"Add Ingredient\" that, when clicked, appends the new ingredient to the list.\n- Provide a button labeled \"Reset Recipe\" that clears the ingredients list and resets the component state.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Display a counter that shows the total number of ingredients currently in the list using a data property.\n- Ensure the Vue component initializes with a predefined array of at least two ingredient objects.\n- Include error handling in the logic to prevent adding an ingredient if either input field is empty."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001613_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h1>Recipe Details</h1>",
                                "v-for",
                                "ingredient-item",
                                "Enter ingredient",
                                "Enter quantity",
                                "Add Ingredient",
                                "Reset Recipe",
                                "ingredients",
                                "counter",
                                "newIngredient",
                                "name",
                                "quantity"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001613_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001613_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed on the page?",
                                "How many ingredients are initially listed?",
                                "What placeholders are visible in the input fields?",
                                "Which labels can be seen on the buttons?",
                                "Which CSS class is applied to each ingredient list item?",
                                "What information is shown for each ingredient in the list?",
                                "Is there a visible counter showing the total number of ingredients?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001613_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Details",
                                "At least 2",
                                "Enter ingredient and Enter quantity",
                                "Add Ingredient and Reset Recipe",
                                "ingredient-item",
                                "Both the ingredient name and its quantity",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movies with their ratings and watch statuses.\n\nFeature Requirements:\n- Render a header with an <h1> element displaying the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, iterating over a predefined data array using v-for.\n- Each <li> must show the movie title in bold followed by its rating in parentheses.\n- Utilize a checkbox next to each movie to toggle its watched status, bound to a property in the data array.\n- Apply a CSS class named \"movie-item\" to each <li> element to enable targeted styling.\n- Incorporate a button labeled \"Reset Watchlist\" that, when clicked, sets all movies’ watched statuses to false.\n- Provide an input field with the placeholder \"Enter new movie title\" positioned above the list.\n- Include an \"Add Movie\" button adjacent to the input field that appends a new movie with a default rating and an initial watched status of false.\n- Maintain a Vue data property that tracks the total number of unwatched movies and updates dynamically.",
            "task_id": "001614",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text shown at the top of the watchlist?",
                "How is each movie title styled in the list?",
                "How is the movie rating displayed next to the title?",
                "What interactive element is present next to each movie for toggling its watched status?",
                "What CSS class is applied to each movie list item?",
                "What is the label on the button that resets all movies’ watched statuses?",
                "What placeholder text appears in the input field above the movie list?",
                "What is the label on the button used to add a new movie?"
            ],
            "VQA_answers": [
                "Movie Watchlist",
                "Bold",
                "In parentheses",
                "Checkbox",
                "movie-item",
                "Reset Watchlist",
                "Enter new movie title",
                "Add Movie"
            ],
            "raw_output_metric": [
                "Movie Watchlist",
                "<h1>",
                "v-for",
                "<ul>",
                "<li",
                "movie-item",
                "checkbox",
                "v-model",
                "Reset Watchlist",
                "Enter new movie title",
                "Add Movie"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001614_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movies with their ratings and watch statuses.\n\nFeature Requirements:\n- Render a header with an <h1> element displaying the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, iterating over a predefined data array using v-for.\n- Each <li> must show the movie title in bold followed by its rating in parentheses.\n- Utilize a checkbox next to each movie to toggle its watched status, bound to a property in the data array.\n- Apply a CSS class named \"movie-item\" to each <li> element to enable targeted styling.\n- Incorporate a button labeled \"Reset Watchlist\" that, when clicked, sets all movies’ watched statuses to false.\n- Provide an input field with the placeholder \"Enter new movie title\" positioned above the list.\n- Include an \"Add Movie\" button adjacent to the input field that appends a new movie with a default rating and an initial watched status of false.\n- Maintain a Vue data property that tracks the total number of unwatched movies and updates dynamically."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001614_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Watchlist",
                                "<h1>",
                                "v-for",
                                "<ul>",
                                "<li",
                                "movie-item",
                                "checkbox",
                                "v-model",
                                "Reset Watchlist",
                                "Enter new movie title",
                                "Add Movie"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001614_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001614_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text shown at the top of the watchlist?",
                                "How is each movie title styled in the list?",
                                "How is the movie rating displayed next to the title?",
                                "What interactive element is present next to each movie for toggling its watched status?",
                                "What CSS class is applied to each movie list item?",
                                "What is the label on the button that resets all movies’ watched statuses?",
                                "What placeholder text appears in the input field above the movie list?",
                                "What is the label on the button used to add a new movie?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001614_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Watchlist",
                                "Bold",
                                "In parentheses",
                                "Checkbox",
                                "movie-item",
                                "Reset Watchlist",
                                "Enter new movie title",
                                "Add Movie"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays session details and timing.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each session as an <li> element within an unordered list (<ul>), where each <li> shows the session title followed by its start time in parentheses.\n- Utilize v-for to iterate over a predefined data array containing session objects with title and time properties.\n- Apply a CSS class named \"session\" to each <li> element to ensure a distinct styling for the session details.\n- Include a checkbox input next to each session item that allows marking a session as attended.\n- Render a button with the text \"Clear Sessions\" that, when clicked, removes all sessions from the list.\n- Provide an <input> element with a placeholder text \"Add new session\" above the list for entering new session titles.\n- Render an \"Add Session\" button adjacent to the input field to append the new session title along with a default start time to the list.\n- Include a data property in the Vue component to track the total number of sessions currently displayed.",
            "task_id": "001615",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top?",
                "How is each session detail displayed?",
                "What CSS class is applied to each session item?",
                "What type of input element is visible next to each session?",
                "What placeholder text is shown in the input field for new sessions?",
                "What is the label on the button that clears all sessions?",
                "What is the label on the button used to add a session?",
                "Is the session list rendered as an unordered list?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "As a list item showing the session title followed by its start time in parentheses",
                "session",
                "A checkbox for marking the session as attended",
                "Add new session",
                "Clear Sessions",
                "Add Session",
                "Yes"
            ],
            "raw_output_metric": [
                "<h2>Event Schedule</h2>",
                "<ul>",
                "<li",
                "v-for",
                "class=\"session\"",
                "input type=\"checkbox\"",
                "Clear Sessions",
                "placeholder=\"Add new session\"",
                "Add Session",
                "sessions",
                "title",
                "time",
                "(",
                ")"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001615_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays session details and timing.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each session as an <li> element within an unordered list (<ul>), where each <li> shows the session title followed by its start time in parentheses.\n- Utilize v-for to iterate over a predefined data array containing session objects with title and time properties.\n- Apply a CSS class named \"session\" to each <li> element to ensure a distinct styling for the session details.\n- Include a checkbox input next to each session item that allows marking a session as attended.\n- Render a button with the text \"Clear Sessions\" that, when clicked, removes all sessions from the list.\n- Provide an <input> element with a placeholder text \"Add new session\" above the list for entering new session titles.\n- Render an \"Add Session\" button adjacent to the input field to append the new session title along with a default start time to the list.\n- Include a data property in the Vue component to track the total number of sessions currently displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001615_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h2>Event Schedule</h2>",
                                "<ul>",
                                "<li",
                                "v-for",
                                "class=\"session\"",
                                "input type=\"checkbox\"",
                                "Clear Sessions",
                                "placeholder=\"Add new session\"",
                                "Add Session",
                                "sessions",
                                "title",
                                "time",
                                "(",
                                ")"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001615_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001615_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top?",
                                "How is each session detail displayed?",
                                "What CSS class is applied to each session item?",
                                "What type of input element is visible next to each session?",
                                "What placeholder text is shown in the input field for new sessions?",
                                "What is the label on the button that clears all sessions?",
                                "What is the label on the button used to add a session?",
                                "Is the session list rendered as an unordered list?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001615_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "As a list item showing the session title followed by its start time in parentheses",
                                "session",
                                "A checkbox for marking the session as attended",
                                "Add new session",
                                "Clear Sessions",
                                "Add Session",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a recipe ingredients list into a Vue component that displays each ingredient with its measure and preparation step.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Ingredients\".\n- Display each ingredient as a <li> element inside a <ul>, where each <li> contains the ingredient name followed by its measure in brackets.\n- Use v-for to iterate over a predefined array of ingredient objects, each having properties for name, measure, and preparation.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Include a paragraph under each <li> displaying the preparation step from the ingredient data.\n- Provide a text input field labeled \"Filter ingredients\" at the top of the component that binds to a data property.\n- Render a button with the text \"Sort A-Z\" that, when clicked, orders the ingredients alphabetically by name.",
            "task_id": "001616",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed inside the header at the top of the component?",
                "How is the measure of each ingredient shown next to the ingredient name?",
                "What label text appears with the text input field at the top?",
                "What text is shown on the button used for ordering the ingredients?",
                "Is there an additional paragraph displayed beneath each ingredient that details the preparation step?",
                "What CSS class is applied to each ingredient list item?",
                "What happens to the ingredient list when the Sort A-Z button is clicked?"
            ],
            "VQA_answers": [
                "Recipe Ingredients",
                "It is displayed in brackets after the ingredient name",
                "Filter ingredients",
                "Sort A-Z",
                "Yes",
                "ingredient-item",
                "The ingredients are ordered alphabetically by name"
            ],
            "raw_output_metric": [
                "Recipe Ingredients",
                "ingredient-item",
                "v-for",
                "Filter ingredients",
                "Sort A-Z",
                "name",
                "measure",
                "preparation",
                "<h2>",
                "<ul>",
                "<li>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001616_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a recipe ingredients list into a Vue component that displays each ingredient with its measure and preparation step.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Ingredients\".\n- Display each ingredient as a <li> element inside a <ul>, where each <li> contains the ingredient name followed by its measure in brackets.\n- Use v-for to iterate over a predefined array of ingredient objects, each having properties for name, measure, and preparation.\n- Apply a CSS class named \"ingredient-item\" to each <li> element.\n- Include a paragraph under each <li> displaying the preparation step from the ingredient data.\n- Provide a text input field labeled \"Filter ingredients\" at the top of the component that binds to a data property.\n- Render a button with the text \"Sort A-Z\" that, when clicked, orders the ingredients alphabetically by name."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001616_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Ingredients",
                                "ingredient-item",
                                "v-for",
                                "Filter ingredients",
                                "Sort A-Z",
                                "name",
                                "measure",
                                "preparation",
                                "<h2>",
                                "<ul>",
                                "<li>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001616_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001616_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed inside the header at the top of the component?",
                                "How is the measure of each ingredient shown next to the ingredient name?",
                                "What label text appears with the text input field at the top?",
                                "What text is shown on the button used for ordering the ingredients?",
                                "Is there an additional paragraph displayed beneath each ingredient that details the preparation step?",
                                "What CSS class is applied to each ingredient list item?",
                                "What happens to the ingredient list when the Sort A-Z button is clicked?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001616_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Ingredients",
                                "It is displayed in brackets after the ingredient name",
                                "Filter ingredients",
                                "Sort A-Z",
                                "Yes",
                                "ingredient-item",
                                "The ingredients are ordered alphabetically by name"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast for a specified city.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Weekly Weather Forecast\".\n- Display each day's forecast as an <li> element within a <ul>, showing the day name, temperature with a degree symbol, and precipitation percentage.\n- Use v-for to iterate over a predefined data array that contains day names, temperatures, and precipitation chances.\n- Apply a CSS class named \"forecast-item\" to each <li> element.\n- Include an <input> element above the list with a placeholder text \"Enter city name\" and bind it to a Vue data property.\n- Render a button with the text \"Update Forecast\" that, when clicked, triggers an update of the weather data based on the entered city name.\n- Display a data-bound value below the forecast list using a <span> element to show the total count of forecast days.\n- Ensure each day's forecast includes clear labels for the temperature and precipitation values.",
            "task_id": "001617",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed on the page?",
                "What placeholder text is shown in the input field above the list?",
                "What text is on the button that updates the forecast?",
                "How many forecast items are expected to be displayed in the list for a weekly forecast?",
                "What information is visibly included in each forecast item?",
                "Where is the total count of forecast days displayed?"
            ],
            "VQA_answers": [
                "Weekly Weather Forecast",
                "Enter city name",
                "Update Forecast",
                "7",
                "Day name, Temperature with a degree symbol, and Precipitation percentage",
                "In a span element below the forecast list"
            ],
            "raw_output_metric": [
                "Weekly Weather Forecast",
                "<h1>",
                "</h1>",
                "<ul>",
                "<li>",
                "</li>",
                "forecast-item",
                "v-for",
                "Enter city name",
                "<input",
                "v-model",
                "Update Forecast",
                "<button",
                "<span>",
                "Temperature:",
                "Precipitation:",
                "°"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001617_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text weather report into a Vue component that displays a weekly forecast for a specified city.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Weekly Weather Forecast\".\n- Display each day's forecast as an <li> element within a <ul>, showing the day name, temperature with a degree symbol, and precipitation percentage.\n- Use v-for to iterate over a predefined data array that contains day names, temperatures, and precipitation chances.\n- Apply a CSS class named \"forecast-item\" to each <li> element.\n- Include an <input> element above the list with a placeholder text \"Enter city name\" and bind it to a Vue data property.\n- Render a button with the text \"Update Forecast\" that, when clicked, triggers an update of the weather data based on the entered city name.\n- Display a data-bound value below the forecast list using a <span> element to show the total count of forecast days.\n- Ensure each day's forecast includes clear labels for the temperature and precipitation values."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001617_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Weather Forecast",
                                "<h1>",
                                "</h1>",
                                "<ul>",
                                "<li>",
                                "</li>",
                                "forecast-item",
                                "v-for",
                                "Enter city name",
                                "<input",
                                "v-model",
                                "Update Forecast",
                                "<button",
                                "<span>",
                                "Temperature:",
                                "Precipitation:",
                                "°"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001617_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001617_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed on the page?",
                                "What placeholder text is shown in the input field above the list?",
                                "What text is on the button that updates the forecast?",
                                "How many forecast items are expected to be displayed in the list for a weekly forecast?",
                                "What information is visibly included in each forecast item?",
                                "Where is the total count of forecast days displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001617_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Weather Forecast",
                                "Enter city name",
                                "Update Forecast",
                                "7",
                                "Day name, Temperature with a degree symbol, and Precipitation percentage",
                                "In a span element below the forecast list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays book details and supports genre filtering.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Library Collection\".\n- Display each book as an <li> element within a <ul> that shows the book title in bold, the author in regular text, and the publication year in parentheses.\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, year, and genre properties.\n- Wrap each <li> element inside a <div> with a CSS class named \"book-item\" for styling.\n- Provide a dropdown (<select> element) above the list with options for genres (e.g., Fiction, Nonfiction, Science) to filter the displayed books.\n- Place an <input> element with the placeholder \"Search by title\" above the book list for text-based filtering.\n- Render a button labeled \"Apply Filters\" next to the input field that, when clicked, filters the list based on the selected genre and search input.\n- Render a separate button labeled \"Reset Filters\" that restores the full list of books.\n- Maintain a data property in the Vue component that tracks the current number of books displayed.",
            "task_id": "001618",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How is the book title styled in each list item?",
                "How are the books organized on the page?",
                "What placeholder text is visible in the search input?",
                "What filtering controls are available above the book list?",
                "Which genre options can be selected from the dropdown?",
                "What visual indicator shows each book's container styling?",
                "Is there an element showing the current number of displayed books?"
            ],
            "VQA_answers": [
                "Library Collection",
                "It is shown in bold.",
                "They are listed as individual items in an unordered list, with each book enclosed in a styled container.",
                "Search by title",
                "A genre dropdown, a search input, an 'Apply Filters' button, and a 'Reset Filters' button",
                "Fiction, Nonfiction, Science",
                "Each book is wrapped inside a container with a specific CSS class ('book-item')",
                "Yes"
            ],
            "raw_output_metric": [
                "Library Collection",
                "v-for",
                "class=\"book-item\"",
                "Fiction",
                "Nonfiction",
                "Science",
                "Search by title",
                "Apply Filters",
                "Reset Filters"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001618_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays book details and supports genre filtering.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Library Collection\".\n- Display each book as an <li> element within a <ul> that shows the book title in bold, the author in regular text, and the publication year in parentheses.\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, year, and genre properties.\n- Wrap each <li> element inside a <div> with a CSS class named \"book-item\" for styling.\n- Provide a dropdown (<select> element) above the list with options for genres (e.g., Fiction, Nonfiction, Science) to filter the displayed books.\n- Place an <input> element with the placeholder \"Search by title\" above the book list for text-based filtering.\n- Render a button labeled \"Apply Filters\" next to the input field that, when clicked, filters the list based on the selected genre and search input.\n- Render a separate button labeled \"Reset Filters\" that restores the full list of books.\n- Maintain a data property in the Vue component that tracks the current number of books displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001618_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Collection",
                                "v-for",
                                "class=\"book-item\"",
                                "Fiction",
                                "Nonfiction",
                                "Science",
                                "Search by title",
                                "Apply Filters",
                                "Reset Filters"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001618_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001618_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How is the book title styled in each list item?",
                                "How are the books organized on the page?",
                                "What placeholder text is visible in the search input?",
                                "What filtering controls are available above the book list?",
                                "Which genre options can be selected from the dropdown?",
                                "What visual indicator shows each book's container styling?",
                                "Is there an element showing the current number of displayed books?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001618_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Collection",
                                "It is shown in bold.",
                                "They are listed as individual items in an unordered list, with each book enclosed in a styled container.",
                                "Search by title",
                                "A genre dropdown, a search input, an 'Apply Filters' button, and a 'Reset Filters' button",
                                "Fiction, Nonfiction, Science",
                                "Each book is wrapped inside a container with a specific CSS class ('book-item')",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text outline of a weekly exercise routine into a Vue component that displays daily workout schedules.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Exercise Routine\".\n- Display each day of the week as a <section> element containing a subheader <h3> with the respective day name.\n- Use a <ul> element within each <section> to list workouts, with each workout rendered as an <li> element using v-for.\n- Each <li> must show the workout name followed by its duration in minutes inside parentheses.\n- Include a button labeled \"Reset Day\" inside each <section> that, when clicked, clears all workouts for that specific day.\n- Position two <input> fields above the workout list in each section: one with the placeholder \"New workout\" and another with the placeholder \"Duration (min)\".\n- Provide an \"Add Workout\" button next to the inputs to append a new workout entry to the day’s schedule.\n- Define a Vue data property to maintain and display the total count of workouts scheduled for the week.",
            "task_id": "001619",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the main header?",
                "How many daily sections are expected to be rendered?",
                "What element type is used for each day’s title?",
                "What two placeholders appear in the input fields in each section?",
                "What is the label on the button that appends a new workout?",
                "What does each workout list item show?",
                "What is the label on the button used to clear workouts for a day?"
            ],
            "VQA_answers": [
                "Weekly Exercise Routine",
                "7",
                "h3",
                "New workout and Duration (min)",
                "Add Workout",
                "Workout name followed by its duration in minutes inside parentheses",
                "Reset Day"
            ],
            "raw_output_metric": [
                "Weekly Exercise Routine",
                "<h2>",
                "<section>",
                "<h3>",
                "<ul>",
                "<li>",
                "v-for",
                "Reset Day",
                "New workout",
                "Duration (min)",
                "Add Workout",
                "data"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001619_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text outline of a weekly exercise routine into a Vue component that displays daily workout schedules.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Weekly Exercise Routine\".\n- Display each day of the week as a <section> element containing a subheader <h3> with the respective day name.\n- Use a <ul> element within each <section> to list workouts, with each workout rendered as an <li> element using v-for.\n- Each <li> must show the workout name followed by its duration in minutes inside parentheses.\n- Include a button labeled \"Reset Day\" inside each <section> that, when clicked, clears all workouts for that specific day.\n- Position two <input> fields above the workout list in each section: one with the placeholder \"New workout\" and another with the placeholder \"Duration (min)\".\n- Provide an \"Add Workout\" button next to the inputs to append a new workout entry to the day’s schedule.\n- Define a Vue data property to maintain and display the total count of workouts scheduled for the week."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001619_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Exercise Routine",
                                "<h2>",
                                "<section>",
                                "<h3>",
                                "<ul>",
                                "<li>",
                                "v-for",
                                "Reset Day",
                                "New workout",
                                "Duration (min)",
                                "Add Workout",
                                "data"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001619_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001619_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the main header?",
                                "How many daily sections are expected to be rendered?",
                                "What element type is used for each day’s title?",
                                "What two placeholders appear in the input fields in each section?",
                                "What is the label on the button that appends a new workout?",
                                "What does each workout list item show?",
                                "What is the label on the button used to clear workouts for a day?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001619_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Exercise Routine",
                                "7",
                                "h3",
                                "New workout and Duration (min)",
                                "Add Workout",
                                "Workout name followed by its duration in minutes inside parentheses",
                                "Reset Day"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text daily workout routine into a Vue component that displays an exercise schedule.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Workout Routine\".\n- Display each exercise as an <li> element within an ordered list (<ol>).\n- Each <li> should show the exercise name followed by its duration in minutes, separated by a hyphen.\n- Utilize v-for to iterate over an array of exercise objects stored in the component's data.\n- Apply a CSS class named \"exercise-item\" to each <li> element.\n- Render a paragraph below the list showing the total workout duration calculated from the exercises.\n- Place an <input> element above the list with a placeholder text \"Add new exercise\".\n- Provide an \"Add Exercise\" button next to the input field to append a new exercise to the list.\n- Include a data property for tracking the number of exercises currently in the workout routine.",
            "task_id": "001620",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title text displayed at the top of the component?",
                "What type of list element is used to display the exercises?",
                "How is each exercise formatted in the list?",
                "What CSS class is applied to each exercise item?",
                "What placeholder text appears in the input field above the list?",
                "What is the label on the button next to the input field?",
                "What content is displayed below the exercise list?"
            ],
            "VQA_answers": [
                "Daily Workout Routine",
                "Ordered list",
                "Exercise name followed by its duration in minutes, separated by a hyphen",
                "exercise-item",
                "Add new exercise",
                "Add Exercise",
                "A paragraph showing the total workout duration"
            ],
            "raw_output_metric": [
                "Daily Workout Routine",
                "<h2>",
                "<ol>",
                "<li",
                "exercise-item",
                "v-for",
                "<input",
                "placeholder=\"Add new exercise\"",
                "Add Exercise",
                "<p>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001620_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text daily workout routine into a Vue component that displays an exercise schedule.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Workout Routine\".\n- Display each exercise as an <li> element within an ordered list (<ol>).\n- Each <li> should show the exercise name followed by its duration in minutes, separated by a hyphen.\n- Utilize v-for to iterate over an array of exercise objects stored in the component's data.\n- Apply a CSS class named \"exercise-item\" to each <li> element.\n- Render a paragraph below the list showing the total workout duration calculated from the exercises.\n- Place an <input> element above the list with a placeholder text \"Add new exercise\".\n- Provide an \"Add Exercise\" button next to the input field to append a new exercise to the list.\n- Include a data property for tracking the number of exercises currently in the workout routine."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001620_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Workout Routine",
                                "<h2>",
                                "<ol>",
                                "<li",
                                "exercise-item",
                                "v-for",
                                "<input",
                                "placeholder=\"Add new exercise\"",
                                "Add Exercise",
                                "<p>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001620_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001620_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title text displayed at the top of the component?",
                                "What type of list element is used to display the exercises?",
                                "How is each exercise formatted in the list?",
                                "What CSS class is applied to each exercise item?",
                                "What placeholder text appears in the input field above the list?",
                                "What is the label on the button next to the input field?",
                                "What content is displayed below the exercise list?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001620_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Workout Routine",
                                "Ordered list",
                                "Exercise name followed by its duration in minutes, separated by a hyphen",
                                "exercise-item",
                                "Add new exercise",
                                "Add Exercise",
                                "A paragraph showing the total workout duration"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of favorite quotes and their authors into a Vue component that displays the quotes with filtering capabilities.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Favorite Quotes\".\n- Utilize v-for to iterate over an array of quote objects, where each object contains the quote text and the author's name.\n- Display each quote inside a <blockquote> element and show the author's name in a <footer> element directly beneath it.\n- Place an <input> element above the quotes list with a placeholder labeled \"Search by author\" to allow filtering.\n- Render a button next to the input with the label \"Filter\" that initiates the filtering process.\n- Provide a \"Reset\" button that, when clicked, restores the original list of quotes and clears the search filter.\n- Apply a CSS class named \"quote-item\" to each <blockquote> element to allow targeted styling.\n- Include a computed property that dynamically tracks and displays the number of quotes currently shown.\n- Incorporate a conditional section that displays the text \"No matches found\" if the filter yields no results.\n- Define an initial data property that holds the complete list of quotes along with their associated authors.",
            "task_id": "001621",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the page header?",
                "What placeholder is shown in the search input box?",
                "What is the label on the button used to filter quotes?",
                "What label is on the button used to reset the quote list?",
                "How is each quote displayed in the component?",
                "What text appears when no quotes match the filter?",
                "How is the dynamic count of displayed quotes provided?",
                "Which element is used to render the page header?"
            ],
            "VQA_answers": [
                "Favorite Quotes",
                "Search by author",
                "Filter",
                "Reset",
                "Inside a blockquote element with a CSS class 'quote-item' and a footer for the author",
                "No matches found",
                "By a computed property tracking the number of visible quotes",
                "An h2 element"
            ],
            "raw_output_metric": [
                "Favorite Quotes",
                "v-for",
                "<blockquote",
                "quote-item",
                "<footer",
                "input",
                "Search by author",
                "button",
                "Filter",
                "Reset",
                "No matches found",
                "computed",
                "data",
                "quotes"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001621_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of favorite quotes and their authors into a Vue component that displays the quotes with filtering capabilities.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Favorite Quotes\".\n- Utilize v-for to iterate over an array of quote objects, where each object contains the quote text and the author's name.\n- Display each quote inside a <blockquote> element and show the author's name in a <footer> element directly beneath it.\n- Place an <input> element above the quotes list with a placeholder labeled \"Search by author\" to allow filtering.\n- Render a button next to the input with the label \"Filter\" that initiates the filtering process.\n- Provide a \"Reset\" button that, when clicked, restores the original list of quotes and clears the search filter.\n- Apply a CSS class named \"quote-item\" to each <blockquote> element to allow targeted styling.\n- Include a computed property that dynamically tracks and displays the number of quotes currently shown.\n- Incorporate a conditional section that displays the text \"No matches found\" if the filter yields no results.\n- Define an initial data property that holds the complete list of quotes along with their associated authors."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001621_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Favorite Quotes",
                                "v-for",
                                "<blockquote",
                                "quote-item",
                                "<footer",
                                "input",
                                "Search by author",
                                "button",
                                "Filter",
                                "Reset",
                                "No matches found",
                                "computed",
                                "data",
                                "quotes"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001621_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001621_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the page header?",
                                "What placeholder is shown in the search input box?",
                                "What is the label on the button used to filter quotes?",
                                "What label is on the button used to reset the quote list?",
                                "How is each quote displayed in the component?",
                                "What text appears when no quotes match the filter?",
                                "How is the dynamic count of displayed quotes provided?",
                                "Which element is used to render the page header?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001621_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Favorite Quotes",
                                "Search by author",
                                "Filter",
                                "Reset",
                                "Inside a blockquote element with a CSS class 'quote-item' and a footer for the author",
                                "No matches found",
                                "By a computed property tracking the number of visible quotes",
                                "An h2 element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of book titles and authors into a Vue component that displays a library catalog.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Library Catalog\".\n- Display each book entry as an <li> element within a <ul>, where the book title is followed by the author in square brackets.\n- Use a v-for directive to iterate over a predefined data array containing book objects with 'title' and 'author' properties.\n- Apply a CSS class named \"book-item\" to each <li> element for styling.\n- Render two <input> elements, one with the placeholder \"New Book Title\" and another with the placeholder \"Author Name\", placed above the catalog list.\n- Include an \"Add Book\" button next to the inputs that, when clicked, validates the inputs and appends a new book to the list.\n- Display a separate section that shows the total count of books currently in the catalog, using a dedicated data property.\n- Ensure that an error message becomes visible if either input field is empty when the \"Add Book\" button is pressed.",
            "task_id": "001622",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main header text displayed at the top of the page?",
                "How are individual book entries displayed in the list?",
                "Which CSS class is assigned to each book list item?",
                "What are the placeholders for the two input fields?",
                "What button is shown next to the input fields?",
                "Is there a visible section showing the total count of books in the catalog?",
                "What visual feedback is given if the input fields are empty when the Add Book button is pressed?"
            ],
            "VQA_answers": [
                "Library Catalog",
                "Each entry shows the book title followed by the author in square brackets.",
                "book-item",
                "New Book Title and Author Name",
                "Add Book",
                "Yes",
                "An error message is displayed"
            ],
            "raw_output_metric": [
                "Library Catalog",
                "v-for",
                "book-item",
                "New Book Title",
                "Author Name",
                "Add Book",
                "title",
                "author"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001622_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of book titles and authors into a Vue component that displays a library catalog.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Library Catalog\".\n- Display each book entry as an <li> element within a <ul>, where the book title is followed by the author in square brackets.\n- Use a v-for directive to iterate over a predefined data array containing book objects with 'title' and 'author' properties.\n- Apply a CSS class named \"book-item\" to each <li> element for styling.\n- Render two <input> elements, one with the placeholder \"New Book Title\" and another with the placeholder \"Author Name\", placed above the catalog list.\n- Include an \"Add Book\" button next to the inputs that, when clicked, validates the inputs and appends a new book to the list.\n- Display a separate section that shows the total count of books currently in the catalog, using a dedicated data property.\n- Ensure that an error message becomes visible if either input field is empty when the \"Add Book\" button is pressed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001622_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Catalog",
                                "v-for",
                                "book-item",
                                "New Book Title",
                                "Author Name",
                                "Add Book",
                                "title",
                                "author"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001622_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001622_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top of the page?",
                                "How are individual book entries displayed in the list?",
                                "Which CSS class is assigned to each book list item?",
                                "What are the placeholders for the two input fields?",
                                "What button is shown next to the input fields?",
                                "Is there a visible section showing the total count of books in the catalog?",
                                "What visual feedback is given if the input fields are empty when the Add Book button is pressed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001622_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Catalog",
                                "Each entry shows the book title followed by the author in square brackets.",
                                "book-item",
                                "New Book Title and Author Name",
                                "Add Book",
                                "Yes",
                                "An error message is displayed"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of movie showtimes into a Vue component that displays movie titles, showtimes, and theater hall numbers.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Schedule\".\n- Display each movie as an <li> element within a <ul>, showing the movie title, showtime, and hall number.\n- Use v-for to iterate over a predefined array of movie objects that include properties for title, time, and hall.\n- Add a CSS class named \"movie-item\" to every <li> element.\n- Provide an <input> element above the list with a placeholder \"Enter movie title\".\n- Include a <select> element with three predefined options representing theater halls, positioned next to the input.\n- Render a button with the text \"Add Movie\" that, when clicked, appends a new movie from the input and the selected hall.\n- Display a dynamic count of movies displayed using a data property in a dedicated <p> element below the list.\n- Render a button with the text \"Clear Schedule\" that, when clicked, removes all entries from the movie list.\n- Show an error message in a <p> element with the text \"Please provide a movie title\" if trying to add a movie without a title.",
            "task_id": "001623",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the header of the page?",
                "What placeholder text is shown in the input element?",
                "How many options are provided in the theater hall select element?",
                "What is the label on the button used to add a movie?",
                "What CSS class is assigned to every movie list item?",
                "What are the three pieces of movie information shown in each list item?",
                "What is the error message displayed when trying to add a movie without a title?",
                "What is the label on the button that clears all movie entries?",
                "Where is the dynamic movie count displayed?"
            ],
            "VQA_answers": [
                "Movie Schedule",
                "Enter movie title",
                "3",
                "Add Movie",
                "movie-item",
                "movie title, showtime, and hall number",
                "Please provide a movie title",
                "Clear Schedule",
                "In a paragraph element below the movie list"
            ],
            "raw_output_metric": [
                "Movie Schedule",
                "movie-item",
                "Enter movie title",
                "Add Movie",
                "Clear Schedule",
                "Please provide a movie title",
                "v-for"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001623_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of movie showtimes into a Vue component that displays movie titles, showtimes, and theater hall numbers.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Schedule\".\n- Display each movie as an <li> element within a <ul>, showing the movie title, showtime, and hall number.\n- Use v-for to iterate over a predefined array of movie objects that include properties for title, time, and hall.\n- Add a CSS class named \"movie-item\" to every <li> element.\n- Provide an <input> element above the list with a placeholder \"Enter movie title\".\n- Include a <select> element with three predefined options representing theater halls, positioned next to the input.\n- Render a button with the text \"Add Movie\" that, when clicked, appends a new movie from the input and the selected hall.\n- Display a dynamic count of movies displayed using a data property in a dedicated <p> element below the list.\n- Render a button with the text \"Clear Schedule\" that, when clicked, removes all entries from the movie list.\n- Show an error message in a <p> element with the text \"Please provide a movie title\" if trying to add a movie without a title."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001623_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Schedule",
                                "movie-item",
                                "Enter movie title",
                                "Add Movie",
                                "Clear Schedule",
                                "Please provide a movie title",
                                "v-for"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001623_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001623_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header of the page?",
                                "What placeholder text is shown in the input element?",
                                "How many options are provided in the theater hall select element?",
                                "What is the label on the button used to add a movie?",
                                "What CSS class is assigned to every movie list item?",
                                "What are the three pieces of movie information shown in each list item?",
                                "What is the error message displayed when trying to add a movie without a title?",
                                "What is the label on the button that clears all movie entries?",
                                "Where is the dynamic movie count displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001623_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Schedule",
                                "Enter movie title",
                                "3",
                                "Add Movie",
                                "movie-item",
                                "movie title, showtime, and hall number",
                                "Please provide a movie title",
                                "Clear Schedule",
                                "In a paragraph element below the movie list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nDesign a Vue component that serves as a personal reading list manager where users can add book titles, mark them as read, and filter the list based on their reading status.\n\nFeature Requirements:\n- Render a main title using an <h2> element with the text \"My Reading List\" at the top of the component.\n- Use a <ul> element to display each book title within an <li> element, generated via v-for from a predefined book array.\n- Next to each book title, include a checkbox to mark the book as read, updating its state in the component's data.\n- Place an <input> element with the placeholder \"Enter book title\" above the list for users to add new books.\n- Render a button labeled \"Add Book\" immediately adjacent to the input field to append a new book to the list when clicked.\n- Include two additional buttons below the list labeled \"Show Read\" and \"Show Unread\" to filter the displayed items accordingly.\n- Apply a CSS class named \"completed\" to <li> elements that represent books marked as read.\n- Maintain a data property to track and display the total number of books currently in the list.",
            "task_id": "001624",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title text displayed at the top of the component?",
                "What text is shown as the input placeholder for adding a new book?",
                "What label is on the button next to the input field?",
                "What are the labels of the two filter buttons displayed below the book list?",
                "What element is used to display the list of books?",
                "How is a book visually marked as read?",
                "How can the total number of books be identified?"
            ],
            "VQA_answers": [
                "My Reading List",
                "Enter book title",
                "Add Book",
                "Show Read and Show Unread",
                "An unordered list with list items generated from the book array",
                "A checkbox is checked and a CSS class named 'completed' is applied to its list item",
                "It is displayed as a text count showing the current number in the reading list"
            ],
            "raw_output_metric": [
                "My Reading List",
                "Enter book title",
                "Add Book",
                "Show Read",
                "Show Unread",
                "completed",
                "v-for",
                "<h2>",
                "<ul>",
                "<li>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001624_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nDesign a Vue component that serves as a personal reading list manager where users can add book titles, mark them as read, and filter the list based on their reading status.\n\nFeature Requirements:\n- Render a main title using an <h2> element with the text \"My Reading List\" at the top of the component.\n- Use a <ul> element to display each book title within an <li> element, generated via v-for from a predefined book array.\n- Next to each book title, include a checkbox to mark the book as read, updating its state in the component's data.\n- Place an <input> element with the placeholder \"Enter book title\" above the list for users to add new books.\n- Render a button labeled \"Add Book\" immediately adjacent to the input field to append a new book to the list when clicked.\n- Include two additional buttons below the list labeled \"Show Read\" and \"Show Unread\" to filter the displayed items accordingly.\n- Apply a CSS class named \"completed\" to <li> elements that represent books marked as read.\n- Maintain a data property to track and display the total number of books currently in the list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001624_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "My Reading List",
                                "Enter book title",
                                "Add Book",
                                "Show Read",
                                "Show Unread",
                                "completed",
                                "v-for",
                                "<h2>",
                                "<ul>",
                                "<li>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001624_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001624_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title text displayed at the top of the component?",
                                "What text is shown as the input placeholder for adding a new book?",
                                "What label is on the button next to the input field?",
                                "What are the labels of the two filter buttons displayed below the book list?",
                                "What element is used to display the list of books?",
                                "How is a book visually marked as read?",
                                "How can the total number of books be identified?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001624_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "My Reading List",
                                "Enter book title",
                                "Add Book",
                                "Show Read and Show Unread",
                                "An unordered list with list items generated from the book array",
                                "A checkbox is checked and a CSS class named 'completed' is applied to its list item",
                                "It is displayed as a text count showing the current number in the reading list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe along with its ingredients and preparation steps.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Collection\".\n- Display each recipe name in an <h3> element.\n- For each recipe, list the ingredients inside a <ul> element with each ingredient in an <li> element.\n- Use a v-for directive to iterate over an array of recipe objects defined in the component’s data.\n- Show the preparation steps for each recipe inside an ordered list (<ol>), with each step as an <li> element.\n- Include an input field above the recipe list with a placeholder text \"Enter new recipe\" for adding additional recipes.\n- Provide an \"Add Recipe\" button next to the input that appends the new recipe to the array.\n- Render a \"Reset Recipes\" button that, when clicked, restores the recipe list to its original state.\n- Apply a CSS class named \"recipe-item\" to each recipe container for clear segmentation.\n- Include a data property in the Vue component that keeps track of the total number of recipes currently displayed.",
            "task_id": "001625",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main header text displayed at the top of the page?",
                "What placeholder text is visible in the input field above the recipe list?",
                "What text is shown on the button next to the input for adding a new recipe?",
                "What text is shown on the button that restores the original recipe list?",
                "How are recipe names visually displayed?",
                "In what format are the ingredients for each recipe listed?",
                "How are the preparation steps for each recipe presented?"
            ],
            "VQA_answers": [
                "Recipe Collection",
                "Enter new recipe",
                "Add Recipe",
                "Reset Recipes",
                "They are shown as sub-headers (prominent headings) for each recipe",
                "They are listed in a bullet-point (unordered) list",
                "They are displayed in a numbered (ordered) list"
            ],
            "raw_output_metric": [
                "Recipe Collection",
                "<h2>",
                "<h3>",
                "v-for",
                "<ul>",
                "<li>",
                "<ol>",
                "Enter new recipe",
                "Add Recipe",
                "Reset Recipes",
                "recipe-item",
                "data",
                "totalRecipes"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001625_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of recipes into a Vue component that displays each recipe along with its ingredients and preparation steps.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Recipe Collection\".\n- Display each recipe name in an <h3> element.\n- For each recipe, list the ingredients inside a <ul> element with each ingredient in an <li> element.\n- Use a v-for directive to iterate over an array of recipe objects defined in the component’s data.\n- Show the preparation steps for each recipe inside an ordered list (<ol>), with each step as an <li> element.\n- Include an input field above the recipe list with a placeholder text \"Enter new recipe\" for adding additional recipes.\n- Provide an \"Add Recipe\" button next to the input that appends the new recipe to the array.\n- Render a \"Reset Recipes\" button that, when clicked, restores the recipe list to its original state.\n- Apply a CSS class named \"recipe-item\" to each recipe container for clear segmentation.\n- Include a data property in the Vue component that keeps track of the total number of recipes currently displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001625_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Collection",
                                "<h2>",
                                "<h3>",
                                "v-for",
                                "<ul>",
                                "<li>",
                                "<ol>",
                                "Enter new recipe",
                                "Add Recipe",
                                "Reset Recipes",
                                "recipe-item",
                                "data",
                                "totalRecipes"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001625_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001625_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top of the page?",
                                "What placeholder text is visible in the input field above the recipe list?",
                                "What text is shown on the button next to the input for adding a new recipe?",
                                "What text is shown on the button that restores the original recipe list?",
                                "How are recipe names visually displayed?",
                                "In what format are the ingredients for each recipe listed?",
                                "How are the preparation steps for each recipe presented?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001625_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Collection",
                                "Enter new recipe",
                                "Add Recipe",
                                "Reset Recipes",
                                "They are shown as sub-headers (prominent headings) for each recipe",
                                "They are listed in a bullet-point (unordered) list",
                                "They are displayed in a numbered (ordered) list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text movie list into a Vue component that displays movie titles and ratings in a table format.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Catalog\".\n- Display the movie list in a table where each row represents a movie.\n- Use v-for to iterate over a predefined data array of movies to generate each table row.\n- Each table row should have three cells: one for the index number, one for the movie title, and one for the movie rating.\n- Apply a CSS class named \"movie-row\" to each table row for consistent styling.\n- Display an <input> element with the placeholder \"Filter by rating\" above the table to allow users to filter movies by their rating.\n- Include a \"Reset Filters\" button that, when clicked, reverts any applied filters and displays all movies.\n- Provide a data property that tracks and displays the total number of movies currently visible in the component.",
            "task_id": "001626",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the header at the top?",
                "What placeholder text is shown in the input field above the table?",
                "What text is displayed on the button provided for filters?",
                "How many columns are displayed in each movie row of the table?",
                "What information is shown in each row of the movie table?",
                "What CSS class is applied to each row in the movie table?",
                "What user interface element is used to filter the movies?",
                "Which data property is displayed to show how many movies are currently visible?"
            ],
            "VQA_answers": [
                "Movie Catalog",
                "Filter by rating",
                "Reset Filters",
                "3",
                "Index number, movie title, and movie rating",
                "movie-row",
                "An input field with the placeholder 'Filter by rating'",
                "The total number of movies"
            ],
            "raw_output_metric": [
                "Movie Catalog",
                "movie-row",
                "Filter by rating",
                "Reset Filters",
                "v-for"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001626_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text movie list into a Vue component that displays movie titles and ratings in a table format.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Movie Catalog\".\n- Display the movie list in a table where each row represents a movie.\n- Use v-for to iterate over a predefined data array of movies to generate each table row.\n- Each table row should have three cells: one for the index number, one for the movie title, and one for the movie rating.\n- Apply a CSS class named \"movie-row\" to each table row for consistent styling.\n- Display an <input> element with the placeholder \"Filter by rating\" above the table to allow users to filter movies by their rating.\n- Include a \"Reset Filters\" button that, when clicked, reverts any applied filters and displays all movies.\n- Provide a data property that tracks and displays the total number of movies currently visible in the component."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001626_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Catalog",
                                "movie-row",
                                "Filter by rating",
                                "Reset Filters",
                                "v-for"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001626_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001626_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header at the top?",
                                "What placeholder text is shown in the input field above the table?",
                                "What text is displayed on the button provided for filters?",
                                "How many columns are displayed in each movie row of the table?",
                                "What information is shown in each row of the movie table?",
                                "What CSS class is applied to each row in the movie table?",
                                "What user interface element is used to filter the movies?",
                                "Which data property is displayed to show how many movies are currently visible?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001626_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Catalog",
                                "Filter by rating",
                                "Reset Filters",
                                "3",
                                "Index number, movie title, and movie rating",
                                "movie-row",
                                "An input field with the placeholder 'Filter by rating'",
                                "The total number of movies"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of upcoming events into a Vue component that displays an interactive event schedule.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, iterating over a predefined data array with v-for.\n- Each <li> should show the event name followed by the event date in the format \"Event Name - YYYY-MM-DD\".\n- Apply a CSS class named \"event-item\" to each <li> element for specific styling.\n- Render a button with the text \"Remove Past Events\" that removes all events with dates earlier than today when clicked.\n- Place an <input> element with a placeholder \"New Event Name\" and a second <input> with a placeholder \"YYYY-MM-DD\" above the list.\n- Provide an \"Add Event\" button next to the input fields to append new events to the schedule.\n- Include a data property to track and display the total number of upcoming events.\n- Use v-if to conditionally display a message \"No events scheduled\" when the events array is empty.",
            "task_id": "001627",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What text is shown on the button that clears events with past dates?",
                "How many input fields are visible above the event list?",
                "What placeholder text does the first input field display?",
                "What placeholder text does the second input field display?",
                "How is each event formatted in the list?",
                "What CSS class is applied to each event item in the list?",
                "What message is displayed when there are no events scheduled?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "Remove Past Events",
                "2",
                "New Event Name",
                "YYYY-MM-DD",
                "Event Name - YYYY-MM-DD",
                "event-item",
                "No events scheduled"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "<h1>",
                "<ul>",
                "<li>",
                "v-for",
                "event-item",
                "Remove Past Events",
                "New Event Name",
                "YYYY-MM-DD",
                "Add Event",
                "No events scheduled",
                "v-if"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001627_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of upcoming events into a Vue component that displays an interactive event schedule.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul>, iterating over a predefined data array with v-for.\n- Each <li> should show the event name followed by the event date in the format \"Event Name - YYYY-MM-DD\".\n- Apply a CSS class named \"event-item\" to each <li> element for specific styling.\n- Render a button with the text \"Remove Past Events\" that removes all events with dates earlier than today when clicked.\n- Place an <input> element with a placeholder \"New Event Name\" and a second <input> with a placeholder \"YYYY-MM-DD\" above the list.\n- Provide an \"Add Event\" button next to the input fields to append new events to the schedule.\n- Include a data property to track and display the total number of upcoming events.\n- Use v-if to conditionally display a message \"No events scheduled\" when the events array is empty."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001627_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "<h1>",
                                "<ul>",
                                "<li>",
                                "v-for",
                                "event-item",
                                "Remove Past Events",
                                "New Event Name",
                                "YYYY-MM-DD",
                                "Add Event",
                                "No events scheduled",
                                "v-if"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001627_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001627_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What text is shown on the button that clears events with past dates?",
                                "How many input fields are visible above the event list?",
                                "What placeholder text does the first input field display?",
                                "What placeholder text does the second input field display?",
                                "How is each event formatted in the list?",
                                "What CSS class is applied to each event item in the list?",
                                "What message is displayed when there are no events scheduled?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001627_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "Remove Past Events",
                                "2",
                                "New Event Name",
                                "YYYY-MM-DD",
                                "Event Name - YYYY-MM-DD",
                                "event-item",
                                "No events scheduled"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays events with their corresponding times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\" at the top of the component.\n- Utilize a data property that holds an array of event objects, where each object contains an event name and a specific time.\n- Display the events in a table where each row represents an event; use a v-for directive to iterate over the events array.\n- In each table row, display the event name in the first cell with a CSS class called \"event-name\" and the event time in the second cell with a CSS class called \"event-time\".\n- Place two <input> elements above the table; one input should have a placeholder \"Event Name\" and the other \"Event Time\" to allow users to add new events.\n- Render a button labeled \"Add Event\" next to the inputs that, when clicked, appends the new event from the inputs to the events array.\n- Include a \"Delete Event\" button within each table row that, when clicked, removes that specific event from the schedule.\n- Provide a computed property that calculates and displays the total number of events currently in the schedule.\n- Position a footer <p> element at the bottom of the component that displays the text \"Total Events:\" followed by the computed total.",
            "task_id": "001628",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the component?",
                "How many input fields are shown above the table?",
                "What placeholder text appears in the first input field?",
                "What placeholder text appears in the second input field?",
                "What is the label on the button next to the input fields?",
                "What text is displayed in each table row to remove an event?",
                "What CSS class is used for the table cell showing the event name?",
                "What CSS class is used for the table cell showing the event time?",
                "What text is visible in the footer indicating the total number of events?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "2",
                "Event Name",
                "Event Time",
                "Add Event",
                "Delete Event",
                "event-name",
                "event-time",
                "Total Events:"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "Event Name",
                "Event Time",
                "Add Event",
                "Delete Event",
                "event-name",
                "event-time",
                "Total Events:",
                "v-for",
                "computed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001628_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays events with their corresponding times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\" at the top of the component.\n- Utilize a data property that holds an array of event objects, where each object contains an event name and a specific time.\n- Display the events in a table where each row represents an event; use a v-for directive to iterate over the events array.\n- In each table row, display the event name in the first cell with a CSS class called \"event-name\" and the event time in the second cell with a CSS class called \"event-time\".\n- Place two <input> elements above the table; one input should have a placeholder \"Event Name\" and the other \"Event Time\" to allow users to add new events.\n- Render a button labeled \"Add Event\" next to the inputs that, when clicked, appends the new event from the inputs to the events array.\n- Include a \"Delete Event\" button within each table row that, when clicked, removes that specific event from the schedule.\n- Provide a computed property that calculates and displays the total number of events currently in the schedule.\n- Position a footer <p> element at the bottom of the component that displays the text \"Total Events:\" followed by the computed total."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001628_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "Event Name",
                                "Event Time",
                                "Add Event",
                                "Delete Event",
                                "event-name",
                                "event-time",
                                "Total Events:",
                                "v-for",
                                "computed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001628_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001628_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the component?",
                                "How many input fields are shown above the table?",
                                "What placeholder text appears in the first input field?",
                                "What placeholder text appears in the second input field?",
                                "What is the label on the button next to the input fields?",
                                "What text is displayed in each table row to remove an event?",
                                "What CSS class is used for the table cell showing the event name?",
                                "What CSS class is used for the table cell showing the event time?",
                                "What text is visible in the footer indicating the total number of events?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001628_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "2",
                                "Event Name",
                                "Event Time",
                                "Add Event",
                                "Delete Event",
                                "event-name",
                                "event-time",
                                "Total Events:"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that displays each task along with its completion status.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Task Manager\".\n- Display each task as an <li> element contained within a <ul> element.\n- Each <li> should show the task description in plain text and, if the task is completed, append the text \" (Done)\".\n- Utilize v-for to iterate over a predefined data array of task objects containing a \"description\" and a \"completed\" boolean.\n- Apply a CSS class named \"task-item\" to each <li> element to enable styling.\n- Include a checkbox next to each task that toggles its completed status when clicked.\n- Render a button with the text \"Remove Completed\" that, when clicked, filters out all tasks marked as completed.\n- Provide an <input> element with the placeholder \"Enter new task\" above the list, accompanied by an \"Add Task\" button to allow the addition of new tasks.\n- Include a data property in the Vue component to track and display the total number of tasks currently in the list.",
            "task_id": "001629",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the page?",
                "How are tasks visually listed on the page?",
                "What text is appended to a task’s description when it is completed?",
                "What placeholder text is shown in the input for adding a new task?",
                "What label is shown on the button that removes completed tasks?",
                "What UI element is placed next to each task to allow toggling its completed status?",
                "What is the CSS class applied to each task item?",
                "How is the total number of tasks displayed?",
                "What label is used on the button for adding a new task?"
            ],
            "VQA_answers": [
                "Task Manager",
                "Each task appears as a bullet point in an unordered list.",
                "(Done)",
                "Enter new task",
                "Remove Completed",
                "Checkbox",
                "task-item",
                "It is shown using a data property on the page.",
                "Add Task"
            ],
            "raw_output_metric": [
                "Task Manager",
                "<h1>",
                "<ul>",
                "<li>",
                " (Done)",
                "v-for",
                "task-item",
                "Remove Completed",
                "Enter new task",
                "Add Task",
                "description",
                "completed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001629_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that displays each task along with its completion status.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Task Manager\".\n- Display each task as an <li> element contained within a <ul> element.\n- Each <li> should show the task description in plain text and, if the task is completed, append the text \" (Done)\".\n- Utilize v-for to iterate over a predefined data array of task objects containing a \"description\" and a \"completed\" boolean.\n- Apply a CSS class named \"task-item\" to each <li> element to enable styling.\n- Include a checkbox next to each task that toggles its completed status when clicked.\n- Render a button with the text \"Remove Completed\" that, when clicked, filters out all tasks marked as completed.\n- Provide an <input> element with the placeholder \"Enter new task\" above the list, accompanied by an \"Add Task\" button to allow the addition of new tasks.\n- Include a data property in the Vue component to track and display the total number of tasks currently in the list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001629_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "<h1>",
                                "<ul>",
                                "<li>",
                                " (Done)",
                                "v-for",
                                "task-item",
                                "Remove Completed",
                                "Enter new task",
                                "Add Task",
                                "description",
                                "completed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001629_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001629_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the page?",
                                "How are tasks visually listed on the page?",
                                "What text is appended to a task’s description when it is completed?",
                                "What placeholder text is shown in the input for adding a new task?",
                                "What label is shown on the button that removes completed tasks?",
                                "What UI element is placed next to each task to allow toggling its completed status?",
                                "What is the CSS class applied to each task item?",
                                "How is the total number of tasks displayed?",
                                "What label is used on the button for adding a new task?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001629_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "Each task appears as a bullet point in an unordered list.",
                                "(Done)",
                                "Enter new task",
                                "Remove Completed",
                                "Checkbox",
                                "task-item",
                                "It is shown using a data property on the page.",
                                "Add Task"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of podcast episodes into a Vue component that displays each episode with search and load functionality.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Podcast Episodes\".\n- Display each podcast episode inside a <div> element that utilizes a CSS class called \"episode-card\".\n- Within each \"episode-card\", include an <h3> element for the episode title, a <p> element for the episode description, and a <span> element for the published date.\n- Use v-for to iterate through a predefined data array named \"episodes\", where each element is an object containing title, description, and date fields.\n- Place an <input> element with a placeholder \"Search episodes\" above the episode list to allow filtering of episodes.\n- Include a button labeled \"Load More\" positioned below the episode list that, when clicked, adds additional episodes to the array.\n- Define a data property in the Vue component that tracks the current total number of episodes displayed.\n- Include a computed property that filters the episodes based on the text input from the search field.",
            "task_id": "001630",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "What placeholder text appears in the search input field?",
                "What text is visible on the button below the list of episodes?",
                "What CSS class is applied to each episode card?",
                "What three pieces of information are displayed inside each episode card?",
                "What mechanism is used to iterate over the episodes for display?",
                "What data property is used to track the current total number of episodes displayed?"
            ],
            "VQA_answers": [
                "Podcast Episodes",
                "Search episodes",
                "Load More",
                "episode-card",
                "Episode title, episode description, and published date",
                "v-for is used to iterate through the episodes array",
                "A data property that tracks the current total number of episodes"
            ],
            "raw_output_metric": [
                "Podcast Episodes",
                "episode-card",
                "Search episodes",
                "Load More",
                "v-for",
                "episodes",
                "<h2>",
                "<h3>",
                "<p>",
                "<span>"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001630_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of podcast episodes into a Vue component that displays each episode with search and load functionality.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Podcast Episodes\".\n- Display each podcast episode inside a <div> element that utilizes a CSS class called \"episode-card\".\n- Within each \"episode-card\", include an <h3> element for the episode title, a <p> element for the episode description, and a <span> element for the published date.\n- Use v-for to iterate through a predefined data array named \"episodes\", where each element is an object containing title, description, and date fields.\n- Place an <input> element with a placeholder \"Search episodes\" above the episode list to allow filtering of episodes.\n- Include a button labeled \"Load More\" positioned below the episode list that, when clicked, adds additional episodes to the array.\n- Define a data property in the Vue component that tracks the current total number of episodes displayed.\n- Include a computed property that filters the episodes based on the text input from the search field."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001630_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Podcast Episodes",
                                "episode-card",
                                "Search episodes",
                                "Load More",
                                "v-for",
                                "episodes",
                                "<h2>",
                                "<h3>",
                                "<p>",
                                "<span>"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001630_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001630_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "What placeholder text appears in the search input field?",
                                "What text is visible on the button below the list of episodes?",
                                "What CSS class is applied to each episode card?",
                                "What three pieces of information are displayed inside each episode card?",
                                "What mechanism is used to iterate over the episodes for display?",
                                "What data property is used to track the current total number of episodes displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001630_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Podcast Episodes",
                                "Search episodes",
                                "Load More",
                                "episode-card",
                                "Episode title, episode description, and published date",
                                "v-for is used to iterate through the episodes array",
                                "A data property that tracks the current total number of episodes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that lists and organizes events with their corresponding dates and times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul> list, with the event title followed by its date and time in the format \"MM/DD/YYYY HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing event objects with properties for \"title\", \"date\", and \"time\".\n- Apply a CSS class named \"event-item\" to each <li> element.\n- Include an <input> element with a placeholder \"Enter event title\" and separate <input> elements for date and time above the list, all contained within a div.\n- Render an \"Add Event\" button next to the input fields that appends a new event to the list when clicked.\n- Create a data property that tracks the total number of events and display this count in a <span> element with the text \"Total Events:\" immediately below the <ul> list.",
            "task_id": "001631",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main header text displayed at the top?",
                "What is the format used to display each event's date and time?",
                "What CSS class is applied to each event item in the list?",
                "What placeholder text appears in the event title input field?",
                "What text is shown on the button next to the input fields?",
                "What label is displayed below the list to show the total number of events?",
                "How are the events visually organized on the page?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "MM/DD/YYYY HH:MM",
                "event-item",
                "Enter event title",
                "Add Event",
                "Total Events:",
                "As a bulleted list in a <ul> element"
            ],
            "raw_output_metric": [
                "<h2>",
                "Event Schedule",
                "<ul>",
                "<li>",
                "event-item",
                "v-for",
                "Enter event title",
                "<input>",
                "Add Event",
                "Total Events:",
                "<span>",
                "MM/DD/YYYY HH:MM"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001631_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that lists and organizes events with their corresponding dates and times.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Event Schedule\".\n- Display each event as an <li> element within a <ul> list, with the event title followed by its date and time in the format \"MM/DD/YYYY HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing event objects with properties for \"title\", \"date\", and \"time\".\n- Apply a CSS class named \"event-item\" to each <li> element.\n- Include an <input> element with a placeholder \"Enter event title\" and separate <input> elements for date and time above the list, all contained within a div.\n- Render an \"Add Event\" button next to the input fields that appends a new event to the list when clicked.\n- Create a data property that tracks the total number of events and display this count in a <span> element with the text \"Total Events:\" immediately below the <ul> list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001631_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "<h2>",
                                "Event Schedule",
                                "<ul>",
                                "<li>",
                                "event-item",
                                "v-for",
                                "Enter event title",
                                "<input>",
                                "Add Event",
                                "Total Events:",
                                "<span>",
                                "MM/DD/YYYY HH:MM"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001631_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001631_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main header text displayed at the top?",
                                "What is the format used to display each event's date and time?",
                                "What CSS class is applied to each event item in the list?",
                                "What placeholder text appears in the event title input field?",
                                "What text is shown on the button next to the input fields?",
                                "What label is displayed below the list to show the total number of events?",
                                "How are the events visually organized on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001631_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "MM/DD/YYYY HH:MM",
                                "event-item",
                                "Enter event title",
                                "Add Event",
                                "Total Events:",
                                "As a bulleted list in a <ul> element"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that manages a to-do list.\n\nFeature Requirements:\n- Render a header using an <h1> element displaying the text \"To-Do Tasks\".\n- Display each task as an <li> element inside an ordered list (<ol>).\n- Use the v-for directive to iterate over a data array where each task object contains a description and a due date.\n- Show each task's description followed by its due date inside a <span> formatted as \"YYYY-MM-DD\".\n- Provide a text input with the placeholder \"New task description\" and a date input with the placeholder \"Due date\" above the list.\n- Render an \"Add Task\" button next to the inputs that appends the new task to the list.\n- Display a \"Remove Completed\" button that, when clicked, removes all tasks flagged as completed.\n- Maintain a data property that tracks the total number of tasks currently displayed.\n- Apply a CSS class named \"task-item\" to each <li> element for consistent styling.",
            "task_id": "001632",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the header of the to-do list?",
                "What type of list is used to display the tasks?",
                "What CSS class is applied to each task item?",
                "How is each task’s description and due date shown?",
                "What placeholder text is used for the text input field?",
                "What placeholder text is used for the date input field?",
                "What is the label on the button for adding a new task?",
                "What is the label on the button for removing completed tasks?"
            ],
            "VQA_answers": [
                "To-Do Tasks",
                "Ordered list",
                "task-item",
                "The description is followed by a due date formatted as YYYY-MM-DD inside a span",
                "New task description",
                "Due date",
                "Add Task",
                "Remove Completed"
            ],
            "raw_output_metric": [
                "To-Do Tasks",
                "<h1>",
                "<ol>",
                "<li",
                "task-item",
                "v-for",
                "<span>",
                "YYYY-MM-DD",
                "New task description",
                "Due date",
                "Add Task",
                "Remove Completed",
                "data"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001632_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of tasks into a Vue component that manages a to-do list.\n\nFeature Requirements:\n- Render a header using an <h1> element displaying the text \"To-Do Tasks\".\n- Display each task as an <li> element inside an ordered list (<ol>).\n- Use the v-for directive to iterate over a data array where each task object contains a description and a due date.\n- Show each task's description followed by its due date inside a <span> formatted as \"YYYY-MM-DD\".\n- Provide a text input with the placeholder \"New task description\" and a date input with the placeholder \"Due date\" above the list.\n- Render an \"Add Task\" button next to the inputs that appends the new task to the list.\n- Display a \"Remove Completed\" button that, when clicked, removes all tasks flagged as completed.\n- Maintain a data property that tracks the total number of tasks currently displayed.\n- Apply a CSS class named \"task-item\" to each <li> element for consistent styling."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001632_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "To-Do Tasks",
                                "<h1>",
                                "<ol>",
                                "<li",
                                "task-item",
                                "v-for",
                                "<span>",
                                "YYYY-MM-DD",
                                "New task description",
                                "Due date",
                                "Add Task",
                                "Remove Completed",
                                "data"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001632_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001632_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header of the to-do list?",
                                "What type of list is used to display the tasks?",
                                "What CSS class is applied to each task item?",
                                "How is each task’s description and due date shown?",
                                "What placeholder text is used for the text input field?",
                                "What placeholder text is used for the date input field?",
                                "What is the label on the button for adding a new task?",
                                "What is the label on the button for removing completed tasks?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001632_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "To-Do Tasks",
                                "Ordered list",
                                "task-item",
                                "The description is followed by a due date formatted as YYYY-MM-DD inside a span",
                                "New task description",
                                "Due date",
                                "Add Task",
                                "Remove Completed"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert plain text recipe instructions into a Vue component that displays both cooking steps and ingredients.\n\nFeature Requirements:\n- Render the title \"Recipe Instructions\" using an <h2> element.\n- Display the ingredients in an ordered list (<ol>) where each ingredient is wrapped in an <li> element.\n- Render each cooking step inside a <div> element with the CSS class \"step\" for targeted styling.\n- Utilize v-for to loop through a predefined data array for the cooking steps.\n- Include a text input with a placeholder \"Enter additional ingredient\" above the ingredients list.\n- Provide a button labeled \"Add Ingredient\" adjacent to the input that appends the new ingredient to the list.\n- Display a paragraph (<p>) element below the ingredients list that reflects the current count of ingredients.\n- Incorporate a data property within the Vue component for tracking the number of cooking steps.",
            "task_id": "001633",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main heading displayed on the page?",
                "How are the ingredients presented?",
                "What placeholder text appears in the input field above the ingredients?",
                "What label is shown on the button next to the input field?",
                "How is the current count of ingredients communicated?",
                "How are the cooking steps individually displayed?"
            ],
            "VQA_answers": [
                "Recipe Instructions",
                "They are shown as items in an ordered (numbered) list.",
                "Enter additional ingredient",
                "Add Ingredient",
                "A paragraph below the ingredients list shows the count.",
                "Each step is rendered inside a block with specific styling (using the 'step' class)."
            ],
            "raw_output_metric": [
                "Recipe Instructions",
                "<h2>",
                "<ol>",
                "<li>",
                "<div class=\"step\">",
                "v-for",
                "Enter additional ingredient",
                "Add Ingredient",
                "<p>",
                "data()"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001633_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert plain text recipe instructions into a Vue component that displays both cooking steps and ingredients.\n\nFeature Requirements:\n- Render the title \"Recipe Instructions\" using an <h2> element.\n- Display the ingredients in an ordered list (<ol>) where each ingredient is wrapped in an <li> element.\n- Render each cooking step inside a <div> element with the CSS class \"step\" for targeted styling.\n- Utilize v-for to loop through a predefined data array for the cooking steps.\n- Include a text input with a placeholder \"Enter additional ingredient\" above the ingredients list.\n- Provide a button labeled \"Add Ingredient\" adjacent to the input that appends the new ingredient to the list.\n- Display a paragraph (<p>) element below the ingredients list that reflects the current count of ingredients.\n- Incorporate a data property within the Vue component for tracking the number of cooking steps."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001633_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Instructions",
                                "<h2>",
                                "<ol>",
                                "<li>",
                                "<div class=\"step\">",
                                "v-for",
                                "Enter additional ingredient",
                                "Add Ingredient",
                                "<p>",
                                "data()"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001633_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001633_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main heading displayed on the page?",
                                "How are the ingredients presented?",
                                "What placeholder text appears in the input field above the ingredients?",
                                "What label is shown on the button next to the input field?",
                                "How is the current count of ingredients communicated?",
                                "How are the cooking steps individually displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001633_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Recipe Instructions",
                                "They are shown as items in an ordered (numbered) list.",
                                "Enter additional ingredient",
                                "Add Ingredient",
                                "A paragraph below the ingredients list shows the count.",
                                "Each step is rendered inside a block with specific styling (using the 'step' class)."
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text project task overview into a Vue component that displays a list of tasks with deadlines and statuses.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Project Task Dashboard\".\n- Display each task as an <li> element within a <ul> container, iterating over a predefined tasks array using v-for.\n- Each <li> should show the task name, deadline, and status, where the deadline and status are wrapped in separate <span> elements.\n- Apply a CSS class named \"task-item\" to each <li> element.\n- Render a button with the text \"Update Tasks\" that, when clicked, triggers a method to update the status of all tasks.\n- Include an <input> element with the placeholder \"Enter new task\" positioned above the task list.\n- Provide an \"Add Task\" button placed next to the input field that appends a new task to the tasks array with a default deadline of \"TBD\" and status \"pending\".\n- Incorporate a data property for tracking the total number of tasks, labeled \"taskCount\".\n- Provide a computed property that returns only the tasks with a status of \"completed\".\n- Render an additional button with the text \"Reset Tasks\" that, when clicked, restores the original task list.",
            "task_id": "001634",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title visible at the top of the component?",
                "What placeholder text is shown in the input element above the task list?",
                "Which three buttons are visible on the page and what texts do they display?",
                "How are individual tasks displayed in the list?",
                "What CSS class is applied to every task item in the list?",
                "What default deadline and status are assigned when a new task is added?",
                "What does the computed property display?"
            ],
            "VQA_answers": [
                "Project Task Dashboard",
                "Enter new task",
                "Update Tasks, Add Task, and Reset Tasks",
                "Each task appears as a bullet point with the task name followed by deadline and status wrapped in separate elements",
                "task-item",
                "Deadline is 'TBD' and status is 'pending'",
                "Only tasks with a status of 'completed'"
            ],
            "raw_output_metric": [
                "Project Task Dashboard",
                "<h1>",
                "<ul>",
                "v-for",
                "<li class=\"task-item\">",
                "<span>",
                "Update Tasks",
                "Enter new task",
                "Add Task",
                "TBD",
                "pending",
                "taskCount",
                "completed",
                "Reset Tasks",
                "tasks"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001634_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text project task overview into a Vue component that displays a list of tasks with deadlines and statuses.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Project Task Dashboard\".\n- Display each task as an <li> element within a <ul> container, iterating over a predefined tasks array using v-for.\n- Each <li> should show the task name, deadline, and status, where the deadline and status are wrapped in separate <span> elements.\n- Apply a CSS class named \"task-item\" to each <li> element.\n- Render a button with the text \"Update Tasks\" that, when clicked, triggers a method to update the status of all tasks.\n- Include an <input> element with the placeholder \"Enter new task\" positioned above the task list.\n- Provide an \"Add Task\" button placed next to the input field that appends a new task to the tasks array with a default deadline of \"TBD\" and status \"pending\".\n- Incorporate a data property for tracking the total number of tasks, labeled \"taskCount\".\n- Provide a computed property that returns only the tasks with a status of \"completed\".\n- Render an additional button with the text \"Reset Tasks\" that, when clicked, restores the original task list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001634_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Task Dashboard",
                                "<h1>",
                                "<ul>",
                                "v-for",
                                "<li class=\"task-item\">",
                                "<span>",
                                "Update Tasks",
                                "Enter new task",
                                "Add Task",
                                "TBD",
                                "pending",
                                "taskCount",
                                "completed",
                                "Reset Tasks",
                                "tasks"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001634_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001634_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title visible at the top of the component?",
                                "What placeholder text is shown in the input element above the task list?",
                                "Which three buttons are visible on the page and what texts do they display?",
                                "How are individual tasks displayed in the list?",
                                "What CSS class is applied to every task item in the list?",
                                "What default deadline and status are assigned when a new task is added?",
                                "What does the computed property display?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001634_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Project Task Dashboard",
                                "Enter new task",
                                "Update Tasks, Add Task, and Reset Tasks",
                                "Each task appears as a bullet point with the task name followed by deadline and status wrapped in separate elements",
                                "task-item",
                                "Deadline is 'TBD' and status is 'pending'",
                                "Only tasks with a status of 'completed'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of personal journal entries into a Vue component that displays each entry along with its timestamp.\n\nFeature Requirements:\n- Render a main title in an <h1> element with the text \"Journal Entries\".\n- Use a v-for directive to iterate over a data array of entry objects, and display each entry's title and timestamp inside a <div> element.\n- Render each journal entry within a <p> element that has a CSS class named \"entry-text\".\n- Place an <input> element with a placeholder \"Entry Title\" and a <textarea> element with a placeholder \"Write your thoughts\" above the list for adding new entries.\n- Include a button labeled \"Add Entry\" next to the input fields that appends the new entry to the list.\n- Provide a data property that tracks the total number of journal entries, and display this count within a <span> element adjacent to the main title.\n- Render another button with the text \"Delete All\" that, upon being clicked, clears all journal entries from the list.",
            "task_id": "001635",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed on the page?",
                "What placeholder text is shown in the title input field?",
                "What placeholder text is visible in the text area?",
                "What is the label on the button that allows adding a new journal entry?",
                "What text is seen on the button for clearing all journal entries?",
                "What additional information is displayed next to the main title?",
                "What details are presented for each journal entry in the list?"
            ],
            "VQA_answers": [
                "Journal Entries",
                "Entry Title",
                "Write your thoughts",
                "Add Entry",
                "Delete All",
                "The total count of journal entries",
                "Each entry shows its title and timestamp"
            ],
            "raw_output_metric": [
                "Journal Entries",
                "v-for",
                "entry-text",
                "Entry Title",
                "Write your thoughts",
                "Add Entry",
                "Delete All",
                "timestamp",
                "title"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001635_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of personal journal entries into a Vue component that displays each entry along with its timestamp.\n\nFeature Requirements:\n- Render a main title in an <h1> element with the text \"Journal Entries\".\n- Use a v-for directive to iterate over a data array of entry objects, and display each entry's title and timestamp inside a <div> element.\n- Render each journal entry within a <p> element that has a CSS class named \"entry-text\".\n- Place an <input> element with a placeholder \"Entry Title\" and a <textarea> element with a placeholder \"Write your thoughts\" above the list for adding new entries.\n- Include a button labeled \"Add Entry\" next to the input fields that appends the new entry to the list.\n- Provide a data property that tracks the total number of journal entries, and display this count within a <span> element adjacent to the main title.\n- Render another button with the text \"Delete All\" that, upon being clicked, clears all journal entries from the list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001635_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Journal Entries",
                                "v-for",
                                "entry-text",
                                "Entry Title",
                                "Write your thoughts",
                                "Add Entry",
                                "Delete All",
                                "timestamp",
                                "title"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001635_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001635_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed on the page?",
                                "What placeholder text is shown in the title input field?",
                                "What placeholder text is visible in the text area?",
                                "What is the label on the button that allows adding a new journal entry?",
                                "What text is seen on the button for clearing all journal entries?",
                                "What additional information is displayed next to the main title?",
                                "What details are presented for each journal entry in the list?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001635_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Journal Entries",
                                "Entry Title",
                                "Write your thoughts",
                                "Add Entry",
                                "Delete All",
                                "The total count of journal entries",
                                "Each entry shows its title and timestamp"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays titles, authors, and publication years.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Book Collection\".\n- Display each book as a <div> element inside a <section> with each <div> showing the book's title, author, and publication year.\n- Each book <div> must include a <p> element for the title and a separate <p> element combining the author and publication year in the format \"Author (Year)\".\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, and year properties.\n- Apply a CSS class named \"book-entry\" to each <div> element that represents a book.\n- Render two buttons: one with the text \"Remove All\" that clears the book list, and another with the text \"Sort by Year\" that orders the books from oldest to newest.\n- Include an <input> element with a placeholder \"Enter new book title\" above the list and another input with a placeholder \"Enter author name\".\n- Provide an additional <input> element with a placeholder \"Enter publication year\" next to the previous inputs.\n- Include an \"Add Book\" button that, when clicked, appends a new book to the list using the provided inputs.\n- Incorporate a data property in the Vue component to track the total count of books currently displayed.",
            "task_id": "001636",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is displayed as the main page title?",
                "Which two buttons are provided for list operations?",
                "What is the label of the button that adds a new book?",
                "How many input fields are shown above the book list and what do they indicate?",
                "How is each book entry visually structured?",
                "What additional information is tracked in the component?",
                "What CSS class is applied to each book's container?"
            ],
            "VQA_answers": [
                "Book Collection",
                "Remove All and Sort by Year",
                "Add Book",
                "Three inputs: one for new book title, one for author name, and one for publication year",
                "Each book is shown as a container with a paragraph for the title and a separate paragraph displaying author and year in the format 'Author (Year)'",
                "The total count of books displayed",
                "book-entry"
            ],
            "raw_output_metric": [
                "Book Collection",
                "<h1>",
                "<section>",
                "<div",
                "class=\"book-entry\"",
                "v-for",
                "<p>",
                "Remove All",
                "Sort by Year",
                "Enter new book title",
                "Enter author name",
                "Enter publication year",
                "Add Book",
                "title",
                "author",
                "year"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001636_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of books into a Vue component that displays titles, authors, and publication years.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Book Collection\".\n- Display each book as a <div> element inside a <section> with each <div> showing the book's title, author, and publication year.\n- Each book <div> must include a <p> element for the title and a separate <p> element combining the author and publication year in the format \"Author (Year)\".\n- Utilize v-for to iterate over a predefined data array containing book objects with title, author, and year properties.\n- Apply a CSS class named \"book-entry\" to each <div> element that represents a book.\n- Render two buttons: one with the text \"Remove All\" that clears the book list, and another with the text \"Sort by Year\" that orders the books from oldest to newest.\n- Include an <input> element with a placeholder \"Enter new book title\" above the list and another input with a placeholder \"Enter author name\".\n- Provide an additional <input> element with a placeholder \"Enter publication year\" next to the previous inputs.\n- Include an \"Add Book\" button that, when clicked, appends a new book to the list using the provided inputs.\n- Incorporate a data property in the Vue component to track the total count of books currently displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001636_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Collection",
                                "<h1>",
                                "<section>",
                                "<div",
                                "class=\"book-entry\"",
                                "v-for",
                                "<p>",
                                "Remove All",
                                "Sort by Year",
                                "Enter new book title",
                                "Enter author name",
                                "Enter publication year",
                                "Add Book",
                                "title",
                                "author",
                                "year"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001636_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001636_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is displayed as the main page title?",
                                "Which two buttons are provided for list operations?",
                                "What is the label of the button that adds a new book?",
                                "How many input fields are shown above the book list and what do they indicate?",
                                "How is each book entry visually structured?",
                                "What additional information is tracked in the component?",
                                "What CSS class is applied to each book's container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001636_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Book Collection",
                                "Remove All and Sort by Year",
                                "Add Book",
                                "Three inputs: one for new book title, one for author name, and one for publication year",
                                "Each book is shown as a container with a paragraph for the title and a separate paragraph displaying author and year in the format 'Author (Year)'",
                                "The total count of books displayed",
                                "book-entry"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movie details and allows users to add or remove entries interactively.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, showing both the movie title and its release year.\n- Utilize v-for to iterate over a predefined data array containing movie objects.\n- Apply a CSS class named \"movie-item\" to each <li> element for styling purposes.\n- Render a button with the text \"Remove All Movies\" that, when clicked, clears the entire movie list.\n- Place an <input> element with a placeholder text \"Add movie title\" above the list for user entry.\n- Include an \"Add Movie\" button positioned next to the input field that appends a new movie to the watchlist.\n- Define a data property within the Vue component to track the total number of movies currently displayed.\n- Display the current count in a <p> element below the list with text formatted as \"Total Movies: X\", where X is the count.",
            "task_id": "001637",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the page?",
                "What details are shown for each movie in the list?",
                "What CSS class is applied to each movie list item?",
                "What is the label on the button that removes all movies?",
                "What placeholder text appears in the movie title input field?",
                "What is the label on the button used to add a new movie?",
                "How is the movie count displayed on the page?"
            ],
            "VQA_answers": [
                "Movie Watchlist",
                "The movie title and its release year.",
                "movie-item",
                "Remove All Movies",
                "Add movie title",
                "Add Movie",
                "In a paragraph below the list showing 'Total Movies: X'"
            ],
            "raw_output_metric": [
                "Movie Watchlist",
                "<h1>",
                "<ul>",
                "v-for",
                "movie-item",
                "Remove All Movies",
                "Add movie title",
                "Add Movie",
                "Total Movies:"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001637_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text movie watchlist into a Vue component that displays movie details and allows users to add or remove entries interactively.\n\nFeature Requirements:\n- Render a header using an <h1> element with the text \"Movie Watchlist\".\n- Display each movie as an <li> element within a <ul>, showing both the movie title and its release year.\n- Utilize v-for to iterate over a predefined data array containing movie objects.\n- Apply a CSS class named \"movie-item\" to each <li> element for styling purposes.\n- Render a button with the text \"Remove All Movies\" that, when clicked, clears the entire movie list.\n- Place an <input> element with a placeholder text \"Add movie title\" above the list for user entry.\n- Include an \"Add Movie\" button positioned next to the input field that appends a new movie to the watchlist.\n- Define a data property within the Vue component to track the total number of movies currently displayed.\n- Display the current count in a <p> element below the list with text formatted as \"Total Movies: X\", where X is the count."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001637_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Watchlist",
                                "<h1>",
                                "<ul>",
                                "v-for",
                                "movie-item",
                                "Remove All Movies",
                                "Add movie title",
                                "Add Movie",
                                "Total Movies:"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001637_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001637_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the page?",
                                "What details are shown for each movie in the list?",
                                "What CSS class is applied to each movie list item?",
                                "What is the label on the button that removes all movies?",
                                "What placeholder text appears in the movie title input field?",
                                "What is the label on the button used to add a new movie?",
                                "How is the movie count displayed on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001637_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Watchlist",
                                "The movie title and its release year.",
                                "movie-item",
                                "Remove All Movies",
                                "Add movie title",
                                "Add Movie",
                                "In a paragraph below the list showing 'Total Movies: X'"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text weekly workout plan into a Vue component that organizes and displays daily exercise routines.\n\nFeature Requirements:\n- Render a page header using an <h2> element with the text \"Weekly Workout Plan\".\n- Organize workouts in a grid layout where each day is represented as a <div> element styled with the CSS class \"workout-card\".\n- Inside each day's <div>, display the day name in an <h3> element and a list of exercises using a <ul> with <li> elements for each exercise.\n- Use v-for to iterate over a pre-defined data array where each element contains the day name and its associated exercises.\n- Provide an <input> element with the placeholder \"Enter exercise\" above each day's list to allow the addition of new exercises.\n- Include an \"Add Exercise\" button next to each input field that appends the entered exercise to the day's list when clicked.\n- Render a \"Reset Workout\" button at the bottom of the component that resets all daily exercise lists to their initial state.\n- Maintain a data property in the Vue component to track the total number of exercises across all days.\n- Ensure each <li> element displaying an exercise is assigned a CSS class \"exercise-item\" for styling.",
            "task_id": "001638",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the page header?",
                "How are the daily workout routines visually organized?",
                "What element displays the day’s name in each workout card?",
                "What placeholder text is shown in the input field above each exercise list?",
                "What label is visible on the button next to the input field for adding a new exercise?",
                "What type of list is used to display the exercises for each day?",
                "What CSS class is applied to every exercise displayed in the list?",
                "What button is rendered at the bottom of the component?"
            ],
            "VQA_answers": [
                "Weekly Workout Plan",
                "In a grid layout where each day is in a container styled with 'workout-card'.",
                "An h3 element.",
                "Enter exercise",
                "Add Exercise",
                "An unordered list (ul) with list items (li).",
                "exercise-item",
                "Reset Workout"
            ],
            "raw_output_metric": [
                "Weekly Workout Plan",
                "workout-card",
                "v-for",
                "Enter exercise",
                "Add Exercise",
                "Reset Workout",
                "exercise-item"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001638_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text weekly workout plan into a Vue component that organizes and displays daily exercise routines.\n\nFeature Requirements:\n- Render a page header using an <h2> element with the text \"Weekly Workout Plan\".\n- Organize workouts in a grid layout where each day is represented as a <div> element styled with the CSS class \"workout-card\".\n- Inside each day's <div>, display the day name in an <h3> element and a list of exercises using a <ul> with <li> elements for each exercise.\n- Use v-for to iterate over a pre-defined data array where each element contains the day name and its associated exercises.\n- Provide an <input> element with the placeholder \"Enter exercise\" above each day's list to allow the addition of new exercises.\n- Include an \"Add Exercise\" button next to each input field that appends the entered exercise to the day's list when clicked.\n- Render a \"Reset Workout\" button at the bottom of the component that resets all daily exercise lists to their initial state.\n- Maintain a data property in the Vue component to track the total number of exercises across all days.\n- Ensure each <li> element displaying an exercise is assigned a CSS class \"exercise-item\" for styling."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001638_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Workout Plan",
                                "workout-card",
                                "v-for",
                                "Enter exercise",
                                "Add Exercise",
                                "Reset Workout",
                                "exercise-item"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001638_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001638_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the page header?",
                                "How are the daily workout routines visually organized?",
                                "What element displays the day’s name in each workout card?",
                                "What placeholder text is shown in the input field above each exercise list?",
                                "What label is visible on the button next to the input field for adding a new exercise?",
                                "What type of list is used to display the exercises for each day?",
                                "What CSS class is applied to every exercise displayed in the list?",
                                "What button is rendered at the bottom of the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001638_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Workout Plan",
                                "In a grid layout where each day is in a container styled with 'workout-card'.",
                                "An h3 element.",
                                "Enter exercise",
                                "Add Exercise",
                                "An unordered list (ul) with list items (li).",
                                "exercise-item",
                                "Reset Workout"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text task list into a Vue component that displays tasks and allows users to add and mark tasks as completed.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\" at the top of the component.\n- Display each task as an <li> element within a <ul> list, using the v-for directive to loop through a predefined array of task objects.\n- For each task in the list, display the task description in bold followed by its priority level enclosed in parentheses.\n- Incorporate a data property to track the current count of tasks displayed and update it dynamically as tasks are added or removed.\n- Include a text input element above the list with a placeholder \"New Task\" and an adjacent button labeled \"Add Task\" to allow users to append new tasks.\n- Render a button labeled \"Complete All\" beneath the task list that, when clicked, marks all tasks as completed by triggering a specific method.",
            "task_id": "001639",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What header element is used to display the title?",
                "What is the title text shown at the top of the component?",
                "What is the placeholder text in the new task input field?",
                "What is the label on the button next to the new task input?",
                "How is each task displayed in the list?",
                "What is the label on the button beneath the task list?",
                "Is the task description styled in bold?",
                "Are the task priority levels enclosed in parentheses?"
            ],
            "VQA_answers": [
                "h2",
                "Task Manager",
                "New Task",
                "Add Task",
                "Each task is shown as a list item with the description in bold followed by the priority level in parentheses",
                "Complete All",
                "Yes",
                "Yes"
            ],
            "raw_output_metric": [
                "Task Manager",
                "<h2>",
                "</h2>",
                "v-for",
                "<ul>",
                "<li>",
                "<strong>",
                "New Task",
                "Add Task",
                "Complete All",
                "completeAll"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001639_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text task list into a Vue component that displays tasks and allows users to add and mark tasks as completed.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Task Manager\" at the top of the component.\n- Display each task as an <li> element within a <ul> list, using the v-for directive to loop through a predefined array of task objects.\n- For each task in the list, display the task description in bold followed by its priority level enclosed in parentheses.\n- Incorporate a data property to track the current count of tasks displayed and update it dynamically as tasks are added or removed.\n- Include a text input element above the list with a placeholder \"New Task\" and an adjacent button labeled \"Add Task\" to allow users to append new tasks.\n- Render a button labeled \"Complete All\" beneath the task list that, when clicked, marks all tasks as completed by triggering a specific method."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001639_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Task Manager",
                                "<h2>",
                                "</h2>",
                                "v-for",
                                "<ul>",
                                "<li>",
                                "<strong>",
                                "New Task",
                                "Add Task",
                                "Complete All",
                                "completeAll"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001639_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001639_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What header element is used to display the title?",
                                "What is the title text shown at the top of the component?",
                                "What is the placeholder text in the new task input field?",
                                "What is the label on the button next to the new task input?",
                                "How is each task displayed in the list?",
                                "What is the label on the button beneath the task list?",
                                "Is the task description styled in bold?",
                                "Are the task priority levels enclosed in parentheses?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001639_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "h2",
                                "Task Manager",
                                "New Task",
                                "Add Task",
                                "Each task is shown as a list item with the description in bold followed by the priority level in parentheses",
                                "Complete All",
                                "Yes",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text concert lineup into a Vue component that displays performers, their set times, and allows users to filter by stage.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Concert Lineup\".\n- Display each performer in a table row within a <table> element, with separate <td> elements for the performer name, set time, and stage.\n- Use v-for to iterate over a predefined array of concert data in the component’s data property.\n- Apply a CSS class named \"lineup-row\" to each <tr> element for consistent styling.\n- Include an input element with a placeholder \"Filter by stage\" placed above the table.\n- Render a button with the text \"Apply Filter\" that, when clicked, filters the concert data based on the input value.\n- Add a data property to track the total number of performers currently displayed.\n- If no performers match the filter criteria, display a message in a <p> element stating \"No performers available for this stage\".",
            "task_id": "001640",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What is the text on the button used to apply the filter?",
                "What placeholder text is shown in the input field above the table?",
                "What information is shown in each table row?",
                "What CSS class is used on each row of the table?",
                "What message appears if no performers match the filter criteria?",
                "Where does the user input the stage filter?",
                "What visible element displays the count of performers currently shown?"
            ],
            "VQA_answers": [
                "Concert Lineup",
                "Apply Filter",
                "Filter by stage",
                "Performer name, set time, and stage",
                "lineup-row",
                "No performers available for this stage",
                "In the input field above the table",
                "A data property tracking the total number of performers is rendered on the page"
            ],
            "raw_output_metric": [
                "Concert Lineup",
                "lineup-row",
                "Filter by stage",
                "Apply Filter",
                "No performers available for this stage",
                "v-for"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001640_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text concert lineup into a Vue component that displays performers, their set times, and allows users to filter by stage.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Concert Lineup\".\n- Display each performer in a table row within a <table> element, with separate <td> elements for the performer name, set time, and stage.\n- Use v-for to iterate over a predefined array of concert data in the component’s data property.\n- Apply a CSS class named \"lineup-row\" to each <tr> element for consistent styling.\n- Include an input element with a placeholder \"Filter by stage\" placed above the table.\n- Render a button with the text \"Apply Filter\" that, when clicked, filters the concert data based on the input value.\n- Add a data property to track the total number of performers currently displayed.\n- If no performers match the filter criteria, display a message in a <p> element stating \"No performers available for this stage\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001640_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Concert Lineup",
                                "lineup-row",
                                "Filter by stage",
                                "Apply Filter",
                                "No performers available for this stage",
                                "v-for"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001640_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001640_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What is the text on the button used to apply the filter?",
                                "What placeholder text is shown in the input field above the table?",
                                "What information is shown in each table row?",
                                "What CSS class is used on each row of the table?",
                                "What message appears if no performers match the filter criteria?",
                                "Where does the user input the stage filter?",
                                "What visible element displays the count of performers currently shown?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001640_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Concert Lineup",
                                "Apply Filter",
                                "Filter by stage",
                                "Performer name, set time, and stage",
                                "lineup-row",
                                "No performers available for this stage",
                                "In the input field above the table",
                                "A data property tracking the total number of performers is rendered on the page"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays the details of upcoming events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Utilize a <ul> element to list events, where each event is rendered as an <li> element.\n- For each event, display the event name in bold followed by its scheduled time in parentheses.\n- Use v-for to iterate over a predefined data array containing objects with \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to every <li> element for consistent styling.\n- Provide an <input> element with the placeholder \"Add event name\" placed above the events list.\n- Include a second <input> element with the placeholder \"Add event time\" next to the event name input.\n- Render a button with the text \"Add Event\" that, when clicked, appends a new event to the events array.\n- Display a <p> element that shows \"Total Events:\" followed by the count of events, derived from a data property.\n- Add a button labeled \"Clear Events\" that, when clicked, removes all events from the list.",
            "task_id": "001641",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the page?",
                "What placeholder text is shown for the event name input?",
                "What placeholder text is shown for the event time input?",
                "What text is displayed on the button used to add a new event?",
                "What is the CSS class assigned to each event list item?",
                "How is each event's details displayed in the list?",
                "What text is shown to indicate the total count of events?"
            ],
            "VQA_answers": [
                "Event Schedule",
                "Add event name",
                "Add event time",
                "Add Event",
                "event-item",
                "The event name is in bold, followed by its scheduled time in parentheses",
                "Total Events:"
            ],
            "raw_output_metric": [
                "Event Schedule",
                "<h1>",
                "<ul>",
                "<li",
                "event-item",
                "v-for",
                "name",
                "time",
                "Add event name",
                "Add event time",
                "Add Event",
                "Total Events:",
                "<p>",
                "Clear Events"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001641_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text event schedule into a Vue component that displays the details of upcoming events.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Event Schedule\".\n- Utilize a <ul> element to list events, where each event is rendered as an <li> element.\n- For each event, display the event name in bold followed by its scheduled time in parentheses.\n- Use v-for to iterate over a predefined data array containing objects with \"name\" and \"time\" properties.\n- Assign a CSS class named \"event-item\" to every <li> element for consistent styling.\n- Provide an <input> element with the placeholder \"Add event name\" placed above the events list.\n- Include a second <input> element with the placeholder \"Add event time\" next to the event name input.\n- Render a button with the text \"Add Event\" that, when clicked, appends a new event to the events array.\n- Display a <p> element that shows \"Total Events:\" followed by the count of events, derived from a data property.\n- Add a button labeled \"Clear Events\" that, when clicked, removes all events from the list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001641_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "<h1>",
                                "<ul>",
                                "<li",
                                "event-item",
                                "v-for",
                                "name",
                                "time",
                                "Add event name",
                                "Add event time",
                                "Add Event",
                                "Total Events:",
                                "<p>",
                                "Clear Events"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001641_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001641_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the page?",
                                "What placeholder text is shown for the event name input?",
                                "What placeholder text is shown for the event time input?",
                                "What text is displayed on the button used to add a new event?",
                                "What is the CSS class assigned to each event list item?",
                                "How is each event's details displayed in the list?",
                                "What text is shown to indicate the total count of events?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001641_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Event Schedule",
                                "Add event name",
                                "Add event time",
                                "Add Event",
                                "event-item",
                                "The event name is in bold, followed by its scheduled time in parentheses",
                                "Total Events:"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of favorite movies with titles and release years into a Vue component that displays the list and allows users to add and remove movies.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Favorite Movies\".\n- Display each movie as an <li> element within a <ul>, where the movie title and release year are separated by a comma.\n- Utilize v-for to iterate over a predefined array of movie objects defined in the component's data.\n- Apply a CSS class named \"movie-item\" to each <li> element.\n- Include two <input> elements above the list: one with the placeholder \"Enter movie title\" and another with \"Enter release year\".\n- Render a button labeled \"Add Movie\" next to the inputs that, when clicked, appends a new movie object to the list.\n- Render a button labeled \"Clear Movies\" that, when clicked, removes all movies from the list.\n- Include a data property to hold the current count of movies displayed.\n- Provide a computed property that returns a message such as \"Total Movies: [current count]\".",
            "task_id": "001642",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text of the main header on the page?",
                "How are the movies visually arranged in the component?",
                "What placeholder text appears in the first input field?",
                "What placeholder text is shown in the second input field?",
                "What label is displayed on the button used to add a new movie?",
                "What label is visible on the button that clears the movie list?",
                "What computed text indicates the total number of movies displayed?",
                "Which CSS class is applied to each movie item in the list?"
            ],
            "VQA_answers": [
                "Favorite Movies",
                "Displayed as list items in an unordered list with each item showing the movie title and release year separated by a comma",
                "Enter movie title",
                "Enter release year",
                "Add Movie",
                "Clear Movies",
                "Total Movies: [current count]",
                "movie-item"
            ],
            "raw_output_metric": [
                "Favorite Movies",
                "v-for",
                "movie-item",
                "Enter movie title",
                "Enter release year",
                "Add Movie",
                "Clear Movies",
                "Total Movies:"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001642_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of favorite movies with titles and release years into a Vue component that displays the list and allows users to add and remove movies.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Favorite Movies\".\n- Display each movie as an <li> element within a <ul>, where the movie title and release year are separated by a comma.\n- Utilize v-for to iterate over a predefined array of movie objects defined in the component's data.\n- Apply a CSS class named \"movie-item\" to each <li> element.\n- Include two <input> elements above the list: one with the placeholder \"Enter movie title\" and another with \"Enter release year\".\n- Render a button labeled \"Add Movie\" next to the inputs that, when clicked, appends a new movie object to the list.\n- Render a button labeled \"Clear Movies\" that, when clicked, removes all movies from the list.\n- Include a data property to hold the current count of movies displayed.\n- Provide a computed property that returns a message such as \"Total Movies: [current count]\"."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001642_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Favorite Movies",
                                "v-for",
                                "movie-item",
                                "Enter movie title",
                                "Enter release year",
                                "Add Movie",
                                "Clear Movies",
                                "Total Movies:"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001642_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001642_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text of the main header on the page?",
                                "How are the movies visually arranged in the component?",
                                "What placeholder text appears in the first input field?",
                                "What placeholder text is shown in the second input field?",
                                "What label is displayed on the button used to add a new movie?",
                                "What label is visible on the button that clears the movie list?",
                                "What computed text indicates the total number of movies displayed?",
                                "Which CSS class is applied to each movie item in the list?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001642_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Favorite Movies",
                                "Displayed as list items in an unordered list with each item showing the movie title and release year separated by a comma",
                                "Enter movie title",
                                "Enter release year",
                                "Add Movie",
                                "Clear Movies",
                                "Total Movies: [current count]",
                                "movie-item"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nTransform a plain text list of employees into a Vue component that displays a directory table with work hours and allows users to add and remove employees.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Employee Directory\" at the top of the component.\n- Create a table with headers \"Name\", \"Position\", and \"Hours Worked\", and use a <tr> for the column titles.\n- Use v-for to iterate over a predefined data array to populate table rows, where each row contains an employee's name, position, and hours worked.\n- Apply a CSS class named \"employee-row\" to each <tr> element in the table for styling.\n- Place two <input> elements above the table: one with a placeholder \"Employee Name\" and another with \"Position and Hours\" for entering new employee details.\n- Render an \"Add Employee\" button next to the inputs that appends a new employee to the list when clicked.\n- Include a \"Clear Directory\" button below the table that, when activated, removes all employee entries.\n- Maintain a data property in the Vue component to track and display the current count of employees in the directory.",
            "task_id": "001643",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "What column headers are shown in the directory table?",
                "What CSS class is applied to each row in the table?",
                "What placeholder texts are visible in the input fields above the table?",
                "What text is shown on the button used to add a new employee?",
                "What text is displayed on the button located below the table?",
                "How is the current count of employees indicated in the component?"
            ],
            "VQA_answers": [
                "Employee Directory",
                "Name, Position, Hours Worked",
                "employee-row",
                "Employee Name and Position and Hours",
                "Add Employee",
                "Clear Directory",
                "It is displayed using a data property"
            ],
            "raw_output_metric": [
                "Employee Directory",
                "<h1>",
                "<table>",
                "<tr>",
                "Name",
                "Position",
                "Hours Worked",
                "employee-row",
                "<input",
                "Employee Name",
                "Position and Hours",
                "Add Employee",
                "Clear Directory",
                "v-for",
                "data"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001643_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nTransform a plain text list of employees into a Vue component that displays a directory table with work hours and allows users to add and remove employees.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Employee Directory\" at the top of the component.\n- Create a table with headers \"Name\", \"Position\", and \"Hours Worked\", and use a <tr> for the column titles.\n- Use v-for to iterate over a predefined data array to populate table rows, where each row contains an employee's name, position, and hours worked.\n- Apply a CSS class named \"employee-row\" to each <tr> element in the table for styling.\n- Place two <input> elements above the table: one with a placeholder \"Employee Name\" and another with \"Position and Hours\" for entering new employee details.\n- Render an \"Add Employee\" button next to the inputs that appends a new employee to the list when clicked.\n- Include a \"Clear Directory\" button below the table that, when activated, removes all employee entries.\n- Maintain a data property in the Vue component to track and display the current count of employees in the directory."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001643_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Employee Directory",
                                "<h1>",
                                "<table>",
                                "<tr>",
                                "Name",
                                "Position",
                                "Hours Worked",
                                "employee-row",
                                "<input",
                                "Employee Name",
                                "Position and Hours",
                                "Add Employee",
                                "Clear Directory",
                                "v-for",
                                "data"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001643_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001643_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "What column headers are shown in the directory table?",
                                "What CSS class is applied to each row in the table?",
                                "What placeholder texts are visible in the input fields above the table?",
                                "What text is shown on the button used to add a new employee?",
                                "What text is displayed on the button located below the table?",
                                "How is the current count of employees indicated in the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001643_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Employee Directory",
                                "Name, Position, Hours Worked",
                                "employee-row",
                                "Employee Name and Position and Hours",
                                "Add Employee",
                                "Clear Directory",
                                "It is displayed using a data property"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text library catalog into a Vue component that displays a list of books and allows for managing the catalog entries.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Library Catalog\".\n- Use v-for to iterate over a predefined data array containing book objects with title and author properties.\n- Display each book as a row in a <table> with two columns: one for the title and one for the author.\n- Apply a CSS class \"book-title\" to the table cell that displays the book title and \"book-author\" to the cell for the author.\n- Render an input field above the table with placeholder text \"Enter book title\" for adding a new book.\n- Render a second input field beside the first with placeholder text \"Enter author name\" to capture the author's name.\n- Include an \"Add Book\" button next to the input fields that appends the new book to the data array when clicked.\n- Render a \"Remove Last Book\" button below the table that deletes the most recent book entry from the list when clicked.\n- Display a <p> element below the table that shows the current count of books, using a dedicated data property to track this number.",
            "task_id": "001644",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the page?",
                "What is the placeholder text of the first input field above the table?",
                "What is the placeholder text of the second input field beside the first?",
                "How many columns does the table displaying the books have?",
                "What CSS classes are applied to the cells displaying the book title and author?",
                "What are the labels on the buttons shown on the page?",
                "Where is the current count of books displayed?"
            ],
            "VQA_answers": [
                "Library Catalog",
                "Enter book title",
                "Enter author name",
                "Two",
                "book-title and book-author",
                "Add Book and Remove Last Book",
                "In a paragraph element below the table"
            ],
            "raw_output_metric": [
                "Library Catalog",
                "v-for",
                "book-title",
                "book-author",
                "Enter book title",
                "Enter author name",
                "Add Book",
                "Remove Last Book"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001644_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text library catalog into a Vue component that displays a list of books and allows for managing the catalog entries.\n\nFeature Requirements:\n- Render a heading using an <h1> element with the text \"Library Catalog\".\n- Use v-for to iterate over a predefined data array containing book objects with title and author properties.\n- Display each book as a row in a <table> with two columns: one for the title and one for the author.\n- Apply a CSS class \"book-title\" to the table cell that displays the book title and \"book-author\" to the cell for the author.\n- Render an input field above the table with placeholder text \"Enter book title\" for adding a new book.\n- Render a second input field beside the first with placeholder text \"Enter author name\" to capture the author's name.\n- Include an \"Add Book\" button next to the input fields that appends the new book to the data array when clicked.\n- Render a \"Remove Last Book\" button below the table that deletes the most recent book entry from the list when clicked.\n- Display a <p> element below the table that shows the current count of books, using a dedicated data property to track this number."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001644_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Catalog",
                                "v-for",
                                "book-title",
                                "book-author",
                                "Enter book title",
                                "Enter author name",
                                "Add Book",
                                "Remove Last Book"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001644_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001644_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the page?",
                                "What is the placeholder text of the first input field above the table?",
                                "What is the placeholder text of the second input field beside the first?",
                                "How many columns does the table displaying the books have?",
                                "What CSS classes are applied to the cells displaying the book title and author?",
                                "What are the labels on the buttons shown on the page?",
                                "Where is the current count of books displayed?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001644_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Library Catalog",
                                "Enter book title",
                                "Enter author name",
                                "Two",
                                "book-title and book-author",
                                "Add Book and Remove Last Book",
                                "In a paragraph element below the table"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text weekly workout schedule into a Vue component that displays days, exercises, and interactive controls.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Weekly Workout Schedule\" at the top.\n- Create a <ul> element where each <li> element represents a day of the week, rendered using a v-for loop.\n- Display each day name followed by a colon and a comma-separated list of exercises within each <li> element.\n- Apply a CSS class named \"day-info\" to every <li> element for consistent styling.\n- Place an <input> element with a placeholder \"Add exercise\" above the list to allow addition of new exercises.\n- Render an \"Add Exercise\" button next to the input field that appends the entered exercise to a specified day.\n- Include a data property to track the total number of exercises scheduled across the week.\n- Provide a \"Show Active Days\" button that, when clicked, filters and displays only days with at least one scheduled exercise.\n- Initialize the component with a predefined data array that maps each day of the week to its list of exercises.\n- Include a \"Reset Schedule\" button that clears all exercises from every day in the schedule.",
            "task_id": "001645",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the component?",
                "How are the days of the week listed?",
                "What CSS class is applied to each day entry in the list?",
                "What placeholder text appears in the input field above the list?",
                "What button is shown next to the input field?",
                "How is the exercise information displayed for each day?",
                "What button filters the list to show only days with at least one exercise?",
                "What button clears all exercises from the schedule?",
                "How many days (initially) are expected to be shown in the list?",
                "What overall count is tracked in the component?"
            ],
            "VQA_answers": [
                "Weekly Workout Schedule",
                "As bullet points in a list",
                "day-info",
                "Add exercise",
                "Add Exercise",
                "Day name followed by a colon and a comma-separated list of exercises",
                "Show Active Days",
                "Reset Schedule",
                "Seven",
                "The total number of exercises scheduled across the week"
            ],
            "raw_output_metric": [
                "Weekly Workout Schedule",
                "<h2>",
                "<ul>",
                "<li>",
                "v-for",
                "day-info",
                "placeholder=\"Add exercise\"",
                "Add Exercise",
                "Show Active Days",
                "Reset Schedule",
                "export default",
                "data()"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001645_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text weekly workout schedule into a Vue component that displays days, exercises, and interactive controls.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Weekly Workout Schedule\" at the top.\n- Create a <ul> element where each <li> element represents a day of the week, rendered using a v-for loop.\n- Display each day name followed by a colon and a comma-separated list of exercises within each <li> element.\n- Apply a CSS class named \"day-info\" to every <li> element for consistent styling.\n- Place an <input> element with a placeholder \"Add exercise\" above the list to allow addition of new exercises.\n- Render an \"Add Exercise\" button next to the input field that appends the entered exercise to a specified day.\n- Include a data property to track the total number of exercises scheduled across the week.\n- Provide a \"Show Active Days\" button that, when clicked, filters and displays only days with at least one scheduled exercise.\n- Initialize the component with a predefined data array that maps each day of the week to its list of exercises.\n- Include a \"Reset Schedule\" button that clears all exercises from every day in the schedule."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001645_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Workout Schedule",
                                "<h2>",
                                "<ul>",
                                "<li>",
                                "v-for",
                                "day-info",
                                "placeholder=\"Add exercise\"",
                                "Add Exercise",
                                "Show Active Days",
                                "Reset Schedule",
                                "export default",
                                "data()"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001645_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001645_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the component?",
                                "How are the days of the week listed?",
                                "What CSS class is applied to each day entry in the list?",
                                "What placeholder text appears in the input field above the list?",
                                "What button is shown next to the input field?",
                                "How is the exercise information displayed for each day?",
                                "What button filters the list to show only days with at least one exercise?",
                                "What button clears all exercises from the schedule?",
                                "How many days (initially) are expected to be shown in the list?",
                                "What overall count is tracked in the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001645_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Weekly Workout Schedule",
                                "As bullet points in a list",
                                "day-info",
                                "Add exercise",
                                "Add Exercise",
                                "Day name followed by a colon and a comma-separated list of exercises",
                                "Show Active Days",
                                "Reset Schedule",
                                "Seven",
                                "The total number of exercises scheduled across the week"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of daily workout routines into a Vue component that displays each exercise with its name and duration.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Schedule\".\n- Display each workout routine as a <div> element inside a parent <section> container.\n- Each <div> must include the exercise name in a <p> element and the duration in another <p> element, with the duration enclosed in parentheses.\n- Use v-for to iterate over a predefined data array containing objects for exercise name and duration.\n- Apply a CSS class named \"exercise\" to each workout routine's <div> for styling purposes.\n- Render a button with the text \"Start Workout\" that, when clicked, toggles a Boolean data property indicating if the workout is active.\n- Include an <input> element above the list with a placeholder text \"Enter new exercise\" for adding new routines.\n- Provide an \"Add Exercise\" button next to the input field to append new exercise entries to the list.\n- Include a data property in the Vue component for tracking the total workout duration, updated dynamically when new exercises are added.",
            "task_id": "001646",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the header text displayed at the top of the component?",
                "What placeholder text is shown in the input field above the exercise list?",
                "What is the text on the button that toggles the workout state?",
                "What is the label on the button used to add a new exercise?",
                "What two pieces of information are displayed for each workout routine?",
                "What container element visually wraps all the workout routines?",
                "Is a CSS class named 'exercise' visibly applied to each routine's container?"
            ],
            "VQA_answers": [
                "Workout Schedule",
                "Enter new exercise",
                "Start Workout",
                "Add Exercise",
                "Exercise name and duration (in parentheses)",
                "A section element",
                "Yes"
            ],
            "raw_output_metric": [
                "Workout Schedule",
                "v-for",
                "exercise",
                "Start Workout",
                "Enter new exercise",
                "Add Exercise",
                "totalWorkoutDuration"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001646_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of daily workout routines into a Vue component that displays each exercise with its name and duration.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Schedule\".\n- Display each workout routine as a <div> element inside a parent <section> container.\n- Each <div> must include the exercise name in a <p> element and the duration in another <p> element, with the duration enclosed in parentheses.\n- Use v-for to iterate over a predefined data array containing objects for exercise name and duration.\n- Apply a CSS class named \"exercise\" to each workout routine's <div> for styling purposes.\n- Render a button with the text \"Start Workout\" that, when clicked, toggles a Boolean data property indicating if the workout is active.\n- Include an <input> element above the list with a placeholder text \"Enter new exercise\" for adding new routines.\n- Provide an \"Add Exercise\" button next to the input field to append new exercise entries to the list.\n- Include a data property in the Vue component for tracking the total workout duration, updated dynamically when new exercises are added."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001646_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Workout Schedule",
                                "v-for",
                                "exercise",
                                "Start Workout",
                                "Enter new exercise",
                                "Add Exercise",
                                "totalWorkoutDuration"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001646_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001646_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the header text displayed at the top of the component?",
                                "What placeholder text is shown in the input field above the exercise list?",
                                "What is the text on the button that toggles the workout state?",
                                "What is the label on the button used to add a new exercise?",
                                "What two pieces of information are displayed for each workout routine?",
                                "What container element visually wraps all the workout routines?",
                                "Is a CSS class named 'exercise' visibly applied to each routine's container?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001646_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Workout Schedule",
                                "Enter new exercise",
                                "Start Workout",
                                "Add Exercise",
                                "Exercise name and duration (in parentheses)",
                                "A section element",
                                "Yes"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of movie recommendations into a Vue component that displays details for each movie.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Movie Picks\".\n- Display each movie as an <li> element within a <ul>, including the movie title, genre, and rating in parentheses.\n- Use a v-for directive to iterate over a predefined data array containing movie objects with properties for title, genre, rating, and description.\n- Apply a CSS class named \"movie-item\" to each <li> element to style the individual movies.\n- Render a button labeled \"Remove Movie\" next to each movie item that, when clicked, deletes that movie from the list.\n- Place an <input> element with a placeholder text \"Enter movie title\" above the list for adding new movies.\n- Provide an \"Add Movie\" button adjacent to the input field that appends a new movie to the array when clicked.\n- Include a data property that tracks the total number of movies currently displayed.\n- At the bottom of the component, display a <p> element containing the text \"Total Movies: [count]\", with [count] dynamically reflecting the movie count.",
            "task_id": "001647",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the main title displayed at the top of the page?",
                "What placeholder text does the input field display?",
                "What label is shown on the button used to add a new movie?",
                "How are each movie's details presented in the list?",
                "Which CSS class is applied to each movie item?",
                "What text is visible on the button provided next to each movie?",
                "What text does the footer p element display regarding the movie count?"
            ],
            "VQA_answers": [
                "Movie Picks",
                "Enter movie title",
                "Add Movie",
                "Movie title, genre, and rating in parentheses",
                "movie-item",
                "Remove Movie",
                "Total Movies: [count]"
            ],
            "raw_output_metric": [
                "Movie Picks",
                "movie-item",
                "v-for",
                "Remove Movie",
                "Enter movie title",
                "Add Movie",
                "Total Movies:"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001647_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of movie recommendations into a Vue component that displays details for each movie.\n\nFeature Requirements:\n- Render a title using an <h1> element with the text \"Movie Picks\".\n- Display each movie as an <li> element within a <ul>, including the movie title, genre, and rating in parentheses.\n- Use a v-for directive to iterate over a predefined data array containing movie objects with properties for title, genre, rating, and description.\n- Apply a CSS class named \"movie-item\" to each <li> element to style the individual movies.\n- Render a button labeled \"Remove Movie\" next to each movie item that, when clicked, deletes that movie from the list.\n- Place an <input> element with a placeholder text \"Enter movie title\" above the list for adding new movies.\n- Provide an \"Add Movie\" button adjacent to the input field that appends a new movie to the array when clicked.\n- Include a data property that tracks the total number of movies currently displayed.\n- At the bottom of the component, display a <p> element containing the text \"Total Movies: [count]\", with [count] dynamically reflecting the movie count."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001647_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Picks",
                                "movie-item",
                                "v-for",
                                "Remove Movie",
                                "Enter movie title",
                                "Add Movie",
                                "Total Movies:"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001647_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001647_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the main title displayed at the top of the page?",
                                "What placeholder text does the input field display?",
                                "What label is shown on the button used to add a new movie?",
                                "How are each movie's details presented in the list?",
                                "Which CSS class is applied to each movie item?",
                                "What text is visible on the button provided next to each movie?",
                                "What text does the footer p element display regarding the movie count?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001647_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Movie Picks",
                                "Enter movie title",
                                "Add Movie",
                                "Movie title, genre, and rating in parentheses",
                                "movie-item",
                                "Remove Movie",
                                "Total Movies: [count]"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text workout planner into a Vue component that displays a list of workout sessions and their details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Planner\".\n- Display each workout session as an <li> element within a <ul>, showing the session name followed by its duration in minutes (e.g., \"Cardio: 30 mins\").\n- Utilize v-for to loop over a predefined data array that includes properties for workout name and duration.\n- Apply a CSS class named \"session\" to each <li> element to format the workout sessions.\n- Render a button labeled \"Reset Schedule\" that, when clicked, clears the list of workout sessions.\n- Insert an <input> element above the list with a placeholder text \"Add workout session\" that accepts the session name.\n- Include another <input> element for entering the session duration next to the workout input.\n- Render an \"Add Session\" button adjacent to the inputs that adds the new workout session to the list.\n- Include a data property in the Vue component that tracks the total number of workout sessions currently displayed.",
            "task_id": "001648",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the text displayed in the header?",
                "How is each workout session presented in the list?",
                "Which CSS class is applied to every workout session listed?",
                "What text is shown on the button that clears all workout sessions?",
                "What placeholder text appears in the workout session input field?",
                "What label is visible on the button that adds a new session?",
                "Where is the list of workout sessions located on the page?"
            ],
            "VQA_answers": [
                "Workout Planner",
                "Each session is shown as 'Session Name: Duration mins' (for example, 'Cardio: 30 mins').",
                "session",
                "Reset Schedule",
                "Add workout session",
                "Add Session",
                "Below the input fields within an unordered list"
            ],
            "raw_output_metric": [
                "Workout Planner",
                "v-for",
                "session",
                "Reset Schedule",
                "Add workout session",
                "Add Session"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001648_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text workout planner into a Vue component that displays a list of workout sessions and their details.\n\nFeature Requirements:\n- Render a header using an <h2> element with the text \"Workout Planner\".\n- Display each workout session as an <li> element within a <ul>, showing the session name followed by its duration in minutes (e.g., \"Cardio: 30 mins\").\n- Utilize v-for to loop over a predefined data array that includes properties for workout name and duration.\n- Apply a CSS class named \"session\" to each <li> element to format the workout sessions.\n- Render a button labeled \"Reset Schedule\" that, when clicked, clears the list of workout sessions.\n- Insert an <input> element above the list with a placeholder text \"Add workout session\" that accepts the session name.\n- Include another <input> element for entering the session duration next to the workout input.\n- Render an \"Add Session\" button adjacent to the inputs that adds the new workout session to the list.\n- Include a data property in the Vue component that tracks the total number of workout sessions currently displayed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001648_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Workout Planner",
                                "v-for",
                                "session",
                                "Reset Schedule",
                                "Add workout session",
                                "Add Session"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001648_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001648_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the text displayed in the header?",
                                "How is each workout session presented in the list?",
                                "Which CSS class is applied to every workout session listed?",
                                "What text is shown on the button that clears all workout sessions?",
                                "What placeholder text appears in the workout session input field?",
                                "What label is visible on the button that adds a new session?",
                                "Where is the list of workout sessions located on the page?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001648_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Workout Planner",
                                "Each session is shown as 'Session Name: Duration mins' (for example, 'Cardio: 30 mins').",
                                "session",
                                "Reset Schedule",
                                "Add workout session",
                                "Add Session",
                                "Below the input fields within an unordered list"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output Vue:\n\nTask:\nConvert a plain text list of daily tasks with start times into a Vue component that displays each task along with its scheduled time.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Agenda\".\n- Display each task in a <div> element with the CSS class \"task-item\".\n- Each task should be presented inside a <p> element that shows the task name followed by its start time in the format \"HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing the task details.\n- Place a text input element above the task list with a placeholder \"Enter task description\" for adding new tasks.\n- Provide a second text input element next to the first with a placeholder \"Enter start time (HH:MM)\" for specifying the task time.\n- Include an \"Add Task\" button that appends the new task and time to the list when clicked.\n- Render a \"Mark as Done\" button next to each task that, when clicked, toggles a completed status for that task.\n- Include a \"Clear Completed\" button at the bottom that removes all tasks marked as completed.\n- Include a data property in the Vue component for tracking the current count of tasks in the list.",
            "task_id": "001649",
            "task_name": "Text to Vue",
            "input_type": "Text",
            "output_type": "Vue",
            "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
            "VQA_questions": [
                "What is the title displayed at the top of the agenda?",
                "How many text input fields are shown above the task list?",
                "What are the placeholder texts of the two input fields?",
                "How is each task visually presented in the task list?",
                "In what format is the time displayed next to each task?",
                "What button is placed next to each task for marking it as completed?",
                "Which button is located at the bottom for removing completed tasks?",
                "What additional information related to tasks is tracked in the component?"
            ],
            "VQA_answers": [
                "Daily Agenda",
                "Two",
                "Enter task description and Enter start time (HH:MM)",
                "Inside a container with the task-item class and a paragraph element showing task name and time",
                "HH:MM",
                "Mark as Done",
                "Clear Completed",
                "The current count of tasks"
            ],
            "raw_output_metric": [
                "Daily Agenda",
                "task-item",
                "v-for",
                "Enter task description",
                "Enter start time (HH:MM)",
                "Add Task",
                "Mark as Done",
                "Clear Completed"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001649_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output Vue:\n\nTask:\nConvert a plain text list of daily tasks with start times into a Vue component that displays each task along with its scheduled time.\n\nFeature Requirements:\n- Render a title using an <h2> element with the text \"Daily Agenda\".\n- Display each task in a <div> element with the CSS class \"task-item\".\n- Each task should be presented inside a <p> element that shows the task name followed by its start time in the format \"HH:MM\".\n- Use a v-for directive to iterate over a predefined data array containing the task details.\n- Place a text input element above the task list with a placeholder \"Enter task description\" for adding new tasks.\n- Provide a second text input element next to the first with a placeholder \"Enter start time (HH:MM)\" for specifying the task time.\n- Include an \"Add Task\" button that appends the new task and time to the list when clicked.\n- Render a \"Mark as Done\" button next to each task that, when clicked, toggles a completed status for that task.\n- Include a \"Clear Completed\" button at the bottom that removes all tasks marked as completed.\n- Include a data property in the Vue component for tracking the current count of tasks in the list."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001649_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Agenda",
                                "task-item",
                                "v-for",
                                "Enter task description",
                                "Enter start time (HH:MM)",
                                "Add Task",
                                "Mark as Done",
                                "Clear Completed"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    },
                    {
                        "id": "001649_v",
                        "type": "choices",
                        "value": {
                            "choices": [
                                "Use Visual Rendering"
                            ]
                        },
                        "to_name": "visual_rendering",
                        "from_name": "shouldUseVisualRendering"
                    },
                    {
                        "id": "001649_vq",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "What is the title displayed at the top of the agenda?",
                                "How many text input fields are shown above the task list?",
                                "What are the placeholder texts of the two input fields?",
                                "How is each task visually presented in the task list?",
                                "In what format is the time displayed next to each task?",
                                "What button is placed next to each task for marking it as completed?",
                                "Which button is located at the bottom for removing completed tasks?",
                                "What additional information related to tasks is tracked in the component?"
                            ]
                        },
                        "to_name": "VQA_questions",
                        "from_name": "question"
                    },
                    {
                        "id": "001649_va",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Daily Agenda",
                                "Two",
                                "Enter task description and Enter start time (HH:MM)",
                                "Inside a container with the task-item class and a paragraph element showing task name and time",
                                "HH:MM",
                                "Mark as Done",
                                "Clear Completed",
                                "The current count of tasks"
                            ]
                        },
                        "to_name": "VQA_answers",
                        "from_name": "desiredAnswer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional movie festival schedule based on the given input text description of festival movie events.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <duration> element formatted as \"HH:MM\" representing the movie's running time.\n- Every <movie> element must include a <screening_date> element with the date in the \"YYYY-MM-DD\" format.\n- Include a <venue> element under each <movie> element, which specifies the screening location as text.\n- Ensure proper nesting and closing of all XML elements.",
            "task_id": "001700",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[movie]",
                "festival[movie][title]",
                "festival[movie][director]",
                "festival[movie][duration]",
                "festival[movie][screening_date]",
                "festival[movie][venue]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001700_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a fictional movie festival schedule based on the given input text description of festival movie events.\n\nFeature Requirements:\n- Include a root element named <festival>.\n- Within the <festival>, have at least 2 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element should include a <director> element with the director's name in text.\n- Each <movie> element must have a <duration> element formatted as \"HH:MM\" representing the movie's running time.\n- Every <movie> element must include a <screening_date> element with the date in the \"YYYY-MM-DD\" format.\n- Include a <venue> element under each <movie> element, which specifies the screening location as text.\n- Ensure proper nesting and closing of all XML elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001700_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[movie]",
                                "festival[movie][title]",
                                "festival[movie][director]",
                                "festival[movie][duration]",
                                "festival[movie][screening_date]",
                                "festival[movie][venue]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music album library based on a text description of various albums.\n\nFeature Requirements:\n- The root element must be <library>.\n- The <library> element must contain at least three <album> elements.\n- Each <album> element should include a <name> element with the album's title in text.\n- Each <album> element must have an <artist> element with the artist’s name in text.\n- Every <album> element must include a <releaseYear> element containing a four-digit number representing the release year.\n- Each <album> element should contain a <tracks> element that wraps multiple <track> elements.\n- Every <track> element must include a <title> element with the track’s name and a <duration> element formatted as minutes and seconds (mm:ss).\n- Ensure that the XML structure is properly nested and all tags are correctly closed.\n- Numeric values and durations must strictly follow the specified formats.",
            "task_id": "001701",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "library",
                "library[album]",
                "library[album][name]",
                "library[album][artist]",
                "library[album][releaseYear]",
                "library[album][tracks]",
                "library[album][tracks][track]",
                "library[album][tracks][track][title]",
                "library[album][tracks][track][duration]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001701_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital music album library based on a text description of various albums.\n\nFeature Requirements:\n- The root element must be <library>.\n- The <library> element must contain at least three <album> elements.\n- Each <album> element should include a <name> element with the album's title in text.\n- Each <album> element must have an <artist> element with the artist’s name in text.\n- Every <album> element must include a <releaseYear> element containing a four-digit number representing the release year.\n- Each <album> element should contain a <tracks> element that wraps multiple <track> elements.\n- Every <track> element must include a <title> element with the track’s name and a <duration> element formatted as minutes and seconds (mm:ss).\n- Ensure that the XML structure is properly nested and all tags are correctly closed.\n- Numeric values and durations must strictly follow the specified formats."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001701_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "library",
                                "library[album]",
                                "library[album][name]",
                                "library[album][artist]",
                                "library[album][releaseYear]",
                                "library[album][tracks]",
                                "library[album][tracks][track]",
                                "library[album][tracks][track][title]",
                                "library[album][tracks][track][duration]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie library catalog based on an input description of movies.\n\nFeature Requirements:\n- Include a root element named <movies>.\n- Within the <movies> element, have at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with a four-digit number representing the release year.\n- Each <movie> element must include a <rating> element with a numerical value between 0.0 and 10.0, formatted to one decimal place.\n- Each <movie> element must include a <genre> element specifying the movie's genre in text.\n- Ensure that the <movies> element is properly closed after all <movie> elements.",
            "task_id": "001702",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "movies",
                "movies[movie]",
                "movies[movie][title]",
                "movies[movie][director]",
                "movies[movie][year]",
                "movies[movie][rating]",
                "movies[movie][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001702_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital movie library catalog based on an input description of movies.\n\nFeature Requirements:\n- Include a root element named <movies>.\n- Within the <movies> element, have at least 3 <movie> elements.\n- Each <movie> element must contain a <title> element with the movie's title in text.\n- Each <movie> element must include a <director> element with the director's name in text.\n- Each <movie> element must have a <year> element with a four-digit number representing the release year.\n- Each <movie> element must include a <rating> element with a numerical value between 0.0 and 10.0, formatted to one decimal place.\n- Each <movie> element must include a <genre> element specifying the movie's genre in text.\n- Ensure that the <movies> element is properly closed after all <movie> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001702_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "movies",
                                "movies[movie]",
                                "movies[movie][title]",
                                "movies[movie][director]",
                                "movies[movie][year]",
                                "movies[movie][rating]",
                                "movies[movie][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a local culinary recipe directory based on a provided text description of recipes.\n\nFeature Requirements:\n- The XML document must have a root element named <recipes>.\n- Within the <recipes> root, include at least 3 <recipe> elements.\n- Each <recipe> element should contain a <name> element with the recipe's name in text.\n- Each <recipe> element must include a <chef> element with the chef's name in text.\n- Each <recipe> element should have a <cookingTime> element with a three-digit numerical value representing the time in minutes.\n- Every <recipe> element must contain a <difficulty> element with one of the text values: \"Easy\", \"Medium\", or \"Hard\".\n- Each <recipe> element should include an <ingredients> element containing at least 2 <ingredient> elements, each holding the ingredient name in text.\n- The <ingredients> element must be directly nested within its respective <recipe> element.\n- Ensure the XML structure is properly nested and all elements are correctly closed.",
            "task_id": "001703",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "recipes",
                "recipes[recipe]",
                "recipes[recipe][name]",
                "recipes[recipe][chef]",
                "recipes[recipe][cookingTime]",
                "recipes[recipe][difficulty]",
                "recipes[recipe][ingredients]",
                "recipes[recipe][ingredients][ingredient]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001703_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a local culinary recipe directory based on a provided text description of recipes.\n\nFeature Requirements:\n- The XML document must have a root element named <recipes>.\n- Within the <recipes> root, include at least 3 <recipe> elements.\n- Each <recipe> element should contain a <name> element with the recipe's name in text.\n- Each <recipe> element must include a <chef> element with the chef's name in text.\n- Each <recipe> element should have a <cookingTime> element with a three-digit numerical value representing the time in minutes.\n- Every <recipe> element must contain a <difficulty> element with one of the text values: \"Easy\", \"Medium\", or \"Hard\".\n- Each <recipe> element should include an <ingredients> element containing at least 2 <ingredient> elements, each holding the ingredient name in text.\n- The <ingredients> element must be directly nested within its respective <recipe> element.\n- Ensure the XML structure is properly nested and all elements are correctly closed."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001703_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "recipes",
                                "recipes[recipe]",
                                "recipes[recipe][name]",
                                "recipes[recipe][chef]",
                                "recipes[recipe][cookingTime]",
                                "recipes[recipe][difficulty]",
                                "recipes[recipe][ingredients]",
                                "recipes[recipe][ingredients][ingredient]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a digital film archive based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <FilmArchive>.\n- Within <FilmArchive>, have at least 2 <Film> elements.\n- Each <Film> element should contain a <Title> element with the film's title in text.\n- Each <Film> element should include a <Director> element with the director's name in text.\n- Each <Film> element must have a <ReleaseYear> element with four numeric digits representing the year.\n- Each <Film> element should include a <Duration> element with the film's running time expressed in minutes as an integer.\n- Each <Film> element must contain a <Rating> element with a numerical value formatted to one decimal place.",
            "task_id": "001704",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "FilmArchive",
                "FilmArchive[Film]",
                "FilmArchive[Film][Title]",
                "FilmArchive[Film][Director]",
                "FilmArchive[Film][ReleaseYear]",
                "FilmArchive[Film][Duration]",
                "FilmArchive[Film][Rating]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001704_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a digital film archive based on the given input text description of films.\n\nFeature Requirements:\n- Include a root element named <FilmArchive>.\n- Within <FilmArchive>, have at least 2 <Film> elements.\n- Each <Film> element should contain a <Title> element with the film's title in text.\n- Each <Film> element should include a <Director> element with the director's name in text.\n- Each <Film> element must have a <ReleaseYear> element with four numeric digits representing the year.\n- Each <Film> element should include a <Duration> element with the film's running time expressed in minutes as an integer.\n- Each <Film> element must contain a <Rating> element with a numerical value formatted to one decimal place."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001704_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "FilmArchive",
                                "FilmArchive[Film]",
                                "FilmArchive[Film][Title]",
                                "FilmArchive[Film][Director]",
                                "FilmArchive[Film][ReleaseYear]",
                                "FilmArchive[Film][Duration]",
                                "FilmArchive[Film][Rating]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a detailed restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must have an attribute \"id\" with a unique identifier.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include an <ingredients> element listing at least 2 ingredients, separated by commas.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <category> element that specifies one of the following: \"Appetizer\", \"Main Course\", or \"Dessert\".\n- Each <dish> element must contain a <calories> element with a numeric value expressing the calorie count.\n- Ensure the <menu> element is properly closed after all <dish> elements.",
            "task_id": "001705",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "menu",
                "menu[dish]",
                "menu[dish][@id]",
                "menu[dish][name]",
                "menu[dish][ingredients]",
                "menu[dish][price]",
                "menu[dish][category]",
                "menu[dish][calories]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001705_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a detailed restaurant menu based on the given input text description of various dishes.\n\nFeature Requirements:\n- Include a root element named <menu> that encloses all dish entries.\n- Within the <menu>, include at least 3 <dish> elements.\n- Each <dish> element must have an attribute \"id\" with a unique identifier.\n- Each <dish> element should contain a <name> element with the dish's name in text.\n- Each <dish> element must include an <ingredients> element listing at least 2 ingredients, separated by commas.\n- Each <dish> element must have a <price> element with a numerical value formatted to two decimal places.\n- Each <dish> element should include a <category> element that specifies one of the following: \"Appetizer\", \"Main Course\", or \"Dessert\".\n- Each <dish> element must contain a <calories> element with a numeric value expressing the calorie count.\n- Ensure the <menu> element is properly closed after all <dish> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001705_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "menu",
                                "menu[dish]",
                                "menu[dish][@id]",
                                "menu[dish][name]",
                                "menu[dish][ingredients]",
                                "menu[dish][price]",
                                "menu[dish][category]",
                                "menu[dish][calories]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary based on the provided description of various destinations.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, include at least 3 <destination> elements.\n- Each <destination> element should contain a <name> element with the destination's name in plain text.\n- Each <destination> element must include an <arrival> element with the arrival date formatted as YYYY-MM-DD.\n- Each <destination> element should have a <duration> element representing the number of days as an integer.\n- Ensure each <destination> element includes an <activities> element that contains one or more <activity> sub-elements, each with the activity name in plain text.\n- At least one <destination> element should include an optional <notes> element with additional comments in text.\n- The <itinerary> element must be properly closed after listing all <destination> elements.",
            "task_id": "001706",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "itinerary",
                "itinerary[destination]",
                "itinerary[destination][name]",
                "itinerary[destination][arrival]",
                "itinerary[destination][duration]",
                "itinerary[destination][activities]",
                "itinerary[destination][activities][activity]",
                "itinerary[destination][notes]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001706_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a travel itinerary based on the provided description of various destinations.\n\nFeature Requirements:\n- Include a root element named <itinerary>.\n- Within the <itinerary>, include at least 3 <destination> elements.\n- Each <destination> element should contain a <name> element with the destination's name in plain text.\n- Each <destination> element must include an <arrival> element with the arrival date formatted as YYYY-MM-DD.\n- Each <destination> element should have a <duration> element representing the number of days as an integer.\n- Ensure each <destination> element includes an <activities> element that contains one or more <activity> sub-elements, each with the activity name in plain text.\n- At least one <destination> element should include an optional <notes> element with additional comments in text.\n- The <itinerary> element must be properly closed after listing all <destination> elements."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001706_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "itinerary",
                                "itinerary[destination]",
                                "itinerary[destination][name]",
                                "itinerary[destination][arrival]",
                                "itinerary[destination][duration]",
                                "itinerary[destination][activities]",
                                "itinerary[destination][activities][activity]",
                                "itinerary[destination][notes]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a music festival schedule based on the given input text description of stages and performances.\n\nFeature Requirements:\n- The root element must be named <festival>.\n- Within the <festival>, include at least 3 <stage> elements.\n- Each <stage> element must have a <name> element containing the stage's name as text.\n- Each <stage> element should contain at least 2 <performance> elements.\n- Each <performance> element must include a <band> element with the band's name as text.\n- Each <performance> element must include a <time> element with a performance start time in 24-hour notation (e.g., 21:15).\n- Each <performance> element should include a <duration> element specifying the performance length in minutes as an integer.\n- Each <performance> element must include a <genre> element with the musical genre specified in text.\n- All XML elements must be correctly opened and closed in a proper hierarchical structure.\n- Elements containing textual content should have unique values to reflect different stages and performances.",
            "task_id": "001707",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "festival",
                "festival[stage]",
                "festival[stage][name]",
                "festival[stage][performance]",
                "festival[stage][performance][band]",
                "festival[stage][performance][time]",
                "festival[stage][performance][duration]",
                "festival[stage][performance][genre]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001707_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a music festival schedule based on the given input text description of stages and performances.\n\nFeature Requirements:\n- The root element must be named <festival>.\n- Within the <festival>, include at least 3 <stage> elements.\n- Each <stage> element must have a <name> element containing the stage's name as text.\n- Each <stage> element should contain at least 2 <performance> elements.\n- Each <performance> element must include a <band> element with the band's name as text.\n- Each <performance> element must include a <time> element with a performance start time in 24-hour notation (e.g., 21:15).\n- Each <performance> element should include a <duration> element specifying the performance length in minutes as an integer.\n- Each <performance> element must include a <genre> element with the musical genre specified in text.\n- All XML elements must be correctly opened and closed in a proper hierarchical structure.\n- Elements containing textual content should have unique values to reflect different stages and performances."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001707_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "festival",
                                "festival[stage]",
                                "festival[stage][name]",
                                "festival[stage][performance]",
                                "festival[stage][performance][band]",
                                "festival[stage][performance][time]",
                                "festival[stage][performance][duration]",
                                "festival[stage][performance][genre]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a museum art collection based on the input text description of various artworks.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <artwork> elements.\n- Each <artwork> element must have a <title> element containing the artwork's title in text.\n- Each <artwork> element must have an <artist> element with the artist's name in text.\n- Each <artwork> element should have a <yearCreated> element with exactly four numeric digits representing the creation year.\n- Each <artwork> element should contain a <medium> element that specifies the material or technique used, in text.\n- Each <artwork> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <artwork> element should include a <location> element that indicates the room or section where the artwork is displayed.\n- Ensure that all elements are properly opened and closed within the XML structure.",
            "task_id": "001708",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "collection",
                "collection[artwork]",
                "collection[artwork][title]",
                "collection[artwork][artist]",
                "collection[artwork][yearCreated]",
                "collection[artwork][medium]",
                "collection[artwork][price]",
                "collection[artwork][location]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001708_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a museum art collection based on the input text description of various artworks.\n\nFeature Requirements:\n- Include a root element named <collection>.\n- Within the <collection>, include at least 3 <artwork> elements.\n- Each <artwork> element must have a <title> element containing the artwork's title in text.\n- Each <artwork> element must have an <artist> element with the artist's name in text.\n- Each <artwork> element should have a <yearCreated> element with exactly four numeric digits representing the creation year.\n- Each <artwork> element should contain a <medium> element that specifies the material or technique used, in text.\n- Each <artwork> element must include a <price> element with a numerical value formatted to two decimal places.\n- Each <artwork> element should include a <location> element that indicates the room or section where the artwork is displayed.\n- Ensure that all elements are properly opened and closed within the XML structure."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001708_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "collection",
                                "collection[artwork]",
                                "collection[artwork][title]",
                                "collection[artwork][artist]",
                                "collection[artwork][yearCreated]",
                                "collection[artwork][medium]",
                                "collection[artwork][price]",
                                "collection[artwork][location]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    },
    {
        "data": {
            "query": "Please output XML:\n\nTask:\nGenerate an XML representation of a company's team directory based on the given input text description of employees.\n\nFeature Requirements:\n- Include a root element named <team>.\n- Within the <team>, include at least 3 <employee> elements.\n- Each <employee> element must contain a <name> element with the employee's full name in text.\n- Each <employee> element must include an <employeeID> element formatted as a 5-digit numeric string.\n- Each <employee> element must have a <department> element with the department name in text.\n- Include a <position> element in each <employee> with the job title in text.\n- Each <employee> element must include a <joiningDate> element with a date in YYYY-MM-DD format.\n- Include a <salary> element in each <employee> with a numerical value formatted to two decimal places.\n- Ensure the <team> element is properly closed after all <employee> elements are added.",
            "task_id": "001709",
            "task_name": "Text to XML",
            "input_type": "Text",
            "output_type": "XML",
            "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
            "VQA_questions": [],
            "VQA_answers": [],
            "raw_output_metric": [
                "team",
                "team[employee]",
                "team[employee][name]",
                "team[employee][employeeID]",
                "team[employee][department]",
                "team[employee][position]",
                "team[employee][joiningDate]",
                "team[employee][salary]"
            ]
        },
        "predictions": [
            {
                "result": [
                    {
                        "id": "001709_q",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "Please output XML:\n\nTask:\nGenerate an XML representation of a company's team directory based on the given input text description of employees.\n\nFeature Requirements:\n- Include a root element named <team>.\n- Within the <team>, include at least 3 <employee> elements.\n- Each <employee> element must contain a <name> element with the employee's full name in text.\n- Each <employee> element must include an <employeeID> element formatted as a 5-digit numeric string.\n- Each <employee> element must have a <department> element with the department name in text.\n- Include a <position> element in each <employee> with the job title in text.\n- Each <employee> element must include a <joiningDate> element with a date in YYYY-MM-DD format.\n- Include a <salary> element in each <employee> with a numerical value formatted to two decimal places.\n- Ensure the <team> element is properly closed after all <employee> elements are added."
                            ]
                        },
                        "to_name": "query",
                        "from_name": "queryAnswer"
                    },
                    {
                        "id": "001709_r",
                        "type": "textarea",
                        "value": {
                            "text": [
                                "team",
                                "team[employee]",
                                "team[employee][name]",
                                "team[employee][employeeID]",
                                "team[employee][department]",
                                "team[employee][position]",
                                "team[employee][joiningDate]",
                                "team[employee][salary]"
                            ]
                        },
                        "to_name": "raw_output_metric",
                        "from_name": "raw_output_answer"
                    }
                ]
            }
        ]
    }
]