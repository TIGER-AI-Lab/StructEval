[
    {
        "task_name": "Text to Angular",
        "task_id": "000100",
        "input_type": "Text",
        "output_type": "Angular",
        "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text ‘Data Overview’.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled ‘Refresh Data’, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to CSV",
        "task_id": "000200",
        "input_type": "Text",
        "output_type": "CSV",
        "query_example": "Please output CSV:\n\nTask:\nConvert the given text into a CSV representation of a fictional character list.\n\nFeature Requirements:\n- Include a first row with column headers: \"Character Name\", \"Age\", \"Occupation\", \"Location\".\n- Ensure all character names are unique and occupy the first column under the \"Character Name\" header.\n- Each \"Age\" entry must be an integer, appearing in the second column.\n- The \"Occupation\" column should include common professions such as \"Doctor\", \"Engineer\", \"Artist\", etc.\n- \"Location\" should list city names and must be included in the fourth column.\n- The CSV should contain exactly 10 rows of character data.\n- Ensure the CSV output does not have any blank rows between entries.\n- Each row, including the header, should have exactly 4 comma-separated values.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": false
    },
    {
        "task_name": "Text to Canvas",
        "task_id": "000300",
        "input_type": "Text",
        "output_type": "Canvas",
        "query_example": "Please output Canvas:\n\nTask:\nCreate a simple webpage displaying a personal profile summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Profile Summary\".\n- Display one <div> element containing a short paragraph with a maximum of 100 characters describing the individual.\n- Use a horizontal line (<hr>) to separate the title from the content below.\n- Include a two-column layout below the horizontal line, with each column equally occupying 50% of the available width.\n- The left column should contain a bulleted list with 3 hobbies, one per list item.\n- The right column should show a numbered list with 3 recent achievements, one per list item.\n- Use italics for the hobbies listed in the bulleted list.\n- Use bold font for the titles of each achievement in the numbered list.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to HTML",
        "task_id": "000400",
        "input_type": "Text",
        "output_type": "HTML",
        "query_example": "Please output HTML:\n\nTask:\nConvert a short paragraph of text describing a fruit into an HTML structure.\n\nFeature Requirements:\n- Include a title using an <h1> element with the text \"Fruit Description\".\n- Display the original paragraph inside a <p> element immediately after the title.\n- Add a horizontal line using the <hr> element below the paragraph for separation.\n- Include a section titled \"Nutritional Information\" using an <h2> element.\n- Display a bullet point list within a <ul> element containing exactly 3 items: \"Calories\", \"Vitamins\", and \"Minerals\".\n- Each list item should use an <li> element and be presented in the order specified.\n- End the HTML document with a closing <footer> element containing the text \"End of Description\".",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to JSON",
        "task_id": "000500",
        "input_type": "Text",
        "output_type": "JSON",
        "query_example": "Please output JSON:\n\nTask:\nConvert the input text into a structured JSON object containing specific details extracted from the text.\n\nFeature Requirements:\n- Include a \"summary\" key with a string value that summarizes the main point of the input text in no more than 50 words.\n- Extract all dates from the input text and list them under a \"dates\" key as an array of strings, formatted as \"YYYY-MM-DD\".\n- Identify all unique names mentioned in the input text and include them in a \"names\" key as an array of strings.\n- Count the total number of words in the input text and include this information as an integer value under a \"word_count\" key.\n- If any percentages are mentioned in the text, list them under a \"percentages\" key as an array of strings, retaining the original format (e.g., \"45%\").",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": false
    },
    {
        "task_name": "Text to Latex",
        "task_id": "00XX00",
        "input_type": "Text",
        "output_type": "Latex",
        "query_example": "Please output Latex:\n\nTask:\nConvert the given plain text arithmetic expression into a properly formatted mathematical expression in LaTeX.\n\nFeature Requirements:\n- The expression must begin with a \\begin{equation} and end with \\end{equation} tags.\n- Use the \\frac{}{} command to represent fractions, ensuring each fraction has both a numerator and a denominator.\n- Include parentheses around expressions where necessary to preserve order of operations.\n- All variables should be italicized using the standard LaTeX mathematical formatting.\n- Exponents must be represented using the caret symbol (^) followed by curly braces to enclose the exponent.\n- Use \\cdot or \\times for multiplication symbols between numbers or variables, but omit multiplication symbols between adjacent variables or between numbers and variables.\n- Ensure that any square root operations are formatted using the \\sqrt{} command.\n- Represent any summation using the \\sum notation with appropriate limits specified where applicable.\n- Include a proper spacing command (e.g., \\,, \\; or \\;) between different elements of the equation for better readability.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Markdown",
        "task_id": "000700",
        "input_type": "Text",
        "output_type": "Markdown",
        "query_example": "Please output Markdown:\n\nTask:\nConvert the given text into a formatted Markdown document featuring a simple report structure.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text ‘Summary Report’.\n- Display a subsection header using an <h2> element titled ‘Introduction’.\n- Present exactly 2 paragraphs of the introduction section.\n- Use an <h2> element for a subsection titled ‘Details’ followed by a bullet list.\n- The bullet list should contain exactly 4 items, each describing a different detail.\n- Include a final subsection titled ‘Conclusion’ using an <h2> element containing a single paragraph.\n- Ensure that all paragraphs consist of at least two sentences.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Matplotlib",
        "task_id": "000800",
        "input_type": "Text",
        "output_type": "Matplotlib",
        "query_example": "Please output Matplotlib:\n\nTask:\nGenerate a Matplotlib line plot using predefined data arrays representing time and temperature measurements.\n\nFeature Requirements:\n- Display a line plot with the x-axis labeled as \"Time (hours)\" and the y-axis labeled as \"Temperature (°C)\".\n- Include a title for the plot at the top with the text \"Temperature Over Time\".\n- Plot exactly 10 data points representing time intervals evenly distributed on the x-axis.\n- Use a solid blue line to connect the data points.\n- Add grid lines to both the x and y axes to enhance readability.\n- Include a legend in the upper left corner with the label \"Temp Data\".\n- Use a range from 0 to 24 for the x-axis and a range from 15 to 30 for the y-axis.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Mermaid",
        "task_id": "000900",
        "input_type": "Text",
        "output_type": "Mermaid",
        "query_example": "Please output Mermaid:\n\nTask:\nConvert a textual process description into a Mermaid flowchart diagram.\n\nFeature Requirements:\n- Include a title at the top of the flowchart labeled \"Process Flow\".\n- Display exactly 3 main process steps, each within a unique node, connected with arrows.\n- Use a diamond-shaped node to represent a decision point in the process.\n- Include at least one loopback arrow indicating a repeatable step in the process.\n- Ensure all nodes are linked in a sequential order, with clear directional flow indicated by arrows.\n- Apply a different color fill for start and end nodes to distinguish them visually.\n- Use rectangular nodes exclusively for action steps in the process.\n- Include a legend explaining the meaning of node shapes at the bottom of the diagram.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to TOML",
        "task_id": "001000",
        "input_type": "Text",
        "output_type": "TOML",
        "query_example": "Please output TOML:\n\nTask:\nConvert the given text into a structured TOML format.\n\nFeature Requirements:\n- Include a title and specify it under a `[title]` section with the key `name`.\n- Under the `[metadata]` section, list exactly two items: `author` and `version`, each with a corresponding string value.\n- Include a `[settings]` section containing three boolean keys: `enabled`, `visible`, and `editable`, each set to either true or false.\n- Provide a `[data]` section that contains exactly two arrays: `items` and `details`, each holding three numeric values.\n- Under the `[messages]` section, ensure there are exactly three keys: `info`, `warning`, and `error`, each associated with a non-empty string value.\n- Include a single-line comment at the beginning of the TOML file starting with `#` followed by the text \"Generated TOML Configuration\".\n- Ensure all string values in the TOML file are enclosed in double quotes.\n- Use consistent indentation of two spaces for nested elements within sections.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": false
    },
    {
        "task_name": "Text to React",
        "task_id": "001100",
        "input_type": "Text",
        "output_type": "React",
        "query_example": "Please output React:\n\nTask:\nGenerate a React component that displays a simple feedback form.\n\nFeature Requirements:\n- Include a centered header using an <h2> element with the text \"Feedback Form\".\n- Display a text input field with a placeholder text of \"Your Name\".\n- Include a textarea element with a placeholder text of \"Your Feedback\" and ensure it spans 3 rows.\n- Provide exactly two buttons at the bottom of the form labeled \"Submit\" and \"Reset\".\n- Ensure the \"Submit\" button is styled with a background color of blue.\n- Use a flexbox layout to center the form both vertically and horizontally on the page.\n- Implement a <p> element to display a thank you message below the form when the \"Submit\" button is clicked.\n- The form should include basic validation to ensure the text input and textarea are not empty before submission.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to SVG",
        "task_id": "001200",
        "input_type": "Text",
        "output_type": "SVG",
        "query_example": "Please output SVG:\n\nTask:\nGenerate an SVG image of a simple tree with a trunk and branches.\n\nFeature Requirements:\n1. The SVG should contain a single rectangle element to represent the trunk, positioned vertically in the center of the image, and it must have a width of 50 pixels and a height of 150 pixels.\n2. The trunk should be colored brown using the hexadecimal code #8B4513.\n3. The SVG should include three circles above the trunk to represent the tree's foliage, each with a radius of 60 pixels.\n4. The circles should be evenly spaced horizontally and centered above the trunk.\n5. Each circle should be filled with a green color using the hexadecimal code #228B22.\n6. The entire SVG canvas should have a width and height of 300 pixels for consistent centering and alignment.\n7. The trunk's bottom should align with the bottom of the SVG canvas, ensuring it appears grounded.\n8. Each circle should have a stroke outline of 2 pixels in black (#000000).",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Tikz",
        "task_id": "001300",
        "input_type": "Text",
        "output_type": "Tikz",
        "query_example": "Please output Tikz:\n\nTask:\nGenerate a Tikz diagram representing a simple network of nodes and edges.\n\nFeature Requirements:\n- Display exactly 5 nodes, each labeled with a unique number from 1 to 5.\n- Arrange the nodes in a circular layout with equal spacing between them.\n- Connect each node to exactly two other nodes with edges, forming a closed loop.\n- Use solid lines for the edges connecting the nodes.\n- Ensure all nodes are the same size and shape, specifically circles with a radius of 0.5 cm.\n- Position the entire diagram centered within a canvas of width 10 cm and height 10 cm.\n- Include a title centered above the diagram with the text \"Simple Network Graph\" in a bold font.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Typst",
        "task_id": "001400",
        "input_type": "Text",
        "output_type": "Typst",
        "query_example": "Please output Typst:\n\nTask: Convert a given text description into a Typst document showcasing the structure and components of a basic webpage.\n\nFeature Requirements:\n- Include a main title using a level-1 heading element with the text \"Webpage Overview\".\n- Display a section with a level-2 heading titled \"Introduction\" followed by a paragraph containing placeholder text.\n- Create exactly two subsections under \"Introduction\", each having a level-3 heading and a list of three bullet points with placeholder content.\n- Insert a centered section titled \"Conclusion\" using a level-2 heading with a single paragraph of placeholder text following it.\n- Implement a horizontal line separating the \"Introduction\" section from the \"Conclusion\" section.\n- Add a footer area containing a single line of centered text \"End of Document\" using a smaller font size than the main content.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Vega",
        "task_id": "001500",
        "input_type": "Text",
        "output_type": "Vega",
        "query_example": "Please output Vega:\n\nTask:\nCreate a Vega specification for a bar chart visualization of fictional sales data.\n\nFeature Requirements:\n- Include a title with the text \"Fictional Sales Data Chart\" displayed at the top of the visualization.\n- Display exactly 4 bars, each representing a unique product category.\n- Each bar must have a distinct color, ensuring no two bars share the same color.\n- Include a legend on the right side of the chart, mapping bar color to the corresponding product category.\n- Display numerical sales values directly above each bar.\n- Use the x-axis to label the product categories, ensuring each label is fully visible and not overlapping.\n- The y-axis should be formatted to display sales values in thousands, with labels every 10k increment.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to Vue",
        "task_id": "001600",
        "input_type": "Text",
        "output_type": "Vue",
        "query_example": "Please output Vue:\n\nTask:\nConvert a plain text shopping list into a Vue component that displays the items and quantities.\n\nFeature Requirements:\n- Render a title using an `<h1>` element with the text \"Shopping List\".\n- Display each shopping list item as an `<li>` element within a `<ul>`.\n- Each `<li>` should include the item name in regular text and the quantity in parentheses.\n- Utilize v-for to iterate over a predefined data array for items and quantities.\n- Apply a CSS class named \"item\" to each `<li>` element for styling purposes.\n- Render a button with the text \"Clear List\" that, when clicked, removes all items from the list.\n- Use an `<input>` element with a placeholder text \"Add new item\" above the list.\n- Provide an \"Add Item\" button next to the input field to append new items to the list.\n- Include a data property in the Vue component for tracking the number of items currently displayed.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": true
    },
    {
        "task_name": "Text to XML",
        "task_id": "001700",
        "input_type": "Text",
        "output_type": "XML",
        "query_example": "Please output XML:\n\nTask:\nGenerate an XML representation of a simple book catalog based on the given input text description of books.\n\nFeature Requirements:\n- Include a root element named `<catalog>`.\n- Within the `<catalog>`, have at least 2 `<book>` elements.\n- Each `<book>` element should contain a `<title>` element with the book's title in text.\n- Each `<book>` element should include an `<author>` element with the author's name in text.\n- Each `<book>` element must have a `<year>` element with four numeric characters representing the publication year.\n- Ensure each `<book>` element includes a `<price>` element with a numerical value formatted to two decimal places.\n- `<book>` elements should also contain a `<genre>` element with the genre name in text.\n- The `<catalog>` should be properly closed after all `<book>` elements.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": false
    },
    {
        "task_name": "Text to YAML",
        "task_id": "001800",
        "input_type": "Text",
        "output_type": "YAML",
        "query_example": "Please output YAML:\n\nTask:\nConvert the given text into a YAML format representing a shopping list.\n\nFeature Requirements:\n- Begin with a single key named `shopping_list`.\n- Include exactly 5 items as children under `shopping_list`.\n- Each item must have two keys: `name` and `quantity`.\n- All `name` keys should include non-empty string values.\n- All `quantity` keys should include integer values greater than zero.\n- Ensure the output is properly indented with two spaces for nested structures.\n- Provide a top-level comment indicating \"Generated Shopping List\".\n- Avoid any additional whitespace or empty lines between items.",
        "query": "",
        "raw_output_metric": [],
        "VQA": {},
        "rendering": false
    }
]