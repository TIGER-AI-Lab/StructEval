[
  {
    "task_id": "000100",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the given text input into an Angular component that presents a detailed user report view.\n\nFeature Requirements:\n- Include a centered header using an <h1> element displaying the text \"User Report Dashboard\".\n- Create a <div> container with a class name of 'report-wrapper' to encapsulate all component content.\n- Construct exactly 2 distinct sections: the first for user statistics and the second for activity logs.\n- The first section must render a table (<table>) element featuring exactly 2 rows and 3 columns; ensure the header row uses <th> elements to label each column.\n- Within the table, assign a CSS class named 'status-critical' to one specific cell to highlight an important statistic in bold text.\n- The second section should display a paragraph (<p>) with an inline style that sets the text color to green and the font style to italic.\n- Position a button labeled \"Update Report\" at the bottom using a <div> with a class 'button-area' for alignment.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered header?",
        "answer": "User Report Dashboard"
      },
      {
        "question": "How many main sections are present in the layout?",
        "answer": "2"
      },
      {
        "question": "What does the first section display?",
        "answer": "A table containing user statistics with 2 rows and 3 columns"
      },
      {
        "question": "How many columns are used in the header row of the table?",
        "answer": "3"
      },
      {
        "question": "Which cell within the table is highlighted with a special style?",
        "answer": "One cell marked with the 'status-critical' class and rendered in bold"
      },
      {
        "question": "What are the styling details of the paragraph in the second section?",
        "answer": "The text is green and italicized"
      },
      {
        "question": "What is the label on the button located at the bottom of the layout?",
        "answer": "Update Report"
      }
    ],
    "raw_output_metric": [
      "User Report Dashboard",
      "report-wrapper",
      "status-critical",
      "Update Report",
      "button-area",
      "<h1>",
      "<div class=\"report-wrapper\">",
      "<table>",
      "<th>",
      "<p>",
      "color: green",
      "font-style: italic",
      "{{"
    ],
    "rendering": true
  },
  {
    "task_id": "000101",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the given text input into an Angular component that renders an order summary display.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Order Summary'.\n- Create a <div> element serving as the main container with the class name 'order-container'.\n- Divide the component into exactly 3 distinct sections, each wrapped in its own <section> element.\n- The first section must render a table with a header row containing two columns labeled 'Item' and 'Quantity', followed by exactly 2 data rows populated with unique order details from the input.\n- The second section must display an <h3> element with the text 'Total Cost', followed by a paragraph (<p>) showing a calculated total; style this paragraph with an inline style that sets the text color to blue.\n- The third section must contain a <div> element with the class 'button-section' that holds a button element labeled 'Submit Order'.\n- Each table data cell in the first section should include text formatted as a label and a corresponding value separated by a hyphen (-).\n- Ensure that one of the table data cells in the first section includes a CSS class called 'highlight-item' which visually emphasizes its text with a bold font style.\n- Place all elements properly nested and ordered to reflect a clear structural hierarchy.\n- Do not include any external assets or images in the component.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered title displayed at the top of the component?",
        "answer": "Order Summary"
      },
      {
        "question": "What is the class name of the main container that wraps the content?",
        "answer": "order-container"
      },
      {
        "question": "How many distinct sections are rendered in the component?",
        "answer": "3"
      },
      {
        "question": "What header labels are displayed in the table within the first section?",
        "answer": "Item and Quantity"
      },
      {
        "question": "How many data rows are shown in the table below the headers?",
        "answer": "2"
      },
      {
        "question": "Which table cell is visually emphasized with bold styling?",
        "answer": "The cell with the 'highlight-item' class"
      },
      {
        "question": "What is the text displayed in the heading immediately above the total cost display?",
        "answer": "Total Cost"
      },
      {
        "question": "What inline style is applied to the paragraph showing the total cost?",
        "answer": "Text color is set to blue"
      },
      {
        "question": "What label is shown on the button within the third section?",
        "answer": "Submit Order"
      }
    ],
    "raw_output_metric": [
      "Order Summary",
      "order-container",
      "section",
      "table",
      "Item",
      "Quantity",
      "highlight-item",
      "Total Cost",
      "color: blue;",
      "button-section",
      "Submit Order"
    ],
    "rendering": true
  },
  {
    "task_id": "000102",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a bookstore inventory summary.\n\nFeature Requirements:\n- Include a centered <h1> element with the text \"Bookstore Inventory\" at the top of the component.\n- Use a <div> element with a class name of 'inventory-wrapper' to contain all the component elements.\n- Create exactly 3 sections, each wrapped in a <section> element, to organize distinct data groups.\n- In the first section, include a <table> element displaying exactly 4 rows and 2 columns; the first column for book titles and the second column for their prices.\n- In the second section, display a paragraph (<p>) that shows the input text content; apply an inline style to set the font-style as oblique.\n- In the third section, include an ordered list (<ol>) containing exactly 3 list items (<li>), each detailing a unique bookstore feature.\n- In the table from the first section, ensure that one of the price values is rendered in green by applying a CSS class called 'price-highlight' to that cell.\n- Place a button element labeled \"Update Inventory\" at the bottom of the component inside a <div> with the class 'update-wrapper' for proper alignment.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered heading at the top?",
        "answer": "Bookstore Inventory"
      },
      {
        "question": "How many sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many rows does the table in the first section display?",
        "answer": "4"
      },
      {
        "question": "How many columns does the table in the first section have?",
        "answer": "2"
      },
      {
        "question": "What unique styling is applied to one of the price cells in the table?",
        "answer": "Displayed in green"
      },
      {
        "question": "How is the text content in the second section styled?",
        "answer": "Oblique font style"
      },
      {
        "question": "How many items are listed in the ordered list in the third section?",
        "answer": "3"
      },
      {
        "question": "What label does the button at the bottom of the component display?",
        "answer": "Update Inventory"
      }
    ],
    "raw_output_metric": [
      "Bookstore Inventory",
      "inventory-wrapper",
      "<section>",
      "<table>",
      "<tr>",
      "<td>",
      "price-highlight",
      "font-style: oblique;",
      "<p>",
      "<ol>",
      "<li>",
      "Update Inventory",
      "update-wrapper"
    ],
    "rendering": true
  },
  {
    "task_id": "000105",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that presents a user profile overview with distinct sections for contact details, hobbies, and biography.\n\nFeature Requirements:\n- Create an <h1> element at the top with the text \"User Profile Overview\", and apply a CSS class 'header-center' to center the title.\n- Wrap all content in a <div> element with the class 'profile-container' for structural layout.\n- Include exactly 3 sections using <section> tags: the first for contact details, the second for hobbies, and the third for a biography.\n- The first section must contain an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a contact label and a phone number separated by a dash (-).\n- The second section should feature an unordered list (<ul>) with precisely 4 list items (<li>), each detailing a hobby and a brief description; ensure one of the hobby descriptions is styled with an inline style to set the text color to blue.\n- The third section must include a paragraph (<p>) that holds a biography text, with an inline style to justify the text alignment.\n- Position a button labeled \"Edit Profile\" at the bottom of the component within a <div> that has the class 'action-button' for precise placement.\n- Ensure that each section is visually separated by a horizontal rule (<hr>) placed between consecutive sections.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the page title displayed at the top?",
        "answer": "User Profile Overview"
      },
      {
        "question": "Is the title centered?",
        "answer": "Yes, it has a centered styling."
      },
      {
        "question": "How many sections are present in the profile?",
        "answer": "3"
      },
      {
        "question": "What does the first section show?",
        "answer": "An unordered list with 2 contact details (label and phone number)."
      },
      {
        "question": "How many hobby items are listed in the second section?",
        "answer": "4"
      },
      {
        "question": "Is any hobby description styled differently?",
        "answer": "Yes, one hobby description is styled with blue text."
      },
      {
        "question": "What element separates the sections?",
        "answer": "A horizontal rule is placed between each section."
      },
      {
        "question": "Where is the 'Edit Profile' button located?",
        "answer": "At the bottom inside a container designated for actions."
      }
    ],
    "raw_output_metric": [
      "User Profile Overview",
      "header-center",
      "profile-container",
      "<section>",
      "<ul>",
      "<li>",
      "<hr>",
      "Edit Profile",
      "color: blue",
      "<div>"
    ],
    "rendering": true
  },
  {
    "task_id": "000106",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays an organized list of recent book releases.\n\nFeature Requirements:\n- Create a centered <h1> element with the text 'Latest Books' at the top of the component.\n- Use a <div> element with a class name of 'books-wrapper' to act as the main container for all content.\n- Divide the component into exactly 3 sections, each wrapped in a <section> element.\n- In the first section, include a <table> element that lists exactly 2 book entries; each entry should be represented by a row containing two cells for the book title and author.\n- In the second section, add a <blockquote> element that displays a review excerpt; apply an inline style to the blockquote to set the text color to blue.\n- In the third section, create an unordered list (<ul>) that contains exactly 4 list items (<li>), where each item must show a label and a value separated by a dash (-); ensure one list item's value uses a CSS class named 'emphasis-green' to change its appearance.\n- Add a <footer> element at the bottom of the component containing a centered paragraph (<p>) with the text 'End of List'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered heading text at the top of the component?",
        "answer": "Latest Books"
      },
      {
        "question": "How many main sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many book entries are displayed in the table within the first section?",
        "answer": "2"
      },
      {
        "question": "What style is applied to the review excerpt in the blockquote?",
        "answer": "The text color is set to blue"
      },
      {
        "question": "How many list items are shown in the unordered list in the third section?",
        "answer": "4"
      },
      {
        "question": "What text is displayed in the footer's centered paragraph?",
        "answer": "End of List"
      }
    ],
    "raw_output_metric": [
      "Latest Books",
      "books-wrapper",
      "<section>",
      "<table>",
      "color: blue",
      "<ul>",
      "<li>",
      "emphasis-green",
      "<footer>",
      "<p>",
      "End of List",
      "<div>",
      "<h1>"
    ],
    "rendering": true
  },
  {
    "task_id": "000108",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that organizes user-specific information into a dashboard view.\n\nFeature Requirements:\n- Create a main container using a <div> element with the class name 'dashboard-container' to encapsulate all component content.\n- Place a centered <h1> element at the top of the component displaying the text 'User Dashboard Snapshot'.\n- Include exactly 2 distinct sections, each enclosed in a <section> element.\n- In the first section, create a table with exactly 3 rows and 2 columns; each row should display a label in the first column (using bold formatting) and a corresponding value in the second column.\n- Assign one table cell in the first section a CSS class 'critical' to ensure its text appears in red.\n- In the second section, add a paragraph (<p>) element with inline styling that sets the background color to 'lightblue' and displays a summary description.\n- At the bottom of the component, include a <div> element with the class 'button-wrapper' that contains a button labeled 'Update Dashboard'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main header text that appears at the top of the dashboard?",
        "answer": "User Dashboard Snapshot"
      },
      {
        "question": "How many sections are organized in this dashboard view?",
        "answer": "2"
      },
      {
        "question": "How many rows are shown in the table within the first section?",
        "answer": "3"
      },
      {
        "question": "What visual formatting is applied to the labels in the table's first column?",
        "answer": "They are displayed in bold text"
      },
      {
        "question": "How is critical information highlighted within the table?",
        "answer": "One table cell renders its text in red"
      },
      {
        "question": "What background color is applied to the paragraph in the second section?",
        "answer": "Lightblue"
      },
      {
        "question": "What text is visible on the button at the bottom of the component?",
        "answer": "Update Dashboard"
      }
    ],
    "raw_output_metric": [
      "dashboard-container",
      "User Dashboard Snapshot",
      "<section>",
      "<table>",
      "critical",
      "lightblue",
      "button-wrapper",
      "Update Dashboard"
    ],
    "rendering": true
  },
  {
    "task_id": "000111",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of recent financial transactions with detailed breakdowns.\n\nFeature Requirements:\n- Include a left-aligned title using an <h2> element with the text \u2018Transaction Summary\u2019.\n- Wrap the entire layout in a <section> element with a class name of 'transaction-section'.\n- Display exactly 3 distinct cards, each contained within a <div> element with a class \u2018transaction-card\u2019, arranged vertically.\n- The first card should include an unordered list (<ul>) with exactly 2 list items (<li>), each displaying a transaction ID and amount separated by a dash (-); ensure one of these transaction amounts is styled with a CSS class called 'highlight' to show green text.\n- The second card must contain a table (<table>) with one header row (<tr>) of two cells (<th>), labeled \u2018Date\u2019 and \u2018Details\u2019, where each header cell has a bottom border styled as \"2px solid blue\".\n- The third card should feature a paragraph (<p>) with inline styling that sets the font size to 14px and a button (<button>) labeled \u2018Load More\u2019 positioned at the bottom using a container <div> with class 'button-wrapper'.\n- At the end of the component, include a footer section with a <small> element that displays the text \u2018End of Transactions\u2019.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title text displayed at the top of the component?",
        "answer": "Transaction Summary"
      },
      {
        "question": "How many distinct cards are shown in the layout?",
        "answer": "3"
      },
      {
        "question": "How many list items are present in the first card's unordered list?",
        "answer": "2"
      },
      {
        "question": "What are the labels for the header cells in the second card's table?",
        "answer": "Date and Details"
      },
      {
        "question": "What bottom border style is applied to each header cell in the table?",
        "answer": "blue"
      },
      {
        "question": "What button is displayed in the third card and where is it positioned?",
        "answer": "Load More button positioned at the bottom"
      },
      {
        "question": "What text is visible in the footer section at the end of the component?",
        "answer": "End of Transactions"
      }
    ],
    "raw_output_metric": [
      "Transaction Summary",
      "transaction-section",
      "transaction-card",
      "highlight",
      "Date",
      "Details",
      "2px solid blue",
      "14px",
      "Load More",
      "button-wrapper",
      "End of Transactions"
    ],
    "rendering": true
  },
  {
    "task_id": "000112",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nDevelop an Angular component that presents detailed sales analytics data for a fictional product line.\n\nFeature Requirements:\n- Create a centered title using an <h2> element with the text \"Sales Analytics Summary\".\n- Wrap the content in a <div> element with a class name of \"analytics-container\" to structure the layout.\n- Divide the component into exactly 2 distinct sections using <section> elements.\n- In the first section, insert a table (<table>) that contains a header row with two <th> cells labeled \"Metric\" and \"Value\", and exactly 3 data rows (<tr>) each with 2 <td> cells displaying a sales metric and its corresponding value.\n- Ensure that one of the <td> elements in the table includes a CSS class called \"highlight\" to mark an important data point.\n- In the second section, include a paragraph (<p>) that displays a brief summary of the analytics, applying an inline style to set the font style to italic.\n- Add a button element labeled \"Load More Data\", positioned at the bottom of the component within a <div> element that has a class name of \"button-wrapper\".\n- Incorporate an inline style on the table to apply a border (e.g., \"border: 1px solid black;\") to all table cells.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text of the centered title at the top of the component?",
        "answer": "Sales Analytics Summary"
      },
      {
        "question": "How many sections is the component divided into?",
        "answer": "2"
      },
      {
        "question": "What are the labels in the header row of the table?",
        "answer": "Metric and Value"
      },
      {
        "question": "How many data rows are displayed in the table?",
        "answer": "3"
      },
      {
        "question": "Is any cell in the table marked with a special highlight?",
        "answer": "Yes"
      },
      {
        "question": "What inline border style is applied to the table cells?",
        "answer": "black"
      },
      {
        "question": "Where is the 'Load More Data' button located and what is its label?",
        "answer": "At the bottom of the component and the button is labeled 'Load More Data'"
      }
    ],
    "raw_output_metric": [
      "Sales Analytics Summary",
      "analytics-container",
      "<section>",
      "<table>",
      "border: 1px solid black;",
      "<th>",
      "Metric",
      "highlight",
      "<p>",
      "font-style: italic;",
      "Load More Data",
      "button-wrapper",
      "<h2>"
    ],
    "rendering": true
  },
  {
    "task_id": "000113",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nGenerate an Angular component that displays an event schedule with detailed information from the provided text input.\n\nFeature Requirements:\n- Create an Angular component that includes a prominent <h2> element with the text \"Event Schedule\" centered at the top.\n- Add a container <div> with a class name of \"event-container\" to wrap all the event content.\n- Include exactly 3 event sections, each within a separate <section> element with unique id attributes (e.g., event-1, event-2, event-3).\n- In the first event section, include a <p> element that displays event details with bold text styling.\n- In the first event section, also add an unordered list (<ul>) containing exactly 2 list items (<li>); each list item should show a label and a value separated by a dash (-) representing the event time and location.\n- In the second event section, display a paragraph (<p>) where the text is styled using an inline style to have its color set to blue.\n- In the third event section, include a <div> that shows an emphasized note (<em>) followed by a link (<a>) with the visible text \"More Info\" immediately below it.\n- Conclude the component with a button labeled \"Update Events\" placed within a <div> that has a class \"update-button\" at the bottom.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main header text displayed at the top of the component?",
        "answer": "Event Schedule"
      },
      {
        "question": "Where is the main header positioned?",
        "answer": "Centered at the top"
      },
      {
        "question": "How many event sections are visible in the schedule?",
        "answer": "3"
      },
      {
        "question": "How is the event details text in the first event section styled?",
        "answer": "Bold"
      },
      {
        "question": "How many list items are displayed in the first event section's list?",
        "answer": "2"
      },
      {
        "question": "What color is used for the text in the second event section's paragraph?",
        "answer": "Blue"
      },
      {
        "question": "What is immediately below the emphasized note in the third event section?",
        "answer": "A link labeled 'More Info'"
      },
      {
        "question": "What is the label on the button at the bottom of the component?",
        "answer": "Update Events"
      }
    ],
    "raw_output_metric": [
      "Event Schedule",
      "event-container",
      "event-1",
      "event-2",
      "event-3",
      "<p>",
      "<ul>",
      "<li>",
      "-",
      "blue",
      "<div>",
      "<em>",
      "<a>",
      "More Info",
      "Update Events",
      "update-button"
    ],
    "rendering": true
  },
  {
    "task_id": "000115",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents an interactive product summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Product Summary\" at the top of the component.\n- Use a <div> container with a class name of \"product-wrapper\" to encapsulate the component content.\n- Create exactly 2 distinct sections: the first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a product attribute in a \"label: value\" format.\n- In the first section's list, assign a unique CSS class \"alert-blue\" to one of the <li> elements to display its value text in blue.\n- The second section should contain a paragraph (<p>) with a brief description, styled with an inline style that sets the text color to green.\n- Position a button labeled \"Update Summary\" at the bottom of the component inside a <div> with the class \"action-button-box\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title displayed at the top of the component?",
        "answer": "Product Summary"
      },
      {
        "question": "How many distinct sections are visible in the component?",
        "answer": "2"
      },
      {
        "question": "How many bullet points are shown in the first section?",
        "answer": "4"
      },
      {
        "question": "Which list item is uniquely styled?",
        "answer": "One list item has its value text displayed in blue"
      },
      {
        "question": "What is the text color of the paragraph in the second section?",
        "answer": "Green"
      },
      {
        "question": "What label does the button at the bottom display?",
        "answer": "Update Summary"
      }
    ],
    "raw_output_metric": [
      "Product Summary",
      "product-wrapper",
      "<ul>",
      "<li>",
      "alert-blue",
      "<p>",
      "green",
      "Update Summary",
      "action-button-box"
    ],
    "rendering": true
  },
  {
    "task_id": "000116",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that renders a dashboard with two distinct sections showcasing structured data.\n\nFeature Requirements:\n- Include a centered main title using an <h1> element with the text \"Dashboard Overview\" via an inline style for text-align.\n- Use a <div> element as a container with a class name of \"main-dashboard\" to wrap the entire component.\n- Create exactly 2 sections using the <section> element; the first section must include a table representing key-value pairs.\n- Within the first section, add a table with a header (<thead>) containing exactly 2 columns labeled \"Parameter\" and \"Value\", and a body (<tbody>) with exactly 3 rows, where each row contains 2 cells; ensure that one of the value cells in the table uses a CSS class \"alert-blue\" to style its text color.\n- In the second section, display a blockquote (<blockquote>) that presents processed input text and apply an inline style to set the font style to italic.\n- Add a paragraph (<p>) element below the sections with the text \"End of Dashboard\" and an inline style that aligns the text to the right.\n- Include a button with the label \"Submit Report\", placed at the bottom inside a <div> element with a class name of \"btn-wrapper\" for proper alignment.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main title displayed on the dashboard?",
        "answer": "Dashboard Overview"
      },
      {
        "question": "How is the main title aligned?",
        "answer": "Centered"
      },
      {
        "question": "How many sections are present in the dashboard layout?",
        "answer": "2"
      },
      {
        "question": "What are the table header labels in the first section?",
        "answer": "Parameter and Value"
      },
      {
        "question": "How many rows of key-value pairs are visible in the table?",
        "answer": "3"
      },
      {
        "question": "Which cell is uniquely styled with the alert-blue class?",
        "answer": "One of the value cells"
      },
      {
        "question": "Which element displays processed input text in an italic style?",
        "answer": "Blockquote"
      },
      {
        "question": "What text is shown in the right-aligned paragraph below the sections?",
        "answer": "End of Dashboard"
      },
      {
        "question": "What label is on the button at the bottom of the dashboard?",
        "answer": "Submit Report"
      }
    ],
    "raw_output_metric": [
      "Dashboard Overview",
      "main-dashboard",
      "Parameter",
      "Value",
      "alert-blue",
      "End of Dashboard",
      "btn-wrapper",
      "Submit Report"
    ],
    "rendering": true
  },
  {
    "task_id": "000119",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a dashboard summary of recent activities.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Dashboard'.\n- Use a container <div> element with a class name 'dashboard-main' to wrap the entire component.\n- Render exactly 3 modules, each enclosed within a <section> element with unique content.\n- The first module should display a table with precisely 2 rows and 3 columns, each cell showing different parts of the input.\n- The second module must include an ordered list (<ol>) with exactly 4 list items, each beginning with a distinct number followed by information from the input.\n- The third module should contain a blockquote (<blockquote>) that presents a motivational quote, applying a CSS class named 'quote-style' for styling.\n- Add a footer <footer> element containing a centered <p> element with the text 'Last updated: Today', styled with an inline background color set to lightgrey.\n- Place a button labeled 'Update Dashboard' at the bottom of the component inside a <div> element with the class 'update-btn'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered main header?",
        "answer": "Activity Dashboard"
      },
      {
        "question": "How many modules are displayed in the dashboard summary?",
        "answer": "3"
      },
      {
        "question": "How many rows and columns does the table in the first module have?",
        "answer": "2 rows and 3 columns"
      },
      {
        "question": "How many items are shown in the ordered list of the second module?",
        "answer": "4"
      },
      {
        "question": "Does each item in the ordered list start with a distinct number?",
        "answer": "Yes"
      },
      {
        "question": "What text is visible in the footer and what is its background highlight?",
        "answer": "Last updated: Today with an inline lightgrey background"
      },
      {
        "question": "What label is displayed on the update button at the bottom of the component?",
        "answer": "Update Dashboard"
      }
    ],
    "raw_output_metric": [
      "Activity Dashboard",
      "dashboard-main",
      "<section>",
      "<ol>",
      "<blockquote>",
      "quote-style",
      "<footer>",
      "Last updated: Today",
      "lightgrey",
      "Update Dashboard",
      "update-btn"
    ],
    "rendering": true
  },
  {
    "task_id": "000122",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a user profile dashboard with organized data sections.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \u2018User Profile Dashboard\u2019.\n- Use a <div> element to create a container with a class name of 'profile-container' for layout organization.\n- Create exactly 2 main sections using <section> elements, each presenting different data formats.\n- In the first section, implement a table (<table>) that contains exactly 3 rows (<tr>), with each row having 2 cells (<td>) where the first cell is a label and the second cell is a value.\n- Ensure that one row in the table has its value cell styled by including a CSS class called 'alert-yellow' to change its background color.\n- In the second section, display a paragraph (<p>) element that shows descriptive text with an inline style setting its color to blue.\n- Add a form (<form>) element below the sections that includes an input field and a submit button labeled \u2018Update Profile\u2019.\n- Wrap the form element inside a <div> with a class name 'form-container' to control its positioning.\n- Conclude the component with a footer (<footer>) element that contains the text \u2018Last updated: today\u2019 positioned at the bottom of the view.\n- Arrange all elements in a clear and hierarchical structure to ensure the data is visibly separated and organized.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed at the top center of the dashboard?",
        "answer": "User Profile Dashboard"
      },
      {
        "question": "How many main data sections are visible in the interface?",
        "answer": "2"
      },
      {
        "question": "How many table rows are presented in the first section?",
        "answer": "3"
      },
      {
        "question": "In the table, how many cells are there per row and what distinguishes one of the value cells?",
        "answer": "2 cells per row, with one value cell having a yellow background styling"
      },
      {
        "question": "What styling is applied to the descriptive text in the second section?",
        "answer": "It is colored blue"
      },
      {
        "question": "What is the label on the submit button in the form area?",
        "answer": "Update Profile"
      },
      {
        "question": "What text is shown in the footer at the bottom of the view?",
        "answer": "Last updated: today"
      }
    ],
    "raw_output_metric": [
      "User Profile Dashboard",
      "profile-container",
      "section",
      "table",
      "tr",
      "td",
      "alert-yellow",
      "blue",
      "Update Profile",
      "form-container",
      "footer",
      "Last updated: today"
    ],
    "rendering": true
  },
  {
    "task_id": "000123",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the text input into an Angular component that displays various metric categories in a structured layout.\n\nFeature Requirements:\n- Add a centered <h1> element at the top with the text \"User Metrics Dashboard\".\n- Enclose all component content within a <div> element having the class name \"dashboard-container\".\n- Create exactly 3 <article> sections, each representing a distinct metric category with its own header.\n- Within each <article>, include a <h3> element that displays the category name and an unordered list (<ul>) that contains exactly 2 list items (<li>), each showing a metric label and its numeric value separated by a dash (-).\n- In the first <article>, wrap the numeric value in each list item inside a <strong> tag for emphasis.\n- Ensure that in one of the unordered lists, one <li> element uses a CSS class \"highlight\" to alter the text color.\n- For the third <article>, add an inline style to the <h3> element that underlines the text.\n- Insert a <footer> element with the class \"details-footer\" at the bottom, inside which a clickable <a> element is present with the text \"View Details\" and an href attribute set to \"#\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered header at the top of the component?",
        "answer": "User Metrics Dashboard"
      },
      {
        "question": "How many article sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many list items are contained within each article's unordered list?",
        "answer": "2"
      },
      {
        "question": "Which article wraps the numeric values in a bold style?",
        "answer": "The first article"
      },
      {
        "question": "Which article's header is styled to be underlined?",
        "answer": "The third article"
      },
      {
        "question": "What is the text for the link inside the footer?",
        "answer": "View Details"
      }
    ],
    "raw_output_metric": [
      "User Metrics Dashboard",
      "dashboard-container",
      "article",
      "h3",
      "ul",
      "li",
      "strong",
      "highlight",
      "details-footer",
      "View Details",
      "href=\"#\"",
      "-"
    ],
    "rendering": true
  },
  {
    "task_id": "000124",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the given narrative into an Angular component that renders an interactive analytics panel.\n\nFeature Requirements:\n- Begin with an <h1> element centered on the page displaying the text \"Analytics Panel\".\n- Wrap all content inside a <div> element with a class name \"analytics-wrapper\".\n- Create exactly 3 sections using <section> elements, each showing a distinct aspect of the narrative.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents a key statistic in the format \"Label: Value\".\n- In one of the list items in the ordered list, apply a CSS class \"emphasis-blue\" so that its text appears in blue.\n- In the second section, display a paragraph (<p>) that uses an inline style to set the text color to green and the font style to italic.\n- In the third section, construct a table consisting of one header row and one data row; the header row must have 2 header cells (<th>) labeled \"Parameter\" and \"Value\", with the data row showcasing corresponding content.\n- At the bottom of the component, include a <div> element with the class \"action-panel\" containing a button labeled \"Reload Metrics\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main title displayed at the top of the panel?",
        "answer": "Analytics Panel"
      },
      {
        "question": "How many sections are present in the analytics panel?",
        "answer": "3"
      },
      {
        "question": "How many list items are shown in the first section's ordered list?",
        "answer": "4"
      },
      {
        "question": "What unique styling is applied to the paragraph in the second section?",
        "answer": "Green text color and italic font style"
      },
      {
        "question": "What are the header labels displayed in the table?",
        "answer": "Parameter and Value"
      },
      {
        "question": "What label is shown on the button at the bottom of the component?",
        "answer": "Reload Metrics"
      }
    ],
    "raw_output_metric": [
      "Analytics Panel",
      "analytics-wrapper",
      "<section>",
      "<ol>",
      "<li>",
      "Label: Value",
      "emphasis-blue",
      "<p>",
      "green",
      "italic",
      "<th>",
      "Parameter",
      "Value",
      "action-panel",
      "Reload Metrics"
    ],
    "rendering": true
  },
  {
    "task_id": "000125",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays organized user information in a dashboard format.\n\nFeature Requirements:\n- Include a top header using an <h1> element with the text \"User Statistics Dashboard\".\n- Wrap all elements inside a <div> with the class name 'dashboard-container'.\n- Create exactly 3 sections, each enclosed in a <section> element containing distinct content.\n- In the first section, display a table (<table>) with exactly 2 rows (<tr>) and 2 cells (<td>) per row, using data from the input.\n- In the second section, implement an ordered list (<ol>) with exactly 4 list items (<li>), each presenting a unique detail from the input.\n- In the third section, include a paragraph (<p>) with inline styling that transforms the text to uppercase.\n- Apply a CSS class 'row-highlight' to every even-numbered table row within the table in the first section.\n- At the bottom of the component, add a footer <div> with the class 'footer-section' that contains a button labeled \"Update Info\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the page title displayed at the top?",
        "answer": "User Statistics Dashboard"
      },
      {
        "question": "How many sections are present in the dashboard?",
        "answer": "3"
      },
      {
        "question": "How many rows and cells does the table in the first section contain?",
        "answer": "2 rows and 2 cells per row"
      },
      {
        "question": "How many items are listed in the ordered list of the second section?",
        "answer": "4"
      },
      {
        "question": "How is the text in the paragraph of the third section displayed?",
        "answer": "In uppercase"
      },
      {
        "question": "What does the button in the footer section display?",
        "answer": "Update Info"
      }
    ],
    "raw_output_metric": [
      "User Statistics Dashboard",
      "dashboard-container",
      "<section>",
      "<table>",
      "<tr>",
      "<td>",
      "row-highlight",
      "<ol>",
      "<li>",
      "<p>",
      "footer-section",
      "Update Info"
    ],
    "rendering": true
  },
  {
    "task_id": "000126",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a weather forecast report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report' at the top of the component.\n- Use a <div> element with a class name of 'weather-body' to contain all the component content.\n- Create exactly 2 sections, each wrapped in a <section> element with distinct weather-related content.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each displaying a weather parameter (e.g., Temperature, Humidity, Wind Speed, Pressure) from the input, with each item formatted as a label and a value separated by a colon (:).\n- Ensure that one of the list items has its value text colored blue by using a CSS class called 'highlight-blue'.\n- The second section should contain a paragraph (<p>) that displays a brief weather description, with inline style applied to make the text bold.\n- At the bottom of the component, add a button element labeled 'Update Forecast', enclosed within a <div> element with a class name of 'action-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title displayed at the top of the component?",
        "answer": "Weather Report"
      },
      {
        "question": "How many sections are visible in the component?",
        "answer": "2"
      },
      {
        "question": "How many list items are displayed in the first weather section?",
        "answer": "4"
      },
      {
        "question": "How is the brief weather description styled in the second section?",
        "answer": "It is displayed in bold text"
      },
      {
        "question": "What text appears on the button at the bottom of the component?",
        "answer": "Update Forecast"
      }
    ],
    "raw_output_metric": [
      "Weather Report",
      "weather-body",
      "Temperature",
      "Humidity",
      "Wind Speed",
      "Pressure",
      "highlight-blue",
      "bold",
      "action-container",
      "Update Forecast"
    ],
    "rendering": true
  },
  {
    "task_id": "000129",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that displays categorized, data-driven content.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Activity Report'.\n- Create a container <div> with the class 'activity-container' that wraps the entire component.\n- Add exactly 3 sections, each enclosed in a <section> element, with each section designated for a different category of information.\n- In the first section, render an ordered list (<ol>) containing exactly 4 list items (<li>), where each item shows a label and a corresponding value separated by a hyphen (-); ensure one of the list items has its text underlined via an inline CSS style.\n- In the second section, construct a table with 2 rows: the first row for column headers and the second row displaying data extracted from the input.\n- In the third section, display a paragraph (<p>) styled with an inline style that sets the text color to blue and the font weight to bold.\n- Place a button labeled 'Update Report' inside a <div> with the class 'action-container', ensuring it is positioned at the bottom of the component.\n- Embed an Angular data binding expression within the list items to allow dynamic content population.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is displayed in the centered header?",
        "answer": "Activity Report"
      },
      {
        "question": "How many sections are visible in the component?",
        "answer": "3"
      },
      {
        "question": "How many list items are in the ordered list of the first section?",
        "answer": "4"
      },
      {
        "question": "What special style is applied to one of the list items in the first section?",
        "answer": "Its text is underlined"
      },
      {
        "question": "How many rows does the table in the second section have?",
        "answer": "2"
      },
      {
        "question": "What inline styles are applied to the paragraph in the third section?",
        "answer": "Blue text color and bold font"
      },
      {
        "question": "What text is shown on the button at the bottom of the component?",
        "answer": "Update Report"
      }
    ],
    "raw_output_metric": [
      "Activity Report",
      "activity-container",
      "<h1>",
      "activity-container",
      "<ol>",
      "<li>",
      "-",
      "blue",
      "action-container",
      "Update Report",
      "bold"
    ],
    "rendering": true
  },
  {
    "task_id": "000132",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a weekly weather forecast overview.\n\nFeature Requirements:\n- Create a centered header using an <h1> element with the text \"Weekly Weather Forecast\" at the top of the component.\n- Wrap all content in a <div> element with a class name of 'weather-wrapper' for layout purposes.\n- Include exactly 3 sections, each enclosed within a <section> element and containing uniquely labeled content.\n- The first section must display a table with a header row and exactly 4 data rows; the table should have 2 columns labeled \"Time\" and \"Temperature\".\n- The second section should contain an ordered list (<ol>) with exactly 5 list items, each representing a specific weather tip.\n- The third section must include a paragraph (<p>) that provides a brief summary of the weekly forecast and apply an inline style to change the text color to green.\n- At the bottom of the component, add a button labeled \"Update Forecast\" placed within a <div> with the class 'update-button' to ensure proper positioning.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main header text displayed at the top of the component?",
        "answer": "Weekly Weather Forecast"
      },
      {
        "question": "How many sections are visible in the component?",
        "answer": "3"
      },
      {
        "question": "What are the names of the two columns in the table?",
        "answer": "Time and Temperature"
      },
      {
        "question": "How many rows of weather data (excluding the header) are in the table?",
        "answer": "4"
      },
      {
        "question": "How many weather tips are listed in the ordered list?",
        "answer": "5"
      },
      {
        "question": "What element contains the summary of the weekly forecast and what is its text color?",
        "answer": "A paragraph with green text"
      },
      {
        "question": "What label does the button at the bottom display?",
        "answer": "Update Forecast"
      }
    ],
    "raw_output_metric": [
      "Weekly Weather Forecast",
      "weather-wrapper",
      "<h1>",
      "<section>",
      "<table>",
      "Time",
      "Temperature",
      "<ol>",
      "<p>",
      "green",
      "Update Forecast",
      "update-button"
    ],
    "rendering": true
  },
  {
    "task_id": "000134",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents detailed event information in a structured layout.\n\nFeature Requirements:\n- Include a centered header element (<h1>) at the top containing the text \"Event Details\".\n- Use a <div> element with a class name of 'event-container' to wrap the entire component content.\n- Display exactly 3 sections, each wrapped inside a <section> element.\n- The first section must feature an unordered list (<ul>) with exactly 3 list items (<li>), where each item displays a label and a value separated by a colon; one of these list items should apply a CSS class \"highlight-blue\" to its value text.\n- The second section should include a paragraph (<p>) that shows additional event descriptions and uses an inline style to set the font color to green.\n- The third section must contain a table (<table>) with a header row and exactly 2 data rows summarizing key event metrics.\n- At the bottom of the component, add a <div> with a class name of 'footer-container' that contains a button labeled \"Submit Feedback\".\n- Ensure each structured element is clearly organized to match the designated Angular component layout.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What text is displayed in the centered header at the top?",
        "answer": "Event Details"
      },
      {
        "question": "How many sections are present in the component layout?",
        "answer": "3"
      },
      {
        "question": "How many list items appear in the first section's unordered list?",
        "answer": "3"
      },
      {
        "question": "What font color is applied to the paragraph in the second section?",
        "answer": "Green"
      },
      {
        "question": "How many data rows are shown in the table's body in the third section?",
        "answer": "2"
      },
      {
        "question": "What label is visible on the button at the bottom of the component?",
        "answer": "Submit Feedback"
      }
    ],
    "raw_output_metric": [
      "Event Details",
      "event-container",
      "<section>",
      "<ul>",
      "<li>",
      "highlight-blue",
      "<p>",
      "green",
      "<table>",
      "footer-container",
      "Submit Feedback"
    ],
    "rendering": true
  },
  {
    "task_id": "000135",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text into an Angular component that displays structured product inventory details.\n\nFeature Requirements:\n- Include an <h3> element centered at the top with the text 'Product Inventory Report'.\n- Use a <div> element with a class name of 'inventory-container' to serve as the main layout container.\n- Create exactly 3 <section> elements, each dedicated to a different aspect: product details, pricing information, and stock availability.\n- In the first section, display a table (<table>) with a header (<thead>) and a body (<tbody>) that contains exactly 2 data rows and 3 columns; apply inline styles to the table borders for clarity.\n- Ensure that the first column in the table has bold text by using a CSS class named 'bold-cell'.\n- In the second section, include a paragraph (<p>) that provides summary pricing details and apply an inline style to set the background color to light yellow.\n- In the third section, present a nested unordered list (<ul>) with exactly 2 list items; each list item should consist of a bold label followed by a hyphen and descriptive text.\n- At the bottom of the component, add a <div> element with the class 'footer-container' that contains a button labeled 'Update Inventory', and center this button within the container.\n- Ensure all elements are structured clearly and are directly visible in the output.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered header text displayed at the top?",
        "answer": "Product Inventory Report"
      },
      {
        "question": "How many distinct sections are visible in the layout?",
        "answer": "3"
      },
      {
        "question": "How many rows and columns are in the product details table in the first section?",
        "answer": "2 rows and 3 columns"
      },
      {
        "question": "What style is applied to the first column of the table?",
        "answer": "Bold text"
      },
      {
        "question": "What background color is applied to the summary pricing paragraph in the second section?",
        "answer": "Light yellow"
      },
      {
        "question": "How many list items are presented in the stock availability section?",
        "answer": "2"
      },
      {
        "question": "What label is shown on the button within the footer area?",
        "answer": "Update Inventory"
      }
    ],
    "raw_output_metric": [
      "Product Inventory Report",
      "inventory-container",
      "<section>",
      "<table>",
      "<thead>",
      "<tbody>",
      "bold-cell",
      "<p>",
      "lightyellow",
      "<ul>",
      "<li>",
      "footer-container",
      "Update Inventory"
    ],
    "rendering": true
  },
  {
    "task_id": "000137",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the given survey summary input into an Angular component that organizes detailed survey metrics and user interaction elements.\n\nFeature Requirements:\n- Add a header using an <h1> element with the text \"Survey Results Summary\" centered at the top of the component.\n- Wrap the entire layout in a <div> container with the class name 'survey-container' to manage the overall spacing and alignment.\n- Create exactly 3 distinct <section> elements arranged sequentially within the container, each serving a different purpose.\n- In the first section, display a table (<table>) with 2 columns and 3 rows; the first column should list survey questions, and the second column should show the corresponding answer counts.\n- In the second section, include a paragraph (<p>) that provides an overall analysis, using an inline style to set the text color to blue for emphasis.\n- In the third section, create a simple form (<form>) that contains one text <input> field for additional feedback and one <button> element labeled \"Submit Comment\" for user submissions.\n- Ensure that one specific table row in the first section is styled with an inline style setting its background-color to lightgray.\n- Place an extra button with the class name 'refresh-btn' at the top of the survey container and label it \"Reload Survey\" to indicate reloading of data.\n- Finally, include a footer area using a <div> element with the class 'footer-area' that displays static text \"Data Verified\" at the very bottom.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the header text displayed at the top of the component?",
        "answer": "Survey Results Summary"
      },
      {
        "question": "What class name is assigned to the container wrapping the entire layout?",
        "answer": "survey-container"
      },
      {
        "question": "How many section elements are arranged within the layout?",
        "answer": "3"
      },
      {
        "question": "What are the dimensions of the table in the first section?",
        "answer": "2 columns and 3 rows"
      },
      {
        "question": "What inline style is used for the paragraph in the second section?",
        "answer": "text color set to blue"
      },
      {
        "question": "What elements are present in the form in the third section?",
        "answer": "one text input and one button labeled 'Submit Comment'"
      },
      {
        "question": "What is the label of the extra button at the top of the container?",
        "answer": "Label is 'Reload Survey'"
      },
      {
        "question": "What text is displayed in the footer area?",
        "answer": "Data Verified"
      }
    ],
    "raw_output_metric": [
      "Survey Results Summary",
      "survey-container",
      "<h1>",
      "<div>",
      "<section>",
      "table",
      "lightgray",
      "blue",
      "form",
      "input",
      "Submit Comment",
      "Reload Survey",
      "refresh-btn",
      "footer-area",
      "Data Verified"
    ],
    "rendering": true
  },
  {
    "task_id": "000138",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that showcases detailed movie information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Movie Insights'.\n- Wrap all content within a <div> element assigned with the class name 'movie-container' for layout.\n- Feature exactly 3 sections, each enclosed in a <section> element containing distinct movie-related content.\n- The first section must display an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as a label and value separated by a colon, and one list item\u2019s value must be colored blue using a CSS class 'highlight-blue'.\n- The second section should contain a paragraph (<p>) with inline styling that sets the text to bold and green.\n- The third section must include a table element with exactly 2 columns (\"Attribute\" and \"Value\") and exactly 3 rows of movie statistics.\n- Place a button labeled 'Reload Movies' at the bottom of the component inside a <div> element with the class 'action-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered title displayed at the top of the component?",
        "answer": "Movie Insights"
      },
      {
        "question": "How many sections are visible in the component?",
        "answer": "3"
      },
      {
        "question": "How many items are present in the unordered list of the first section?",
        "answer": "4"
      },
      {
        "question": "Is any list item\u2019s value highlighted in blue?",
        "answer": "Yes"
      },
      {
        "question": "How is the paragraph in the second section styled?",
        "answer": "Bold and green"
      },
      {
        "question": "What are the headers of the table in the third section?",
        "answer": "Attribute and Value"
      },
      {
        "question": "How many rows of movie statistics are shown in the table?",
        "answer": "3"
      },
      {
        "question": "What label is on the button at the bottom of the component?",
        "answer": "Reload Movies"
      }
    ],
    "raw_output_metric": [
      "Movie Insights",
      "movie-container",
      "<section>",
      "<ul>",
      "<li>",
      "highlight-blue",
      "bold",
      "<table>",
      "Attribute",
      "Value",
      "Reload Movies",
      "action-container",
      "green"
    ],
    "rendering": true
  },
  {
    "task_id": "000139",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays dynamic product details in a structured layout.\n\nFeature Requirements:\n- Display a centered main header using an <h1> element with the text 'Product Information'.\n- Include a sidebar within a <nav> element that has a class named 'sidebar-info' positioned on the left.\n- Create exactly 3 separate sections, each wrapped in a <section> element, with each section dedicated to a specific category of product details.\n- The first section should render a table with exactly 3 rows and 2 columns, where each row presents a feature name and its corresponding value.\n- The second section must include an ordered list (<ol>) with exactly 4 items showing sequential product usage steps.\n- The third section should display a paragraph (<p>) with inline styling that sets the text color to blue and the font weight to bold.\n- Add a footer area using a <div> element with the class 'footer-container' that contains a button labeled 'Update Info', aligned to the right within this container.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the main header?",
        "answer": "Product Information"
      },
      {
        "question": "How many sections are visible on the page?",
        "answer": "3"
      },
      {
        "question": "How many rows and columns are shown in the product details table?",
        "answer": "3 rows and 2 columns"
      },
      {
        "question": "How many items are featured in the ordered list for product usage?",
        "answer": "4"
      },
      {
        "question": "What are the color and font style of the paragraph in the third section?",
        "answer": "Blue and bold"
      },
      {
        "question": "Where is the sidebar positioned on the page?",
        "answer": "Left"
      },
      {
        "question": "What label is written on the footer button?",
        "answer": "Update Info"
      },
      {
        "question": "How is the footer button aligned within its container?",
        "answer": "Right"
      }
    ],
    "raw_output_metric": [
      "Product Information",
      "sidebar-info",
      "<section>",
      "<ol>",
      "<li>",
      "<p",
      "blue",
      "bold",
      "footer-container",
      "<button>",
      "Update Info"
    ],
    "rendering": true
  },
  {
    "task_id": "000140",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a concise weather update interface.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Weather Update' at the top.\n- Use a <div> element to create a container with a class name of 'weather-container' for layout structure.\n- Display exactly 3 sections, each wrapped in a <section> element with distinct content.\n- The first section should contain an unordered list (<ul>) with exactly 4 list items (<li>), each showing a different weather metric in the format of \"Metric: value\".\n- The second section must display a paragraph (<p>) with inline styling to set the text color to blue.\n- The third section should feature a table with 2 columns and exactly 2 rows (excluding headers) to show forecast details.\n- One of the list items in the first section must have its value text colored by applying a CSS class called 'alert-yellow'.\n- Add a button element labeled 'Update Forecast', positioned at the bottom of the component within a <div> with the class 'update-button-container'.\n- Ensure all HTML elements are organized logically to form a cohesive Angular component.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title displayed at the top of the component?",
        "answer": "Weather Update"
      },
      {
        "question": "How many sections are visible in the layout?",
        "answer": "3"
      },
      {
        "question": "In the first section, how many weather metrics are listed?",
        "answer": "4"
      },
      {
        "question": "Does one of the metrics in the first section display its value with a yellow highlight?",
        "answer": "Yes"
      },
      {
        "question": "What is the text color of the paragraph in the second section?",
        "answer": "Blue"
      },
      {
        "question": "How many columns are in the forecast table shown in the third section?",
        "answer": "2"
      },
      {
        "question": "How many rows (excluding headers) does the forecast table contain?",
        "answer": "2"
      },
      {
        "question": "What label is shown on the button at the bottom of the component?",
        "answer": "Update Forecast"
      }
    ],
    "raw_output_metric": [
      "<h2>Weather Update</h2>",
      "weather-container",
      "<section>",
      "<ul>",
      "<li>",
      ":",
      "alert-yellow",
      "blue",
      "<table>",
      "Update Forecast",
      "update-button-container"
    ],
    "rendering": true
  },
  {
    "task_id": "000141",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays detailed system status information using a card layout.\n\nFeature Requirements:\n- Include a header with an <h1> element containing the text 'System Status' and align it to the left.\n- Create a primary container using a <div> element with the class name 'status-card'.\n- Render exactly 3 sections, each enclosed in a <section> element: one for system configuration, one for error logs, and one for performance metrics.\n- In the system configuration section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a label and value pair separated by a colon.\n- In the error logs section, display a paragraph (<p>) that shows a warning message; apply a CSS class named 'warning' to change the text color to orange.\n- In the performance metrics section, incorporate a table containing a single row and 2 columns that present a metric name and its corresponding value.\n- Add a footer element that includes a button labeled 'Update Status', positioned within a <div> element with the class 'footer-btn'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the header text displayed at the top of the component?",
        "answer": "System Status"
      },
      {
        "question": "How many sections are rendered in the component?",
        "answer": "3"
      },
      {
        "question": "How many list items are shown in the system configuration section?",
        "answer": "4"
      },
      {
        "question": "What color is the warning message displayed in the error logs section?",
        "answer": "Orange"
      },
      {
        "question": "How many rows and columns does the table in the performance metrics section have?",
        "answer": "1 row and 2 columns"
      },
      {
        "question": "What is the label on the button found in the footer?",
        "answer": "Update Status"
      }
    ],
    "raw_output_metric": [
      "System Status",
      "status-card",
      "system configuration",
      "error logs",
      "performance metrics",
      "<ol>",
      "<li>",
      ":",
      "warning",
      "<table>",
      "footer-btn",
      "Update Status"
    ],
    "rendering": true
  },
  {
    "task_id": "000143",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a gadget showcase with distinct sections and interactive elements.\n\nFeature Requirements:\n- Create a top-level <div> container with a class name of 'showcase-box' to wrap all component elements.\n- Insert a centered <h1> element at the top with the exact text 'Gadget Showcase'.\n- Include exactly 3 distinct <section> elements arranged sequentially in the component.\n- In the first section, add an ordered list (<ol>) containing exactly 4 list items (<li>), where each item displays a label and a corresponding value separated by a colon.\n- In the second section, include a paragraph (<p>) that contains a <span> element; apply an inline style to the <span> to set its background color to lightblue.\n- In the third section, insert a table with a single row (<tr>) and two cells (<td>), labeling the cells 'Feature' and 'Description' respectively.\n- Ensure that the 'Description' cell text uses a CSS class named 'detail-blue' to apply blue text.\n- Add a clickable button element labeled 'More Details' at the bottom of the component inside a <div> with a class name 'footer-button'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main header text displayed at the top?",
        "answer": "Gadget Showcase"
      },
      {
        "question": "How many distinct sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many items are in the ordered list within the first section?",
        "answer": "4"
      },
      {
        "question": "Which punctuation mark separates each label from its value in the list items?",
        "answer": "Colon"
      },
      {
        "question": "What is the background color applied to the span element in the paragraph of the second section?",
        "answer": "Lightblue"
      },
      {
        "question": "What are the labels used in the two cells of the table in the third section?",
        "answer": "Feature and Description"
      },
      {
        "question": "What is the text displayed on the clickable button at the bottom of the component?",
        "answer": "More Details"
      }
    ],
    "raw_output_metric": [
      "showcase-box",
      "Gadget Showcase",
      "<section>",
      "<ol>",
      "<li>",
      "<p>",
      "<span>",
      "lightblue",
      "<table>",
      "<tr>",
      "<td>",
      "Feature",
      "Description",
      "detail-blue",
      "footer-button",
      "More Details"
    ],
    "rendering": true
  },
  {
    "task_id": "000144",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided weather forecast text into an Angular component that organizes and displays forecast information in clearly defined sections.\n\nFeature Requirements:\n- Create a primary container using a <div> element with a class name 'forecast-wrapper' that encapsulates all component content.\n- Add a header section containing an <h1> element, centered horizontally, with the text 'Weather Update'.\n- Incorporate a section for detailed forecasts using a <section> element that includes exactly 3 <p> elements, each representing distinct forecast details extracted from the input.\n- Include another section with an unordered list (<ul>) that holds exactly 4 <li> elements, each displaying a specific temperature reading preceded by a label and separated by a colon (:).\n- Within the unordered list, assign a CSS class 'temp-warning' to one list item to uniquely style a temperature value that exceeds a particular threshold.\n- Append a footer section using a <div> element with the class 'timestamp-section' that contains a <span> element showing the timestamp of the forecast update.\n- Ensure the header is centered, the detailed paragraphs are left-aligned, and the footer timestamp is right-aligned.\n- Use an inline style in the temperature list item with the 'temp-warning' class to set its text color to blue.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What text is displayed in the header at the top of the component?",
        "answer": "Weather Update"
      },
      {
        "question": "How many paragraphs are used to show detailed forecast information?",
        "answer": "3"
      },
      {
        "question": "How many temperature values are listed in the temperature section?",
        "answer": "4"
      },
      {
        "question": "What inline style is applied to highlight a specific temperature reading?",
        "answer": "text color blue"
      },
      {
        "question": "How is the header text aligned?",
        "answer": "Centered"
      },
      {
        "question": "How are the detailed forecast paragraphs aligned?",
        "answer": "Left-aligned"
      },
      {
        "question": "How is the forecast update timestamp aligned in the footer?",
        "answer": "Right-aligned"
      }
    ],
    "raw_output_metric": [
      "forecast-wrapper",
      "Weather Update",
      "<h1>",
      "<section>",
      "<p>",
      "<ul>",
      "<li>",
      "temp-warning",
      "blue",
      "timestamp-section",
      "<span>",
      ":"
    ],
    "rendering": true
  },
  {
    "task_id": "000145",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a clear user data dashboard with three distinct information sections.\n\nFeature Requirements:\n- Use an <h1> element with the text 'User Dashboard' and center it using an inline CSS style.\n- Create a container using a <div> element with a class name of 'dashboard-container' to wrap the entire component.\n- Include exactly 3 sections, each wrapped in a <section> element, where each section displays unique content.\n- The first section must include an ordered list (<ol>) containing exactly 4 list items (<li>), with each list item displaying a label and value separated by a hyphen (-).\n- The second section should have an <h3> element with inline styling to set the text color to blue and display the title 'Status Information'.\n- The third section must contain a paragraph (<p>) with inline styling that applies bold font weight and integrates dynamic text from the input.\n- At the bottom of the component, include a <footer> element containing a button labeled 'Update Info', which is inside a <div> with the class 'footer-button'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main title displayed at the top of the page?",
        "answer": "User Dashboard"
      },
      {
        "question": "How many sections are present on the dashboard?",
        "answer": "3"
      },
      {
        "question": "How many list items does the first section contain in its ordered list?",
        "answer": "4"
      },
      {
        "question": "What content is shown in the second section's heading?",
        "answer": "Status Information"
      },
      {
        "question": "How is the dynamic text in the third section styled?",
        "answer": "It is bold."
      },
      {
        "question": "What interactive element is visible at the bottom of the component?",
        "answer": "A button labeled 'Update Info' inside a footer element"
      }
    ],
    "raw_output_metric": [
      "User Dashboard",
      "dashboard-container",
      "<section>",
      "<ol>",
      "<li>",
      "-",
      "blue",
      "Status Information",
      "<h3>",
      "<p>",
      "bold",
      "footer",
      "footer-button",
      "Update Info"
    ],
    "rendering": true
  },
  {
    "task_id": "000147",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents system metrics in a structured and interactive format.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'System Metrics'.\n- Wrap the entire content in a <div> container with a class name of 'metrics-wrapper'.\n- Display exactly 3 sections, each enclosed in a <section> element with distinct content.\n- The first section must contain a table (<table>) with exactly 3 rows and 2 columns; each row should display a label and a corresponding numeric value from the input, with one of the numeric values styled using a CSS class called 'highlight-blue'.\n- The second section must include a paragraph (<p>) that shows summary text derived from the input, and the text within this paragraph must have an inline style setting its text-decoration property to underline.\n- The third section must present exactly two anchor (<a>) elements, each displaying different textual information and defaulting their href attribute to '#' to act as placeholders.\n- At the bottom of the component, add a footer using a <div> with the class 'action-footer' containing a button element labeled 'Update Metrics'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title text displayed at the top of the component?",
        "answer": "System Metrics"
      },
      {
        "question": "How many sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many rows and columns does the table in the first section have?",
        "answer": "3 rows and 2 columns"
      },
      {
        "question": "What text decoration style is applied to the summary paragraph in the second section?",
        "answer": "underline"
      },
      {
        "question": "How many link elements are visible in the third section?",
        "answer": "2"
      },
      {
        "question": "What is the label on the button in the action footer?",
        "answer": "Update Metrics"
      }
    ],
    "raw_output_metric": [
      "System Metrics",
      "metrics-wrapper",
      "<h1>",
      "<section>",
      "<table>",
      "highlight-blue",
      "<p",
      "action-footer",
      "Update Metrics"
    ],
    "rendering": true
  },
  {
    "task_id": "000148",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed weather forecast summary.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Weather Report'.\n- Wrap all content in a <div> element with a class name of 'weather-info' for layout purposes.\n- Display exactly 3 sections, each contained within an <article> element representing different types of weather data.\n- The first section must include a header (<h3>) with the text 'Current Conditions' and a table with 2 rows and 3 columns showing temperature, humidity, and wind speed data.\n- The second section should incorporate an ordered list (<ol>) with exactly 4 list items, each representing forecast details, where each item displays a label and corresponding value separated by a dash (-).\n- The third section must contain a paragraph (<p>) with an alert message that is styled with an inline style to have a yellow background and bold font-weight.\n- Ensure that the table in the first section has a CSS class 'data-table' and that one specific cell in the table is highlighted by applying a CSS class 'temp-alert'.\n- Add a button labeled 'Update Forecast' positioned at the bottom within a <div> element with a class name 'action-panel'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered title at the top?",
        "answer": "Weather Report"
      },
      {
        "question": "How many article sections are shown on the page?",
        "answer": "3"
      },
      {
        "question": "What header text is included in the first article section?",
        "answer": "Current Conditions"
      },
      {
        "question": "How many rows and columns does the table in the first section have?",
        "answer": "2 rows and 3 columns"
      },
      {
        "question": "How many list items are contained in the ordered list of the second section?",
        "answer": "4"
      },
      {
        "question": "What character is used to separate the label and value in each list item?",
        "answer": "a dash (-)"
      },
      {
        "question": "What inline styles are applied to the alert message in the third section?",
        "answer": "a yellow background and bold font"
      },
      {
        "question": "What is the label of the button located at the bottom of the page?",
        "answer": "Update Forecast"
      }
    ],
    "raw_output_metric": [
      "Weather Report",
      "weather-info",
      "Current Conditions",
      "data-table",
      "temp-alert",
      "Update Forecast",
      "action-panel"
    ],
    "rendering": true
  },
  {
    "task_id": "000149",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays an interactive dashboard with structured statistical data.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \u2018Dashboard Summary\u2019 at the top of the component.\n- Create a main container using a <div> element with a class name of 'dashboard-wrapper' to house all other elements.\n- Display exactly 3 cards, each contained within its own <section> element and showing distinct parts of the dashboard information.\n- The first card must feature an unordered list (<ul>) with exactly 4 list items (<li>), where each item shows a data point from the input in the format \"Label: Value\".\n- The second card should include a table element (<table>) with a header (<thead>) and one row (<tr>) inside a <tbody>, containing exactly 3 cells (<td>) representing individual metrics.\n- The third card must display a paragraph (<p>) with inline styling that sets the background color to yellow and includes bold text.\n- At least one of the list items in the first card must apply a CSS class named 'warning-text' to its value to highlight critical information.\n- Add a button element labeled \u2018Update View\u2019 at the bottom of the component, wrapped in a <div> element with a class 'toggle-container' for proper alignment.\n- Ensure that all elements are directly structured within the main container without additional nesting beyond what is described above.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the main title displayed at the top of the dashboard?",
        "answer": "Dashboard Summary"
      },
      {
        "question": "How many cards are visible in the dashboard layout?",
        "answer": "3"
      },
      {
        "question": "How many list items are shown in the first card?",
        "answer": "4"
      },
      {
        "question": "How is critical information indicated in the first card?",
        "answer": "A list item uses the 'warning-text' class on its value"
      },
      {
        "question": "How many table cells are present in the single row of the table in the second card?",
        "answer": "3"
      },
      {
        "question": "What inline style is applied to the paragraph in the third card?",
        "answer": "Yellow background with bold text"
      },
      {
        "question": "What label does the button at the bottom display?",
        "answer": "Update View"
      }
    ],
    "raw_output_metric": [
      "Dashboard Summary",
      "dashboard-wrapper",
      "section",
      "ul",
      "li",
      "warning-text",
      "table",
      "thead",
      "tbody",
      "tr",
      "td",
      "p",
      "yellow",
      "Update View",
      "toggle-container",
      ":"
    ],
    "rendering": true
  },
  {
    "task_id": "040102",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Sample Structure Page</title>\n</head>\n<body>\n  <!-- Header Section -->\n  <header>\n    <h1>Welcome to the Sample Structure Page</h1>\n    <p>This page demonstrates a clear visual layout and hierarchy using only HTML.</p>\n  </header>\n\n  <!-- Navigation Menu -->\n  <nav>\n    <ul>\n      <li>Home</li>\n      <li>About</li>\n      <li>Services</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n\n  <!-- Main Content -->\n  <main>\n    <!-- Introduction Section -->\n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>\n        This section provides an overview of the page structure. The layout is designed to be readable,\n        with clear headings, sections, and lists that articulate various parts of the content.\n      </p>\n      <ul>\n        <li>Clear visual structure</li>\n        <li>Organized layout</li>\n        <li>Readable content</li>\n      </ul>\n    </section>\n\n    <!-- Detailed Information -->\n    <section id=\"details\">\n      <h2>Details</h2>\n\n      <!-- Article 1 -->\n      <article>\n        <h3>Article 1: Background</h3>\n        <p>\n          This article provides background information about the project. It includes historical context\n          and explains the primary goals of the sample layout.\n        </p>\n        <dl>\n          <dt>Established:</dt>\n          <dd>2021</dd>\n          <dt>Objective:</dt>\n          <dd>Demonstrate a visually structured HTML page.</dd>\n        </dl>\n      </article>\n\n      <!-- Article 2 -->\n      <article>\n        <h3>Article 2: Implementation</h3>\n        <p>\n          In this section, the technical structure of the HTML is explained. Lists, headings, and paragraphs\n          are used to create a detailed and organized presentation.\n        </p>\n        <ol>\n          <li>Define HTML document type and language.</li>\n          <li>Create header, main, and footer sections.</li>\n          <li>Use articles and sections for modular content.</li>\n        </ol>\n      </article>\n    </section>\n\n    <!-- Contributors Section -->\n    <section id=\"contributors\">\n      <h2>Contributors</h2>\n      <p>The following individuals contributed to the creation of this page:</p>\n      <ul>\n        <li>John Doe \u2013 Lead Developer</li>\n        <li>Jane Smith \u2013 Content Strategist</li>\n        <li>Emily Johnson \u2013 UX Designer</li>\n      </ul>\n    </section>\n  </main>\n\n  <!-- Aside Section for Supplementary Information -->\n  <aside>\n    <h2>Additional Information</h2>\n    <p>\n      This aside provides supplementary information, notes, and bullet points that enhance the main content.\n      It is set apart from the main article areas.\n    </p>\n    <ul>\n      <li>No external scripts used</li>\n      <li>Lightweight and accessible design</li>\n      <li>Single web-page layout</li>\n    </ul>\n  </aside>\n\n  <!-- Footer Section -->\n  <footer>\n    <h2>Footer</h2>\n    <p><strong>Contact:</strong> info@example.com</p>\n    <p>&copy; 2023 Sample Structure Page. All rights reserved.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular template must display a header section that includes a main heading saying \u201cWelcome to the Sample Structure Page\u201d and a descriptive paragraph explaining the page\u2019s purpose.  \n\u2022 The Angular template must include a navigation menu that shows an unordered list with exactly four items labeled \u201cHome\u201d, \u201cAbout\u201d, \u201cServices\u201d, and \u201cContact\u201d.  \n\u2022 The main content area must be divided into distinct sections, including an \u201cIntroduction\u201d section with an h2 heading, a paragraph overview, and an unordered list featuring \u201cClear visual structure\u201d, \u201cOrganized layout\u201d, and \u201cReadable content\u201d.  \n\u2022 A \u201cDetails\u201d section must be present that contains two articles: one marked \u201cArticle 1: Background\u201d with a paragraph and a definition list listing details like \u201cEstablished: 2021\u201d and \u201cObjective: Demonstrate a visually structured HTML page\u201d, and a second article \u201cArticle 2: Implementation\u201d with a paragraph and an ordered list outlining three technical steps.  \n\u2022 The template must include a \u201cContributors\u201d section with an h2 heading, a descriptive paragraph, and an unordered list listing contributor names along with their roles (e.g., \u201cJohn Doe \u2013 Lead Developer\u201d).  \n\u2022 An aside section must be rendered that has an h2 heading \u201cAdditional Information\u201d, a paragraph describing supplementary details, and an unordered list containing items such as \u201cNo external scripts used\u201d, \u201cLightweight and accessible design\u201d, and \u201cSingle web-page layout\u201d.  \n\u2022 A footer section must be present that includes an h2 heading \u201cFooter\u201d, a paragraph displaying a contact email (\u201cinfo@example.com\u201d), and a paragraph with copyright information indicating \u201c\u00a9 2023 Sample Structure Page. All rights reserved.\u201d",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main heading displayed in the header section?",
        "answer": "Welcome to the Sample Structure Page"
      },
      {
        "question": "How many items are shown in the navigation menu?",
        "answer": "4"
      },
      {
        "question": "What labels are used in the navigation menu?",
        "answer": "Home, About, Services, Contact"
      },
      {
        "question": "What is the heading of the Introduction section in the main content area?",
        "answer": "Introduction"
      },
      {
        "question": "Which bullet points appear under the Introduction section?",
        "answer": "Clear visual structure, Organized layout, Readable content"
      },
      {
        "question": "What articles are included in the Details section and what are their headings?",
        "answer": "Article 1: Background and Article 2: Implementation"
      },
      {
        "question": "What content is provided in Article 1 of the Details section?",
        "answer": "A paragraph and a definition list with 'Established: 2021' and 'Objective: Demonstrate a visually structured HTML page'"
      },
      {
        "question": "What does Article 2 in the Details section contain?",
        "answer": "A paragraph and an ordered list outlining three technical steps"
      },
      {
        "question": "What information is displayed in the footer section?",
        "answer": "An h2 heading 'Footer', the contact email 'info@example.com', and copyright info '\u00a9 2023 Sample Structure Page. All rights reserved.'"
      }
    ],
    "raw_output_metric": [
      "Welcome to the Sample Structure Page",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Clear visual structure",
      "Organized layout",
      "Readable content",
      "Article 1: Background",
      "Established: 2021",
      "Objective: Demonstrate a visually structured HTML page",
      "Article 2: Implementation",
      "Contributors",
      "John Doe \u2013 Lead Developer",
      "Additional Information",
      "No external scripts used",
      "Lightweight and accessible design",
      "Single web-page layout",
      "Footer",
      "info@example.com",
      "\u00a9 2023 Sample Structure Page. All rights reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040103",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Sample Web Page for Visual Conversion</title>\n</head>\n<body>\n  <!-- Header -->\n  <header>\n    <h1>Welcome to Our Company</h1>\n    <p>This page is a demonstration of a realistic HTML snippet for testing structural layout and visual hierarchy.</p>\n  </header>\n\n  <!-- Navigation Menu -->\n  <nav>\n    <ul>\n      <li>Home</li>\n      <li><a href=\"#services\" style=\"text-decoration:none;\">Services</a></li>\n      <li><a href=\"#about\" style=\"text-decoration:none;\">About Us</a></li>\n      <li><a href=\"#contact\" style=\"text-decoration:none;\">Contact</a></li>\n      <li><a href=\"#faq\" style=\"text-decoration:none;\">FAQ</a></li>\n    </ul>\n  </nav>\n\n  <!-- Main Content Area -->\n  <main>\n    <!-- Introduction Section -->\n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>\n        This document is created for a visual conversion task. The layout is structured with headings, sections, lists, and text to test the rendering of HTML documents.\n      </p>\n    </section>\n\n    <!-- Services Section -->\n    <section id=\"services\">\n      <h2>Our Services</h2>\n      <article>\n        <h3>Service One: Data Analytics</h3>\n        <p>Description: Provides detailed insights and comprehensive reports on your business data.</p>\n        <p><strong>Key Features:</strong></p>\n        <ul>\n          <li>Interactive dashboards</li>\n          <li>Real-time updates</li>\n          <li>Custom reporting</li>\n        </ul>\n      </article>\n      <article>\n        <h3>Service Two: Customer Support</h3>\n        <p>Description: Enhance your customer experience with our advanced support tools.</p>\n        <p><strong>Key Features:</strong></p>\n        <ul>\n          <li>24/7 availability</li>\n          <li>Multi-channel integration</li>\n          <li>Feedback collection</li>\n        </ul>\n      </article>\n    </section>\n\n    <!-- About Us Section -->\n    <section id=\"about\">\n      <h2>About Us</h2>\n      <p>\n        Our company has been a pioneer in the field of technology solutions. We pride ourselves on providing innovative services and solutions to meet the needs of our clients.\n      </p>\n      <h3>Company History</h3>\n      <ol>\n        <li>Founded in 2010</li>\n        <li>Expanded services in 2013</li>\n        <li>International launch in 2018</li>\n      </ol>\n    </section>\n\n    <!-- Contact Section -->\n    <section id=\"contact\">\n      <h2>Contact Information</h2>\n      <p><strong>Address:</strong> 123 Innovation Drive, Tech City, TX 75001</p>\n      <p><strong>Phone:</strong> (555) 123-4567</p>\n      <p><strong>Email:</strong> contact@companyexample.com</p>\n    </section>\n\n    <!-- FAQ Section -->\n    <section id=\"faq\">\n      <h2>Frequently Asked Questions</h2>\n      <dl>\n        <dt>Q1: What services do you offer?</dt>\n        <dd>A1: We offer services including data analytics and customer support among others.</dd>\n        <dt>Q2: How can I contact you?</dt>\n        <dd>A2: Use the contact details provided in the Contact section above.</dd>\n        <dt>Q3: Where are your offices located?</dt>\n        <dd>A3: Our main office is located in Tech City, TX, with additional offices across various regions.</dd>\n      </dl>\n    </section>\n  </main>\n\n  <!-- Footer -->\n  <footer>\n    <p>&copy; 2023 CompanyExample. All rights reserved.</p>\n    <p>Designed by the CompanyExample Team.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular template must include a header section displaying a main heading (h1) and an introductory paragraph that welcomes visitors.  \n\u2022 A navigation menu must be rendered as an unordered list containing items for \"Home,\" \"Services,\" \"About Us,\" \"Contact,\" and \"FAQ,\" with the linked items displaying their respective labels.  \n\u2022 The main content area must comprise multiple sections, each with a unique identifier (introduction, services, about, contact, and faq) and clear headings (h2) to denote their titles.  \n\u2022 The services section must include two distinct articles, each featuring a subheading (h3) for the service name, descriptive paragraphs, and an unordered list of key features.  \n\u2022 The about section must contain a descriptive paragraph followed by a subheading indicating \"Company History\" along with an ordered list that outlines the historical milestones.  \n\u2022 The contact section must present contact information using paragraphs that display labels (such as Address, Phone, Email) alongside their corresponding values.  \n\u2022 The FAQ section must be organized as a definition list that pairs question items (using dt) with their corresponding answers (using dd).  \n\u2022 A footer must be included that displays two paragraphs: one for copyright information and another indicating the designer of the page.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What text items are listed in the navigation menu?",
        "answer": "Home, Services, About Us, Contact, FAQ"
      },
      {
        "question": "How many main sections are present in the main content area?",
        "answer": "Five (introduction, services, about, contact, faq)"
      },
      {
        "question": "How many articles are included in the services section?",
        "answer": "Two"
      },
      {
        "question": "What heading level is used for the service names in the services articles?",
        "answer": "h3"
      },
      {
        "question": "In the about section, what subheading indicates the historical context?",
        "answer": "Company History"
      },
      {
        "question": "Which labels are used in the contact section to display contact information?",
        "answer": "Address, Phone, Email"
      },
      {
        "question": "How is the FAQ section visually organized?",
        "answer": "As a definition list with dt for questions and dd for answers"
      },
      {
        "question": "What information is provided in the footer?",
        "answer": "A copyright notice and a designer credit"
      }
    ],
    "raw_output_metric": [
      "h1",
      "Welcome",
      "Home",
      "Services",
      "About Us",
      "Contact",
      "FAQ",
      "introduction",
      "services",
      "about",
      "contact",
      "faq",
      "h2",
      "h3",
      "Company History",
      "ol",
      "Address",
      "Phone",
      "Email",
      "dt",
      "dd",
      "footer",
      "copyright",
      "designer"
    ],
    "rendering": true
  },
  {
    "task_id": "040104",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Structural Layout Example</title>\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to Our Document</h1>\n      <p>This document is a demonstration of a structured HTML layout with headings, sections, lists, and labeled content. It serves to illustrate a visual conversion task.</p>\n    </header>\n    \n    <nav>\n      <h2>Table of Contents</h2>\n      <ol>\n        <li><a href=\"#introduction\">Introduction</a></li>\n        <li><a href=\"#features\">Features</a></li>\n        <li><a href=\"#statistics\">Statistics</a></li>\n        <li><a href=\"#user-profiles\">User Profiles</a></li>\n        <li><a href=\"#contact-info\">Contact Information</a></li>\n      </ol>\n    </nav>\n    \n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>The purpose of this document is to provide a clean and clear layout that highlights the visible structure and formatted content. Each section is organized to aid in visual hierarchy.</p>\n      <p>We have included various elements such as headings, paragraphs, lists, and data labels.</p>\n    </section>\n    \n    <section id=\"features\">\n      <h2>Features</h2>\n      <p>Below is a list of key features included in this layout:</p>\n      <ul>\n        <li>Clear and structured headings</li>\n        <li>Logical section divisions</li>\n        <li>Consistent formatting of content</li>\n        <li>Accessible navigation and labels</li>\n        <li>Easy-to-read content organization</li>\n      </ul>\n    </section>\n    \n    <section id=\"statistics\">\n      <h2>Statistics Overview</h2>\n      <p>This section highlights some important values and metrics displayed in a definition list format:</p>\n      <dl>\n        <dt>Total Users:</dt>\n        <dd>15,340</dd>\n        <dt>Pages Viewed:</dt>\n        <dd>98,762</dd>\n        <dt>Average Visit Duration:</dt>\n        <dd>3 minutes 45 seconds</dd>\n        <dt>Feedback Received:</dt>\n        <dd>1,278 responses</dd>\n      </dl>\n    </section>\n    \n    <section id=\"user-profiles\">\n      <h2>User Profiles</h2>\n      <article>\n        <h3>Profile 1: Alex Johnson</h3>\n        <p><strong>Occupation:</strong> Software Developer</p>\n        <p><strong>Interests:</strong> Programming, Hiking, and Photography.</p>\n        <ul>\n          <li>Location: New York, USA</li>\n          <li>Experience: 7 years</li>\n          <li>Languages: English, Spanish</li>\n        </ul>\n      </article>\n      \n      <article>\n        <h3>Profile 2: Maria Garcia</h3>\n        <p><strong>Occupation:</strong> Graphic Designer</p>\n        <p><strong>Interests:</strong> Design, Art, and Travel.</p>\n        <ul>\n          <li>Location: Madrid, Spain</li>\n          <li>Experience: 5 years</li>\n          <li>Languages: Spanish, English, French</li>\n        </ul>\n      </article>\n      \n      <article>\n        <h3>Profile 3: Li Wei</h3>\n        <p><strong>Occupation:</strong> Data Analyst</p>\n        <p><strong>Interests:</strong> Data Science, Reading, and Cycling.</p>\n        <ul>\n          <li>Location: Beijing, China</li>\n          <li>Experience: 4 years</li>\n          <li>Languages: Mandarin, English</li>\n        </ul>\n      </article>\n    </section>\n    \n    <section id=\"contact-info\">\n      <h2>Contact Information</h2>\n      <p>For further inquiries or feedback, please refer to the contact details below:</p>\n      <address>\n        <p><strong>Mailing Address:</strong></p>\n        <p>1234 Main Street<br>\n          Suite 567<br>\n          Anytown, AN 12345</p>\n        \n        <p><strong>Email:</strong> info@example.com</p>\n        <p><strong>Phone:</strong> (123) 456-7890</p>\n      </address>\n    </section>\n    \n    <footer>\n      <p>&copy; 2023 Structural Layout Example. All rights reserved.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "Feature Requirements:\n- The output must include a header section with a large title (h1) displaying \"Welcome to Our Document\" and a descriptive paragraph detailing the purpose of the page.\n- A navigation section should be present with a secondary heading (h2) labeled \"Table of Contents\" followed by an ordered list of five clickable items corresponding to document sections.\n- An \"Introduction\" section must exist, identified by an \"introduction\" identifier, containing a secondary heading (h2) and two paragraphs explaining the document's structure and purpose.\n- A \"Features\" section should be included, identifiable by its \"features\" identifier, with a secondary heading (h2), an explanatory paragraph, and an unordered list of key features such as structured headings and clear formatting.\n- The output should contain a \"Statistics Overview\" section, marked by a \"statistics\" identifier, featuring a secondary heading (h2), an explanatory paragraph, and a definition list with paired items for metrics like Total Users, Pages Viewed, Average Visit Duration, and Feedback Received.\n- A \"User Profiles\" section must be present, designated by an \"user-profiles\" identifier, containing multiple profile articles. Each article should have a tertiary heading (h3) with the profile name, paragraphs with bold labels for Occupation and Interests, and an unordered list detailing specifics like location, experience, and languages.\n- There should be a \"Contact Information\" section identifiable by a \"contact-info\" identifier, including a secondary heading (h2), a descriptive paragraph, and an address block that displays mailing address, email, and phone information.\n- The output must end with a footer section displaying a copyright notice in a paragraph.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text of the header section's large title?",
        "answer": "Welcome to Our Document"
      },
      {
        "question": "How many clickable items are shown in the Table of Contents?",
        "answer": "5"
      },
      {
        "question": "How many paragraphs are visible in the Introduction section?",
        "answer": "2"
      },
      {
        "question": "What type of list is used to display the key features in the Features section?",
        "answer": "Unordered list"
      },
      {
        "question": "Which section contains a definition list displaying metrics like Total Users and Pages Viewed?",
        "answer": "Statistics Overview"
      },
      {
        "question": "What heading level is used for each profile in the User Profiles section?",
        "answer": "h3"
      },
      {
        "question": "What information is provided in the Contact Information section?",
        "answer": "A descriptive paragraph and an address block with mailing address, email, and phone details"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Document",
      "Table of Contents",
      "Introduction",
      "Features",
      "structured headings",
      "clear formatting",
      "Statistics Overview",
      "Total Users",
      "Pages Viewed",
      "Average Visit Duration",
      "Feedback Received",
      "User Profiles",
      "Occupation",
      "Interests",
      "location",
      "experience",
      "languages",
      "Contact Information",
      "mailing address",
      "email",
      "phone",
      "copyright"
    ],
    "rendering": true
  },
  {
    "task_id": "040105",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Website Layout Example</title>\n</head>\n<body>\n  <!-- Header Section -->\n  <header>\n    <h1>Welcome to Our Website</h1>\n    <p>Your gateway to a world of information.</p>\n  </header>\n  \n  <!-- Navigation Menu -->\n  <nav>\n    <ul>\n      <li>Home</li>\n      <li>About</li>\n      <li>Services</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n\n  <!-- Main Content Area -->\n  <main>\n    <!-- Introduction Section -->\n    <section>\n      <h2>Introduction</h2>\n      <p>\n        This website is designed to help users navigate through various topics and find useful content\n        quickly. The structure of this page demonstrates the use of headings, paragraphs, lists, and other\n        HTML elements in a clear, accessible format.\n      </p>\n    </section>\n\n    <!-- Detailed Information Section -->\n    <section>\n      <h2>Details & Features</h2>\n      \n      <!-- List of Features -->\n      <article>\n        <h3>Key Features</h3>\n        <ul>\n          <li>Clear layout with structured headings</li>\n          <li>Responsive design using semantic HTML</li>\n          <li>Accessible content organization</li>\n          <li>Multiple types of content blocks</li>\n        </ul>\n      </article>\n      \n      <!-- Labeled Information -->\n      <article>\n        <h3>Specifications</h3>\n        <dl>\n          <dt>Version:</dt>\n          <dd>1.0.0</dd>\n          <dt>Last Updated:</dt>\n          <dd>2023-10-01</dd>\n          <dt>Author:</dt>\n          <dd>Web Team</dd>\n        </dl>\n      </article>\n    </section>\n\n    <!-- Additional Content Block -->\n    <section>\n      <h2>Additional Information</h2>\n      <article>\n        <h3>Frequently Asked Questions</h3>\n        <ol>\n          <li>\n            <strong>What is the purpose of this site?</strong>\n            <p>This site serves as an example of structured HTML content. It is designed to illustrate layout and hierarchy.</p>\n          </li>\n          <li>\n            <strong>How is the content organized?</strong>\n            <p>The content is organized into sections including a header, navigation menu, main sections, and footer.</p>\n          </li>\n          <li>\n            <strong>Can I contribute?</strong>\n            <p>Yes, contributions are welcome. Please review our guidelines for submission.</p>\n          </li>\n        </ol>\n      </article>\n    </section>\n    \n    <!-- Contact Information Section -->\n    <section>\n      <h2>Contact Us</h2>\n      <article>\n        <h3>Get in Touch</h3>\n        <p>If you have any questions, feel free to reach out to us via the contact section of this page.</p>\n        <dl>\n          <dt>Email:</dt>\n          <dd>contact@example.com</dd>\n          <dt>Phone:</dt>\n          <dd>+1 (555) 123-4567</dd>\n        </dl>\n      </article>\n    </section>\n  </main>\n\n  <!-- Sidebar for Additional Links -->\n  <aside>\n    <h2>Related Topics</h2>\n    <ul>\n      <li>HTML Structure</li>\n      <li>CSS Basics</li>\n      <li>Semantic Web</li>\n      <li>Accessibility Principles</li>\n    </ul>\n  </aside>\n\n  <!-- Footer Section -->\n  <footer>\n    <p>&copy; 2023 Example Company. All rights reserved.</p>\n    <p>Designed using pure HTML to showcase structural layout, visual hierarchy, and formatted content.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular template must display a header section with a large title reading \"Welcome to Our Website\" and an accompanying introductory paragraph.  \n\u2022 A navigation section should be present with an unordered list containing the items: \"Home,\" \"About,\" \"Services,\" and \"Contact.\"  \n\u2022 The main content area must include multiple sections with clear headings such as \"Introduction,\" \"Details & Features,\" \"Additional Information,\" and \"Contact Us.\"  \n\u2022 Within the \"Details & Features\" section, there should be an article presenting an unordered list of key features (e.g., \"Clear layout with structured headings\") and another article containing a description list that shows keys (e.g., \"Version:\", \"Last Updated:\", \"Author:\") paired with their corresponding values.  \n\u2022 The \"Additional Information\" section must include an article with an ordered list of frequently asked questions, where each list item consists of a highlighted question title (in bold) and a descriptive paragraph answer.  \n\u2022 The \"Contact Us\" section should feature an article with a short paragraph and a description list detailing contact information with labels for \"Email:\" and \"Phone:\" along with their respective values.  \n\u2022 A sidebar (aside) section must be included with a heading \"Related Topics\" followed by an unordered list of related subjects such as \"HTML Structure,\" \"CSS Basics,\" \"Semantic Web,\" and \"Accessibility Principles.\"  \n\u2022 The footer section must include two paragraphs: one containing a copyright notice (e.g., \"\u00a9 2023 Example Company. All rights reserved.\") and a second providing a brief description or context for the website.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the header title displayed at the top of the page?",
        "answer": "Welcome to Our Website"
      },
      {
        "question": "Which text items appear in the navigation section's unordered list?",
        "answer": "Home, About, Services, Contact"
      },
      {
        "question": "What are the headings of the main content area's sections?",
        "answer": "Introduction, Details & Features, Additional Information, Contact Us"
      },
      {
        "question": "Within the 'Details & Features' section, what two types of lists are presented?",
        "answer": "An unordered list of key features and a description list for version details"
      },
      {
        "question": "How is the content in the 'Additional Information' section structured?",
        "answer": "An article with an ordered list of FAQs, with each item having a bolded question title and a descriptive paragraph"
      },
      {
        "question": "What elements are included in the 'Contact Us' section?",
        "answer": "A short paragraph and a description list with 'Email:' and 'Phone:' labels"
      },
      {
        "question": "Is there a sidebar with a related topics list?",
        "answer": "Yes"
      },
      {
        "question": "What is the heading of the sidebar's section and what topics does it list?",
        "answer": "Related Topics; HTML Structure, CSS Basics, Semantic Web, Accessibility Principles"
      },
      {
        "question": "What does the footer section contain?",
        "answer": "Two paragraphs: one with a copyright notice and another with a brief website description"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Website",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Details & Features",
      "Additional Information",
      "Contact Us",
      "Clear layout with structured headings",
      "Version:",
      "Last Updated:",
      "Author:",
      "Email:",
      "Phone:",
      "Related Topics",
      "HTML Structure",
      "CSS Basics",
      "Semantic Web",
      "Accessibility Principles",
      "\u00a9 2023 Example Company. All rights reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040106",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Layout Test Page</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        line-height: 1.6;\n        margin: 0;\n        padding: 0;\n        color: #333;\n      }\n      \n      header, footer {\n        background-color: #f4f4f4;\n        padding: 1rem;\n        text-align: center;\n      }\n      \n      nav ul {\n        display: flex;\n        justify-content: center;\n        list-style: none;\n        padding: 0;\n      }\n      \n      nav li {\n        margin: 0 1rem;\n        cursor: pointer;\n      }\n      \n      main {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 1rem;\n      }\n      \n      section {\n        margin-bottom: 2rem;\n      }\n      \n      article {\n        border: 1px solid #ddd;\n        padding: 1rem;\n        margin-bottom: 1rem;\n        border-radius: 5px;\n      }\n      \n      article footer {\n        font-size: 0.8rem;\n        text-align: right;\n        background-color: transparent;\n      }\n      \n      .grid-container {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 1rem;\n      }\n      \n      .card {\n        border: 1px solid #ddd;\n        border-radius: 5px;\n        padding: 1rem;\n      }\n      \n      table {\n        width: 100%;\n        border-collapse: collapse;\n      }\n      \n      table, th, td {\n        border: 1px solid #ddd;\n      }\n      \n      th, td {\n        padding: 0.5rem;\n        text-align: left;\n      }\n      \n      th {\n        background-color: #f4f4f4;\n      }\n      \n      form {\n        display: grid;\n        gap: 1rem;\n        max-width: 500px;\n      }\n      \n      input, textarea, button {\n        padding: 0.5rem;\n      }\n      \n      button {\n        background-color: #333;\n        color: white;\n        border: none;\n        cursor: pointer;\n      }\n    </style>\n  </head>\n  <body>\n    <header>\n      <h1>Layout Test Page</h1>\n      <nav>\n        <ul>\n          <li>Home</li>\n          <li>About</li>\n          <li>Services</li>\n          <li>Contact</li>\n        </ul>\n      </nav>\n    </header>\n    <main>\n      <section>\n        <h2>Introduction</h2>\n        <p>This page is designed to test visual conversion tasks such as structural layout, visual hierarchy, and content formatting.</p>\n      </section>\n      \n      <section>\n        <h2>Overview</h2>\n        <article>\n          <header>\n            <h3>Article One</h3>\n          </header>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin molestie tincidunt metus, a sollicitudin augue viverra sit amet. Nulla facilisi.</p>\n          <ul>\n            <li>Key point one</li>\n            <li>Key point two</li>\n            <li>Key point three</li>\n          </ul>\n          <footer>\n            <p>Article published on: <time datetime=\"2023-10-01\">October 1, 2023</time></p>\n          </footer>\n        </article>\n        \n        <article>\n          <header>\n            <h3>Article Two</h3>\n          </header>\n          <p>Curabitur vitae urna nec sapien vehicula imperdiet. Suspendisse potenti. Duis bibendum quam ac ligula dapibus, in vestibulum elit consequat.</p>\n          <ol>\n            <li>Step one: Analysis</li>\n            <li>Step two: Design</li>\n            <li>Step three: Implementation</li>\n          </ol>\n          <footer>\n            <p>Last updated: <time datetime=\"2023-09-15\">September 15, 2023</time></p>\n          </footer>\n        </article>\n      </section>\n      \n      <section>\n        <h2>Details</h2>\n        <div>\n          <h3>User Information</h3>\n          <dl>\n            <dt>Name:</dt>\n            <dd>John Doe</dd>\n            <dt>Email:</dt>\n            <dd>johndoe@example.com</dd>\n            <dt>Phone:</dt>\n            <dd>(123) 456-7890</dd>\n          </dl>\n        </div>\n        <div>\n          <h3>Project Milestones</h3>\n          <ol>\n            <li><strong>Planning:</strong> Completed by January 2023</li>\n            <li><strong>Development:</strong> Completed by May 2023</li>\n            <li><strong>Testing:</strong> Completed by August 2023</li>\n            <li><strong>Deployment:</strong> Scheduled for November 2023</li>\n          </ol>\n        </div>\n      </section>\n      \n      <section>\n        <h2>Data Visualization</h2>\n        <table>\n          <caption>Quarterly Sales Report</caption>\n          <thead>\n            <tr>\n              <th>Quarter</th>\n              <th>Revenue</th>\n              <th>Expenses</th>\n              <th>Profit</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Q1 2023</td>\n              <td>$250,000</td>\n              <td>$180,000</td>\n              <td>$70,000</td>\n            </tr>\n            <tr>\n              <td>Q2 2023</td>\n              <td>$320,000</td>\n              <td>$210,000</td>\n              <td>$110,000</td>\n            </tr>\n            <tr>\n              <td>Q3 2023</td>\n              <td>$380,000</td>\n              <td>$240,000</td>\n              <td>$140,000</td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <th>Total</th>\n              <th>$950,000</th>\n              <th>$630,000</th>\n              <th>$320,000</th>\n            </tr>\n          </tfoot>\n        </table>\n      </section>\n      \n      <section>\n        <h2>Featured Items</h2>\n        <div class=\"grid-container\">\n          <div class=\"card\">\n            <h3>Product 1</h3>\n            <p>A brief description of the first product and its features.</p>\n            <button>Learn More</button>\n          </div>\n          <div class=\"card\">\n            <h3>Product 2</h3>\n            <p>A brief description of the second product and its features.</p>\n            <button>Learn More</button>\n          </div>\n          <div class=\"card\">\n            <h3>Product 3</h3>\n            <p>A brief description of the third product and its features.</p>\n            <button>Learn More</button>\n          </div>\n        </div>\n      </section>\n      \n      <section>\n        <h2>Contact Form</h2>\n        <form>\n          <div>\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n          </div>\n          <div>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n          </div>\n          <div>\n            <label for=\"message\">Message:</label>\n            <textarea id=\"message\" name=\"message\" rows=\"5\" required></textarea>\n          </div>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </section>\n    </main>\n    \n    <footer>\n      <p>&copy; 2023 Layout Test Page. All rights reserved.</p>\n      <nav>\n        <ul>\n          <li>Privacy Policy</li>\n          <li>Terms of Service</li>\n          <li>Contact Us</li>\n        </ul>\n      </nav>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 A header section that includes a main title \"Layout Test Page\" and a navigation menu presented as an unordered list with the items: Home, About, Services, and Contact.  \n\u2022 A main container that features three distinct sections labeled \"Introduction\", \"Overview\", and \"Details\", each identifiable by their respective headings.  \n\u2022 In the \"Introduction\" section, a subheading (h2) and a paragraph describing that the page is designed for visual conversion tasks, including layout and content formatting.  \n\u2022 In the \"Overview\" section, two separate article segments:\n\u2003\u2003\u2013 The first article includes a header with a subheading \"Article One\", a paragraph, an unordered list with key points, and a footer displaying a publication date with a time element having a datetime attribute.  \n\u2003\u2003\u2013 The second article includes a header with a subheading \"Article Two\", a paragraph, an ordered list with steps (e.g., Analysis, Design, Implementation), and a footer displaying a last updated date with a time element having a datetime attribute.  \n\u2022 In the \"Details\" section, two distinct blocks:\n\u2003\u2003\u2013 One block presents user information with a subheading \"User Information\" and a description list containing label-value pairs (Name, Email, Phone).  \n\u2003\u2003\u2013 The other block details \"Project Milestones\" with a subheading, including an ordered list where each item combines a bolded milestone label (e.g., Planning, Development, Testing) followed by descriptive text indicating completion dates.  \n\u2022 All visible textual content, headings, list items, and time/date values should match the provided content exactly as specified in the original HTML code.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header section?",
        "answer": "Layout Test Page"
      },
      {
        "question": "Which items appear in the navigation menu?",
        "answer": "Home, About, Services, Contact"
      },
      {
        "question": "What does the paragraph in the 'Introduction' section describe?",
        "answer": "The page is designed for visual conversion tasks, including layout and content formatting."
      },
      {
        "question": "How many article segments are shown in the 'Overview' section?",
        "answer": "2"
      },
      {
        "question": "What are the subheadings of the two articles in the 'Overview' section?",
        "answer": "Article One and Article Two"
      },
      {
        "question": "What types of lists appear within the articles of the 'Overview' section?",
        "answer": "An unordered list in Article One and an ordered list in Article Two"
      },
      {
        "question": "What two blocks are featured in the 'Details' section?",
        "answer": "User Information and Project Milestones"
      },
      {
        "question": "How are the milestone labels presented in the 'Project Milestones' block?",
        "answer": "They are bolded"
      }
    ],
    "raw_output_metric": [
      "Layout Test Page",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Overview",
      "Details",
      "designed for visual conversion tasks, including layout and content formatting",
      "Article One",
      "Article Two",
      "Analysis",
      "Design",
      "Implementation",
      "User Information",
      "Name",
      "Email",
      "Phone",
      "Project Milestones",
      "Planning",
      "Development",
      "Testing",
      "Deployment",
      "Data Visualization",
      "Quarterly Sales Report",
      "Quarter",
      "Revenue",
      "Expenses",
      "Profit",
      "Featured Items",
      "Contact Form",
      "Name:",
      "Email:",
      "Message:",
      "Submit",
      "2023 Layout Test Page. All rights reserved.",
      "Privacy Policy",
      "Terms of Service",
      "Contact Us"
    ],
    "rendering": true
  },
  {
    "task_id": "040110",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Long HTML Structure Example</title>\n</head>\n<body>\n  <header>\n    <h1>Website Main Title</h1>\n    <p>Welcome to our sample website demonstrating a complete structural layout with clear visual hierarchy.</p>\n  </header>\n\n  <nav>\n    <h2>Navigation</h2>\n    <ul>\n      <li><a href=\"#section-intro\">Introduction</a></li>\n      <li><a href=\"#section-features\">Features</a></li>\n      <li><a href=\"#section-details\">Details</a></li>\n      <li><a href=\"#section-contact\">Contact</a></li>\n    </ul>\n  </nav>\n\n  <section id=\"section-intro\">\n    <h2>Introduction</h2>\n    <p>This page is a long, realistic code snippet written in HTML. It is designed to test visual conversion by highlighting structural layout, formatted content, and visual hierarchy.</p>\n    <article>\n      <h3>Topic Overview</h3>\n      <p>HTML documents use a variety of elements to structure content effectively. This example combines headings, sections, lists, tables, and descriptive text into a single page.</p>\n    </article>\n  </section>\n\n  <section id=\"section-features\">\n    <h2>Features</h2>\n    <p>Key features showcased in this HTML layout include:</p>\n    <ul>\n      <li>Clear Visual Hierarchy</li>\n      <li>Responsive Content Areas</li>\n      <li>Sectioned and Organized Layout</li>\n      <li>Formatted Lists and Tables</li>\n    </ul>\n    <h3>Step-by-Step Process</h3>\n    <ol>\n      <li>Define the document structure.</li>\n      <li>Create sections for different content areas.</li>\n      <li>Insert headings and paragraphs for clarity.</li>\n      <li>Utilize lists and tables for structured data.</li>\n      <li>Finalize with a footer containing contact info.</li>\n    </ol>\n  </section>\n\n  <section id=\"section-details\">\n    <h2>Details and Data</h2>\n    <article>\n      <h3>Structured Data Overview</h3>\n      <table border=\"1\" cellpadding=\"5\">\n        <thead>\n          <tr>\n            <th>Property</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Document Title</td>\n            <td>Long HTML Example</td>\n          </tr>\n          <tr>\n            <td>Version</td>\n            <td>1.0</td>\n          </tr>\n          <tr>\n            <td>Date</td>\n            <td>2023-10-05</td>\n          </tr>\n          <tr>\n            <td>Author</td>\n            <td>Sample Author</td>\n          </tr>\n          <tr>\n            <td>Description</td>\n            <td>An example demonstrating clear structure without external resources.</td>\n          </tr>\n        </tbody>\n      </table>\n    </article>\n    <article>\n      <h3>Additional Information</h3>\n      <dl>\n        <dt>Topic</dt>\n        <dd>HTML Structures</dd>\n        <dt>Subtopic</dt>\n        <dd>Code Samples and Layout</dd>\n        <dt>Purpose</dt>\n        <dd>Visualization and Structural Training</dd>\n      </dl>\n    </article>\n  </section>\n\n  <section id=\"section-contact\">\n    <h2>Contact Information</h2>\n    <p>For more information about this HTML example, please reach out using one of the methods below:</p>\n    <address>\n      <p>Email: <a href=\"mailto:example@domain.com\">example@domain.com</a></p>\n      <p>Phone: (123) 456-7890</p>\n      <p>Address: 123 HTML Road, Web City, Internet 12345</p>\n    </address>\n    <form action=\"#\" method=\"post\">\n      <h3>Contact Form</h3>\n      <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n      </div>\n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n      </div>\n      <div>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n      </div>\n      <div>\n        <button type=\"submit\">Send Message</button>\n      </div>\n    </form>\n  </section>\n\n  <aside>\n    <h2>Related Resources</h2>\n    <ul>\n      <li><a href=\"#\">HTML5 Documentation</a></li>\n      <li><a href=\"#\">Web Design Best Practices</a></li>\n      <li><a href=\"#\">Semantic Markup Guide</a></li>\n    </ul>\n  </aside>\n\n  <footer>\n    <p>&copy; 2023 Sample Website. All rights reserved.</p>\n    <p>This example is designed for educational purposes only.</p>\n    <nav>\n      <ul>\n        <li><a href=\"#\">Privacy Policy</a></li>\n        <li><a href=\"#\">Terms of Service</a></li>\n        <li><a href=\"#\">Sitemap</a></li>\n      </ul>\n    </nav>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must include a component template that reproduces the original HTML structure: a header, navigation, and multiple sections.  \n\u2022 The header must display a main title (h1) reading \"Website Main Title\" and a paragraph with welcome text.  \n\u2022 The navigation area must include an h2 element labeled \"Navigation\" and an unordered list with list items that have anchor links leading to specific section IDs.  \n\u2022 An \"Introduction\" section must be present containing an h2 title, a descriptive paragraph, and an article with an h3 heading (\"Topic Overview\") and accompanying paragraph.  \n\u2022 A \"Features\" section must be included with an h2 header and a paragraph followed by an unordered list enumerating four features and an ordered list under an h3 heading \"Step-by-Step Process\" that lists five process steps.  \n\u2022 A \"Details and Data\" section must be rendered, incorporating an article with an h3 (\"Structured Data Overview\") and a table presenting two headers (Property and Value) along with rows for Document Title, Version, Date, Author, and Description.  \n\u2022 Another article in the \"Details and Data\" section must display an h3 (\"Additional Information\") and a definition list (dl) with dt and dd pairs for Topic, Subtopic, and Purpose.  \n\u2022 The overall content hierarchy, including headings, lists, tables, and definition lists, must be preserved in the Angular template to reflect the static content structure visible in the source HTML.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header?",
        "answer": "Website Main Title"
      },
      {
        "question": "What heading is used in the navigation area?",
        "answer": "Navigation"
      },
      {
        "question": "What is the title of the first content section presented?",
        "answer": "Introduction"
      },
      {
        "question": "What h3 heading appears within the article in the Introduction section?",
        "answer": "Topic Overview"
      },
      {
        "question": "How many features are listed in the unordered list under the Features section?",
        "answer": "4"
      },
      {
        "question": "How many steps are enumerated in the ordered list under 'Step-by-Step Process'?",
        "answer": "5"
      },
      {
        "question": "What are the two table headers shown in the Details and Data section?",
        "answer": "Property and Value"
      },
      {
        "question": "Which table row labels are provided for structured data?",
        "answer": "Document Title, Version, Date, Author, and Description"
      },
      {
        "question": "What h3 title is used in the additional article within the Details and Data section?",
        "answer": "Additional Information"
      },
      {
        "question": "Which terms are presented in the definition list of the Additional Information article?",
        "answer": "Topic, Subtopic, and Purpose"
      }
    ],
    "raw_output_metric": [
      "Website Main Title",
      "Navigation",
      "Introduction",
      "Topic Overview",
      "Features",
      "Step-by-Step Process",
      "Structured Data Overview",
      "Property",
      "Value",
      "Document Title",
      "Version",
      "Date",
      "Author",
      "Description",
      "Additional Information",
      "Topic",
      "Subtopic",
      "Purpose",
      "Contact Information",
      "Contact Form",
      "Name:",
      "Email:",
      "Message:",
      "Send Message",
      "Related Resources",
      "HTML5 Documentation",
      "Web Design Best Practices",
      "Semantic Markup Guide",
      "2023 Sample Website. All rights reserved.",
      "This example is designed for educational purposes only.",
      "Privacy Policy",
      "Terms of Service",
      "Sitemap"
    ],
    "rendering": true
  },
  {
    "task_id": "040112",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Sample Structured Layout Page</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* Basic styling to organize the layout visually */\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n    }\n    header, nav, main, aside, footer {\n      border: 1px solid #ccc;\n      padding: 15px;\n      margin-bottom: 15px;\n    }\n    header {\n      background-color: #f5f5f5;\n    }\n    nav ul {\n      list-style-type: none;\n      padding-left: 0;\n    }\n    nav ul li {\n      margin: 5px 0;\n    }\n    section {\n      margin-bottom: 20px;\n    }\n    .highlight {\n      font-weight: bold;\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 10px;\n    }\n    table, th, td {\n      border: 1px solid #aaa;\n    }\n    th, td {\n      padding: 8px;\n      text-align: left;\n    }\n    .label {\n      font-weight: bold;\n    }\n  </style>\n</head>\n<body>\n\n  <header>\n    <h1>Welcome to My Webpage</h1>\n    <p>This page demonstrates a realistic, structured layout using pure HTML.</p>\n  </header>\n\n  <nav>\n    <h2>Navigation Menu</h2>\n    <ul>\n      <li><a href=\"#introduction\">Introduction</a></li>\n      <li><a href=\"#about\">About Me</a></li>\n      <li><a href=\"#experience\">Experience</a></li>\n      <li><a href=\"#contact\">Contact</a></li>\n    </ul>\n  </nav>\n\n  <main>\n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>Hello! I am a passionate web developer and designer. This sample webpage uses structured HTML to create a visually clear layout.</p>\n      <p>Below you'll find detailed sections including my personal background, work experience, and skills.</p>\n      <ul>\n        <li>Clean HTML</li>\n        <li>Semantic elements</li>\n        <li>Structured content</li>\n      </ul>\n    </section>\n\n    <section id=\"about\">\n      <h2>About Me</h2>\n      <p>I have been involved in web design for over a decade. I focus on building accessible and organized web content.</p>\n      <dl>\n        <dt class=\"label\">Name:</dt>\n        <dd>Alex Johnson</dd>\n        <dt class=\"label\">Occupation:</dt>\n        <dd>Web Developer &amp; Designer</dd>\n        <dt class=\"label\">Location:</dt>\n        <dd>San Francisco, CA</dd>\n      </dl>\n    </section>\n\n    <section id=\"experience\">\n      <h2>Experience</h2>\n      <article>\n        <h3>Software Engineer at TechCorp</h3>\n        <p>Duration: 2015 - 2020</p>\n        <p>Responsibilities included dynamic website development, collaboration with design teams, and deployment management.</p>\n      </article>\n      <article>\n        <h3>Senior Developer at WebSolutions</h3>\n        <p>Duration: 2020 - Present</p>\n        <p>Leading projects, mentoring junior developers, and ensuring code quality in all projects.</p>\n      </article>\n    </section>\n\n    <section id=\"skills\">\n      <h2>Skills &amp; Competencies</h2>\n      <p>Below is a table listing some of my core skills and corresponding proficiency:</p>\n      <table>\n        <thead>\n          <tr>\n            <th>Skill</th>\n            <th>Proficiency</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>HTML &amp; CSS</td>\n            <td>Expert</td>\n          </tr>\n          <tr>\n            <td>JavaScript</td>\n            <td>Advanced</td>\n          </tr>\n          <tr>\n            <td>Python</td>\n            <td>Advanced</td>\n          </tr>\n          <tr>\n            <td>UX/UI Design</td>\n            <td>Intermediate</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n\n  <aside>\n    <h2>Quick Facts</h2>\n    <ul>\n      <li><span class=\"highlight\">Hobby:</span> Photography, Travel</li>\n      <li><span class=\"highlight\">Languages:</span> English, Spanish, French</li>\n      <li><span class=\"highlight\">Certifications:</span> Web Accessibility, Responsive Design</li>\n    </ul>\n  </aside>\n\n  <footer>\n    <h2>Contact</h2>\n    <p>If you have any questions or would like to connect, feel free to send an email.</p>\n    <p class=\"label\">Email:</p>\n    <p>alex.johnson@example.com</p>\n    <address>\n      1234 Market Street<br>\n      San Francisco, CA 94103<br>\n      USA\n    </address>\n    <p>\u00a9 2023 Alex Johnson</p>\n  </footer>\n\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 A header section displaying a main title \u201cWelcome to My Webpage\u201d accompanied by a descriptive paragraph.  \n\u2022 A navigation area with a secondary title \u201cNavigation Menu\u201d and a list of four link items: \u201cIntroduction\u201d, \u201cAbout Me\u201d, \u201cExperience\u201d, and \u201cContact\u201d.  \n\u2022 A main content area divided into multiple sections, including an \u201cIntroduction\u201d section with paragraphs describing background information and a bullet list of features like \u201cClean HTML\u201d, \u201cSemantic elements\u201d, and \u201cStructured content\u201d.  \n\u2022 An \u201cAbout Me\u201d section presenting a descriptive paragraph along with a data list of details, such as Name (Alex Johnson), Occupation (Web Developer & Designer), and Location (San Francisco, CA).  \n\u2022 An \u201cExperience\u201d section containing multiple article blocks, each with a job title, duration (e.g., \u201c2015 - 2020\u201d and \u201c2020 - Present\u201d), and descriptive text outlining responsibilities.  \n\u2022 A \u201cSkills & Competencies\u201d section featuring a table that lists various skills (like HTML & CSS, JavaScript, Python, UX/UI Design) alongside corresponding proficiency levels.  \n\u2022 An aside section labeled \u201cQuick Facts\u201d that presents a bullet list of additional details including hobbies, languages spoken, and certifications with highlighted labels, followed by a footer containing a \u201cContact\u201d heading, an email label with an address, a physical address block, and copyright information.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main header title displayed at the top of the page?",
        "answer": "Welcome to My Webpage"
      },
      {
        "question": "What accompanies the main header title in the header section?",
        "answer": "A descriptive paragraph"
      },
      {
        "question": "What is the secondary title in the navigation area?",
        "answer": "Navigation Menu"
      },
      {
        "question": "Which four link items are shown in the navigation menu?",
        "answer": "Introduction, About Me, Experience, Contact"
      },
      {
        "question": "What features are listed as bullet points in the Introduction section?",
        "answer": "Clean HTML, Semantic elements, Structured content"
      },
      {
        "question": "What details are presented in the About Me section's data list?",
        "answer": "Name: Alex Johnson, Occupation: Web Developer & Designer, Location: San Francisco, CA"
      },
      {
        "question": "What information is visible in the footer section?",
        "answer": "A 'Contact' heading, an email address, a physical address, and copyright information"
      }
    ],
    "raw_output_metric": [
      "Welcome to My Webpage",
      "Navigation Menu",
      "Introduction",
      "About Me",
      "Experience",
      "Contact",
      "Clean HTML",
      "Semantic elements",
      "Structured content",
      "Name (Alex Johnson)",
      "Occupation (Web Developer & Designer)",
      "Location (San Francisco, CA)",
      "2015 - 2020",
      "2020 - Present",
      "HTML & CSS",
      "JavaScript",
      "Python",
      "UX/UI Design",
      "Quick Facts"
    ],
    "rendering": true
  },
  {
    "task_id": "040114",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document Layout Test</title>\n  </head>\n  <body>\n    <header>\n      <h1>Main Document Title</h1>\n      <nav>\n        <ul>\n          <li>Home</li>\n          <li>About</li>\n          <li>Services</li>\n          <li>Contact</li>\n        </ul>\n      </nav>\n    </header>\n    \n    <section>\n      <h2>Introduction</h2>\n      <p>\n        This page provides a comprehensive layout example designed to test the visual conversion of HTML. \n        It contains various elements such as headings, ordered and unordered lists, articles, and formatted content.\n      </p>\n    </section>\n    \n    <section>\n      <h2>Profile Information</h2>\n      <p><strong>Name:</strong> John Doe</p>\n      <p><strong>Date of Birth:</strong> January 1, 1980</p>\n      <p><strong>Email:</strong> john.doe@example.com</p>\n      <ol>\n        <li>Occupation: Software Developer</li>\n        <li>Location: New York</li>\n        <li>Interests: Reading, Hiking, Music</li>\n      </ol>\n    </section>\n    \n    <section>\n      <h2>Project Overview</h2>\n      <article>\n        <h3>Project Title: Visual Conversion Task</h3>\n        <p>\n          This project is designed to test the capacity of a conversion system to accurately interpret the visible structure \n          and hierarchy of content formatted purely in HTML.\n        </p>\n        <ul>\n          <li>Goal: Test structural layout across various HTML elements</li>\n          <li>Scope: Demonstration of headings, lists, and formatted text</li>\n          <li>Outcome: A clear and consistent visual layout</li>\n        </ul>\n      </article>\n    </section>\n    \n    <section>\n      <h2>Detailed Requirements</h2>\n      <dl>\n        <dt>Layout</dt>\n        <dd>\n          Clear separation between sections using semantic HTML tags. Content should be organized with headers and footers.\n        </dd>\n        <dt>Content</dt>\n        <dd>\n          Includes a mix of headings, paragraphs, lists, and articles. The structure must be visually distinct.\n        </dd>\n        <dt>Formatting</dt>\n        <dd>\n          Uses simple HTML elements for emphasis (e.g., bold text) without any external styling or interactive behaviors.\n        </dd>\n      </dl>\n    </section>\n    \n    <footer>\n      <h2>Contact Information</h2>\n      <address>\n        123 Main Street<br>\n        Anytown, USA<br>\n        Phone: (123) 456-7890\n      </address>\n      <p>&copy; 2023 Document Layout Test</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must display a header section featuring a main title (\"Main Document Title\") and a navigation bar with an unordered list containing \"Home\", \"About\", \"Services\", and \"Contact\".  \n\u2022 It must include an \"Introduction\" section that presents a secondary title and a paragraph describing the purpose of the layout test.  \n\u2022 A \"Profile Information\" section must be visible, displaying details like \"Name: John Doe\", \"Date of Birth: January 1, 1980\", \"Email: john.doe@example.com\", and an ordered list with occupation, location, and interests.  \n\u2022 There should be a \"Project Overview\" section that contains an article with a tertiary title (\"Project Title: Visual Conversion Task\"), a descriptive paragraph, and an unordered list outlining the goal, scope, and outcome.  \n\u2022 The output must render a \"Detailed Requirements\" section that includes a definition list with clearly labeled terms (\"Layout\", \"Content\", \"Formatting\") and their corresponding description texts.  \n\u2022 A footer section must be included, featuring a secondary title (\"Contact Information\"), an address block with street, city, state details, and a contact phone number, as well as a copyright notice.  \n\u2022 All content, including headings, lists, and paragraphs, must be structured using appropriate Angular component templates while preserving the semantic layout of the original HTML.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header section?",
        "answer": "Main Document Title"
      },
      {
        "question": "Which items appear in the navigation bar's unordered list?",
        "answer": "Home, About, Services, Contact"
      },
      {
        "question": "What is described in the Introduction section's paragraph?",
        "answer": "The purpose of the layout test"
      },
      {
        "question": "What personal details are shown in the Profile Information section?",
        "answer": "Name: John Doe, Date of Birth: January 1, 1980, Email: john.doe@example.com"
      },
      {
        "question": "What ordered list items are included in the Profile Information section?",
        "answer": "Occupation, location, and interests"
      },
      {
        "question": "What is the tertiary title in the Project Overview section?",
        "answer": "Project Title: Visual Conversion Task"
      },
      {
        "question": "Which elements does the Project Overview article contain?",
        "answer": "A tertiary title, a descriptive paragraph, and an unordered list outlining the goal, scope, and outcome"
      },
      {
        "question": "Which terms are defined in the Detailed Requirements section?",
        "answer": "Layout, Content, and Formatting"
      },
      {
        "question": "What components are visible in the footer section?",
        "answer": "A secondary title (Contact Information), an address block, a contact phone number, and a copyright notice"
      }
    ],
    "raw_output_metric": [
      "Main Document Title",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Profile Information",
      "Name: John Doe",
      "Date of Birth: January 1, 1980",
      "Email: john.doe@example.com",
      "Occupation",
      "Location",
      "Interests",
      "Project Overview",
      "Project Title: Visual Conversion Task",
      "goal",
      "scope",
      "outcome",
      "Detailed Requirements",
      "Layout",
      "Content",
      "Formatting",
      "Contact Information",
      "street",
      "city",
      "state",
      "phone",
      "Copyright"
    ],
    "rendering": true
  },
  {
    "task_id": "040116",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Detailed Layout Example</title>\n</head>\n<body>\n<header>\n<h1>Welcome to Our Page</h1>\n<p>\nThis document is a detailed structured HTML layout used for a visual conversion task that tests structural layout, visual hierarchy, and visible content.\n</p>\n</header>\n<hr>\n\n<section id=\"overview\">\n<h2>Overview</h2>\n<p>\nThe purpose of this document is to demonstrate a fully structured HTML layout containing various elements with appropriate labels, headings, lists, articles, tables, and more.\n</p>\n<ul>\n<li>Navigation</li>\n<li>Sections</li>\n<li>Lists</li>\n<li>Formatted Labeled Values</li>\n<li>Tables and Data</li>\n</ul>\n</section>\n<hr>\n\n<section id=\"details\">\n<h2>Detailed Information</h2>\n\n<article>\n<h3>Section 1: Introduction</h3>\n<p>\nThis section introduces the content and covers the layout structure. It includes elements such as headings, paragraphs, and ordered lists.\n</p>\n<ol>\n<li>Header Elements</li>\n<li>Paragraphs</li>\n<li>Lists of Items</li>\n<li>Articles and Sections</li>\n</ol>\n</article>\n\n<article>\n<h3>Section 2: Data Overview</h3>\n<p>\nBelow is some example data presented in a table format showcasing labeled values along with corresponding descriptions.\n</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n<thead>\n<tr>\n<th>Label</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>001</td>\n<td>Unique Identifier</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>Sample Item</td>\n<td>Item's Name or Title</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>Active</td>\n<td>Current Operational Status</td>\n</tr>\n</tbody>\n</table>\n</article>\n</section>\n<hr>\n\n<section id=\"services\">\n<h2>Our Services</h2>\n<p>\nWe offer a variety of services to meet your needs. Each service is carefully crafted to deliver quality results.\n</p>\n<dl>\n<dt>Consulting:</dt>\n<dd>Providing expert advice and project-specific solutions.</dd>\n\n<dt>Development:</dt>\n<dd>Creating custom software and applications tailored to your requirements.</dd>\n\n<dt>Support:</dt>\n<dd>Ongoing assistance and maintenance to keep your systems running smoothly.</dd>\n\n<dt>Training:</dt>\n<dd>Educational programs to empower your team with new skills and knowledge.</dd>\n</dl>\n</section>\n<hr>\n\n<section id=\"contact\">\n<h2>Contact Information</h2>\n<p>\nFeel free to reach out to us using any of the following methods:\n</p>\n<address>\n<strong>Company Name, Inc.</strong><br>\n123 Main Street<br>\nSuite 456<br>\nAnytown, ST 12345<br>\n<abbr title=\"Phone\">P:</abbr> (123) 456-7890<br>\n<abbr title=\"Email\">E:</abbr> <a href=\"mailto:info@example.com\">info@example.com</a>\n</address>\n</section>\n<hr>\n\n<section id=\"form\">\n<h2>Feedback Form</h2>\n<form action=\"#\" method=\"post\">\n    <fieldset>\n        <legend>Personal Information</legend>\n        <div>\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n        </div>\n        <div>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n    </fieldset>\n    \n    <fieldset>\n        <legend>Your Feedback</legend>\n        <div>\n            <label for=\"subject\">Subject:</label>\n            <input type=\"text\" id=\"subject\" name=\"subject\">\n        </div>\n        <div>\n            <label for=\"message\">Message:</label>\n            <textarea id=\"message\" name=\"message\" rows=\"5\" cols=\"30\" required></textarea>\n        </div>\n        <div>\n            <label for=\"rating\">Rating:</label>\n            <select id=\"rating\" name=\"rating\">\n                <option value=\"5\">Excellent</option>\n                <option value=\"4\">Very Good</option>\n                <option value=\"3\">Good</option>\n                <option value=\"2\">Fair</option>\n                <option value=\"1\">Poor</option>\n            </select>\n        </div>\n    </fieldset>\n    \n    <div>\n        <input type=\"submit\" value=\"Submit Feedback\">\n        <input type=\"reset\" value=\"Clear Form\">\n    </div>\n</form>\n</section>\n\n<footer>\n<p>&copy; 2025 Company Name, Inc. All rights reserved.</p>\n<nav>\n    <ul>\n        <li><a href=\"#\">Home</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Services</a></li>\n        <li><a href=\"#\">Contact</a></li>\n        <li><a href=\"#\">Privacy Policy</a></li>\n        <li><a href=\"#\">Terms of Service</a></li>\n    </ul>\n</nav>\n</footer>\n\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 A header section displaying a main title \u201cWelcome to Our Page\u201d and an accompanying paragraph describing the document\u2019s purpose.  \n\u2022 A section with an identifier \u201coverview\u201d that includes a heading \u201cOverview\u201d, a paragraph explaining the document's purpose, and an unordered list containing the items: Navigation, Sections, Lists, Formatted Labeled Values, Tables and Data.  \n\u2022 Horizontal rules visibly separating the major sections of the layout.  \n\u2022 A section with the identifier \u201cdetails\u201d that contains a heading \u201cDetailed Information\u201d and two article subsections.  \n\u2022 The first article in \u201cdetails\u201d includes a subheading \u201cSection 1: Introduction\u201d, a paragraph introduction, and an ordered list with items: Header Elements, Paragraphs, Lists of Items, and Articles and Sections.  \n\u2022 The second article in \u201cdetails\u201d comprises a subheading \u201cSection 2: Data Overview\u201d, a paragraph description, and a table that displays a header row with \u201cLabel\u201d, \u201cValue\u201d, and \u201cDescription\u201d followed by three rows with the values: [ID, 001, Unique Identifier], [Name, Sample Item, Item's Name or Title], and [Status, Active, Current Operational Status].  \n\u2022 A section with the identifier \u201cservices\u201d featuring a heading \u201cOur Services\u201d, a paragraph outlining the variety of services offered, and a description list that includes at least one term \u201cConsulting:\u201d paired with its description \u201cProviding expert advice and project-specific solutions.\u201d",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header section?",
        "answer": "Welcome to Our Page"
      },
      {
        "question": "Does the header section include a paragraph describing the document's purpose?",
        "answer": "Yes"
      },
      {
        "question": "What is the heading of the overview section?",
        "answer": "Overview"
      },
      {
        "question": "How many items are listed in the unordered list in the overview section?",
        "answer": "6"
      },
      {
        "question": "What is the subheading of the first article in the details section?",
        "answer": "Section 1: Introduction"
      },
      {
        "question": "List the ordered list items in the first article of the details section.",
        "answer": "Header Elements, Paragraphs, Lists of Items, Articles and Sections"
      },
      {
        "question": "What column titles appear in the table located in the second article of the details section?",
        "answer": "Label, Value, Description"
      },
      {
        "question": "What term and description are provided in the description list in the services section?",
        "answer": "Consulting: Providing expert advice and project-specific solutions"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Page",
      "overview",
      "Overview",
      "Navigation",
      "Sections",
      "Lists",
      "Formatted Labeled Values",
      "Tables and Data",
      "details",
      "Detailed Information",
      "Section 1: Introduction",
      "Header Elements",
      "Paragraphs",
      "Lists of Items",
      "Articles and Sections",
      "Section 2: Data Overview",
      "Label",
      "Value",
      "Description",
      "ID",
      "001",
      "Unique Identifier",
      "Name",
      "Sample Item",
      "Item's Name or Title",
      "Status",
      "Active",
      "Current Operational Status",
      "services",
      "Our Services",
      "Consulting:",
      "Providing expert advice and project-specific solutions.",
      "Development:",
      "Creating custom software and applications tailored to your requirements.",
      "Support:",
      "Ongoing assistance and maintenance to keep your systems running smoothly.",
      "Training:",
      "Educational programs to empower your team with new skills and knowledge.",
      "Contact Information",
      "Feel free to reach out to us using any of the following methods:",
      "Company Name, Inc.",
      "123 Main Street",
      "Suite 456",
      "Anytown, ST 12345",
      "Feedback Form",
      "Personal Information",
      "Name:",
      "Email:",
      "Your Feedback",
      "Subject:",
      "Message:",
      "Rating:",
      "Submit Feedback",
      "Clear Form",
      "2025 Company Name, Inc. All rights reserved.",
      "Excellent",
      "Very Good",
      "Good",
      "Fair",
      "Poor",
      "Home",
      "About",
      "Services",
      "Contact",
      "Privacy Policy",
      "Terms of Service"
    ],
    "rendering": true
  },
  {
    "task_id": "040118",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sample Structured HTML Page</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n    <!-- Header Section -->\n    <header>\n        <h1>Welcome to Our Documentation Page</h1>\n        <p>This page provides an overview of our project, its architecture, and essential guidelines.</p>\n    </header>\n\n    <!-- Navigation Section -->\n    <nav>\n        <ul>\n            <li><a href=\"#overview\">Overview</a></li>\n            <li><a href=\"#features\">Features</a></li>\n            <li><a href=\"#installation\">Installation</a></li>\n            <li><a href=\"#usage\">Usage</a></li>\n            <li><a href=\"#faq\">FAQ</a></li>\n            <li><a href=\"#contact\">Contact Us</a></li>\n        </ul>\n    </nav>\n\n    <!-- Main Content -->\n    <main>\n        <!-- Overview Section -->\n        <section id=\"overview\">\n            <h2>Project Overview</h2>\n            <p>This project is designed to showcase a detailed HTML structure for testing visual hierarchy and layout. The goal is to create an example that is both informative and easy to navigate.</p>\n            <article>\n                <h3>Background</h3>\n                <p>Our project began as a small initiative and has grown into a comprehensive code base used for education and testing.</p>\n            </article>\n        </section>\n        \n        <!-- Features Section -->\n        <section id=\"features\">\n            <h2>Key Features</h2>\n            <ul>\n                <li>Clear Structural Layout</li>\n                <li>Readable and Accessible Content</li>\n                <li>Multiple Sections and Sub-sections</li>\n                <li>Detailed Navigation and Labeling</li>\n                <li>Consistent Hierarchy Across Elements</li>\n            </ul>\n            <div>\n                <h3>Detailed Breakdown</h3>\n                <ol>\n                    <li>\n                        <strong>Responsive Headings:</strong> Proper levels from H1 to H6.\n                    </li>\n                    <li>\n                        <strong>Semantic Sections:</strong> Organized via section, article, and aside tags.\n                    </li>\n                    <li>\n                        <strong>Lists and Tables:</strong> Showcasing hierarchical systems.\n                    </li>\n                    <li>\n                        <strong>Contact Information:</strong> Structured layout with labeled values.\n                    </li>\n                </ol>\n            </div>\n        </section>\n        \n        <!-- Installation Section -->\n        <section id=\"installation\">\n            <h2>Installation Instructions</h2>\n            <div>\n                <p>Follow these steps to set up the project:</p>\n                <ol>\n                    <li>Download the source code from the repository.</li>\n                    <li>Extract the files using your preferred archive manager.</li>\n                    <li>Open the index.html file in your web browser.</li>\n                    <li>Follow the installation guide for further configuration.</li>\n                </ol>\n            </div>\n            <div>\n                <h3>System Requirements</h3>\n                <ul>\n                    <li>Modern web browser (Chrome, Firefox, Edge, Safari)</li>\n                    <li>Basic text editor for any modifications</li>\n                    <li>Internet connection for updates (if any)</li>\n                </ul>\n            </div>\n        </section>\n        \n        <!-- Usage Section -->\n        <section id=\"usage\">\n            <h2>How to Use the Page</h2>\n            <article>\n                <h3>Reading the Content</h3>\n                <p>The page is divided into distinct sections that help navigate through the topics. Use the navigation menu at the top to jump to a section.</p>\n            </article>\n            <article>\n                <h3>Interpreting Data</h3>\n                <p>Data and instructions are presented in easy-to-read formats. Lists, tables, and labeled values ensure that vital information is promptly visible.</p>\n            </article>\n            <div>\n                <h3>Sample Data Table</h3>\n                <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Parameter</th>\n                            <th>Value</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Version</td>\n                            <td>1.0.3</td>\n                            <td>The current release version.</td>\n                        </tr>\n                        <tr>\n                            <td>Build</td>\n                            <td>472</td>\n                            <td>Build number for internal tracking.</td>\n                        </tr>\n                        <tr>\n                            <td>Status</td>\n                            <td>Stable</td>\n                            <td>Indicates the stability of the release version.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </section>\n        \n        <!-- FAQ Section -->\n        <section id=\"faq\">\n            <h2>Frequently Asked Questions</h2>\n            <dl>\n                <dt>Q1: Is this project suitable for beginners?</dt>\n                <dd>A: Yes, the project is structured with a clear hierarchy making it ideal for learning HTML.</dd>\n                <dt>Q2: Can I modify the code?</dt>\n                <dd>A: Absolutely, the code is open and designed for customization and learning purposes.</dd>\n                <dt>Q3: What browsers are supported?</dt>\n                <dd>A: Any modern browser is supported, including Chrome, Firefox, Edge, and Safari.</dd>\n            </dl>\n        </section>\n        \n        <!-- Contact Section -->\n        <section id=\"contact\">\n            <h2>Contact Us</h2>\n            <div>\n                <p>If you have any further questions or need assistance, feel free to reach out to us:</p>\n                <address>\n                    <p><strong>Email:</strong> support@example.com</p>\n                    <p><strong>Phone:</strong> (123) 456-7890</p>\n                    <p><strong>Address:</strong> 1234 Main St, Anytown, Country</p>\n                </address>\n                <p>We will respond to your inquiry as soon as possible.</p>\n            </div>\n        </section>\n    </main>\n    \n    <!-- Footer Section -->\n    <footer>\n        <p>&copy; 2023 Example Company. All rights reserved.</p>\n        <p>This page is created for visual testing and layout demonstration purposes only.</p>\n    </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The converted Angular output must include a header component displaying an H1 element with the text \"Welcome to Our Documentation Page\" and a paragraph conveying the introductory description.  \n\u2022 It must contain a navigation section with an unordered list of links targeting page sections (\"Overview\", \"Features\", \"Installation\", \"Usage\", \"FAQ\", \"Contact Us\"), where each link\u2019s destination corresponds to a specific section id.  \n\u2022 The main content area must render an \"Overview\" section with an H2 heading \"Project Overview\", a descriptive paragraph, and an inner article with an H3 heading \"Background\" followed by related text.  \n\u2022 There must be a \"Features\" section including an H2 heading \"Key Features\" followed by an unordered list of features and a detailed breakdown containing an H3 heading \"Detailed Breakdown\" with an ordered list enumerating sub-features.  \n\u2022 An \"Installation\" section is required that displays an H2 heading \"Installation Instructions\" and includes two parts: one with an ordered list of steps for setup, and another with an H3 heading \"System Requirements\" alongside an unordered list detailing browser and tool prerequisites.  \n\u2022 The \"Usage\" section must feature an H2 heading \"How to Use the Page\" with two articles (each with an H3 heading, one for \"Reading the Content\" and one for \"Interpreting Data\") and a table labeled \"Sample Data Table\" that shows headers (\"Parameter\", \"Value\", \"Description\") and three corresponding rows of data.  \n\u2022 The output must include an \"FAQ\" section with an H2 heading \"Frequently Asked Questions\" organized as a definition list, where each question (using dt elements) is paired with its answer (using dd elements).  \n\u2022 A \"Contact Us\" section must be present, starting with an H2 heading \"Contact Us\" followed by contact details encapsulated in an address block displaying an email, phone number, and physical address.  \n\u2022 Lastly, a footer section must be included featuring paragraphs that display the copyright notice and a disclaimer about the page\u2019s purpose, matching the content from the original HTML.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main header text displayed at the top of the page?",
        "answer": "Welcome to Our Documentation Page"
      },
      {
        "question": "How many navigation links are visible in the menu?",
        "answer": "6"
      },
      {
        "question": "What text is used for the H2 heading in the Overview section?",
        "answer": "Project Overview"
      },
      {
        "question": "Which subheading is found inside the Overview section's article?",
        "answer": "Background"
      },
      {
        "question": "What are the two types of lists shown in the Installation section?",
        "answer": "Ordered list for setup steps and unordered list for system requirements"
      },
      {
        "question": "What column headers are present in the Sample Data Table?",
        "answer": "Parameter, Value, Description"
      },
      {
        "question": "How many data rows are visible in the Sample Data Table?",
        "answer": "3"
      },
      {
        "question": "What type of list structure is used for the FAQ section?",
        "answer": "Definition list"
      },
      {
        "question": "What contact details are provided in the Contact Us address block?",
        "answer": "Email, phone number, and physical address"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Documentation Page",
      "Overview",
      "Features",
      "Installation",
      "Usage",
      "FAQ",
      "Contact Us",
      "Project Overview",
      "Background",
      "Key Features",
      "Detailed Breakdown",
      "Installation Instructions",
      "System Requirements",
      "How to Use the Page",
      "Reading the Content",
      "Interpreting Data",
      "Sample Data Table",
      "Parameter",
      "Value",
      "Description",
      "Frequently Asked Questions",
      "copyright",
      "disclaimer"
    ],
    "rendering": true
  },
  {
    "task_id": "040122",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document Structure Example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to Our Website</h1>\n      <p>A simple page created to demonstrate HTML structural layout and content formatting.</p>\n    </header>\n\n    <nav>\n      <ul>\n        <li>Home</li>\n        <li>About Us</li>\n        <li>Services</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n\n    <main>\n      <section>\n        <h2>About Our Company</h2>\n        <p>\n          We are committed to providing the best services for all our customers. Our mission is to deliver quality and excellence in every project we undertake.\n        </p>\n        <ul>\n          <li>Professional Team</li>\n          <li>Innovative Solutions</li>\n          <li>Customer Satisfaction</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Our Services</h2>\n        <article>\n          <h3>Consulting</h3>\n          <p>\n            We provide strategic consulting services to help you grow your business in today's competitive market.\n          </p>\n          <dl>\n            <dt>Duration:</dt>\n            <dd>Varies depending on project</dd>\n            <dt>Cost:</dt>\n            <dd>Competitive pricing</dd>\n          </dl>\n        </article>\n\n        <article>\n          <h3>Development</h3>\n          <p>\n            Our development team builds robust solutions tailored to your needs, helping you to stay ahead in your industry.\n          </p>\n          <dl>\n            <dt>Languages:</dt>\n            <dd>HTML, CSS, JavaScript, and more</dd>\n            <dt>Support:</dt>\n            <dd>Post-launch support available</dd>\n          </dl>\n        </article>\n      </section>\n\n      <section>\n        <h2>Testimonials</h2>\n        <blockquote>\n          \"The team exceeded our expectations. Their service and dedication made a significant impact on our business.\"\n          <cite>\u2013 Happy Client</cite>\n        </blockquote>\n        <blockquote>\n          \"A truly professional and innovative approach that has contributed to real results.\"\n          <cite>\u2013 Satisfied Customer</cite>\n        </blockquote>\n      </section>\n\n      <aside>\n        <h2>Quick Facts</h2>\n        <ul>\n          <li><strong>Established:</strong> 2010</li>\n          <li><strong>Employees:</strong> Over 50 professionals</li>\n          <li><strong>Global Reach:</strong> Serving clients worldwide</li>\n        </ul>\n      </aside>\n\n      <section>\n        <h2>Frequently Asked Questions</h2>\n        <ol>\n          <li>\n            <strong>What services do you offer?</strong>\n            <p>We offer consulting, development, design, and support services.</p>\n          </li>\n          <li>\n            <strong>How can I request a quote?</strong>\n            <p>Simply contact us via our phone number or email address provided on the Contact section.</p>\n          </li>\n          <li>\n            <strong>Do you offer post-project support?</strong>\n            <p>Yes, we provide continuous support after project delivery.</p>\n          </li>\n        </ol>\n      </section>\n    </main>\n\n    <footer>\n      <p>\n        &copy; 2023 Our Company. All rights reserved.\n      </p>\n      <section>\n        <h2>Contact Information</h2>\n        <address>\n          1234 Business Rd.<br>\n          Business City, BC 56789<br>\n          Phone: (123) 456-7890\n        </address>\n      </section>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section with an h1 titled \u201cWelcome to Our Website\u201d and an accompanying paragraph below it.  \n\u2022 The output must contain a navigation section with an unordered list consisting of the items \u201cHome\u201d, \u201cAbout Us\u201d, \u201cServices\u201d, and \u201cContact\u201d.  \n\u2022 The output must include a main section divided into multiple subsections: one \u201cAbout Our Company\u201d section with a heading, paragraph, and a list of key points; one \u201cOur Services\u201d section with two articles (each containing an h3, paragraph, and description list with details); and one \u201cTestimonials\u201d section featuring blockquotes with citations.  \n\u2022 The output must include an aside section titled \u201cQuick Facts\u201d that presents an unordered list of key information (e.g., Established, Employees, Global Reach) with bold labels and corresponding values.  \n\u2022 The output must include a section for \u201cFrequently Asked Questions\u201d that uses an ordered list to display questions (in bold) alongside descriptive paragraphs answering each question.  \n\u2022 The output must contain a footer that includes a copyright paragraph and a \u201cContact Information\u201d section with an h2 heading and an address element providing a multi-line address with street, city, and phone number details.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the title text in the header section?",
        "answer": "Welcome to Our Website"
      },
      {
        "question": "Which navigation items are displayed?",
        "answer": "Home, About Us, Services, Contact"
      },
      {
        "question": "How many subsections are in the main section and what are their titles?",
        "answer": "Three subsections: About Our Company, Our Services, and Testimonials"
      },
      {
        "question": "What elements are contained within the 'About Our Company' subsection?",
        "answer": "A heading, a paragraph, and a list of key points"
      },
      {
        "question": "How is the 'Our Services' subsection structured?",
        "answer": "It contains two articles, each with an h3 heading, a paragraph, and a description list with details"
      },
      {
        "question": "What content does the 'Testimonials' subsection present?",
        "answer": "Blockquotes with citations"
      },
      {
        "question": "What details are visible in the aside section titled 'Quick Facts'?",
        "answer": "An unordered list showing key information with bold labels and corresponding values"
      },
      {
        "question": "What information is included in the footer's 'Contact Information' section?",
        "answer": "An h2 heading and an address element with a multi-line address including street, city, and phone number details"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Website",
      "Home",
      "About Us",
      "Services",
      "Contact",
      "About Our Company",
      "Our Services",
      "Testimonials",
      "Quick Facts",
      "Frequently Asked Questions",
      "Contact Information",
      "Established",
      "Employees",
      "Global Reach",
      "Copyright"
    ],
    "rendering": true
  },
  {
    "task_id": "040126",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Structured HTML Example</title>\n  </head>\n  <body>\n    <header>\n      <h1>Company Name</h1>\n      <p>Welcome to our sample company page. Explore our sections to learn more about our services and team.</p>\n    </header>\n\n    <nav>\n      <ul>\n        <li>Home</li>\n        <li>About Us</li>\n        <li>Services</li>\n        <li>Team</li>\n        <li>Testimonials</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n\n    <main>\n      <section>\n        <h2>About Us</h2>\n        <p>We are a company dedicated to providing quality services and innovative solutions for our community. Our mission is to deliver excellence in every project we undertake.</p>\n        <h3>Our Story</h3>\n        <p>Founded in 2020, our journey began in a small office with big dreams. Today, we have expanded our reach and continue to grow while maintaining the same passion and commitment.</p>\n      </section>\n\n      <section>\n        <h2>Services</h2>\n        <article>\n          <h3>Consulting</h3>\n          <p>We offer expert consulting in multiple domains including business strategy, technology, and finance.</p>\n          <ul>\n            <li>Financial Consulting</li>\n            <li>Business Strategy</li>\n            <li>Technology Evaluation</li>\n            <li>Market Analysis</li>\n          </ul>\n        </article>\n        <article>\n          <h3>Support</h3>\n          <p>Our support team is available 24/7 to assist you with any issues or questions you might have. We pride ourselves on responsiveness and quality service.</p>\n          <ol>\n            <li>Technical Support</li>\n            <li>Customer Service</li>\n            <li>Maintenance and Updates</li>\n          </ol>\n        </article>\n      </section>\n\n      <section>\n        <h2>Team</h2>\n        <div>\n          <h3>Our Leadership</h3>\n          <dl>\n            <dt>CEO</dt>\n            <dd>Jane Doe</dd>\n            <dt>CTO</dt>\n            <dd>John Smith</dd>\n            <dt>CFO</dt>\n            <dd>Emily Davis</dd>\n          </dl>\n          <h3>Staff</h3>\n          <ol>\n            <li>Team Member 1: Alice Johnson</li>\n            <li>Team Member 2: Bob Williams</li>\n            <li>Team Member 3: Charlie Brown</li>\n            <li>Team Member 4: Diana Miller</li>\n            <li>Team Member 5: Ethan Clark</li>\n          </ol>\n        </div>\n      </section>\n\n      <section>\n        <h2>Testimonials</h2>\n        <blockquote>\n          <p>\"Excellent service and unwavering support. The team went above and beyond to meet our needs. I highly recommend them for any project.\"</p>\n          <footer>\u2014 Satisfied Customer</footer>\n        </blockquote>\n        <blockquote>\n          <p>\"Professional, innovative, and reliable. They truly understand what their clients need.\"</p>\n          <footer>\u2014 Happy Client</footer>\n        </blockquote>\n      </section>\n    </main>\n\n    <aside>\n      <h2>Additional Information</h2>\n      <p>For more details about our company and services, please see the information below:</p>\n      <hr>\n      <h3>Office Address</h3>\n      <p>1234 Main Street, Suite 567<br>Cityville, ST 89012</p>\n      <h3>Contact Details</h3>\n      <p><strong>Phone:</strong> (123) 456-7890</p>\n      <p><strong>Email:</strong> contact@company.com</p>\n      <h3>Business Hours</h3>\n      <ul>\n        <li>Monday to Friday: 9:00 AM - 5:00 PM</li>\n        <li>Saturday: 10:00 AM - 2:00 PM</li>\n        <li>Sunday: Closed</li>\n      </ul>\n      <h3>Social Media</h3>\n      <ul>\n        <li>Facebook</li>\n        <li>Twitter</li>\n        <li>LinkedIn</li>\n        <li>Instagram</li>\n      </ul>\n    </aside>\n\n    <footer>\n      <p>&copy; 2025 Company Name. All rights reserved.</p>\n      <nav>\n        <ul>\n          <li>Privacy Policy</li>\n          <li>Terms of Service</li>\n          <li>Sitemap</li>\n        </ul>\n      </nav>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include an Angular component template that reproduces the full page structure (header, nav, main, aside) as seen in the original HTML.  \n\u2022 A header section must display a main heading (\"Company Name\") and a paragraph with a welcome message.  \n\u2022 A navigation section must contain an unordered list with exactly six items labeled: Home, About Us, Services, Team, Testimonials, and Contact.  \n\u2022 The main section must be divided into multiple content sections:  \n\u2003\u2003\u2013 An \"About Us\" section with an h2 title, descriptive paragraph text, and a nested \"Our Story\" subsection with its own h3 title and paragraph.  \n\u2003\u2003\u2013 A \"Services\" section with two articles: one for Consulting (h3 heading, paragraph, and an unordered list of four service items) and one for Support (h3 heading, paragraph, and an ordered list of three service items).  \n\u2003\u2003\u2013 A \"Team\" section with an h2 title that includes a subsection for \"Our Leadership\" displaying a definition list with dt and dd pairs (CEO, CTO, CFO) and another subsection for \"Staff\" using an ordered list of team member entries.  \n\u2003\u2003\u2013 A \"Testimonials\" section with an h2 title featuring two blockquotes, each containing a quoted paragraph and a footer with attribution text.  \n\u2022 An aside section must present \"Additional Information\" including:  \n\u2003\u2003\u2013 An h2 heading followed by a descriptive paragraph and a horizontal rule,  \n\u2003\u2003\u2013 Subsections for Office Address (with an address that includes a line break), Contact Details (with bold labels followed by the phone and email values), and Business Hours (as a list beginning with \"Monday to Friday\").  \n\u2022 All text content (headings, paragraphs, list items, quotes, and footers) must exactly match the text provided in the original HTML to ensure verifiable output through rendering.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main heading text in the header section?",
        "answer": "Company Name"
      },
      {
        "question": "How many items are in the navigation menu?",
        "answer": "6"
      },
      {
        "question": "What are the labels of the navigation items?",
        "answer": "Home, About Us, Services, Team, Testimonials, Contact"
      },
      {
        "question": "What is the title of the subsection nested within the 'About Us' section?",
        "answer": "Our Story"
      },
      {
        "question": "What are the two service categories in the 'Services' section?",
        "answer": "Consulting and Support"
      },
      {
        "question": "Which leadership roles are listed in the 'Team' section's definition list?",
        "answer": "CEO, CTO, CFO"
      },
      {
        "question": "How many blockquotes are present in the 'Testimonials' section?",
        "answer": "2"
      },
      {
        "question": "What is the heading text displayed in the aside section?",
        "answer": "Additional Information"
      }
    ],
    "raw_output_metric": [
      "header",
      "nav",
      "main",
      "aside",
      "Company Name",
      "Home",
      "About Us",
      "Services",
      "Team",
      "Testimonials",
      "Contact",
      "Our Story",
      "Consulting",
      "Support",
      "CEO",
      "CTO",
      "CFO",
      "Our Leadership",
      "Staff",
      "Additional Information",
      "Office Address",
      "Contact Details",
      "Business Hours",
      "Monday to Friday",
      "Saturday",
      "Sunday",
      "Social Media",
      "Facebook",
      "Twitter",
      "LinkedIn",
      "Instagram",
      "2025 Company Name. All rights reserved.",
      "Privacy Policy",
      "Terms of Service",
      "Sitemap"
    ],
    "rendering": true
  },
  {
    "task_id": "040128",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Sample Structured Layout</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome to Our Website</h1>\n    <p>This is a sample website to demonstrate structural layout, visual hierarchy, and formatted content.</p>\n  </header>\n\n  <nav>\n    <ul>\n      <li><strong>Home</strong></li>\n      <li><strong>About</strong></li>\n      <li><strong>Services</strong></li>\n      <li><strong>Contact</strong></li>\n    </ul>\n  </nav>\n  \n  <hr>\n\n  <section>\n    <h2>About Our Company</h2>\n    <p>Our company has a long history of delivering excellence. We focus on creating products that blend innovation with usability.</p>\n    <article>\n      <h3>Our Mission</h3>\n      <p>To provide quality services and products that make life easier and more productive for everyone.</p>\n    </article>\n    <article>\n      <h3>Our Values</h3>\n      <ul>\n        <li>Integrity</li>\n        <li>Innovation</li>\n        <li>Customer Satisfaction</li>\n        <li>Sustainability</li>\n      </ul>\n    </article>\n  </section>\n\n  <section>\n    <h2>Our Services</h2>\n    <div>\n      <h3>Consulting</h3>\n      <p>We provide expert consulting services to help you navigate complex challenges and achieve success.</p>\n      <dl>\n        <dt>Consultant:</dt>\n        <dd>John Doe</dd>\n        <dt>Experience:</dt>\n        <dd>Over 10 years</dd>\n      </dl>\n    </div>\n    <div>\n      <h3>Development</h3>\n      <p>Our development team builds robust software solutions tailored to your business needs.</p>\n      <dl>\n        <dt>Lead Developer:</dt>\n        <dd>Jane Smith</dd>\n        <dt>Specialty:</dt>\n        <dd>Full-Stack Development</dd>\n      </dl>\n    </div>\n    <div>\n      <h3>Support</h3>\n      <p>We offer ongoing support to ensure your systems run smoothly and reliably.</p>\n      <dl>\n        <dt>Support Manager:</dt>\n        <dd>Richard Roe</dd>\n        <dt>Response Time:</dt>\n        <dd>Under 24 hours</dd>\n      </dl>\n    </div>\n  </section>\n\n  <section>\n    <h2>Team Profiles</h2>\n    <article>\n      <h3>John Doe - Senior Consultant</h3>\n      <p>John brings over a decade of experience and expertise in delivering business strategies that work.</p>\n    </article>\n    <article>\n      <h3>Jane Smith - Lead Developer</h3>\n      <p>Jane is known for her passion for coding and commitment to developing high quality software.</p>\n    </article>\n    <article>\n      <h3>Richard Roe - Support Manager</h3>\n      <p>Richard ensures that our support team is always ready to help you overcome technical challenges.</p>\n    </article>\n  </section>\n\n  <section>\n    <h2>Contact Information</h2>\n    <address>\n      <p><strong>Address:</strong> 123 Business Road, Suite 500, Cityville, Countryland</p>\n      <p><strong>Phone:</strong> (123) 456-7890</p>\n      <p><strong>Email:</strong> contact@ourcompany.com</p>\n    </address>\n  </section>\n\n  <footer>\n    <hr>\n    <p>&copy; 2023 Our Company. All rights reserved.</p>\n    <p>This sample page is for demonstration purposes only.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section featuring an h1 element with the text \"Welcome to Our Website\" and a subsequent paragraph explaining the website purpose.  \n\u2022 The output must include a navigation section with an unordered list containing four list items that display bolded text: Home, About, Services, and Contact.  \n\u2022 The output must maintain a horizontal rule (hr) element immediately following the navigation section.  \n\u2022 The output must include a section titled \"About Our Company\" that contains a descriptive paragraph, followed by two article subsections: one for \"Our Mission\" with its text, and one for \"Our Values\" that shows an unordered list of key values.  \n\u2022 The output must include a section labeled \"Our Services\" comprising three divisions, each featuring a subheading (e.g., Consulting, Development, Support), a descriptive paragraph, and a definition list (dl) with terms (dt) and associated details (dd) for service-specific information.  \n\u2022 The output must include a section titled \"Team Profiles\" with three article elements, each containing an h3 subheading with the team member\u2019s name and role, followed by a descriptive paragraph.  \n\u2022 The output must include a section titled \"Contact Information\" that presents an address block (using an address element) with bolded labels for Address, Phone, and Email, each followed by corresponding contact details.  \n\u2022 The output must include a footer section that contains a horizontal rule and two paragraphs: one displaying a copyright notice and another indicating the demonstration nature of the page.  \n\u2022 All textual content, headings, lists, and structural elements must be preserved exactly as specified in the original HTML.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the header title text?",
        "answer": "Welcome to Our Website"
      },
      {
        "question": "What follows the h1 header in the header section?",
        "answer": "A paragraph explaining the website purpose"
      },
      {
        "question": "How many navigation list items are displayed?",
        "answer": "4"
      },
      {
        "question": "Are the navigation list items bolded?",
        "answer": "Yes"
      },
      {
        "question": "What element appears immediately after the navigation section?",
        "answer": "Horizontal rule"
      },
      {
        "question": "What is the title of the company description section?",
        "answer": "About Our Company"
      },
      {
        "question": "What two subsections are included under 'About Our Company'?",
        "answer": "Our Mission and Our Values"
      },
      {
        "question": "What type of list is used for 'Our Values'?",
        "answer": "Unordered list"
      },
      {
        "question": "How many divisions are in the 'Our Services' section?",
        "answer": "3"
      },
      {
        "question": "What components are included in each service division?",
        "answer": "A subheading, a descriptive paragraph, and a definition list"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Website",
      "Home",
      "About",
      "Services",
      "Contact",
      "About Our Company",
      "Our Mission",
      "Our Values",
      "Our Services",
      "Consulting",
      "Development",
      "Support",
      "Team Profiles",
      "Contact Information",
      "Address",
      "Phone",
      "Email",
      "copyright",
      "demonstration"
    ],
    "rendering": true
  },
  {
    "task_id": "070100",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Documentation\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Architecture Overview](#architecture-overview)\n3. [Data Model](#data-model)\n4. [Installation](#installation)\n5. [Usage](#usage)\n6. [Troubleshooting](#troubleshooting)\n7. [License](#license)\n\n## Introduction\nWelcome to the Project Documentation. This document is designed to test and demonstrate the visual conversion of Markdown content with a rich layout, clear hierarchy, and labeled values. The goal is to present a structured approach that is both informative and visually appealing.\n\n### Key Features\n- **Clear structure** with distinct sections\n- **Nested lists** for detailed instructions\n- **Code blocks** for configuration examples\n- **Inline labels** for data clarity\n\n---\n\n## Architecture Overview\nThe project is structured using a modular design that divides responsibilities into clear segments.\n\n### Components\n\n1. **Frontend Module**\n   - Responsible for displaying Markdown content.\n   - Uses headings, lists, and code blocks to organize information.\n   - Example layout generically supported by common Markdown renderers.\n\n2. **Backend Module**\n   - Simulates data operations with a file-based system.\n   - Processes JSON and YAML configurations.\n   - No external dependencies are required.\n\n3. **Data Storage**\n   - Utilizes JSON and YAML for configuration files.\n   - Ensures easy readability and modification by developers.\n\n#### Visual Hierarchy\n- **Primary Headings**: Use one `#` for the main sections.\n- **Secondary Headings**: Use two `##` for subsection separation.\n- **Tertiary Headings**: Use three `###` for finer points.\n\n---\n\n## Data Model\nBelow is a sample of a configuration example provided in YAML format.\n\n```yaml\nproject:\n  name: \"VisualConversionTest\"\n  version: \"1.0.0\"\n  author: \"Developer Name\"\n  modules:\n    - name: \"frontend\"\n      features:\n        - \"Responsive layout\"\n        - \"Markdown rendering\"\n    - name: \"backend\"\n      features:\n        - \"File-based simulation\"\n        - \"JSON handling\"\n```\n\nAdditionally, an example using JSON is given here:\n\n```json\n{\n  \"project\": {\n    \"name\": \"VisualConversionTest\",\n    \"version\": \"1.0.0\",\n    \"modules\": [\n      {\n        \"name\": \"frontend\",\n        \"features\": [\"Structured content\", \"Accessible layout\"]\n      },\n      {\n        \"name\": \"backend\",\n        \"features\": [\"Simple file operations\", \"Data validation\"]\n      }\n    ]\n  }\n}\n```\n\n---\n\n## Installation\nTo get started with the project, please follow these installation steps:\n\n1. **Download** the repository from your source control.\n2. **Extract** the files to your preferred directory.\n3. **Open** the `README.md` file to review documentation.\n4. **Run** the initialization script if provided.\n\n### Command Line Example\n```bash\n# Clone the repository\ngit clone https://example.com/visualconversiontest.git\n\n# Change to project directory\ncd visualconversiontest\n\n# Run installation script\n./install.sh\n```\n\n> Note: Ensure you have the necessary permissions to execute scripts on your system.\n\n---\n\n## Usage\nThe project is intended to be opened with a Markdown viewer. Follow these guidelines to ensure correct rendering:\n\n- Open the file in a supported Markdown editor.\n- Verify the table of contents to navigate easily.\n- Review code blocks and configuration sections.\n\n### Example Use Cases\n- **Documentation Review**: Ensure the visual conversion tests pass.\n- **Content Formatting**: Evaluate the structural layout and hierarchy.\n- **Configuration Testing**: Use provided JSON and YAML blocks as sample data.\n\n---\n\n## Troubleshooting\nEncounter any issues? Check these pointers:\n\n- **Markdown Viewer Compatibility**: Some viewers may not support advanced Markdown features.\n- **File Encoding**: Ensure the file is saved in UTF-8 encoding.\n- **External Tools**: Use common renderers like VSCode or Typora for best results.\n\nAdditional tips:\n- Verify that headings and lists are correctly formatted.\n- Double-check code blocks for unclosed fences.\n- Read inline comments for context.\n\n---\n\n## License\nThis project is released under the MIT License.\n\n### Summary of License Terms\n- **Permission**: Free to use, modify, and distribute.\n- **Liability**: No warranty provided.\n- **Attribution**: Original authors must be credited.\n\n---\n\nThank you for reviewing the Project Documentation. We hope this detailed Markdown layout serves as a solid example for visual conversion testing.\n</code>",
    "feature_requirements": "\u2022 The output must render a main title labeled \"Project Documentation\" as the topmost visible heading.  \n\u2022 It must display a Table of Contents section that lists the items: Introduction, Architecture Overview, Data Model, Installation, Usage, Troubleshooting, and License in using numerical order.  \n\u2022 The \"Introduction\" section should visibly include a description paragraph and a clearly defined sub-section labeled \"Key Features\" that lists several points such as clear structure, nested lists, code blocks, and inline labels.  \n\u2022 The \"Architecture Overview\" section must include descriptive text along with clearly separate component listings for Frontend Module, Backend Module, and Data Storage, and a visible sub-section for \"Visual Hierarchy\" demonstrating the use of primary, secondary, and tertiary headings.  \n\u2022 The \"Data Model\" section should visibly include two formatted code output areas: one displaying YAML configuration and the other displaying JSON configuration, each showing appropriate content details.  \n\u2022 The \"Installation\" section must present a numbered list of step-by-step instructions and include a visibly distinguishable code output area that shows command line instructions for tasks such as cloning a repository and running an initialization script.  \n\u2022 The \"Usage\" section should display guidelines for opening the document, verifying the table of contents and code blocks, and must list example use cases in a bulleted format.  \n\u2022 The \"Troubleshooting\" section must display troubleshooting tips in a list format, highlighting issues related to Markdown viewer compatibility, file encoding, and the verification of content formatting.  \n\u2022 The \"License\" section should include a sub-section summarizing license terms with clearly labeled points such as permission details, liability disclaimer, and attribution requirements.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed at the top?",
        "answer": "Project Documentation"
      },
      {
        "question": "Which items are listed in the Table of Contents in numerical order?",
        "answer": "Introduction, Architecture Overview, Data Model, Installation, Usage, Troubleshooting, License"
      },
      {
        "question": "What is the sub-section title within the Introduction section?",
        "answer": "Key Features"
      },
      {
        "question": "What points are listed under the Key Features sub-section of the Introduction section?",
        "answer": "Clear structure, nested lists, code blocks, inline labels"
      },
      {
        "question": "Which components are explicitly listed in the Architecture Overview section?",
        "answer": "Frontend Module, Backend Module, Data Storage"
      },
      {
        "question": "What sub-section in the Architecture Overview section shows a hierarchy of headings?",
        "answer": "Visual Hierarchy"
      },
      {
        "question": "What types of configuration outputs are visible in the Data Model section?",
        "answer": "YAML configuration and JSON configuration"
      },
      {
        "question": "What elements does the Installation section include to guide the user?",
        "answer": "A numbered list of step-by-step instructions and a code output area for command line instructions (cloning a repository and running an initialization script)"
      },
      {
        "question": "How are example use cases presented in the Usage section?",
        "answer": "In a bulleted list"
      },
      {
        "question": "Which troubleshooting issues are highlighted in the Troubleshooting section?",
        "answer": "Markdown viewer compatibility, file encoding, and verification of content formatting"
      }
    ],
    "raw_output_metric": [
      "Project Documentation",
      "Table of Contents",
      "Introduction",
      "Architecture Overview",
      "Data Model",
      "Installation",
      "Usage",
      "Troubleshooting",
      "License",
      "Key Features",
      "clear structure",
      "nested lists",
      "code blocks",
      "inline labels",
      "Frontend Module",
      "Backend Module",
      "Data Storage",
      "Visual Hierarchy",
      "primary",
      "secondary",
      "tertiary",
      "YAML configuration",
      "JSON configuration",
      "cloning a repository",
      "initialization script",
      "opening the document",
      "example use cases",
      "Markdown viewer compatibility",
      "file encoding",
      "content formatting",
      "permission details",
      "liability disclaimer",
      "attribution requirements"
    ],
    "rendering": true
  },
  {
    "task_id": "070102",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Alpha Documentation\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Setup and Installation](#setup-and-installation)\n3. [Features Overview](#features-overview)\n4. [Usage Guidelines](#usage-guidelines)\n5. [Configuration Options](#configuration-options)\n6. [Troubleshooting](#troubleshooting)\n7. [Contributors](#contributors)\n8. [License](#license)\n\n---\n\n## Introduction\n\nWelcome to **Project Alpha**. This document serves as the comprehensive guide for setting up, configuring, and working with Project Alpha. Throughout this guide, you will find detailed sections on installation, configuration, issue diagnosis, and more.\n\n### Purpose\n- Provide a **step-by-step** guide for the installation.\n- Outline the main functionalities and features.\n- Offer detailed configuration settings.\n- Assist with troubleshooting common issues.\n\n### Audience\nThis guide is intended for:\n- Developers\n- System Administrators\n- End-users who require advanced configuration\n\n---\n\n## Setup and Installation\n\n### Requirements\nBefore installing Project Alpha, ensure your system meets the following requirements:\n- **Operating System**: Linux, macOS, or Windows (latest versions recommended)\n- **Memory**: 4 GB minimum\n- **Disk Space**: 500 MB free for setup\n- **Dependencies**:\n  - Python 3.8 or higher\n  - Node.js 12 or higher\n\n### Installation Steps\n1. **Download** the Project Alpha package.\n2. **Extract** the archive to your preferred directory.\n3. **Run** the installation script:\n   ```\n   $ ./install.sh\n   ```\n4. Verify the installation:\n   ```\n   $ project-alpha --version\n   ```\n\n---\n\n## Features Overview\n\n### Core Features\n- **Modular Design**: Components are loosely coupled for flexible integration.\n- **Scalability**: Suitable for small projects as well as enterprise-scale deployments.\n- **Customizability**: Offers various configuration options to tailor the behavior.\n\n### Additional Capabilities\n- **Real-time analytics**\n- **User management**\n- **Advanced logging**\n\n#### Feature List\n- [x] **User Authentication**\n- [x] **Database Integration**\n- [ ] **Legacy System Support (Upcoming)**\n- [x] **Robust Error Handling**\n\n---\n\n## Usage Guidelines\n\n### Starting the Application\nTo start the Project Alpha application, run:\n```\n$ project-alpha start\n```\nThis will launch the application in development mode.\n\n### Stopping the Application\nTo stop the application gracefully, execute:\n```\n$ project-alpha stop\n```\n\n### Important Notes\n> Ensure that no other process is using the required ports (default 8080).\n\n---\n\n## Configuration Options\n\nBelow is an overview of the most common configuration parameters. These values can typically be adjusted in the `config.yaml` file.\n\n| Parameter       | Type    | Default Value | Description                        |\n|-----------------|---------|---------------|------------------------------------|\n| server.port     | Number  | 8080          | The port number for the server     |\n| logging.level   | String  | INFO          | Log verbosity (DEBUG, INFO, WARN)  |\n| database.url    | String  | \"localhost\"   | Database connection address        |\n| features.cache  | Boolean | true          | Enable caching functionality       |\n| features.debug  | Boolean | false         | Enable debug mode for development  |\n\n### Advanced Configuration\n- **Custom Modules**: Modify module paths in `modules` section.\n- **Environment Variables**: Override config values using environment variables.\n\n---\n\n## Troubleshooting\n\n### Common Issues\n1. **Installation Failure**\n   - Verify that all dependency versions are correct.\n   - Check file permissions in the installation directory.\n2. **Application Not Starting**\n   - Look at the log file located in `/var/log/project-alpha.log`\n   - Confirm no port conflicts on the default port.\n3. **Unexpected Behavior**\n   - Enable debug mode and reproduce the issue\n   - Contact support with the detailed error logs.\n\n> Tip: Most issues are resolved by reviewing the system logs.\n\n---\n\n## Contributors\n\n- **Alice Johnson** - Lead Developer\n- **Bob Smith** - System Architect\n- **Carol Lee** - Quality Assurance\n- **David Kim** - Documentation Specialist\n\nFor further contributions, please fork the repository and submit pull requests.\n\n---\n\n## License\n\nProject Alpha is distributed under the **MIT License**. You are free to use, modify, and distribute this project as long as you adhere to the license terms.\n\n---\n\nThank you for choosing Project Alpha! For further assistance, refer to our internal support documents provided along with this guide.\n</code>",
    "feature_requirements": "\u2022 The output must include a primary heading titled \"Project Alpha Documentation\" clearly rendered as the main title.  \n\u2022 A visible table of contents section must list numbered items with section names such as Introduction, Setup and Installation, Features Overview, Usage Guidelines, Configuration Options, Troubleshooting, Contributors, and License.  \n\u2022 The output must render individual sections corresponding to each Table of Contents item, ensuring each section has a clear heading (e.g., \"Introduction\", \"Setup and Installation\").  \n\u2022 In the \"Introduction\" section, subheadings for \"Purpose\" and \"Audience\" must be present, including bullet lists that detail guide purposes and target audiences.  \n\u2022 The \"Setup and Installation\" section must display a list of system requirements, installation steps as a numbered list, and code blocks showing terminal commands (e.g., commands to run installation scripts).  \n\u2022 The \"Features Overview\" section must present lists that include both regular bullet points for feature descriptions and checked/unchecked indicators for features completeness.  \n\u2022 The \"Usage Guidelines\" section must include code blocks for starting and stopping the application, as well as a block quote with an important note (e.g., port usage caution).  \n\u2022 A \"Configuration Options\" section must include a table displaying parameters, types, default values, and descriptions, with clearly identifiable columns and rows.  \n\u2022 The output must conclude with separate sections for \"Troubleshooting\", \"Contributors\", and \"License\", each displaying identifiable headings and content such as a list of troubleshooting steps, contributor names with roles, and license information.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed at the top of the page?",
        "answer": "Project Alpha Documentation"
      },
      {
        "question": "How many sections are listed in the table of contents?",
        "answer": "8"
      },
      {
        "question": "Which section includes subheadings for 'Purpose' and 'Audience'?",
        "answer": "Introduction"
      },
      {
        "question": "What type of lists are used under the 'Purpose' and 'Audience' subheadings?",
        "answer": "Bullet lists"
      },
      {
        "question": "Which section shows a numbered list for installation steps?",
        "answer": "Setup and Installation"
      },
      {
        "question": "What visual element in the Setup and Installation section displays terminal commands?",
        "answer": "Code blocks"
      },
      {
        "question": "What indicators are used in the Features Overview section to show feature completeness?",
        "answer": "Checked and unchecked indicators"
      },
      {
        "question": "Which section contains a block quote with an important note regarding port usage?",
        "answer": "Usage Guidelines"
      },
      {
        "question": "What visual component is present in the Configuration Options section?",
        "answer": "A table with parameters, types, default values, and descriptions"
      }
    ],
    "raw_output_metric": [
      "Project Alpha Documentation",
      "Introduction",
      "Setup and Installation",
      "Features Overview",
      "Usage Guidelines",
      "Configuration Options",
      "Troubleshooting",
      "Contributors",
      "License",
      "Purpose",
      "Audience",
      "system requirements",
      "installation steps",
      "terminal commands",
      "checked",
      "unchecked",
      "code block",
      "block quote",
      "parameters",
      "types",
      "default values",
      "descriptions",
      "port usage caution"
    ],
    "rendering": true
  },
  {
    "task_id": "070103",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Visual Layout Documentation\n\nWelcome to the **Project Visual Layout Documentation**.  \nThis document is designed to demonstrate the structural layout, visual hierarchy, and clearly labeled content for a markdown file.\n\n---\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Project Overview](#project-overview)\n3. [Installation & Configuration](#installation--configuration)\n4. [Feature List](#feature-list)\n5. [API Endpoints](#api-endpoints)\n6. [Code Examples](#code-examples)\n7. [Changelog](#changelog)\n8. [Todo List](#todo-list)\n9. [Conclusion](#conclusion)\n\n---\n\n## Introduction\n\nThis document serves as a sample markdown file meant to be used for visual conversion tasks. The goal is to present a realistic, structured document with appropriate sections, lists, and tables to help evaluate the hierarchy and formatting of content.  \n\n---\n\n## Project Overview\n\n**Project Name:** SampleLayout\n\n**Version:** 1.0.0  \n\n**Description:**  \nThe SampleLayout project illustrates the essentials of a well-organized markdown document, featuring:  \n- Headings\n- Sections\n- Bullet lists\n- Ordered lists\n- Tables\n- Code blocks\n\n**Important Modules:**\n- **LayoutEngine:** Responsible for generating and rendering structured content.\n- **ContentManager:** Handles all textual content and formatting.\n- **DataPresenter:** Visualizes data in tables and lists.\n\n---\n\n## Installation & Configuration\n\nFollow these steps to get the project up and running:\n\n1. **Clone the Repository:**\n\n   ```\n   git clone https://example.com/SampleLayout.git\n   cd SampleLayout\n   ```\n\n2. **Install Dependencies:**\n\n   ```\n   npm install\n   ```\n\n3. **Edit Configuration File:**\n\n   Open `config.yaml` and update the settings:\n\n   ```\n   app_name: \"SampleLayout\"\n   version: \"1.0.0\"\n   debug: true\n   ```\n\n4. **Run the Application:**\n\n   ```\n   npm start\n   ```\n\n---\n\n## Feature List\n\n- **Layout Structure**\n  - Modular design\n  - Reusable components\n- **Responsive Design**\n  - Device agnostic layouts\n  - Adaptive typography\n- **Content Management**\n  - Easy markdown editing\n  - Dynamic updates\n- **Data Visualization**\n  - Interactive tables\n  - Formatted code snippets\n  \n---\n\n## API Endpoints\n\nBelow is a summary of the available API endpoints:\n\n| Endpoint             | Method | Description                      | Status   |\n|----------------------|--------|----------------------------------|----------|\n| /api/v1/layouts      | GET    | Retrieve list of layouts         | Active   |\n| /api/v1/layout      | POST   | Create a new layout              | Active   |\n| /api/v1/layout/{id} | PUT    | Update an existing layout        | Active   |\n| /api/v1/layout/{id} | DELETE | Delete a layout by id            | Deprecated |\n\n**Example Request:**\n\n```\nGET /api/v1/layouts\nHost: localhost:3000\n```\n\n**Example Response:**\n\n```json\n{\n    \"data\": [\n        {\"id\": 1, \"name\": \"Home Page\", \"visibility\": \"public\"},\n        {\"id\": 2, \"name\": \"About Us\", \"visibility\": \"private\"}\n    ],\n    \"status\": \"success\"\n}\n```\n\n---\n\n## Code Examples\n\nBelow is a sample code snippet in Markdown:\n\n```python\ndef render_layout(component):\n    \"\"\"\n    Render the component layout\n    :param component: dict containing layout information\n    :return: formatted markdown string\n    \"\"\"\n    header = f\"# {component.get('title', 'Untitled')}\\n\"\n    content = \"\\n\".join([\n        f\"**Section:** {section}\" for section in component.get('sections', [])\n    ])\n    return header + \"\\n\" + content\n\n# Example usage\nlayout_component = {\n    \"title\": \"Dashboard\",\n    \"sections\": [\"Overview\", \"Statistics\", \"Settings\"]\n}\n\nprint(render_layout(layout_component))\n```\n\n---\n\n## Changelog\n\n### Version 1.0.0 (2023-10-01)\n- Initial stable release.\n- Added dynamic layout engine.\n- Complete markdown based documentation.\n\n### Version 0.9.0 (2023-09-15)\n- Beta release with preliminary features.\n- Introduced API endpoint management.\n\n---\n\n## Todo List\n\n- [x] Write documentation\n- [ ] Improve unit test coverage\n- [ ] Add more API endpoints\n- [ ] Refactor layout rendering logic\n- [ ] Update configuration instructions\n\n---\n\n## Conclusion\n\nThis document demonstrates a complete, long-form, and well-structured markdown file that can be used to test visual conversion and layout rendering capabilities. The document contains all necessary elements including headings, code blocks, tables, lists, and multiple sections.\n\nThank you for reviewing this sample document.\n\n> \"Simplicity is the soul of efficiency.\" - Austin Freeman\n</code>",
    "feature_requirements": "\u2022 The output must display a primary title labeled \"Project Visual Layout Documentation\" as a visually prominent header.  \n\u2022 The output must include a Table of Contents that lists nine sections: Introduction, Project Overview, Installation & Configuration, Feature List, API Endpoints, Code Examples, Changelog, Todo List, and Conclusion.  \n\u2022 The output must contain an \"Introduction\" section presenting descriptive text about the document\u2019s purpose.  \n\u2022 The output must provide a \"Project Overview\" section that clearly shows the project name, version, description, and a bullet list of important modules.  \n\u2022 The output must include an \"Installation & Configuration\" section that outlines numbered steps and displays corresponding code blocks for commands and configuration file edits.  \n\u2022 The output must feature a \"Feature List\" section that presents bullet lists of the project features, such as layout structure, responsive design, content management, and data visualization.  \n\u2022 The output must include an \"API Endpoints\" section that visually renders a table with columns for Endpoint, Method, Description, and Status, followed by example request and response code blocks.  \n\u2022 The output must contain a \"Code Examples\" section that shows a sample code snippet and an accompanying usage example to illustrate functionality.  \n\u2022 The output must present a \"Changelog\" section that displays version information with corresponding dates and bullet entries listing changes made.  \n\u2022 The output must include a \"Todo List\" section featuring checklist items indicating completed and pending tasks, as well as a \"Conclusion\" section that ends with a closing quote displayed in a blockquote format.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the primary title displayed at the top of the page?",
        "answer": "Project Visual Layout Documentation"
      },
      {
        "question": "How many sections are listed in the Table of Contents?",
        "answer": "9"
      },
      {
        "question": "Which section contains descriptive text about the document\u2019s purpose?",
        "answer": "Introduction"
      },
      {
        "question": "Which section displays the project name, version, description, and a bullet list of important modules?",
        "answer": "Project Overview"
      },
      {
        "question": "Which section outlines numbered steps and shows code blocks for commands and configuration file edits?",
        "answer": "Installation & Configuration"
      },
      {
        "question": "Name one of the features listed in the Feature List section.",
        "answer": "responsive design"
      },
      {
        "question": "What elements are visible in the API Endpoints section?",
        "answer": "A table with columns for Endpoint, Method, Description, Status, followed by request and response code blocks"
      },
      {
        "question": "Which section concludes with a blockquote containing a closing quote?",
        "answer": "Conclusion"
      }
    ],
    "raw_output_metric": [
      "Project Visual Layout Documentation",
      "Introduction",
      "Project Overview",
      "Installation & Configuration",
      "Feature List",
      "API Endpoints",
      "Code Examples",
      "Changelog",
      "Todo List",
      "Conclusion",
      "layout structure",
      "responsive design",
      "content management",
      "data visualization",
      "Endpoint",
      "Method",
      "Description",
      "Status",
      "project name",
      "version",
      "description",
      "modules",
      "Closing Quote"
    ],
    "rendering": true
  },
  {
    "task_id": "070104",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Documentation\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n3. [Usage](#usage)\n4. [Configuration](#configuration)\n5. [Examples](#examples)\n6. [API Reference](#api-reference)\n7. [Changelog](#changelog)\n8. [License](#license)\n\n---\n\n## 1. Introduction\n\nWelcome to the **Project Documentation**. This document outlines the key features, installation steps, and usage of this project.\n\n### 1.1. Overview\nThis project is designed as a comprehensive template for developers. It provides:\n- A well-organized structure for project setup.\n- Clear instructions for installation and configuration.\n- Practical examples for API integration and usage.\n\n---\n\n## 2. Installation\n\nFollow these steps to install the project:\n\n1. **Clone the Repository**\n   ```\n   git clone https://github.com/example/project.git\n   ```\n2. **Navigate to the Project Directory**\n   ```\n   cd project\n   ```\n3. **Install Dependencies**\n   ```\n   npm install\n   ```\n4. **Build the Project**\n   ```\n   npm run build\n   ```\n\n> Note: Ensure you have Node.js version 12 or above installed.\n\n---\n\n## 3. Usage\n\nAfter installation, you can run the project using the following commands:\n\n- **Development Mode:**  \n  Starts the development server with hot reloading.\n  ```\n  npm start\n  ```\n  \n- **Production Mode:**  \n  Builds the project for production.\n  ```\n  npm run build-prod\n  ```\n  \n- **Testing:**  \n  Executes all tests.\n  ```\n  npm test\n  ```\n\nAdditional commands and parameters can be set in the configuration file.\n\n---\n\n## 4. Configuration\n\nThe project uses a `config.json` file for its settings. Below is an example configuration:\n\n```json\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 8080\n  },\n  \"database\": {\n    \"host\": \"db.example.com\",\n    \"user\": \"admin\",\n    \"password\": \"secret\"\n  },\n  \"features\": {\n    \"enableFeatureX\": true,\n    \"maxItems\": 100\n  }\n}\n```\n\n### 4.1. Key Configuration Parameters\n\n- **server.host:** Hostname for the server.\n- **server.port:** Port number for the server.\n- **database.host:** Hostname of the database server.\n- **database.user:** Username for the database connection.\n- **database.password:** Password for database authentication.\n- **features.enableFeatureX:** Enables the experimental Feature X.\n- **features.maxItems:** Sets the maximum number of items allowed.\n\nModify these values to suit your environment and requirements.\n\n---\n\n## 5. Examples\n\nBelow are some code examples demonstrating how to integrate and use this project within your codebase.\n\n### 5.1. JavaScript Example\n\n```javascript\nconst project = require('project');\n\nproject.initialize({\n  server: {\n    host: \"localhost\",\n    port: 8080\n  },\n  features: {\n    enableFeatureX: true\n  }\n});\n\nproject.start();\n```\n\n### 5.2. Python Example\n\n```python\nimport project\n\nconfig = {\n    \"server\": {\"host\": \"localhost\", \"port\": 8080},\n    \"database\": {\"host\": \"db.example.com\", \"user\": \"admin\", \"password\": \"secret\"},\n    \"features\": {\"enableFeatureX\": True, \"maxItems\": 200}\n}\n\napp = project.Application(config)\napp.run()\n```\n\n---\n\n## 6. API Reference\n\n| Method | Endpoint | Description |\n|--------|----------|-------------|\n| `create_figure()` | `/api/figure` | Creates new figure instance |\n| `add_subplot()` | `/api/subplot` | Adds subplot to existing figure |\n| `plot_data()` | `/api/plot` | Plots data on specified subplot |\n| `export_figure()` | `/api/export` | Exports figure in specified format |\n| `update_style()` | `/api/style` | Updates visualization styling |\n\n## 7. Changelog\n- v1.2.0: Added support for interactive plots\n- v1.1.0: Enhanced annotation system\n- v1.0.0: Initial release\n\n## 8. License\nMIT License - See LICENSE file for details\n<code>",
    "feature_requirements": "\u2022 The output must display a prominent main title \"Project Documentation\" in a large heading element.  \n\u2022 A \"Table of Contents\" section must be visible, containing a clearly numbered list with the following entries: Introduction, Installation, Usage, Configuration, Examples, API Reference, Changelog, and License.  \n\u2022 There must be a section labeled \"1. Introduction\" that includes a descriptive paragraph welcoming the user and outlining the project's concept and purpose, along with a subheading \"1.1. Overview\" listing key points in a bullet or enumerated list.  \n\u2022 A section titled \"2. Installation\" must be present, showing a sequence of steps. Each step should include labeled code snippets for commands (e.g., git clone, cd project, npm install, npm run build) and a highlighted note regarding Node.js version requirements.  \n\u2022 The output should contain a \"3. Usage\" section that outlines development, production, and testing modes, each accompanied by labeled code blocks displaying the respective npm commands.  \n\u2022 There must be a \"4. Configuration\" section that presents an example JSON configuration block, along with a subheading \"4.1. Key Configuration Parameters\" that lists key parameters (e.g., server.host, server.port, database.host, database.user, database.password, features.enableFeatureX, features.maxItems) along with descriptive texts.  \n\u2022 A \"5. Examples\" section should be included, containing two sub-sections: one for a JavaScript example and another for a Python example, each displaying a corresponding code sample that demonstrates project initialization and usage.  \n\u2022 The output must display an \"6. API Reference\" section which includes a table with clearly defined columns for Method, Endpoint, and Description.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed at the top of the page?",
        "answer": "Project Documentation"
      },
      {
        "question": "How many entries are listed in the Table of Contents?",
        "answer": "8"
      },
      {
        "question": "What is the first entry in the Table of Contents?",
        "answer": "Introduction"
      },
      {
        "question": "What subheading is included under the '1. Introduction' section?",
        "answer": "1.1. Overview"
      },
      {
        "question": "How many steps with command code snippets are shown in the '2. Installation' section?",
        "answer": "4"
      },
      {
        "question": "Which note is prominently highlighted in the Installation section?",
        "answer": "Node.js version requirements"
      },
      {
        "question": "What three modes are outlined in the '3. Usage' section?",
        "answer": "development, production, testing"
      },
      {
        "question": "What does the '4. Configuration' section display?",
        "answer": "An example JSON configuration block with key configuration parameters"
      },
      {
        "question": "How many sub-sections are present in the '5. Examples' section and which languages do they cover?",
        "answer": "2; JavaScript and Python"
      },
      {
        "question": "Which columns are defined in the '6. API Reference' table?",
        "answer": "Method, Endpoint, Description"
      }
    ],
    "raw_output_metric": [
      "Project Documentation",
      "Table of Contents",
      "Introduction",
      "Installation",
      "Usage",
      "Configuration",
      "Examples",
      "API Reference",
      "Changelog",
      "License",
      "1. Introduction",
      "1.1. Overview",
      "2. Installation",
      "git clone",
      "cd project",
      "npm install",
      "npm run build",
      "Node.js",
      "3. Usage",
      "4. Configuration",
      "4.1. Key Configuration Parameters",
      "server.host",
      "server.port",
      "database.host",
      "database.user",
      "database.password",
      "features.enableFeatureX",
      "features.maxItems",
      "5. Examples",
      "JavaScript example",
      "Python example",
      "6. API Reference",
      "Method",
      "Endpoint",
      "Description"
    ],
    "rendering": true
  },
  {
    "task_id": "070105",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Sample Project Documentation\n\n## Table of Contents\n- [Introduction](#introduction)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [Examples](#examples)\n- [FAQ](#faq)\n- [License](#license)\n- [Final Remarks](#final-remarks)\n\n---\n\n## Introduction\n\nWelcome to the Sample Project! This document provides detailed instructions for setting up and using the project, including the structural layout and configuration details.\n\n### Project Highlights\n- **Simplicity:** Designed with clarity in mind.\n- **Modularity:** Easily extendable for custom functionalities.\n- **Stability:** Tested for environment consistency.\n\n## Usage\n\nFollow the steps below to get started with the Sample Project:\n\n1. **Download the Repository:**  \n   Clone or download the repository to your local machine.\n2. **Extract Files:**  \n   Unpack the files into your chosen working directory.\n3. **Run Setup Script:**  \n   Open your terminal and navigate to the project directory, then execute:\n   ```\n   ./setup.sh\n   ```\n4. **Start the Server:**  \n   Once the setup is complete, start the server by running:\n   ```\n   ./start_server.sh\n   ```\n5. **Access the Application:**  \n   Open your browser and go to `http://localhost:8080` to access the application.\n\n> Note: Ensure that your system meets the minimum requirements, and use version 2.0 or higher for optimal performance.\n\n## Configuration\n\nAdjustment of the application behavior is managed via the configuration file. Below are default settings with their descriptions:\n\n| Parameter         | Default Value | Description                         |\n| ----------------- | ------------- | ----------------------------------- |\n| PORT              | 8080          | The port number for the web server. |\n| DEBUG_MODE        | false         | Toggle detailed debugging logs.     |\n| MAX_CONNECTIONS   | 100           | Maximum number of concurrent connections. |\n| ENABLE_CACHE      | true          | Enable the caching mechanism for faster load times. |\n\n### Sample Configuration File (config.conf)\nBelow is an example snippet of the configuration file:\n```\n# config.conf\nPORT=8080\nDEBUG_MODE=false\nMAX_CONNECTIONS=100\nENABLE_CACHE=true\n```\n\n## Examples\n\nHere are a few code examples to get you started with the application:\n\n### Initializing the Application\nTo initialize the application, run:\n```\ninitialize_app --config config.conf\n```\n\n### Running the Application\nFor a production environment, execute:\n```\nrun_app --mode production\n```\n\n### Checking Application Status\nTo view the current status with detailed logs, use:\n```\nstatus_check --verbose\n```\n\n## FAQ\n\n### Q: How do I update the configuration?\nA: Simply edit the `config.conf` file with your desired changes and restart the application using `./start_server.sh`.\n\n### Q: Where can I find the application logs?\nA: All logs are stored in the `logs/` directory by default. Check there for detailed error and performance logs.\n\n### Q: Is the project actively maintained?\nA: Yes, the project is under active maintenance. Please refer to the changelog for recent updates.\n\n## License\n\nThis project is distributed under the terms of the MIT License.\n\n### MIT License Summary:\n- **Permission:** Granted to any person to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software.\n- **Liability:** Software is provided \"as is,\" without warranty of any kind.\n\n---\n\n## Final Remarks\n\nThank you for choosing the Sample Project! We hope the instructions above help you get started quickly. For any issues or further questions, consult the FAQ section or feel free to contact the project maintainers through the community channels provided in the repository.\n\nHappy Coding!\n</code>",
    "feature_requirements": "\u2022 The Angular output must display a primary title \"Sample Project Documentation\" as a top-level header.  \n\u2022 It must include a navigational table or list that contains clickable labels for \"Introduction,\" \"Usage,\" \"Configuration,\" \"Examples,\" \"FAQ,\" \"License,\" and \"Final Remarks.\"  \n\u2022 Under the \"Introduction\" section, it should show a secondary header and include a subheading titled \"Project Highlights\" followed by a bullet list of items: \"Simplicity,\" \"Modularity,\" and \"Stability.\"  \n\u2022 The \"Usage\" section must be rendered with a secondary header and a numbered list of steps that describe downloading the repository, extracting files, running a setup script (with a code snippet display for \"./setup.sh\"), starting the server (with a code snippet display for \"./start_server.sh\"), and accessing the application via a URL.  \n\u2022 A block of note text should be visible, indicating a reminder about minimum system requirements and version specifications.  \n\u2022 The \"Configuration\" section should include a secondary header and display a table with three columns labeled \"Parameter,\" \"Default Value,\" and \"Description,\" along with rows for parameters such as \"PORT\" (value: 8080), \"DEBUG_MODE\" (value: false), \"MAX_CONNECTIONS\" (value: 100), and \"ENABLE_CACHE\" (value: true).  \n\u2022 A code block displaying a sample configuration file (e.g., \"config.conf\") should be clearly visible with the parameter lines as outlined.  \n\u2022 In the \"Examples\" section, it must include several sub-sections with code snippet displays showing commands for initializing the application, running the application in production mode, and checking application status with verbosity.  \n\u2022 The \"FAQ\" section must contain a series of questions and corresponding answers addressing configuration updates, log locations, and project maintenance status.  \n\u2022 The \"License\" section should clearly present the project's licensing information, including a subheading for the MIT License Summary and bullet points enumerating permissions and liabilities.  \n\u2022 The final section \"Final Remarks\" must include a thank you message along with closing remarks about contacting the project maintainers.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the primary title displayed at the top of the page?",
        "answer": "Sample Project Documentation"
      },
      {
        "question": "Which navigation labels are visible in the navigation list or table?",
        "answer": "Introduction, Usage, Configuration, Examples, FAQ, License, Final Remarks"
      },
      {
        "question": "In the 'Introduction' section, what subheading and bullet list details are displayed?",
        "answer": "Subheading 'Project Highlights' with bullet items: Simplicity, Modularity, Stability"
      },
      {
        "question": "How many steps are shown in the 'Usage' section and which code snippets are visible?",
        "answer": "5 steps; visible code snippets: './setup.sh' and './start_server.sh'"
      },
      {
        "question": "What are the column labels in the 'Configuration' section table and how many rows of parameters are listed?",
        "answer": "Column labels: Parameter, Default Value, Description; 4 parameter rows (PORT, DEBUG_MODE, MAX_CONNECTIONS, ENABLE_CACHE)"
      },
      {
        "question": "What does the configuration code block display?",
        "answer": "A sample configuration file (config.conf) with parameter lines matching the table details"
      },
      {
        "question": "What content is provided in the 'License' and 'Final Remarks' sections?",
        "answer": "License: MIT License Summary with bullet points for permissions and liabilities; Final Remarks: a thank you message and closing remarks about contacting project maintainers"
      }
    ],
    "raw_output_metric": [
      "Sample Project Documentation",
      "Introduction",
      "Usage",
      "Configuration",
      "Examples",
      "FAQ",
      "License",
      "Final Remarks",
      "Project Highlights",
      "Simplicity",
      "Modularity",
      "Stability",
      "./setup.sh",
      "./start_server.sh",
      "minimum system requirements",
      "version specifications",
      "Parameter",
      "Default Value",
      "Description",
      "PORT",
      "8080",
      "DEBUG_MODE",
      "false",
      "MAX_CONNECTIONS",
      "100",
      "ENABLE_CACHE",
      "true",
      "config.conf",
      "downloading the repository",
      "extracting files",
      "running a setup script",
      "starting the server",
      "accessing the application",
      "initializing the application",
      "production mode",
      "checking application status",
      "configuration updates",
      "log locations",
      "project maintenance status",
      "MIT License Summary",
      "permissions",
      "liabilities",
      "thank you",
      "project maintainers"
    ],
    "rendering": true
  },
  {
    "task_id": "070106",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Title: Markdown Layout Showcase\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Usage Instructions](#usage-instructions)\n3. [Configuration Details](#configuration-details)\n4. [Examples and Code Blocks](#examples-and-code-blocks)\n5. [Frequently Asked Questions](#frequently-asked-questions)\n6. [License Information](#license-information)\n7. [Contributors](#contributors)\n8. [Appendix](#appendix)\n\n---\n\n## Introduction\n\nWelcome to the *Markdown Layout Showcase*. This document is designed to demonstrate a **robust and layered Markdown structure** using various elements like headings, lists, code blocks, tables, and detailed sections. The goal is to render content on a single page that tests structural layout and visual hierarchy.\n\n### Goals of This Document\n- Showcase **visible structure** with clearly defined sections.\n- Emphasize **formatted content** such as bold text, italicized text, and inline code.\n- Use **tables**, **lists**, and **code blocks** to create a visually rich document.\n- Maintain a **standalone document** without external dependencies.\n\n---\n\n## Usage Instructions\n\nTo utilize this document effectively:\n1. **Clone or Download**: Save this Markdown on your local machine.\n2. **Open**: Use any Markdown viewer or compatible editor.\n3. **Edit**: Feel free to modify sections to suit your needs.\n\n### Step-by-Step Process\n\n- **Step 1**: Locate the document.\n- **Step 2**: Review the *Table of Contents*.\n- **Step 3**: Follow each section to understand the layout.\n- **Step 4**: Use code blocks for examples and configuration details.\n\n#### Command Line Example\n```bash\n# Clone the repository containing this document\ngit clone https://example.com/repository.git\n\n# Change directory to the repository folder\ncd repository\n\n# Open the Markdown file using your editor of choice\ncode README.md\n```\n\n---\n\n## Configuration Details\n\nBelow is an example configuration block used in many projects. Customize it as needed.\n\n```\n# Application Configuration File\n\nPORT=8080\nDEBUG=True\nLOG_LEVEL=INFO\nMAX_CONNECTIONS=100\nTIMEOUT_SECONDS=30\n```\n\n### Configuration Key Descriptions\n- **PORT**: The port on which the application will run.\n- **DEBUG**: Toggle to enable verbose debugging information.\n- **LOG_LEVEL**: Set the level of logging: DEBUG, INFO, WARNING, ERROR.\n- **MAX_CONNECTIONS**: Maximum number of concurrent client connections.\n- **TIMEOUT_SECONDS**: Duration before a connection times out.\n\n---\n\n## Examples and Code Blocks\n\nThis section provides practical examples for using Markdown elements like code blocks, quotes, and lists.\n\n### Example Code Block in Python\n```python\ndef calculate_sum(a, b):\n    \"\"\"\n    Calculate the sum of two numbers.\n    \"\"\"\n    return a + b\n\nif __name__ == \"__main__\":\n    result = calculate_sum(5, 7)\n    print(\"The sum is:\", result)\n```\n\n### Quoted Text Block\n> \"Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text.\"\n> \u2013 John Gruber\n\n### Nested Lists Example\n- **Primary List Item 1**\n  - Secondary Item A\n    - Tertiary Item i\n    - Tertiary Item ii\n  - Secondary Item B\n- **Primary List Item 2**\n  - Secondary Item C\n    - Tertiary Item iii\n\n---\n\n## Frequently Asked Questions\n\n### Q1: How do I modify the configuration settings?\n**A:** Open the configuration file in your favorite text editor and change the values as needed.\n\n### Q2: Can I contribute to this document?\n**A:** Yes, contributions are always welcome. Please follow the guidelines provided in the Contributors section.\n\n### Q3: Where can I get support if I encounter issues?\n**A:** Refer to the FAQ section in your local documentation or contact the project maintainers for help.\n\n---\n\n## License Information\n\nThis project is released under the MIT License. By using this document, you agree to the terms and conditions stated in the license.\n\n> **MIT License**\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files, to deal in the Software without restriction...\n\n---\n\n## Contributors\n\nThe following individuals have contributed to this document:\n- **Alice Johnson**\n- **Bob Smith**\n- **Carol Martinez**\n- **David Lee**\n- **Evelyn Clark**\n\nAdditional contributors are welcome to join the project. Please reach out via your preferred method of communication.\n\n---\n\n## Appendix\n\n### Additional Reference Information\n\n#### Supported Platforms\n| Platform          | Supported Version |\n|-------------------|-------------------|\n| Linux             | Debian, Ubuntu    |\n| MacOS             | Catalina+, Big Sur|\n| Windows           | 10, 11            |\n\n#### Known Enhancements\n- **Improved Error Handling**: Future releases will include more robust error catching.\n- **Extended Documentation**: Additional sections and detailed guides.\n- **More Examples**: Increased variety of coding examples.\n\n#### Future Updates\nStay tuned for regular updates focusing on:\n- Enhancements in **performance**.\n- **New formatting styles** in Markdown.\n- Expanded **usage instructions** for better usability.\n\n---\n\nEnd of Markdown Layout Showcase Document.\n</code>",
    "feature_requirements": "\u2022 A main container Angular component that renders the full Markdown document as HTML content.  \n\u2022 A prominently displayed primary heading with the text \"Project Title: Markdown Layout Showcase\".  \n\u2022 A section labeled \"Table of Contents\" that displays an ordered list of the sections: Introduction, Usage Instructions, Configuration Details, Examples and Code Blocks, Frequently Asked Questions, License Information, Contributors, and Appendix.  \n\u2022 An \"Introduction\" section containing a secondary heading and descriptive text that includes formatted phrases (e.g., bold and italic styling) and a nested list of document goals.  \n\u2022 A \"Usage Instructions\" section featuring both an ordered step-by-step list and an unordered list, along with an embedded code block displaying command line examples.  \n\u2022 A \"Configuration Details\" section that includes a code block presenting configuration parameters (e.g., PORT, DEBUG, LOG_LEVEL, MAX_CONNECTIONS, TIMEOUT_SECONDS) alongside a list describing each configuration key.  \n\u2022 An \"Examples and Code Blocks\" section with at least one code block example written in Python, a blockquote for quoted text, and a nested list with multiple levels (primary, secondary, tertiary items).  \n\u2022 A \"Frequently Asked Questions\" section listing questions and answers as separate, clearly identifiable items (e.g., Q1 with its A, Q2 with its A, etc.).  \n\u2022 A \"License Information\" section that contains license details along with a blockquoted excerpt of the MIT License text.  \n\u2022 A \"Contributors\" section that lists individual contributor names as separate bullet items.  \n\u2022 An \"Appendix\" section that includes a table detailing supported platforms (columns for Platform and Supported Version), and lists of known enhancements and future updates.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text displayed in the primary heading at the top of the page?",
        "answer": "Project Title: Markdown Layout Showcase"
      },
      {
        "question": "Which sections are listed in the Table of Contents?",
        "answer": "Introduction, Usage Instructions, Configuration Details, Examples and Code Blocks, Frequently Asked Questions, License Information, Contributors, Appendix"
      },
      {
        "question": "Which section contains a secondary heading, formatted descriptive text, and a nested list of document goals?",
        "answer": "Introduction"
      },
      {
        "question": "What types of lists are included in the Usage Instructions section?",
        "answer": "An ordered step-by-step list and an unordered list"
      },
      {
        "question": "What does the code block in the Configuration Details section display?",
        "answer": "Configuration parameters: PORT, DEBUG, LOG_LEVEL, MAX_CONNECTIONS, TIMEOUT_SECONDS"
      },
      {
        "question": "What programming language is used in the code block example in the Examples and Code Blocks section?",
        "answer": "Python"
      },
      {
        "question": "What visual elements are used to display quoted text in the document?",
        "answer": "Blockquote, including an excerpt of the MIT License text in the License Information section"
      },
      {
        "question": "How are the contributors presented in the Contributors section?",
        "answer": "As separate bullet items"
      },
      {
        "question": "What does the Appendix section include for supported platforms?",
        "answer": "A table with columns for Platform and Supported Version, along with lists of known enhancements and future updates"
      }
    ],
    "raw_output_metric": [
      "Angular",
      "Project Title: Markdown Layout Showcase",
      "Table of Contents",
      "Introduction",
      "Usage Instructions",
      "Configuration Details",
      "Examples and Code Blocks",
      "Frequently Asked Questions",
      "License Information",
      "Contributors",
      "Appendix",
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_CONNECTIONS",
      "TIMEOUT_SECONDS",
      "MIT License",
      "Platform",
      "Supported Version"
    ],
    "rendering": true
  },
  {
    "task_id": "110101",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following React code to Angular code.\n\n<code>\nimport React from \"react\";\n\nfunction Dashboard() {\n  return (\n    <div style={{ fontFamily: \"Arial, sans-serif\", margin: \"20px\" }}>\n      <header style={{ borderBottom: \"2px solid #ccc\", paddingBottom: \"10px\", marginBottom: \"20px\" }}>\n        <h1 style={{ fontSize: \"2em\", margin: \"0\" }}>Dashboard Overview</h1>\n        <p style={{ color: \"#666\", fontSize: \"0.9em\" }}>Welcome to your main dashboard view.</p>\n      </header>\n\n      <main>\n        <section style={{ marginBottom: \"30px\" }}>\n          <h2 style={{ fontSize: \"1.5em\", borderBottom: \"1px solid #ccc\", paddingBottom: \"5px\" }}>Summary</h2>\n          <p style={{ marginTop: \"10px\" }}>\n            This section provides an overview of key metrics that give quick insight into the system performance.\n          </p>\n          <div\n            style={{\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              justifyContent: \"space-between\",\n              marginTop: \"15px\",\n              backgroundColor: \"#f8f8f8\",\n              padding: \"15px\",\n              border: \"1px solid #ddd\"\n            }}\n          >\n            <div style={{ flex: \"1 1 30%\", margin: \"10px\", textAlign: \"center\" }}>\n              <h3>Total Users</h3>\n              <p style={{ fontSize: \"1.2em\" }}>1,234</p>\n            </div>\n            <div style={{ flex: \"1 1 30%\", margin: \"10px\", textAlign: \"center\" }}>\n              <h3>Active Sessions</h3>\n              <p style={{ fontSize: \"1.2em\" }}>567</p>\n            </div>\n            <div style={{ flex: \"1 1 30%\", margin: \"10px\", textAlign: \"center\" }}>\n              <h3>Revenue</h3>\n              <p style={{ fontSize: \"1.2em\" }}>$8,910</p>\n            </div>\n          </div>\n        </section>\n\n        <section style={{ marginBottom: \"30px\" }}>\n          <h2 style={{ fontSize: \"1.5em\", borderBottom: \"1px solid #ccc\", paddingBottom: \"5px\" }}>\n            Recent Activities\n          </h2>\n          <ul style={{ listStyleType: \"disc\",",
    "feature_requirements": "\u2022 The Angular output must include a component template that renders a container with a header and a main section.  \n\u2022 The header section must display an h1 element with the title \"Dashboard Overview\" and a paragraph with the text \"Welcome to your main dashboard view.\"  \n\u2022 The main section must contain a subsection titled \"Summary\" indicated by an h2 element.  \n\u2022 Directly under the \"Summary\" heading, there must be a paragraph providing a brief description of key metrics for system performance.  \n\u2022 The \"Summary\" section must include a container that holds three metric cards or blocks; each must display a subheading with one of the following titles: \"Total Users,\" \"Active Sessions,\" and \"Revenue.\"  \n\u2022 Each metric card must visibly show a corresponding value: \"1,234\" for Total Users, \"567\" for Active Sessions, and \"$8,910\" for Revenue.  \n\u2022 The output should also account for a section titled \"Recent Activities\" (even if the code snippet for this section is truncated), ensuring that its heading is rendered appropriately.",
    "task_name": "Convert React to Angular",
    "input_type": "React",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the header title displayed at the top of the container?",
        "answer": "Dashboard Overview"
      },
      {
        "question": "What welcome message appears below the header title?",
        "answer": "Welcome to your main dashboard view."
      },
      {
        "question": "What is the title of the main section's summary?",
        "answer": "Summary"
      },
      {
        "question": "How many metric cards are shown in the Summary section?",
        "answer": "3"
      },
      {
        "question": "What value is shown on the metric card labeled 'Total Users'?",
        "answer": "1,234"
      },
      {
        "question": "What value is shown on the metric card labeled 'Active Sessions'?",
        "answer": "567"
      },
      {
        "question": "What value is shown on the metric card labeled 'Revenue'?",
        "answer": "$8,910"
      },
      {
        "question": "Is there a 'Recent Activities' section with its heading rendered?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "Dashboard Overview",
      "Welcome to your main dashboard view.",
      "Summary",
      "Total Users",
      "Active Sessions",
      "Revenue",
      "1,234",
      "567",
      "$8,910",
      "Recent Activities"
    ],
    "rendering": true
  },
  {
    "task_id": "110102",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following React code to Angular code.\n\n<code>\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', margin: '20px' }}>\n      {/* Header Section */}\n      <header>\n        <h1 style={{ borderBottom: '2px solid #444', paddingBottom: '10px' }}>Dashboard Overview</h1>\n        <nav>\n          <ul style={{ listStyle: 'none', paddingLeft: 0, display: 'flex', gap: '15px' }}>\n            <li style={{ padding: '5px 10px', border: '1px solid #ccc' }}>Home</li>\n            <li style={{ padding: '5px 10px', border: '1px solid #ccc' }}>Profile</li>\n            <li style={{ padding: '5px 10px', border: '1px solid #ccc' }}>Messages</li>\n            <li style={{ padding: '5px 10px', border: '1px solid #ccc' }}>Settings</li>\n          </ul>\n        </nav>\n      </header>\n      \n      {/* Main Content */}\n      <main>\n        {/* User Information Section */}\n        <section style={{ marginTop: '30px' }}>\n          <h2>User Information</h2>\n          <div style={{ padding: '10px', border: '1px solid #ddd', borderRadius: '4px' }}>\n            <p><strong>Name:</strong> Jane Smith</p>\n            <p><strong>Email:</strong> jane.smith@example.com</p>\n            <p><strong>Role:</strong> Project Manager</p>\n          </div>\n        </section>\n        \n        {/* Recent Activity Section */}\n        <section style={{ marginTop: '30px' }}>\n          <h2>Recent Activity</h2>\n          <ul style={{ paddingLeft: '20px' }}>\n            <li>\n              <time dateTime=\"2023-10-01\" style={{ fontStyle: 'italic' }}>October 1, 2023</time> \u2013 Completed the quarterly review.\n            </li>\n            <li>\n              <time dateTime=\"2023-09-25\" style={{ fontStyle: 'italic' }}>September 25, 2023</time> \u2013 Updated the project timeline.\n            </li>\n            <li>\n              <time dateTime=\"2023-09-20\" style={{ fontStyle: 'italic' }}>September 20, 2023</time> \u2013 Held a team meeting.\n            </li>\n          </ul>\n        </section>\n        \n        {/* Statistics Section */}\n        <section style={{ marginTop: '30px' }}>\n          <h2>Statistics</h2>\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead>\n              <tr>\n                <th style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'left' }}>Metric</th>\n                <th style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'left' }}>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td style={{ border: '1px solid #ccc', padding: '8px' }}>Visits</td>\n                <td style={{ border: '1px solid #ccc', padding: '8px' }}>1,234</td>\n              </tr>\n              <tr>\n                <td style={{ border: '1px solid #ccc', padding: '8px' }}>Messages</td>\n                <td style={{ border: '1px solid #ccc', padding: '8px' }}>87</td>\n              </tr>\n              <tr>\n                <td style={{ border: '1px solid #ccc', padding: '8px' }}>Engagement</td>\n                <td style={{ border: '1px solid #ccc', padding: '8px",
    "feature_requirements": "\u2022 The converted Angular output must display a header section with a title reading \"Dashboard Overview\".  \n\u2022 The header must include a navigation bar featuring a horizontal list with the items \"Home\", \"Profile\", \"Messages\", and \"Settings\".  \n\u2022 A distinct \"User Information\" section must be present, showing labeled text fields for Name (with \"Jane Smith\"), Email (with \"jane.smith@example.com\"), and Role (with \"Project Manager\").  \n\u2022 The main content must contain a \"Recent Activity\" section that lists three activities, each including a date presented as text (e.g., \"October 1, 2023\", \"September 25, 2023\", and \"September 20, 2023\") accompanied by corresponding descriptive text (\"Completed the quarterly review\", \"Updated the project timeline\", and \"Held a team meeting\").  \n\u2022 A \"Statistics\" section must be rendered that includes a table with two columns labeled \"Metric\" and \"Value\".  \n\u2022 The statistics table must include at least three rows showing metrics such as \"Visits\" (with a value of \"1,234\"), \"Messages\" (with a value of \"87\"), and a third metric (e.g., \"Engagement\") with its corresponding value.",
    "task_name": "Convert React to Angular",
    "input_type": "React",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the header title displayed at the top?",
        "answer": "Dashboard Overview"
      },
      {
        "question": "Which items are shown in the navigation bar?",
        "answer": "Home, Profile, Messages, Settings"
      },
      {
        "question": "What section displays user details?",
        "answer": "User Information"
      },
      {
        "question": "What text is shown in the Name field of the User Information section?",
        "answer": "Jane Smith"
      },
      {
        "question": "What email is displayed in the User Information section?",
        "answer": "jane.smith@example.com"
      },
      {
        "question": "What role is mentioned in the User Information section?",
        "answer": "Project Manager"
      },
      {
        "question": "How many activities are listed in the Recent Activity section?",
        "answer": "3"
      },
      {
        "question": "What is the date of the first activity listed?",
        "answer": "October 1, 2023"
      },
      {
        "question": "What are the header labels of the Statistics table?",
        "answer": "Metric, Value"
      }
    ],
    "raw_output_metric": [
      "Dashboard Overview",
      "Home",
      "Profile",
      "Messages",
      "Settings",
      "User Information",
      "Name",
      "Jane Smith",
      "Email",
      "jane.smith@example.com",
      "Role",
      "Project Manager",
      "Recent Activity",
      "October 1, 2023",
      "Completed the quarterly review",
      "September 25, 2023",
      "Updated the project timeline",
      "September 20, 2023",
      "Held a team meeting",
      "Statistics",
      "Metric",
      "Value",
      "Visits",
      "1,234",
      "Messages",
      "87",
      "Engagement"
    ],
    "rendering": true
  },
  {
    "task_id": "000103",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a transaction summary with detailed order information.\n\nFeature Requirements:\n- Include a centered <h2> element with the text \"Transaction Summary\" at the top.\n- Use a main <div> container with a class name of \"transaction-container\" to wrap the component.\n- Display exactly 2 sections, each wrapped in a <section> element with distinct content.\n- In the first section, create an unordered list (<ul>) with exactly 3 list items (<li>), where each item contains a label and a value separated by a colon.\n- Ensure one list item\u2019s value is styled with a CSS class \"highlight-red\" so that its text appears in red.\n- In the second section, include a paragraph (<p>) with an inline style that sets the font-style to italic.\n- Add a button element labeled \"Submit Report\" at the bottom, placed inside a <div> with the class \"button-wrapper\" for proper alignment.\n- Organize the structure so that each element is clearly visible and follows the hierarchy as described without any extra or missing parts.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered header text at the top of the component?",
        "answer": "Transaction Summary"
      },
      {
        "question": "How many sections are visible in the layout?",
        "answer": "2"
      },
      {
        "question": "How many items are listed in the unordered list in the first section?",
        "answer": "3"
      },
      {
        "question": "Does one of the list items feature a red highlighted value?",
        "answer": "Yes, through the 'highlight-red' class"
      },
      {
        "question": "Is the paragraph in the second section styled with italics?",
        "answer": "Yes, it uses an inline style for italic font"
      },
      {
        "question": "What label is shown on the button at the bottom of the component?",
        "answer": "Submit Report"
      },
      {
        "question": "Which CSS class is applied to the main container wrapping the component?",
        "answer": "transaction-container"
      },
      {
        "question": "In the list items, how is the information structured between the label and its value?",
        "answer": "They are separated by a colon"
      }
    ],
    "raw_output_metric": [
      "Transaction Summary",
      "transaction-container",
      "<section>",
      "<ul>",
      "<li>",
      ":",
      "highlight-red",
      "<p",
      "font-style: italic;",
      "Submit Report",
      "button-wrapper"
    ],
    "rendering": true
  },
  {
    "task_id": "000104",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text into an Angular component that displays a store inventory dashboard.\n\nFeature Requirements:\n- Render a centered page header using an <h1> element with the text 'Inventory Dashboard'.\n- Wrap the main content in a <section> element with the class name 'inventory-section'.\n- Within the section, create exactly 3 distinct <div> elements, each representing a different inventory category.\n- Each inventory category <div> must include a title in an <h3> element with a unique category name and a table that lists items.\n- Each table should have exactly 2 columns labeled 'Item' and 'Stock Count', respectively.\n- Populate every table with exactly 4 rows, where each row displays an item's name and its corresponding stock count derived from the input text.\n- Ensure one of the stock count values in any table is styled using an inline style attribute that sets the color to blue.\n- Include a footer using a <footer> element that holds a button labeled 'Update Inventory', which is positioned inside a <div> with the class 'footer-button'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the centered page header?",
        "answer": "Inventory Dashboard"
      },
      {
        "question": "How many inventory category blocks are present on the page?",
        "answer": "3"
      },
      {
        "question": "How is the main content of the inventory dashboard wrapped?",
        "answer": "Inside a section element with the class 'inventory-section'"
      },
      {
        "question": "What are the column headers in each inventory table?",
        "answer": "Item and Stock Count"
      },
      {
        "question": "How many rows of inventory items are shown in each table?",
        "answer": "4"
      },
      {
        "question": "Is any stock count styled differently, and if so, what color is used?",
        "answer": "Yes, one stock count value is styled with the color blue"
      },
      {
        "question": "Where is the 'Update Inventory' button located?",
        "answer": "Inside a footer element within a div of class 'footer-button'"
      }
    ],
    "raw_output_metric": [
      "Inventory Dashboard",
      "inventory-section",
      "<h1>",
      "<section",
      "<div>",
      "<h3>",
      "Item",
      "Stock Count",
      "color: blue",
      "<footer>",
      "footer-button",
      "Update Inventory"
    ],
    "rendering": true
  },
  {
    "task_id": "000107",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a detailed project summary with structured schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Project Snapshot'.\n- Wrap all content within a <div> element that has the class name 'project-summary' for overall layout.\n- Create exactly 3 sections using <section> elements, each named Overview, Timeline, and Notes.\n- In the Overview section, display a table (<table>) with exactly 3 rows (<tr>), each row containing 2 cells (<td>) that show a key and its corresponding value from the input.\n- In the Timeline section, include an unordered list (<ul>) with exactly 4 list items (<li>), each representing a milestone with a date and description.\n- In the Notes section, add a blockquote (<blockquote>) that presents text with emphasized styling.\n- Add a footer at the bottom using a <div> with the class 'action-footer' that contains a button labeled 'Update Schedule'.\n- Ensure that in the table, the value in the second row is styled with an inline style to set the text color to blue.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered title displayed at the top of the page?",
        "answer": "Project Snapshot"
      },
      {
        "question": "How many sections are present in the project summary?",
        "answer": "3"
      },
      {
        "question": "What are the names of the three sections?",
        "answer": "Overview, Timeline, and Notes"
      },
      {
        "question": "How many rows does the Overview table have?",
        "answer": "3"
      },
      {
        "question": "How many cells are in each row of the Overview table?",
        "answer": "2"
      },
      {
        "question": "What unique style is applied to the value in the second row of the table?",
        "answer": "Text color set to blue"
      },
      {
        "question": "How many milestones are listed in the Timeline section?",
        "answer": "4"
      },
      {
        "question": "What is the label on the button in the footer area?",
        "answer": "Update Schedule"
      }
    ],
    "raw_output_metric": [
      "Project Snapshot",
      "project-summary",
      "<section>",
      "Overview",
      "Timeline",
      "Notes",
      "<table>",
      "<tr>",
      "<td>",
      "style=\"color: blue;\"",
      "<ul>",
      "<li>",
      "<blockquote>",
      "action-footer",
      "Update Schedule"
    ],
    "rendering": true
  },
  {
    "task_id": "000109",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nGenerate an Angular component that displays a product catalog with a structured layout and interactive elements.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Product Catalog'.\n- Create a <div> element serving as a grid container with a class name of 'catalog-grid' for layout organization.\n- Incorporate exactly 3 sections: a header, a content area, and a footer, each wrapped in a <section> element.\n- In the header section, include an <h3> element with the text 'Explore Our Best Sellers' aligned to the left, and apply an inline style setting its background to a linear gradient.\n- Within the content section, implement an Angular table that lists exactly 4 products, where each row displays a product name and its price separated by a hyphen (-).\n- Ensure one product row has its product name styled in blue using a CSS class called 'blue-text'.\n- In the footer section, add a <div> with class 'footer-button' containing a button labeled 'Load More'.\n- Introduce a <p> element adjacent to the table that displays the current date in italic text through inline styling.\n- All elements must use clearly defined class names (such as 'header-section', 'table-row', 'footer-section') for consistent styling.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text of the centered title at the top?",
        "answer": "Product Catalog"
      },
      {
        "question": "How many sections are present in the component layout?",
        "answer": "3"
      },
      {
        "question": "What text is displayed in the header section's h3 element?",
        "answer": "Explore Our Best Sellers"
      },
      {
        "question": "How many products are listed in the Angular table?",
        "answer": "4"
      },
      {
        "question": "What information is shown in each table row?",
        "answer": "A product name and its price separated by a hyphen"
      },
      {
        "question": "How is one of the product names distinctively styled in the table?",
        "answer": "It is styled in blue"
      },
      {
        "question": "What label is visible on the button located in the footer section?",
        "answer": "Load More"
      }
    ],
    "raw_output_metric": [
      "Product Catalog",
      "catalog-grid",
      "Explore Our Best Sellers",
      "linear-gradient",
      "blue-text",
      "footer-button",
      "Load More",
      "header-section",
      "table-row",
      "footer-section",
      "font-style: italic",
      "-"
    ],
    "rendering": true
  },
  {
    "task_id": "000110",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nGenerate an Angular component that organizes dynamic city information and events details.\n\nFeature Requirements:\n- Use an <h1> element at the top of the component with the text \"City Events\".\n- Include a <div> element with the class name \"city-container\" to serve as the primary layout wrapper.\n- Create exactly 3 sections, each wrapped in a <section> element to separate different content areas.\n- The first section must contain 2 paragraphs (<p>): the first describing a city overview and the second summarizing current events.\n- The second section should include an ordered list (<ol>) with precisely 4 list items (<li>), each formatted as \"Event: Details\".\n- Ensure that one of the list items in the ordered list has its text styled with a CSS class called \"highlight-event\", which applies blue coloring.\n- The third section must display a paragraph (<p>) with inline styles that set the font size to 18px and the text color to green, offering a closing remark.\n- Separate each section with a horizontal line (<hr>) element for clear visual division.\n- Add a button labeled \"Load More\" within a <div> element with the class name \"button-wrapper\", positioned at the bottom of the component.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the top title displayed on the component?",
        "answer": "City Events"
      },
      {
        "question": "How many content sections are clearly divided by horizontal lines?",
        "answer": "3"
      },
      {
        "question": "How many descriptive paragraphs are visible in the first section?",
        "answer": "2"
      },
      {
        "question": "How many event entries are listed in the second section?",
        "answer": "4"
      },
      {
        "question": "Is one of the event entries visually distinguished with blue text?",
        "answer": "Yes"
      },
      {
        "question": "What styling is applied to the closing remark in the third section?",
        "answer": "It has green text color"
      },
      {
        "question": "What label is shown on the button at the bottom of the component?",
        "answer": "Load More"
      }
    ],
    "raw_output_metric": [
      "City Events",
      "city-container",
      "<section>",
      "<p>",
      "<ol>",
      "<li>",
      "Event: Details",
      "highlight-event",
      "<hr>",
      "button-wrapper",
      "Load More",
      "18px",
      "color: green"
    ],
    "rendering": true
  },
  {
    "task_id": "000114",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a project's performance metrics.\n\nFeature Requirements:\n- Include a centered <h1> element at the top with the text \"Project Metrics\".\n- Wrap all content in a main container <div> with the class name 'metrics-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element with unique IDs: 'overview', 'chart', and 'details'.\n- In the 'overview' section, include an unordered list (<ul>) that contains exactly 4 list items (<li>), each displaying a metric name and its value separated by a dash (-).\n- Within the 'overview' section, ensure that one of the list items applies a CSS class called 'critical' to its metric value, which should be styled with red text.\n- In the 'chart' section, add a paragraph (<p>) that mentions the chart is dynamically generated, and apply an inline style to make the text bold.\n- In the 'details' section, include two distinct paragraphs (<p>) that provide additional information based on the input data.\n- At the bottom of the component, insert a <div> with the class name 'action-btn-container' that holds a button labeled \"Update Metrics\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title text displayed at the top of the component?",
        "answer": "Project Metrics"
      },
      {
        "question": "How many sections are displayed in the component?",
        "answer": "3"
      },
      {
        "question": "What unique IDs are assigned to the sections?",
        "answer": "overview, chart, and details"
      },
      {
        "question": "How many list items appear in the unordered list within the overview section?",
        "answer": "4"
      },
      {
        "question": "Does one of the list items have special styling for its metric value? If so, what is applied?",
        "answer": "Yes, red text"
      },
      {
        "question": "How many paragraphs are shown in the details section?",
        "answer": "2"
      },
      {
        "question": "What element is located at the bottom of the component and what does its button display?",
        "answer": "A button labeled 'Update Metrics'"
      }
    ],
    "raw_output_metric": [
      "Project Metrics",
      "metrics-wrapper",
      "overview",
      "chart",
      "details",
      "<ul>",
      "<li>",
      "critical",
      "-",
      "bold",
      "action-btn-container",
      "Update Metrics"
    ],
    "rendering": true
  },
  {
    "task_id": "000117",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a structured weekly weather report.\n\nFeature Requirements:\n- Create an outer container using a <div> element with the class name 'weather-card' to encapsulate all the content.\n- Place a centered title using an <h1> element with the text 'Weekly Weather' at the top of the component.\n- Include exactly 2 sections: the first <section> should be labeled 'Forecast Details' and the second <section> should be labeled 'Weather Insights'.\n- In the first section, use an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a distinct weather attribute in the format \"Attribute - Value\".\n- Apply a CSS class named 'highlight-blue' to one of the list items in the forecast, ensuring that the value text is colored blue.\n- In the second section, include a paragraph (<p>) element that provides a summary of the weekly forecast, and set an inline style on the paragraph to apply a background color of light yellow.\n- At the bottom of the component, add a button element labeled 'Update Forecast', which should be wrapped inside a <div> element with the class 'footer'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title displayed at the top of the component?",
        "answer": "Weekly Weather"
      },
      {
        "question": "How many sections are present in the component?",
        "answer": "2"
      },
      {
        "question": "What is the label of the first section?",
        "answer": "Forecast Details"
      },
      {
        "question": "How many list items are shown in the Forecast Details section?",
        "answer": "4"
      },
      {
        "question": "What visual feature distinguishes one of the list items in the forecast?",
        "answer": "Its value text is styled in blue"
      },
      {
        "question": "What is the label of the second section?",
        "answer": "Weather Insights"
      },
      {
        "question": "What background color is applied to the summary paragraph in the Weather Insights section?",
        "answer": "Light yellow"
      },
      {
        "question": "What is the text on the button found at the bottom of the component?",
        "answer": "Update Forecast"
      }
    ],
    "raw_output_metric": [
      "weather-card",
      "Weekly Weather",
      "Forecast Details",
      "Weather Insights",
      "highlight-blue",
      "Attribute - Value",
      "Update Forecast",
      "footer",
      "lightyellow"
    ],
    "rendering": true
  },
  {
    "task_id": "000118",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component designed to display a task tracker interface.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'tracker-container'.\n- Insert a prominent header using an <h1> element with the text 'Task Tracker Dashboard', ensuring it is centered on the page.\n- Divide the component into exactly three sections, each wrapped in a <section> element and containing unique content.\n- In the first section, include an ordered list (<ol>) with exactly 4 list items (<li>), each displaying a task title followed by a dash and its assigned priority.\n- In the second section, display a paragraph (<p>) that contains a span element with inline styling to set the font weight to bold.\n- In the third section, construct a table (<table>) with 2 columns labeled 'Task' and 'Status', and populate it with exactly 2 rows of data.\n- Position a button labeled 'Update Tracker' at the bottom of the component within a <div> element having the class 'feedback-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the header text displayed at the top of the page?",
        "answer": "Task Tracker Dashboard"
      },
      {
        "question": "How many sections are visible in the interface?",
        "answer": "3"
      },
      {
        "question": "How many tasks are listed in the ordered list in the first section?",
        "answer": "4"
      },
      {
        "question": "What symbol is used to separate the task title and its priority in the first section\u2019s list items?",
        "answer": "Dash"
      },
      {
        "question": "What styling is applied to the text inside the span element in the second section?",
        "answer": "Bold"
      },
      {
        "question": "What are the two column labels displayed in the table?",
        "answer": "Task and Status"
      },
      {
        "question": "How many rows of data can be seen in the table?",
        "answer": "2"
      },
      {
        "question": "What text is shown on the button at the bottom of the component?",
        "answer": "Update Tracker"
      }
    ],
    "raw_output_metric": [
      "tracker-container",
      "Task Tracker Dashboard",
      "<section>",
      "<ol>",
      "<li>",
      "-",
      "<p>",
      "bold",
      "<table>",
      "Task",
      "Status",
      "feedback-container",
      "Update Tracker"
    ],
    "rendering": true
  },
  {
    "task_id": "000120",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that structures distinct sections of a user report.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"User Report\" displayed at the top.\n- Wrap the entire content within a <div> element that has a class name of \"report-wrapper\" for layout.\n- Create exactly three <section> elements, each representing a unique part of the report: \"Summary\", \"Details\", and \"Notes\".\n- In the \"Summary\" section, include an unordered list (<ul>) with exactly three list items (<li>), each displaying a label and its corresponding value separated by a colon (:); ensure one list item's value text is styled with a CSS class called \"important\" to apply a blue color.\n- In the \"Details\" section, include a paragraph (<p>) element with the text styled in bold using an inline style (e.g., style=\"font-weight: bold;\").\n- In the \"Notes\" section, construct a simple form containing exactly two input fields (one for a user's name and one for their comment) and a submit button labeled \"Send\".\n- Add a footer at the bottom of the component by including a <div> with the class \"footer-area\" that contains centered text reading \"Report Generated\".",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title text displayed at the top of the report?",
        "answer": "User Report"
      },
      {
        "question": "How many distinct sections are present in the report?",
        "answer": "3"
      },
      {
        "question": "Which section names are used to label the report sections?",
        "answer": "Summary, Details, Notes"
      },
      {
        "question": "How many list items are visible in the Summary section?",
        "answer": "3"
      },
      {
        "question": "How is the text in the Details section formatted?",
        "answer": "It is displayed in bold"
      },
      {
        "question": "How many input fields are included in the Notes section form and what are they for?",
        "answer": "2; one for a user's name and one for a comment"
      },
      {
        "question": "What is the label on the submit button in the Notes section and what text is shown in the footer at the bottom?",
        "answer": "The button is labeled 'Send' and the footer shows 'Report Generated'"
      }
    ],
    "raw_output_metric": [
      "User Report",
      "report-wrapper",
      "Summary",
      "Details",
      "Notes",
      "important",
      "font-weight: bold;",
      "Send",
      "footer-area",
      "Report Generated"
    ],
    "rendering": true
  },
  {
    "task_id": "000121",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that displays organized library event details as structured data.\n\nFeature Requirements:\n- Include a centered header using an <h1> element with the text 'Library Events'.\n- Use a <div> element to create a container with a class name of 'events-container' for layout purposes.\n- Display exactly 3 sections, each wrapped in a <section> element and containing unique content.\n- The first section should include an ordered list (<ol>) with exactly 4 list items (<li>), each formatted as 'Event: Date' extracted from the input.\n- The second section must contain a paragraph (<p>) with styled text using an inline style that sets the font-weight to bold and the text color to dark green, summarizing the event highlights.\n- The third section should include a table (<table>) with the class 'attendees-table' that consists of a header row (<thead>) defining exactly 3 column titles and a single data row (<tr>) with 3 cells (<td>) for attendee metrics.\n- Add a button labeled 'Register Now' positioned at the bottom of the component inside a <div> element with the class 'action-container' as a clear call-to-action.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text of the centered header at the top of the page?",
        "answer": "Library Events"
      },
      {
        "question": "How many sections are displayed in the component?",
        "answer": "3"
      },
      {
        "question": "In the first section, how many items are listed in the ordered list?",
        "answer": "4"
      },
      {
        "question": "How is the event highlight text styled in the second section?",
        "answer": "Bold and dark green"
      },
      {
        "question": "How many column titles are defined in the table header in the third section?",
        "answer": "3"
      },
      {
        "question": "How many cells are present in the data row of the table in the third section?",
        "answer": "3"
      },
      {
        "question": "What is the label of the button located at the bottom of the component?",
        "answer": "Register Now"
      }
    ],
    "raw_output_metric": [
      "h1",
      "Library Events",
      "events-container",
      "section",
      "ol",
      "li",
      "Event: Date",
      "p",
      "bold",
      "dark green",
      "table",
      "attendees-table",
      "thead",
      "tr",
      "td",
      "action-container",
      "Register Now"
    ],
    "rendering": true
  },
  {
    "task_id": "000127",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nGenerate an Angular component that transforms a text description of a travel itinerary into a structured, interactive itinerary layout.\n\nFeature Requirements:\n- Display a centered title using an <h1> element with the text \"Trip Itinerary\".\n- Create a main container using a <div> element with a class name \"itinerary-container\".\n- Include exactly 3 sections, each enclosed in a <section> element, to organize different parts of the itinerary.\n- In the first section, render an ordered list (<ol>) with exactly 4 list items (<li>), where each list item presents an activity time and description separated by a dash (-).\n- In the second section, display a paragraph (<p>) with the text \"Plan your journey!\" and apply an inline style to set the text color to blue.\n- In the third section, include a footer-like block by using a <div> with the class \"action-buttons\" that contains two buttons labeled \"Start Trip\" and \"Cancel\".\n- Each list item in the ordered list must also contain a span element with the class \"activity-id\" that shows a unique sequential identifier.\n- Ensure that all HTML elements are arranged with clear nesting so that the structure and layout are easily verifiable.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the main centered title?",
        "answer": "Trip Itinerary"
      },
      {
        "question": "How many main sections are displayed in the layout?",
        "answer": "3"
      },
      {
        "question": "How many items are in the ordered list in the first section?",
        "answer": "4"
      },
      {
        "question": "What symbol separates the activity time and description in each list item?",
        "answer": "-"
      },
      {
        "question": "Does each list item display a unique sequential identifier?",
        "answer": "Yes"
      },
      {
        "question": "What text is shown in the paragraph of the second section?",
        "answer": "Plan your journey!"
      },
      {
        "question": "What color is applied to the text in the second section's paragraph?",
        "answer": "Blue"
      },
      {
        "question": "How many buttons are visible in the action button block of the third section?",
        "answer": "2"
      },
      {
        "question": "What are the labels on the two buttons in the third section?",
        "answer": "Start Trip and Cancel"
      }
    ],
    "raw_output_metric": [
      "Trip Itinerary",
      "itinerary-container",
      "<section>",
      "<ol>",
      "<li>",
      "activity-id",
      "-",
      "Plan your journey!",
      "blue",
      "action-buttons",
      "Start Trip",
      "Cancel"
    ],
    "rendering": true
  },
  {
    "task_id": "000128",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nTransform the provided text input into an Angular component that displays structured event schedule information.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text 'Event Schedule'.\n- Enclose all component content within a <div> element with a class name of 'schedule-wrapper'.\n- Create exactly 3 sections, each enclosed in a <section> element that presents different aspects of the event details.\n- The first section must include an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Day: Event\" based on the input.\n- In the second section, insert a paragraph (<p>) that displays additional event notes, applying an inline style to underline the text.\n- The third section should contain a <div> element wrapping a numbered list (<ol>) with precisely 2 items, each item representing a venue detail.\n- Within the unordered list of the first section, ensure one list item has its event title styled using a CSS class named 'alert'.\n- Add a button element labeled 'Load More Events', positioned at the bottom of the component using a <div> with the class 'action-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered title at the top of the component?",
        "answer": "Event Schedule"
      },
      {
        "question": "How many sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "How many bullet points appear in the first section's list?",
        "answer": "4"
      },
      {
        "question": "Is one of the event names in the first section styled differently?",
        "answer": "Yes"
      },
      {
        "question": "What descriptive text is underlined in the second section?",
        "answer": "Additional event notes"
      },
      {
        "question": "How many venue details are listed in the numbered list of the third section?",
        "answer": "2"
      },
      {
        "question": "What label is visible on the button at the bottom of the component?",
        "answer": "Load More Events"
      }
    ],
    "raw_output_metric": [
      "<h2>",
      "Event Schedule",
      "<div>",
      "schedule-wrapper",
      "<section>",
      "<ul>",
      "<li>",
      ":",
      "<p>",
      "<ol>",
      "alert",
      "Load More Events",
      "action-container"
    ],
    "rendering": true
  },
  {
    "task_id": "000130",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed book review layout.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Book Review'.\n- Use a <div> element with a class name of 'book-container' to wrap the entire component.\n- Create exactly 3 sections, each enclosed in a <section> element and containing distinct content.\n- The first section must display a paragraph (<p>) with the input summary text and use an inline style to set the font size to 16px and the font family to Arial.\n- The second section must contain an ordered list (<ol>) with exactly 4 list items (<li>), each representing a chapter with its title and page range, where each list item shows the chapter name and page range separated by a dash (-).\n- The third section must include a table (<table>) with one header row and exactly 2 data rows; the header row should have two columns labeled 'Character' and 'Role'.\n- Inside the second section, include a hyperlink (<a>) with the text 'Read More' that has an href attribute set to '#' and is aligned to the right using a wrapping <div> with a class 'link-container'.\n- At the bottom of the component, add a <div> with a class 'footer-section' that displays the static text 'End of Review'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title displayed at the top of the component?",
        "answer": "Book Review"
      },
      {
        "question": "How many sections are visible in the layout?",
        "answer": "3"
      },
      {
        "question": "What font family is applied to the summary text in the first section?",
        "answer": "Arial"
      },
      {
        "question": "How many list items are shown in the ordered list within the second section?",
        "answer": "4"
      },
      {
        "question": "What is the text displayed on the hyperlink in the second section?",
        "answer": "Read More"
      },
      {
        "question": "What column labels are shown in the table header in the third section?",
        "answer": "Character and Role"
      },
      {
        "question": "What static text is found at the bottom of the component in the footer?",
        "answer": "End of Review"
      }
    ],
    "raw_output_metric": [
      "Book Review",
      "book-container",
      "section",
      "p",
      "16px",
      "Arial",
      "ol",
      "li",
      "-",
      "a",
      "Read More",
      "link-container",
      "Character",
      "Role",
      "footer-section",
      "End of Review"
    ],
    "rendering": true
  },
  {
    "task_id": "000131",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that presents a summary of a user feedback survey.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text 'Survey Summary'.\n- Wrap all content in a <div> element with a class name of 'survey-container' to structure the layout.\n- Create exactly 3 distinct sections, each enclosed in a <section> element.\n- The first section must include a table that has a header row and exactly 2 data rows; each row should have 3 cells representing different feedback metrics.\n- The second section should display a paragraph (<p>) with inline styling that sets the font size to 16px and the text color to teal.\n- The third section must include a <span> element that shows a status message, using a CSS class called 'status-blue' to render the text in blue.\n- At the bottom of the component, include a button labeled 'Submit Feedback', positioned within a <div> element with class 'action-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the centered title displayed at the top?",
        "answer": "Survey Summary"
      },
      {
        "question": "How many distinct sections are present in the component?",
        "answer": "3"
      },
      {
        "question": "In the first section, what element is used to present feedback metrics?",
        "answer": "Table"
      },
      {
        "question": "How many data rows does the table include?",
        "answer": "2"
      },
      {
        "question": "How many cells are present in each row of the table?",
        "answer": "3"
      },
      {
        "question": "What are the inline style attributes applied to the paragraph in the second section?",
        "answer": "text color teal"
      },
      {
        "question": "What is the label on the button at the bottom of the component?",
        "answer": "Submit Feedback"
      }
    ],
    "raw_output_metric": [
      "Survey Summary",
      "survey-container",
      "<section>",
      "16px",
      "status-blue",
      "Submit Feedback",
      "action-container",
      "teal"
    ],
    "rendering": true
  },
  {
    "task_id": "000133",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays structured employee performance reviews.\n\nFeature Requirements:\n- Include a centered title using an <h1> element with the text \"Performance Reviews\" and an inline style that sets the background color to lightblue.\n- Use a <div> element with a class name \"review-wrapper\" to serve as the main container for the component.\n- Create exactly 3 sections, each wrapped in a <section> element: the first section displays employee names, the second shows performance scores, and the third provides review comments.\n- In the first section, include an unordered list (<ul>) containing exactly 4 list items (<li>), each displaying an employee's name prefaced by a label \"Name:\".\n- In the second section, add a <table> element with exactly 2 rows and 2 columns; one column shows metric labels (like \"Q1 Score\" and \"Q2 Score\") and the other shows their corresponding numeric values.\n- In the third section, include a paragraph (<p>) with an inline style to italicize the text, containing a note such as \"Overall feedback for the review period.\"\n- Ensure at least one list item in the first section applies a CSS class called \"highlight-green\" to color its text green.\n- Add a button labeled \"Submit Reviews\" inside a <div> with the class \"button-group\" placed at the bottom of the component.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title text displayed at the top of the component?",
        "answer": "Performance Reviews"
      },
      {
        "question": "What is the background color of the title?",
        "answer": "lightblue"
      },
      {
        "question": "How many sections are visible in the component?",
        "answer": "3"
      },
      {
        "question": "How many employee names are listed in the first section?",
        "answer": "4"
      },
      {
        "question": "Is any employee name highlighted in green?",
        "answer": "Yes"
      },
      {
        "question": "What metric labels are shown in the table?",
        "answer": "Q1 Score and Q2 Score"
      },
      {
        "question": "What note is provided in the review comments section?",
        "answer": "Overall feedback for the review period"
      },
      {
        "question": "What is the label on the button at the bottom of the component?",
        "answer": "Submit Reviews"
      }
    ],
    "raw_output_metric": [
      "Performance Reviews",
      "lightblue",
      "review-wrapper",
      "<section>",
      "<ul>",
      "<li>",
      "Name:",
      "highlight-green",
      "Q1 Score",
      "Q2 Score",
      "<p>",
      "Overall feedback for the review period.",
      "button-group",
      "Submit Reviews"
    ],
    "rendering": true
  },
  {
    "task_id": "000136",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that constructs a structured user registration form.\n\nFeature Requirements:\n- Create a top-level <h1> element displaying the text 'User Registration' aligned to the center.\n- Include a <div> element with the class name 'form-wrapper' to group all form-related elements.\n- Design exactly 3 input fields within separate <label> elements: one for a user\u2019s name (Text), one for the email (Email), and one for the password (Password).\n- Wrap the email input field inside a <div> with a class of 'email-container' and apply an attribute to enforce proper email format.\n- Place a <button> element labeled 'Submit' immediately after the input fields to trigger form submission.\n- Insert a <section> element beneath the form containing an unordered list (<ul>) with exactly 2 list items (<li>), each showing a specific guideline for filling out the form.\n- Add a <footer> element with an inline style that sets the background color to lightgray, containing a paragraph with the text 'All data is confidential'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text displayed in the main header?",
        "answer": "User Registration"
      },
      {
        "question": "How many input fields are present in the form?",
        "answer": "3"
      },
      {
        "question": "Which input field is wrapped inside a container for email formatting?",
        "answer": "Email"
      },
      {
        "question": "What is the input type for entering the user's name?",
        "answer": "Text"
      },
      {
        "question": "Is there a button for form submission and what is its label?",
        "answer": "Yes, 'Submit'"
      },
      {
        "question": "How many guidelines are listed under the form in the unordered list?",
        "answer": "2"
      },
      {
        "question": "What text is shown in the footer regarding data privacy?",
        "answer": "All data is confidential"
      },
      {
        "question": "What is the background color style set for the footer?",
        "answer": "Lightgray"
      }
    ],
    "raw_output_metric": [
      "User Registration",
      "form-wrapper",
      "email-container",
      "name",
      "email",
      "password",
      "Submit",
      "<section>",
      "<ul>",
      "<li>",
      "<footer>",
      "lightgray",
      "All data is confidential"
    ],
    "rendering": true
  },
  {
    "task_id": "000142",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a collection of blog post summaries.\n\nFeature Requirements:\n- Create a top-level container using a <div> element with a class name of 'blog-wrapper'.\n- Add a centered title using an <h1> element with the text 'Blog Highlights'.\n- Include exactly 3 sections, each wrapped in a <section> element representing an individual blog post summary.\n- Inside each section, add a <header> element that contains the post date and author name separated by a vertical bar (|).\n- In every section, include an unordered list (<ul>) with exactly 4 list items (<li>), where each item displays a key and a value separated by a dash (-); for one specific key in each list, the value text must be styled with the CSS class 'info-blue'.\n- Immediately following each section, insert an <hr> element to separate the blog posts visually.\n- At the bottom of the component, add a button labeled 'Load More Posts' that is wrapped in a <div> element with a class name of 'action-container'.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the title of the blog component?",
        "answer": "Blog Highlights"
      },
      {
        "question": "How many blog post summaries are displayed?",
        "answer": "3"
      },
      {
        "question": "How are individual blog post summaries visually separated?",
        "answer": "An hr element is used after each section"
      },
      {
        "question": "What element displays the post date and author name?",
        "answer": "A header element showing the date and author separated by a vertical bar"
      },
      {
        "question": "How many list items are present in each blog post summary?",
        "answer": "4"
      },
      {
        "question": "How is the key-value pair displayed in each list item?",
        "answer": "They are separated by a dash"
      }
    ],
    "raw_output_metric": [
      "blog-wrapper",
      "Blog Highlights",
      "section",
      "header",
      "|",
      "ul",
      "li",
      "info-blue",
      "hr",
      "action-container",
      "Load More Posts"
    ],
    "rendering": true
  },
  {
    "task_id": "000146",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the provided text input into an Angular component that displays a detailed event schedule.\n\nFeature Requirements:\n- Create a centered title using an <h1> element with the text \"Event Schedule\", ensuring it is prominent at the top of the component.\n- Wrap all content in a <div> with the class name \"event-wrapper\" to serve as the main container.\n- Structure the output into exactly 3 sections, each enclosed in a <section> element and containing unique event-related content.\n- In the first section, include a table (<table>) with exactly 2 rows; the first row should list \"Start Time: [value]\" and the second row \"End Time: [value]\", with each row split into two <td> elements.\n- In the second section, add an unordered list (<ul>) with exactly 4 list items (<li>), each formatted as \"Activity: Time\". One of these list items must have its time value wrapped with a CSS class called \"highlight\" to indicate emphasis.\n- In the third section, display a blockquote (<blockquote>) containing an inspirational quote about events, using an inline style to set the font style to italic.\n- At the bottom of the component, include a button (<button>) labeled \"Confirm Attendance\", positioned within a <div> with a class \"action-button\" for clear alignment.",
    "feature_requirements": "",
    "task_name": "Text to Angular",
    "input_type": "Text",
    "output_type": "Angular",
    "query_example": "Please output Angular:\n\nTask:\nConvert the provided text input into an Angular component that displays structured, user-friendly data.\n\nFeature Requirements:\n- Include a centered title using an <h2> element with the text \u2018Data Overview\u2019.\n- Use a <div> element to create a container with a class name of 'data-container' for layout purposes.\n- Display exactly 2 sections, each wrapped in a <section> element and containing unique content.\n- The first section should contain an unordered list (<ul>) with exactly 3 list items (<li>), each showing a distinct piece of information from the input.\n- The second section should display a paragraph (<p>) with styled text, using an inline style to set the font to italic.\n- Each list item (<li>) in the first section must include a label and a value separated by a colon (:).\n- Ensure one of the list items has its value text colored red by using a CSS class called 'highlight-red'.\n- Add a button element labeled \u2018Refresh Data\u2019, positioned at the bottom of the component using a <div> with class 'button-container' for alignment.",
    "VQA": [
      {
        "question": "What is the text of the centered title at the top of the component?",
        "answer": "Event Schedule"
      },
      {
        "question": "How many sections are present in the component layout?",
        "answer": "3"
      },
      {
        "question": "How many rows are displayed in the table of the first section?",
        "answer": "2"
      },
      {
        "question": "How many list items are in the unordered list of the second section?",
        "answer": "4"
      },
      {
        "question": "What style is applied to the text within the blockquote in the third section?",
        "answer": "Italic"
      },
      {
        "question": "What label is on the button at the bottom of the component?",
        "answer": "Confirm Attendance"
      },
      {
        "question": "Which class name is used for the main container wrapping the entire content?",
        "answer": "event-wrapper"
      },
      {
        "question": "Which class is used to position the action button at the bottom?",
        "answer": "action-button"
      }
    ],
    "raw_output_metric": [
      "Event Schedule",
      "event-wrapper",
      "<section>",
      "<table>",
      "<td>",
      "<ul>",
      "<li>",
      "highlight",
      "<blockquote>",
      "italic",
      "Confirm Attendance",
      "action-button"
    ],
    "rendering": true
  },
  {
    "task_id": "040100",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Visual Conversion Task - Structured Layout Example</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome to Our Sample HTML Page</h1>\n    <p>This page is a demonstration of a structured layout with headings, sections, lists, and formatted content.</p>\n  </header>\n  <hr>\n  <nav>\n    <ul>\n      <li><strong>Home</strong></li>\n      <li>About</li>\n      <li>Services</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n  <section>\n    <article>\n      <h2>Introduction</h2>\n      <p>\n        This section introduces the content of the page. It includes several paragraphs of text and a list of benefits.\n      </p>\n      <ul>\n        <li>Clear structure and hierarchy</li>\n        <li>Readable formatted content</li>\n        <li>Accessible design without external linking</li>\n      </ul>\n      <p>\n        The purpose of this demonstration is to simulate a realistic, detailed code snippet that tests visual conversion tasks.\n      </p>\n    </article>\n\n    <article>\n      <h2>Main Content</h2>\n      <p>\n        In this section, you will find a detailed breakdown of the layout:\n      </p>\n      <ol>\n        <li>\n          <strong>Header Area</strong> - The top part of the page with title and introduction.\n        </li>\n        <li>\n          <strong>Navigation Menu</strong> - A list of items for quick access.\n        </li>\n        <li>\n          <strong>Content Sections</strong> - Organized content segments with clear headings.\n        </li>\n        <li>\n          <strong>Footer Area</strong> - Contains additional resource links and information.\n        </li>\n      </ol>\n      <p>\n        You will notice that every section is designed to be both human-readable and machine-parseable.\n      </p>\n    </article>\n\n    <article>\n      <h2>Detailed Information</h2>\n      <section>\n        <h3>Section A: Data Overview</h3>\n        <p>\n          Below are some key details presented in a structured format:\n        </p>\n        <dl>\n          <dt>Project Name:</dt>\n          <dd>Visual Conversion Task</dd>\n          <dt>Version:</dt>\n          <dd>1.0.0</dd>\n          <dt>Author:</dt>\n          <dd>Sample Developer</dd>\n          <dt>Status:</dt>\n          <dd>Active</dd>\n        </dl>\n      </section>\n      <section>\n        <h3>Section B: Process Steps</h3>\n        <ol>\n          <li>Design the layout</li>\n          <li>Implement the HTML structure</li>\n          <li>Ensure accessibility and readability</li>\n          <li>Test visual conversion accuracy</li>\n        </ol>\n      </section>\n    </article>\n  </section>\n  <aside>\n    <h2>Sidebar Info</h2>\n    <p>This sidebar offers additional details that are relevant but not part of the main content flow.</p>\n    <ul>\n      <li><strong>Tip:</strong> Use semantic HTML for accessibility.</li>\n      <li><strong>Note:</strong> Avoid interactive elements on static pages.</li>\n      <li><strong>Reminder:</strong> Validate HTML for best results.</li>\n    </ul>\n  </aside>\n  <footer>\n    <hr>\n    <p><strong>Contact Us:</strong> For any queries, please get in touch via email.</p>\n    <p>&copy; 2023 Sample Developer. All rights reserved.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 A header section displaying a main title (\"Welcome to Our Sample HTML Page\") and a descriptive paragraph beneath it.  \n\u2022 A horizontal rule separating the header from subsequent content.  \n\u2022 A navigation area containing an unordered list with four items, where the first item (\"Home\") appears with emphasized (bold) text.  \n\u2022 A main section with multiple articles, each featuring a secondary heading and accompanying paragraphs; one article includes an unordered list outlining benefits, another uses an ordered list to detail main layout elements, and a third contains nested sections.  \n\u2022 In the third article, one nested section labeled \"Section A: Data Overview\" presents a definition list with key-value pairs (e.g., Project Name, Version, Author, Status).  \n\u2022 A subsequent nested section labeled \"Section B: Process Steps\" includes an ordered list of process instructions.  \n\u2022 An aside section serving as a sidebar with its own secondary heading (\"Sidebar Info\"), supporting text, and an unordered list where items display emphasized labels (e.g., \"Tip:\", \"Note:\", \"Reminder:\") followed by descriptive text.  \n\u2022 A footer section containing a horizontal rule, a paragraph with a contact prompt including an emphasized label (\"Contact Us:\"), and a copyright notice.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title shown in the header?",
        "answer": "Welcome to Our Sample HTML Page"
      },
      {
        "question": "What decorative element separates the header from the content below?",
        "answer": "Horizontal rule"
      },
      {
        "question": "How many items are listed in the navigation section?",
        "answer": "4"
      },
      {
        "question": "Which navigation item is visually emphasized with bold text?",
        "answer": "Home"
      },
      {
        "question": "What is the secondary heading in the aside (sidebar) section?",
        "answer": "Sidebar Info"
      },
      {
        "question": "What is the label of the nested section that includes a definition list?",
        "answer": "Section A: Data Overview"
      },
      {
        "question": "Which emphasized label appears in the footer's contact prompt?",
        "answer": "Contact Us:"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Sample HTML Page",
      "<hr>",
      "Home",
      "Section A: Data Overview",
      "Project Name",
      "Version",
      "Author",
      "Status",
      "Section B: Process Steps",
      "Sidebar Info",
      "Tip:",
      "Note:",
      "Reminder:",
      "Contact Us:"
    ],
    "rendering": true
  },
  {
    "task_id": "040101",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Structured HTML Layout Example</title>\n  </head>\n  <body>\n    <!-- Main Header Section -->\n    <header>\n      <h1>Welcome to Our Structured Webpage</h1>\n      <p>This page demonstrates a clear visual hierarchy and structure using standard HTML elements.</p>\n    </header>\n    \n    <!-- Navigation Section -->\n    <nav>\n      <h2>Navigation</h2>\n      <ul>\n        <li><a href=\"#introduction\">Introduction</a></li>\n        <li><a href=\"#features\">Features</a></li>\n        <li><a href=\"#data\">Data Overview</a></li>\n        <li><a href=\"#contact\">Contact Information</a></li>\n      </ul>\n    </nav>\n    \n    <!-- Main Content Section -->\n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>The purpose of this page is to provide a long and realistic example of an HTML document. It uses headings, lists, sections, and labeled values, all contained in one single page with a simple layout. This helps illustrate the structure and visual organization of the content.</p>\n    </section>\n    \n    <!-- Features Section -->\n    <section id=\"features\">\n      <h2>Features</h2>\n      <ol>\n        <li>\n          <strong>Clear Structure:</strong>\n          <p>Separation of content into Header, Navigation, Main Content, and Footer.</p>\n        </li>\n        <li>\n          <strong>Visual Hierarchy:</strong>\n          <p>Use of different heading levels and clearly labeled sections.</p>\n        </li>\n        <li>\n          <strong>Readable Format:</strong>\n          <p>Paragraphs and lists structure information for easy reading and interpretation.</p>\n        </li>\n      </ol>\n      <p>Each feature is built using basic HTML tags to ensure compatibility with any standard web browser.</p>\n    </section>\n    \n    <!-- Data Overview Section -->\n    <section id=\"data\">\n      <h2>Data Overview</h2>\n      <article>\n        <h3>Statistical Data</h3>\n        <ul>\n          <li><strong>Users:</strong> 1,234</li>\n          <li><strong>Visits:</strong> 5,678</li>\n          <li><strong>Downloads:</strong> 910</li>\n        </ul>\n      </article>\n      <article>\n        <h3>Performance Metrics</h3>\n        <p>The following table lists key metrics:</p>\n        <table border=\"1\" cellpadding=\"5\">\n          <thead>\n            <tr>\n              <th>Metric</th>\n              <th>Value</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Load Time</td>\n              <td>1.2s</td>\n              <td>The time taken to load the page.</td>\n            </tr>\n            <tr>\n              <td>Response Rate</td>\n              <td>98%</td>\n              <td>Percentage of successful responses.</td>\n            </tr>\n            <tr>\n              <td>Downtime</td>\n              <td>0.5%</td>\n              <td>Percentage of time the server is unavailable.</td>\n            </tr>\n          </tbody>\n        </table>\n      </article>\n    </section>\n    \n    <!-- Contact Section -->\n    <section id=\"contact\">\n      <h2>Contact Information</h2>\n      <p>If you have any questions, please feel free to reach out using the information below:</p>\n      <dl>\n        <dt><strong>Email</strong></dt>\n        <dd>contact@example.com</dd>\n        <dt><strong>Phone</strong></dt>\n        <dd>+1 (555) 123-4567</dd>\n        <dt><strong>Address</strong></dt>\n        <dd>123 Main Street, Suite 456, Anytown, USA</dd>\n      </dl>\n    </section>\n    \n    <!-- Footer Section -->\n    <footer>\n      <hr />\n      <p>&copy; 2023 Structured Webpage Example. All rights reserved.</p>\n      <p>Designed with a focus on visual structure and clear hierarchy.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section displaying an h1 element with the text \"Welcome to Our Structured Webpage\" and a paragraph explaining the page's purpose.  \n\u2022 The output must include a navigation section displaying an h2 element with the text \"Navigation\" and an unordered list containing exactly four list items with visible link labels: \"Introduction\", \"Features\", \"Data Overview\", and \"Contact Information\".  \n\u2022 The output must include an Introduction section (identified by \"introduction\") displaying an h2 element with the text \"Introduction\" and a paragraph that explains the overall purpose and structure of the page.  \n\u2022 The output must include a Features section (identified by \"features\") displaying an h2 element with the text \"Features\", followed by an ordered list of three feature items, each containing a bolded introductory label and an accompanying descriptive paragraph.  \n\u2022 The output must include a Data Overview section (identified by \"data\") displaying an h2 element with the text \"Data Overview\", where one article presents statistical data in an unordered list with bold labels and numerical values, and another article displays performance metrics using a table with a header row and exactly three data rows showing metrics, values, and descriptions.  \n\u2022 The output must include a Contact Information section (identified by \"contact\") displaying an h2 element with the text \"Contact Information\", a paragraph inviting contact, and a definition list that clearly pairs contact keys (Email, Phone, Address) in bold with their corresponding values.  \n\u2022 The output must include a footer section that contains a horizontal rule followed by two paragraphs: one with a copyright note including the year 2023 and a statement of rights, and another paragraph indicating the page was designed with a focus on visual structure and clear hierarchy.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text in the main header (h1) at the top of the page?",
        "answer": "Welcome to Our Structured Webpage"
      },
      {
        "question": "How many list items are visible in the navigation section?",
        "answer": "4"
      },
      {
        "question": "What are the visible link labels in the navigation section?",
        "answer": "Introduction, Features, Data Overview, Contact Information"
      },
      {
        "question": "What is the title of the Introduction section in its h2 element?",
        "answer": "Introduction"
      },
      {
        "question": "How many feature items are listed in the ordered list in the Features section?",
        "answer": "3"
      },
      {
        "question": "Are the introductory labels for each feature item bolded?",
        "answer": "Yes"
      },
      {
        "question": "How many articles are included in the Data Overview section?",
        "answer": "2"
      },
      {
        "question": "What type of list is used in one of the Data Overview articles to present statistical data?",
        "answer": "Unordered list"
      },
      {
        "question": "How many data rows (excluding the header) are shown in the performance metrics table?",
        "answer": "3"
      },
      {
        "question": "What are the contact keys listed in the Contact Information section?",
        "answer": "Email, Phone, Address"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Structured Webpage",
      "Navigation",
      "Introduction",
      "Features",
      "Data Overview",
      "Contact Information",
      "Introduction",
      "Features",
      "Data Overview",
      "Contact Information",
      "Introduction",
      "Features",
      "Data Overview",
      "Email",
      "Phone",
      "Address",
      "2023",
      "rights",
      "designed with a focus on visual structure and clear hierarchy",
      "metrics",
      "values",
      "descriptions"
    ],
    "rendering": true
  },
  {
    "task_id": "040107",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Realistic HTML Layout Example</title>\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to Our Informative Page</h1>\n      <p>This page provides an overview of our services and information.</p>\n    </header>\n\n    <nav>\n      <ul>\n        <li>Home</li>\n        <li>About Us</li>\n        <li>Services</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n\n    <main>\n      <section>\n        <h2>About Our Company</h2>\n        <p>Our company has a long history of excellence, providing top-notch solutions in the industry. We pride ourselves on integrity, innovation, and commitment.</p>\n        <ul>\n          <li>Founded in 1995</li>\n          <li>Global presence in over 30 countries</li>\n          <li>A diverse team of experts</li>\n          <li>Customer-centered approach</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Our Services</h2>\n        <article>\n          <h3>Consulting</h3>\n          <p>Our consulting services help your business grow. We provide strategic guidance, market analysis, and tailor-made solutions.</p>\n          <ol>\n            <li>Strategy Development</li>\n            <li>Market Research</li>\n            <li>Financial Assessment</li>\n            <li>Project Management</li>\n          </ol>\n        </article>\n        <article>\n          <h3>Technology Solutions</h3>\n          <p>We integrate technology into your business process to improve efficiency and productivity. Our technical experts are ready to assist.</p>\n          <ul>\n            <li>Custom Software</li>\n            <li>IT Support</li>\n            <li>Cloud Services</li>\n            <li>Cybersecurity</li>\n          </ul>\n        </article>\n      </section>\n\n      <section>\n        <h2>Team Profiles</h2>\n        <div>\n          <h4>Jane Doe</h4>\n          <p>Role: Chief Executive Officer</p>\n          <p>Experience: Over 20 years in the industry</p>\n        </div>\n        <div>\n          <h4>John Smith</h4>\n          <p>Role: Head of Technology</p>\n          <p>Expertise: Software development, IT infrastructure</p>\n        </div>\n        <div>\n          <h4>Mary Johnson</h4>\n          <p>Role: Lead Consultant</p>\n          <p>Specialty: Business strategy and market analysis</p>\n        </div>\n      </section>\n\n      <section>\n        <h2>Contact Information</h2>\n        <div>\n          <h3>General Inquiries</h3>\n          <p><strong>Email:</strong> info@ourcompany.com</p>\n          <p><strong>Phone:</strong> (123) 456-7890</p>\n        </div>\n        <div>\n          <h3>Support</h3>\n          <p><strong>Email:</strong> support@ourcompany.com</p>\n          <p><strong>Phone:</strong> (098) 765-4321</p>\n        </div>\n      </section>\n    </main>\n\n    <aside>\n      <h2>Latest News</h2>\n      <ul>\n        <li>\n          <h4>New Office Opening</h4>\n          <p>We expanded our reach with a new office in downtown.</p>\n        </li>\n        <li>\n          <h4>Award Winning Service</h4>\n          <p>Our commitment to excellence was recognized at the Industry Awards.</p>\n        </li>\n        <li>\n          <h4>Upcoming Webinar</h4>\n          <p>Join us for a webinar on the latest industry trends.</p>\n        </li>\n      </ul>\n    </aside>\n\n    <footer>\n      <hr>\n      <p>\u00a9 2023 Our Company. All rights reserved.</p>\n      <p>123 Business Rd, Suite 100, Cityname, Country</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must include a component template that renders a header element featuring an h1 with the text \"Welcome to Our Informative Page\" and a paragraph describing the page overview.  \n\u2022 The template must contain a navigation section with an unordered list holding exactly four items: \"Home\", \"About Us\", \"Services\", and \"Contact\".  \n\u2022 Within the main element, the output must include a section titled with an h2 \"About Our Company\" that contains a descriptive paragraph and an unordered list with four specific items (\"Founded in 1995\", \"Global presence in over 30 countries\", \"A diverse team of experts\", \"Customer-centered approach\").  \n\u2022 The main element must also include a section with an h2 \"Our Services\" that holds two distinct articles: one with an h3 \"Consulting\" followed by a descriptive paragraph and an ordered list of four items (\"Strategy Development\", \"Market Research\", \"Financial Assessment\", \"Project Management\"), and one with an h3 \"Technology Solutions\" followed by a paragraph and an unordered list of four items (\"Custom Software\", \"IT Support\", \"Cloud Services\", \"Cybersecurity\").  \n\u2022 The Angular template must render a section with an h2 \"Team Profiles\" that contains three div elements, each displaying a team member\u2019s name in an h4 (namely \"Jane Doe\", \"John Smith\", \"Mary Johnson\") and associated paragraphs detailing their roles and experience or expertise.  \n\u2022 There must be a section with an h2 \"Contact Information\" including two div blocks: one for \"General Inquiries\" and another for \"Support\", each containing an h3 header and paragraphs with bolded labels for \"Email:\" and \"Phone:\" along with their respective contact details.  \n\u2022 An aside element in the template must render a section with an h2 \"Latest News\" that includes an unordered list of three items, each comprising an h4 headline (such as \"New Office Opening\", \"Award Winning Service\", \"Upcoming Webinar\") and a descriptive paragraph.  \n\u2022 A footer element must appear containing a horizontal rule, followed by paragraphs that display the copyright notice \"\u00a9 2023 Our Company. All rights reserved.\" and the company address \"123 Business Rd, Suite 100, Cityname, Country\".",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text inside the main header of the page?",
        "answer": "Welcome to Our Informative Page"
      },
      {
        "question": "How many items are listed in the navigation section?",
        "answer": "4"
      },
      {
        "question": "What are the four navigation items displayed?",
        "answer": "Home, About Us, Services, Contact"
      },
      {
        "question": "What is the section title for the company overview?",
        "answer": "About Our Company"
      },
      {
        "question": "How many items are included in the company overview list and what do they describe?",
        "answer": "4 items: Founded in 1995, Global presence in over 30 countries, A diverse team of experts, Customer-centered approach"
      },
      {
        "question": "What is the heading for the first article under 'Our Services'?",
        "answer": "Consulting"
      },
      {
        "question": "How many team profiles are shown and what are the team members' names?",
        "answer": "3 profiles: Jane Doe, John Smith, Mary Johnson"
      },
      {
        "question": "In the contact information section, what bold labels are used in each block?",
        "answer": "Email and Phone"
      },
      {
        "question": "What is the title of the aside section and how many news items does it list?",
        "answer": "Latest News with 3 items"
      },
      {
        "question": "What elements are rendered in the footer?",
        "answer": "A horizontal rule, copyright notice, and the company address"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Informative Page",
      "Home",
      "About Us",
      "Services",
      "Contact",
      "About Our Company",
      "Founded in 1995",
      "Global presence in over 30 countries",
      "A diverse team of experts",
      "Customer-centered approach",
      "Our Services",
      "Consulting",
      "Strategy Development",
      "Market Research",
      "Financial Assessment",
      "Project Management",
      "Technology Solutions",
      "Custom Software",
      "IT Support",
      "Cloud Services",
      "Cybersecurity",
      "Team Profiles",
      "Jane Doe",
      "John Smith",
      "Mary Johnson",
      "Contact Information",
      "General Inquiries",
      "Support",
      "Email:",
      "Phone:",
      "Latest News",
      "New Office Opening",
      "Award Winning Service",
      "Upcoming Webinar",
      "\u00a9 2023 Our Company. All rights reserved.",
      "123 Business Rd, Suite 100, Cityname, Country"
    ],
    "rendering": true
  },
  {
    "task_id": "040108",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Sample Page for Conversion Test</title>\n  <style>\n    /* Minimal inline styling for layout */\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n    }\n    header, footer {\n      background: #f4f4f4;\n      padding: 10px;\n    }\n    header h1, footer p {\n      margin: 0;\n      text-align: center;\n    }\n    nav {\n      margin-top: 10px;\n      text-align: center;\n    }\n    .nav-list {\n      list-style: none;\n      padding: 0;\n      margin: 0;\n      display: inline-block;\n    }\n    .nav-list li {\n      display: inline;\n      margin: 0 10px;\n    }\n    section {\n      margin-bottom: 25px;\n      padding: 10px;\n      border-bottom: 1px solid #ddd;\n    }\n    h2 {\n      color: #333;\n      border-bottom: 2px solid #ccc;\n      padding-bottom: 5px;\n    }\n    .article {\n      border: 1px solid #ddd;\n      padding: 10px;\n      margin: 15px 0;\n    }\n    .article h3 {\n      margin-top: 0;\n    }\n    ul, ol, dl {\n      margin-left: 20px;\n    }\n    .info-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 10px;\n    }\n    .info-table th, .info-table td {\n      border: 1px solid #ccc;\n      padding: 8px;\n      text-align: left;\n    }\n    address {\n      font-style: normal;\n      padding: 10px;\n      border: 1px solid #ccc;\n      background: #fafafa;\n      width: 300px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome to the Sample Page</h1>\n    <nav>\n      <ul class=\"nav-list\">\n        <li><a href=\"#\">Home</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Services</a></li>\n        <li><a href=\"#\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n\n  <main>\n    <!-- Section 1: Overview -->\n    <section>\n      <h2>Section 1: Overview</h2>\n      <p>\n        This section provides an overview of the page layout and the types of content that are formatted on this page.\n        It is designed to help test visual conversion tasks including structural layout, visual hierarchy, and formatted content.\n      </p>\n      <ul>\n        <li><strong>Clarity:</strong> Headings and sub-headings define content areas.</li>\n        <li><strong>Readability:</strong> Proper spacing and alignment provide a clean look.</li>\n        <li><strong>Information:</strong> Detailed lists and paragraphs offer comprehensive content.</li>\n      </ul>\n    </section>\n\n    <!-- Section 2: Articles and Lists -->\n    <section>\n      <h2>Section 2: Detailed Content</h2>\n\n      <article class=\"article\">\n        <h3>Article 1: Introduction to the Format</h3>\n        <p>\n          In this article, we explain the importance of clear structure. The content here is organized into various elements\n          such as paragraphs, ordered lists, and descriptive items.\n        </p>\n        <ol>\n          <li>Overview of the topic</li>\n          <li>Breakdown of main points</li>\n          <li>Concluding remarks with actionable insights</li>\n        </ol>\n      </article>\n\n      <article class=\"article\">\n        <h3>Article 2: Key Terms and Definitions</h3>\n        <p>\n          This article highlights some crucial terms and their definitions used throughout the content. The structured description\n          helps in better understanding.\n        </p>\n        <dl>\n          <dt>Term 1:</dt>\n          <dd>This term refers to the main topic of discussion and sets the context.</dd>\n          <dt>Term 2:</dt>\n          <dd>A supplementary term that adds further clarification to the main concept.</dd>\n          <dt>Term 3:</dt>\n          <dd>The final term that concludes the definition list with important details.</dd>\n        </dl>\n      </article>\n    </section>\n\n    <!-- Section 3: Table and Additional Information -->\n    <section>\n      <h2>Section 3: Tabular Data</h2>\n      <p>\n        This section demonstrates the use of tabular data to present structured information in a more organized format.\n        The table below showcases various data points and their corresponding values.\n      </p>\n      \n      <table class=\"info-table\">\n        <thead>\n          <tr>\n            <th>Category</th>\n            <th>Value</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Item 1</td>\n            <td>Value 1</td>\n            <td>Description of the first item and its significance.</td>\n          </tr>\n          <tr>\n            <td>Item 2</td>\n            <td>Value 2</td>\n            <td>Description of the second item with additional context.</td>\n          </tr>\n          <tr>\n            <td>Item 3</td>\n            <td>Value 3</td>\n            <td>Description of the third item explaining its purpose and use.</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n\n    <!-- Section 4: Contact Information -->\n    <section>\n      <h2>Section 4: Contact Details</h2>\n      <p>\n        Below you'll find the contact information for reaching out with any questions or feedback regarding this sample page.\n      </p>\n      \n      <address>\n        Sample Company Name<br>\n        123 Sample Street<br>\n        Sample City, SP 12345<br>\n        <br>\n        Phone: (123) 456-7890<br>\n        Email: <a href=\"mailto:info@example.com\">info@example.com</a>\n      </address>\n    </section>\n  </main>\n\n  <footer>\n    <p>&copy; 2025 Sample Page. All rights reserved.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section containing an H1 element displaying \"Welcome to the Sample Page\".  \n\u2022 The header must also contain a navigation element with an unordered list of four items labeled \"Home\", \"About\", \"Services\", and \"Contact\".  \n\u2022 The main content area must be divided into at least two sections, each with its own H2 heading: one for \"Section 1: Overview\" and another for \"Section 2: Detailed Content\".  \n\u2022 The first section must include a paragraph explaining the overview and an unordered list with items that visibly include bold text for \"Clarity:\", \"Readability:\", and \"Information:\".  \n\u2022 The second section must contain two distinct article elements.  \n\u2022 The first article must display an H3 heading \"Article 1: Introduction to the Format\", include a descriptive paragraph, and feature an ordered list with three items: \"Overview of the topic\", \"Breakdown of main points\", and \"Concluding remarks with actionable insights\".  \n\u2022 The second article must display an H3 heading \"Article 2: Key Terms and Definitions\", include a descriptive paragraph, and contain a description list with at least two pairs: one for \"Term 1:\" with its description and one for \"Term 2:\" with its description.  \n\u2022 The visual hierarchy and grouping of headings, paragraphs, and various lists must be maintained to reflect the structured layout of the original HTML code.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text displayed in the main header of the page?",
        "answer": "Welcome to the Sample Page"
      },
      {
        "question": "How many items are present in the navigation menu and what are they?",
        "answer": "4 items: Home, About, Services, Contact"
      },
      {
        "question": "How many sections are in the main content area and what are their heading texts?",
        "answer": "Two sections: Section 1: Overview and Section 2: Detailed Content"
      },
      {
        "question": "What elements make up Section 1 and what specific bold texts are included in the unordered list?",
        "answer": "A paragraph and an unordered list with bold texts for Clarity:, Readability:, and Information:"
      },
      {
        "question": "How many article elements are included in Section 2 and what are their H3 headings?",
        "answer": "Two articles: Article 1: Introduction to the Format and Article 2: Key Terms and Definitions"
      },
      {
        "question": "What type of list is used in Article 1 and what are its list items?",
        "answer": "An ordered list with items: Overview of the topic, Breakdown of main points, and Concluding remarks with actionable insights"
      },
      {
        "question": "What type of list is presented in Article 2 and what does it contain?",
        "answer": "A description list with at least two pairs, including one for Term 1: and one for Term 2:"
      }
    ],
    "raw_output_metric": [
      "Welcome to the Sample Page",
      "Home",
      "About",
      "Services",
      "Contact",
      "Section 1: Overview",
      "Section 2: Detailed Content",
      "Clarity:",
      "Readability:",
      "Information:",
      "Article 1: Introduction to the Format",
      "Overview of the topic",
      "Breakdown of main points",
      "Concluding remarks with actionable insights",
      "Article 2: Key Terms and Definitions",
      "Term 1:",
      "Term 2:",
      "Term 3",
      "Section 3: Tabular Data",
      "Category",
      "Value",
      "Description",
      "Section 4: Contact Details",
      "Sample Company Name",
      "123 Sample Street",
      "Sample City, SP 12345",
      "2025 Sample Page. All rights reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040109",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sample Structured HTML Page</title>\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to the Structured Layout Demo</h1>\n      <p>This page demonstrates various hierarchical HTML elements and static content.</p>\n    </header>\n    \n    <nav>\n      <ul>\n        <li><strong>Home</strong></li>\n        <li>About</li>\n        <li>Services</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n    \n    <section>\n      <h2>Introduction</h2>\n      <p>This section provides an overview of the page structure and outlines the content areas. The intent is to show a variety of HTML elements displayed in a clean, one-page layout.</p>\n    </section>\n\n    <section>\n      <h2>Content Areas</h2>\n      \n      <article>\n        <h3>Article 1: HTML Overview</h3>\n        <p>HTML stands for HyperText Markup Language. It is the backbone of any web page, providing the general structure and content. The following list enumerates some key elements:</p>\n        <ol>\n          <li><strong>Headings:</strong> Used to create a hierarchy in the content.</li>\n          <li><strong>Paragraphs:</strong> Used for detailed descriptions and text blocks.</li>\n          <li><strong>Lists:</strong> Both ordered and unordered lists help to structure items.</li>\n          <li><strong>Sections and Articles:</strong> Used to group related content together.</li>\n        </ol>\n      </article>\n      \n      <article>\n        <h3>Article 2: Detailed Layout</h3>\n        <p>Below is an example of a definition list that pairs terms with definitions, making it easy to present descriptive data:</p>\n        <dl>\n          <dt>Term 1</dt>\n          <dd>Description for term 1 with key details and observations.</dd>\n          <dt>Term 2</dt>\n          <dd>Description for term 2, outlining the specifics of the term in detail.</dd>\n          <dt>Term 3</dt>\n          <dd>A third term with its corresponding interesting facts.</dd>\n        </dl>\n      </article>\n      \n      <aside>\n        <h4>Sidebar Information</h4>\n        <p>This sidebar contains supplementary information to assist the reader. It is a static and non-interactive segment of the page.</p>\n        <ul>\n          <li>Additional Fact One</li>\n          <li>Additional Fact Two</li>\n          <li>Additional Fact Three</li>\n        </ul>\n      </aside>\n    </section>\n    \n    <section>\n      <h2>Formated Data Display</h2>\n      <p>The following preformatted text block showcases some data in a monospaced format, useful for presenting code or tabular information:</p>\n      <pre>\nName       Age   Occupation\n-------------------------------------\nAlice      30    Engineer\nBob        25    Designer\nCharlie    35    Manager\n      </pre>\n    </section>\n\n    <section>\n      <h2>Lists and Hierarchies</h2>\n      <p>Below is a nested list that shows hierarchical groupings:</p>\n      <ul>\n        <li>Main Category A\n          <ul>\n            <li>Subcategory A1</li>\n            <li>Subcategory A2</li>\n          </ul>\n        </li>\n        <li>Main Category B\n          <ul>\n            <li>Subcategory B1</li>\n            <li>Subcategory B2\n              <ul>\n                <li>Detailed Item B2.1</li>\n                <li>Detailed Item B2.2</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li>Main Category C</li>\n      </ul>\n    </section>\n\n    <footer>\n      <h2>Contact Information</h2>\n      <p>You can reach us through the following details:</p>\n      <address>\n        123 Example Street<br>\n        Hometown, HT 45678<br>\n        Email: sample@example.com<br>\n        Phone: (555) 123-4567\n      </address>\n      <p>&copy; 2023 Structured Layout Demo. All rights reserved.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must include a header component that displays a first-level heading with the text \"Welcome to the Structured Layout Demo\" and an accompanying paragraph describing the page.  \n\u2022 The output must contain a navigation component featuring an unordered list with four items: \"Home\" (displayed in bold), \"About,\" \"Services,\" and \"Contact.\"  \n\u2022 There must be a section component with a second-level heading \"Introduction\" followed by a paragraph giving an overview of the page structure and content areas.  \n\u2022 A content areas section must include two article components: one article with a third-level heading \"Article 1: HTML Overview\" featuring an ordered list that enumerates key HTML elements with bold labels, and another article with a third-level heading \"Article 2: Detailed Layout\" that contains a definition list pairing terms with their descriptions.  \n\u2022 An aside component must be present that includes a fourth-level heading \"Sidebar Information,\" a paragraph of supplementary information, and an unordered list of additional facts.  \n\u2022 The output must render a section with a second-level heading \"Formated Data Display\" and a preformatted text block that shows a structured, monospaced table of sample data.  \n\u2022 There must be a section with a second-level heading \"Lists and Hierarchies\" featuring a nested unordered list that visually represents hierarchical groupings (main categories with subcategories and sub-lists).  \n\u2022 A footer component must be included that displays a second-level heading \"Contact Information,\" a paragraph with contact instructions, an address block with multi-line contact details (street, city/state/zip, email, and phone), and a paragraph indicating copyright information.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main heading text displayed in the header?",
        "answer": "Welcome to the Structured Layout Demo"
      },
      {
        "question": "How many items are listed in the navigation menu?",
        "answer": "4"
      },
      {
        "question": "Which navigation item is emphasized with bold styling?",
        "answer": "Home"
      },
      {
        "question": "What is the heading text for the introductory section?",
        "answer": "Introduction"
      },
      {
        "question": "What are the titles of the two articles in the content areas?",
        "answer": "Article 1: HTML Overview and Article 2: Detailed Layout"
      },
      {
        "question": "What style is used for the labels in the ordered list within Article 1?",
        "answer": "Bold"
      },
      {
        "question": "Which component features a fourth-level heading titled 'Sidebar Information'?",
        "answer": "Aside component"
      },
      {
        "question": "How is the sample data presented in the 'Formated Data Display' section?",
        "answer": "With a preformatted text block showing a structured, monospaced table"
      },
      {
        "question": "What type of list is used in the 'Lists and Hierarchies' section?",
        "answer": "A nested unordered list"
      },
      {
        "question": "What components are included within the footer?",
        "answer": "A second-level heading 'Contact Information', a paragraph with contact instructions, a multi-line address block, and a copyright paragraph"
      }
    ],
    "raw_output_metric": [
      "Welcome to the Structured Layout Demo",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Article 1: HTML Overview",
      "Article 2: Detailed Layout",
      "Sidebar Information",
      "Formated Data Display",
      "Lists and Hierarchies",
      "Contact Information",
      "street",
      "city/state/zip",
      "email",
      "phone"
    ],
    "rendering": true
  },
  {
    "task_id": "040111",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document Layout Sample</title>\n  </head>\n  <body>\n    <header>\n      <h1>Document Layout and Visual Structure</h1>\n      <p>This page is designed to demonstrate visual structure using HTML elements such as headings, sections, lists, and labeled values.</p>\n    </header>\n\n    <main>\n      <section>\n        <header>\n          <h2>Introduction</h2>\n        </header>\n        <p>\n          In this document, you will see the layout of various content blocks. The page is organized into distinct sections,\n          each containing structured information like lists and descriptive data fields.\n        </p>\n      </section>\n\n      <section>\n        <header>\n          <h2>Profile Details</h2>\n        </header>\n        <article>\n          <h3>Basic Information</h3>\n          <ul>\n            <li><strong>Name:</strong> Jane Doe</li>\n            <li><strong>Age:</strong> 32</li>\n            <li><strong>Occupation:</strong> Software Developer</li>\n          </ul>\n          <p>Jane Doe has over 10 years of experience in the tech industry, focusing on software development and innovative problem solving.</p>\n        </article>\n        \n        <article>\n          <h3>Contact Information</h3>\n          <dl>\n            <dt>Email:</dt>\n            <dd>jane.doe@example.com</dd>\n            <dt>Phone:</dt>\n            <dd>+1 234 567 890</dd>\n            <dt>Address:</dt>\n            <dd>1234 Main Street, Anytown, USA</dd>\n          </dl>\n        </article>\n      </section>\n\n      <section>\n        <header>\n          <h2>Skillset</h2>\n        </header>\n        <p>The list below reflects some of Jane's key areas of expertise:</p>\n        <ol>\n          <li>\n            Programming Languages\n            <ol>\n              <li>Python</li>\n              <li>JavaScript</li>\n              <li>Java</li>\n            </ol>\n          </li>\n          <li>\n            Web Development\n            <ol>\n              <li>HTML</li>\n              <li>CSS</li>\n              <li>Responsive Design</li>\n            </ol>\n          </li>\n          <li>\n            Database Management\n            <ol>\n              <li>SQL</li>\n              <li>NoSQL</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section>\n        <header>\n          <h2>Work Experience</h2>\n        </header>\n        <article>\n          <h3>Current Position</h3>\n          <p><strong>Senior Developer</strong> at Tech Innovations Inc.</p>\n          <p>Responsible for leading development teams and optimizing enterprise-level applications.</p>\n        </article>\n        \n        <article>\n          <h3>Previous Position</h3>\n          <p><strong>Developer</strong> at Code Solutions</p>\n          <p>Worked on designing scalable web applications and contributing to full-stack projects.</p>\n        </article>\n      </section>\n\n      <section>\n        <header>\n          <h2>Education</h2>\n        </header>\n        <article>\n          <h3>Undergraduate Degree</h3>\n          <p>Bachelor of Science in Computer Science</p>\n          <p>University of Innovation, 2008 - 2012</p>\n        </article>\n        <article>\n          <h3>Graduate Degree</h3>\n          <p>Master of Science in Software Engineering</p>\n          <p>Institute of Advanced Technology, 2013 - 2015</p>\n        </article>\n      </section>\n    </main>\n\n    <footer>\n      <p>&copy; 2023 Jane Doe. All rights reserved.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 A top-level header section that includes a level\u2011one heading displaying \u201cDocument Layout and Visual Structure\u201d and a paragraph describing the purpose of the page.  \n\u2022 A main content area divided into multiple distinct sections, each with its own header: \u201cIntroduction\u201d, \u201cProfile Details\u201d, \u201cSkillset\u201d, \u201cWork Experience\u201d, and \u201cEducation\u201d.  \n\u2022 Within the \u201cIntroduction\u201d section, a level\u2011two heading titled \u201cIntroduction\u201d accompanied by a paragraph explaining the organization of the content blocks.  \n\u2022 In the \u201cProfile Details\u201d section, two articles: one featuring a level\u2011three heading \u201cBasic Information\u201d with an unordered list listing items such as \u201cName: Jane Doe\u201d, \u201cAge: 32\u201d, and \u201cOccupation: Software Developer\u201d along with a descriptive paragraph; and another article featuring a level\u2011three heading \u201cContact Information\u201d that uses a definition list to display keys like \u201cEmail:\u201d, \u201cPhone:\u201d, and \u201cAddress:\u201d with their corresponding values.  \n\u2022 The \u201cSkillset\u201d section must include a level\u2011two heading and an explanatory paragraph, followed by an ordered list that contains nested ordered lists for each skill category (e.g., Programming Languages with items like Python, JavaScript, Java; Web Development with HTML, CSS, Responsive Design; Database Management with SQL, NoSQL).  \n\u2022 In the \u201cWork Experience\u201d section, two articles exist: one with a level\u2011three heading \u201cCurrent Position\u201d and its associated details (job title and description), and another with a level\u2011three heading \u201cPrevious Position\u201d detailing the past role and responsibilities.  \n\u2022 The \u201cEducation\u201d section contains two articles where each article has a level\u2011three heading indicating the degree type (\u201cUndergraduate Degree\u201d and \u201cGraduate Degree\u201d) with subsequent paragraphs listing the degree, institution, and time period.  \n\u2022 A footer section at the bottom that includes a paragraph displaying the copyright notice \u201c\u00a9 2023 Jane Doe. All rights reserved.\u201d",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text of the level\u2011one heading at the top of the page?",
        "answer": "Document Layout and Visual Structure"
      },
      {
        "question": "What sections are included in the main content area?",
        "answer": "Introduction, Profile Details, Skillset, Work Experience, Education"
      },
      {
        "question": "What is the level\u2011two heading in the Introduction section?",
        "answer": "Introduction"
      },
      {
        "question": "How many articles are in the Profile Details section?",
        "answer": "2"
      },
      {
        "question": "What is the level\u2011three heading for the first article in Profile Details?",
        "answer": "Basic Information"
      },
      {
        "question": "How many list items are shown in the unordered list under Basic Information?",
        "answer": "3"
      },
      {
        "question": "What type of list is used in the Contact Information article?",
        "answer": "Definition list"
      },
      {
        "question": "What type of list is used in the Skillset section?",
        "answer": "Ordered list with nested ordered lists"
      },
      {
        "question": "How many articles are shown in the Work Experience section?",
        "answer": "2"
      },
      {
        "question": "What copyright notice is displayed in the footer section?",
        "answer": "\u00a9 2023 Jane Doe. All rights reserved."
      }
    ],
    "raw_output_metric": [
      "Document Layout and Visual Structure",
      "Introduction",
      "Profile Details",
      "Skillset",
      "Work Experience",
      "Education",
      "Basic Information",
      "Contact Information",
      "Name: Jane Doe",
      "Age: 32",
      "Occupation: Software Developer",
      "Email:",
      "Phone:",
      "Address:",
      "Programming Languages",
      "Python",
      "JavaScript",
      "Java",
      "Web Development",
      "HTML",
      "CSS",
      "Responsive Design",
      "Database Management",
      "SQL",
      "NoSQL",
      "Current Position",
      "Previous Position",
      "Undergraduate Degree",
      "Graduate Degree",
      "\u00a9 2023 Jane Doe. All rights reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040113",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Website Layout Example</title>\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to Our Website</h1>\n      <nav>\n        <ul>\n          <li>Home</li>\n          <li>About</li>\n          <li>Services</li>\n          <li>Team</li>\n          <li>Contact</li>\n        </ul>\n      </nav>\n    </header>\n\n    <main>\n      <section>\n        <h2>About Us</h2>\n        <p>\n          We are a dedicated team committed to excellence in everything we do. Our mission is to innovate and inspire through our work.\n        </p>\n        <ul>\n          <li>Integrity and Excellence</li>\n          <li>Innovative Solutions</li>\n          <li>Customer Focus</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Our Services</h2>\n        <article>\n          <h3>Consulting</h3>\n          <p>\n            Our experienced consultants provide insights and strategies that help you achieve your business goals.\n          </p>\n        </article>\n        <article>\n          <h3>Development</h3>\n          <p>\n            From web applications to mobile solutions, our development team delivers robust and scalable products.\n          </p>\n        </article>\n        <article>\n          <h3>Support</h3>\n          <p>\n            We offer comprehensive support services ensuring that your systems are always up and running.\n          </p>\n        </article>\n      </section>\n\n      <section>\n        <h2>Team Profiles</h2>\n        <ol>\n          <li>\n            <h3>Jane Doe</h3>\n            <p>Chief Executive Officer</p>\n          </li>\n          <li>\n            <h3>John Smith</h3>\n            <p>Lead Developer</p>\n          </li>\n          <li>\n            <h3>Emily Clark</h3>\n            <p>Marketing Director</p>\n          </li>\n          <li>\n            <h3>Michael Brown</h3>\n            <p>Business Analyst</p>\n          </li>\n        </ol>\n      </section>\n\n      <section>\n        <h2>Contact Information</h2>\n        <p>Get in touch with us for more details:</p>\n        <dl>\n          <dt>Phone:</dt>\n          <dd>(123) 456-7890</dd>\n          <dt>Email:</dt>\n          <dd>info@example.com</dd>\n          <dt>Address:</dt>\n          <dd>123 Main Street, Anytown, Country</dd>\n        </dl>\n      </section>\n      \n      <section>\n        <h2>Frequently Asked Questions</h2>\n        <article>\n          <h3>What services do you offer?</h3>\n          <p>We provide consulting, development, and support services tailored to your business needs.</p>\n        </article>\n        <article>\n          <h3>How can I get started?</h3>\n          <p>\n            Simply reach out via our contact page, and one of our representatives will guide you through our process.\n          </p>\n        </article>\n        <article>\n          <h3>Do you offer customized solutions?</h3>\n          <p>\n            Yes, we work closely with clients to develop bespoke solutions that fit their unique requirements.\n          </p>\n        </article>\n      </section>\n    </main>\n\n    <footer>\n      <p>&copy; 2023 Our Website. All rights reserved.</p>\n      <p>Feel free to reach out with any questions or suggestions.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section with a primary heading (\"Welcome to Our Website\") and a navigation menu listing \"Home\", \"About\", \"Services\", \"Team\", and \"Contact\".  \n\u2022 The output must include a main section divided into multiple sections with secondary headings: \"About Us\", \"Our Services\", \"Team Profiles\", \"Contact Information\", and \"Frequently Asked Questions\".  \n\u2022 In the \"About Us\" section, the output must display a paragraph describing the team\u2019s mission followed by an unordered list containing \"Integrity and Excellence\", \"Innovative Solutions\", and \"Customer Focus\".  \n\u2022 In the \"Our Services\" section, the output must include three articles, each with a tertiary heading (\"Consulting\", \"Development\", and \"Support\") and a corresponding descriptive paragraph.  \n\u2022 In the \"Team Profiles\" section, the output must show an ordered list where each item contains a tertiary heading (e.g., \"Jane Doe\", \"John Smith\", \"Emily Clark\", \"Michael Brown\") alongside a paragraph indicating the person\u2019s role.  \n\u2022 In the \"Contact Information\" section, the output must contain a description list detailing a phone number, an email address, and a physical address, each with clearly defined keys and values.  \n\u2022 In the \"Frequently Asked Questions\" section, the output must present multiple articles where each contains a tertiary heading for the question and a paragraph providing the answer.  \n\u2022 The output must include a footer section with paragraphs displaying the copyright notice (\"\u00a9 2023 Our Website. All rights reserved.\") and an additional message encouraging contact.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the primary header text displayed on the page?",
        "answer": "Welcome to Our Website"
      },
      {
        "question": "What items are listed in the navigation menu?",
        "answer": "Home, About, Services, Team, Contact"
      },
      {
        "question": "What are the secondary headings in the main section?",
        "answer": "About Us, Our Services, Team Profiles, Contact Information, Frequently Asked Questions"
      },
      {
        "question": "In the About Us section, what bullet list items are presented?",
        "answer": "Integrity and Excellence, Innovative Solutions, Customer Focus"
      },
      {
        "question": "How many articles are in the Our Services section and what are their titles?",
        "answer": "3 articles: Consulting, Development, Support"
      },
      {
        "question": "Which names are shown as tertiary headings in the Team Profiles section?",
        "answer": "Jane Doe, John Smith, Emily Clark, Michael Brown"
      },
      {
        "question": "What contact details are detailed in the Contact Information section?",
        "answer": "Phone number, Email address, Physical address"
      },
      {
        "question": "How is each FAQ item structured in the Frequently Asked Questions section?",
        "answer": "A tertiary heading for the question followed by a descriptive paragraph"
      },
      {
        "question": "What footer information is visible at the bottom of the page?",
        "answer": "A copyright notice '\u00a9 2023 Our Website. All rights reserved.' and an additional message encouraging contact"
      }
    ],
    "raw_output_metric": [
      "Welcome to Our Website",
      "Home",
      "About",
      "Services",
      "Team",
      "Contact",
      "About Us",
      "Our Services",
      "Team Profiles",
      "Contact Information",
      "Frequently Asked Questions",
      "Integrity and Excellence",
      "Innovative Solutions",
      "Customer Focus",
      "Consulting",
      "Development",
      "Support",
      "Jane Doe",
      "John Smith",
      "Emily Clark",
      "Michael Brown",
      "Phone",
      "Email",
      "Address",
      "\u00a9 2023 Our Website. All rights reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040115",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Structural Layout and Visual Hierarchy Example</title>\n</head>\n<body>\n  <header>\n    <h1>Website Overview</h1>\n    <p>A sample HTML page demonstrating structural layout and visible content.</p>\n    <hr>\n  </header>\n\n  <section>\n    <h2>Introduction</h2>\n    <p>\n      This webpage provides an example of a long HTML snippet with various content sections. This example includes headings, lists, tables, and labeled values to demonstrate visual hierarchy and a structured layout.\n    </p>\n  </section>\n\n  <section>\n    <h2>Features</h2>\n    <ul>\n      <li>Clearly defined headings and subheadings</li>\n      <li>Organized sections and content blocks</li>\n      <li>Utilization of lists and tables</li>\n      <li>Readable and accessible format</li>\n    </ul>\n  </section>\n\n  <section>\n    <h2>Details</h2>\n    <article>\n      <h3>Subsection One: Overview</h3>\n      <p>\n        This section outlines key points regarding the layout, including the use of multiple content elements that are visually separated.\n      </p>\n      <p>Key Points Include:</p>\n      <ol>\n        <li>Extensive use of headings and subheadings</li>\n        <li>Logical segmentation of sections</li>\n        <li>Clear use of lists and definitions</li>\n        <li>Organized and accessible content structure</li>\n      </ol>\n    </article>\n\n    <article>\n      <h3>Subsection Two: Specifications</h3>\n      <p>\n        Detailed specifications and labels are provided below in a definition list:\n      </p>\n      <dl>\n        <dt>Version</dt>\n        <dd>1.0.3</dd>\n        <dt>Release Date</dt>\n        <dd>2023-10-15</dd>\n        <dt>Author</dt>\n        <dd>Jane Smith</dd>\n      </dl>\n    </article>\n  </section>\n\n  <section>\n    <h2>Data Table</h2>\n    <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n      <thead>\n        <tr>\n          <th>Item</th>\n          <th>Description</th>\n          <th>Quantity</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Item A</td>\n          <td>First sample item</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <td>Item B</td>\n          <td>Second sample item</td>\n          <td>25</td>\n        </tr>\n        <tr>\n          <td>Item C</td>\n          <td>Third sample item</td>\n          <td>7</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n\n  <section>\n    <h2>Frequently Asked Questions</h2>\n    <dl>\n      <dt>What is the purpose of this page?</dt>\n      <dd>\n        This page serves as an example of HTML structure and layout for visual conversion tasks. It showcases multiple content sections and clear visual hierarchy.\n      </dd>\n      <dt>Can this layout be modified?</dt>\n      <dd>\n        Yes, the HTML structure is provided as a starting point for testing and may be modified as needed.\n      </dd>\n    </dl>\n  </section>\n\n  <footer>\n    <h2>Contact Information</h2>\n    <address>\n      <p>Email: example@example.com</p>\n      <p>Phone: (123) 456-7890</p>\n    </address>\n    <p>\u00a9 2023 Sample Website. All rights reserved.</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include a header section with an h1 element (\"Website Overview\"), a paragraph describing the page, and a horizontal rule beneath them.  \n\u2022 There should be an \"Introduction\" section that contains a secondary heading (h2) and a paragraph explaining the purpose of the page.  \n\u2022 A \"Features\" section must be present with a secondary heading (h2) and an unordered list containing exactly four list items that describe key features.  \n\u2022 A \"Details\" section must be included containing two article elements:  \n\u2003\u2003- The first article must have a tertiary heading (h3) titled \"Subsection One: Overview\", followed by two paragraphs and an ordered list with four items.  \n\u2003\u2003- The second article must have a tertiary heading (h3) titled \"Subsection Two: Specifications\", followed by a paragraph and a definition list with three term-description pairs (Version, Release Date, Author).  \n\u2022 There must be a \"Data Table\" section with a secondary heading (h2) that includes a table structured with a header row having three columns (Item, Description, Quantity) and a body with exactly three rows of data.  \n\u2022 A \"Frequently Asked Questions\" section must exist with a secondary heading (h2) and a definition list containing two question (dt) and answer (dd) pairs.  \n\u2022 The output must feature a footer section that contains a secondary heading (h2) labeled \"Contact Information\", an address element with two paragraphs (one for an email address and one for a phone number), and a final paragraph stating copyright information.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main header title displayed at the top of the page?",
        "answer": "Website Overview"
      },
      {
        "question": "How many list items are shown in the Features section\u2019s unordered list?",
        "answer": "4"
      },
      {
        "question": "What is the title of the first article in the Details section?",
        "answer": "Subsection One: Overview"
      },
      {
        "question": "How many paragraphs follow the tertiary heading in the first article?",
        "answer": "2"
      },
      {
        "question": "How many items are in the ordered list within the first article?",
        "answer": "4"
      },
      {
        "question": "What are the labels in the header row of the Data Table section?",
        "answer": "Item, Description, Quantity"
      },
      {
        "question": "How many rows of data (excluding the header) are present in the table?",
        "answer": "3"
      },
      {
        "question": "How many question and answer pairs are included in the Frequently Asked Questions section?",
        "answer": "2"
      },
      {
        "question": "What is the secondary heading text in the footer section?",
        "answer": "Contact Information"
      },
      {
        "question": "How many paragraphs are contained within the address element in the footer?",
        "answer": "2"
      }
    ],
    "raw_output_metric": [
      "Website Overview",
      "Introduction",
      "Features",
      "Details",
      "Subsection One: Overview",
      "Subsection Two: Specifications",
      "Data Table",
      "Item",
      "Description",
      "Quantity",
      "Frequently Asked Questions",
      "Contact Information",
      "Version",
      "Release Date",
      "Author",
      "email address",
      "phone number",
      "copyright"
    ],
    "rendering": true
  },
  {
    "task_id": "040117",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document Structure Layout Example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  </head>\n  <body>\n    <header>\n      <h1>Main Title: Website Layout Example</h1>\n      <nav>\n        <ul>\n          <li><a href=\"#introduction\">Introduction</a></li>\n          <li><a href=\"#features\">Features</a></li>\n          <li><a href=\"#details\">Detailed Information</a></li>\n          <li><a href=\"#contact\">Contact Info</a></li>\n        </ul>\n      </nav>\n    </header>\n    \n    <section id=\"introduction\">\n      <h2>Introduction</h2>\n      <p>\n        This page is an example of a structurally sound HTML layout. It showcases\n        various content elements such as headings, lists, tables, and labeled\n        values. The goal is to offer a realistic layout sample that can be used for a\n        visual conversion task testing structure and visual hierarchy.\n      </p>\n      <p>\n        The document is designed to be clear and organized, making it easy for viewers\n        to navigate and understand the content.\n      </p>\n    </section>\n    \n    <section id=\"features\">\n      <h2>Features</h2>\n      <ul>\n        <li>Clearly defined sections and subsections</li>\n        <li>Use of headings to establish hierarchy</li>\n        <li>Lists for summarizing key points</li>\n        <li>Tables with labeled metrics</li>\n        <li>Contact information using definition lists</li>\n      </ul>\n    </section>\n    \n    <section id=\"details\">\n      <h2>Detailed Information</h2>\n      \n      <article>\n        <header>\n          <h3>Article 1: Layout Principles</h3>\n        </header>\n        <p>\n          This article covers the main principles for creating effective and visually appealing layouts:\n        </p>\n        <ol>\n          <li>Maintain consistency in structure throughout the document.</li>\n          <li>Establish a clear visual hierarchy using headings and paragraphs.</li>\n          <li>Utilize white space effectively to separate content areas.</li>\n          <li>Incorporate lists and tables to organize detailed information.</li>\n        </ol>\n      </article>\n      \n      <article>\n        <header>\n          <h3>Article 2: Practical Examples</h3>\n        </header>\n        <p>\n          The following table summarizes some key metrics used in this layout example:\n        </p>\n        <table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\n          <thead>\n            <tr>\n              <th>Metric</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Line Count</td>\n              <td>Approximately 50 lines</td>\n            </tr>\n            <tr>\n              <td>Number of Sections</td>\n              <td>4 Main Sections</td>\n            </tr>\n            <tr>\n              <td>Articles Included</td>\n              <td>2 Detailed Articles</td>\n            </tr>\n            <tr>\n              <td>Elements Used</td>\n              <td>Headings, Lists, Tables, Definition Lists</td>\n            </tr>\n          </tbody>\n        </table>\n      </article>\n      \n    </section>\n    \n    <section id=\"contact\">\n      <h2>Contact Information</h2>\n      <dl>\n        <dt>Email:</dt>\n        <dd>example@example.com</dd>\n        <dt>Phone:</dt>\n        <dd>+1234567890</dd>\n        <dt>Address:</dt>\n        <dd>1234 Main St, Anytown, Country</dd>\n      </dl>\n    </section>\n    \n    <footer>\n      <p>&copy; 2023 Layout Example Site. All Rights Reserved.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must include a header section containing an h1 element with the main title \"Main Title: Website Layout Example\" and a navigation menu rendered as an unordered list with four list items, each containing an anchor linking to the respective section IDs (introduction, features, details, contact).  \n\u2022 The Angular template must include an introduction section identified by the id \"introduction\" that contains an h2 element titled \"Introduction\" and two paragraph elements presenting descriptive text about the page.  \n\u2022 The converted Angular code must include a features section with the id \"features\" that contains an h2 element titled \"Features\" followed by an unordered list listing exactly five feature items.  \n\u2022 The Angular output must include a detailed information section with the id \"details\" containing an h2 element titled \"Detailed Information\" and two article elements: one for layout principles and one for practical examples.  \n\u2022 The first article within the details section must include a header with an h3 element \"Article 1: Layout Principles\", a paragraph describing layout principles, and an ordered list of exactly four numbered items.  \n\u2022 The second article within the details section must include a header with an h3 element \"Article 2: Practical Examples\", a paragraph introducing a table, and a table element with a header row (Metric and Value columns) followed by a tbody containing four rows that summarize metrics such as line count, number of sections, articles included, and elements used.  \n\u2022 The Angular template must include a contact section with the id \"contact\" that contains an h2 element titled \"Contact Information\" and a definition list with dt and dd pairs for Email (\"example@example.com\"), Phone (\"+1234567890\"), and Address (\"1234 Main St, Anytown, Country\").  \n\u2022 The Angular output must conclude with a footer section containing a paragraph element with the copyright message \"&copy; 2023 Layout Example Site. All Rights Reserved.\"",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header?",
        "answer": "Main Title: Website Layout Example"
      },
      {
        "question": "How many navigation menu items are visible?",
        "answer": "4"
      },
      {
        "question": "Which section IDs are linked in the navigation menu?",
        "answer": "introduction, features, details, contact"
      },
      {
        "question": "How many paragraphs are present in the introduction section?",
        "answer": "2"
      },
      {
        "question": "How many feature items are listed in the features section?",
        "answer": "5"
      },
      {
        "question": "What is the title of the first article in the details section?",
        "answer": "Article 1: Layout Principles"
      },
      {
        "question": "How many numbered items are in the ordered list within the first article?",
        "answer": "4"
      },
      {
        "question": "How many rows exist in the table body of the second article?",
        "answer": "4"
      },
      {
        "question": "Which dt elements are visible in the contact section?",
        "answer": "Email, Phone, Address"
      },
      {
        "question": "What is the footer's copyright message?",
        "answer": "&copy; 2023 Layout Example Site. All Rights Reserved."
      }
    ],
    "raw_output_metric": [
      "Main Title: Website Layout Example",
      "introduction",
      "features",
      "details",
      "contact",
      "Introduction",
      "Features",
      "Detailed Information",
      "Article 1: Layout Principles",
      "Article 2: Practical Examples",
      "Metric",
      "Value",
      "line count",
      "number of sections",
      "articles included",
      "elements used",
      "Contact Information",
      "Email",
      "example@example.com",
      "Phone",
      "+1234567890",
      "Address",
      "1234 Main St, Anytown, Country",
      "&copy; 2023 Layout Example Site. All Rights Reserved."
    ],
    "rendering": true
  },
  {
    "task_id": "040119",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Structured HTML Layout Example</title>\n  <style>\n    /* Basic styling for visible structure and readability */\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      line-height: 1.6;\n      color: #333;\n    }\n    header, footer {\n      background-color: #f2f2f2;\n      padding: 20px;\n      text-align: center;\n    }\n    nav {\n      background-color: #444;\n      padding: 10px;\n      margin-bottom: 15px;\n    }\n    nav ul {\n      list-style-type: none;\n      padding: 0;\n      margin: 0;\n      display: flex;\n      justify-content: center;\n    }\n    nav li {\n      margin: 0 15px;\n    }\n    nav a {\n      color: white;\n      text-decoration: none;\n    }\n    nav a:hover {\n      text-decoration: underline;\n    }\n    main {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 20px;\n    }\n    section {\n      flex: 2;\n      min-width: 300px;\n    }\n    article {\n      background-color: #fff;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      padding: 15px;\n      margin-bottom: 15px;\n    }\n    aside {\n      flex: 1;\n      background-color: #f9f9f9;\n      padding: 15px;\n      border-radius: 5px;\n      min-width: 200px;\n    }\n    h1, h2, h3 {\n      color: #444;\n    }\n    .cta-button {\n      display: inline-block;\n      background-color: #4CAF50;\n      color: white;\n      padding: 10px 20px;\n      text-decoration: none;\n      border-radius: 5px;\n      margin-top: 10px;\n    }\n    .cta-button:hover {\n      background-color: #45a049;\n    }\n    @media (max-width: 768px) {\n      main {\n        flex-direction: column;\n      }\n      section, aside {\n        width: 100%;\n      }\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>My Website</h1>\n    <p>A modern responsive layout example</p>\n  </header>\n  \n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">About</a></li>\n      <li><a href=\"#\">Services</a></li>\n      <li><a href=\"#\">Blog</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n  \n  <main>\n    <section>\n      <h2>Main Content</h2>\n      \n      <article>\n        <h3>Article Title 1</h3>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor, nisl eget ultricies tincidunt, nunc nisl aliquam nisl, eget aliquam nisl nisl eget nisl. Sed auctor, nisl eget ultricies tincidunt.</p>\n        <a href=\"#\" class=\"cta-button\">Read More</a>\n      </article>\n      \n      <article>\n        <h3>Article Title 2</h3>\n        <p>Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula. Curabitur non nulla sit amet nisl tempus.</p>\n        <a href=\"#\" class=\"cta-button\">Read More</a>\n      </article>\n    </section>\n    \n    <aside>\n      <h3>Sidebar</h3>\n      <p>This is a sidebar that can contain additional navigation, widgets, ads, or other secondary content.</p>\n      \n      <h4>Recent Posts</h4>\n      <ul>\n        <li><a href=\"#\">Post One</a></li>\n        <li><a href=\"#\">Post Two</a></li>\n        <li><a href=\"#\">Post Three</a></li>\n        <li><a href=\"#\">Post Four</a></li>\n      </ul>\n      \n      <h4>Categories</h4>\n      <ul>\n        <li><a href=\"#\">Category 1</a></li>\n        <li><a href=\"#\">Category 2</a></li>\n        <li><a href=\"#\">Category 3</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2025 My Website. All rights reserved.</p>\n    <p>Contact: info@example.com</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must encapsulate the original HTML structure within an Angular component using the appropriate component decorator and template format.  \n\u2022 The output must include a header section that visually appears at the top of the page with clearly centered text representing the page\u2019s title, \u201cStructured HTML Layout Example.\u201d  \n\u2022 The template must preserve a well-defined main content area that represents the body segment of the original HTML layout.  \n\u2022 A footer section must be present at the bottom, displaying centered text similar to the original layout\u2019s footer structure.  \n\u2022 The visible layout must maintain the clear sectioning (header, main content, footer) so that when rendered, the organization and grouping of these sections are easily verifiable.  \n\u2022 The Angular code must retain the overall document structure equivalent to the DOCTYPE and meta-information, ensuring proper viewport and charset settings are established by equivalent means in the Angular application.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the title text displayed in the header?",
        "answer": "Structured HTML Layout Example"
      },
      {
        "question": "Is the header text clearly centered at the top of the page?",
        "answer": "Yes"
      },
      {
        "question": "What does the main content area visually represent?",
        "answer": "The body segment of the original layout"
      },
      {
        "question": "Is there a footer present at the bottom of the page with centered text?",
        "answer": "Yes"
      },
      {
        "question": "Are the header, main content, and footer sections clearly separated?",
        "answer": "Yes"
      },
      {
        "question": "Does the rendered output maintain proper document settings like viewport and charset information?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "@Component",
      "template:",
      "<!DOCTYPE html>",
      "<meta charset=",
      "<meta name=\"viewport\"",
      "<header>",
      "Structured HTML Layout Example",
      "<main>",
      "<footer>",
      "My Website",
      "A modern responsive layout example",
      "Home",
      "About",
      "Services",
      "Blog",
      "Contact",
      "Main Content",
      "Article Title 1",
      "Article Title 2",
      "Sidebar",
      "Recent Posts",
      "Categories",
      "2025 My Website. All rights reserved.",
      "Contact: info@example.com"
    ],
    "rendering": true
  },
  {
    "task_id": "040120",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Structured Layout Example</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n  <header>\n    <h1>Main Title of the Page</h1>\n    <p>This page is a demonstration of structured, layered content using HTML.</p>\n  </header>\n  \n  <section>\n    <h2>Introduction</h2>\n    <p>The following content is organized into several sections to highlight visual hierarchy, structure, and readable formatting. Below you will find examples of headings, lists, and labeled values.</p>\n  </section>\n  \n  <section>\n    <h2>Content Sections</h2>\n    <article>\n      <h3>Subsection 1: Overview</h3>\n      <p>This section provides an overview of the topics covered on this page. The content is thoughtfully divided to assist in comprehending the overall flow.</p>\n      <ul>\n        <li>Introduction of topics</li>\n        <li>Hierarchy of headings</li>\n        <li>Clear labeling and organization</li>\n      </ul>\n    </article>\n    \n    <article>\n      <h3>Subsection 2: Detailed Content</h3>\n      <p>Below is a list of detailed items and descriptions for structured data presentation.</p>\n      <ol>\n        <li>\n          <strong>Feature A:</strong> Descriptive details about feature A that explain its purpose and usage.\n        </li>\n        <li>\n          <strong>Feature B:</strong> Information about feature B includes its benefits and applications.\n        </li>\n        <li>\n          <strong>Feature C:</strong> A thorough explanation of feature C along with examples.\n        </li>\n      </ol>\n    </article>\n    \n    <article>\n      <h3>Subsection 3: Labeled Values</h3>\n      <p>The following table lists some key information and their respective values.</p>\n      <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n        <thead>\n          <tr>\n            <th>Label</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Username</td>\n            <td>JohnDoe</td>\n          </tr>\n          <tr>\n            <td>Email</td>\n            <td>john.doe@example.com</td>\n          </tr>\n          <tr>\n            <td>Membership</td>\n            <td>Premium</td>\n          </tr>\n        </tbody>\n      </table>\n    </article>\n  </section>\n  \n  <aside>\n    <h2>Side Information</h2>\n    <p>This aside section can contain supplementary content such as quotes or additional notes.</p>\n    <blockquote>\n      \"Simplicity is the ultimate sophistication.\" \u2013 Leonardo da Vinci\n    </blockquote>\n    <dl>\n      <dt>Note 1:</dt>\n      <dd>Always keep your code clean and readable.</dd>\n      <dt>Note 2:</dt>\n      <dd>Structure your content logically for the best user experience.</dd>\n    </dl>\n  </aside>\n  \n  <section>\n    <h2>Conclusion</h2>\n    <p>The structured layout provided in this example demonstrates the use of headings, sections, lists, tables, and other HTML elements to form a visually appealing and organized webpage. Use these techniques to craft your own meaningful documents.</p>\n  </section>\n  \n  <footer>\n    <p>&copy; 2023 Structured Layout Example</p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "- The Angular output must include a header section with a primary title (h1) and an introductory paragraph.\n- The output must contain an \"Introduction\" section with a secondary heading (h2) and a descriptive paragraph.\n- A \"Content Sections\" area must be present that includes multiple articles; each article should have its own subheading (h3), descriptive paragraph, and either an unordered or ordered list as appropriate.\n- One article must display a table with a header row labeled \"Label\" and \"Value,\" followed by rows containing keys such as Username, Email, and Membership with their respective values.\n- An aside section must be present featuring a secondary heading (h2), a paragraph, a blockquote with a cited quote, and a description list with at least two term-definition pairs.\n- A concluding section must include a secondary heading (h2) and a detailed paragraph summarizing the page content.\n- The output must end with a footer section that contains a paragraph displaying the copyright notice.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What primary elements are included in the header section?",
        "answer": "A primary title (h1) and an introductory paragraph."
      },
      {
        "question": "What does the Introduction section feature?",
        "answer": "A secondary heading (h2) labeled 'Introduction' and a descriptive paragraph."
      },
      {
        "question": "What structure is used for each article in the Content Sections?",
        "answer": "Each article has its own subheading (h3), a descriptive paragraph, and an unordered or ordered list."
      },
      {
        "question": "What table headers are used in one of the articles?",
        "answer": "The table includes a header row with 'Label' and 'Value'."
      },
      {
        "question": "Which keys and values are displayed in the table rows?",
        "answer": "Username, Email, and Membership with their respective values."
      },
      {
        "question": "What components are included in the aside section?",
        "answer": "A secondary heading (h2), a paragraph, a blockquote with a cited quote, and a description list with term-definition pairs."
      },
      {
        "question": "What does the concluding section contain?",
        "answer": "A secondary heading (h2) and a detailed paragraph summarizing the page content."
      },
      {
        "question": "What is found in the footer section?",
        "answer": "A paragraph displaying the copyright notice."
      }
    ],
    "raw_output_metric": [
      "<h1>",
      "introductory paragraph",
      "<h2>Introduction",
      "descriptive paragraph",
      "Content Sections",
      "<h3>",
      "unordered list",
      "ordered list",
      "table",
      "Label",
      "Value",
      "Username",
      "Email",
      "Membership",
      "aside",
      "<blockquote>",
      "cite",
      "description list",
      "term",
      "definition",
      "<h2>Conclusion",
      "detailed paragraph",
      "footer",
      "copyright"
    ],
    "rendering": true
  },
  {
    "task_id": "040121",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Structured Layout Test Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome to the Structured Layout Test</h1>\n    <p>This page demonstrates various HTML elements arranged in a clear, visible format with proper structural layout and hierarchy.</p>\n  </header>\n\n  <nav>\n    <ul>\n      <li>Home</li>\n      <li>About</li>\n      <li>Services</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n\n  <section id=\"introduction\">\n    <h2>Introduction</h2>\n    <p>This section provides an overview of the content on this page. Notice how different HTML elements such as headings, sections, articles, lists, and tables are used to create a comprehensive layout.</p>\n    <article>\n      <h3>Overview of the Page</h3>\n      <p>The page is divided into several parts:</p>\n      <ol>\n        <li>Header & Navigation</li>\n        <li>Main Content Sections</li>\n        <li>Sidebar for Additional Information</li>\n        <li>Footer with Contact & Legal Information</li>\n      </ol>\n    </article>\n  </section>\n\n  <section id=\"main-content\">\n    <h2>Main Content</h2>\n    <article>\n      <h3>Services Offered</h3>\n      <p>We offer a wide range of services. Below is a list of our key offerings:</p>\n      <ul>\n        <li><strong>Consulting:</strong> Expert advice and business strategy planning.</li>\n        <li><strong>Development:</strong> Custom software solutions tailored to your needs.</li>\n        <li><strong>Design:</strong> Creative design solutions for both digital and print media.</li>\n        <li><strong>Support:</strong> Dedicated customer support available 24/7.</li>\n      </ul>\n    </article>\n\n    <article>\n      <h3>Detailed Information</h3>\n      <p>The table below summarizes the core features of our services:</p>\n      <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n        <thead>\n          <tr>\n            <th>Feature</th>\n            <th>Description</th>\n            <th>Availability</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Response Time</td>\n            <td>Quick turnaround on all client inquiries</td>\n            <td>24/7</td>\n          </tr>\n          <tr>\n            <td>Scalable Solutions</td>\n            <td>Accommodates business growth and changing needs</td>\n            <td>Flexible</td>\n          </tr>\n          <tr>\n            <td>Security Measures</td>\n            <td>Robust processes for data protection</td>\n            <td>Standard</td>\n          </tr>\n        </tbody>\n      </table>\n    </article>\n  </section>\n\n  <aside id=\"additional-info\">\n    <h2>Additional Information</h2>\n    <p>For extra details and guidelines, please refer to the following tips:</p>\n    <dl>\n      <dt>Best Practices</dt>\n      <dd>Follow industry standards and proven methodologies for optimal results.</dd>\n      \n      <dt>Regular Updates</dt>\n      <dd>Stay informed about the latest trends and developments in your field.</dd>\n      \n      <dt>Customer Feedback</dt>\n      <dd>Regularly collect and analyze feedback to improve your products and services.</dd>\n    </dl>\n    \n    <blockquote>\n      <p>\"Quality is not an act, it is a habit.\" - Aristotle</p>\n    </blockquote>\n  </aside>\n\n  <section id=\"contact-form\">\n    <h2>Contact Us</h2>\n    <form action=\"#\" method=\"post\">\n      <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n      </div>\n      \n      <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n      </div>\n      \n      <div>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n      </div>\n      \n      <div>\n        <input type=\"submit\" value=\"Submit\">\n      </div>\n    </form>\n  </section>\n\n  <footer>\n    <div id=\"contact-info\">\n      <h3>Contact Information</h3>\n      <address>\n        123 Main Street<br>\n        Anytown, AN 12345<br>\n        Phone: <a href=\"tel:+15551234567\">(555) 123-4567</a><br>\n        Email: <a href=\"mailto:info@example.com\">info@example.com</a>\n      </address>\n    </div>\n    \n    <div id=\"legal\">\n      <h3>Legal</h3>\n      <p>&copy; 2025 Example Company. All rights reserved.</p>\n      <p><small>This is a sample page for demonstration purposes only.</small></p>\n    </div>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must present a header section with a large title and introductory text, including a main heading (h1) and a supporting paragraph.  \n\u2022 A navigation section should be displayed with an unordered list containing exactly four items: \"Home\", \"About\", \"Services\", and \"Contact\".  \n\u2022 There must be an introduction section with an id (\"introduction\") that includes a secondary heading (h2), a descriptive paragraph, and an embedded article featuring a tertiary heading (h3) and an ordered list outlining page parts.  \n\u2022 A main content section with an id (\"main-content\") must be included, containing at least two articles. One article should list services with emphasized service names (using bold text) and descriptions in an unordered list; the other article should contain a table.  \n\u2022 The table within the second article must have a header row with three columns (\"Feature\", \"Description\", \"Availability\") and exactly three data rows with corresponding example text for each column.  \n\u2022 An aside section with an id (\"additional-info\") should be provided, including a secondary heading (h2), a paragraph, and a definition list (dl) for extra details.  \n\u2022 The converted output must be structured as an Angular component template, omitting the surrounding HTML, head, and body tags, and instead focusing on the component's inner HTML elements.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the heading level used for the main title in the header section?",
        "answer": "h1"
      },
      {
        "question": "How many navigation items are displayed and what are their labels?",
        "answer": "4 items: Home, About, Services, Contact"
      },
      {
        "question": "What id is assigned to the introduction section?",
        "answer": "introduction"
      },
      {
        "question": "Which type of list within the embedded article in the introduction section outlines the page parts?",
        "answer": "Ordered list"
      },
      {
        "question": "How many articles are included in the main content section and what content does the first article display?",
        "answer": "2 articles; the first shows a list of services with bolded service names and descriptions"
      },
      {
        "question": "What are the column headers of the table in the second article?",
        "answer": "Feature, Description, Availability"
      },
      {
        "question": "How many data rows are present in the table?",
        "answer": "3"
      },
      {
        "question": "What id is assigned to the aside section and what type of list does it include for extra details?",
        "answer": "additional-info; Definition list"
      }
    ],
    "raw_output_metric": [
      "<header>",
      "<h1>",
      "<p>",
      "<nav>",
      "<ul>",
      "Home",
      "About",
      "Services",
      "Contact",
      "id=\"introduction\"",
      "<h2>",
      "<h3>",
      "<ol>",
      "id=\"main-content\"",
      "<article>",
      "<strong>",
      "<ul>",
      "<table>",
      "<th>",
      "Feature",
      "Description",
      "Availability",
      "id=\"additional-info\"",
      "<aside>",
      "<dl>",
      "2025 Example Company. All rights reserved.",
      "Best Practices",
      "Regular Updates",
      "Customer Feedback",
      "Contact Us",
      "Name:",
      "Email:",
      "Message:",
      "Submit",
      "Contact Information",
      "123 Main Street",
      "Anytown, AN 12345",
      "+15551234567",
      "(555) 123-4567",
      "info@example.com"
    ],
    "rendering": true
  },
  {
    "task_id": "040123",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Sample HTML Structure</title>\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        line-height: 1.6;\n        margin: 0;\n        padding: 0;\n        color: #333;\n    }\n    header, nav, section, footer {\n        padding: 1rem;\n    }\n    body > header {\n        background-color: #f8f9fa;\n        text-align: center;\n        padding: 2rem 1rem;\n        border-bottom: 1px solid #e9ecef;\n    }\n    nav {\n        background-color: #343a40;\n    }\n    nav ul {\n        display: flex;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n        justify-content: center;\n    }\n    nav li {\n        margin: 0 1rem;\n    }\n    nav a {\n        color: white;\n        text-decoration: none;\n        font-weight: bold;\n    }\n    nav a:hover {\n        text-decoration: underline;\n    }\n    section {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 2rem 1rem;\n        border-bottom: 1px solid #e9ecef;\n    }\n    article {\n        background-color: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 4px;\n        margin-bottom: 1.5rem;\n    }\n    h2 {\n        color: #343a40;\n        border-bottom: 2px solid #dee2e6;\n        padding-bottom: 0.5rem;\n    }\n    h3 {\n        color: #495057;\n    }\n    h4 {\n        color: #6c757d;\n    }\n    table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 1rem 0;\n    }\n    th, td {\n        border: 1px solid #dee2e6;\n        padding: 0.75rem;\n        text-align: left;\n    }\n    th {\n        background-color: #e9ecef;\n    }\n    tr:nth-child(even) {\n        background-color: #f8f9fa;\n    }\n    .feature-card {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        padding: 1rem;\n        margin-bottom: 1rem;\n        background-color: #fff;\n    }\n    .feature-card h3 {\n        margin-top: 0;\n    }\n    footer {\n        background-color: #343a40;\n        color: white;\n        text-align: center;\n        padding: 2rem 1rem;\n        margin-top: 2rem;\n    }\n    form {\n        max-width: 600px;\n        margin: 0 auto;\n    }\n    .form-group {\n        margin-bottom: 1rem;\n    }\n    label {\n        display: block;\n        margin-bottom: 0.5rem;\n    }\n    input, textarea {\n        width: 100%;\n        padding: 0.5rem;\n        border: 1px solid #ced4da;\n        border-radius: 4px;\n    }\n    button {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 0.5rem 1rem;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n    button:hover {\n        background-color: #0069d9;\n    }\n</style>\n</head>\n<body>\n<header>\n<h1>Welcome to Our Sample Page</h1>\n<p>This page is designed to demonstrate a realistic HTML structure with clear visual hierarchy, formatted content, and a well-organized layout.</p>\n</header>\n\n<nav>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#details\">Details</a></li>\n<li><a href=\"#contact\">Contact</a></li>\n</ul>\n</nav>\n\n<section id=\"overview\">\n<h2>Overview</h2>\n<p>The content below exemplifies a structured layout using headers, sections, articles, lists, and tables. The goal is to provide a comprehensive view of standard HTML elements applied in a cohesive design.</p>\n\n<article>\n<header>\n<h3>Introduction to HTML Structure</h3>\n</header>\n<p>This introductory article explains how semantic HTML elements are used to create an accessible and well-formatted webpage. The article is subdivided into various sections, including quick facts, a detailed explanation, and sample data representations.</p>\n\n<section>\n<h4>Quick Facts</h4>\n<ul>\n<li>Uses semantic HTML5 tags</li>\n<li>Contains multiple sections and subsections</li>\n<li>Utilizes lists for clarity</li>\n<li>Displays formatted tables for structured data</li>\n</ul>\n</section>\n\n<section>\n<h4>Detailed Explanation</h4>\n<p>Semantic HTML refers to the use of HTML markup to reinforce the meaning of the information in webpages rather than merely to define its presentation. By using semantic markup, you help various user agents (browsers, screen readers, etc.) to understand the structure and meaning of your content, making your pages more accessible, SEO-friendly, and easier to maintain.</p>\n<p>Key semantic elements used in this document include:</p>\n<ol>\n<li><code>&lt;header&gt;</code> - For introductory content or navigational aids</li>\n<li><code>&lt;nav&gt;</code> - For navigation links</li>\n<li><code>&lt;section&gt;</code> - For thematic grouping of content</li>\n<li><code>&lt;article&gt;</code> - For self-contained compositions</li>\n<li><code>&lt;footer&gt;</code> - For footer information</li>\n</ol>\n</section>\n\n<section>\n<h4>Sample Data</h4>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Purpose</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h1-h6</td>\n<td>Section headings</td>\n<td>&lt;h1&gt;Main Title&lt;/h1&gt;</td>\n</tr>\n<tr>\n<td>p</td>\n<td>Paragraphs</td>\n<td>&lt;p&gt;Text content&lt;/p&gt;</td>\n</tr>\n<tr>\n<td>ul/ol</td>\n<td>Lists</td>\n<td>&lt;ul&gt;&lt;li&gt;List item&lt;/li&gt;&lt;/ul&gt;</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Tabular data</td>\n<td>&lt;table&gt;&lt;tr&gt;&lt;td&gt;Cell&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</td>\n</tr>\n</tbody>\n</table>\n</section>\n</article>\n</section>\n\n<section id=\"features\">\n<h2>Features</h2>\n<p>This section outlines key features of a well-structured HTML document and demonstrates how they contribute to both functionality and user experience.</p>\n\n<div class=\"feature-card\">\n<h3>Responsive Design</h3>\n<p>The layout adapts to different screen sizes and devices, ensuring optimal viewing experience across desktops, tablets, and mobile phones.</p>\n<p>Implementation includes:</p>\n<ul>\n<li>Viewport meta tag</li>\n<li>Flexible layout structures</li>\n<li>Media queries for different screen sizes</li>\n</ul>\n</div>\n\n<div class=\"feature-card\">\n<h3>Semantic Structure</h3>\n<p>Using semantic HTML elements improves accessibility, SEO, and code maintainability by clearly defining the purpose of each content section.</p>\n<p>Key benefits include:</p>\n<ul>\n<li>Better screen reader compatibility</li>\n<li>Improved search engine indexing</li>\n<li>Clearer code organization</li>\n</ul>\n</div>\n\n<div class=\"feature-card\">\n<h3>Visual Hierarchy</h3>\n<p>Content is organized with clear headings and consistent formatting to guide users through the information structure.</p>\n<p>Techniques employed:</p>\n<ul>\n<li>Consistent heading sizes (h1-h6)</li>\n<li>Strategic use of white space</li>\n<li>Color and typography to indicate importance</li>\n</ul>\n</div>\n</section>\n\n<section id=\"details\">\n<h2>Details</h2>\n<p>This section provides more in-depth information about implementing a cohesive HTML structure and its benefits for web development.</p>\n\n<article>\n<header>\n<h3>Best Practices for HTML Structure</h3>\n</header>\n<p>Following best practices ensures your HTML documents are accessible, maintainable, and perform well across different platforms and devices.</p>\n\n<section>\n<h4>Accessibility Considerations</h4>\n<p>Creating accessible web content enables users of all abilities to interact with your website effectively.</p>\n<ul>\n<li>Use proper heading hierarchy (h1-h6) to establish document structure</li>\n<li>Include descriptive alt text for images</li>\n<li>Ensure sufficient color contrast for text readability</li>\n<li>Use semantic elements to improve screen reader navigation</li>\n<li>Provide keyboard navigability for all interactive elements</li>\n</ul>\n</section>\n\n<section>\n<h4>Performance Optimization</h4>\n<p>Well-structured HTML contributes to better site performance and user experience.</p>\n<ul>\n<li>Keep markup clean and minimal</li>\n<li>Use CSS for styling rather than nested tables or complex HTML structures</li>\n<li>Properly load external resources (CSS, JavaScript) to prevent render blocking</li>\n<li>Implement responsive images to reduce bandwidth usage</li>\n</ul>\n</section>\n\n<section>\n<h4>Code Maintainability</h4>\n<p>Structured HTML documents are easier to update and maintain over time.</p>\n<table>\n<thead>\n<tr>\n<th>Practice</th>\n<th>Benefit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Consistent indentation</td>\n<td>Improves code readability</td>\n</tr>\n<tr>\n<td>Logical section organization</td>\n<td>Makes content updates more straightforward</td>\n</tr>\n<tr>\n<td>Descriptive class/ID names</td>\n<td>Enhances understanding of element purpose</td>\n</tr>\n<tr>\n<td>Comment usage for complex sections</td>\n<td>Clarifies intent for other developers</td>\n</tr>\n</tbody>\n</table>\n</section>\n</article>\n</section>\n\n<section id=\"contact\">\n<h2>Contact</h2>\n<p>Get in touch with us for more information about implementing effective HTML structures in your projects.</p>\n\n<form>\n<div class=\"form-group\">\n<label for=\"name\">Name:</label>\n<input type=\"text\" id=\"name\" name=\"name\" required>\n</div>\n\n<div class=\"form-group\">\n<label for=\"email\">Email:</label>\n<input type=\"email\" id=\"email\" name=\"email\" required>\n</div>\n\n<div class=\"form-group\">\n<label for=\"subject\">Subject:</label>\n<input type=\"text\" id=\"subject\" name=\"subject\">\n</div>\n\n<div class=\"form-group\">\n<label for=\"message\">Message:</label>\n<textarea id=\"message\" name=\"message\" rows=\"5\" required></textarea>\n</div>\n\n<button type=\"submit\">Send Message</button>\n</form>\n</section>\n\n<footer>\n<p>&copy; 2025 Sample HTML Structure. All rights reserved.</p>\n<p>This example was created to demonstrate semantic HTML5 elements and proper document structure.</p>\n<nav>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#details\">Details</a></li>\n<li><a href=\"#contact\">Contact</a></li>\n</ul>\n</nav>\n</footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include an Angular component that encapsulates the entire HTML structure as its template (using the @Component decorator with a selector and a template or templateUrl property).  \n\u2022 The Angular template must retain the complete semantic HTML structure, including the DOCTYPE (if applicable), html, head, and body tags or their Angular-equivalent usage.  \n\u2022 The output must preserve all header elements (h1 in the main header, h2, h3, h4 in various sections) and their corresponding textual content exactly as in the original HTML.  \n\u2022 The navigation bar must include an unordered list (ul) with list items (li) containing anchor elements (a) linking to the sections with id attributes (overview, features, details, contact).  \n\u2022 The sections\u2014especially the \"Overview\" section\u2014must contain nested articles, headers, paragraphs, and sub-sections (including the \"Quick Facts\" list with multiple list items) mirroring the original HTML structure.  \n\u2022 The converted Angular code must ensure that all textual content (titles, detailed descriptions, and list items) remains verbatim from the original HTML.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "Does the rendered output include a DOCTYPE declaration along with html, head, and body tags?",
        "answer": "Yes"
      },
      {
        "question": "How many navigation links are visible in the navigation bar?",
        "answer": "4"
      },
      {
        "question": "What are the IDs of the sections linked from the navigation bar?",
        "answer": "overview, features, details, contact"
      },
      {
        "question": "Is there a main header with an h1 element present in the HTML structure?",
        "answer": "Yes"
      },
      {
        "question": "Are all header elements (h1, h2, h3, h4) preserved exactly as in the original HTML?",
        "answer": "Yes"
      },
      {
        "question": "Does the 'Overview' section contain nested articles with headers, paragraphs, and sub-sections?",
        "answer": "Yes"
      },
      {
        "question": "Is there a 'Quick Facts' list that displays multiple list items?",
        "answer": "Yes"
      },
      {
        "question": "Is all the textual content, including titles and descriptions, kept verbatim from the original HTML?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "@Component",
      "selector",
      "template",
      "templateUrl",
      "<!DOCTYPE html>",
      "<html>",
      "<head>",
      "<body>",
      "<h1>",
      "<h2>",
      "<h3>",
      "<h4>",
      "<ul>",
      "<li>",
      "<a",
      "id=\"overview\"",
      "id=\"features\"",
      "id=\"details\"",
      "id=\"contact\"",
      "Overview",
      "Quick Facts",
      "Introduction to HTML Structure",
      "Detailed Explanation",
      "Sample Data",
      "Features",
      "Responsive Design",
      "Semantic Structure",
      "Visual Hierarchy",
      "Details",
      "Best Practices for HTML Structure",
      "Accessibility Considerations",
      "Performance Optimization",
      "Code Maintainability",
      "Send Message",
      "2025 Sample HTML Structure. All rights reserved.",
      "This example was created to demonstrate semantic HTML5 elements and proper document structure.",
      "Overview",
      "Features",
      "Details",
      "Contact"
    ],
    "rendering": true
  },
  {
    "task_id": "040124",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Visual Hierarchy Layout Test</title>\n  </head>\n  <body>\n    <!-- Header Section -->\n    <header>\n      <h1>Main Title of the Page</h1>\n      <p>This page demonstrates a structured layout emphasizing visible hierarchy and formatted content.</p>\n      <hr>\n    </header>\n\n    <!-- Navigation Section -->\n    <nav>\n      <ul>\n        <li>Home</li>\n        <li>About</li>\n        <li>Services\n          <ul>\n            <li>Consulting</li>\n            <li>Development</li>\n            <li>Support</li>\n          </ul>\n        </li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n\n    <!-- Main Content Area -->\n    <main>\n      <!-- Introduction Section -->\n      <section>\n        <h2>Introduction</h2>\n        <p>The introduction provides an overview of the page's layout and content structure.</p>\n        <ol>\n          <li>Overview of Topics</li>\n          <li>Structural Layout</li>\n          <li>Content Formatting</li>\n        </ol>\n      </section>\n\n      <!-- Details Section -->\n      <section>\n        <h2>Content Details</h2>\n\n        <!-- Article on Structure -->\n        <article>\n          <h3>Topic 1: HTML Structure</h3>\n          <p>This section explains the use of semantic HTML elements such as header, nav, main, section, article, and footer.</p>\n          <ul>\n            <li>Logical segmentation of content</li>\n            <li>Improved readability</li>\n            <li>Better accessibility</li>\n          </ul>\n        </article>\n\n        <!-- Article on Visual Layout -->\n        <article>\n          <h3>Topic 2: Visual Layout</h3>\n          <p>This part demonstrates how content can be organized to emphasize visual hierarchy.</p>\n          <dl>\n            <dt>Heading 1</dt>\n            <dd>Main Title of the Page</dd>\n            <dt>Heading 2</dt>\n            <dd>Section Titles</dd>\n            <dt>Heading 3</dt>\n            <dd>Subsection Titles</dd>\n          </dl>\n        </article>\n\n        <!-- Article on Formatted Content -->\n        <article>\n          <h3>Topic 3: Content Formatting</h3>\n          <p>Here we showcase examples of ordered and unordered lists, as well as tabulated data and definition lists.</p>\n          <ul>\n            <li>Bulleted Lists for simple items</li>\n            <li>Numbered Lists for sequential steps</li>\n            <li>Tables and Definition Lists for detailed data</li>\n          </ul>\n        </article>\n      </section>\n\n      <!-- Data Section with Table -->\n      <section>\n        <h2>Data Overview</h2>\n        <p>The following table outlines structured data with labeled values:</p>\n        <table border=\"1\">\n          <thead>\n            <tr>\n              <th>Label</th>\n              <th>Value</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>ID</td>\n              <td>1001</td>\n              <td>Unique Identifier</td>\n            </tr>\n            <tr>\n              <td>Code</td>\n              <td>XYZ</td>\n              <td>Classification Code</td>\n            </tr>\n            <tr>\n              <td>Status</td>\n              <td>Active</td>\n              <td>Current System State</td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n\n      <!-- User Information Section -->\n      <section>\n        <h2>User Information</h2>\n        <p>This section lists details of the current user profile and settings.</p>\n        \n        <form>\n          <fieldset>\n            <legend>User Profile</legend>\n            <div>\n              <label for=\"username\">Username:</label>\n              <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter username\">\n            </div>\n            <div>\n              <label for=\"email\">Email:</label>\n              <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter email\">\n            </div>\n            <div>\n              <label for=\"preferences\">Preferences:</label>\n              <select id=\"preferences\" name=\"preferences\">\n                <option value=\"default\">Default View</option>\n                <option value=\"compact\">Compact View</option>\n                <option value=\"expanded\">Expanded View</option>\n              </select>\n            </div>\n            <div>\n              <button type=\"submit\">Update Profile</button>\n            </div>\n          </fieldset>\n        </form>\n      </section>\n      \n      <!-- Additional Resources Section -->\n      <section>\n        <h2>Additional Resources</h2>\n        <p>Find more information about structured layouts and content organization in these resources:</p>\n        <ul>\n          <li><a href=\"#\">HTML5 Semantic Elements Guide</a></li>\n          <li><a href=\"#\">Web Accessibility Standards</a></li>\n          <li><a href=\"#\">Content Organization Best Practices</a></li>\n        </ul>\n      </section>\n    </main>\n\n    <!-- Footer Section -->\n    <footer>\n      <hr>\n      <p>&copy; 2025 Visual Hierarchy Demo. All rights reserved.</p>\n      <address>\n        Contact: <a href=\"mailto:info@example.com\">info@example.com</a>\n      </address>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must display a header section containing a primary heading reading \u201cMain Title of the Page\u201d, a descriptive paragraph, and a horizontal rule.  \n\u2022 It must include a navigation section with an unordered list that features top-level items \u201cHome\u201d, \u201cAbout\u201d, \u201cContact\u201d as well as a nested list under \u201cServices\u201d with items \u201cConsulting\u201d, \u201cDevelopment\u201d, and \u201cSupport\u201d.  \n\u2022 The main content area must be organized into sections, starting with an \u201cIntroduction\u201d section that includes a second-level heading, a paragraph summarizing the content, and an ordered list of topics (e.g., \u201cOverview of Topics\u201d, \u201cStructural Layout\u201d, \u201cContent Formatting\u201d).  \n\u2022 There must be a \u201cContent Details\u201d section composed of multiple articles. Each article should include a third-level heading, a descriptive paragraph, and either an unordered list (for topics like HTML structure and content formatting) or a definition list (illustrating items such as headings with their corresponding descriptions).  \n\u2022 A \u201cData Overview\u201d section must be present, featuring a paragraph introduction followed by a table that has a header row with columns labeled \u201cLabel\u201d, \u201cValue\u201d, and \u201cDescription\u201d and at least three rows of corresponding data (e.g., \u201cID\u201d with \u201c1001\u201d, \u201cCode\u201d with \u201cXYZ\u201d, \u201cStatus\u201d with \u201cActive\u201d).  \n\u2022 A \u201cUser Information\u201d section must be included, containing a second-level heading and a paragraph explaining that the section lists user details.  \n\u2022 The conversion to Angular must preserve the visible structural hierarchy and text content as described in the original HTML code, ensuring that the rendered view faithfully replicates the original layout.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the primary heading text in the header section?",
        "answer": "Main Title of the Page"
      },
      {
        "question": "What elements are visible in the header section?",
        "answer": "A primary heading, a descriptive paragraph, and a horizontal rule"
      },
      {
        "question": "Which top-level navigation items are displayed?",
        "answer": "Home, About, Contact, and Services"
      },
      {
        "question": "What items are nested under the 'Services' navigation item?",
        "answer": "Consulting, Development, and Support"
      },
      {
        "question": "What topics are listed in the ordered list of the Introduction section?",
        "answer": "Overview of Topics, Structural Layout, Content Formatting"
      },
      {
        "question": "What components does each article in the Content Details section contain?",
        "answer": "A third-level heading, a descriptive paragraph, and either an unordered list or a definition list"
      },
      {
        "question": "What are the column headers in the Data Overview table?",
        "answer": "Label, Value, and Description"
      },
      {
        "question": "Which data rows are shown in the Data Overview table?",
        "answer": "ID with 1001, Code with XYZ, and Status with Active"
      },
      {
        "question": "What does the User Information section include?",
        "answer": "A second-level heading and a paragraph explaining that the section lists user details"
      }
    ],
    "raw_output_metric": [
      "Main Title of the Page",
      "Home",
      "About",
      "Contact",
      "Services",
      "Consulting",
      "Development",
      "Support",
      "Introduction",
      "Overview of Topics",
      "Structural Layout",
      "Content Formatting",
      "Content Details",
      "HTML structure",
      "headings",
      "Data Overview",
      "Label",
      "Value",
      "Description",
      "ID",
      "1001",
      "Code",
      "XYZ",
      "Status",
      "Active",
      "User Information",
      "user details",
      "User Profile",
      "Username:",
      "Email:",
      "Preferences:",
      "Default View",
      "Compact View",
      "Expanded View",
      "Update Profile",
      "Additional Resources",
      "HTML5 Semantic Elements Guide",
      "Web Accessibility Standards",
      "Content Organization Best Practices",
      "2025 Visual Hierarchy Demo. All rights reserved.",
      "info@example.com"
    ],
    "rendering": true
  },
  {
    "task_id": "040125",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document Layout Example</title>\n  </head>\n  <body>\n    <header>\n      <h1>Welcome to the HTML Layout Showcase</h1>\n      <p>This page demonstrates a structured layout with various sections and formatted content.</p>\n    </header>\n\n    <nav>\n      <h2>Site Navigation</h2>\n      <ul>\n        <li>Home</li>\n        <li>About\n          <ul>\n            <li>Company</li>\n            <li>Team</li>\n            <li>History</li>\n          </ul>\n        </li>\n        <li>Services</li>\n        <li>Contact</li>\n      </ul>\n    </nav>\n\n    <main>\n      <section>\n        <h2>Introduction</h2>\n        <p>This section serves as an overview of the content and structure. It contains formatted text, lists, and labeled values to illustrate a variety of elements in a hierarchical layout.</p>\n        <ul>\n          <li>Understanding Layout</li>\n          <li>Visual Hierarchy</li>\n          <li>Content Formatting</li>\n          <li>Structural Markup</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Details and Analysis</h2>\n        <article>\n          <h3>Subsection A: Organized Information</h3>\n          <p>Below is some structured information:</p>\n          <dl>\n            <dt>Publication Date:</dt>\n            <dd>October 2023</dd>\n            <dt>Author:</dt>\n            <dd>HTML Developer</dd>\n            <dt>Review:</dt>\n            <dd>Thorough and well structured</dd>\n          </dl>\n        </article>\n\n        <article>\n          <h3>Subsection B: Data Points</h3>\n          <p>This subsection contains data points organized in a list format:</p>\n          <ol>\n            <li>Point One: Introduction to basic HTML elements.</li>\n            <li>Point Two: Demonstration of sectioning and hierarchy.</li>\n            <li>Point Three: Usage of lists, tables, and formatted content.</li>\n          </ol>\n        </article>\n      </section>\n\n      <section>\n        <h2>Additional Information</h2>\n        <p>The following are key takeaways:</p>\n        <ul>\n          <li>HTML headers structure content meaningfully.</li>\n          <li>Sectioning elements group related content.</li>\n          <li>List elements enhance readability and organization.</li>\n        </ul>\n\n        <p>For extended details, consider the following labeled attributes:</p>\n        <table border=\"1\">\n          <tr>\n            <th>Attribute</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>lang</td>\n            <td>Defines the language of the document</td>\n          </tr>\n          <tr>\n            <td>viewport</td>\n            <td>Ensures proper scaling on mobile devices</td>\n          </tr>\n          <tr>\n            <td>charset</td>\n            <td>Specifies the character encoding</td>\n          </tr>\n        </table>\n      </section>\n    </main>\n\n    <aside>\n      <h2>Related Topics</h2>\n      <p>Explore these topics to learn more about HTML and document structuring:</p>\n      <ul>\n        <li>Semantic HTML</li>\n        <li>Accessibility Standards</li>\n        <li>Responsive Design Basics</li>\n        <li>Content Optimization</li>\n      </ul>\n    </aside>\n\n    <footer>\n      <h2>Contact &amp; Credits</h2>\n      <p>For more questions, please refer to the appropriate channels within your organization. This document is created solely for demonstrating a realistic HTML layout structure.</p>\n      <p>&copy; 2023 HTML Layout Example. All rights reserved.</p>\n    </footer>\n  </body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular component must encapsulate the entire HTML structure within a template, including a header, navigation, main sections, aside, and footer.  \n\u2022 The header section must contain an H1 element with the text \"Welcome to the HTML Layout Showcase\" and a paragraph describing the page layout.  \n\u2022 The navigation section must include an H2 element \"Site Navigation\" followed by an unordered list of items, with a nested list for the \"About\" item containing \"Company\", \"Team\", and \"History\".  \n\u2022 The main section must be divided into multiple sections: one introducing the layout with an H2 \"Introduction\" and an unordered list of key layout concepts; one for \"Details and Analysis\" containing articles with H3 headings, descriptive paragraphs, a definition list with labels and values, and an ordered list outlining data points; and one for \"Additional Information\" with an H2 heading, paragraphs, an unordered list of key takeaways, and a table outlining attributes and their descriptions.  \n\u2022 The table in the \"Additional Information\" section must include a header row with \"Attribute\" and \"Description\" as well as subsequent rows for \"lang\", \"viewport\", and \"charset\".  \n\u2022 An aside section must include an H2 \"Related Topics\" and an unordered list with topics such as \"Semantic HTML\", \"Accessibility Standards\", \"Responsive Design Basics\", and \"Content Optimization\".  \n\u2022 The footer must contain an H2 \"Contact & Credits\" along with paragraphs providing contact instructions and a copyright statement.  \n\u2022 The Angular component should include proper component metadata (using the @Component decorator) with a selector and an inline template that contains this entire structure.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What are the main structural sections visible on the page?",
        "answer": "Header, Navigation, Main, Aside, and Footer"
      },
      {
        "question": "What is the text displayed in the main header (H1) of the header section?",
        "answer": "Welcome to the HTML Layout Showcase"
      },
      {
        "question": "What heading is shown at the start of the navigation area?",
        "answer": "Site Navigation"
      },
      {
        "question": "Which navigation item includes a nested list and what items are inside that nested list?",
        "answer": "About with nested items Company, Team, and History"
      },
      {
        "question": "What section headings are used in the main area?",
        "answer": "Introduction, Details and Analysis, and Additional Information"
      },
      {
        "question": "What labels appear in the table's header within the Additional Information section?",
        "answer": "Attribute and Description"
      },
      {
        "question": "How many topics are listed under the aside section and what is the heading text?",
        "answer": "4 topics under Related Topics"
      },
      {
        "question": "What is the heading text in the footer section?",
        "answer": "Contact & Credits"
      }
    ],
    "raw_output_metric": [
      "@Component",
      "selector",
      "template",
      "<h1>Welcome to the HTML Layout Showcase</h1>",
      "Site Navigation",
      "About",
      "Company",
      "Team",
      "History",
      "Introduction",
      "Details and Analysis",
      "Additional Information",
      "Attribute",
      "Description",
      "lang",
      "viewport",
      "charset",
      "Related Topics",
      "Semantic HTML",
      "Accessibility Standards",
      "Responsive Design Basics",
      "Content Optimization",
      "Contact & Credits"
    ],
    "rendering": true
  },
  {
    "task_id": "040127",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Visual Structure Example</title>\n</head>\n<body>\n<header>\n<h1>Welcome to the Sample Page</h1>\n<p>This example contains structured content to test layout, visual hierarchy, and formatted details.</p>\n</header>\n\n<section>\n<h2>Introduction</h2>\n<p>This section provides an overview of various HTML structures that organize content visibly.</p>\n<ul>\n<li>Clear headings and subheadings</li>\n<li>Structured sections and articles</li>\n<li>Descriptive lists and tables</li>\n<li>Detailed content blocks</li>\n</ul>\n</section>\n\n<section>\n<h2>User Information</h2>\n<article>\n<h3>Profile Details</h3>\n<p>Below is the user's profile information displayed in a clear and concise layout.</p>\n<dl>\n<dt>First Name:</dt>\n<dd>Alex</dd>\n<dt>Last Name:</dt>\n<dd>Smith</dd>\n<dt>Email Address:</dt>\n<dd>alex.smith@example.com</dd>\n<dt>Membership Level:</dt>\n<dd>Gold</dd>\n</dl>\n</article>\n\n<article>\n<h3>Contact Information</h3>\n<p>For further inquiries, reach out using the information below:</p>\n<dl>\n<dt>Phone:</dt>\n<dd>(555) 123-4567</dd>\n<dt>Mailing Address:</dt>\n<dd>456 Elm Street, Metropolis, USA</dd>\n</dl>\n</article>\n</section>\n\n<section>\n<h2>Activity Log</h2>\n<p>This table lists recent activities performed by the user:</p>\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n<thead>\n<tr>\n<th>Date</th>\n<th>Activity</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023-06-01</td>\n<td>Login</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>2023-06-02</td>\n<td>Profile Update</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>2023-06-03</td>\n<td>Purchase Order</td>\n<td>Pending</td>\n</tr>\n<tr>\n<td>2023-06-04</td>\n<td>Logout</td>\n<td>Success</td>\n</tr>\n</tbody>\n</table>\n</section>\n\n<section>\n<h2>Additional Resources</h2>\n<p>Here are some helpful links and resources you might find useful:</p>\n<ul>\n<li><a href=\"#\">Documentation</a></li>\n<li><a href=\"#\">Support Center</a></li>\n<li><a href=\"#\">Tutorials</a></li>\n<li><a href=\"#\">FAQ</a></li>\n</ul>\n</section>\n\n<section>\n<h2>Feedback</h2>\n<p>We value your opinion. Please let us know what you think about our services:</p>\n<form>\n<div>\n<label for=\"name\">Name:</label>\n<input type=\"text\" id=\"name\" name=\"name\">\n</div>\n<div>\n<label for=\"email\">Email:</label>\n<input type=\"email\" id=\"email\" name=\"email\">\n</div>\n<div>\n<label for=\"comments\">Comments:</label>\n<textarea id=\"comments\" name=\"comments\" rows=\"4\" cols=\"50\"></textarea>\n</div>\n<div>\n<button type=\"submit\">Submit Feedback</button>\n</div>\n</form>\n</section>\n\n<footer>\n<p>&copy; 2023 Sample Page. All rights reserved.</p>\n<p>Contact: <a href=\"mailto:info@example.com\">info@example.com</a></p>\n</footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The Angular output must include a header section containing an h1 element with the text \"Welcome to the Sample Page\" and a paragraph describing the sample page.  \n\u2022 There must be an \"Introduction\" section with an h2 heading, a descriptive paragraph, and an unordered list presenting four specific list items: \"Clear headings and subheadings\", \"Structured sections and articles\", \"Descriptive lists and tables\", and \"Detailed content blocks\".  \n\u2022 A \"User Information\" section must be present containing two articles. The first article should include an h3 heading \"Profile Details\", a paragraph, and a definition list with pairs for \"First Name\" (Alex), \"Last Name\" (Smith), \"Email Address\" (alex.smith@example.com), and \"Membership Level\" (Gold).  \n\u2022 The second article in the \"User Information\" section should contain an h3 heading \"Contact Information\", a paragraph, and a definition list with pairs for \"Phone\" ((555) 123-4567) and \"Mailing Address\" (456 Elm Street, Metropolis, USA).  \n\u2022 An \"Activity Log\" section must be included with an h2 heading, a paragraph that introduces the log, and a table. This table must have a header row with three columns labeled \"Date\", \"Activity\", and \"Status\", followed by four data rows with the provided entries:  \n\u2003\u2003\u2013 Row 1: 2023-06-01, Login, Success  \n\u2003\u2003\u2013 Row 2: 2023-06-02, Profile Update, Success  \n\u2003\u2003\u2013 Row 3: 2023-06-03, Purchase Order, Pending  \n\u2003\u2003\u2013 Row 4: 2023-06-04, Logout, Success",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text of the h1 element in the header section?",
        "answer": "Welcome to the Sample Page"
      },
      {
        "question": "How many bullet points are present in the Introduction section's unordered list?",
        "answer": "4"
      },
      {
        "question": "What heading level is used for the Introduction section title?",
        "answer": "h2"
      },
      {
        "question": "How many articles are in the User Information section?",
        "answer": "2"
      },
      {
        "question": "What is the heading text of the first article under User Information?",
        "answer": "Profile Details"
      },
      {
        "question": "How many definition list pairs are shown in the Profile Details article?",
        "answer": "4"
      },
      {
        "question": "What is the membership level listed in the Profile Details article?",
        "answer": "Gold"
      },
      {
        "question": "How many rows of activity entries are present in the Activity Log table (excluding the header row)?",
        "answer": "4"
      },
      {
        "question": "What column headers are displayed in the Activity Log table?",
        "answer": "Date, Activity, Status"
      }
    ],
    "raw_output_metric": [
      "Welcome to the Sample Page",
      "Introduction",
      "Clear headings and subheadings",
      "Structured sections and articles",
      "Descriptive lists and tables",
      "Detailed content blocks",
      "User Information",
      "Profile Details",
      "First Name",
      "Alex",
      "Last Name",
      "Smith",
      "Email Address",
      "alex.smith@example.com",
      "Membership Level",
      "Gold",
      "Contact Information",
      "Phone",
      "(555) 123-4567",
      "Mailing Address",
      "456 Elm Street, Metropolis, USA",
      "Activity Log",
      "Date",
      "Activity",
      "Status",
      "2023-06-01",
      "Login",
      "Success",
      "2023-06-02",
      "Profile Update",
      "2023-06-03",
      "Purchase Order",
      "Pending",
      "2023-06-04",
      "Logout",
      "Success",
      "Additional Resources",
      "Documentation",
      "Support Center",
      "Tutorials",
      "FAQ",
      "Feedback",
      "Name:",
      "Email:",
      "Comments:",
      "Submit Feedback",
      "2023 Sample Page. All rights reserved.",
      "info@example.com",
      "Contact:"
    ],
    "rendering": true
  },
  {
    "task_id": "040129",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following HTML code to Angular code.\n\n<code>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Structured Layout Example</title>\n  <style>\n    /* Minimal inline styling to enhance visual structure */\n    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n    header, footer { background-color: #f0f0f0; padding: 15px; }\n    header h1, footer p { margin: 0; }\n    nav { margin: 20px 0; }\n    nav h2 { font-size: 1.2em; margin-bottom: 10px; }\n    nav ul { list-style-type: none; padding: 0; margin: 0; }\n    nav ul li { display: inline-block; margin-right: 15px; }\n    nav ul li a { text-decoration: none; color: #333; padding: 5px; }\n    nav ul li a:hover { background-color: #ddd; }\n    main { display: flex; gap: 20px; }\n    section { flex: 2; }\n    aside { flex: 1; background-color: #f8f8f8; padding: 15px; }\n    article { margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #ddd; }\n    article:last-child { border-bottom: none; }\n    .article-meta { font-size: 0.8em; color: #666; }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Website Title</h1>\n    <p>A brief description of the website</p>\n  </header>\n  \n  <nav>\n    <h2>Main Navigation</h2>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">About</a></li>\n      <li><a href=\"#\">Services</a></li>\n      <li><a href=\"#\">Blog</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n  \n  <main>\n    <section>\n      <h2>Main Content Area</h2>\n      \n      <article>\n        <h3>Article Title 1</h3>\n        <div class=\"article-meta\">Posted on January 1, 2025 by Admin</div>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia, justo eu ultricies facilisis, nunc nisi consectetur enim, in tincidunt ex nulla ut nisi. Sed varius justo in libero facilisis faucibus.</p>\n        <p>Donec eget justo vel nunc lobortis efficitur. Proin at tincidunt magna. In hac habitasse platea dictumst. Quisque varius justo in libero facilisis faucibus.</p>\n        <a href=\"#\">Read more...</a>\n      </article>\n      \n      <article>\n        <h3>Article Title 2</h3>\n        <div class=\"article-meta\">Posted on January 15, 2025 by Admin</div>\n        <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante.</p>\n        <p>Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\n        <a href=\"#\">Read more...</a>\n      </article>\n    </section>\n    \n    <aside>\n      <h3>Sidebar</h3>\n      <div class=\"widget\">\n        <h4>Recent Posts</h4>\n        <ul>\n          <li><a href=\"#\">Post Title 1</a></li>\n          <li><a href=\"#\">Post Title 2</a></li>\n          <li><a href=\"#\">Post Title 3</a></li>\n          <li><a href=\"#\">Post Title 4</a></li>\n        </ul>\n      </div>\n      \n      <div class=\"widget\">\n        <h4>Categories</h4>\n        <ul>\n          <li><a href=\"#\">Category 1</a></li>\n          <li><a href=\"#\">Category 2</a></li>\n          <li><a href=\"#\">Category 3</a></li>\n        </ul>\n      </div>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2025 Website Title. All rights reserved.</p>\n    <p>\n      <a href=\"#\">Privacy Policy</a> | \n      <a href=\"#\">Terms of Service</a> | \n      <a href=\"#\">Contact Us</a>\n    </p>\n  </footer>\n</body>\n</html>\n</code>",
    "feature_requirements": "\u2022 The output must include an Angular component decorated with the Angular Component decorator containing metadata such as a selector and a template.  \n\u2022 The output\u2019s template must replicate the original content\u2019s structure, including visible header, navigation, and footer sections.  \n\u2022 The header section must visibly display the title text originally provided (for example, \u201cStructured Layout Example\u201d).  \n\u2022 The navigation section must be present with its heading and list structure that mirrors the original HTML layout.  \n\u2022 The footer section must be included and display its text content as in the initial code sample.  \n\u2022 The rendered output must reflect the semantic grouping of content (header, nav, footer) as evident from the original code.  \n\u2022 The Angular template must remove the overall HTML document scaffolding (doctype, html, head tags) and include only the internal layout elements.",
    "task_name": "Convert HTML to Angular",
    "input_type": "HTML",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What title is visibly displayed in the header section?",
        "answer": "Structured Layout Example"
      },
      {
        "question": "Which three main sections are clearly visible in the layout?",
        "answer": "Header, Navigation, Footer"
      },
      {
        "question": "Does the navigation section include both a heading and a list structure?",
        "answer": "Yes"
      },
      {
        "question": "Is the footer section present with its text content as in the original sample?",
        "answer": "Yes"
      },
      {
        "question": "Can the viewer clearly distinguish between the header, navigation, and footer sections?",
        "answer": "Yes"
      },
      {
        "question": "Does the rendered output include any of the overall document scaffolding elements such as doctype, html, or head tags?",
        "answer": "No"
      },
      {
        "question": "Is the internal layout maintained in the rendered output reflecting the semantic grouping as defined by the original content?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "@Component",
      "selector:",
      "template:",
      "Structured Layout Example",
      "<header>",
      "<nav>",
      "<ul>",
      "<li>",
      "<footer>",
      "Website Title",
      "Main Content Area",
      "Main Navigation",
      "Home",
      "About",
      "Services",
      "Blog",
      "Contact",
      "Article Title 1",
      "Posted on January 1, 2025 by Admin",
      "Article Title 2",
      "Posted on January 15, 2025 by Admin",
      "Sidebar",
      "Recent Posts",
      "Post Title 1",
      "Post Title 2",
      "Post Title 3",
      "Post Title 4",
      "Categories",
      "Category 1",
      "Category 2",
      "Category 3",
      "2025 Website Title. All rights reserved.",
      "Privacy Policy",
      "Terms of Service",
      "Contact Us"
    ],
    "rendering": true
  },
  {
    "task_id": "070101",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Title: Markdown Visual Conversion Task\n\n## Overview\n\nThis is a sample Markdown document designed to test the structural layout, visual hierarchy, and formatted content. It includes multiple sections: textual content, lists, code blocks, blockquotes, and tables.\n\n### Table of Contents\n1. Introduction\n2. Features & Benefits\n3. Data Samples\n4. Code Snippets\n5. Detailed Sections\n6. Conclusion\n\n---\n\n## 1. Introduction\n\nMarkdown is a lightweight markup language with plain text formatting syntax. This document demonstrates a well-structured layout with visible content formatting elements:\n\n- Title & Headings\n- Bulleted & Numbered Lists\n- Tables\n- Code Blocks\n- Blockquotes\n\n### Document Structure\n\nBelow is the breakdown of the document sections:\n- Section A: The basics of Markdown.\n- Section B: Visual conversion elements.\n- Section C: Sample components.\n\n---\n\n## 2. Features & Benefits\n\nMarkdown supports a variety of formatting options.\n\n### Key Features:\n- **Easy to Read/Write**: Markdown is human-readable and easy to write.\n- **Portable**: The output is compatible with different platforms.\n- **Structured**: Helps to break content into logical sections.\n\n### Benefits:\n- Quick Learning Curve\n- Clear Visual Hierarchy\n- Straightforward conversion to HTML or PDF\n\n#### Advantages of Using Markdown:\n1. Minimal formatting syntax.\n2. Quick editing process.\n3. Universal acceptance across platforms.\n\n**Important Values:**\n- Status: Active\n- Version: 1.0.0\n- Date: April 27, 2023\n\n---\n\n## 3. Data Samples\n\nBelow is an example of a data table representing sample metrics:\n\n| Metric        | Value  | Description                     |\n|---------------|--------|---------------------------------|\n| Visitors      | 1500   | Unique visitors for the month   |\n| Bounce Rate   | 35%    | Percentage of visitors bouncing |\n| Conversion    | 5%     | Conversion rate                 |\n| Revenue       | $20K   | Total monthly revenue           |\n\nAdditionally, here's a second table for extended data view:\n\n| Parameter    | Low   | Medium  | High    |\n| ------------ | ----- | ------- | ------- |\n| Latency      | 100ms | 200ms   | 300ms   |\n| Bandwidth    | 10MB  | 20MB    | 30MB    |\n| Throughput   | 50ops | 100ops  | 150ops  |\n\n---\n\n## 4. Code Snippets\n\nThe following sections contain code examples in different languages.\n\n### Example of a Python Code Block:\n\n```python\ndef greet(name):\n    print(f\"Hello, {name}!\")\n    \nif __name__ == \"__main__\":\n    people = [\"Alice\", \"Bob\", \"Charlie\"]\n    for person in people:\n        greet(person)\n```\n\n### Bash Script Example:\n\n```bash\n#!/bin/bash\necho \"Starting the process...\"\nfor i in {1..5}\ndo\n    echo \"Iteration: $i\"\ndone\necho \"Process Completed.\"\n```\n\n---\n\n## 5. Detailed Sections\n\n### A. Markdown Tips\n\n> \"Markdown is not a replacement for HTML, but a simplified way to write it.\"  \n> -- Markdown Enthusiast\n\n#### Formatting Examples:\n\n- **Bold Text**: Use double asterisks (**) or underscores (__).\n- *Italic Text*: Use single asterisks (*) or underscores (_).\n- `Inline Code`: Use backticks for inline code.\n- ~~Strikethrough~~: Wrap text with double tildes (~~).\n\n### B. Nested Lists\n\nBoth ordered and unordered lists can be nested for detailed explanations:\n\n1. **Main Topic**\n   - Subtopic A\n     - Detail 1\n     - Detail 2\n   - Subtopic B\n     1. Step One\n     2. Step Two\n        - Note: Follow the sequential order.\n2. **Another Main Topic**\n   - Points:\n     - First Point\n     - Second Point\n\n### C. Action Items\n\nTo wrap up, here are some action items:\n- [ ] Review the document's clarity.\n- [ ] Validate formatting across different devices.\n- [ ] Finalize the visual layout.\n- [ ] Submit feedback\n<code>",
    "feature_requirements": "\u2022 A visible header displaying \"Project Title: Markdown Visual Conversion Task\" as the main title.  \n\u2022 Multiple visible section headings including \"Overview\", \"Table of Contents\", \"1. Introduction\", \"2. Features & Benefits\", \"3. Data Samples\", \"4. Code Snippets\", \"5. Detailed Sections\", and \"Conclusion\".  \n\u2022 A rendered table of contents listing the numbered sections in sequential order (1 to 6), matching the original order.  \n\u2022 Properly displayed lists including both bulleted lists (e.g., features, action items) and numbered lists that reflect the content hierarchy.  \n\u2022 Two distinct rendered tables displaying data metrics and extended parameters, with clear headers and rows exactly matching the input values.  \n\u2022 Two clearly formatted code blocks: one showing Python code and another showing a Bash script, with visible indentation and content formatting that differentiates them from plain text.  \n\u2022 A visibly rendered blockquote containing the quoted text and attribution, mirroring the original markdown blockquote style.  \n\u2022 Clearly distinguished text formatting examples within the content, such as bold text for \"Bold Text\", italicized text for \"Italic Text\", inline code snippets, and strikethrough text indicators.  \n\u2022 A section with nested list structures (ordered and unordered), including subtopics and details that reflect the same hierarchy as the markdown source.  \n\u2022 A list of action items rendered as checklist-like items, verifying that each item (e.g., reviewing document clarity, validating formatting) is visibly presented as a distinct entry.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header?",
        "answer": "Project Title: Markdown Visual Conversion Task"
      },
      {
        "question": "How many main section headings are visibly present?",
        "answer": "8"
      },
      {
        "question": "Which section headings are included in the document?",
        "answer": "Overview, Table of Contents, 1. Introduction, 2. Features & Benefits, 3. Data Samples, 4. Code Snippets, 5. Detailed Sections, Conclusion"
      },
      {
        "question": "What numbered sections appear in the rendered table of contents?",
        "answer": "1. Introduction, 2. Features & Benefits, 3. Data Samples, 4. Code Snippets, 5. Detailed Sections, 6. Conclusion"
      },
      {
        "question": "How many distinct code blocks are rendered and what languages do they represent?",
        "answer": "2 code blocks: one in Python and one in Bash"
      },
      {
        "question": "Are two tables shown in the document and what do they represent?",
        "answer": "Yes, one displays data metrics and the other displays extended parameters"
      },
      {
        "question": "Is there a blockquote present in the content?",
        "answer": "Yes, with quoted text and attribution"
      },
      {
        "question": "Which text formatting examples are visibly demonstrated?",
        "answer": "Bold text ('Bold Text'), italic text ('Italic Text'), inline code snippets, and strikethrough indicators"
      }
    ],
    "raw_output_metric": [
      "Project Title: Markdown Visual Conversion Task",
      "Overview",
      "Table of Contents",
      "1. Introduction",
      "2. Features & Benefits",
      "3. Data Samples",
      "4. Code Snippets",
      "5. Detailed Sections",
      "Conclusion",
      "```python",
      "```bash",
      ">",
      "Bold Text",
      "Italic Text",
      "inline code",
      "strikethrough",
      "data metrics",
      "extended parameters",
      "reviewing document clarity",
      "validating formatting"
    ],
    "rendering": true
  },
  {
    "task_id": "070107",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Documentation for \"Amazing Project\"\n\nWelcome to the **Amazing Project** documentation. This guide covers the overall architecture, detailed modules, and usage examples.\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n3. [Usage](#usage)\n4. [Modules](#modules)\n   - Module A: Data Processor\n   - Module B: Report Generator\n5. [Configuration](#configuration)\n6. [Contributing](#contributing)\n7. [License](#license)\n8. [Acknowledgements](#acknowledgements)\n\n---\n\n## Introduction\n\nThe *Amazing Project* is designed to solve complex problems with simple, maintainable code. This project emphasizes clear structure, well-defined modules, and extensive documentation that guides users through setup and usage.\n\n### Key Features\n\n- **User-friendly** interface and commands.\n- **Robust** processing pipeline.\n- **Scalable** and **extensible** modular design.\n\n---\n\n## Installation\n\nFollow these steps to install the project:\n\n1. Clone the repository:\n   ```\n   git clone project.git\n   ```\n2. Navigate to the project directory:\n   ```\n   cd amazing-project\n   ```\n3. Install dependencies:\n   ```\n   npm install\n   ```\n\n*Note: Ensure that your environment has Node.js version 14 or higher installed.*\n\n---\n\n## Usage\n\nAfter installation, start the application by executing:\n\n```\nnpm start\n```\n\n### Command Line Options\n\n- `--help` : Display help information.\n- `--version` : Show the current version.\n- `--config` : Specify a path to a configuration file.\n\n#### Example Usage\n\n- Run with a specific configuration file:\n  ```\n  npm start -- --config=./config/custom-config.json\n  ```\n\n---\n\n## Modules\n\nThe project is divided into several core modules:\n\n### Module A: Data Processor\n\n**Purpose:** Handles data ingestion, validation, and transformation.\n\n**Main Functions:**\n\n- `loadData()`: Loads raw data into the system.\n- `processData()`: Cleans and transforms data into a structured format.\n- `exportData()`: Outputs processed data for further consumption.\n\n---\n\n### Module B: Report Generator\n\n**Purpose:** Creates detailed and summary reports based on processed data.\n\n**Main Functions:**\n\n- `generateSummary()`: Produces a concise report summary.\n- `createVisualReport()`: Creates visual representations of data.\n- `exportReport()`: Saves the report in various formats (PDF, Excel).\n\n#### Module B Workflow\n\n1. Ensure data is available from Module A.\n2. Execute summary generation.\n3. Render visual graphs.\n4. Export the final report.\n\n---\n\n## Configuration\n\nThe project uses a JSON configuration file to manage settings. Adjust the configuration to suit your environment.\n\n### Sample Configuration (config.json)\n\n```\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 8080\n  },\n  \"database\": {\n    \"user\": \"admin\",\n    \"password\": \"password\",\n    \"name\": \"amazing_db\"\n  },\n  \"features\": {\n    \"enableLogging\": true,\n    \"debugMode\": false\n  }\n}\n```\n\n**Key Configuration Parameters:**\n- `server.host`: Server hostname (default: localhost)\n- `server.port`: Server port number (default: 3000)\n- `database.host`: Database server address\n- `features.enableCache`: Toggle caching functionality\n- `security.enableSSL`: Enable/disable SSL encryption\n\n## Contributing\nWe welcome contributions! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Acknowledgements\n- Thanks to all contributors\n- Built with Angular\n- Inspired by best practices in modern web development",
    "feature_requirements": "\u2022 The Angular output must include a main header displaying the project documentation title (\"Project Documentation for 'Amazing Project'\") as a prominent, primary heading.  \n\u2022 It must render a Table of Contents section that lists all major document sections (Introduction, Installation, Usage, Modules with Module A and Module B details, Configuration, Contributing, License, and Acknowledgements) in a clearly identifiable list format.  \n\u2022 The component\u2019s template should contain separate sections with respective headers for Introduction, Installation, Usage, Modules, and Configuration, each followed by corresponding descriptive text.  \n\u2022 Installation and Usage sections must include code block renderings for commands (e.g., git clone command, npm install, npm start, and example command with configuration file) in a monospaced or preformatted text style.  \n\u2022 The Angular output must include detailed subsections within the Modules section that are labeled as \"Module A: Data Processor\" and \"Module B: Report Generator,\" each listing their purpose and associated function names (such as loadData(), processData(), exportData(), generateSummary(), createVisualReport(), exportReport()) in a clearly separated list.  \n\u2022 The content must include a dedicated Configuration section that displays a JSON code block sample (for configuration settings like server host, port, database credentials, and feature toggles) along with annotations or labels identifying key values.  \n\u2022 All sections (headings, lists, code blocks) must be visually discernible when rendered, ensuring each content block (e.g., text paragraphs, bullet lists, and code examples) is verifiable based on its presence and labeled content in the Angular-generated output.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is displayed as the main header title?",
        "answer": "Project Documentation for 'Amazing Project'"
      },
      {
        "question": "Which sections are listed in the Table of Contents?",
        "answer": "Introduction, Installation, Usage, Modules, Configuration, Contributing, License, Acknowledgements"
      },
      {
        "question": "How many major sections are listed in the Table of Contents?",
        "answer": "8"
      },
      {
        "question": "Which module details are shown under the Modules section?",
        "answer": "Module A: Data Processor, Module B: Report Generator"
      },
      {
        "question": "What function names are associated with Module A?",
        "answer": "loadData(), processData(), exportData()"
      },
      {
        "question": "What function names are associated with Module B?",
        "answer": "generateSummary(), createVisualReport(), exportReport()"
      },
      {
        "question": "Which sections display code block renderings for commands?",
        "answer": "Installation and Usage"
      },
      {
        "question": "What is shown in the Configuration section?",
        "answer": "A JSON code block sample with keys for server host, port, database credentials, and feature toggles"
      }
    ],
    "raw_output_metric": [
      "Project Documentation for 'Amazing Project'",
      "Table of Contents",
      "Introduction",
      "Installation",
      "Usage",
      "Modules",
      "Configuration",
      "Contributing",
      "License",
      "Acknowledgements",
      "Module A: Data Processor",
      "Module B: Report Generator",
      "loadData()",
      "processData()",
      "exportData()",
      "generateSummary()",
      "createVisualReport()",
      "exportReport()",
      "git clone",
      "npm install",
      "npm start",
      "example command with configuration file",
      "server host",
      "port",
      "database credentials",
      "feature toggles"
    ],
    "rendering": true
  },
  {
    "task_id": "070108",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Documentation\n\n## Introduction\n\nWelcome to the Project Documentation. This markdown file is structured to test visual conversion tasks with emphasis on visible structure, layout, and formatted content. It includes various elements such as:\n\n- Headings of different levels\n- Lists (ordered and unordered)\n- Code snippets\n- Tables\n- Blockquotes\n- Labeled data sections\n\nLet's explore each section in detail.\n\n---\n\n## Section 1: Overview\n\nThe following sections provide a comprehensive overview of the project. The layout is important to ensure proper visual hierarchy and readability.\n\n### 1.1 Project Purpose\n\n- Enhance user interface design.\n- Validate structural layout conversion.\n- Test markdown rendering environments.\n\n### 1.2 Key Considerations\n\n1. **Usability**\n   - Clear visual hierarchy\n   - Readable text sections\n2. **Structure**\n   - Consistent headings\n   - Properly nested lists\n3. **Maintenance**\n   - Easy to update and reorganize\n   - Plain text format\n\n> NOTE: This documentation is designed solely for demonstration purposes.\n\n---\n\n## Section 2: Features and Capabilities\n\n### 2.1 Visual Elements\n\n- **Headings:** Different levels from H1 to H6.\n- **Lists:** Both ordered and unordered with nested items.\n- **Tables:** Organized data representation.\n- **Code Blocks:** Preformatted text for code examples.\n\n### 2.2 Code Display Example\n\nBelow is a sample function that demonstrates standard logic flow:\n\n```\ndef greet(name):\n    if name:\n        return \"Hello, \" + name + \"!\"\n    else:\n        return \"Hello, World!\"\n\n# Example usage\nprint(greet(\"Alice\"))\n```\n\n### 2.3 Data Examples\n\n#### User Profile Data\n\n- Name: Jane Doe\n- Age: 32\n- Occupation: Software Engineer\n- Location: Remote\n\n#### System Metrics\n\n- CPU Usage: 55%\n- Memory Usage: 68%\n- Disk Space: 70%\n\n---\n\n## Section 3: Structured Lists and Tables\n\n### 3.1 Nested Lists\n\n- Item A\n  - Subitem A1\n  - Subitem A2\n    - Detail A2a\n    - Detail A2b\n- Item B\n  - Subitem B1\n- Item C\n\n### 3.2 Data Table\n\nBelow is a table listing user statistics:\n\n| User ID | Username  | Role        | Status  |\n|---------|-----------|-------------|---------|\n| 101     | johndoe   | Administrator | Active |\n| 102     | annasmith | Editor       | Inactive |\n| 103     | mikelee   | Subscriber   | Active |\n| 104     | emilyj    | Contributor  | Active |\n\n### 3.3 Additional Data Table\n\nAn overview of project metrics:\n\n| Metric           | Value      |\n|------------------|------------|\n| Total Users      | 250        |\n| Active Sessions  | 120        |\n| Errors Logged    | 15         |\n| Uptime (days)    | 99         |\n\n---\n\n## Section 4: Code Examples and Explanations\n\n### 4.1 Function Example\n\nBelow is another sample function written in pseudocode to illustrate nested logic:\n\n```\nfunction calculateDiscount(price, discountRate) {\n    if (price > 100) {\n        return price * (1 - discountRate);\n    } else {\n        return price;\n    }\n}\n\n// Usage Example\nvar finalPrice = calculateDiscount(150, 0.1);\nconsole.log(\"Final Price: \" + finalPrice);\n```\n\n### 4.2 Data Structure Example\n\nThe following JSON snippet represents a configuration file layout:\n\n```\n{\n    \"server\": {\n        \"host\": \"localhost\",\n        \"port\": 8080\n    },\n    \"database\": {\n        \"type\": \"sql\",\n        \"username\": \"db_user\",\n        \"password\": \"secure_pass\"\n    },\n    \"features\": {\n        \"logging\": true,\n        \"debug\": false\n    }\n}\n```\n\n---\n\n## Section 5: Summary and Conclusion\n\n### 5.1 Summary of Key Points\n\n- The document demonstrates a comprehensive Markdown layout.\n- Structured with headings, lists, tables, and code blocks.\n- Intended for testing visual conversion and formatting consistency.\n\n### 5.2 Final Thoughts\n\nThis markdown document serves as a standalone test case for:\n- Structural layout validation.\n- Visual hierarchy verification.\n- Ensuring correct formatting across different markdown renderers.\n\nThank you for taking the time to review this document.\n\n---\n\n## Appendix: Notes and Best Practices\n\n- Keep indentation consistent in code blocks.\n- Always check nesting levels in lists and sub-sections.\n- Validate tables for proper alignment across different viewers.\n- Review documentation periodically to ensure compliance with formatting standards.\n\nEnd of Document.\n</code>",
    "feature_requirements": "\u2022 The output must visually display a hierarchy of headings, including at least one top-level heading (\"Project Documentation\") and multiple subheadings for each section and subsection.  \n\u2022 The converted output must include clearly visible ordered and unordered lists, including nested list items representing detailed points under broader categories.  \n\u2022 At least three code blocks must be rendered as clearly distinguishable sections: one with Python code, one with pseudocode for a function, and one representing a JSON snippet.  \n\u2022 Two distinct tables must be present: one table listing user statistics (with columns like \"User ID\", \"Username\", etc.) and another table showing project metrics (with columns like \"Metric\" and \"Value\").  \n\u2022 A blockquote element containing a note (e.g., \"NOTE: This documentation is designed solely for demonstration purposes.\") must be visibly rendered.  \n\u2022 Visual separation elements (such as horizontal rules) must be present to clearly delineate different sections of the document.  \n\u2022 Structured sections must be clearly identifiable with labeled content areas, such as \"Section 1: Overview,\" \"Section 2: Features and Capabilities,\" \"Section 3: Structured Lists and Tables,\" etc.  \n\u2022 Text groups providing descriptive details (e.g., project introduction, user data, and system metrics) must be visibly separate and clearly formatted to emphasize content hierarchy.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the top-level heading displayed at the top of the document?",
        "answer": "Project Documentation"
      },
      {
        "question": "Are multiple subheadings used to label sections and subsections (such as 'Section 1: Overview', 'Section 2: Features and Capabilities', etc.)?",
        "answer": "Yes"
      },
      {
        "question": "Does the document include both ordered and unordered lists with nested items?",
        "answer": "Yes"
      },
      {
        "question": "How many distinct code blocks are present and what are their types?",
        "answer": "Three: one Python code block, one pseudocode block, and one JSON snippet block"
      },
      {
        "question": "What tables can be found, and what are two of the key column headings from each table?",
        "answer": "A user statistics table with columns like 'User ID' and 'Username', and a project metrics table with columns like 'Metric' and 'Value'"
      },
      {
        "question": "What text is shown inside the blockquote element?",
        "answer": "NOTE: This documentation is designed solely for demonstration purposes."
      },
      {
        "question": "Are horizontal rules used to visually separate different sections in the document?",
        "answer": "Yes"
      },
      {
        "question": "Are distinct descriptive text groups (for project introduction, user data, and system metrics) clearly formatted to show content hierarchy?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "Project Documentation",
      "Section 1: Overview",
      "Section 2: Features and Capabilities",
      "Section 3: Structured Lists and Tables",
      "```python",
      "```pseudocode",
      "```json",
      "User ID",
      "Username",
      "Metric",
      "Value",
      "NOTE: This documentation is designed solely for demonstration purposes.",
      "<hr>",
      "1.",
      "-"
    ],
    "rendering": true
  },
  {
    "task_id": "070109",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following Markdown code to Angular code.\n\n<code>\n# Project Documentation\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Features](#features)\n3. [Installation](#installation)\n4. [Usage](#usage)\n5. [Configuration](#configuration)\n6. [Examples](#examples)\n7. [FAQ](#faq)\n8. [Changelog](#changelog)\n9. [License](#license)\n\n---\n\n## Introduction\nWelcome to the **Project Documentation**. This document is structured to describe the various aspects of our project. Our goal is to provide thorough details on the project\u2019s layout, functionalities, and usage. This documentation is ideal for both beginners and experienced users.\n\n> \"Documentation is a love letter that you write to your future self.\" \u2013 Anonymous\n\n### Project Details\n- **Project Name:** ExampleProject\n- **Version:** 2.1.0\n- **Release Date:** 2023-10-15\n- **Status:** In Active Development\n\n---\n\n## Features\n- **User-Friendly Interface:** Clear and intuitive layout for simple navigation.\n- **Extensible:** Modular design with multiple plugins for enhanced functionality.\n- **Cross-Platform:** Works seamlessly across different platforms.\n- **Performance Optimized:** Enhanced speed and reduced load times.\n\n### Detailed Feature Breakdown\n1. **Interface**\n   - Clean design with clear section divisions.\n   - Responsive layout with mobile and desktop compatibility.\n2. **Plugins**\n   - Easily add or remove plugins.\n   - Supports third-party integrations.\n3. **Customization**\n   - Modify color themes and fonts.\n   - Adjust layout configurations via simple JSON settings.\n4. **Security**\n   - Regular security updates.\n   - End-to-end encryption for sensitive data.\n\n---\n\n## Installation\nFollow the steps below to install ExampleProject:\n\n1. **Prerequisites**\n   - Python 3.7 or higher\n   - Node.js 14.x or higher\n   - Git\n\n2. **Clone the Repository**\n   ```\n   git clone https://github.com/example/exampleproject.git\n   cd exampleproject\n   ```\n\n3. **Install Dependencies**\n   ```\n   pip install -r requirements.txt\n   npm install\n   ```\n\n4. **Setup Environment**\n   - Copy the sample configuration file:\n     ```\n     cp config.example.json config.json\n     ```\n   - Edit `config.json` to suit your environment.\n\n5. **Run the Application**\n   ```\n   python main.py\n   ```\n\n---\n\n## Usage\n### Basic Commands:\n- **Start:** `python main.py`\n- **Test:** `pytest --maxfail=1 --disable-warnings -q`\n- **Build:** `npm run build`\n\n### Command Line Options\n| Option        | Description                           | Example              |\n| ------------- | ------------------------------------- | -------------------- |\n| -v, --version | Display version information           | `python main.py -v`  |\n| -d, --debug   | Run in debug mode                     | `python main.py -d`  |\n| -c, --config  | Specify a custom config file          | `python main.py -c custom_config.json` |\n\n### Configuration Variables:\n- **server.port:** The port number for the server (default: 8080)\n- **server.host:** The host address (default: \"localhost\")\n- **logging.level:** The logging detail level (default: \"INFO\")\n- **feature.toggle:** Toggle advanced features (default: false)\n\n---\n\n## Configuration\nBelow is an example configuration file, formatted as JSON code embedded in Markdown (for illustration):\n\n```json\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 8080\n  },\n  \"database\": {\n    \"engine\": \"sqlite\",\n    \"name\": \"example.db\"\n  },\n  \"logging\": {\n    \"level\": \"INFO\",\n    \"file\": \"logs/app.log\"\n  },\n  \"feature\": {\n    \"toggle\": false,\n    \"plugins\": [\"pluginA\", \"pluginB\"]\n  }\n}\n```\n\n---\n\n## Examples\n### Code Snippet Example in Python\n```python\ndef greet_user(name):\n    \"\"\"\n    Greets the user with a personalized message.\n    \"\"\"\n    message = f\"Hello, {name}! Welcome to ExampleProject.\"\n    print(message)\n\nif __name__ == \"__main__\":\n    greet_user(\"Developer\")\n```\n\n### Markdown Table Example\n| Module       | Description                   | Status      |\n| ------------ | ----------------------------- | ----------- |\n| Interface    | Main user interface module    | Complete    |\n| Authentication | Handles user login processes | In Progress |\n| Database     | Database connection handlers  | Complete    |\n| API          | RESTful API endpoints         | Planned     |\n\n---\n\n## FAQ\n**Q: How do I report a bug?**  \nA: You can use the GitHub issues page by creating a new issue detailing the bug.\n\n**Q: Where can I find more plugins?**  \nA: More plugins will be reviewed and added via the official repository.\n\n**Q: Is ExampleProject open source?**  \nA: Yes, the project is licensed under the MIT License.\n\n---\n\n## Changelog\n### Version 2.1.0\n- Enhanced user interface.\n- Numerous bug fixes and performance improvements.\n- Added new configuration options to further customize the experience.\n\n### Version 2.0.0\n- Major release with a reworked plugin system.\n- Introduced new API routes.\n- Updated dependency libraries to their latest versions.\n\n---\n\n## License\nExampleProject is released under the MIT License.\n\n> MIT License  \n> Copyright...\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software...\n\n---\n\n*End of Document*\n</code>",
    "feature_requirements": "\u2022 The output must display a main header titled \u201cProject Documentation\u201d clearly rendered as the primary heading.  \n\u2022 There must be a visible Table of Contents section that lists each of the nine sections (Introduction, Features, Installation, Usage, Configuration, Examples, FAQ, Changelog, License) as distinct list items.  \n\u2022 The \u201cIntroduction\u201d section should include a secondary heading, a descriptive paragraph with bold text for \u201cProject Documentation,\u201d a blockquote containing the project quote, and a sub-section (e.g., \u201cProject Details\u201d) listing key details like Project Name, Version, Release Date, and Status.  \n\u2022 The \u201cFeatures\u201d section must include a bullet list of high-level features (User-Friendly Interface, Extensible, Cross-Platform, Performance Optimized) along with a detailed, nested numbered list that breaks down aspects like Interface, Plugins, Customization, and Security.  \n\u2022 The \u201cInstallation\u201d section is required to show a sequential list of installation steps including prerequisites, repository cloning instructions, dependency installation commands, environment setup commands, and application run instructions, with appropriate code blocks for terminal commands.  \n\u2022 The \u201cUsage\u201d section must detail basic commands and include a table that outlines command line options (columns for Option, Description, and Example) as well as a list of configuration variables with their default values.  \n\u2022 A dedicated \u201cConfiguration\u201d section must render a code block visually displaying a JSON formatted example configuration file with keys for server, database, logging, and feature settings.  \n\u2022 The \u201cExamples\u201d section should incorporate at least two examples: a code snippet example in Python showing a greeting function and a Markdown-style table example with modules, descriptions, and statuses.  \n\u2022 The \u201cFAQ\u201d section must include a set of questions and answers formatted in a Q&A style presentation.  \n\u2022 The \u201cChangelog\u201d and \u201cLicense\u201d sections should both be clearly separated, with the Changelog showcasing version details and updates, and the License section containing text that outlines the MIT License terms.",
    "task_name": "Convert Markdown to Angular",
    "input_type": "Markdown",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text of the main header?",
        "answer": "Project Documentation"
      },
      {
        "question": "How many sections are listed in the Table of Contents?",
        "answer": "9"
      },
      {
        "question": "Which sections are included in the Table of Contents?",
        "answer": "Introduction, Features, Installation, Usage, Configuration, Examples, FAQ, Changelog, License"
      },
      {
        "question": "What bold text is included in the descriptive paragraph within the Introduction section?",
        "answer": "Project Documentation"
      },
      {
        "question": "How many key details are listed in the Introduction sub-section (Project Details)?",
        "answer": "4"
      },
      {
        "question": "How many high-level features are listed in the Features section bullet list?",
        "answer": "4"
      },
      {
        "question": "Is there a sequential list of installation steps in the Installation section that includes code blocks for terminal commands?",
        "answer": "Yes"
      },
      {
        "question": "Does the Examples section include both a Python code snippet and a Markdown-style table example?",
        "answer": "Yes"
      }
    ],
    "raw_output_metric": [
      "Project Documentation",
      "Table of Contents",
      "Introduction",
      "Features",
      "Installation",
      "Usage",
      "Configuration",
      "Examples",
      "FAQ",
      "Changelog",
      "License",
      "Project Details",
      "Project Name",
      "Version",
      "Release Date",
      "Status",
      "User-Friendly Interface",
      "Extensible",
      "Cross-Platform",
      "Performance Optimized",
      "Interface",
      "Plugins",
      "Customization",
      "Security",
      "prerequisites",
      "repository cloning",
      "dependency installation",
      "environment setup",
      "application run",
      "Option",
      "Description",
      "Example",
      "JSON",
      "server",
      "database",
      "logging",
      "feature settings",
      "Python",
      "greeting function",
      "Markdown",
      "modules",
      "descriptions",
      "statuses",
      "project quote",
      "MIT License"
    ],
    "rendering": true
  },
  {
    "task_id": "110100",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following React code to Angular code.\n\n<code>\nimport React from 'react';\n\nfunction Header() {\n  return (\n    <header style={{ borderBottom: '2px solid #ccc', paddingBottom: '10px', marginBottom: '20px' }}>\n      <h1 style={{ fontSize: '2rem', margin: '0' }}>My React Layout</h1>\n      <nav>\n        <ul style={{ listStyleType: 'none', padding: 0, display: 'flex', gap: '15px' }}>\n          <li>Home</li>\n          <li>About</li>\n          <li>Services</li>\n          <li>Contact</li>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nfunction Section({ title, children }) {\n  return (\n    <section style={{ marginBottom: '30px' }}>\n      <h2 style={{ borderBottom: '1px solid #ddd', paddingBottom: '5px' }}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nfunction FeatureList({ features }) {\n  return (\n    <ul style={{ paddingLeft: '20px' }}>\n      {features.map((feature, index) => (\n        <li key={index} style={{ marginBottom: '5px' }}>\n          <strong>{feature.label}:</strong> {feature.value}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction QuickFacts() {\n  return (\n    <dl>\n      <dt style={{ fontWeight: 'bold' }}>Version</dt>\n      <dd>1.0.0</dd>\n      <dt style={{ fontWeight: 'bold' }}>Release Date</dt>\n      <dd>2023-10-01</dd>\n      <dt style={{ fontWeight: 'bold' }}>License</dt>\n      <dd>MIT</dd>\n    </dl>\n  );\n}\n\nfunction ProcessSteps({ steps }) {\n  return (\n    <ol>\n      {steps.map((step, index) => (\n        <li key={index} style={{ marginBottom: '8px' }}>\n          <span style={{ fontWeight: 'bold' }}>{step.step}:</span> {step.description}\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nfunction App() {\n  const features = [\n    { label: 'Responsive Layout', value: 'Adapts to various screen sizes' },\n    { label: 'Accessibility', value: 'Keyboard and screen reader support' },\n    { label: 'SEO Friendly', value: 'Optimized for search engines' },\n    { label: 'Performance', value: 'Fast and efficient rendering' },\n  ];\n\n  const steps = [\n    { step: 'Step 1', description: 'Initialize the application state' },\n    { step: 'Step 2', description: 'Render the header and navigation' },\n    { step: 'Step 3', description: 'Display main content sections' },\n    { step: 'Step 4', description: 'Show quick facts and footer' },\n  ];\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', margin: '0 auto', maxWidth: '800px', padding: '20px' }}>\n      <Header />\n      <main>\n        <Section title=\"Introduction\">\n          <p>\n            Welcome to our React demo page. This page is structured to showcase a comprehensive layout using React components without any external assets.\n          </p>\n        </Section>\n        <Section title=\"Core Features\">\n          <FeatureList features={features} />\n        </Section>\n        <Section title=\"Process Overview\">\n          <ProcessSteps steps={steps} />\n        </Section>\n        <Section title=\"Detailed Explanation\">\n          <article style={{ marginBottom: '20px' }}>\n            <h3>Subsection: Layout Details</h3>\n            <p>\n              The page is divided into several sections. Each section uses headings, paragraphs, lists, and definition lists to organize content clearly.\n            </p>\n          </article>\n          <article>\n            <h3>Subsection: Technical Specifications</h3>\n            <p>\n              The implementation is done using functional React components. Styles are kept inline to ensure that the page remains standalone and self-contained.\n            </p>\n            <ul style={{ paddingLeft: '20px' }}>\n              <li>Use of semantic HTML elements</li>\n              <li>Clear division of content areas</li>\n              <li>Consistent styling without external dependencies</li>\n            </ul>\n          </article>\n        </Section>\n      </main>\n      <aside style={{ background: '#f9f9f9', padding: '15px', marginTop: '20px' }}>\n        <h2>Quick Facts</h2>\n        <QuickFacts />\n      </aside>\n      <footer style={{ borderTop: '2px solid #ccc', marginTop: '30px', paddingTop: '10px' }}>\n        <Section title=\"Footer\">\n          <p>\n            &copy; 2023 My React Layout. All rights reserved. This is a demonstration of a complete, self-contained React page for static content rendering.\n          </p>\n        </Section>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n</code>",
    "feature_requirements": "\u2022 A header element containing a level\u20111 heading with the text \"My React Layout\" and an adjacent navigation list that displays four text items: \"Home\", \"About\", \"Services\", and \"Contact\".  \n\u2022 A main container area structured with multiple sections, each clearly labeled by a level\u20112 heading that represents the section title.  \n\u2022 An \"Introduction\" section that includes a paragraph of descriptive text welcoming the user to the demo page.  \n\u2022 A \"Core Features\" section that presents an unordered list where each item shows a feature label (e.g., \"Responsive Layout\", \"Accessibility\", \"SEO Friendly\", \"Performance\") followed by its corresponding description.  \n\u2022 A \"Process Overview\" section that contains an ordered list where each ordered item represents a step, displaying a bolded step identifier (e.g., \"Step 1\") followed by a descriptive text for each step.  \n\u2022 A \"Detailed Explanation\" section composed of two article elements, each with a subheading: one for \"Subsection: Layout Details\" with an accompanying paragraph, and another for \"Subsection: Technical Specifications\" including a paragraph plus an unordered list outlining technical points (\"Use of semantic HTML elements\", \"Clear division of content areas\", \"Consistent styling without external dependencies\").  \n\u2022 An aside element that includes a level\u20112 heading titled \"Quick Facts\" and a definition list detailing key-value pairs: one set with \"Version\" and \"1.0.0\", another with \"Release Date\" and \"2023-10-01\", and a final pair with \"License\" and \"MIT\".  \n\u2022 A footer element that includes a section titled \"Footer\", which contains a paragraph with copyright information and a statement about the demonstration nature of the page.",
    "task_name": "Convert React to Angular",
    "input_type": "React",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text in the level\u20111 heading of the header?",
        "answer": "My React Layout"
      },
      {
        "question": "What are the navigation items displayed in the header?",
        "answer": "Home, About, Services, Contact"
      },
      {
        "question": "Which section titles are visible as level\u20112 headings in the main container?",
        "answer": "Introduction, Core Features, Process Overview, Detailed Explanation"
      },
      {
        "question": "What type of list is used in the Core Features section and what does it display?",
        "answer": "An unordered list showing each feature label with its corresponding description"
      },
      {
        "question": "Are the step identifiers in the Process Overview section bolded?",
        "answer": "Yes"
      },
      {
        "question": "What are the subheadings in the Detailed Explanation section's articles?",
        "answer": "Subsection: Layout Details and Subsection: Technical Specifications"
      },
      {
        "question": "What technical points are listed under the Subsection: Technical Specifications?",
        "answer": "Use of semantic HTML elements, Clear division of content areas, Consistent styling without external dependencies"
      },
      {
        "question": "What key-value pairs are detailed in the Quick Facts aside section?",
        "answer": "Version: 1.0.0, Release Date: 2023-10-01, License: MIT"
      },
      {
        "question": "What information does the footer section contain?",
        "answer": "A paragraph with copyright information and a statement about the page being a demonstration"
      }
    ],
    "raw_output_metric": [
      "My React Layout",
      "Home",
      "About",
      "Services",
      "Contact",
      "Introduction",
      "Core Features",
      "Responsive Layout",
      "Accessibility",
      "SEO Friendly",
      "Performance",
      "Process Overview",
      "Step 1",
      "Detailed Explanation",
      "Subsection: Layout Details",
      "Subsection: Technical Specifications",
      "Quick Facts",
      "Version",
      "1.0.0",
      "Release Date",
      "2023-10-01",
      "License",
      "MIT",
      "Footer",
      "Use of semantic HTML elements",
      "Clear division of content areas",
      "Consistent styling without external dependencies"
    ],
    "rendering": true
  },
  {
    "task_id": "110103",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following React code to Angular code.\n\n<code>\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\", maxWidth: \"800px\", margin: \"0 auto\" }}>\n      <header>\n        <h1 style={{ textAlign: \"center\", marginBottom: \"10px\" }}>Main Dashboard</h1>\n        <p style={{ textAlign: \"center\", color: \"#555\" }}>\n          Welcome to the Dashboard! Here you can see the latest project updates and team information.\n        </p>\n      </header>\n\n      <section style={{ marginTop: \"30px\" }}>\n        <h2 style={{ borderBottom: \"2px solid #ddd\", paddingBottom: \"5px\" }}>Project Overview</h2>\n        \n        <article style={{ border: \"1px solid #ccc\", padding: \"15px\", marginTop: \"15px\" }}>\n          <h3>Project Alpha</h3>\n          <p><strong>Status:</strong> In Progress</p>\n          <p><strong>Deadline:</strong> December 31, 2023</p>\n          <ul>\n            <li>Requirement Analysis</li>\n            <li>UI/UX Design</li>\n            <li>Implementation Phase</li>\n            <li>Testing and QA</li>\n          </ul>\n        </article>\n        \n        <article style={{ border: \"1px solid #ccc\", padding: \"15px\", marginTop: \"15px\" }}>\n          <h3>Project Beta</h3>\n          <p><strong>Status:</strong> Completed</p>\n          <p><strong>Success Rate:</strong> 95%</p>\n          <ul>\n            <li>Conceptualization</li>\n            <li>Development</li>\n            <li>Review and Audit</li>\n            <li>Deployment</li>\n          </ul>\n        </article>\n      </section>\n\n      <section style={{ marginTop: \"30px\" }}>\n        <h2 style={{ borderBottom: \"2px solid #ddd\", paddingBottom: \"5px\" }}>Team Members</h2>\n        <table style={{ width: \"100%\", marginTop: \"15px\", borderCollapse: \"collapse\" }}>\n          <thead>\n            <tr>\n              <th style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>Name</th>\n              <th style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>Role</th>\n              <th style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>Experience</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>Alice</td>\n              <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>Team Lead</td>\n              <td style",
    "feature_requirements": "\u2022 A header section containing a prominently displayed title \"Main Dashboard\" and a subtext \"Welcome to the Dashboard! Here you can see the latest project updates and team information.\"\n\n\u2022 A section labeled \"Project Overview\" with a secondary heading that clearly separates it from other sections.\n\n\u2022 Within \"Project Overview\", two distinct article blocks:\n\u2003\u2003\u2013 The first article includes a subheading \"Project Alpha,\" followed by text indicating \"Status: In Progress\" and \"Deadline: December 31, 2023,\" and a bullet list with four items: \"Requirement Analysis,\" \"UI/UX Design,\" \"Implementation Phase,\" and \"Testing and QA.\"\n\u2003\u2003\u2013 The second article includes a subheading \"Project Beta,\" followed by text indicating \"Status: Completed\" and \"Success Rate: 95%,\" and a bullet list with four items: \"Conceptualization,\" \"Development,\" \"Review and Audit,\" and \"Deployment.\"\n\n\u2022 A separate section labeled \"Team Members\" featuring a secondary heading to identify the content.\n\n\u2022 A table within the \"Team Members\" section that includes a header row with three columns: \"Name,\" \"Role,\" and \"Experience,\" followed by at least one data row detailing a team member (e.g., \"Alice\" as the Name and \"Team Lead\" as the Role).",
    "task_name": "Convert React to Angular",
    "input_type": "React",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the main title displayed in the header section?",
        "answer": "Main Dashboard"
      },
      {
        "question": "What subtext is shown below the main title?",
        "answer": "Welcome to the Dashboard! Here you can see the latest project updates and team information."
      },
      {
        "question": "What is the label of the section containing project details?",
        "answer": "Project Overview"
      },
      {
        "question": "How many project articles are included in the Project Overview section?",
        "answer": "2"
      },
      {
        "question": "What is the subheading of the first project article?",
        "answer": "Project Alpha"
      },
      {
        "question": "What key details are provided for Project Alpha?",
        "answer": "Status: In Progress; Deadline: December 31, 2023"
      },
      {
        "question": "What are the bullet list items under Project Alpha?",
        "answer": "Requirement Analysis, UI/UX Design, Implementation Phase, Testing and QA"
      },
      {
        "question": "What is the subheading of the second project article?",
        "answer": "Project Beta"
      },
      {
        "question": "What key details are provided for Project Beta?",
        "answer": "Status: Completed; Success Rate: 95%"
      },
      {
        "question": "What are the bullet list items under Project Beta?",
        "answer": "Conceptualization, Development, Review and Audit, Deployment"
      },
      {
        "question": "Which section includes the table for team member information?",
        "answer": "Team Members"
      },
      {
        "question": "What are the column headers in the Team Members table?",
        "answer": "Name, Role, Experience"
      }
    ],
    "raw_output_metric": [
      "Main Dashboard",
      "Welcome to the Dashboard! Here you can see the latest project updates and team information.",
      "Project Overview",
      "Project Alpha",
      "Status: In Progress",
      "Deadline: December 31, 2023",
      "Requirement Analysis",
      "UI/UX Design",
      "Implementation Phase",
      "Testing and QA",
      "Project Beta",
      "Status: Completed",
      "Success Rate: 95%",
      "Conceptualization",
      "Development",
      "Review and Audit",
      "Deployment",
      "Team Members",
      "Name",
      "Role",
      "Experience",
      "Alice",
      "Team Lead"
    ],
    "rendering": true
  },
  {
    "task_id": "110104",
    "query": "Please output Angular (define the component's template and styles inline, directly inside the component code, do not use any external dependencies or libraries):\n\nTask:\nConvert the following React code to Angular code.\n\n<code>\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif', color: '#333' }}>\n      <header style={{ textAlign: 'center', marginBottom: '40px' }}>\n        <h1>Dashboard Overview</h1>\n        <p>A quick summary of current system metrics and user activity.</p>\n      </header>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>System Metrics</h2>\n        <div style={{ margin: '20px 0' }}>\n          <h3>Performance</h3>\n          <p>\n            <strong>Uptime:</strong> 99.98%\n          </p>\n          <p>\n            <strong>Average Load:</strong> 2.35 (past hour)\n          </p>\n        </div>\n        <div style={{ margin: '20px 0' }}>\n          <h3>Disk Space Usage</h3>\n          <ul style={{ listStyleType: 'none', paddingLeft: 0 }}>\n            <li>\n              <span style={{ fontWeight: 'bold' }}>Used:</span> 120GB\n            </li>\n            <li>\n              <span style={{ fontWeight: 'bold' }}>Available:</span> 480GB\n            </li>\n            <li>\n              <span style={{ fontWeight: 'bold' }}>Total Capacity:</span> 600GB\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>User Activity</h2>\n        <article style={{ marginBottom: '20px' }}>\n          <h3>Recent Logins</h3>\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead>\n              <tr>\n                <th style={{ border: '1px solid #aaa', padding: '8px', backgroundColor: '#f0f0f0' }}>Username</th>\n                <th style={{ border: '1px solid #aaa', padding: '8px', backgroundColor: '#f0f0f0' }}>Date</th>\n                <th style={{ border: '1px solid #aaa', padding: '8px', backgroundColor: '#f0f0f0' }}>IP Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>alice</td>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>2023-10-01</td>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>192.168.1.10</td>\n              </tr>\n              <tr>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>bob</td>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>2023-10-02</td>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>192.168.1.15</td>\n              </tr>\n              <tr>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>charlie</td>\n                <td style={{ border: '1px solid #aaa', padding: '8px' }}>2023-10-03</td>\n                <td style={{ border: '1px solid #aaa',",
    "feature_requirements": "\u2022 A top-level header section featuring a level-one heading with the text \"Dashboard Overview\" and an accompanying paragraph with the description \"A quick summary of current system metrics and user activity.\"\n\n\u2022 A section titled \"System Metrics\" that contains two distinct subsections: one for performance data and another for disk space usage.\n\n\u2022 A subsection under \"System Metrics\" with a level-three heading labeled \"Performance\" that displays two pieces of information: \"Uptime: 99.98%\" and \"Average Load: 2.35 (past hour)\".\n\n\u2022 Another subsection under \"System Metrics\" with a level-three heading labeled \"Disk Space Usage\" that includes a list of three items: \"Used: 120GB\", \"Available: 480GB\", and \"Total Capacity: 600GB\".\n\n\u2022 A separate section titled \"User Activity\" that contains an article with a level-three heading titled \"Recent Logins\".\n\n\u2022 Within the \"Recent Logins\" article, a table is presented which includes a header row with the labels \"Username\", \"Date\", and \"IP Address\".\n\n\u2022 The table includes data rows corresponding to individual user logins, specifically one row for \"alice\" with the date \"2023-10-01\" and IP \"192.168.1.10\", a second row for \"bob\" with the date \"2023-10-02\" and IP \"192.168.1.15\", and a third row for \"charlie\" with the date \"2023-10-03\" and an associated IP address.",
    "task_name": "Convert React to Angular",
    "input_type": "React",
    "output_type": "Angular",
    "query_example": "",
    "VQA": [
      {
        "question": "What is the text of the level-one heading in the header section?",
        "answer": "Dashboard Overview"
      },
      {
        "question": "What description is shown under the top header?",
        "answer": "A quick summary of current system metrics and user activity."
      },
      {
        "question": "What are the titles of the two subsections within the System Metrics section?",
        "answer": "Performance and Disk Space Usage"
      },
      {
        "question": "What details are displayed under the 'Performance' heading?",
        "answer": "Uptime: 99.98% and Average Load: 2.35 (past hour)"
      },
      {
        "question": "How many items are listed in the 'Disk Space Usage' subsection?",
        "answer": "Three"
      },
      {
        "question": "What are the list items under 'Disk Space Usage'?",
        "answer": "Used: 120GB, Available: 480GB, Total Capacity: 600GB"
      },
      {
        "question": "What header labels are shown in the 'Recent Logins' table?",
        "answer": "Username, Date, IP Address"
      },
      {
        "question": "How many data rows are present in the 'Recent Logins' table?",
        "answer": "Three"
      }
    ],
    "raw_output_metric": [
      "Dashboard Overview",
      "A quick summary of current system metrics and user activity.",
      "System Metrics",
      "Performance",
      "Uptime: 99.98%",
      "Average Load: 2.35 (past hour)",
      "Disk Space Usage",
      "Used: 120GB",
      "Available: 480GB",
      "Total Capacity: 600GB",
      "User Activity",
      "Recent Logins",
      "Username",
      "Date",
      "IP Address",
      "alice",
      "2023-10-01",
      "192.168.1.10",
      "bob",
      "2023-10-02",
      "192.168.1.15",
      "charlie",
      "2023-10-03"
    ],
    "rendering": true
  }
]